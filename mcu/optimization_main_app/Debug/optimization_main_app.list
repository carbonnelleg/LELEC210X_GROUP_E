
optimization_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e70  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012d04  08009020  08009020  0000a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bd24  0801bd24  0001d468  2**0
                  CONTENTS
  4 .ARM          00000008  0801bd24  0801bd24  0001cd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bd2c  0801bd2c  0001d468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bd2c  0801bd2c  0001cd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801bd30  0801bd30  0001cd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  0801bd34  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f1c  20000468  0801c19c  0001d468  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002384  0801c19c  0001e384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d468  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c1f4  00000000  00000000  0001d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006cc4  00000000  00000000  0005968c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001b092  00000000  00000000  00060350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  0007b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00005e76  00000000  00000000  0007cba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030da3  00000000  00000000  00082a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00048ac2  00000000  00000000  000b37c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00123b10  00000000  00000000  000fc283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0021fd93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f78  00000000  00000000  0021fe50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00224dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00006aac  00000000  00000000  00224e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00001038  00000000  00000000  0022b8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000468 	.word	0x20000468
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009008 	.word	0x08009008

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000046c 	.word	0x2000046c
 80001ec:	08009008 	.word	0x08009008

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000582:	4827      	ldr	r0, [pc, #156]	@ (8000620 <MX_ADC1_Init+0xa0>)
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <MX_ADC1_Init+0xa4>)
 8000586:	6002      	str	r2, [r0, #0]
{
 8000588:	b08a      	sub	sp, #40	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800058a:	f44f 11a0 	mov.w	r1, #1310720	@ 0x140000
  ADC_MultiModeTypeDef multimode = {0};
 800058e:	2300      	movs	r3, #0
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000590:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000592:	6041      	str	r1, [r0, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000594:	2404      	movs	r4, #4
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000596:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 800059a:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
  ADC_MultiModeTypeDef multimode = {0};
 800059e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80005a6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80005aa:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b2:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005b6:	e9c0 1c0a 	strd	r1, ip, [r0, #40]	@ 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	9309      	str	r3, [sp, #36]	@ 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005bc:	8303      	strh	r3, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 80005be:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c0:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c4:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c8:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ca:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ce:	f002 fb6f 	bl	8002cb0 <HAL_ADC_Init>
 80005d2:	b9d0      	cbnz	r0, 800060a <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d4:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005d6:	4812      	ldr	r0, [pc, #72]	@ (8000620 <MX_ADC1_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d8:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005da:	a901      	add	r1, sp, #4
 80005dc:	f003 f8d2 	bl	8003784 <HAL_ADCEx_MultiModeConfigChannel>
 80005e0:	b9d0      	cbnz	r0, 8000618 <MX_ADC1_Init+0x98>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005e2:	f04f 0e00 	mov.w	lr, #0
  sConfig.Channel = ADC_CHANNEL_5;
 80005e6:	4a10      	ldr	r2, [pc, #64]	@ (8000628 <MX_ADC1_Init+0xa8>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e8:	480d      	ldr	r0, [pc, #52]	@ (8000620 <MX_ADC1_Init+0xa0>)
  sConfig.Channel = ADC_CHANNEL_5;
 80005ea:	9204      	str	r2, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ec:	2406      	movs	r4, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ee:	237f      	movs	r3, #127	@ 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f0:	f04f 0c04 	mov.w	ip, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	a904      	add	r1, sp, #16
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005f6:	e9cd 4e05 	strd	r4, lr, [sp, #20]
  sConfig.Offset = 0;
 80005fa:	e9cd ce08 	strd	ip, lr, [sp, #32]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005fe:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	f002 fca8 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8000604:	b920      	cbnz	r0, 8000610 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000606:	b00a      	add	sp, #40	@ 0x28
 8000608:	bd10      	pop	{r4, pc}
    Error_Handler();
 800060a:	f000 fc03 	bl	8000e14 <Error_Handler>
 800060e:	e7e1      	b.n	80005d4 <MX_ADC1_Init+0x54>
    Error_Handler();
 8000610:	f000 fc00 	bl	8000e14 <Error_Handler>
}
 8000614:	b00a      	add	sp, #40	@ 0x28
 8000616:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000618:	f000 fbfc 	bl	8000e14 <Error_Handler>
 800061c:	e7e1      	b.n	80005e2 <MX_ADC1_Init+0x62>
 800061e:	bf00      	nop
 8000620:	200004cc 	.word	0x200004cc
 8000624:	50040000 	.word	0x50040000
 8000628:	14f00020 	.word	0x14f00020

0800062c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	4604      	mov	r4, r0
 8000630:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	228c      	movs	r2, #140	@ 0x8c
 8000636:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800063c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000640:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000642:	f007 fffd 	bl	8008640 <memset>
  if(adcHandle->Instance==ADC1)
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <HAL_ADC_MspInit+0xb8>)
 8000648:	6822      	ldr	r2, [r4, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	d001      	beq.n	8000652 <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800064e:	b02a      	add	sp, #168	@ 0xa8
 8000650:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000652:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000656:	f04f 5540 	mov.w	r5, #805306368	@ 0x30000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065a:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800065c:	9107      	str	r1, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800065e:	9526      	str	r5, [sp, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000660:	f004 fcd8 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 8000664:	2800      	cmp	r0, #0
 8000666:	d136      	bne.n	80006d6 <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000668:	481f      	ldr	r0, [pc, #124]	@ (80006e8 <HAL_ADC_MspInit+0xbc>)
 800066a:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
 800066c:	f446 5300 	orr.w	r3, r6, #8192	@ 0x2000
 8000670:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8000672:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8000674:	f402 5500 	and.w	r5, r2, #8192	@ 0x2000
 8000678:	9500      	str	r5, [sp, #0]
 800067a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 800067e:	4d1b      	ldr	r5, [pc, #108]	@ (80006ec <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	f046 0301 	orr.w	r3, r6, #1
 8000684:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8000686:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8000688:	f000 0201 	and.w	r2, r0, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	9201      	str	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000692:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000698:	2303      	movs	r3, #3
 800069a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f003 fd4f 	bl	8004144 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80006a6:	4912      	ldr	r1, [pc, #72]	@ (80006f0 <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80006ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006b0:	e9c5 1600 	strd	r1, r6, [r5]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006b4:	e9c5 0205 	strd	r0, r2, [r5, #20]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006b8:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ba:	2120      	movs	r1, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006bc:	4628      	mov	r0, r5
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006be:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006c2:	e9c5 1607 	strd	r1, r6, [r5, #28]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006c6:	612b      	str	r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c8:	f003 fc3c 	bl	8003f44 <HAL_DMA_Init>
 80006cc:	b930      	cbnz	r0, 80006dc <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ce:	6525      	str	r5, [r4, #80]	@ 0x50
 80006d0:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80006d2:	b02a      	add	sp, #168	@ 0xa8
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80006d6:	f000 fb9d 	bl	8000e14 <Error_Handler>
 80006da:	e7c5      	b.n	8000668 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 80006dc:	f000 fb9a 	bl	8000e14 <Error_Handler>
 80006e0:	e7f5      	b.n	80006ce <HAL_ADC_MspInit+0xa2>
 80006e2:	bf00      	nop
 80006e4:	50040000 	.word	0x50040000
 80006e8:	40021000 	.word	0x40021000
 80006ec:	20000484 	.word	0x20000484
 80006f0:	40020008 	.word	0x40020008

080006f4 <send_spectrogram>:
	}
}
#endif

// Function to create and send the packet
static void send_spectrogram() {
 80006f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006f8:	4b4c      	ldr	r3, [pc, #304]	@ (800082c <send_spectrogram+0x138>)
 80006fa:	f5ad 6d1b 	sub.w	sp, sp, #2480	@ 0x9b0
    uint8_t *ptr = packet + PACKET_HEADER_LENGTH;
 80006fe:	aa03      	add	r2, sp, #12
 8000700:	afcb      	add	r7, sp, #812	@ 0x32c
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 8000702:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8000706:	f9b3 a000 	ldrsh.w	sl, [r3]
 800070a:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800070e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8000712:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 8000716:	f9b3 e00e 	ldrsh.w	lr, [r3, #14]
 800071a:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800071e:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
 8000722:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 8000726:	f9b3 801e 	ldrsh.w	r8, [r3, #30]
 800072a:	b2b6      	uxth	r6, r6
 800072c:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8000730:	ba36      	rev	r6, r6
 8000732:	fa1f fa85 	uxth.w	sl, r5
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 8000736:	f842 6b28 	str.w	r6, [r2], #40
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 800073a:	ea4a 4509 	orr.w	r5, sl, r9, lsl #16
 800073e:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8000742:	f9b3 a00c 	ldrsh.w	sl, [r3, #12]
 8000746:	fa1f fe8e 	uxth.w	lr, lr
 800074a:	b2a4      	uxth	r4, r4
 800074c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000750:	ea4e 460a 	orr.w	r6, lr, sl, lsl #16
 8000754:	fa96 fa86 	rev.w	sl, r6
 8000758:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 800075c:	f9b3 e010 	ldrsh.w	lr, [r3, #16]
 8000760:	b280      	uxth	r0, r0
 8000762:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000766:	f9b3 6018 	ldrsh.w	r6, [r3, #24]
 800076a:	fa1f fc8c 	uxth.w	ip, ip
 800076e:	b289      	uxth	r1, r1
 8000770:	fa95 f985 	rev.w	r9, r5
 8000774:	ea4c 450e 	orr.w	r5, ip, lr, lsl #16
 8000778:	ea41 4c06 	orr.w	ip, r1, r6, lsl #16
 800077c:	f9b3 e026 	ldrsh.w	lr, [r3, #38]	@ 0x26
 8000780:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 8000784:	f842 9c24 	str.w	r9, [r2, #-36]
 8000788:	fa9c f68c 	rev.w	r6, ip
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 800078c:	f9b3 c022 	ldrsh.w	ip, [r3, #34]	@ 0x22
 8000790:	f9b3 9020 	ldrsh.w	r9, [r3, #32]
 8000794:	fa1f f888 	uxth.w	r8, r8
 8000798:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
 800079c:	fa1f f18c 	uxth.w	r1, ip
 80007a0:	fa1f fc8e 	uxth.w	ip, lr
 80007a4:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	@ 0x24
 80007a8:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80007ac:	ea4c 490e 	orr.w	r9, ip, lr, lsl #16
 80007b0:	ba24      	rev	r4, r4
            *ptr++ = pair & 0xFF;                // Second value low byte
 80007b2:	ba2d      	rev	r5, r5
 80007b4:	ba00      	rev	r0, r0
 80007b6:	fa98 f888 	rev.w	r8, r8
 80007ba:	ba09      	rev	r1, r1
 80007bc:	fa99 fc89 	rev.w	ip, r9
    for (size_t i=0; i<N_MELVECS; i++) {
 80007c0:	42ba      	cmp	r2, r7
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 80007c2:	e942 4a08 	strd	r4, sl, [r2, #-32]
 80007c6:	e942 5006 	strd	r5, r0, [r2, #-24]
 80007ca:	e942 6804 	strd	r6, r8, [r2, #-16]
 80007ce:	e942 1c02 	strd	r1, ip, [r2, #-8]
    for (size_t i=0; i<N_MELVECS; i++) {
 80007d2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80007d6:	d194      	bne.n	8000702 <send_spectrogram+0xe>
	make_packet(packet, PAYLOAD_LENGTH, SENDER_ID, *packet_cnt);
 80007d8:	4f15      	ldr	r7, [pc, #84]	@ (8000830 <send_spectrogram+0x13c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80007e2:	a801      	add	r0, sp, #4
 80007e4:	f000 fc8a 	bl	80010fc <make_packet>
	*packet_cnt += 1;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	603b      	str	r3, [r7, #0]
	if (*packet_cnt == 0) {
 80007ee:	b1bb      	cbz	r3, 8000820 <send_spectrogram+0x12c>

	START_CYCLE_COUNT_ENCODE_PACKET();
	encode_packet(packet, &packet_cnt);
	STOP_CYCLE_COUNT_ENCODE_PACKET("Encode Packet");

	START_CYCLE_COUNT_SEND_PACKET();
 80007f0:	f002 f8e8 	bl	80029c4 <start_cycle_count>
	S2LP_Send(packet, PACKET_LENGTH);
 80007f4:	f44f 714e 	mov.w	r1, #824	@ 0x338
 80007f8:	a801      	add	r0, sp, #4
 80007fa:	f000 fe05 	bl	8001408 <S2LP_Send>
	STOP_CYCLE_COUNT_SEND_PACKET("Send Packet to S2LP");
 80007fe:	480d      	ldr	r0, [pc, #52]	@ (8000834 <send_spectrogram+0x140>)
 8000800:	f002 f900 	bl	8002a04 <stop_cycle_count>
	hex_encode(hex_encoded_packet, packet, PACKET_LENGTH);
 8000804:	a8cf      	add	r0, sp, #828	@ 0x33c
 8000806:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800080a:	a901      	add	r1, sp, #4
 800080c:	f002 f916 	bl	8002a3c <hex_encode>
	DEBUG_PRINT("DF:HEX:%s\r\n", hex_encoded_packet);
 8000810:	a9cf      	add	r1, sp, #828	@ 0x33c
 8000812:	4809      	ldr	r0, [pc, #36]	@ (8000838 <send_spectrogram+0x144>)
 8000814:	f007 fd18 	bl	8008248 <iprintf>

	print_encoded_packet(packet);
}
 8000818:	f50d 6d1b 	add.w	sp, sp, #2480	@ 0x9b0
 800081c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		DEBUG_PRINT("Packet counter overflow.\r\n");
 8000820:	4806      	ldr	r0, [pc, #24]	@ (800083c <send_spectrogram+0x148>)
 8000822:	f007 fd79 	bl	8008318 <puts>
		Error_Handler();
 8000826:	f000 faf5 	bl	8000e14 <Error_Handler>
 800082a:	e7e1      	b.n	80007f0 <send_spectrogram+0xfc>
 800082c:	2000053c 	.word	0x2000053c
 8000830:	20000538 	.word	0x20000538
 8000834:	080092e0 	.word	0x080092e0
 8000838:	080092f4 	.word	0x080092f4
 800083c:	080092c4 	.word	0x080092c4

08000840 <StartADCAcq>:
int StartADCAcq(int32_t n_bufs) {
 8000840:	b508      	push	{r3, lr}
	cur_melvec = 0;
 8000842:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <StartADCAcq+0x20>)
	rem_n_bufs = n_bufs;
 8000844:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <StartADCAcq+0x24>)
	cur_melvec = 0;
 8000846:	2100      	movs	r1, #0
	rem_n_bufs = n_bufs;
 8000848:	6018      	str	r0, [r3, #0]
	cur_melvec = 0;
 800084a:	7011      	strb	r1, [r2, #0]
	if (rem_n_bufs != 0) {
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	b900      	cbnz	r0, 8000852 <StartADCAcq+0x12>
}
 8000850:	bd08      	pop	{r3, pc}
		return HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDoubleBuf, 2*ADC_BUF_SIZE);
 8000852:	4905      	ldr	r1, [pc, #20]	@ (8000868 <StartADCAcq+0x28>)
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <StartADCAcq+0x2c>)
 8000856:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800085a:	f002 fe8f 	bl	800357c <HAL_ADC_Start_DMA>
}
 800085e:	bd08      	pop	{r3, pc}
 8000860:	2000085c 	.word	0x2000085c
 8000864:	20000534 	.word	0x20000534
 8000868:	20000c64 	.word	0x20000c64
 800086c:	200004cc 	.word	0x200004cc

08000870 <IsADCFinished>:
	return (rem_n_bufs == 0);
 8000870:	4b02      	ldr	r3, [pc, #8]	@ (800087c <IsADCFinished+0xc>)
 8000872:	6818      	ldr	r0, [r3, #0]
}
 8000874:	fab0 f180 	clz	r1, r0
 8000878:	0948      	lsrs	r0, r1, #5
 800087a:	4770      	bx	lr
 800087c:	20000534 	.word	0x20000534

08000880 <HAL_ADC_ConvCpltCallback>:
        #endif
    }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000880:	b570      	push	{r4, r5, r6, lr}
    if (rem_n_bufs != -1) {
 8000882:	4c1c      	ldr	r4, [pc, #112]	@ (80008f4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000884:	6823      	ldr	r3, [r4, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	d002      	beq.n	8000890 <HAL_ADC_ConvCpltCallback+0x10>
        rem_n_bufs--;
 800088a:	6820      	ldr	r0, [r4, #0]
 800088c:	1e41      	subs	r1, r0, #1
 800088e:	6021      	str	r1, [r4, #0]
    if (ADCDataRdy[1-buf_cplt]) {
 8000890:	4e19      	ldr	r6, [pc, #100]	@ (80008f8 <HAL_ADC_ConvCpltCallback+0x78>)
 8000892:	7832      	ldrb	r2, [r6, #0]
 8000894:	bb42      	cbnz	r2, 80008e8 <HAL_ADC_ConvCpltCallback+0x68>
    ADCDataRdy[buf_cplt] = 1;
 8000896:	2501      	movs	r5, #1
 8000898:	7075      	strb	r5, [r6, #1]
    START_CYCLE_COUNT_SPECTROGRAM();
 800089a:	f002 f893 	bl	80029c4 <start_cycle_count>
	Spectrogram_Compute((q15_t *)ADCProcessBuf, mel_vectors[cur_melvec]);
 800089e:	4d17      	ldr	r5, [pc, #92]	@ (80008fc <HAL_ADC_ConvCpltCallback+0x7c>)
	memcpy((void*)ADCProcessBuf, (void*)ADCData[buf_cplt], ADC_BUF_SIZE * sizeof(uint16_t));
 80008a0:	4917      	ldr	r1, [pc, #92]	@ (8000900 <HAL_ADC_ConvCpltCallback+0x80>)
 80008a2:	4818      	ldr	r0, [pc, #96]	@ (8000904 <HAL_ADC_ConvCpltCallback+0x84>)
 80008a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008a8:	f007 ff55 	bl	8008756 <memcpy>
	Spectrogram_Format((q15_t *)ADCProcessBuf);
 80008ac:	4815      	ldr	r0, [pc, #84]	@ (8000904 <HAL_ADC_ConvCpltCallback+0x84>)
 80008ae:	f001 fd87 	bl	80023c0 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCProcessBuf, mel_vectors[cur_melvec]);
 80008b2:	782b      	ldrb	r3, [r5, #0]
 80008b4:	4814      	ldr	r0, [pc, #80]	@ (8000908 <HAL_ADC_ConvCpltCallback+0x88>)
 80008b6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80008ba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80008be:	4811      	ldr	r0, [pc, #68]	@ (8000904 <HAL_ADC_ConvCpltCallback+0x84>)
 80008c0:	f001 fdf6 	bl	80024b0 <Spectrogram_Compute>
    STOP_CYCLE_COUNT_SPECTROGRAM("Full Spectrogram");
 80008c4:	4811      	ldr	r0, [pc, #68]	@ (800090c <HAL_ADC_ConvCpltCallback+0x8c>)
 80008c6:	f002 f89d 	bl	8002a04 <stop_cycle_count>
    cur_melvec++;
 80008ca:	782b      	ldrb	r3, [r5, #0]
 80008cc:	3301      	adds	r3, #1
    ADCDataRdy[buf_cplt] = 0;
 80008ce:	2200      	movs	r2, #0
    cur_melvec++;
 80008d0:	b2d8      	uxtb	r0, r3
 80008d2:	7028      	strb	r0, [r5, #0]
    ADCDataRdy[buf_cplt] = 0;
 80008d4:	7072      	strb	r2, [r6, #1]
    if (rem_n_bufs == 0) {
 80008d6:	6826      	ldr	r6, [r4, #0]
 80008d8:	b106      	cbz	r6, 80008dc <HAL_ADC_ConvCpltCallback+0x5c>
	ADC_Callback(1);
}
 80008da:	bd70      	pop	{r4, r5, r6, pc}
			send_spectrogram();
 80008dc:	f7ff ff0a 	bl	80006f4 <send_spectrogram>
            rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 80008e0:	2114      	movs	r1, #20
            cur_melvec = 0;
 80008e2:	702e      	strb	r6, [r5, #0]
            rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 80008e4:	6021      	str	r1, [r4, #0]
}
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
        DEBUG_PRINT("Error: ADC Data buffer full\r\n");
 80008e8:	4809      	ldr	r0, [pc, #36]	@ (8000910 <HAL_ADC_ConvCpltCallback+0x90>)
 80008ea:	f007 fd15 	bl	8008318 <puts>
        Error_Handler();
 80008ee:	f000 fa91 	bl	8000e14 <Error_Handler>
 80008f2:	e7d0      	b.n	8000896 <HAL_ADC_ConvCpltCallback+0x16>
 80008f4:	20000534 	.word	0x20000534
 80008f8:	20000c60 	.word	0x20000c60
 80008fc:	2000085c 	.word	0x2000085c
 8000900:	20001064 	.word	0x20001064
 8000904:	20000860 	.word	0x20000860
 8000908:	2000053c 	.word	0x2000053c
 800090c:	08009320 	.word	0x08009320
 8000910:	08009300 	.word	0x08009300

08000914 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000914:	b570      	push	{r4, r5, r6, lr}
    if (rem_n_bufs != -1) {
 8000916:	4c1c      	ldr	r4, [pc, #112]	@ (8000988 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	d002      	beq.n	8000924 <HAL_ADC_ConvHalfCpltCallback+0x10>
        rem_n_bufs--;
 800091e:	6820      	ldr	r0, [r4, #0]
 8000920:	1e41      	subs	r1, r0, #1
 8000922:	6021      	str	r1, [r4, #0]
    if (ADCDataRdy[1-buf_cplt]) {
 8000924:	4e19      	ldr	r6, [pc, #100]	@ (800098c <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000926:	7872      	ldrb	r2, [r6, #1]
 8000928:	bb42      	cbnz	r2, 800097c <HAL_ADC_ConvHalfCpltCallback+0x68>
    ADCDataRdy[buf_cplt] = 1;
 800092a:	2501      	movs	r5, #1
 800092c:	7035      	strb	r5, [r6, #0]
    START_CYCLE_COUNT_SPECTROGRAM();
 800092e:	f002 f849 	bl	80029c4 <start_cycle_count>
	Spectrogram_Compute((q15_t *)ADCProcessBuf, mel_vectors[cur_melvec]);
 8000932:	4d17      	ldr	r5, [pc, #92]	@ (8000990 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
	memcpy((void*)ADCProcessBuf, (void*)ADCData[buf_cplt], ADC_BUF_SIZE * sizeof(uint16_t));
 8000934:	4917      	ldr	r1, [pc, #92]	@ (8000994 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8000936:	4818      	ldr	r0, [pc, #96]	@ (8000998 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000938:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800093c:	f007 ff0b 	bl	8008756 <memcpy>
	Spectrogram_Format((q15_t *)ADCProcessBuf);
 8000940:	4815      	ldr	r0, [pc, #84]	@ (8000998 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000942:	f001 fd3d 	bl	80023c0 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCProcessBuf, mel_vectors[cur_melvec]);
 8000946:	782b      	ldrb	r3, [r5, #0]
 8000948:	4814      	ldr	r0, [pc, #80]	@ (800099c <HAL_ADC_ConvHalfCpltCallback+0x88>)
 800094a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800094e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8000952:	4811      	ldr	r0, [pc, #68]	@ (8000998 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000954:	f001 fdac 	bl	80024b0 <Spectrogram_Compute>
    STOP_CYCLE_COUNT_SPECTROGRAM("Full Spectrogram");
 8000958:	4811      	ldr	r0, [pc, #68]	@ (80009a0 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 800095a:	f002 f853 	bl	8002a04 <stop_cycle_count>
    cur_melvec++;
 800095e:	782b      	ldrb	r3, [r5, #0]
 8000960:	3301      	adds	r3, #1
    ADCDataRdy[buf_cplt] = 0;
 8000962:	2200      	movs	r2, #0
    cur_melvec++;
 8000964:	b2d8      	uxtb	r0, r3
 8000966:	7028      	strb	r0, [r5, #0]
    ADCDataRdy[buf_cplt] = 0;
 8000968:	7032      	strb	r2, [r6, #0]
    if (rem_n_bufs == 0) {
 800096a:	6826      	ldr	r6, [r4, #0]
 800096c:	b106      	cbz	r6, 8000970 <HAL_ADC_ConvHalfCpltCallback+0x5c>
	ADC_Callback(0);
}
 800096e:	bd70      	pop	{r4, r5, r6, pc}
			send_spectrogram();
 8000970:	f7ff fec0 	bl	80006f4 <send_spectrogram>
            rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 8000974:	2114      	movs	r1, #20
            cur_melvec = 0;
 8000976:	702e      	strb	r6, [r5, #0]
            rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 8000978:	6021      	str	r1, [r4, #0]
}
 800097a:	bd70      	pop	{r4, r5, r6, pc}
        DEBUG_PRINT("Error: ADC Data buffer full\r\n");
 800097c:	4809      	ldr	r0, [pc, #36]	@ (80009a4 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 800097e:	f007 fccb 	bl	8008318 <puts>
        Error_Handler();
 8000982:	f000 fa47 	bl	8000e14 <Error_Handler>
 8000986:	e7d0      	b.n	800092a <HAL_ADC_ConvHalfCpltCallback+0x16>
 8000988:	20000534 	.word	0x20000534
 800098c:	20000c60 	.word	0x20000c60
 8000990:	2000085c 	.word	0x2000085c
 8000994:	20000c64 	.word	0x20000c64
 8000998:	20000860 	.word	0x20000860
 800099c:	2000053c 	.word	0x2000053c
 80009a0:	08009320 	.word	0x08009320
 80009a4:	08009300 	.word	0x08009300

080009a8 <MX_AES_Init>:
/* AES init function */
void MX_AES_Init(void)
{

  /* USER CODE BEGIN AES_Init 0 */
  __HAL_RCC_AES_CLK_ENABLE();
 80009a8:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_AES_Init+0x60>)

  // only possible configuration for CMAC
  //hcryp.Init.OperatingMode = CRYP_ALGOMODE_TAG_GENERATION;

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80009aa:	4818      	ldr	r0, [pc, #96]	@ (8000a0c <MX_AES_Init+0x64>)
  __HAL_RCC_AES_CLK_ENABLE();
 80009ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  hcryp.Instance = AES;
 80009ae:	4918      	ldr	r1, [pc, #96]	@ (8000a10 <MX_AES_Init+0x68>)
{
 80009b0:	b510      	push	{r4, lr}
  __HAL_RCC_AES_CLK_ENABLE();
 80009b2:	f442 3480 	orr.w	r4, r2, #65536	@ 0x10000
 80009b6:	64dc      	str	r4, [r3, #76]	@ 0x4c
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  hcryp.Instance = AES;
 80009ba:	6001      	str	r1, [r0, #0]
{
 80009bc:	b082      	sub	sp, #8
  __HAL_RCC_AES_CLK_ENABLE();
 80009be:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 80009c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80009f8 <MX_AES_Init+0x50>
 80009c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8000a00 <MX_AES_Init+0x58>
  __HAL_RCC_AES_CLK_ENABLE();
 80009ca:	9201      	str	r2, [sp, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
  hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
  hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_AES_Init+0x6c>)
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 80009ce:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <MX_AES_Init+0x70>)
  __HAL_RCC_AES_CLK_ENABLE();
 80009d0:	9c01      	ldr	r4, [sp, #4]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 80009d2:	2100      	movs	r1, #0
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 80009d4:	ed80 7b02 	vstr	d7, [r0, #8]
 80009d8:	ed80 0b04 	vstr	d0, [r0, #16]
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 80009dc:	e9c0 2308 	strd	r2, r3, [r0, #32]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 80009e0:	6181      	str	r1, [r0, #24]
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80009e2:	f002 ffdd 	bl	80039a0 <HAL_CRYP_Init>
 80009e6:	b908      	cbnz	r0, 80009ec <MX_AES_Init+0x44>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80009e8:	b002      	add	sp, #8
 80009ea:	bd10      	pop	{r4, pc}
 80009ec:	b002      	add	sp, #8
 80009ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80009f2:	f000 ba0f 	b.w	8000e14 <Error_Handler>
 80009f6:	bf00      	nop
 80009f8:	00000004 	.word	0x00000004
	...
 8000a04:	00000020 	.word	0x00000020
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	20001468 	.word	0x20001468
 8000a10:	50060000 	.word	0x50060000
 8000a14:	08009334 	.word	0x08009334
 8000a18:	08009344 	.word	0x08009344

08000a1c <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_CRYP_MspInit+0x2c>)
 8000a1e:	6802      	ldr	r2, [r0, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d000      	beq.n	8000a26 <HAL_CRYP_MspInit+0xa>
 8000a24:	4770      	bx	lr
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8000a26:	f103 4070 	add.w	r0, r3, #4026531840	@ 0xf0000000
 8000a2a:	f5a0 317c 	sub.w	r1, r0, #258048	@ 0x3f000
{
 8000a2e:	b082      	sub	sp, #8
    __HAL_RCC_AES_CLK_ENABLE();
 8000a30:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8000a32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000a36:	64ca      	str	r2, [r1, #76]	@ 0x4c
 8000a38:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 8000a3a:	f400 3180 	and.w	r1, r0, #65536	@ 0x10000
 8000a3e:	9101      	str	r1, [sp, #4]
 8000a40:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8000a42:	b002      	add	sp, #8
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	50060000 	.word	0x50060000

08000a4c <HAL_CRYP_MspDeInit>:

void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <HAL_CRYP_MspDeInit+0x18>)
 8000a4e:	6802      	ldr	r2, [r0, #0]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d000      	beq.n	8000a56 <HAL_CRYP_MspDeInit+0xa>
    __HAL_RCC_AES_CLK_DISABLE();
  /* USER CODE BEGIN AES_MspDeInit 1 */

  /* USER CODE END AES_MspDeInit 1 */
  }
}
 8000a54:	4770      	bx	lr
    __HAL_RCC_AES_CLK_DISABLE();
 8000a56:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <HAL_CRYP_MspDeInit+0x1c>)
 8000a58:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8000a5a:	f421 3380 	bic.w	r3, r1, #65536	@ 0x10000
 8000a5e:	64c3      	str	r3, [r0, #76]	@ 0x4c
}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	50060000 	.word	0x50060000
 8000a68:	40021000 	.word	0x40021000

08000a6c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <MX_DMA_Init+0x2c>)
{
 8000a6e:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a70:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000a72:	f041 0101 	orr.w	r1, r1, #1
 8000a76:	6499      	str	r1, [r3, #72]	@ 0x48
 8000a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 8000a7a:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000a7c:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7e:	400b      	ands	r3, r1
 8000a80:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000a82:	200b      	movs	r0, #11
 8000a84:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a86:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000a88:	f002 fefc 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a8c:	200b      	movs	r0, #11

}
 8000a8e:	b003      	add	sp, #12
 8000a90:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a94:	f002 bf32 	b.w	80038fc <HAL_NVIC_EnableIRQ>
 8000a98:	40021000 	.word	0x40021000

08000a9c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	2400      	movs	r4, #0
{
 8000aa2:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000aa8:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aac:	4b98      	ldr	r3, [pc, #608]	@ (8000d10 <MX_GPIO_Init+0x274>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8000ab2:	4f98      	ldr	r7, [pc, #608]	@ (8000d14 <MX_GPIO_Init+0x278>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8000ab4:	f8df a26c 	ldr.w	sl, [pc, #620]	@ 8000d24 <MX_GPIO_Init+0x288>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8000ab8:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 8000d28 <MX_GPIO_Init+0x28c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000abc:	f8df 826c 	ldr.w	r8, [pc, #620]	@ 8000d2c <MX_GPIO_Init+0x290>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac0:	f042 0010 	orr.w	r0, r2, #16
 8000ac4:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8000ac6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000ac8:	f001 0510 	and.w	r5, r1, #16
 8000acc:	9500      	str	r5, [sp, #0]
 8000ace:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8000ad2:	f046 0204 	orr.w	r2, r6, #4
 8000ad6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ad8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000ada:	f000 0104 	and.w	r1, r0, #4
 8000ade:	9101      	str	r1, [sp, #4]
 8000ae0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae2:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000ae4:	f045 0620 	orr.w	r6, r5, #32
 8000ae8:	64de      	str	r6, [r3, #76]	@ 0x4c
 8000aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000aec:	f002 0020 	and.w	r0, r2, #32
 8000af0:	9002      	str	r0, [sp, #8]
 8000af2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000af6:	f041 0580 	orr.w	r5, r1, #128	@ 0x80
 8000afa:	64dd      	str	r5, [r3, #76]	@ 0x4c
 8000afc:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8000afe:	f006 0280 	and.w	r2, r6, #128	@ 0x80
 8000b02:	9203      	str	r2, [sp, #12]
 8000b04:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000b08:	f040 0101 	orr.w	r1, r0, #1
 8000b0c:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8000b0e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000b10:	f005 0601 	and.w	r6, r5, #1
 8000b14:	9604      	str	r6, [sp, #16]
 8000b16:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b1a:	f042 0002 	orr.w	r0, r2, #2
 8000b1e:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8000b20:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000b22:	f001 0502 	and.w	r5, r1, #2
 8000b26:	9505      	str	r5, [sp, #20]
 8000b28:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2a:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8000b2c:	f046 0240 	orr.w	r2, r6, #64	@ 0x40
 8000b30:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b32:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000b34:	f000 0140 	and.w	r1, r0, #64	@ 0x40
 8000b38:	9106      	str	r1, [sp, #24]
 8000b3a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000b3e:	f045 0608 	orr.w	r6, r5, #8
 8000b42:	64de      	str	r6, [r3, #76]	@ 0x4c
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b46:	4e74      	ldr	r6, [pc, #464]	@ (8000d18 <MX_GPIO_Init+0x27c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b48:	f003 0208 	and.w	r2, r3, #8
 8000b4c:	9207      	str	r2, [sp, #28]
 8000b4e:	9b07      	ldr	r3, [sp, #28]
  HAL_PWREx_EnableVddIO2();
 8000b50:	f003 fcb0 	bl	80044b4 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	4611      	mov	r1, r2
 8000b58:	4638      	mov	r0, r7
 8000b5a:	f003 fc0f 	bl	800437c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8000b5e:	4650      	mov	r0, sl
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b66:	f003 fc09 	bl	800437c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8000b6a:	4648      	mov	r0, r9
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b72:	f003 fc03 	bl	800437c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b76:	4622      	mov	r2, r4
 8000b78:	4640      	mov	r0, r8
 8000b7a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000b7e:	f003 fbfd 	bl	800437c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b82:	4622      	mov	r2, r4
 8000b84:	4630      	mov	r0, r6
 8000b86:	2140      	movs	r1, #64	@ 0x40
 8000b88:	f003 fbf8 	bl	800437c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b8c:	a908      	add	r1, sp, #32
 8000b8e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000b90:	f24d 72ff 	movw	r2, #55295	@ 0xd7ff
 8000b94:	2303      	movs	r3, #3
 8000b96:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b9c:	f003 fad2 	bl	8004144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	a908      	add	r1, sp, #32
 8000ba2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ba8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bac:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f003 fac7 	bl	8004144 <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bb6:	a908      	add	r1, sp, #32
 8000bb8:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bba:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bc6:	f003 fabd 	bl	8004144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000bca:	2209      	movs	r2, #9
 8000bcc:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bce:	a908      	add	r1, sp, #32
 8000bd0:	4852      	ldr	r0, [pc, #328]	@ (8000d1c <MX_GPIO_Init+0x280>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 8000bd4:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000bd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	f04f 0b03 	mov.w	fp, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bde:	f003 fab1 	bl	8004144 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000be2:	a908      	add	r1, sp, #32
 8000be4:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	e9cd 5508 	strd	r5, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f003 faa9 	bl	8004144 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000bf6:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f003 fa9f 	bl	8004144 <HAL_GPIO_Init>
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000c08:	f248 0236 	movw	r2, #32822	@ 0x8036
 8000c0c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000c12:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f003 fa94 	bl	8004144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000c1e:	2208      	movs	r2, #8
 8000c20:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000c28:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f003 fa89 	bl	8004144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c32:	f64b 7277 	movw	r2, #49015	@ 0xbf77
 8000c36:	2303      	movs	r3, #3
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	a908      	add	r1, sp, #32
 8000c3a:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8000c42:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f003 fa7d 	bl	8004144 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	4650      	mov	r0, sl
 8000c4c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8000c52:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f003 fa75 	bl	8004144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c5a:	f64f 621f 	movw	r2, #65055	@ 0xfe1f
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5e:	a908      	add	r1, sp, #32
 8000c60:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c62:	2303      	movs	r3, #3
 8000c64:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c6a:	f003 fa6b 	bl	8004144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8000c6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c72:	4648      	mov	r0, r9
 8000c74:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8000c76:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f003 fa61 	bl	8004144 <HAL_GPIO_Init>
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	4640      	mov	r0, r8
 8000c84:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c86:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c8e:	9208      	str	r2, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f003 fa57 	bl	8004144 <HAL_GPIO_Init>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c9c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	4820      	ldr	r0, [pc, #128]	@ (8000d20 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ca2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	f003 fa4d 	bl	8004144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000caa:	2220      	movs	r2, #32
 8000cac:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cae:	a908      	add	r1, sp, #32
 8000cb0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f003 fa44 	bl	8004144 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	a908      	add	r1, sp, #32
 8000cbe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cc0:	2640      	movs	r6, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cc8:	9608      	str	r6, [sp, #32]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cca:	f44f 55e8 	mov.w	r5, #7424	@ 0x1d00
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f003 fa39 	bl	8004144 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cd4:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	a908      	add	r1, sp, #32
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cdc:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ce2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	9709      	str	r7, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f003 fa2d 	bl	8004144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000cea:	4622      	mov	r2, r4
 8000cec:	4621      	mov	r1, r4
 8000cee:	2009      	movs	r0, #9
 8000cf0:	f002 fdc8 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cf4:	2009      	movs	r0, #9
 8000cf6:	f002 fe01 	bl	80038fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cfa:	4622      	mov	r2, r4
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	2028      	movs	r0, #40	@ 0x28
 8000d00:	f002 fdc0 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d04:	2028      	movs	r0, #40	@ 0x28
 8000d06:	f002 fdf9 	bl	80038fc <HAL_NVIC_EnableIRQ>

}
 8000d0a:	b00f      	add	sp, #60	@ 0x3c
 8000d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000800 	.word	0x48000800
 8000d18:	48001800 	.word	0x48001800
 8000d1c:	48001c00 	.word	0x48001c00
 8000d20:	48000c00 	.word	0x48000c00
 8000d24:	48001400 	.word	0x48001400
 8000d28:	48001000 	.word	0x48001000
 8000d2c:	48000400 	.word	0x48000400

08000d30 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin) {
 8000d30:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8000d34:	d002      	beq.n	8000d3c <HAL_GPIO_EXTI_Callback+0xc>
		btn_press = 1;
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
 8000d36:	2808      	cmp	r0, #8
 8000d38:	d004      	beq.n	8000d44 <HAL_GPIO_EXTI_Callback+0x14>
		S2LP_IRQ_Handler();
}
 8000d3a:	4770      	bx	lr
		btn_press = 1;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	@ (8000d48 <HAL_GPIO_EXTI_Callback+0x18>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	4770      	bx	lr
		S2LP_IRQ_Handler();
 8000d44:	f001 bb0a 	b.w	800235c <S2LP_IRQ_Handler>
 8000d48:	200014c8 	.word	0x200014c8

08000d4c <run>:
	}
}

void run(void)
{
	btn_press = 0;
 8000d4c:	4c2e      	ldr	r4, [pc, #184]	@ (8000e08 <run+0xbc>)
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 8000d4e:	4e2f      	ldr	r6, [pc, #188]	@ (8000e0c <run+0xc0>)
    #if NO_BUTTON == 1
      acquire_and_send_packet();
    #else
      // Wait for the button press
      while (!btn_press) {
        HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000d50:	4d2f      	ldr	r5, [pc, #188]	@ (8000e10 <run+0xc4>)
{
 8000d52:	b580      	push	{r7, lr}
	btn_press = 0;
 8000d54:	2700      	movs	r7, #0
 8000d56:	7027      	strb	r7, [r4, #0]
      while (!btn_press) {
 8000d58:	7823      	ldrb	r3, [r4, #0]
 8000d5a:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8000d5e:	b9a3      	cbnz	r3, 8000d8a <run+0x3e>
        HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000d60:	2180      	movs	r1, #128	@ 0x80
 8000d62:	2201      	movs	r2, #1
 8000d64:	4628      	mov	r0, r5
 8000d66:	f003 fb09 	bl	800437c <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000d6a:	20c8      	movs	r0, #200	@ 0xc8
 8000d6c:	f001 ff6a 	bl	8002c44 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000d70:	4642      	mov	r2, r8
 8000d72:	4628      	mov	r0, r5
 8000d74:	2180      	movs	r1, #128	@ 0x80
 8000d76:	f003 fb01 	bl	800437c <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000d7a:	20c8      	movs	r0, #200	@ 0xc8
 8000d7c:	f001 ff62 	bl	8002c44 <HAL_Delay>
      while (!btn_press) {
 8000d80:	7823      	ldrb	r3, [r4, #0]
 8000d82:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0ea      	beq.n	8000d60 <run+0x14>
      }
      btn_press = 0;
 8000d8a:	7027      	strb	r7, [r4, #0]
      #if (CONTINUOUS_ACQ == 1)
        // Continuous acquisition while the button is not pressed
        while (!btn_press) {
 8000d8c:	7820      	ldrb	r0, [r4, #0]
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d133      	bne.n	8000dfa <run+0xae>
	if (StartADCAcq(N_MELVECS) != HAL_OK) {
 8000d92:	2014      	movs	r0, #20
 8000d94:	f7ff fd54 	bl	8000840 <StartADCAcq>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d130      	bne.n	8000dfe <run+0xb2>
	while (!IsADCFinished()) {
 8000d9c:	f7ff fd68 	bl	8000870 <IsADCFinished>
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d1f3      	bne.n	8000d8c <run+0x40>
		__WFI();
 8000da4:	bf30      	wfi
	while (!IsADCFinished()) {
 8000da6:	f7ff fd63 	bl	8000870 <IsADCFinished>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d1ee      	bne.n	8000d8c <run+0x40>
		__WFI();
 8000dae:	bf30      	wfi
	while (!IsADCFinished()) {
 8000db0:	f7ff fd5e 	bl	8000870 <IsADCFinished>
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d1e9      	bne.n	8000d8c <run+0x40>
		__WFI();
 8000db8:	bf30      	wfi
	while (!IsADCFinished()) {
 8000dba:	f7ff fd59 	bl	8000870 <IsADCFinished>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d1e4      	bne.n	8000d8c <run+0x40>
		__WFI();
 8000dc2:	bf30      	wfi
	while (!IsADCFinished()) {
 8000dc4:	f7ff fd54 	bl	8000870 <IsADCFinished>
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1df      	bne.n	8000d8c <run+0x40>
		__WFI();
 8000dcc:	bf30      	wfi
	while (!IsADCFinished()) {
 8000dce:	f7ff fd4f 	bl	8000870 <IsADCFinished>
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	d1da      	bne.n	8000d8c <run+0x40>
		__WFI();
 8000dd6:	bf30      	wfi
	while (!IsADCFinished()) {
 8000dd8:	f7ff fd4a 	bl	8000870 <IsADCFinished>
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d1d5      	bne.n	8000d8c <run+0x40>
		__WFI();
 8000de0:	bf30      	wfi
	while (!IsADCFinished()) {
 8000de2:	f7ff fd45 	bl	8000870 <IsADCFinished>
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d1d0      	bne.n	8000d8c <run+0x40>
		__WFI();
 8000dea:	bf30      	wfi
	while (!IsADCFinished()) {
 8000dec:	f7ff fd40 	bl	8000870 <IsADCFinished>
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d0d7      	beq.n	8000da4 <run+0x58>
        while (!btn_press) {
 8000df4:	7820      	ldrb	r0, [r4, #0]
 8000df6:	2800      	cmp	r0, #0
 8000df8:	d0cb      	beq.n	8000d92 <run+0x46>
          acquire_and_send_packet();
        }
        btn_press = 0;
 8000dfa:	7027      	strb	r7, [r4, #0]
      while (!btn_press) {
 8000dfc:	e7ac      	b.n	8000d58 <run+0xc>
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 8000dfe:	4630      	mov	r0, r6
 8000e00:	f007 fa8a 	bl	8008318 <puts>
 8000e04:	e7ca      	b.n	8000d9c <run+0x50>
 8000e06:	bf00      	nop
 8000e08:	200014c8 	.word	0x200014c8
 8000e0c:	08009354 	.word	0x08009354
 8000e10:	48000400 	.word	0x48000400

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
 8000e1a:	4844      	ldr	r0, [pc, #272]	@ (8000f2c <Error_Handler+0x118>)
 8000e1c:	4f44      	ldr	r7, [pc, #272]	@ (8000f30 <Error_Handler+0x11c>)
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000e1e:	4e45      	ldr	r6, [pc, #276]	@ (8000f34 <Error_Handler+0x120>)
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000e20:	4d45      	ldr	r5, [pc, #276]	@ (8000f38 <Error_Handler+0x124>)
  DEBUG_PRINT("Entering error Handler\r\n");
 8000e22:	f007 fa79 	bl	8008318 <puts>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000e26:	2400      	movs	r4, #0
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e2e:	4630      	mov	r0, r6
 8000e30:	f003 faa4 	bl	800437c <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	9400      	str	r4, [sp, #0]
 8000e38:	9900      	ldr	r1, [sp, #0]
 8000e3a:	fba5 3002 	umull	r3, r0, r5, r2
 8000e3e:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
 8000e42:	ea4f 1390 	mov.w	r3, r0, lsr #6
 8000e46:	d22f      	bcs.n	8000ea8 <Error_Handler+0x94>
 8000e48:	9a00      	ldr	r2, [sp, #0]
 8000e4a:	3201      	adds	r2, #1
 8000e4c:	9200      	str	r2, [sp, #0]
 8000e4e:	9900      	ldr	r1, [sp, #0]
 8000e50:	4299      	cmp	r1, r3
 8000e52:	d229      	bcs.n	8000ea8 <Error_Handler+0x94>
 8000e54:	9800      	ldr	r0, [sp, #0]
 8000e56:	3001      	adds	r0, #1
 8000e58:	9000      	str	r0, [sp, #0]
 8000e5a:	9a00      	ldr	r2, [sp, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d223      	bcs.n	8000ea8 <Error_Handler+0x94>
 8000e60:	9900      	ldr	r1, [sp, #0]
 8000e62:	3101      	adds	r1, #1
 8000e64:	9100      	str	r1, [sp, #0]
 8000e66:	9800      	ldr	r0, [sp, #0]
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	d21d      	bcs.n	8000ea8 <Error_Handler+0x94>
 8000e6c:	9a00      	ldr	r2, [sp, #0]
 8000e6e:	3201      	adds	r2, #1
 8000e70:	9200      	str	r2, [sp, #0]
 8000e72:	9900      	ldr	r1, [sp, #0]
 8000e74:	4299      	cmp	r1, r3
 8000e76:	d217      	bcs.n	8000ea8 <Error_Handler+0x94>
 8000e78:	9800      	ldr	r0, [sp, #0]
 8000e7a:	3001      	adds	r0, #1
 8000e7c:	9000      	str	r0, [sp, #0]
 8000e7e:	9a00      	ldr	r2, [sp, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d211      	bcs.n	8000ea8 <Error_Handler+0x94>
 8000e84:	9900      	ldr	r1, [sp, #0]
 8000e86:	3101      	adds	r1, #1
 8000e88:	9100      	str	r1, [sp, #0]
 8000e8a:	9800      	ldr	r0, [sp, #0]
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	d20b      	bcs.n	8000ea8 <Error_Handler+0x94>
 8000e90:	9a00      	ldr	r2, [sp, #0]
 8000e92:	3201      	adds	r2, #1
 8000e94:	9200      	str	r2, [sp, #0]
 8000e96:	9900      	ldr	r1, [sp, #0]
 8000e98:	4299      	cmp	r1, r3
 8000e9a:	d205      	bcs.n	8000ea8 <Error_Handler+0x94>
 8000e9c:	9800      	ldr	r0, [sp, #0]
 8000e9e:	3001      	adds	r0, #1
 8000ea0:	9000      	str	r0, [sp, #0]
 8000ea2:	9a00      	ldr	r2, [sp, #0]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d3cf      	bcc.n	8000e48 <Error_Handler+0x34>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000ea8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eac:	2200      	movs	r2, #0
 8000eae:	4630      	mov	r0, r6
 8000eb0:	f003 fa64 	bl	800437c <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	9401      	str	r4, [sp, #4]
 8000eb8:	9801      	ldr	r0, [sp, #4]
 8000eba:	fba5 1203 	umull	r1, r2, r5, r3
 8000ebe:	ebb0 1f92 	cmp.w	r0, r2, lsr #6
 8000ec2:	ea4f 1192 	mov.w	r1, r2, lsr #6
 8000ec6:	d2af      	bcs.n	8000e28 <Error_Handler+0x14>
 8000ec8:	9b01      	ldr	r3, [sp, #4]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	9801      	ldr	r0, [sp, #4]
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	d2a9      	bcs.n	8000e28 <Error_Handler+0x14>
 8000ed4:	9a01      	ldr	r2, [sp, #4]
 8000ed6:	3201      	adds	r2, #1
 8000ed8:	9201      	str	r2, [sp, #4]
 8000eda:	9b01      	ldr	r3, [sp, #4]
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d2a3      	bcs.n	8000e28 <Error_Handler+0x14>
 8000ee0:	9801      	ldr	r0, [sp, #4]
 8000ee2:	3001      	adds	r0, #1
 8000ee4:	9001      	str	r0, [sp, #4]
 8000ee6:	9a01      	ldr	r2, [sp, #4]
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d29d      	bcs.n	8000e28 <Error_Handler+0x14>
 8000eec:	9b01      	ldr	r3, [sp, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	9801      	ldr	r0, [sp, #4]
 8000ef4:	4288      	cmp	r0, r1
 8000ef6:	d297      	bcs.n	8000e28 <Error_Handler+0x14>
 8000ef8:	9a01      	ldr	r2, [sp, #4]
 8000efa:	3201      	adds	r2, #1
 8000efc:	9201      	str	r2, [sp, #4]
 8000efe:	9b01      	ldr	r3, [sp, #4]
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d291      	bcs.n	8000e28 <Error_Handler+0x14>
 8000f04:	9801      	ldr	r0, [sp, #4]
 8000f06:	3001      	adds	r0, #1
 8000f08:	9001      	str	r0, [sp, #4]
 8000f0a:	9a01      	ldr	r2, [sp, #4]
 8000f0c:	428a      	cmp	r2, r1
 8000f0e:	d28b      	bcs.n	8000e28 <Error_Handler+0x14>
 8000f10:	9b01      	ldr	r3, [sp, #4]
 8000f12:	3301      	adds	r3, #1
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	9801      	ldr	r0, [sp, #4]
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	d285      	bcs.n	8000e28 <Error_Handler+0x14>
 8000f1c:	9a01      	ldr	r2, [sp, #4]
 8000f1e:	3201      	adds	r2, #1
 8000f20:	9201      	str	r2, [sp, #4]
 8000f22:	9b01      	ldr	r3, [sp, #4]
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d3cf      	bcc.n	8000ec8 <Error_Handler+0xb4>
 8000f28:	e77e      	b.n	8000e28 <Error_Handler+0x14>
 8000f2a:	bf00      	nop
 8000f2c:	08009374 	.word	0x08009374
 8000f30:	20000400 	.word	0x20000400
 8000f34:	48000400 	.word	0x48000400
 8000f38:	51eb851f 	.word	0x51eb851f
 8000f3c:	00000000 	.word	0x00000000

08000f40 <SystemClock_Config>:
{
 8000f40:	b500      	push	{lr}
 8000f42:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f44:	2244      	movs	r2, #68	@ 0x44
 8000f46:	2100      	movs	r1, #0
 8000f48:	a806      	add	r0, sp, #24
 8000f4a:	f007 fb79 	bl	8008640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4e:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f50:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000f58:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000f5c:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f5e:	f003 fa27 	bl	80043b0 <HAL_PWREx_ControlVoltageScaling>
 8000f62:	b9e8      	cbnz	r0, 8000fa0 <SystemClock_Config+0x60>
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f64:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8000fa8 <SystemClock_Config+0x68>
 8000f68:	4601      	mov	r1, r0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000f6a:	23b0      	movs	r3, #176	@ 0xb0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f6c:	2210      	movs	r2, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000f70:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f76:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f78:	9110      	str	r1, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7a:	f003 fb43 	bl	8004604 <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b970      	cbnz	r0, 8000fa0 <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	f04f 0c0f 	mov.w	ip, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f86:	2102      	movs	r1, #2
 8000f88:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f8a:	e9cd c301 	strd	ip, r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f94:	f003 fe4c 	bl	8004c30 <HAL_RCC_ClockConfig>
 8000f98:	b910      	cbnz	r0, 8000fa0 <SystemClock_Config+0x60>
}
 8000f9a:	b019      	add	sp, #100	@ 0x64
 8000f9c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000fa0:	f7ff ff38 	bl	8000e14 <Error_Handler>
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	00000001 	.word	0x00000001
 8000fac:	00000000 	.word	0x00000000

08000fb0 <main>:
{
 8000fb0:	b508      	push	{r3, lr}
  HAL_Init();
 8000fb2:	f001 fe25 	bl	8002c00 <HAL_Init>
  SystemClock_Config();
 8000fb6:	f7ff ffc3 	bl	8000f40 <SystemClock_Config>
  MX_GPIO_Init();
 8000fba:	f7ff fd6f 	bl	8000a9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fbe:	f7ff fd55 	bl	8000a6c <MX_DMA_Init>
  MX_SPI1_Init();
 8000fc2:	f001 fb3b 	bl	800263c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000fc6:	f001 fc2d 	bl	8002824 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000fca:	f7ff fad9 	bl	8000580 <MX_ADC1_Init>
  MX_AES_Init();
 8000fce:	f7ff fceb 	bl	80009a8 <MX_AES_Init>
	  MX_LPUART1_UART_Init();
 8000fd2:	f001 fc85 	bl	80028e0 <MX_LPUART1_UART_Init>
  RetargetInit(&hlpuart1);
 8000fd6:	4814      	ldr	r0, [pc, #80]	@ (8001028 <main+0x78>)
 8000fd8:	f000 f8b6 	bl	8001148 <RetargetInit>
  DEBUG_PRINT("Hello world\r\n");
 8000fdc:	4813      	ldr	r0, [pc, #76]	@ (800102c <main+0x7c>)
 8000fde:	f007 f99b 	bl	8008318 <puts>
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 8000fe2:	4813      	ldr	r0, [pc, #76]	@ (8001030 <main+0x80>)
 8000fe4:	f001 f918 	bl	8002218 <S2LP_Init>
  if (err)  {
 8000fe8:	b128      	cbz	r0, 8000ff6 <main+0x46>
 8000fea:	4601      	mov	r1, r0
	  DEBUG_PRINT("[S2LP] Error while initializing: %u\r\n", err);
 8000fec:	4811      	ldr	r0, [pc, #68]	@ (8001034 <main+0x84>)
 8000fee:	f007 f92b 	bl	8008248 <iprintf>
	  Error_Handler();
 8000ff2:	f7ff ff0f 	bl	8000e14 <Error_Handler>
	  DEBUG_PRINT("[S2LP] Init OK\r\n");
 8000ff6:	4810      	ldr	r0, [pc, #64]	@ (8001038 <main+0x88>)
 8000ff8:	f007 f98e 	bl	8008318 <puts>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8000ffc:	480f      	ldr	r0, [pc, #60]	@ (800103c <main+0x8c>)
 8000ffe:	217f      	movs	r1, #127	@ 0x7f
 8001000:	f002 fb74 	bl	80036ec <HAL_ADCEx_Calibration_Start>
 8001004:	b120      	cbz	r0, 8001010 <main+0x60>
	  DEBUG_PRINT("Error while calibrating the ADC\r\n");
 8001006:	480e      	ldr	r0, [pc, #56]	@ (8001040 <main+0x90>)
 8001008:	f007 f986 	bl	8008318 <puts>
	  Error_Handler();
 800100c:	f7ff ff02 	bl	8000e14 <Error_Handler>
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <main+0x94>)
 8001012:	f004 fe91 	bl	8005d38 <HAL_TIM_Base_Start>
 8001016:	b120      	cbz	r0, 8001022 <main+0x72>
	  DEBUG_PRINT("Error while enabling timer TIM3\r\n");
 8001018:	480b      	ldr	r0, [pc, #44]	@ (8001048 <main+0x98>)
 800101a:	f007 f97d 	bl	8008318 <puts>
	  Error_Handler();
 800101e:	f7ff fef9 	bl	8000e14 <Error_Handler>
  run();
 8001022:	f7ff fe93 	bl	8000d4c <run>
 8001026:	bf00      	nop
 8001028:	200021a8 	.word	0x200021a8
 800102c:	0800938c 	.word	0x0800938c
 8001030:	200020f0 	.word	0x200020f0
 8001034:	0800939c 	.word	0x0800939c
 8001038:	080093c4 	.word	0x080093c4
 800103c:	200004cc 	.word	0x200004cc
 8001040:	080093d4 	.word	0x080093d4
 8001044:	20002158 	.word	0x20002158
 8001048:	080093f8 	.word	0x080093f8

0800104c <tag_cbc_mac_hardware>:
 * @brief Calculate the tag of the packet using the hardware crypto module
 * @param tag : the tag to be calculated
 * @param msg : the message to be tagged
 * @param msg_len : the length of the message
 */
void tag_cbc_mac_hardware(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 800104c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    __ALIGN_BEGIN static uint8_t iv[16] __ALIGN_END = {0};
    // Allocate enough space for all blocks
    __ALIGN_BEGIN static uint8_t *tmp_out = NULL;
    
    // Calculate number of blocks needed (rounded up)
    size_t num_blocks = (msg_len + 15) / 16;
 8001050:	f102 070f 	add.w	r7, r2, #15
void tag_cbc_mac_hardware(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 8001054:	b083      	sub	sp, #12
 8001056:	4606      	mov	r6, r0
    size_t total_size = num_blocks * 16;
    
    // Allocate memory for all blocks
    tmp_out = malloc(total_size);
 8001058:	f027 000f 	bic.w	r0, r7, #15
void tag_cbc_mac_hardware(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 800105c:	4615      	mov	r5, r2
 800105e:	4688      	mov	r8, r1
    tmp_out = malloc(total_size);
 8001060:	f006 ff72 	bl	8007f48 <malloc>
 8001064:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80010f8 <tag_cbc_mac_hardware+0xac>
 8001068:	f8c9 0000 	str.w	r0, [r9]
    if (tmp_out == NULL) {
 800106c:	2800      	cmp	r0, #0
 800106e:	d038      	beq.n	80010e2 <tag_cbc_mac_hardware+0x96>
        Error_Handler();
        return;
    }
    
    // Step 1: reset the AES peripheral
    if (HAL_CRYP_DeInit(&hcryp) != HAL_OK) {
 8001070:	4c1e      	ldr	r4, [pc, #120]	@ (80010ec <tag_cbc_mac_hardware+0xa0>)
 8001072:	4620      	mov	r0, r4
 8001074:	f002 fd44 	bl	8003b00 <HAL_CRYP_DeInit>
 8001078:	bb78      	cbnz	r0, 80010da <tag_cbc_mac_hardware+0x8e>
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
    hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
    hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
    hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
    hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
    hcryp.Init.pKey = (uint8_t*)AES_Key;
 800107a:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <tag_cbc_mac_hardware+0xa4>)
    hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 800107c:	61a0      	str	r0, [r4, #24]
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
 800107e:	2204      	movs	r2, #4
    hcryp.Init.pInitVect = (uint8_t*)iv;
 8001080:	481c      	ldr	r0, [pc, #112]	@ (80010f4 <tag_cbc_mac_hardware+0xa8>)
    hcryp.Init.pKey = (uint8_t*)AES_Key;
 8001082:	6223      	str	r3, [r4, #32]
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8001084:	2300      	movs	r3, #0
 8001086:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hcryp.Init.pInitVect = (uint8_t*)iv;
 800108a:	6260      	str	r0, [r4, #36]	@ 0x24
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
 800108c:	2200      	movs	r2, #0
 800108e:	2320      	movs	r3, #32

    if (HAL_CRYP_Init(&hcryp) != HAL_OK) {
 8001090:	4620      	mov	r0, r4
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8001092:	e9c4 2304 	strd	r2, r3, [r4, #16]
    if (HAL_CRYP_Init(&hcryp) != HAL_OK) {
 8001096:	f002 fc83 	bl	80039a0 <HAL_CRYP_Init>
 800109a:	b9f0      	cbnz	r0, 80010da <tag_cbc_mac_hardware+0x8e>
        Error_Handler();
        return;
    }

    // Step 3: Perform CBC encryption with proper padding
    if (HAL_CRYP_AESCBC_Encrypt(&hcryp, (uint8_t *)msg, msg_len, tmp_out, 1000) != HAL_OK) {
 800109c:	b2aa      	uxth	r2, r5
 800109e:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 80010a2:	9500      	str	r5, [sp, #0]
 80010a4:	f8d9 3000 	ldr.w	r3, [r9]
 80010a8:	4641      	mov	r1, r8
 80010aa:	4620      	mov	r0, r4
 80010ac:	f002 fd44 	bl	8003b38 <HAL_CRYP_AESCBC_Encrypt>
 80010b0:	b998      	cbnz	r0, 80010da <tag_cbc_mac_hardware+0x8e>
        Error_Handler();
        return;
    }

    // Step 4: Copy the last block as the MAC
    memcpy(tag, tmp_out + ((num_blocks - 1) * 16), 16);
 80010b2:	f8d9 0000 	ldr.w	r0, [r9]
 80010b6:	f027 010f 	bic.w	r1, r7, #15
 80010ba:	f1a1 0210 	sub.w	r2, r1, #16
 80010be:	1887      	adds	r7, r0, r2
 80010c0:	5884      	ldr	r4, [r0, r2]
 80010c2:	687d      	ldr	r5, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	60f3      	str	r3, [r6, #12]
 80010ca:	6034      	str	r4, [r6, #0]
 80010cc:	6075      	str	r5, [r6, #4]
 80010ce:	60b1      	str	r1, [r6, #8]
    
    // Clean up
    free(tmp_out);
}
 80010d0:	b003      	add	sp, #12
 80010d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    free(tmp_out);
 80010d6:	f006 bf3f 	b.w	8007f58 <free>
        free(tmp_out);
 80010da:	f8d9 0000 	ldr.w	r0, [r9]
 80010de:	f006 ff3b 	bl	8007f58 <free>
}
 80010e2:	b003      	add	sp, #12
 80010e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Error_Handler();
 80010e8:	f7ff be94 	b.w	8000e14 <Error_Handler>
 80010ec:	20001468 	.word	0x20001468
 80010f0:	08009430 	.word	0x08009430
 80010f4:	200014cc 	.word	0x200014cc
 80010f8:	200014dc 	.word	0x200014dc

080010fc <make_packet>:

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 80010fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
    // So is the tag
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 80010fe:	f101 0708 	add.w	r7, r1, #8
 8001102:	19c6      	adds	r6, r0, r7
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8001104:	460d      	mov	r5, r1
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001106:	2100      	movs	r1, #0
 8001108:	51c1      	str	r1, [r0, r7]
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 800110a:	4604      	mov	r4, r0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 800110c:	6071      	str	r1, [r6, #4]
 800110e:	60b1      	str	r1, [r6, #8]
 8001110:	60f1      	str	r1, [r6, #12]

	// Set the reserved field to 0
	packet[0] = 0x00;
	// Set the emitter_id field
	packet[1] = sender_id;
 8001112:	7042      	strb	r2, [r0, #1]
	// Set the payload_length field
	packet[2] = (payload_len >> 8) & 0xFF;
	packet[3] = payload_len & 0xFF;
	// Set the packet_serial field
	packet[4] = (serial >> 24) & 0xFF;
 8001114:	0e1a      	lsrs	r2, r3, #24
	packet[0] = 0x00;
 8001116:	7001      	strb	r1, [r0, #0]
	packet[3] = payload_len & 0xFF;
 8001118:	70c5      	strb	r5, [r0, #3]
	packet[5] = (serial >> 16) & 0xFF;
	packet[6] = (serial >> 8) & 0xFF;
	packet[7] = serial & 0xFF;
 800111a:	71c3      	strb	r3, [r0, #7]
	packet[4] = (serial >> 24) & 0xFF;
 800111c:	7102      	strb	r2, [r0, #4]
	packet[2] = (payload_len >> 8) & 0xFF;
 800111e:	0a29      	lsrs	r1, r5, #8
	packet[5] = (serial >> 16) & 0xFF;
 8001120:	0c18      	lsrs	r0, r3, #16
	packet[6] = (serial >> 8) & 0xFF;
 8001122:	0a1b      	lsrs	r3, r3, #8
 8001124:	71a3      	strb	r3, [r4, #6]
	packet[5] = (serial >> 16) & 0xFF;
 8001126:	7160      	strb	r0, [r4, #5]
	packet[2] = (payload_len >> 8) & 0xFF;
 8001128:	70a1      	strb	r1, [r4, #2]
	 *		 	This will be helpful when setting fields that are on multiple bytes.
	*/

	// For the tag field, you have to calculate the tag. The function call below is correct but
	// tag_cbc_mac function, calculating the tag, is not implemented.
	START_CYCLE_COUNT_CBC_MAC();
 800112a:	f001 fc4b 	bl	80029c4 <start_cycle_count>
	#if USE_CRYPTO == USE_HARDWARE_CRYPTO
    	tag_cbc_mac_hardware(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
 800112e:	463a      	mov	r2, r7
 8001130:	4621      	mov	r1, r4
 8001132:	4630      	mov	r0, r6
 8001134:	f7ff ff8a 	bl	800104c <tag_cbc_mac_hardware>
		STOP_CYCLE_COUNT_CBC_MAC("CBC-MAC Hardware");
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <make_packet+0x48>)
 800113a:	f001 fc63 	bl	8002a04 <stop_cycle_count>
		tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
		STOP_CYCLE_COUNT_CBC_MAC("CBC-MAC Software");
	#endif

    return packet_len;
}
 800113e:	f105 0018 	add.w	r0, r5, #24
 8001142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001144:	0800941c 	.word	0x0800941c

08001148 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001148:	b430      	push	{r4, r5}
  gHuart = huart;

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <RetargetInit+0x1c>)
  gHuart = huart;
 800114c:	4906      	ldr	r1, [pc, #24]	@ (8001168 <RetargetInit+0x20>)
  setvbuf(stdout, NULL, _IONBF, 0);
 800114e:	681d      	ldr	r5, [r3, #0]
void RetargetInit(UART_HandleTypeDef *huart) {
 8001150:	4604      	mov	r4, r0
  setvbuf(stdout, NULL, _IONBF, 0);
 8001152:	2300      	movs	r3, #0
  gHuart = huart;
 8001154:	600c      	str	r4, [r1, #0]
  setvbuf(stdout, NULL, _IONBF, 0);
 8001156:	68a8      	ldr	r0, [r5, #8]
 8001158:	2202      	movs	r2, #2
}
 800115a:	bc30      	pop	{r4, r5}
  setvbuf(stdout, NULL, _IONBF, 0);
 800115c:	4619      	mov	r1, r3
 800115e:	f007 b8e3 	b.w	8008328 <setvbuf>
 8001162:	bf00      	nop
 8001164:	20000418 	.word	0x20000418
 8001168:	200014e0 	.word	0x200014e0

0800116c <_isatty>:

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800116c:	2802      	cmp	r0, #2
 800116e:	d801      	bhi.n	8001174 <_isatty+0x8>
    return 1;
 8001170:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 8001172:	4770      	bx	lr
int _isatty(int fd) {
 8001174:	b508      	push	{r3, lr}
  errno = EBADF;
 8001176:	f007 fac1 	bl	80086fc <__errno>
 800117a:	2309      	movs	r3, #9
 800117c:	6003      	str	r3, [r0, #0]
  return 0;
 800117e:	2000      	movs	r0, #0
}
 8001180:	bd08      	pop	{r3, pc}
 8001182:	bf00      	nop

08001184 <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001184:	3801      	subs	r0, #1
 8001186:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 8001188:	b510      	push	{r4, lr}
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800118a:	d80c      	bhi.n	80011a6 <_write+0x22>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800118c:	4614      	mov	r4, r2
 800118e:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <_write+0x30>)
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	6810      	ldr	r0, [r2, #0]
 8001196:	b2a2      	uxth	r2, r4
 8001198:	f004 ffbc 	bl	8006114 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
 800119c:	2800      	cmp	r0, #0
 800119e:	bf0c      	ite	eq
 80011a0:	4620      	moveq	r0, r4
 80011a2:	2005      	movne	r0, #5
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 80011a4:	bd10      	pop	{r4, pc}
  errno = EBADF;
 80011a6:	f007 faa9 	bl	80086fc <__errno>
 80011aa:	2309      	movs	r3, #9
 80011ac:	6003      	str	r3, [r0, #0]
  return -1;
 80011ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 80011b2:	bd10      	pop	{r4, pc}
 80011b4:	200014e0 	.word	0x200014e0

080011b8 <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80011b8:	2802      	cmp	r0, #2
 80011ba:	d801      	bhi.n	80011c0 <_close+0x8>
    return 0;
 80011bc:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 80011be:	4770      	bx	lr
int _close(int fd) {
 80011c0:	b508      	push	{r3, lr}
  errno = EBADF;
 80011c2:	f007 fa9b 	bl	80086fc <__errno>
 80011c6:	2309      	movs	r3, #9
 80011c8:	6003      	str	r3, [r0, #0]
  return -1;
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80011ce:	bd08      	pop	{r3, pc}

080011d0 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80011d0:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80011d2:	f007 fa93 	bl	80086fc <__errno>
 80011d6:	2309      	movs	r3, #9
 80011d8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80011da:	f04f 30ff 	mov.w	r0, #4294967295
 80011de:	bd08      	pop	{r3, pc}

080011e0 <_read>:

int _read(int fd, char* ptr, int len) {
 80011e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80011e2:	b958      	cbnz	r0, 80011fc <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80011e4:	4a09      	ldr	r2, [pc, #36]	@ (800120c <_read+0x2c>)
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	6810      	ldr	r0, [r2, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f005 f82f 	bl	8006250 <HAL_UART_Receive>
    if (hstatus == HAL_OK)
      return 1;
 80011f2:	2800      	cmp	r0, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2005      	movne	r0, #5
 80011f8:	2001      	moveq	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 80011fa:	bd08      	pop	{r3, pc}
  errno = EBADF;
 80011fc:	f007 fa7e 	bl	80086fc <__errno>
 8001200:	2309      	movs	r3, #9
 8001202:	6003      	str	r3, [r0, #0]
  return -1;
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001208:	bd08      	pop	{r3, pc}
 800120a:	bf00      	nop
 800120c:	200014e0 	.word	0x200014e0

08001210 <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001210:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 8001212:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001214:	d804      	bhi.n	8001220 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 8001216:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800121a:	6048      	str	r0, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 800121c:	2000      	movs	r0, #0
 800121e:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001220:	f007 fa6c 	bl	80086fc <__errno>
 8001224:	2309      	movs	r3, #9
 8001226:	6003      	str	r3, [r0, #0]
}
 8001228:	2000      	movs	r0, #0
 800122a:	bd08      	pop	{r3, pc}

0800122c <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af02      	add	r7, sp, #8
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	737b      	strb	r3, [r7, #13]
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2101      	movs	r1, #1
 8001248:	480f      	ldr	r0, [pc, #60]	@ (8001288 <S2LP_Command+0x5c>)
 800124a:	f003 f897 	bl	800437c <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <S2LP_Command+0x60>)
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	f107 0208 	add.w	r2, r7, #8
 8001256:	f107 010c 	add.w	r1, r7, #12
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2302      	movs	r3, #2
 8001262:	f004 fb1f 	bl	80058a4 <HAL_SPI_TransmitReceive>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2101      	movs	r1, #1
 800126e:	4806      	ldr	r0, [pc, #24]	@ (8001288 <S2LP_Command+0x5c>)
 8001270:	f003 f884 	bl	800437c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001274:	b662      	cpsie	i
}
 8001276:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 8001278:	893a      	ldrh	r2, [r7, #8]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	801a      	strh	r2, [r3, #0]
	return err;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	48000800 	.word	0x48000800
 800128c:	200014e8 	.word	0x200014e8

08001290 <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af02      	add	r7, sp, #8
 8001296:	4603      	mov	r3, r0
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 800129e:	2301      	movs	r3, #1
 80012a0:	753b      	strb	r3, [r7, #20]
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	757b      	strb	r3, [r7, #21]
 80012a6:	2300      	movs	r3, #0
 80012a8:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 80012aa:	b672      	cpsid	i
}
 80012ac:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	4814      	ldr	r0, [pc, #80]	@ (8001304 <S2LP_ReadReg+0x74>)
 80012b4:	f003 f862 	bl	800437c <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <S2LP_ReadReg+0x78>)
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	f107 0210 	add.w	r2, r7, #16
 80012c0:	f107 0114 	add.w	r1, r7, #20
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2303      	movs	r3, #3
 80012cc:	f004 faea 	bl	80058a4 <HAL_SPI_TransmitReceive>
 80012d0:	4603      	mov	r3, r0
 80012d2:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2101      	movs	r1, #1
 80012d8:	480a      	ldr	r0, [pc, #40]	@ (8001304 <S2LP_ReadReg+0x74>)
 80012da:	f003 f84f 	bl	800437c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80012de:	b662      	cpsie	i
}
 80012e0:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 80012e8:	8a3a      	ldrh	r2, [r7, #16]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 80012f4:	7cba      	ldrb	r2, [r7, #18]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	701a      	strb	r2, [r3, #0]
	return err;
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	48000800 	.word	0x48000800
 8001308:	200014e8 	.word	0x200014e8

0800130c <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	4603      	mov	r3, r0
 8001314:	603a      	str	r2, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	460b      	mov	r3, r1
 800131a:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 800131c:	2300      	movs	r3, #0
 800131e:	733b      	strb	r3, [r7, #12]
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	737b      	strb	r3, [r7, #13]
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2101      	movs	r1, #1
 8001330:	4811      	ldr	r0, [pc, #68]	@ (8001378 <S2LP_WriteReg+0x6c>)
 8001332:	f003 f823 	bl	800437c <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <S2LP_WriteReg+0x70>)
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	f107 0208 	add.w	r2, r7, #8
 800133e:	f107 010c 	add.w	r1, r7, #12
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2303      	movs	r3, #3
 800134a:	f004 faab 	bl	80058a4 <HAL_SPI_TransmitReceive>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	2101      	movs	r1, #1
 8001356:	4808      	ldr	r0, [pc, #32]	@ (8001378 <S2LP_WriteReg+0x6c>)
 8001358:	f003 f810 	bl	800437c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800135c:	b662      	cpsie	i
}
 800135e:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 8001366:	893a      	ldrh	r2, [r7, #8]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	801a      	strh	r2, [r3, #0]
	return err;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	48000800 	.word	0x48000800
 800137c:	200014e8 	.word	0x200014e8

08001380 <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b08d      	sub	sp, #52	@ 0x34
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	460b      	mov	r3, r1
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 8001392:	23ff      	movs	r3, #255	@ 0xff
 8001394:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 8001396:	7afa      	ldrb	r2, [r7, #11]
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	3302      	adds	r3, #2
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f007 f9d8 	bl	8008756 <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 80013a6:	b672      	cpsid	i
}
 80013a8:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2101      	movs	r1, #1
 80013ae:	4814      	ldr	r0, [pc, #80]	@ (8001400 <S2LP_WriteTxFIFO+0x80>)
 80013b0:	f002 ffe4 	bl	800437c <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 80013b4:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <S2LP_WriteTxFIFO+0x84>)
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3302      	adds	r3, #2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	f107 0210 	add.w	r2, r7, #16
 80013c4:	f107 011c 	add.w	r1, r7, #28
 80013c8:	f04f 34ff 	mov.w	r4, #4294967295
 80013cc:	9400      	str	r4, [sp, #0]
 80013ce:	f004 fa69 	bl	80058a4 <HAL_SPI_TransmitReceive>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2101      	movs	r1, #1
 80013dc:	4808      	ldr	r0, [pc, #32]	@ (8001400 <S2LP_WriteTxFIFO+0x80>)
 80013de:	f002 ffcd 	bl	800437c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80013e2:	b662      	cpsie	i
}
 80013e4:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 80013ec:	8a3a      	ldrh	r2, [r7, #16]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	801a      	strh	r2, [r3, #0]
	return err;
 80013f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	372c      	adds	r7, #44	@ 0x2c
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd90      	pop	{r4, r7, pc}
 80013fe:	bf00      	nop
 8001400:	48000800 	.word	0x48000800
 8001404:	200014e8 	.word	0x200014e8

08001408 <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4619      	mov	r1, r3
 800141a:	2072      	movs	r0, #114	@ 0x72
 800141c:	f7ff ff06 	bl	800122c <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8001420:	7b7b      	ldrb	r3, [r7, #13]
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <S2LP_Send+0x2e>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
 800142c:	4864      	ldr	r0, [pc, #400]	@ (80015c0 <S2LP_Send+0x1b8>)
 800142e:	f006 ff73 	bl	8008318 <puts>
		return HAL_BUSY;
 8001432:	2302      	movs	r3, #2
 8001434:	e0c0      	b.n	80015b8 <S2LP_Send+0x1b0>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 8001436:	4b63      	ldr	r3, [pc, #396]	@ (80015c4 <S2LP_Send+0x1bc>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 800143c:	4b62      	ldr	r3, [pc, #392]	@ (80015c8 <S2LP_Send+0x1c0>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 8001442:	4b62      	ldr	r3, [pc, #392]	@ (80015cc <S2LP_Send+0x1c4>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 8001448:	887b      	ldrh	r3, [r7, #2]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	b29b      	uxth	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	2031      	movs	r0, #49	@ 0x31
 8001456:	f7ff ff59 	bl	800130c <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	2032      	movs	r0, #50	@ 0x32
 8001464:	f7ff ff52 	bl	800130c <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001468:	e00f      	b.n	800148a <S2LP_Send+0x82>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4619      	mov	r1, r3
 8001470:	2066      	movs	r0, #102	@ 0x66
 8001472:	f7ff fedb 	bl	800122c <S2LP_Command>
 8001476:	4603      	mov	r3, r0
 8001478:	73bb      	strb	r3, [r7, #14]
		if (err) {
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <S2LP_Send+0x82>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
 8001480:	4853      	ldr	r0, [pc, #332]	@ (80015d0 <S2LP_Send+0x1c8>)
 8001482:	f006 ff49 	bl	8008318 <puts>
			return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e096      	b.n	80015b8 <S2LP_Send+0x1b0>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 800148a:	7b7b      	ldrb	r3, [r7, #13]
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b18      	cmp	r3, #24
 8001494:	d1e9      	bne.n	800146a <S2LP_Send+0x62>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	08db      	lsrs	r3, r3, #3
 800149e:	b29b      	uxth	r3, r3
 80014a0:	887a      	ldrh	r2, [r7, #2]
 80014a2:	f002 0207 	and.w	r2, r2, #7
 80014a6:	b292      	uxth	r2, r2
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	bf14      	ite	ne
 80014ac:	2201      	movne	r2, #1
 80014ae:	2200      	moveq	r2, #0
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	4413      	add	r3, r2
 80014b4:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 80014b6:	2310      	movs	r3, #16
 80014b8:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	827b      	strh	r3, [r7, #18]
 80014be:	e063      	b.n	8001588 <S2LP_Send+0x180>
		if (underflow) {
 80014c0:	4b41      	ldr	r3, [pc, #260]	@ (80015c8 <S2LP_Send+0x1c0>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d02f      	beq.n	800152a <S2LP_Send+0x122>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
 80014ca:	4842      	ldr	r0, [pc, #264]	@ (80015d4 <S2LP_Send+0x1cc>)
 80014cc:	f006 ff24 	bl	8008318 <puts>
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	461a      	mov	r2, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff fed9 	bl	8001290 <S2LP_ReadReg>
 80014de:	4603      	mov	r3, r0
 80014e0:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 80014e2:	7bbb      	ldrb	r3, [r7, #14]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <S2LP_Send+0xec>
				S2LP_PrintStatus(&radio_status);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f879 	bl	80015e4 <S2LP_PrintStatus>
 80014f2:	e002      	b.n	80014fa <S2LP_Send+0xf2>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
 80014f4:	4838      	ldr	r0, [pc, #224]	@ (80015d8 <S2LP_Send+0x1d0>)
 80014f6:	f006 ff0f 	bl	8008318 <puts>
			}
			return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e05c      	b.n	80015b8 <S2LP_Send+0x1b0>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d107      	bne.n	8001514 <S2LP_Send+0x10c>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	4619      	mov	r1, r3
 800150a:	2060      	movs	r0, #96	@ 0x60
 800150c:	f7ff fe8e 	bl	800122c <S2LP_Command>
				sending = 1;
 8001510:	2301      	movs	r3, #1
 8001512:	75fb      	strb	r3, [r7, #23]
			}

			__WFI();
 8001514:	bf30      	wfi
			if (fifo_almost_empty) {
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <S2LP_Send+0x1c4>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <S2LP_Send+0x122>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 8001520:	230c      	movs	r3, #12
 8001522:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <S2LP_Send+0x1c4>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 800152a:	8abb      	ldrh	r3, [r7, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0e6      	beq.n	80014fe <S2LP_Send+0xf6>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 8001530:	8a7a      	ldrh	r2, [r7, #18]
 8001532:	8a3b      	ldrh	r3, [r7, #16]
 8001534:	3b01      	subs	r3, #1
 8001536:	429a      	cmp	r2, r3
 8001538:	d109      	bne.n	800154e <S2LP_Send+0x146>
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	8a3b      	ldrh	r3, [r7, #16]
 8001540:	3b01      	subs	r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	e000      	b.n	8001550 <S2LP_Send+0x148>
 800154e:	2308      	movs	r3, #8
 8001550:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 8001552:	8a7b      	ldrh	r3, [r7, #18]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4413      	add	r3, r2
 800155c:	f107 020c 	add.w	r2, r7, #12
 8001560:	7bf9      	ldrb	r1, [r7, #15]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff0c 	bl	8001380 <S2LP_WriteTxFIFO>
 8001568:	4603      	mov	r3, r0
 800156a:	73bb      	strb	r3, [r7, #14]
		if (err) {
 800156c:	7bbb      	ldrb	r3, [r7, #14]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <S2LP_Send+0x174>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
 8001572:	481a      	ldr	r0, [pc, #104]	@ (80015dc <S2LP_Send+0x1d4>)
 8001574:	f006 fed0 	bl	8008318 <puts>
			return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e01d      	b.n	80015b8 <S2LP_Send+0x1b0>
		}
		free_chunks--;
 800157c:	8abb      	ldrh	r3, [r7, #20]
 800157e:	3b01      	subs	r3, #1
 8001580:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 8001582:	8a7b      	ldrh	r3, [r7, #18]
 8001584:	3301      	adds	r3, #1
 8001586:	827b      	strh	r3, [r7, #18]
 8001588:	8a7a      	ldrh	r2, [r7, #18]
 800158a:	8a3b      	ldrh	r3, [r7, #16]
 800158c:	429a      	cmp	r2, r3
 800158e:	d397      	bcc.n	80014c0 <S2LP_Send+0xb8>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <S2LP_Send+0x19e>
		S2LP_Command(CMD_TX, &radio_status);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	2060      	movs	r0, #96	@ 0x60
 800159e:	f7ff fe45 	bl	800122c <S2LP_Command>
	}

	while (!packet_sent) {
 80015a2:	e000      	b.n	80015a6 <S2LP_Send+0x19e>
		__WFI(); // wait until packet has been fully transmitted
 80015a4:	bf30      	wfi
	while (!packet_sent) {
 80015a6:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <S2LP_Send+0x1bc>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f9      	beq.n	80015a4 <S2LP_Send+0x19c>
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
 80015b0:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <S2LP_Send+0x1d8>)
 80015b2:	f006 feb1 	bl	8008318 <puts>
	return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	08009020 	.word	0x08009020
 80015c4:	200014e4 	.word	0x200014e4
 80015c8:	200014e6 	.word	0x200014e6
 80015cc:	200014e5 	.word	0x200014e5
 80015d0:	08009044 	.word	0x08009044
 80015d4:	08009068 	.word	0x08009068
 80015d8:	08009098 	.word	0x08009098
 80015dc:	080090c8 	.word	0x080090c8
 80015e0:	080090ec 	.word	0x080090ec

080015e4 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
 80015ec:	486f      	ldr	r0, [pc, #444]	@ (80017ac <S2LP_PrintStatus+0x1c8>)
 80015ee:	f006 fe93 	bl	8008318 <puts>
	DEBUG_PRINT("  MC_STATE: ");
 80015f2:	486f      	ldr	r0, [pc, #444]	@ (80017b0 <S2LP_PrintStatus+0x1cc>)
 80015f4:	f006 fe28 	bl	8008248 <iprintf>
	switch (status->MC_STATE) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	785b      	ldrb	r3, [r3, #1]
 80015fc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b5c      	cmp	r3, #92	@ 0x5c
 8001604:	f000 808f 	beq.w	8001726 <S2LP_PrintStatus+0x142>
 8001608:	2b5c      	cmp	r3, #92	@ 0x5c
 800160a:	f300 8094 	bgt.w	8001736 <S2LP_PrintStatus+0x152>
 800160e:	2b30      	cmp	r3, #48	@ 0x30
 8001610:	dc6a      	bgt.n	80016e8 <S2LP_PrintStatus+0x104>
 8001612:	2b00      	cmp	r3, #0
 8001614:	f2c0 808f 	blt.w	8001736 <S2LP_PrintStatus+0x152>
 8001618:	2b30      	cmp	r3, #48	@ 0x30
 800161a:	f200 808c 	bhi.w	8001736 <S2LP_PrintStatus+0x152>
 800161e:	a201      	add	r2, pc, #4	@ (adr r2, 8001624 <S2LP_PrintStatus+0x40>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	080016ef 	.word	0x080016ef
 8001628:	08001707 	.word	0x08001707
 800162c:	080016f7 	.word	0x080016f7
 8001630:	080016ff 	.word	0x080016ff
 8001634:	08001737 	.word	0x08001737
 8001638:	08001737 	.word	0x08001737
 800163c:	08001737 	.word	0x08001737
 8001640:	08001737 	.word	0x08001737
 8001644:	08001737 	.word	0x08001737
 8001648:	08001737 	.word	0x08001737
 800164c:	08001737 	.word	0x08001737
 8001650:	08001737 	.word	0x08001737
 8001654:	0800170f 	.word	0x0800170f
 8001658:	08001737 	.word	0x08001737
 800165c:	08001737 	.word	0x08001737
 8001660:	08001737 	.word	0x08001737
 8001664:	08001737 	.word	0x08001737
 8001668:	08001737 	.word	0x08001737
 800166c:	08001737 	.word	0x08001737
 8001670:	08001737 	.word	0x08001737
 8001674:	0800171f 	.word	0x0800171f
 8001678:	08001737 	.word	0x08001737
 800167c:	08001737 	.word	0x08001737
 8001680:	08001737 	.word	0x08001737
 8001684:	08001737 	.word	0x08001737
 8001688:	08001737 	.word	0x08001737
 800168c:	08001737 	.word	0x08001737
 8001690:	08001737 	.word	0x08001737
 8001694:	08001737 	.word	0x08001737
 8001698:	08001737 	.word	0x08001737
 800169c:	08001737 	.word	0x08001737
 80016a0:	08001737 	.word	0x08001737
 80016a4:	08001737 	.word	0x08001737
 80016a8:	08001737 	.word	0x08001737
 80016ac:	08001737 	.word	0x08001737
 80016b0:	08001737 	.word	0x08001737
 80016b4:	08001737 	.word	0x08001737
 80016b8:	08001737 	.word	0x08001737
 80016bc:	08001737 	.word	0x08001737
 80016c0:	08001737 	.word	0x08001737
 80016c4:	08001737 	.word	0x08001737
 80016c8:	08001737 	.word	0x08001737
 80016cc:	08001737 	.word	0x08001737
 80016d0:	08001737 	.word	0x08001737
 80016d4:	08001737 	.word	0x08001737
 80016d8:	08001737 	.word	0x08001737
 80016dc:	08001737 	.word	0x08001737
 80016e0:	08001737 	.word	0x08001737
 80016e4:	08001717 	.word	0x08001717
 80016e8:	2b50      	cmp	r3, #80	@ 0x50
 80016ea:	d020      	beq.n	800172e <S2LP_PrintStatus+0x14a>
 80016ec:	e023      	b.n	8001736 <S2LP_PrintStatus+0x152>
		case (MC_STATE_READY):
			DEBUG_PRINT("READY");
 80016ee:	4831      	ldr	r0, [pc, #196]	@ (80017b4 <S2LP_PrintStatus+0x1d0>)
 80016f0:	f006 fdaa 	bl	8008248 <iprintf>
			break;
 80016f4:	e023      	b.n	800173e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_STANDBY):
			DEBUG_PRINT("STANDBY");
 80016f6:	4830      	ldr	r0, [pc, #192]	@ (80017b8 <S2LP_PrintStatus+0x1d4>)
 80016f8:	f006 fda6 	bl	8008248 <iprintf>
			break;
 80016fc:	e01f      	b.n	800173e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP):
			DEBUG_PRINT("SLEEP");
 80016fe:	482f      	ldr	r0, [pc, #188]	@ (80017bc <S2LP_PrintStatus+0x1d8>)
 8001700:	f006 fda2 	bl	8008248 <iprintf>
			break;
 8001704:	e01b      	b.n	800173e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP_NOFIFO):
			DEBUG_PRINT("SLEEP");
 8001706:	482d      	ldr	r0, [pc, #180]	@ (80017bc <S2LP_PrintStatus+0x1d8>)
 8001708:	f006 fd9e 	bl	8008248 <iprintf>
			break;
 800170c:	e017      	b.n	800173e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCKON):
			DEBUG_PRINT("LOCKON");
 800170e:	482c      	ldr	r0, [pc, #176]	@ (80017c0 <S2LP_PrintStatus+0x1dc>)
 8001710:	f006 fd9a 	bl	8008248 <iprintf>
			break;
 8001714:	e013      	b.n	800173e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_RX):
			DEBUG_PRINT("RX");
 8001716:	482b      	ldr	r0, [pc, #172]	@ (80017c4 <S2LP_PrintStatus+0x1e0>)
 8001718:	f006 fd96 	bl	8008248 <iprintf>
			break;
 800171c:	e00f      	b.n	800173e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCK_ST):
			DEBUG_PRINT("LOCK_ST");
 800171e:	482a      	ldr	r0, [pc, #168]	@ (80017c8 <S2LP_PrintStatus+0x1e4>)
 8001720:	f006 fd92 	bl	8008248 <iprintf>
			break;
 8001724:	e00b      	b.n	800173e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_TX):
			DEBUG_PRINT("TX");
 8001726:	4829      	ldr	r0, [pc, #164]	@ (80017cc <S2LP_PrintStatus+0x1e8>)
 8001728:	f006 fd8e 	bl	8008248 <iprintf>
			break;
 800172c:	e007      	b.n	800173e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
 800172e:	4828      	ldr	r0, [pc, #160]	@ (80017d0 <S2LP_PrintStatus+0x1ec>)
 8001730:	f006 fd8a 	bl	8008248 <iprintf>
			break;
 8001734:	e003      	b.n	800173e <S2LP_PrintStatus+0x15a>
		default:
			DEBUG_PRINT("UNKNOWN");
 8001736:	4827      	ldr	r0, [pc, #156]	@ (80017d4 <S2LP_PrintStatus+0x1f0>)
 8001738:	f006 fd86 	bl	8008248 <iprintf>
			break;
 800173c:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
 800173e:	4826      	ldr	r0, [pc, #152]	@ (80017d8 <S2LP_PrintStatus+0x1f4>)
 8001740:	f006 fdea 	bl	8008318 <puts>
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	785b      	ldrb	r3, [r3, #1]
 8001748:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4619      	mov	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4618      	mov	r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001770:	b2db      	uxtb	r3, r3
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	4603      	mov	r3, r0
 8001776:	4819      	ldr	r0, [pc, #100]	@ (80017dc <S2LP_PrintStatus+0x1f8>)
 8001778:	f006 fd66 	bl	8008248 <iprintf>
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4619      	mov	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4810      	ldr	r0, [pc, #64]	@ (80017e0 <S2LP_PrintStatus+0x1fc>)
 80017a0:	f006 fd52 	bl	8008248 <iprintf>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	08009108 	.word	0x08009108
 80017b0:	08009120 	.word	0x08009120
 80017b4:	08009130 	.word	0x08009130
 80017b8:	08009138 	.word	0x08009138
 80017bc:	08009140 	.word	0x08009140
 80017c0:	08009148 	.word	0x08009148
 80017c4:	08009150 	.word	0x08009150
 80017c8:	08009154 	.word	0x08009154
 80017cc:	0800915c 	.word	0x0800915c
 80017d0:	08009160 	.word	0x08009160
 80017d4:	0800916c 	.word	0x0800916c
 80017d8:	08009174 	.word	0x08009174
 80017dc:	08009178 	.word	0x08009178
 80017e0:	080091b8 	.word	0x080091b8
 80017e4:	00000000 	.word	0x00000000

080017e8 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 80017e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017ec:	b09e      	sub	sp, #120	@ 0x78
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 80017f2:	2304      	movs	r3, #4
 80017f4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 80017f8:	2301      	movs	r3, #1
 80017fa:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 80017fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001800:	17da      	asrs	r2, r3, #31
 8001802:	469a      	mov	sl, r3
 8001804:	4693      	mov	fp, r2
 8001806:	ea4f 396a 	mov.w	r9, sl, asr #13
 800180a:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 800180e:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 8001812:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001816:	fb02 f303 	mul.w	r3, r2, r3
 800181a:	17da      	asrs	r2, r3, #31
 800181c:	623b      	str	r3, [r7, #32]
 800181e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001820:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001824:	4603      	mov	r3, r0
 8001826:	fb03 f209 	mul.w	r2, r3, r9
 800182a:	460b      	mov	r3, r1
 800182c:	fb08 f303 	mul.w	r3, r8, r3
 8001830:	4413      	add	r3, r2
 8001832:	4602      	mov	r2, r0
 8001834:	fba8 4502 	umull	r4, r5, r8, r2
 8001838:	442b      	add	r3, r5
 800183a:	461d      	mov	r5, r3
 800183c:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 8001840:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 8001844:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001848:	a374      	add	r3, pc, #464	@ (adr r3, 8001a1c <S2LP_PLLConf+0x234>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fd1f 	bl	8000290 <__aeabi_uldivmod>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4613      	mov	r3, r2
 8001858:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 800185a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800185c:	2200      	movs	r2, #0
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	61fa      	str	r2, [r7, #28]
 8001862:	4b6b      	ldr	r3, [pc, #428]	@ (8001a10 <S2LP_PLLConf+0x228>)
 8001864:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001868:	462a      	mov	r2, r5
 800186a:	fb03 f202 	mul.w	r2, r3, r2
 800186e:	2300      	movs	r3, #0
 8001870:	4621      	mov	r1, r4
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	4a65      	ldr	r2, [pc, #404]	@ (8001a10 <S2LP_PLLConf+0x228>)
 800187a:	4621      	mov	r1, r4
 800187c:	fba1 1202 	umull	r1, r2, r1, r2
 8001880:	637a      	str	r2, [r7, #52]	@ 0x34
 8001882:	460a      	mov	r2, r1
 8001884:	633a      	str	r2, [r7, #48]	@ 0x30
 8001886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001888:	4413      	add	r3, r2
 800188a:	637b      	str	r3, [r7, #52]	@ 0x34
 800188c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001890:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 8001894:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8001898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800189a:	3301      	adds	r3, #1
 800189c:	2200      	movs	r2, #0
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	617a      	str	r2, [r7, #20]
 80018a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a10 <S2LP_PLLConf+0x228>)
 80018a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018a8:	462a      	mov	r2, r5
 80018aa:	fb03 f202 	mul.w	r2, r3, r2
 80018ae:	2300      	movs	r3, #0
 80018b0:	4621      	mov	r1, r4
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	4a55      	ldr	r2, [pc, #340]	@ (8001a10 <S2LP_PLLConf+0x228>)
 80018ba:	4621      	mov	r1, r4
 80018bc:	fba1 1202 	umull	r1, r2, r1, r2
 80018c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018c2:	460a      	mov	r2, r1
 80018c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80018c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c8:	4413      	add	r3, r2
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018cc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80018d0:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 80018d4:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 80018d8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80018dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80018e0:	1a84      	subs	r4, r0, r2
 80018e2:	60bc      	str	r4, [r7, #8]
 80018e4:	eb61 0303 	sbc.w	r3, r1, r3
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80018ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018f2:	1a84      	subs	r4, r0, r2
 80018f4:	603c      	str	r4, [r7, #0]
 80018f6:	eb61 0303 	sbc.w	r3, r1, r3
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001900:	4623      	mov	r3, r4
 8001902:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001906:	4602      	mov	r2, r0
 8001908:	4293      	cmp	r3, r2
 800190a:	462b      	mov	r3, r5
 800190c:	460a      	mov	r2, r1
 800190e:	4193      	sbcs	r3, r2
 8001910:	d202      	bcs.n	8001918 <S2LP_PLLConf+0x130>
 8001912:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001914:	3301      	adds	r3, #1
 8001916:	e000      	b.n	800191a <S2LP_PLLConf+0x132>
 8001918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800191a:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 800191c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001920:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 8001928:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800192c:	4a38      	ldr	r2, [pc, #224]	@ (8001a10 <S2LP_PLLConf+0x228>)
 800192e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001932:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 8001934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001936:	4a37      	ldr	r2, [pc, #220]	@ (8001a14 <S2LP_PLLConf+0x22c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d911      	bls.n	8001960 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 800193c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800193e:	4a36      	ldr	r2, [pc, #216]	@ (8001a18 <S2LP_PLLConf+0x230>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d906      	bls.n	8001952 <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 8001944:	2302      	movs	r3, #2
 8001946:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001950:	e017      	b.n	8001982 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 8001952:	2301      	movs	r3, #1
 8001954:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8001958:	2301      	movs	r3, #1
 800195a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800195e:	e010      	b.n	8001982 <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001962:	4a2d      	ldr	r2, [pc, #180]	@ (8001a18 <S2LP_PLLConf+0x230>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d906      	bls.n	8001976 <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 8001968:	2303      	movs	r3, #3
 800196a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001974:	e005      	b.n	8001982 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 8001976:	2302      	movs	r3, #2
 8001978:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 800197c:	2301      	movs	r3, #1
 800197e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 8001982:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001986:	015b      	lsls	r3, r3, #5
 8001988:	b2da      	uxtb	r2, r3
 800198a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800198c:	0e1b      	lsrs	r3, r3, #24
 800198e:	b2db      	uxtb	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 8001996:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001998:	0c1b      	lsrs	r3, r3, #16
 800199a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 800199e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 80019a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019a8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 80019ac:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	3b30      	subs	r3, #48	@ 0x30
 80019b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 80019ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80019be:	2200      	movs	r2, #0
 80019c0:	4619      	mov	r1, r3
 80019c2:	2005      	movs	r0, #5
 80019c4:	f7ff fca2 	bl	800130c <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 80019c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	2006      	movs	r0, #6
 80019d2:	f7ff fc9b 	bl	800130c <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 80019d6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80019da:	2200      	movs	r2, #0
 80019dc:	4619      	mov	r1, r3
 80019de:	2007      	movs	r0, #7
 80019e0:	f7ff fc94 	bl	800130c <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 80019e4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80019e8:	2200      	movs	r2, #0
 80019ea:	4619      	mov	r1, r3
 80019ec:	2008      	movs	r0, #8
 80019ee:	f7ff fc8d 	bl	800130c <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 80019f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80019f6:	2200      	movs	r2, #0
 80019f8:	4619      	mov	r1, r3
 80019fa:	2065      	movs	r0, #101	@ 0x65
 80019fc:	f7ff fc86 	bl	800130c <S2LP_WriteReg>
}
 8001a00:	bf00      	nop
 8001a02:	3778      	adds	r7, #120	@ 0x78
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0a:	bf00      	nop
 8001a0c:	f3af 8000 	nop.w
 8001a10:	02faf080 	.word	0x02faf080
 8001a14:	d693a3ff 	.word	0xd693a3ff
 8001a18:	01c9c380 	.word	0x01c9c380
 8001a1c:	02faf080 	.word	0x02faf080
 8001a20:	00000000 	.word	0x00000000

08001a24 <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 8001a24:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a28:	b091      	sub	sp, #68	@ 0x44
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	460a      	mov	r2, r1
 8001a30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001a32:	4613      	mov	r3, r2
 8001a34:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 8001a38:	4b3f      	ldr	r3, [pc, #252]	@ (8001b38 <ComputeDatarate+0x114>)
 8001a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001a3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b3c <ComputeDatarate+0x118>)
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d902      	bls.n	8001a4a <ComputeDatarate+0x26>
    f_dig >>= 1;
 8001a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 8001a4a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d128      	bne.n	8001aa4 <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 8001a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a54:	2200      	movs	r2, #0
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	61fa      	str	r2, [r7, #28]
 8001a5a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	617a      	str	r2, [r7, #20]
 8001a62:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001a66:	462b      	mov	r3, r5
 8001a68:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a6c:	4642      	mov	r2, r8
 8001a6e:	fb02 f203 	mul.w	r2, r2, r3
 8001a72:	464b      	mov	r3, r9
 8001a74:	4621      	mov	r1, r4
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4622      	mov	r2, r4
 8001a7e:	4641      	mov	r1, r8
 8001a80:	fba2 ab01 	umull	sl, fp, r2, r1
 8001a84:	445b      	add	r3, fp
 8001a86:	469b      	mov	fp, r3
 8001a88:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 8001a8c:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 8001a90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	000a      	movs	r2, r1
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	e043      	b.n	8001b2c <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 8001aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	60fa      	str	r2, [r7, #12]
 8001aac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001aae:	2200      	movs	r2, #0
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 8001abe:	623b      	str	r3, [r7, #32]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	f143 0300 	adc.w	r3, r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001acc:	460b      	mov	r3, r1
 8001ace:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8001ad2:	4652      	mov	r2, sl
 8001ad4:	fb02 f203 	mul.w	r2, r2, r3
 8001ad8:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8001adc:	465b      	mov	r3, fp
 8001ade:	4682      	mov	sl, r0
 8001ae0:	468b      	mov	fp, r1
 8001ae2:	4651      	mov	r1, sl
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	4652      	mov	r2, sl
 8001aec:	6a39      	ldr	r1, [r7, #32]
 8001aee:	fba2 4501 	umull	r4, r5, r2, r1
 8001af2:	442b      	add	r3, r5
 8001af4:	461d      	mov	r5, r3
 8001af6:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 8001afa:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 8001afe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b02:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8001b06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b0a:	f1c1 0420 	rsb	r4, r1, #32
 8001b0e:	f1a1 0020 	sub.w	r0, r1, #32
 8001b12:	fa22 f801 	lsr.w	r8, r2, r1
 8001b16:	fa03 f404 	lsl.w	r4, r3, r4
 8001b1a:	ea48 0804 	orr.w	r8, r8, r4
 8001b1e:	fa23 f000 	lsr.w	r0, r3, r0
 8001b22:	ea48 0800 	orr.w	r8, r8, r0
 8001b26:	fa23 f901 	lsr.w	r9, r3, r1
 8001b2a:	4643      	mov	r3, r8
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3744      	adds	r7, #68	@ 0x44
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b36:	4770      	bx	lr
 8001b38:	02faf080 	.word	0x02faf080
 8001b3c:	01c9c380 	.word	0x01c9c380

08001b40 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 8001b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b44:	b0ae      	sub	sp, #184	@ 0xb8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8001b4c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001b50:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 8001b54:	4ba5      	ldr	r3, [pc, #660]	@ (8001dec <SearchDatarateME+0x2ac>)
 8001b56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b5e:	4ba4      	ldr	r3, [pc, #656]	@ (8001df0 <SearchDatarateME+0x2b0>)
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d904      	bls.n	8001b6e <SearchDatarateME+0x2e>
    f_dig >>= 1;
 8001b64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b68:	085b      	lsrs	r3, r3, #1
 8001b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001b74:	e013      	b.n	8001b9e <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 8001b76:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b80:	f7ff ff50 	bl	8001a24 <ComputeDatarate>
 8001b84:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 8001b88:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d909      	bls.n	8001ba8 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8001b94:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001b9e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d1e7      	bne.n	8001b76 <SearchDatarateME+0x36>
 8001ba6:	e000      	b.n	8001baa <SearchDatarateME+0x6a>
      break;
 8001ba8:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8001baa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001bae:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001bb2:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 8001bb4:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d16b      	bne.n	8001c94 <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 8001bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bc4:	667a      	str	r2, [r7, #100]	@ 0x64
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001bd0:	000b      	movs	r3, r1
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8001bd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001be0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001be2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001be6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001bea:	f7fe fb51 	bl	8000290 <__aeabi_uldivmod>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	b293      	uxth	r3, r2
 8001bf4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001bf8:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 8001bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c02:	657a      	str	r2, [r7, #84]	@ 0x54
 8001c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c10:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c12:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001c16:	462b      	mov	r3, r5
 8001c18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	fb02 f203 	mul.w	r2, r2, r3
 8001c22:	464b      	mov	r3, r9
 8001c24:	4621      	mov	r1, r4
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4622      	mov	r2, r4
 8001c2e:	4641      	mov	r1, r8
 8001c30:	fba2 1201 	umull	r1, r2, r2, r1
 8001c34:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001c36:	460a      	mov	r2, r1
 8001c38:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001c3a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001c3c:	4413      	add	r3, r2
 8001c3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c40:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8001c44:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8001c48:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 8001c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c50:	2200      	movs	r2, #0
 8001c52:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c54:	647a      	str	r2, [r7, #68]	@ 0x44
 8001c56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	17da      	asrs	r2, r3, #31
 8001c60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c62:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c64:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001c68:	462b      	mov	r3, r5
 8001c6a:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001c6e:	4642      	mov	r2, r8
 8001c70:	fb02 f203 	mul.w	r2, r2, r3
 8001c74:	464b      	mov	r3, r9
 8001c76:	4621      	mov	r1, r4
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4622      	mov	r2, r4
 8001c80:	4641      	mov	r1, r8
 8001c82:	fba2 ab01 	umull	sl, fp, r2, r1
 8001c86:	445b      	add	r3, fp
 8001c88:	469b      	mov	fp, r3
 8001c8a:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8001c8e:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8001c92:	e07d      	b.n	8001d90 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 8001c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4698      	mov	r8, r3
 8001c9c:	4691      	mov	r9, r2
 8001c9e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001ca2:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8001ca6:	f1a1 0320 	sub.w	r3, r1, #32
 8001caa:	f1c1 0220 	rsb	r2, r1, #32
 8001cae:	fa09 f501 	lsl.w	r5, r9, r1
 8001cb2:	fa08 f303 	lsl.w	r3, r8, r3
 8001cb6:	431d      	orrs	r5, r3
 8001cb8:	fa28 f202 	lsr.w	r2, r8, r2
 8001cbc:	4315      	orrs	r5, r2
 8001cbe:	fa08 f401 	lsl.w	r4, r8, r1
 8001cc2:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 8001cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cce:	637a      	str	r2, [r7, #52]	@ 0x34
 8001cd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001cd8:	f7fe fada 	bl	8000290 <__aeabi_uldivmod>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	b293      	uxth	r3, r2
 8001ce2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001ce6:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8001ce8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cec:	2200      	movs	r2, #0
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001cfc:	17da      	asrs	r2, r3, #31
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d02:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001d06:	462b      	mov	r3, r5
 8001d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d0c:	4642      	mov	r2, r8
 8001d0e:	fb02 f203 	mul.w	r2, r2, r3
 8001d12:	464b      	mov	r3, r9
 8001d14:	4621      	mov	r1, r4
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	4641      	mov	r1, r8
 8001d20:	fba2 1201 	umull	r1, r2, r2, r1
 8001d24:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d26:	460a      	mov	r2, r1
 8001d28:	673a      	str	r2, [r7, #112]	@ 0x70
 8001d2a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001d2c:	4413      	add	r3, r2
 8001d2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d30:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8001d34:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8001d38:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 8001d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d40:	2200      	movs	r2, #0
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	61fa      	str	r2, [r7, #28]
 8001d46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8001d50:	17da      	asrs	r2, r3, #31
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	617a      	str	r2, [r7, #20]
 8001d56:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d5a:	462b      	mov	r3, r5
 8001d5c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001d60:	4642      	mov	r2, r8
 8001d62:	fb02 f203 	mul.w	r2, r2, r3
 8001d66:	464b      	mov	r3, r9
 8001d68:	4621      	mov	r1, r4
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	4622      	mov	r2, r4
 8001d72:	4641      	mov	r1, r8
 8001d74:	fba2 1201 	umull	r1, r2, r2, r1
 8001d78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001d7a:	460a      	mov	r2, r1
 8001d7c:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001d7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001d80:	4413      	add	r3, r2
 8001d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001d84:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8001d88:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 8001d8c:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8001d90:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001d94:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001d98:	1a84      	subs	r4, r0, r2
 8001d9a:	60bc      	str	r4, [r7, #8]
 8001d9c:	eb61 0303 	sbc.w	r3, r1, r3
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001da6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001daa:	1a84      	subs	r4, r0, r2
 8001dac:	603c      	str	r4, [r7, #0]
 8001dae:	eb61 0303 	sbc.w	r3, r1, r3
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001db8:	4623      	mov	r3, r4
 8001dba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	462b      	mov	r3, r5
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	4193      	sbcs	r3, r2
 8001dc8:	d205      	bcs.n	8001dd6 <SearchDatarateME+0x296>
 8001dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	e002      	b.n	8001ddc <SearchDatarateME+0x29c>
 8001dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001de0:	8013      	strh	r3, [r2, #0]

}
 8001de2:	bf00      	nop
 8001de4:	37b8      	adds	r7, #184	@ 0xb8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dec:	02faf080 	.word	0x02faf080
 8001df0:	01c9c380 	.word	0x01c9c380

08001df4 <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 8001df4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001df8:	b08c      	sub	sp, #48	@ 0x30
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	461e      	mov	r6, r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e04:	460b      	mov	r3, r1
 8001e06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001e10:	4633      	mov	r3, r6
 8001e12:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 8001e16:	4b35      	ldr	r3, [pc, #212]	@ (8001eec <ComputeFreqDeviation+0xf8>)
 8001e18:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 8001e1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d127      	bne.n	8001e72 <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 8001e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e24:	2200      	movs	r2, #0
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	617a      	str	r2, [r7, #20]
 8001e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	60fa      	str	r2, [r7, #12]
 8001e34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e38:	462b      	mov	r3, r5
 8001e3a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001e3e:	4642      	mov	r2, r8
 8001e40:	fb02 f203 	mul.w	r2, r2, r3
 8001e44:	464b      	mov	r3, r9
 8001e46:	4621      	mov	r1, r4
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4622      	mov	r2, r4
 8001e50:	4641      	mov	r1, r8
 8001e52:	fba2 ab01 	umull	sl, fp, r2, r1
 8001e56:	445b      	add	r3, fp
 8001e58:	469b      	mov	fp, r3
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	ea4f 529a 	mov.w	r2, sl, lsr #22
 8001e66:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 8001e6a:	ea4f 539b 	mov.w	r3, fp, lsr #22
 8001e6e:	4613      	mov	r3, r2
 8001e70:	e036      	b.n	8001ee0 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 8001e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e74:	2200      	movs	r2, #0
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001e82:	17da      	asrs	r2, r3, #31
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	61fa      	str	r2, [r7, #28]
 8001e88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e92:	4652      	mov	r2, sl
 8001e94:	fb02 f203 	mul.w	r2, r2, r3
 8001e98:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8001e9c:	465b      	mov	r3, fp
 8001e9e:	4682      	mov	sl, r0
 8001ea0:	468b      	mov	fp, r1
 8001ea2:	4651      	mov	r1, sl
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4652      	mov	r2, sl
 8001eac:	69b9      	ldr	r1, [r7, #24]
 8001eae:	fba2 4501 	umull	r4, r5, r2, r1
 8001eb2:	442b      	add	r3, r5
 8001eb4:	461d      	mov	r5, r3
 8001eb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001eba:	f1c3 0317 	rsb	r3, r3, #23
 8001ebe:	f1c3 0120 	rsb	r1, r3, #32
 8001ec2:	f1a3 0220 	sub.w	r2, r3, #32
 8001ec6:	fa24 f803 	lsr.w	r8, r4, r3
 8001eca:	fa05 f101 	lsl.w	r1, r5, r1
 8001ece:	ea48 0801 	orr.w	r8, r8, r1
 8001ed2:	fa25 f202 	lsr.w	r2, r5, r2
 8001ed6:	ea48 0802 	orr.w	r8, r8, r2
 8001eda:	fa25 f903 	lsr.w	r9, r5, r3
 8001ede:	4643      	mov	r3, r8
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3730      	adds	r7, #48	@ 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001eea:	4770      	bx	lr
 8001eec:	02faf080 	.word	0x02faf080

08001ef0 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8001ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef4:	b0a2      	sub	sp, #136	@ 0x88
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8001efa:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001efc:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 8001efe:	2304      	movs	r3, #4
 8001f00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001f10:	e012      	b.n	8001f38 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 8001f12:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001f16:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001f1a:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 8001f1e:	20ff      	movs	r0, #255	@ 0xff
 8001f20:	f7ff ff68 	bl	8001df4 <ComputeFreqDeviation>
 8001f24:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 8001f26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001f28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d309      	bcc.n	8001f42 <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001f2e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f32:	3301      	adds	r3, #1
 8001f34:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001f38:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	d1e8      	bne.n	8001f12 <SearchFreqDevME+0x22>
 8001f40:	e000      	b.n	8001f44 <SearchFreqDevME+0x54>
      break;
 8001f42:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 8001f44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001f46:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f4a:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 8001f4c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d155      	bne.n	8002000 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 8001f54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f56:	2200      	movs	r2, #0
 8001f58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001f68:	4629      	mov	r1, r5
 8001f6a:	058b      	lsls	r3, r1, #22
 8001f6c:	4621      	mov	r1, r4
 8001f6e:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 8001f72:	4621      	mov	r1, r4
 8001f74:	058a      	lsls	r2, r1, #22
 8001f76:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 8001f7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001f7e:	a36e      	add	r3, pc, #440	@ (adr r3, 8002138 <SearchFreqDevME+0x248>)
 8001f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f84:	f7fe f984 	bl	8000290 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	b2d3      	uxtb	r3, r2
 8001f8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f90:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 8001f92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f9c:	637a      	str	r2, [r7, #52]	@ 0x34
 8001f9e:	4b68      	ldr	r3, [pc, #416]	@ (8002140 <SearchFreqDevME+0x250>)
 8001fa0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fa4:	462a      	mov	r2, r5
 8001fa6:	fb03 f202 	mul.w	r2, r3, r2
 8001faa:	2300      	movs	r3, #0
 8001fac:	4621      	mov	r1, r4
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a62      	ldr	r2, [pc, #392]	@ (8002140 <SearchFreqDevME+0x250>)
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	fba1 ab02 	umull	sl, fp, r1, r2
 8001fbc:	445b      	add	r3, fp
 8001fbe:	469b      	mov	fp, r3
 8001fc0:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 8001fc4:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8001fc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	17da      	asrs	r2, r3, #31
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fd4:	4b5a      	ldr	r3, [pc, #360]	@ (8002140 <SearchFreqDevME+0x250>)
 8001fd6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001fda:	462a      	mov	r2, r5
 8001fdc:	fb03 f202 	mul.w	r2, r3, r2
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a55      	ldr	r2, [pc, #340]	@ (8002140 <SearchFreqDevME+0x250>)
 8001fec:	4621      	mov	r1, r4
 8001fee:	fba1 8902 	umull	r8, r9, r1, r2
 8001ff2:	444b      	add	r3, r9
 8001ff4:	4699      	mov	r9, r3
 8001ff6:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8001ffa:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8001ffe:	e06d      	b.n	80020dc <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8002000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002002:	2200      	movs	r2, #0
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	627a      	str	r2, [r7, #36]	@ 0x24
 8002008:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800200c:	f1c3 0117 	rsb	r1, r3, #23
 8002010:	f1a1 0320 	sub.w	r3, r1, #32
 8002014:	f1c1 0220 	rsb	r2, r1, #32
 8002018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800201c:	4648      	mov	r0, r9
 800201e:	fa00 f501 	lsl.w	r5, r0, r1
 8002022:	4640      	mov	r0, r8
 8002024:	fa00 f303 	lsl.w	r3, r0, r3
 8002028:	431d      	orrs	r5, r3
 800202a:	4643      	mov	r3, r8
 800202c:	fa23 f202 	lsr.w	r2, r3, r2
 8002030:	4315      	orrs	r5, r2
 8002032:	4643      	mov	r3, r8
 8002034:	408b      	lsls	r3, r1
 8002036:	461c      	mov	r4, r3
 8002038:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 800203c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002040:	a33d      	add	r3, pc, #244	@ (adr r3, 8002138 <SearchFreqDevME+0x248>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe f923 	bl	8000290 <__aeabi_uldivmod>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	b2d3      	uxtb	r3, r2
 8002050:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002052:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 8002054:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800205c:	17da      	asrs	r2, r3, #31
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	61fa      	str	r2, [r7, #28]
 8002062:	4b37      	ldr	r3, [pc, #220]	@ (8002140 <SearchFreqDevME+0x250>)
 8002064:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002068:	462a      	mov	r2, r5
 800206a:	fb03 f202 	mul.w	r2, r3, r2
 800206e:	2300      	movs	r3, #0
 8002070:	4621      	mov	r1, r4
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	4a31      	ldr	r2, [pc, #196]	@ (8002140 <SearchFreqDevME+0x250>)
 800207a:	4621      	mov	r1, r4
 800207c:	fba1 1202 	umull	r1, r2, r1, r2
 8002080:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002082:	460a      	mov	r2, r1
 8002084:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002086:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002088:	4413      	add	r3, r2
 800208a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800208c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002090:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8002094:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8002098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80020a0:	17da      	asrs	r2, r3, #31
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	617a      	str	r2, [r7, #20]
 80020a6:	4b26      	ldr	r3, [pc, #152]	@ (8002140 <SearchFreqDevME+0x250>)
 80020a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020ac:	462a      	mov	r2, r5
 80020ae:	fb03 f202 	mul.w	r2, r3, r2
 80020b2:	2300      	movs	r3, #0
 80020b4:	4621      	mov	r1, r4
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	4a20      	ldr	r2, [pc, #128]	@ (8002140 <SearchFreqDevME+0x250>)
 80020be:	4621      	mov	r1, r4
 80020c0:	fba1 1202 	umull	r1, r2, r1, r2
 80020c4:	647a      	str	r2, [r7, #68]	@ 0x44
 80020c6:	460a      	mov	r2, r1
 80020c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80020ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020cc:	4413      	add	r3, r2
 80020ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80020d0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80020d4:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 80020d8:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 80020dc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80020e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80020e4:	1a84      	subs	r4, r0, r2
 80020e6:	60bc      	str	r4, [r7, #8]
 80020e8:	eb61 0303 	sbc.w	r3, r1, r3
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80020f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80020f6:	1a84      	subs	r4, r0, r2
 80020f8:	603c      	str	r4, [r7, #0]
 80020fa:	eb61 0303 	sbc.w	r3, r1, r3
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002104:	4623      	mov	r3, r4
 8002106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800210a:	4602      	mov	r2, r0
 800210c:	4293      	cmp	r3, r2
 800210e:	462b      	mov	r3, r5
 8002110:	460a      	mov	r2, r1
 8002112:	4193      	sbcs	r3, r2
 8002114:	d204      	bcs.n	8002120 <SearchFreqDevME+0x230>
 8002116:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e001      	b.n	8002124 <SearchFreqDevME+0x234>
 8002120:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002126:	7013      	strb	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	3788      	adds	r7, #136	@ 0x88
 800212c:	46bd      	mov	sp, r7
 800212e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002132:	bf00      	nop
 8002134:	f3af 8000 	nop.w
 8002138:	02faf080 	.word	0x02faf080
 800213c:	00000000 	.word	0x00000000
 8002140:	02faf080 	.word	0x02faf080

08002144 <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 8002152:	f107 0217 	add.w	r2, r7, #23
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	68b8      	ldr	r0, [r7, #8]
 800215e:	f7ff fcef 	bl	8001b40 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 8002162:	f107 0212 	add.w	r2, r7, #18
 8002166:	f107 0313 	add.w	r3, r7, #19
 800216a:	4619      	mov	r1, r3
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff febf 	bl	8001ef0 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 8002172:	8abb      	ldrh	r3, [r7, #20]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	b29b      	uxth	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2200      	movs	r2, #0
 800217c:	4619      	mov	r1, r3
 800217e:	200e      	movs	r0, #14
 8002180:	f7ff f8c4 	bl	800130c <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 8002184:	8abb      	ldrh	r3, [r7, #20]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2200      	movs	r2, #0
 800218a:	4619      	mov	r1, r3
 800218c:	200f      	movs	r0, #15
 800218e:	f7ff f8bd 	bl	800130c <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 8002192:	7dfa      	ldrb	r2, [r7, #23]
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	4313      	orrs	r3, r2
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2200      	movs	r2, #0
 800219c:	4619      	mov	r1, r3
 800219e:	2010      	movs	r0, #16
 80021a0:	f7ff f8b4 	bl	800130c <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	2200      	movs	r2, #0
 80021a8:	4619      	mov	r1, r3
 80021aa:	2012      	movs	r0, #18
 80021ac:	f7ff f8ae 	bl	800130c <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 80021b0:	7cbb      	ldrb	r3, [r7, #18]
 80021b2:	2200      	movs	r2, #0
 80021b4:	4619      	mov	r1, r3
 80021b6:	2011      	movs	r0, #17
 80021b8:	f7ff f8a8 	bl	800130c <S2LP_WriteReg>
}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b0e      	cmp	r3, #14
 80021d0:	dd02      	ble.n	80021d8 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	e006      	b.n	80021e6 <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f1c3 031d 	rsb	r3, r3, #29
 80021e4:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2062      	movs	r0, #98	@ 0x62
 80021ec:	f7ff f88e 	bl	800130c <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2064      	movs	r0, #100	@ 0x64
 80021f6:	f7ff f889 	bl	800130c <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	2063      	movs	r0, #99	@ 0x63
 8002200:	f7ff f884 	bl	800130c <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2200      	movs	r2, #0
 8002208:	4619      	mov	r1, r3
 800220a:	2061      	movs	r0, #97	@ 0x61
 800220c:	f7ff f87e 	bl	800130c <S2LP_WriteReg>
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <S2LP_Init>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 8002220:	4a48      	ldr	r2, [pc, #288]	@ (8002344 <S2LP_Init+0x12c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 8002226:	f002 fdb9 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 800222a:	4603      	mov	r3, r0
 800222c:	4a46      	ldr	r2, [pc, #280]	@ (8002348 <S2LP_Init+0x130>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	0a9b      	lsrs	r3, r3, #10
 8002234:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002236:	b672      	cpsid	i
}
 8002238:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 800223a:	2200      	movs	r2, #0
 800223c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002240:	4842      	ldr	r0, [pc, #264]	@ (800234c <S2LP_Init+0x134>)
 8002242:	f002 f89b 	bl	800437c <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	e003      	b.n	8002254 <S2LP_Init+0x3c>
		asm volatile("nop");
 800224c:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	429a      	cmp	r2, r3
 800225a:	d3f7      	bcc.n	800224c <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 800225c:	b662      	cpsie	i
}
 800225e:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 8002260:	2200      	movs	r2, #0
 8002262:	2103      	movs	r1, #3
 8002264:	2000      	movs	r0, #0
 8002266:	f7ff f851 	bl	800130c <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 800226a:	2200      	movs	r2, #0
 800226c:	21a4      	movs	r1, #164	@ 0xa4
 800226e:	2053      	movs	r0, #83	@ 0x53
 8002270:	f7ff f84c 	bl	800130c <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 8002274:	2200      	movs	r2, #0
 8002276:	2101      	movs	r1, #1
 8002278:	2052      	movs	r0, #82	@ 0x52
 800227a:	f7ff f847 	bl	800130c <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2051      	movs	r0, #81	@ 0x51
 8002284:	f7ff f842 	bl	800130c <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 8002288:	2200      	movs	r2, #0
 800228a:	2100      	movs	r1, #0
 800228c:	2050      	movs	r0, #80	@ 0x50
 800228e:	f7ff f83d 	bl	800130c <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 8002292:	2200      	movs	r2, #0
 8002294:	2120      	movs	r1, #32
 8002296:	203f      	movs	r0, #63	@ 0x3f
 8002298:	f7ff f838 	bl	800130c <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 800229c:	2200      	movs	r2, #0
 800229e:	21b7      	movs	r1, #183	@ 0xb7
 80022a0:	2033      	movs	r0, #51	@ 0x33
 80022a2:	f7ff f833 	bl	800130c <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2154      	movs	r1, #84	@ 0x54
 80022aa:	2034      	movs	r0, #52	@ 0x34
 80022ac:	f7ff f82e 	bl	800130c <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 80022b0:	2200      	movs	r2, #0
 80022b2:	212a      	movs	r1, #42	@ 0x2a
 80022b4:	2035      	movs	r0, #53	@ 0x35
 80022b6:	f7ff f829 	bl	800130c <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 80022ba:	2200      	movs	r2, #0
 80022bc:	213e      	movs	r1, #62	@ 0x3e
 80022be:	2036      	movs	r0, #54	@ 0x36
 80022c0:	f7ff f824 	bl	800130c <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 80022c4:	4822      	ldr	r0, [pc, #136]	@ (8002350 <S2LP_Init+0x138>)
 80022c6:	f7ff fa8f 	bl	80017e8 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7ff ff7a 	bl	80021c4 <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 80022d0:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 80022d4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80022d8:	2000      	movs	r0, #0
 80022da:	f7ff ff33 	bl	8002144 <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 80022de:	2200      	movs	r2, #0
 80022e0:	2120      	movs	r1, #32
 80022e2:	2030      	movs	r0, #48	@ 0x30
 80022e4:	f7ff f812 	bl	800130c <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	202e      	movs	r0, #46	@ 0x2e
 80022ee:	f7ff f80d 	bl	800130c <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 80022f2:	f107 020c 	add.w	r2, r7, #12
 80022f6:	f107 030b 	add.w	r3, r7, #11
 80022fa:	4619      	mov	r1, r3
 80022fc:	206c      	movs	r0, #108	@ 0x6c
 80022fe:	f7fe ffc7 	bl	8001290 <S2LP_ReadReg>
 8002302:	4603      	mov	r3, r0
 8002304:	73fb      	strb	r3, [r7, #15]
	if (err) {
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <S2LP_Init+0xf8>
		return err;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	e015      	b.n	800233c <S2LP_Init+0x124>
	} else if (rco_conf != 0x45) {
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	2b45      	cmp	r3, #69	@ 0x45
 8002314:	d006      	beq.n	8002324 <S2LP_Init+0x10c>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
 8002316:	7afb      	ldrb	r3, [r7, #11]
 8002318:	4619      	mov	r1, r3
 800231a:	480e      	ldr	r0, [pc, #56]	@ (8002354 <S2LP_Init+0x13c>)
 800231c:	f005 ff94 	bl	8008248 <iprintf>
		return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e00b      	b.n	800233c <S2LP_Init+0x124>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 8002324:	7b7b      	ldrb	r3, [r7, #13]
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <S2LP_Init+0x122>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
 8002330:	4809      	ldr	r0, [pc, #36]	@ (8002358 <S2LP_Init+0x140>)
 8002332:	f005 fff1 	bl	8008318 <puts>
		return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <S2LP_Init+0x124>
	}

	return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200014e8 	.word	0x200014e8
 8002348:	1b4e81b5 	.word	0x1b4e81b5
 800234c:	48001400 	.word	0x48001400
 8002350:	33bca100 	.word	0x33bca100
 8002354:	08009230 	.word	0x08009230
 8002358:	0800928c 	.word	0x0800928c

0800235c <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	2200      	movs	r2, #0
 8002366:	4619      	mov	r1, r3
 8002368:	20fc      	movs	r0, #252	@ 0xfc
 800236a:	f7fe ff91 	bl	8001290 <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 800236e:	1dbb      	adds	r3, r7, #6
 8002370:	2200      	movs	r2, #0
 8002372:	4619      	mov	r1, r3
 8002374:	20fd      	movs	r0, #253	@ 0xfd
 8002376:	f7fe ff8b 	bl	8001290 <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <S2LP_IRQ_Handler+0x58>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 800238a:	79bb      	ldrb	r3, [r7, #6]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 8002394:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <S2LP_IRQ_Handler+0x5c>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 800239a:	79bb      	ldrb	r3, [r7, #6]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <S2LP_IRQ_Handler+0x60>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200014e5 	.word	0x200014e5
 80023b8:	200014e6 	.word	0x200014e6
 80023bc:	200014e4 	.word	0x200014e4

080023c0 <Spectrogram_Format>:
		}
		STOP_CYCLE_COUNT_SIGNAL_PROC_OP("Step 0 & 1 - Shift + DC Removal + Windowing");
	}
#elif CHAIN_SIGNAL_PREP_OPT_LEVEL == 2
void Spectrogram_Format(q15_t *buf)
{
 80023c0:	b510      	push	{r4, lr}
 80023c2:	4b3a      	ldr	r3, [pc, #232]	@ (80024ac <Spectrogram_Format+0xec>)
 80023c4:	f503 6c80 	add.w	ip, r3, #1024	@ 0x400
    
    // Process 4 samples at once (loop unrolling)
    for (; i <= SAMPLES_PER_MELVEC - 4; i += 4)
    {
        // Load 4 samples to registers
        register q31_t s0 = (q31_t)buf[i];
 80023c8:	f9b0 1000 	ldrsh.w	r1, [r0]
        s1 = (s1 << 3) - dc_offset;
        s2 = (s2 << 3) - dc_offset;
        s3 = (s3 << 3) - dc_offset;
        
        // Multiply by Hamming
        buf[i]   = (q15_t)__SSAT((s0 * (q31_t)hamming_window[i]) >> 15, 16);
 80023cc:	f9b3 2000 	ldrsh.w	r2, [r3]
        register q31_t s2 = (q31_t)buf[i+2];
 80023d0:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
        s0 = (s0 << 3) - dc_offset;
 80023d4:	00cc      	lsls	r4, r1, #3
 80023d6:	f5a4 4180 	sub.w	r1, r4, #16384	@ 0x4000
        buf[i]   = (q15_t)__SSAT((s0 * (q31_t)hamming_window[i]) >> 15, 16);
 80023da:	fb01 f202 	mul.w	r2, r1, r2
        register q31_t s1 = (q31_t)buf[i+1];
 80023de:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
        buf[i]   = (q15_t)__SSAT((s0 * (q31_t)hamming_window[i]) >> 15, 16);
 80023e2:	13d2      	asrs	r2, r2, #15
 80023e4:	f302 010f 	ssat	r1, #16, r2
 80023e8:	8001      	strh	r1, [r0, #0]
        buf[i+1] = (q15_t)__SSAT((s1 * (q31_t)hamming_window[i+1]) >> 15, 16);
 80023ea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
        register q31_t s2 = (q31_t)buf[i+2];
 80023ee:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
        s1 = (s1 << 3) - dc_offset;
 80023f2:	00e4      	lsls	r4, r4, #3
 80023f4:	f5a4 4480 	sub.w	r4, r4, #16384	@ 0x4000
        buf[i+1] = (q15_t)__SSAT((s1 * (q31_t)hamming_window[i+1]) >> 15, 16);
 80023f8:	fb04 f202 	mul.w	r2, r4, r2
 80023fc:	13d2      	asrs	r2, r2, #15
 80023fe:	f302 040f 	ssat	r4, #16, r2
 8002402:	8044      	strh	r4, [r0, #2]
        buf[i+2] = (q15_t)__SSAT((s2 * (q31_t)hamming_window[i+2]) >> 15, 16);
 8002404:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
        register q31_t s3 = (q31_t)buf[i+3];
 8002408:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
        s2 = (s2 << 3) - dc_offset;
 800240c:	00c9      	lsls	r1, r1, #3
 800240e:	f5a1 4180 	sub.w	r1, r1, #16384	@ 0x4000
        buf[i+2] = (q15_t)__SSAT((s2 * (q31_t)hamming_window[i+2]) >> 15, 16);
 8002412:	fb01 f202 	mul.w	r2, r1, r2
 8002416:	13d2      	asrs	r2, r2, #15
 8002418:	f302 010f 	ssat	r1, #16, r2
 800241c:	8081      	strh	r1, [r0, #4]
        buf[i+3] = (q15_t)__SSAT((s3 * (q31_t)hamming_window[i+3]) >> 15, 16);
 800241e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
        register q31_t s0 = (q31_t)buf[i];
 8002422:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
        s3 = (s3 << 3) - dc_offset;
 8002426:	00e4      	lsls	r4, r4, #3
 8002428:	f5a4 4480 	sub.w	r4, r4, #16384	@ 0x4000
        buf[i+3] = (q15_t)__SSAT((s3 * (q31_t)hamming_window[i+3]) >> 15, 16);
 800242c:	fb04 f202 	mul.w	r2, r4, r2
 8002430:	13d2      	asrs	r2, r2, #15
 8002432:	f302 040f 	ssat	r4, #16, r2
 8002436:	80c4      	strh	r4, [r0, #6]
        buf[i]   = (q15_t)__SSAT((s0 * (q31_t)hamming_window[i]) >> 15, 16);
 8002438:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
        register q31_t s1 = (q31_t)buf[i+1];
 800243c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
        s0 = (s0 << 3) - dc_offset;
 8002440:	00c9      	lsls	r1, r1, #3
 8002442:	f5a1 4180 	sub.w	r1, r1, #16384	@ 0x4000
        buf[i]   = (q15_t)__SSAT((s0 * (q31_t)hamming_window[i]) >> 15, 16);
 8002446:	fb01 f202 	mul.w	r2, r1, r2
 800244a:	13d2      	asrs	r2, r2, #15
 800244c:	f302 010f 	ssat	r1, #16, r2
 8002450:	8101      	strh	r1, [r0, #8]
        buf[i+1] = (q15_t)__SSAT((s1 * (q31_t)hamming_window[i+1]) >> 15, 16);
 8002452:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
        s1 = (s1 << 3) - dc_offset;
 8002456:	00e4      	lsls	r4, r4, #3
    for (; i <= SAMPLES_PER_MELVEC - 4; i += 4)
 8002458:	f100 0108 	add.w	r1, r0, #8
        s1 = (s1 << 3) - dc_offset;
 800245c:	f5a4 4480 	sub.w	r4, r4, #16384	@ 0x4000
        buf[i+1] = (q15_t)__SSAT((s1 * (q31_t)hamming_window[i+1]) >> 15, 16);
 8002460:	fb04 f202 	mul.w	r2, r4, r2
        register q31_t s3 = (q31_t)buf[i+3];
 8002464:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
        buf[i+1] = (q15_t)__SSAT((s1 * (q31_t)hamming_window[i+1]) >> 15, 16);
 8002468:	13d2      	asrs	r2, r2, #15
 800246a:	f302 040f 	ssat	r4, #16, r2
 800246e:	804c      	strh	r4, [r1, #2]
        buf[i+2] = (q15_t)__SSAT((s2 * (q31_t)hamming_window[i+2]) >> 15, 16);
 8002470:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
        s2 = (s2 << 3) - dc_offset;
 8002474:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8002478:	f5ae 4e80 	sub.w	lr, lr, #16384	@ 0x4000
        buf[i+2] = (q15_t)__SSAT((s2 * (q31_t)hamming_window[i+2]) >> 15, 16);
 800247c:	fb0e f402 	mul.w	r4, lr, r2
 8002480:	13e2      	asrs	r2, r4, #15
 8002482:	f302 040f 	ssat	r4, #16, r2
 8002486:	808c      	strh	r4, [r1, #4]
        buf[i+3] = (q15_t)__SSAT((s3 * (q31_t)hamming_window[i+3]) >> 15, 16);
 8002488:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
        s3 = (s3 << 3) - dc_offset;
 800248c:	00c0      	lsls	r0, r0, #3
 800248e:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
    for (; i <= SAMPLES_PER_MELVEC - 4; i += 4)
 8002492:	3310      	adds	r3, #16
        buf[i+3] = (q15_t)__SSAT((s3 * (q31_t)hamming_window[i+3]) >> 15, 16);
 8002494:	fb04 f202 	mul.w	r2, r4, r2
    for (; i <= SAMPLES_PER_MELVEC - 4; i += 4)
 8002498:	459c      	cmp	ip, r3
        buf[i+3] = (q15_t)__SSAT((s3 * (q31_t)hamming_window[i+3]) >> 15, 16);
 800249a:	ea4f 32e2 	mov.w	r2, r2, asr #15
    for (; i <= SAMPLES_PER_MELVEC - 4; i += 4)
 800249e:	f101 0008 	add.w	r0, r1, #8
        buf[i+3] = (q15_t)__SSAT((s3 * (q31_t)hamming_window[i+3]) >> 15, 16);
 80024a2:	f302 040f 	ssat	r4, #16, r2
 80024a6:	80cc      	strh	r4, [r1, #6]
    for (; i <= SAMPLES_PER_MELVEC - 4; i += 4)
 80024a8:	d18e      	bne.n	80023c8 <Spectrogram_Format+0x8>
        sample = (sample << 3) - dc_offset;
        buf[i] = (q15_t)__SSAT((sample * (q31_t)hamming_window[i]) >> 15, 16);
    }
    
    STOP_CYCLE_COUNT_SIGNAL_PROC_OP("Step 0 & 1 - Shift + DC Removal + Windowing");
}
 80024aa:	bd10      	pop	{r4, pc}
 80024ac:	20000000 	.word	0x20000000

080024b0 <Spectrogram_Compute>:
#endif

// Compute spectrogram of samples and transform into MEL vectors.
void Spectrogram_Compute(q15_t *samples, q15_t *melvec)
{
 80024b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b4:	b08f      	sub	sp, #60	@ 0x3c
 80024b6:	4604      	mov	r4, r0

	START_CYCLE_COUNT_FFT();

	// Since the FFT is a recursive algorithm, the values are rescaled in the function to ensure that overflow cannot happen.
	arm_rfft_instance_q15 rfft_inst;
	arm_rfft_init_q15(&rfft_inst, SAMPLES_PER_MELVEC, 0, 1);
 80024b8:	2301      	movs	r3, #1
 80024ba:	2200      	movs	r2, #0
{
 80024bc:	460d      	mov	r5, r1
	arm_rfft_init_q15(&rfft_inst, SAMPLES_PER_MELVEC, 0, 1);
 80024be:	a808      	add	r0, sp, #32
 80024c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024c4:	f004 fff4 	bl	80074b0 <arm_rfft_init_q15>
	arm_rfft_q15(&rfft_inst, FFT_BUFFER_TO_COMUTE, buf_fft);
 80024c8:	4621      	mov	r1, r4
 80024ca:	4a58      	ldr	r2, [pc, #352]	@ (800262c <Spectrogram_Compute+0x17c>)
 80024cc:	4c58      	ldr	r4, [pc, #352]	@ (8002630 <Spectrogram_Compute+0x180>)
 80024ce:	a808      	add	r0, sp, #32
 80024d0:	f004 ff72 	bl	80073b8 <arm_rfft_q15>
		START_CYCLE_COUNT_SIGNAL_PROC_OP();
		
		int i = 0;
		
		// Process 4 complex samples at once (unroll by 4)
		for (; i <= SAMPLES_PER_MELVEC/2 - 4; i += 4)
 80024d4:	4b55      	ldr	r3, [pc, #340]	@ (800262c <Spectrogram_Compute+0x17c>)
 80024d6:	f504 7700 	add.w	r7, r4, #512	@ 0x200
				imag3 = (imag3 ^ imag3_sign) - imag3_sign;
			#endif
			
			#if MAG_APPROX == MAG_APPROX_PURE_MAX || MAG_APPROX == MAG_APPROX_ABS_MAX
				// Calculate max for all 4 pairs using branchless operations
				buf[i]   = real0 > imag0 ? real0 : imag0;
 80024da:	f9b3 e000 	ldrsh.w	lr, [r3]
 80024de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
				buf[i+1] = real1 > imag1 ? real1 : imag1;
 80024e2:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 80024e6:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
				buf[i+2] = real2 > imag2 ? real2 : imag2;
 80024ea:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80024ee:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
				buf[i+3] = real3 > imag3 ? real3 : imag3;
 80024f2:	f9b3 900c 	ldrsh.w	r9, [r3, #12]
 80024f6:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
				buf[i]   = real0 > imag0 ? real0 : imag0;
 80024fa:	4596      	cmp	lr, r2
 80024fc:	bfb8      	it	lt
 80024fe:	4696      	movlt	lr, r2
				buf[i+1] = real1 > imag1 ? real1 : imag1;
 8002500:	45c4      	cmp	ip, r8
 8002502:	bfb8      	it	lt
 8002504:	46c4      	movlt	ip, r8
				int32_t sign0 = buf[i] >> 15;
				int32_t sign1 = buf[i+1] >> 15;
				int32_t sign2 = buf[i+2] >> 15;
				int32_t sign3 = buf[i+3] >> 15;
				
				buf[i]   = (buf[i]   ^ sign0) - sign0;
 8002506:	ea8e 72ee 	eor.w	r2, lr, lr, asr #31
				buf[i+2] = real2 > imag2 ? real2 : imag2;
 800250a:	4288      	cmp	r0, r1
 800250c:	bfb8      	it	lt
 800250e:	4608      	movlt	r0, r1
				buf[i]   = (buf[i]   ^ sign0) - sign0;
 8002510:	eba2 72ee 	sub.w	r2, r2, lr, asr #31
				buf[i+3] = real3 > imag3 ? real3 : imag3;
 8002514:	45b1      	cmp	r9, r6
				buf[i]   = (buf[i]   ^ sign0) - sign0;
 8002516:	f04f 0100 	mov.w	r1, #0
				buf[i+1] = (buf[i+1] ^ sign1) - sign1;
 800251a:	ea8c 7aec 	eor.w	sl, ip, ip, asr #31
				buf[i+3] = real3 > imag3 ? real3 : imag3;
 800251e:	bfb8      	it	lt
 8002520:	46b1      	movlt	r9, r6
				buf[i+1] = (buf[i+1] ^ sign1) - sign1;
 8002522:	ebaa 7bec 	sub.w	fp, sl, ip, asr #31
				buf[i]   = (buf[i]   ^ sign0) - sign0;
 8002526:	460e      	mov	r6, r1
 8002528:	f362 010f 	bfi	r1, r2, #0, #16
 800252c:	f36b 411f 	bfi	r1, fp, #16, #16
				buf[i+2] = (buf[i+2] ^ sign2) - sign2;
 8002530:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
				buf[i]   = (buf[i]   ^ sign0) - sign0;
 8002534:	f844 1f08 	str.w	r1, [r4, #8]!
				buf[i+2] = (buf[i+2] ^ sign2) - sign2;
 8002538:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
				buf[i+3] = (buf[i+3] ^ sign3) - sign3;
 800253c:	ea89 7ee9 	eor.w	lr, r9, r9, asr #31
				buf[i]   = (buf[i]   ^ sign0) - sign0;
 8002540:	f362 060f 	bfi	r6, r2, #0, #16
				buf[i+3] = (buf[i+3] ^ sign3) - sign3;
 8002544:	ebae 70e9 	sub.w	r0, lr, r9, asr #31
				buf[i]   = (buf[i]   ^ sign0) - sign0;
 8002548:	f360 461f 	bfi	r6, r0, #16, #16
		for (; i <= SAMPLES_PER_MELVEC/2 - 4; i += 4)
 800254c:	42a7      	cmp	r7, r4
				buf[i]   = (buf[i]   ^ sign0) - sign0;
 800254e:	6066      	str	r6, [r4, #4]
		for (; i <= SAMPLES_PER_MELVEC/2 - 4; i += 4)
 8002550:	f103 0310 	add.w	r3, r3, #16
 8002554:	d1c1      	bne.n	80024da <Spectrogram_Compute+0x2a>
			#endif
		}
		
		// Handle remaining samples
		for (; i < SAMPLES_PER_MELVEC/2; i++)
 8002556:	4c37      	ldr	r4, [pc, #220]	@ (8002634 <Spectrogram_Compute+0x184>)
 8002558:	4e37      	ldr	r6, [pc, #220]	@ (8002638 <Spectrogram_Compute+0x188>)
 800255a:	f105 0828 	add.w	r8, r5, #40	@ 0x28
   */
  __STATIC_FORCEINLINE q15_t clip_q63_to_q15(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 800255e:	f647 77ff 	movw	r7, #32767	@ 0x7fff
		q15_t* fft_samples_1 = &fft_array[mel_triangles[i+1].idx_offset];
 8002562:	f854 1c04 	ldr.w	r1, [r4, #-4]
		q15_t* fft_samples_2 = &fft_array[mel_triangles[i+2].idx_offset];
 8002566:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
		q15_t* fft_samples_3 = &fft_array[mel_triangles[i+3].idx_offset];
 8002568:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
		q15_t* fft_samples_0 = &fft_array[mel_triangles[i].idx_offset];
 800256c:	f854 0c80 	ldr.w	r0, [r4, #-128]
		q15_t* fft_samples_1 = &fft_array[mel_triangles[i+1].idx_offset];
 8002570:	eb06 0b41 	add.w	fp, r6, r1, lsl #1
		q15_t* fft_samples_2 = &fft_array[mel_triangles[i+2].idx_offset];
 8002574:	eb06 0a42 	add.w	sl, r6, r2, lsl #1
		q15_t* fft_samples_3 = &fft_array[mel_triangles[i+3].idx_offset];
 8002578:	eb06 0943 	add.w	r9, r6, r3, lsl #1
		arm_dot_prod_q15(fft_samples_0, mel_values_0, mel_triangles[i].triangle_len, &mel_result_0);
 800257c:	f854 2c84 	ldr.w	r2, [r4, #-132]
 8002580:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8002584:	f1a4 017c 	sub.w	r1, r4, #124	@ 0x7c
 8002588:	466b      	mov	r3, sp
 800258a:	f005 f80d 	bl	80075a8 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_1, mel_values_1, mel_triangles[i+1].triangle_len, &mel_result_1);
 800258e:	4658      	mov	r0, fp
 8002590:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8002594:	ab02      	add	r3, sp, #8
 8002596:	4621      	mov	r1, r4
 8002598:	f005 f806 	bl	80075a8 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_2, mel_values_2, mel_triangles[i+2].triangle_len, &mel_result_2);
 800259c:	4650      	mov	r0, sl
 800259e:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80025a0:	ab04      	add	r3, sp, #16
 80025a2:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
 80025a6:	f004 ffff 	bl	80075a8 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_3, mel_values_3, mel_triangles[i+3].triangle_len, &mel_result_3);
 80025aa:	f8d4 20f0 	ldr.w	r2, [r4, #240]	@ 0xf0
 80025ae:	ab06      	add	r3, sp, #24
 80025b0:	4648      	mov	r0, r9
 80025b2:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80025b6:	f004 fff7 	bl	80075a8 <arm_dot_prod_q15>
		mel_array[i]   = clip_q63_to_q15(mel_result_0);
 80025ba:	e9dd 2100 	ldrd	r2, r1, [sp]
		mel_array[i+1] = clip_q63_to_q15(mel_result_1);
 80025be:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80025c2:	ebb1 7fe2 	cmp.w	r1, r2, asr #31
 80025c6:	bf14      	ite	ne
 80025c8:	ea87 72e1 	eorne.w	r2, r7, r1, asr #31
 80025cc:	f342 32cf 	sbfxeq	r2, r2, #15, #16
 80025d0:	ebb3 7fe0 	cmp.w	r3, r0, asr #31
		mel_array[i]   = clip_q63_to_q15(mel_result_0);
 80025d4:	802a      	strh	r2, [r5, #0]
 80025d6:	bf08      	it	eq
 80025d8:	f340 32cf 	sbfxeq	r2, r0, #15, #16
		mel_array[i+2] = clip_q63_to_q15(mel_result_2);
 80025dc:	e9dd b004 	ldrd	fp, r0, [sp, #16]
		mel_array[i+3] = clip_q63_to_q15(mel_result_3);
 80025e0:	e9dd 1a06 	ldrd	r1, sl, [sp, #24]
 80025e4:	bf18      	it	ne
 80025e6:	ea87 72e3 	eorne.w	r2, r7, r3, asr #31
 80025ea:	ebb0 7feb 	cmp.w	r0, fp, asr #31
 80025ee:	bf14      	ite	ne
 80025f0:	ea87 70e0 	eorne.w	r0, r7, r0, asr #31
 80025f4:	f34b 30cf 	sbfxeq	r0, fp, #15, #16
 80025f8:	ebba 7fe1 	cmp.w	sl, r1, asr #31
		mel_array[i+1] = clip_q63_to_q15(mel_result_1);
 80025fc:	806a      	strh	r2, [r5, #2]
		mel_array[i+2] = clip_q63_to_q15(mel_result_2);
 80025fe:	80a8      	strh	r0, [r5, #4]
 8002600:	d00a      	beq.n	8002618 <Spectrogram_Compute+0x168>
 8002602:	ea87 73ea 	eor.w	r3, r7, sl, asr #31
		mel_array[i+3] = clip_q63_to_q15(mel_result_3);
 8002606:	80eb      	strh	r3, [r5, #6]
	for (size_t i = 0; i < mel_len; i += 4) {
 8002608:	3508      	adds	r5, #8
 800260a:	4545      	cmp	r5, r8
 800260c:	f504 74f8 	add.w	r4, r4, #496	@ 0x1f0
 8002610:	d1a7      	bne.n	8002562 <Spectrogram_Compute+0xb2>

		arm_mat_mult_fast_q15(&hz2mel_inst, &fftmag_inst, &melvec_inst, buf_tmp);
		STOP_CYCLE_COUNT_MEL("Step 4 - Mel matrix");
	#endif
	
 8002612:	b00f      	add	sp, #60	@ 0x3c
 8002614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002618:	0bca      	lsrs	r2, r1, #15
 800261a:	80ea      	strh	r2, [r5, #6]
	for (size_t i = 0; i < mel_len; i += 4) {
 800261c:	3508      	adds	r5, #8
 800261e:	4545      	cmp	r5, r8
 8002620:	f504 74f8 	add.w	r4, r4, #496	@ 0x1f0
 8002624:	d19d      	bne.n	8002562 <Spectrogram_Compute+0xb2>
 8002626:	b00f      	add	sp, #60	@ 0x3c
 8002628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800262c:	200014ec 	.word	0x200014ec
 8002630:	20001ce8 	.word	0x20001ce8
 8002634:	080094c4 	.word	0x080094c4
 8002638:	20001cf0 	.word	0x20001cf0

0800263c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800263c:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800263e:	4811      	ldr	r0, [pc, #68]	@ (8002684 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002640:	4c11      	ldr	r4, [pc, #68]	@ (8002688 <MX_SPI1_Init+0x4c>)
 8002642:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002646:	2300      	movs	r3, #0
 8002648:	2208      	movs	r2, #8
 800264a:	e9c0 4100 	strd	r4, r1, [r0]
 800264e:	f44f 6ce0 	mov.w	ip, #1792	@ 0x700
 8002652:	f44f 7400 	mov.w	r4, #512	@ 0x200
 8002656:	f04f 0e07 	mov.w	lr, #7
 800265a:	e9c0 3c02 	strd	r3, ip, [r0, #8]
 800265e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002662:	e9c0 2307 	strd	r2, r3, [r0, #28]
 8002666:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 800266a:	e9c0 e30b 	strd	lr, r3, [r0, #44]	@ 0x2c
 800266e:	6184      	str	r4, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002670:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002672:	f003 f89b 	bl	80057ac <HAL_SPI_Init>
 8002676:	b900      	cbnz	r0, 800267a <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002678:	bd10      	pop	{r4, pc}
 800267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800267e:	f7fe bbc9 	b.w	8000e14 <Error_Handler>
 8002682:	bf00      	nop
 8002684:	200020f0 	.word	0x200020f0
 8002688:	40013000 	.word	0x40013000

0800268c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800268c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800268e:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_SPI_MspInit+0x8c>)
 8002690:	6802      	ldr	r2, [r0, #0]
{
 8002692:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8002696:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800269c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80026a0:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 80026a2:	d001      	beq.n	80026a8 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80026a4:	b00a      	add	sp, #40	@ 0x28
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026a8:	f503 4060 	add.w	r0, r3, #57344	@ 0xe000
 80026ac:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 80026ae:	f441 5580 	orr.w	r5, r1, #4096	@ 0x1000
 80026b2:	6605      	str	r5, [r0, #96]	@ 0x60
 80026b4:	6e06      	ldr	r6, [r0, #96]	@ 0x60
 80026b6:	f406 5380 	and.w	r3, r6, #4096	@ 0x1000
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80026c0:	f042 0101 	orr.w	r1, r2, #1
 80026c4:	64c1      	str	r1, [r0, #76]	@ 0x4c
 80026c6:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 80026c8:	f005 0601 	and.w	r6, r5, #1
 80026cc:	9602      	str	r6, [sp, #8]
 80026ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026d0:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80026d2:	f043 0210 	orr.w	r2, r3, #16
 80026d6:	64c2      	str	r2, [r0, #76]	@ 0x4c
 80026d8:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80026da:	f000 0110 	and.w	r1, r0, #16
 80026de:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e0:	2603      	movs	r6, #3
 80026e2:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026e6:	22c0      	movs	r2, #192	@ 0xc0
 80026e8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f2:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026f6:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f8:	f001 fd24 	bl	8004144 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002702:	4806      	ldr	r0, [pc, #24]	@ (800271c <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002704:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002706:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800270e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002710:	f001 fd18 	bl	8004144 <HAL_GPIO_Init>
}
 8002714:	b00a      	add	sp, #40	@ 0x28
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	40013000 	.word	0x40013000
 800271c:	48001000 	.word	0x48001000

08002720 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002720:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <HAL_MspInit+0x2c>)
 8002722:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002724:	f042 0001 	orr.w	r0, r2, #1
 8002728:	6618      	str	r0, [r3, #96]	@ 0x60
 800272a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
{
 800272c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	f001 0201 	and.w	r2, r1, #1
 8002732:	9200      	str	r2, [sp, #0]
 8002734:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002738:	f040 5180 	orr.w	r1, r0, #268435456	@ 0x10000000
 800273c:	6599      	str	r1, [r3, #88]	@ 0x58
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002744:	9201      	str	r2, [sp, #4]
 8002746:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002748:	b002      	add	sp, #8
 800274a:	4770      	bx	lr
 800274c:	40021000 	.word	0x40021000

08002750 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <NMI_Handler>
 8002752:	bf00      	nop

08002754 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <HardFault_Handler>
 8002756:	bf00      	nop

08002758 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <MemManage_Handler>
 800275a:	bf00      	nop

0800275c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <BusFault_Handler>
 800275e:	bf00      	nop

08002760 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <UsageFault_Handler>
 8002762:	bf00      	nop

08002764 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop

08002768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop

0800276c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002770:	f000 ba56 	b.w	8002c20 <HAL_IncTick>

08002774 <EXTI3_IRQHandler>:
  */
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 8002774:	2008      	movs	r0, #8
 8002776:	f001 be07 	b.w	8004388 <HAL_GPIO_EXTI_IRQHandler>
 800277a:	bf00      	nop

0800277c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800277c:	4801      	ldr	r0, [pc, #4]	@ (8002784 <DMA1_Channel1_IRQHandler+0x8>)
 800277e:	f001 bc93 	b.w	80040a8 <HAL_DMA_IRQHandler>
 8002782:	bf00      	nop
 8002784:	20000484 	.word	0x20000484

08002788 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002788:	4801      	ldr	r0, [pc, #4]	@ (8002790 <TIM3_IRQHandler+0x8>)
 800278a:	f003 bbc1 	b.w	8005f10 <HAL_TIM_IRQHandler>
 800278e:	bf00      	nop
 8002790:	20002158 	.word	0x20002158

08002794 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002794:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002798:	f001 bdf6 	b.w	8004388 <HAL_GPIO_EXTI_IRQHandler>

0800279c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800279c:	490c      	ldr	r1, [pc, #48]	@ (80027d0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800279e:	4a0d      	ldr	r2, [pc, #52]	@ (80027d4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80027a0:	680b      	ldr	r3, [r1, #0]
{
 80027a2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a4:	4c0c      	ldr	r4, [pc, #48]	@ (80027d8 <_sbrk+0x3c>)
 80027a6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80027a8:	b12b      	cbz	r3, 80027b6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027aa:	4418      	add	r0, r3
 80027ac:	4290      	cmp	r0, r2
 80027ae:	d807      	bhi.n	80027c0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80027b0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <_sbrk+0x40>)
 80027b8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80027ba:	4418      	add	r0, r3
 80027bc:	4290      	cmp	r0, r2
 80027be:	d9f7      	bls.n	80027b0 <_sbrk+0x14>
    errno = ENOMEM;
 80027c0:	f005 ff9c 	bl	80086fc <__errno>
 80027c4:	210c      	movs	r1, #12
    return (void *)-1;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
    errno = ENOMEM;
 80027ca:	6001      	str	r1, [r0, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd10      	pop	{r4, pc}
 80027d0:	20002154 	.word	0x20002154
 80027d4:	20050000 	.word	0x20050000
 80027d8:	00000400 	.word	0x00000400
 80027dc:	20002388 	.word	0x20002388

080027e0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027e0:	480e      	ldr	r0, [pc, #56]	@ (800281c <SystemInit+0x3c>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80027e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <SystemInit+0x40>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027e4:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80027e8:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80027ec:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 80027f0:	6818      	ldr	r0, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80027f2:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 80027f4:	f040 0201 	orr.w	r2, r0, #1
 80027f8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80027fa:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	f022 5ca8 	bic.w	ip, r2, #352321536	@ 0x15000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002802:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8002806:	f42c 2210 	bic.w	r2, ip, #589824	@ 0x90000
 800280a:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 800280c:	60d8      	str	r0, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	f420 2280 	bic.w	r2, r0, #262144	@ 0x40000
 8002814:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002816:	6199      	str	r1, [r3, #24]
}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00
 8002820:	40021000 	.word	0x40021000

08002824 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002824:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002826:	481b      	ldr	r0, [pc, #108]	@ (8002894 <MX_TIM3_Init+0x70>)
 8002828:	4a1b      	ldr	r2, [pc, #108]	@ (8002898 <MX_TIM3_Init+0x74>)
 800282a:	6002      	str	r2, [r0, #0]
{
 800282c:	b089      	sub	sp, #36	@ 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800282e:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 23;
 8002830:	2117      	movs	r1, #23
 8002832:	f04f 0cc3 	mov.w	ip, #195	@ 0xc3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002836:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800283a:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.Prescaler = 23;
 8002842:	e9c0 3c02 	strd	r3, ip, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002846:	9303      	str	r3, [sp, #12]
  htim3.Init.Prescaler = 23;
 8002848:	6041      	str	r1, [r0, #4]
 800284a:	6103      	str	r3, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 195;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800284e:	f003 f9dd 	bl	8005c0c <HAL_TIM_Base_Init>
 8002852:	b998      	cbnz	r0, 800287c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002858:	480e      	ldr	r0, [pc, #56]	@ (8002894 <MX_TIM3_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800285a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800285c:	a904      	add	r1, sp, #16
 800285e:	f003 faa3 	bl	8005da8 <HAL_TIM_ConfigClockSource>
 8002862:	b998      	cbnz	r0, 800288c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002864:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002866:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002868:	480a      	ldr	r0, [pc, #40]	@ (8002894 <MX_TIM3_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800286a:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800286c:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800286e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002870:	f003 fbfa 	bl	8006068 <HAL_TIMEx_MasterConfigSynchronization>
 8002874:	b928      	cbnz	r0, 8002882 <MX_TIM3_Init+0x5e>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002876:	b009      	add	sp, #36	@ 0x24
 8002878:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800287c:	f7fe faca 	bl	8000e14 <Error_Handler>
 8002880:	e7e8      	b.n	8002854 <MX_TIM3_Init+0x30>
    Error_Handler();
 8002882:	f7fe fac7 	bl	8000e14 <Error_Handler>
}
 8002886:	b009      	add	sp, #36	@ 0x24
 8002888:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800288c:	f7fe fac2 	bl	8000e14 <Error_Handler>
 8002890:	e7e8      	b.n	8002864 <MX_TIM3_Init+0x40>
 8002892:	bf00      	nop
 8002894:	20002158 	.word	0x20002158
 8002898:	40000400 	.word	0x40000400

0800289c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 800289c:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <HAL_TIM_Base_MspInit+0x40>)
 800289e:	6802      	ldr	r2, [r0, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d000      	beq.n	80028a6 <HAL_TIM_Base_MspInit+0xa>
 80028a4:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028a6:	f503 3c03 	add.w	ip, r3, #134144	@ 0x20c00
{
 80028aa:	b500      	push	{lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ac:	f8dc 1058 	ldr.w	r1, [ip, #88]	@ 0x58
 80028b0:	f041 0302 	orr.w	r3, r1, #2
 80028b4:	f8cc 3058 	str.w	r3, [ip, #88]	@ 0x58
 80028b8:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
{
 80028bc:	b083      	sub	sp, #12

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028c6:	201d      	movs	r0, #29
 80028c8:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ca:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028cc:	f000 ffda 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028d0:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028d2:	b003      	add	sp, #12
 80028d4:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028d8:	f001 b810 	b.w	80038fc <HAL_NVIC_EnableIRQ>
 80028dc:	40000400 	.word	0x40000400

080028e0 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028e0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8002918 <MX_LPUART1_UART_Init+0x38>
{
 80028e4:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 80028e6:	480e      	ldr	r0, [pc, #56]	@ (8002920 <MX_LPUART1_UART_Init+0x40>)
 80028e8:	4c0e      	ldr	r4, [pc, #56]	@ (8002924 <MX_LPUART1_UART_Init+0x44>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ea:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 115200;
 80028ec:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80028f0:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = 115200;
 80028f2:	e9c0 4100 	strd	r4, r1, [r0]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028f6:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80028fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80028fe:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8002902:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002904:	f004 fca0 	bl	8007248 <HAL_UART_Init>
 8002908:	b900      	cbnz	r0, 800290c <MX_LPUART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800290a:	bd10      	pop	{r4, pc}
 800290c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002910:	f7fe ba80 	b.w	8000e14 <Error_Handler>
 8002914:	f3af 8000 	nop.w
	...
 8002920:	200021a8 	.word	0x200021a8
 8002924:	40008000 	.word	0x40008000

08002928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002928:	b510      	push	{r4, lr}
 800292a:	4604      	mov	r4, r0
 800292c:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002930:	228c      	movs	r2, #140	@ 0x8c
 8002932:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002938:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800293c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800293e:	f005 fe7f 	bl	8008640 <memset>
  if(uartHandle->Instance==LPUART1)
 8002942:	4b1d      	ldr	r3, [pc, #116]	@ (80029b8 <HAL_UART_MspInit+0x90>)
 8002944:	6822      	ldr	r2, [r4, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d001      	beq.n	800294e <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800294a:	b02a      	add	sp, #168	@ 0xa8
 800294c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800294e:	2120      	movs	r1, #32
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002950:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002954:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002956:	9107      	str	r1, [sp, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002958:	941a      	str	r4, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800295a:	f002 fb5b 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 800295e:	bb20      	cbnz	r0, 80029aa <HAL_UART_MspInit+0x82>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002960:	4816      	ldr	r0, [pc, #88]	@ (80029bc <HAL_UART_MspInit+0x94>)
 8002962:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	65c2      	str	r2, [r0, #92]	@ 0x5c
 800296a:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 800296c:	f001 0401 	and.w	r4, r1, #1
 8002970:	9400      	str	r4, [sp, #0]
 8002972:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002974:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002976:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800297a:	64c2      	str	r2, [r0, #76]	@ 0x4c
 800297c:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800297e:	f000 0140 	and.w	r1, r0, #64	@ 0x40
 8002982:	9101      	str	r1, [sp, #4]
 8002984:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 8002986:	f001 fd95 	bl	80044b4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800298a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80029b0 <HAL_UART_MspInit+0x88>
 800298e:	2200      	movs	r2, #0
 8002990:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002992:	480b      	ldr	r0, [pc, #44]	@ (80029c0 <HAL_UART_MspInit+0x98>)
 8002994:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002996:	2408      	movs	r4, #8
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002998:	ed8d 7b02 	vstr	d7, [sp, #8]
 800299c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80029a0:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029a2:	f001 fbcf 	bl	8004144 <HAL_GPIO_Init>
}
 80029a6:	b02a      	add	sp, #168	@ 0xa8
 80029a8:	bd10      	pop	{r4, pc}
      Error_Handler();
 80029aa:	f7fe fa33 	bl	8000e14 <Error_Handler>
 80029ae:	e7d7      	b.n	8002960 <HAL_UART_MspInit+0x38>
 80029b0:	00000180 	.word	0x00000180
 80029b4:	00000002 	.word	0x00000002
 80029b8:	40008000 	.word	0x40008000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	48001800 	.word	0x48001800

080029c4 <start_cycle_count>:

#if (PERF_COUNT == 1)

volatile uint8_t counting_cycles = 0;

void start_cycle_count() {
 80029c4:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80029ca:	b672      	cpsid	i
	uint32_t prim = __get_PRIMASK();
	__disable_irq();
	if (counting_cycles) {
 80029cc:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <start_cycle_count+0x34>)
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	b95a      	cbnz	r2, 80029ea <start_cycle_count+0x26>
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
		Error_Handler();
	} else {
		counting_cycles = 1;
 80029d2:	2001      	movs	r0, #1
 80029d4:	7018      	strb	r0, [r3, #0]
	}
	if (!prim) {
 80029d6:	b904      	cbnz	r4, 80029da <start_cycle_count+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 80029d8:	b662      	cpsie	i
		__enable_irq();
	}
	DWT->CTRL |= 1 ; // enable the counter
 80029da:	4c08      	ldr	r4, [pc, #32]	@ (80029fc <start_cycle_count+0x38>)
 80029dc:	6823      	ldr	r3, [r4, #0]
	DWT->CYCCNT = 0; // reset the counter
 80029de:	2100      	movs	r1, #0
	DWT->CTRL |= 1 ; // enable the counter
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	6022      	str	r2, [r4, #0]
	DWT->CYCCNT = 0; // reset the counter
 80029e6:	6061      	str	r1, [r4, #4]
}
 80029e8:	bd10      	pop	{r4, pc}
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
 80029ea:	4805      	ldr	r0, [pc, #20]	@ (8002a00 <start_cycle_count+0x3c>)
 80029ec:	f005 fc94 	bl	8008318 <puts>
		Error_Handler();
 80029f0:	f7fe fa10 	bl	8000e14 <Error_Handler>
 80029f4:	e7ef      	b.n	80029d6 <start_cycle_count+0x12>
 80029f6:	bf00      	nop
 80029f8:	20002230 	.word	0x20002230
 80029fc:	e0001000 	.word	0xe0001000
 8002a00:	08009e38 	.word	0x08009e38

08002a04 <stop_cycle_count>:
void stop_cycle_count(char *s) {
 8002a04:	b538      	push	{r3, r4, r5, lr}
	uint32_t res = DWT->CYCCNT;
 8002a06:	4909      	ldr	r1, [pc, #36]	@ (8002a2c <stop_cycle_count+0x28>)
	counting_cycles = 0;
 8002a08:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <stop_cycle_count+0x2c>)
	uint32_t res = DWT->CYCCNT;
 8002a0a:	684d      	ldr	r5, [r1, #4]
void stop_cycle_count(char *s) {
 8002a0c:	4604      	mov	r4, r0
	counting_cycles = 0;
 8002a0e:	2200      	movs	r2, #0
	printf("[PERF] ");
 8002a10:	4808      	ldr	r0, [pc, #32]	@ (8002a34 <stop_cycle_count+0x30>)
	counting_cycles = 0;
 8002a12:	701a      	strb	r2, [r3, #0]
	printf("[PERF] ");
 8002a14:	f005 fc18 	bl	8008248 <iprintf>
	printf(s);
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f005 fc15 	bl	8008248 <iprintf>
	printf(" %lu cycles.\r\n", res);
 8002a1e:	4629      	mov	r1, r5
 8002a20:	4805      	ldr	r0, [pc, #20]	@ (8002a38 <stop_cycle_count+0x34>)
}
 8002a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf(" %lu cycles.\r\n", res);
 8002a26:	f005 bc0f 	b.w	8008248 <iprintf>
 8002a2a:	bf00      	nop
 8002a2c:	e0001000 	.word	0xe0001000
 8002a30:	20002230 	.word	0x20002230
 8002a34:	08009e5c 	.word	0x08009e5c
 8002a38:	08009e64 	.word	0x08009e64

08002a3c <hex_encode>:


// Encode the binary buffer buf of length len in the null-terminated string s
// (which must have length at least 2*len+1).
void hex_encode(char* s, const uint8_t* buf, size_t len) {
    s[2*len] = '\0';
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
    for (size_t i=0; i<len; i++) {
 8002a42:	2a00      	cmp	r2, #0
 8002a44:	f000 8088 	beq.w	8002b58 <hex_encode+0x11c>
 8002a48:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8002a4c:	f1ac 0202 	sub.w	r2, ip, #2
void hex_encode(char* s, const uint8_t* buf, size_t len) {
 8002a50:	b500      	push	{lr}
 8002a52:	eb00 0e0c 	add.w	lr, r0, ip
 8002a56:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8002a5a:	f10c 0c01 	add.w	ip, ip, #1
 8002a5e:	f01c 0c03 	ands.w	ip, ip, #3
 8002a62:	4a3e      	ldr	r2, [pc, #248]	@ (8002b5c <hex_encode+0x120>)
 8002a64:	f101 33ff 	add.w	r3, r1, #4294967295
 8002a68:	d031      	beq.n	8002ace <hex_encode+0x92>
 8002a6a:	f1bc 0f01 	cmp.w	ip, #1
 8002a6e:	d01e      	beq.n	8002aae <hex_encode+0x72>
 8002a70:	f1bc 0f02 	cmp.w	ip, #2
 8002a74:	d00d      	beq.n	8002a92 <hex_encode+0x56>
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002a76:	460b      	mov	r3, r1
 8002a78:	7809      	ldrb	r1, [r1, #0]
 8002a7a:	0909      	lsrs	r1, r1, #4
    for (size_t i=0; i<len; i++) {
 8002a7c:	3002      	adds	r0, #2
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002a7e:	5c51      	ldrb	r1, [r2, r1]
 8002a80:	f800 1c02 	strb.w	r1, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002a84:	f893 c000 	ldrb.w	ip, [r3]
 8002a88:	f00c 010f 	and.w	r1, ip, #15
 8002a8c:	5c51      	ldrb	r1, [r2, r1]
 8002a8e:	f800 1c01 	strb.w	r1, [r0, #-1]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002a92:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002a96:	0909      	lsrs	r1, r1, #4
    for (size_t i=0; i<len; i++) {
 8002a98:	3002      	adds	r0, #2
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002a9a:	5c51      	ldrb	r1, [r2, r1]
 8002a9c:	f800 1c02 	strb.w	r1, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002aa0:	f893 c000 	ldrb.w	ip, [r3]
 8002aa4:	f00c 010f 	and.w	r1, ip, #15
 8002aa8:	5c51      	ldrb	r1, [r2, r1]
 8002aaa:	f800 1c01 	strb.w	r1, [r0, #-1]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002aae:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002ab2:	0909      	lsrs	r1, r1, #4
    for (size_t i=0; i<len; i++) {
 8002ab4:	3002      	adds	r0, #2
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002ab6:	5c51      	ldrb	r1, [r2, r1]
 8002ab8:	f800 1c02 	strb.w	r1, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002abc:	f893 c000 	ldrb.w	ip, [r3]
 8002ac0:	f00c 010f 	and.w	r1, ip, #15
 8002ac4:	5c51      	ldrb	r1, [r2, r1]
 8002ac6:	f800 1c01 	strb.w	r1, [r0, #-1]
    for (size_t i=0; i<len; i++) {
 8002aca:	4586      	cmp	lr, r0
 8002acc:	d042      	beq.n	8002b54 <hex_encode+0x118>
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002ace:	f893 c001 	ldrb.w	ip, [r3, #1]
 8002ad2:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    for (size_t i=0; i<len; i++) {
 8002ad6:	1c81      	adds	r1, r0, #2
 8002ad8:	3008      	adds	r0, #8
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002ada:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002ade:	f800 cc08 	strb.w	ip, [r0, #-8]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002ae2:	f893 c001 	ldrb.w	ip, [r3, #1]
 8002ae6:	f00c 0c0f 	and.w	ip, ip, #15
    for (size_t i=0; i<len; i++) {
 8002aea:	4586      	cmp	lr, r0
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002aec:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002af0:	f800 cc07 	strb.w	ip, [r0, #-7]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002af4:	f893 c002 	ldrb.w	ip, [r3, #2]
 8002af8:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8002afc:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002b00:	f800 cc06 	strb.w	ip, [r0, #-6]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002b04:	f893 c002 	ldrb.w	ip, [r3, #2]
 8002b08:	f00c 0c0f 	and.w	ip, ip, #15
 8002b0c:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002b10:	f881 c001 	strb.w	ip, [r1, #1]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002b14:	f893 c003 	ldrb.w	ip, [r3, #3]
 8002b18:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8002b1c:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002b20:	f881 c002 	strb.w	ip, [r1, #2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002b24:	f893 c003 	ldrb.w	ip, [r3, #3]
 8002b28:	f00c 0c0f 	and.w	ip, ip, #15
 8002b2c:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002b30:	f881 c003 	strb.w	ip, [r1, #3]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002b34:	f813 1f04 	ldrb.w	r1, [r3, #4]!
 8002b38:	ea4f 1111 	mov.w	r1, r1, lsr #4
 8002b3c:	f812 c001 	ldrb.w	ip, [r2, r1]
 8002b40:	f800 cc02 	strb.w	ip, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002b44:	7819      	ldrb	r1, [r3, #0]
 8002b46:	f001 0c0f 	and.w	ip, r1, #15
 8002b4a:	f812 100c 	ldrb.w	r1, [r2, ip]
 8002b4e:	f800 1c01 	strb.w	r1, [r0, #-1]
    for (size_t i=0; i<len; i++) {
 8002b52:	d1bc      	bne.n	8002ace <hex_encode+0x92>
    }
}
 8002b54:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	08009e74 	.word	0x08009e74

08002b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b64:	f7ff fe3c 	bl	80027e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b68:	480c      	ldr	r0, [pc, #48]	@ (8002b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b6a:	490d      	ldr	r1, [pc, #52]	@ (8002ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba4 <LoopForever+0xe>)
  movs r3, #0
 8002b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b70:	e002      	b.n	8002b78 <LoopCopyDataInit>

08002b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b76:	3304      	adds	r3, #4

08002b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b7c:	d3f9      	bcc.n	8002b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b80:	4c0a      	ldr	r4, [pc, #40]	@ (8002bac <LoopForever+0x16>)
  movs r3, #0
 8002b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b84:	e001      	b.n	8002b8a <LoopFillZerobss>

08002b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b88:	3204      	adds	r2, #4

08002b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b8c:	d3fb      	bcc.n	8002b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b8e:	f005 fdbb 	bl	8008708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b92:	f7fe fa0d 	bl	8000fb0 <main>

08002b96 <LoopForever>:

LoopForever:
    b LoopForever
 8002b96:	e7fe      	b.n	8002b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba0:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8002ba4:	0801bd34 	.word	0x0801bd34
  ldr r2, =_sbss
 8002ba8:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 8002bac:	20002384 	.word	0x20002384

08002bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bb0:	e7fe      	b.n	8002bb0 <ADC1_2_IRQHandler>
	...

08002bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <HAL_InitTick+0x40>)
 8002bb8:	781c      	ldrb	r4, [r3, #0]
 8002bba:	b90c      	cbnz	r4, 8002bc0 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bbc:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002bbe:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002bc0:	490d      	ldr	r1, [pc, #52]	@ (8002bf8 <HAL_InitTick+0x44>)
 8002bc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	fbb2 fcf4 	udiv	ip, r2, r4
 8002bcc:	6808      	ldr	r0, [r1, #0]
 8002bce:	fbb0 f0fc 	udiv	r0, r0, ip
 8002bd2:	f000 fea1 	bl	8003918 <HAL_SYSTICK_Config>
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	d1ef      	bne.n	8002bbc <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bdc:	2d0f      	cmp	r5, #15
 8002bde:	d8ed      	bhi.n	8002bbc <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002be0:	4602      	mov	r2, r0
 8002be2:	4629      	mov	r1, r5
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295
 8002be8:	f000 fe4c 	bl	8003884 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bec:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <HAL_InitTick+0x48>)
 8002bee:	4620      	mov	r0, r4
 8002bf0:	601d      	str	r5, [r3, #0]
}
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
 8002bf4:	20000404 	.word	0x20000404
 8002bf8:	20000400 	.word	0x20000400
 8002bfc:	20000408 	.word	0x20000408

08002c00 <HAL_Init>:
{
 8002c00:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c02:	2003      	movs	r0, #3
 8002c04:	f000 fe2c 	bl	8003860 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7ff ffd3 	bl	8002bb4 <HAL_InitTick>
 8002c0e:	b110      	cbz	r0, 8002c16 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002c10:	2401      	movs	r4, #1
}
 8002c12:	4620      	mov	r0, r4
 8002c14:	bd10      	pop	{r4, pc}
 8002c16:	4604      	mov	r4, r0
    HAL_MspInit();
 8002c18:	f7ff fd82 	bl	8002720 <HAL_MspInit>
}
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	bd10      	pop	{r4, pc}

08002c20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002c20:	4a03      	ldr	r2, [pc, #12]	@ (8002c30 <HAL_IncTick+0x10>)
 8002c22:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <HAL_IncTick+0x14>)
 8002c24:	6811      	ldr	r1, [r2, #0]
 8002c26:	7818      	ldrb	r0, [r3, #0]
 8002c28:	4408      	add	r0, r1
 8002c2a:	6010      	str	r0, [r2, #0]
}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20002234 	.word	0x20002234
 8002c34:	20000404 	.word	0x20000404

08002c38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c38:	4b01      	ldr	r3, [pc, #4]	@ (8002c40 <HAL_GetTick+0x8>)
 8002c3a:	6818      	ldr	r0, [r3, #0]
}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20002234 	.word	0x20002234

08002c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c44:	b538      	push	{r3, r4, r5, lr}
 8002c46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff fff6 	bl	8002c38 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002c4e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002c50:	d002      	beq.n	8002c58 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8002c52:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <HAL_Delay+0x68>)
 8002c54:	7818      	ldrb	r0, [r3, #0]
 8002c56:	4404      	add	r4, r0
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c58:	f7ff ffee 	bl	8002c38 <HAL_GetTick>
 8002c5c:	1b41      	subs	r1, r0, r5
 8002c5e:	42a1      	cmp	r1, r4
 8002c60:	d222      	bcs.n	8002ca8 <HAL_Delay+0x64>
 8002c62:	f7ff ffe9 	bl	8002c38 <HAL_GetTick>
 8002c66:	1b42      	subs	r2, r0, r5
 8002c68:	42a2      	cmp	r2, r4
 8002c6a:	d21d      	bcs.n	8002ca8 <HAL_Delay+0x64>
 8002c6c:	f7ff ffe4 	bl	8002c38 <HAL_GetTick>
 8002c70:	1b43      	subs	r3, r0, r5
 8002c72:	42a3      	cmp	r3, r4
 8002c74:	d218      	bcs.n	8002ca8 <HAL_Delay+0x64>
 8002c76:	f7ff ffdf 	bl	8002c38 <HAL_GetTick>
 8002c7a:	1b40      	subs	r0, r0, r5
 8002c7c:	42a0      	cmp	r0, r4
 8002c7e:	d213      	bcs.n	8002ca8 <HAL_Delay+0x64>
 8002c80:	f7ff ffda 	bl	8002c38 <HAL_GetTick>
 8002c84:	1b41      	subs	r1, r0, r5
 8002c86:	42a1      	cmp	r1, r4
 8002c88:	d20e      	bcs.n	8002ca8 <HAL_Delay+0x64>
 8002c8a:	f7ff ffd5 	bl	8002c38 <HAL_GetTick>
 8002c8e:	1b42      	subs	r2, r0, r5
 8002c90:	42a2      	cmp	r2, r4
 8002c92:	d209      	bcs.n	8002ca8 <HAL_Delay+0x64>
 8002c94:	f7ff ffd0 	bl	8002c38 <HAL_GetTick>
 8002c98:	1b43      	subs	r3, r0, r5
 8002c9a:	42a3      	cmp	r3, r4
 8002c9c:	d204      	bcs.n	8002ca8 <HAL_Delay+0x64>
 8002c9e:	f7ff ffcb 	bl	8002c38 <HAL_GetTick>
 8002ca2:	1b40      	subs	r0, r0, r5
 8002ca4:	42a0      	cmp	r0, r4
 8002ca6:	d3d7      	bcc.n	8002c58 <HAL_Delay+0x14>
  {
  }
}
 8002ca8:	bd38      	pop	{r3, r4, r5, pc}
 8002caa:	bf00      	nop
 8002cac:	20000404 	.word	0x20000404

08002cb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b530      	push	{r4, r5, lr}
 8002cb2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	d062      	beq.n	8002d82 <HAL_ADC_Init+0xd2>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cbc:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	2d00      	cmp	r5, #0
 8002cc2:	f000 80c8 	beq.w	8002e56 <HAL_ADC_Init+0x1a6>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cc6:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	d505      	bpl.n	8002cda <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cce:	6898      	ldr	r0, [r3, #8]
 8002cd0:	f020 4120 	bic.w	r1, r0, #2684354560	@ 0xa0000000
 8002cd4:	f021 053f 	bic.w	r5, r1, #63	@ 0x3f
 8002cd8:	609d      	str	r5, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	00d5      	lsls	r5, r2, #3
 8002cde:	d43d      	bmi.n	8002d5c <HAL_ADC_Init+0xac>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ce0:	496f      	ldr	r1, [pc, #444]	@ (8002ea0 <HAL_ADC_Init+0x1f0>)
 8002ce2:	4870      	ldr	r0, [pc, #448]	@ (8002ea4 <HAL_ADC_Init+0x1f4>)
 8002ce4:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CR,
 8002ce6:	6899      	ldr	r1, [r3, #8]
 8002ce8:	09aa      	lsrs	r2, r5, #6
 8002cea:	fba0 0502 	umull	r0, r5, r0, r2
 8002cee:	09aa      	lsrs	r2, r5, #6
 8002cf0:	f021 4010 	bic.w	r0, r1, #2415919104	@ 0x90000000
 8002cf4:	f020 0c3f 	bic.w	ip, r0, #63	@ 0x3f
 8002cf8:	3201      	adds	r2, #1
 8002cfa:	f04c 5180 	orr.w	r1, ip, #268435456	@ 0x10000000
 8002cfe:	0055      	lsls	r5, r2, #1
 8002d00:	6099      	str	r1, [r3, #8]
 8002d02:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d04:	9801      	ldr	r0, [sp, #4]
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d028      	beq.n	8002d5c <HAL_ADC_Init+0xac>
    {
      wait_loop_index--;
 8002d0a:	9a01      	ldr	r2, [sp, #4]
 8002d0c:	1e51      	subs	r1, r2, #1
 8002d0e:	9101      	str	r1, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d10:	9d01      	ldr	r5, [sp, #4]
 8002d12:	b31d      	cbz	r5, 8002d5c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002d14:	9801      	ldr	r0, [sp, #4]
 8002d16:	1e42      	subs	r2, r0, #1
 8002d18:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d1a:	9901      	ldr	r1, [sp, #4]
 8002d1c:	b1f1      	cbz	r1, 8002d5c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002d1e:	9d01      	ldr	r5, [sp, #4]
 8002d20:	1e68      	subs	r0, r5, #1
 8002d22:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d24:	9a01      	ldr	r2, [sp, #4]
 8002d26:	b1ca      	cbz	r2, 8002d5c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002d28:	9901      	ldr	r1, [sp, #4]
 8002d2a:	1e4d      	subs	r5, r1, #1
 8002d2c:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d2e:	9801      	ldr	r0, [sp, #4]
 8002d30:	b1a0      	cbz	r0, 8002d5c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002d32:	9a01      	ldr	r2, [sp, #4]
 8002d34:	1e51      	subs	r1, r2, #1
 8002d36:	9101      	str	r1, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d38:	9d01      	ldr	r5, [sp, #4]
 8002d3a:	b17d      	cbz	r5, 8002d5c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002d3c:	9801      	ldr	r0, [sp, #4]
 8002d3e:	1e42      	subs	r2, r0, #1
 8002d40:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d42:	9901      	ldr	r1, [sp, #4]
 8002d44:	b151      	cbz	r1, 8002d5c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002d46:	9d01      	ldr	r5, [sp, #4]
 8002d48:	1e68      	subs	r0, r5, #1
 8002d4a:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d4c:	9a01      	ldr	r2, [sp, #4]
 8002d4e:	b12a      	cbz	r2, 8002d5c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002d50:	9901      	ldr	r1, [sp, #4]
 8002d52:	1e4d      	subs	r5, r1, #1
 8002d54:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d56:	9801      	ldr	r0, [sp, #4]
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d1d6      	bne.n	8002d0a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	00d0      	lsls	r0, r2, #3
 8002d60:	d412      	bmi.n	8002d88 <HAL_ADC_Init+0xd8>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d62:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002d64:	f041 0510 	orr.w	r5, r1, #16
 8002d68:	65a5      	str	r5, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d6c:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	4302      	orrs	r2, r0
 8002d70:	65e2      	str	r2, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d72:	6899      	ldr	r1, [r3, #8]
 8002d74:	0749      	lsls	r1, r1, #29
 8002d76:	d50c      	bpl.n	8002d92 <HAL_ADC_Init+0xe2>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d7c:	f040 0210 	orr.w	r2, r0, #16
 8002d80:	65a2      	str	r2, [r4, #88]	@ 0x58
    return HAL_ERROR;
 8002d82:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002d84:	b003      	add	sp, #12
 8002d86:	bd30      	pop	{r4, r5, pc}
 8002d88:	6899      	ldr	r1, [r3, #8]
 8002d8a:	0749      	lsls	r1, r1, #29
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8c:	f04f 0000 	mov.w	r0, #0
 8002d90:	d4f2      	bmi.n	8002d78 <HAL_ADC_Init+0xc8>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d92:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8002d94:	06ea      	lsls	r2, r5, #27
 8002d96:	d4f0      	bmi.n	8002d7a <HAL_ADC_Init+0xca>
    ADC_STATE_CLR_SET(hadc->State,
 8002d98:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002d9a:	f422 7181 	bic.w	r1, r2, #258	@ 0x102
 8002d9e:	f041 0502 	orr.w	r5, r1, #2
 8002da2:	65a5      	str	r5, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	07d5      	lsls	r5, r2, #31
 8002da8:	d410      	bmi.n	8002dcc <HAL_ADC_Init+0x11c>
 8002daa:	4d3f      	ldr	r5, [pc, #252]	@ (8002ea8 <HAL_ADC_Init+0x1f8>)
 8002dac:	493f      	ldr	r1, [pc, #252]	@ (8002eac <HAL_ADC_Init+0x1fc>)
 8002dae:	6889      	ldr	r1, [r1, #8]
 8002db0:	68aa      	ldr	r2, [r5, #8]
 8002db2:	4d3f      	ldr	r5, [pc, #252]	@ (8002eb0 <HAL_ADC_Init+0x200>)
 8002db4:	430a      	orrs	r2, r1
 8002db6:	68a9      	ldr	r1, [r5, #8]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07d1      	lsls	r1, r2, #31
 8002dbc:	d406      	bmi.n	8002dcc <HAL_ADC_Init+0x11c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dbe:	493d      	ldr	r1, [pc, #244]	@ (8002eb4 <HAL_ADC_Init+0x204>)
 8002dc0:	6865      	ldr	r5, [r4, #4]
 8002dc2:	688a      	ldr	r2, [r1, #8]
 8002dc4:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8002dc8:	432a      	orrs	r2, r5
 8002dca:	608a      	str	r2, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 8002dcc:	68e5      	ldr	r5, [r4, #12]
 8002dce:	6b62      	ldr	r2, [r4, #52]	@ 0x34
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dd0:	f894 1020 	ldrb.w	r1, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dd4:	f894 c019 	ldrb.w	ip, [r4, #25]
                 hadc->Init.DataAlign                                                   |
 8002dd8:	432a      	orrs	r2, r5
 8002dda:	68a5      	ldr	r5, [r4, #8]
 8002ddc:	432a      	orrs	r2, r5
 8002dde:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002de2:	2901      	cmp	r1, #1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002de4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002de8:	d043      	beq.n	8002e72 <HAL_ADC_Init+0x1c2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dea:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002dec:	b121      	cbz	r1, 8002df8 <HAL_ADC_Init+0x148>
                   | hadc->Init.ExternalTrigConvEdge
 8002dee:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002df0:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002df4:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002df6:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002df8:	68dd      	ldr	r5, [r3, #12]
 8002dfa:	492f      	ldr	r1, [pc, #188]	@ (8002eb8 <HAL_ADC_Init+0x208>)
 8002dfc:	4029      	ands	r1, r5
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	60d9      	str	r1, [r3, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	0712      	lsls	r2, r2, #28
 8002e06:	d417      	bmi.n	8002e38 <HAL_ADC_Init+0x188>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e08:	68d9      	ldr	r1, [r3, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e0a:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e0e:	f894 c018 	ldrb.w	ip, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e12:	f421 4580 	bic.w	r5, r1, #16384	@ 0x4000
 8002e16:	f025 0106 	bic.w	r1, r5, #6
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e1a:	0055      	lsls	r5, r2, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e1c:	ea45 328c 	orr.w	r2, r5, ip, lsl #14
 8002e20:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 8002e22:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e24:	430a      	orrs	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002e28:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8002e2c:	2901      	cmp	r1, #1
 8002e2e:	d025      	beq.n	8002e7c <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	f022 0501 	bic.w	r5, r2, #1
 8002e36:	611d      	str	r5, [r3, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e38:	6921      	ldr	r1, [r4, #16]
 8002e3a:	2901      	cmp	r1, #1
 8002e3c:	d011      	beq.n	8002e62 <HAL_ADC_Init+0x1b2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e3e:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 8002e40:	f025 020f 	bic.w	r2, r5, #15
 8002e44:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e48:	f023 0503 	bic.w	r5, r3, #3
 8002e4c:	f045 0101 	orr.w	r1, r5, #1
 8002e50:	65a1      	str	r1, [r4, #88]	@ 0x58
}
 8002e52:	b003      	add	sp, #12
 8002e54:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002e56:	f7fd fbe9 	bl	800062c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002e5a:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002e5c:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8002e60:	e731      	b.n	8002cc6 <HAL_ADC_Init+0x16>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e64:	69e5      	ldr	r5, [r4, #28]
 8002e66:	f021 010f 	bic.w	r1, r1, #15
 8002e6a:	1e6a      	subs	r2, r5, #1
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e70:	e7e9      	b.n	8002e46 <HAL_ADC_Init+0x196>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e72:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002e74:	1e4d      	subs	r5, r1, #1
 8002e76:	ea42 4245 	orr.w	r2, r2, r5, lsl #17
 8002e7a:	e7b6      	b.n	8002dea <HAL_ADC_Init+0x13a>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e7c:	6919      	ldr	r1, [r3, #16]
 8002e7e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002e80:	f421 65ff 	bic.w	r5, r1, #2040	@ 0x7f8
 8002e84:	f025 0104 	bic.w	r1, r5, #4
 8002e88:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8002e8a:	432a      	orrs	r2, r5
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002e90:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8002e92:	430a      	orrs	r2, r1
 8002e94:	432a      	orrs	r2, r5
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	611a      	str	r2, [r3, #16]
 8002e9c:	e7cc      	b.n	8002e38 <HAL_ADC_Init+0x188>
 8002e9e:	bf00      	nop
 8002ea0:	20000400 	.word	0x20000400
 8002ea4:	053e2d63 	.word	0x053e2d63
 8002ea8:	50040100 	.word	0x50040100
 8002eac:	50040000 	.word	0x50040000
 8002eb0:	50040200 	.word	0x50040200
 8002eb4:	50040300 	.word	0x50040300
 8002eb8:	fff0c007 	.word	0xfff0c007

08002ebc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ebe:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002ec0:	f7fd fd28 	bl	8000914 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ec4:	bd08      	pop	{r3, pc}
 8002ec6:	bf00      	nop

08002ec8 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop

08002ecc <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ecc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ece:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ed0:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8002ed4:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ed6:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ed8:	d11d      	bne.n	8002f16 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002eda:	6818      	ldr	r0, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002edc:	f444 7200 	orr.w	r2, r4, #512	@ 0x200
 8002ee0:	659a      	str	r2, [r3, #88]	@ 0x58
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ee2:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ee4:	68c1      	ldr	r1, [r0, #12]
 8002ee6:	f014 0f08 	tst.w	r4, #8
 8002eea:	d01b      	beq.n	8002f24 <ADC_DMAConvCplt+0x58>
 8002eec:	f411 6f40 	tst.w	r1, #3072	@ 0xc00
 8002ef0:	d10d      	bne.n	8002f0e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ef2:	68c0      	ldr	r0, [r0, #12]
 8002ef4:	0484      	lsls	r4, r0, #18
 8002ef6:	d40a      	bmi.n	8002f0e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ef8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002efa:	f422 7480 	bic.w	r4, r2, #256	@ 0x100
 8002efe:	659c      	str	r4, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f00:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8002f02:	04c9      	lsls	r1, r1, #19
 8002f04:	d403      	bmi.n	8002f0e <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f06:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002f08:	f040 0201 	orr.w	r2, r0, #1
 8002f0c:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fcb6 	bl	8000880 <HAL_ADC_ConvCpltCallback>
}
 8002f14:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f16:	06e2      	lsls	r2, r4, #27
 8002f18:	d40a      	bmi.n	8002f30 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f1a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
}
 8002f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f20:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8002f22:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f24:	0788      	lsls	r0, r1, #30
 8002f26:	d5e7      	bpl.n	8002ef8 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fca9 	bl	8000880 <HAL_ADC_ConvCpltCallback>
 8002f2e:	e7f1      	b.n	8002f14 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ffc9 	bl	8002ec8 <HAL_ADC_ErrorCallback>
}
 8002f36:	bd10      	pop	{r4, pc}

08002f38 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f38:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8002f3a:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f3c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002f3e:	f043 0140 	orr.w	r1, r3, #64	@ 0x40
 8002f42:	6581      	str	r1, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f44:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002f46:	f042 0304 	orr.w	r3, r2, #4
 8002f4a:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f4c:	f7ff ffbc 	bl	8002ec8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f50:	bd08      	pop	{r3, pc}
 8002f52:	bf00      	nop

08002f54 <HAL_ADC_ConfigChannel>:
{
 8002f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8002f58:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
{
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002f60:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002f68:	f000 8162 	beq.w	8003230 <HAL_ADC_ConfigChannel+0x2dc>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f6c:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f74:	68a5      	ldr	r5, [r4, #8]
 8002f76:	f015 0604 	ands.w	r6, r5, #4
 8002f7a:	d154      	bne.n	8003026 <HAL_ADC_ConfigChannel+0xd2>
    uint32_t config_rank = pConfig->Rank;
 8002f7c:	684f      	ldr	r7, [r1, #4]
    if (pConfig->Rank <= 5U)
 8002f7e:	2f05      	cmp	r7, #5
 8002f80:	f240 8097 	bls.w	80030b2 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 8002f84:	f007 051f 	and.w	r5, r7, #31
 8002f88:	201f      	movs	r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f8a:	09ba      	lsrs	r2, r7, #6
  MODIFY_REG(*preg,
 8002f8c:	fa00 f705 	lsl.w	r7, r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f90:	f002 060c 	and.w	r6, r2, #12
  MODIFY_REG(*preg,
 8002f94:	ea6f 0e07 	mvn.w	lr, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f98:	f104 0830 	add.w	r8, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8002f9c:	680a      	ldr	r2, [r1, #0]
 8002f9e:	f858 0006 	ldr.w	r0, [r8, r6]
 8002fa2:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8002fa6:	40af      	lsls	r7, r5
 8002fa8:	ea00 050e 	and.w	r5, r0, lr
 8002fac:	432f      	orrs	r7, r5
 8002fae:	f848 7006 	str.w	r7, [r8, r6]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fb2:	68a6      	ldr	r6, [r4, #8]
 8002fb4:	0777      	lsls	r7, r6, #29
 8002fb6:	d540      	bpl.n	800303a <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fb8:	68a2      	ldr	r2, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fba:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fbc:	68a6      	ldr	r6, [r4, #8]
 8002fbe:	07f5      	lsls	r5, r6, #31
 8002fc0:	d412      	bmi.n	8002fe8 <HAL_ADC_ConfigChannel+0x94>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fc2:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002fc4:	48b0      	ldr	r0, [pc, #704]	@ (8003288 <HAL_ADC_ConfigChannel+0x334>)
 8002fc6:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8002fca:	f006 0718 	and.w	r7, r6, #24
 8002fce:	40f8      	lsrs	r0, r7
 8002fd0:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8002fd4:	4010      	ands	r0, r2
 8002fd6:	ea25 0507 	bic.w	r5, r5, r7
 8002fda:	4328      	orrs	r0, r5
 8002fdc:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fe0:	48aa      	ldr	r0, [pc, #680]	@ (800328c <HAL_ADC_ConfigChannel+0x338>)
 8002fe2:	4286      	cmp	r6, r0
 8002fe4:	f000 80d2 	beq.w	800318c <HAL_ADC_ConfigChannel+0x238>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fe8:	49a9      	ldr	r1, [pc, #676]	@ (8003290 <HAL_ADC_ConfigChannel+0x33c>)
 8002fea:	420a      	tst	r2, r1
 8002fec:	d019      	beq.n	8003022 <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fee:	48a9      	ldr	r0, [pc, #676]	@ (8003294 <HAL_ADC_ConfigChannel+0x340>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ff0:	4da9      	ldr	r5, [pc, #676]	@ (8003298 <HAL_ADC_ConfigChannel+0x344>)
 8002ff2:	6887      	ldr	r7, [r0, #8]
 8002ff4:	42aa      	cmp	r2, r5
 8002ff6:	f007 76e0 	and.w	r6, r7, #29360128	@ 0x1c00000
 8002ffa:	d06f      	beq.n	80030dc <HAL_ADC_ConfigChannel+0x188>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ffc:	49a7      	ldr	r1, [pc, #668]	@ (800329c <HAL_ADC_ConfigChannel+0x348>)
 8002ffe:	428a      	cmp	r2, r1
 8003000:	f000 811a 	beq.w	8003238 <HAL_ADC_ConfigChannel+0x2e4>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003004:	4da6      	ldr	r5, [pc, #664]	@ (80032a0 <HAL_ADC_ConfigChannel+0x34c>)
 8003006:	42aa      	cmp	r2, r5
 8003008:	d10b      	bne.n	8003022 <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800300a:	027a      	lsls	r2, r7, #9
 800300c:	d409      	bmi.n	8003022 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_VREFINT_INSTANCE(hadc))
 800300e:	4aa5      	ldr	r2, [pc, #660]	@ (80032a4 <HAL_ADC_ConfigChannel+0x350>)
 8003010:	4294      	cmp	r4, r2
 8003012:	d106      	bne.n	8003022 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003014:	6884      	ldr	r4, [r0, #8]
 8003016:	f024 77e0 	bic.w	r7, r4, #29360128	@ 0x1c00000
 800301a:	4337      	orrs	r7, r6
 800301c:	f447 0680 	orr.w	r6, r7, #4194304	@ 0x400000
 8003020:	6086      	str	r6, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003022:	2000      	movs	r0, #0
 8003024:	e003      	b.n	800302e <HAL_ADC_ConfigChannel+0xda>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003026:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003028:	f042 0720 	orr.w	r7, r2, #32
 800302c:	659f      	str	r7, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 800302e:	2600      	movs	r6, #0
 8003030:	f883 6054 	strb.w	r6, [r3, #84]	@ 0x54
}
 8003034:	b002      	add	sp, #8
 8003036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800303a:	68a7      	ldr	r7, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800303c:	680a      	ldr	r2, [r1, #0]
 800303e:	073e      	lsls	r6, r7, #28
 8003040:	d4bc      	bmi.n	8002fbc <HAL_ADC_ConfigChannel+0x68>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003042:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8003044:	f3c2 5604 	ubfx	r6, r2, #20, #5
 8003048:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800304a:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 800304c:	40b0      	lsls	r0, r6
 800304e:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003052:	f002 0c04 	and.w	ip, r2, #4
 8003056:	f104 0814 	add.w	r8, r4, #20
  MODIFY_REG(*preg,
 800305a:	ea6f 0200 	mvn.w	r2, r0
 800305e:	f000 8152 	beq.w	8003306 <HAL_ADC_ConfigChannel+0x3b2>
 8003062:	f858 700c 	ldr.w	r7, [r8, ip]
 8003066:	40b5      	lsls	r5, r6
 8003068:	403a      	ands	r2, r7
 800306a:	432a      	orrs	r2, r5
 800306c:	f848 200c 	str.w	r2, [r8, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003070:	6965      	ldr	r5, [r4, #20]
 8003072:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8003076:	6166      	str	r6, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003078:	e9d1 7004 	ldrd	r7, r0, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800307c:	680a      	ldr	r2, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800307e:	68e5      	ldr	r5, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003080:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003082:	f104 0660 	add.w	r6, r4, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003086:	4694      	mov	ip, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003088:	f000 8116 	beq.w	80032b8 <HAL_ADC_ConfigChannel+0x364>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800308c:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8003090:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 8003092:	f856 c027 	ldr.w	ip, [r6, r7, lsl #2]
 8003096:	40a8      	lsls	r0, r5
 8003098:	4d83      	ldr	r5, [pc, #524]	@ (80032a8 <HAL_ADC_ConfigChannel+0x354>)
 800309a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800309e:	ea0c 0505 	and.w	r5, ip, r5
 80030a2:	4315      	orrs	r5, r2
 80030a4:	4328      	orrs	r0, r5
 80030a6:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80030aa:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030ae:	680a      	ldr	r2, [r1, #0]
}
 80030b0:	e784      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x68>
      switch (pConfig->Rank)
 80030b2:	1ebd      	subs	r5, r7, #2
 80030b4:	2d03      	cmp	r5, #3
 80030b6:	d903      	bls.n	80030c0 <HAL_ADC_ConfigChannel+0x16c>
    if (pConfig->Rank <= 5U)
 80030b8:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 80030bc:	2506      	movs	r5, #6
 80030be:	e76b      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x44>
 80030c0:	4e7a      	ldr	r6, [pc, #488]	@ (80032ac <HAL_ADC_ConfigChannel+0x358>)
 80030c2:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
  MODIFY_REG(*preg,
 80030c6:	271f      	movs	r7, #31
 80030c8:	f000 051f 	and.w	r5, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030cc:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 80030ce:	fa07 f005 	lsl.w	r0, r7, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030d2:	f002 060c 	and.w	r6, r2, #12
  MODIFY_REG(*preg,
 80030d6:	ea6f 0e00 	mvn.w	lr, r0
 80030da:	e75d      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x44>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030dc:	0238      	lsls	r0, r7, #8
 80030de:	d4a0      	bmi.n	8003022 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e0:	4870      	ldr	r0, [pc, #448]	@ (80032a4 <HAL_ADC_ConfigChannel+0x350>)
 80030e2:	4284      	cmp	r4, r0
 80030e4:	d003      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x19a>
 80030e6:	f500 7100 	add.w	r1, r0, #512	@ 0x200
 80030ea:	428c      	cmp	r4, r1
 80030ec:	d199      	bne.n	8003022 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030ee:	4d69      	ldr	r5, [pc, #420]	@ (8003294 <HAL_ADC_ConfigChannel+0x340>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f0:	4c6f      	ldr	r4, [pc, #444]	@ (80032b0 <HAL_ADC_ConfigChannel+0x35c>)
 80030f2:	68aa      	ldr	r2, [r5, #8]
 80030f4:	496f      	ldr	r1, [pc, #444]	@ (80032b4 <HAL_ADC_ConfigChannel+0x360>)
 80030f6:	f022 77e0 	bic.w	r7, r2, #29360128	@ 0x1c00000
 80030fa:	4337      	orrs	r7, r6
 80030fc:	f447 0600 	orr.w	r6, r7, #8388608	@ 0x800000
 8003100:	60ae      	str	r6, [r5, #8]
 8003102:	6820      	ldr	r0, [r4, #0]
 8003104:	0985      	lsrs	r5, r0, #6
 8003106:	fba1 1405 	umull	r1, r4, r1, r5
 800310a:	09a2      	lsrs	r2, r4, #6
 800310c:	3201      	adds	r2, #1
 800310e:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8003112:	00be      	lsls	r6, r7, #2
 8003114:	9601      	str	r6, [sp, #4]
          while (wait_loop_index != 0UL)
 8003116:	9801      	ldr	r0, [sp, #4]
 8003118:	2800      	cmp	r0, #0
 800311a:	d082      	beq.n	8003022 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 800311c:	9901      	ldr	r1, [sp, #4]
 800311e:	1e4d      	subs	r5, r1, #1
 8003120:	9501      	str	r5, [sp, #4]
          while (wait_loop_index != 0UL)
 8003122:	9c01      	ldr	r4, [sp, #4]
 8003124:	2c00      	cmp	r4, #0
 8003126:	f43f af7c 	beq.w	8003022 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 800312a:	9a01      	ldr	r2, [sp, #4]
 800312c:	1e57      	subs	r7, r2, #1
 800312e:	9701      	str	r7, [sp, #4]
          while (wait_loop_index != 0UL)
 8003130:	9e01      	ldr	r6, [sp, #4]
 8003132:	2e00      	cmp	r6, #0
 8003134:	f43f af75 	beq.w	8003022 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003138:	9801      	ldr	r0, [sp, #4]
 800313a:	1e41      	subs	r1, r0, #1
 800313c:	9101      	str	r1, [sp, #4]
          while (wait_loop_index != 0UL)
 800313e:	9d01      	ldr	r5, [sp, #4]
 8003140:	2d00      	cmp	r5, #0
 8003142:	f43f af6e 	beq.w	8003022 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003146:	9c01      	ldr	r4, [sp, #4]
 8003148:	1e62      	subs	r2, r4, #1
 800314a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800314c:	9f01      	ldr	r7, [sp, #4]
 800314e:	2f00      	cmp	r7, #0
 8003150:	f43f af67 	beq.w	8003022 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003154:	9e01      	ldr	r6, [sp, #4]
 8003156:	1e70      	subs	r0, r6, #1
 8003158:	9001      	str	r0, [sp, #4]
          while (wait_loop_index != 0UL)
 800315a:	9901      	ldr	r1, [sp, #4]
 800315c:	2900      	cmp	r1, #0
 800315e:	f43f af60 	beq.w	8003022 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003162:	9d01      	ldr	r5, [sp, #4]
 8003164:	1e6c      	subs	r4, r5, #1
 8003166:	9401      	str	r4, [sp, #4]
          while (wait_loop_index != 0UL)
 8003168:	9a01      	ldr	r2, [sp, #4]
 800316a:	2a00      	cmp	r2, #0
 800316c:	f43f af59 	beq.w	8003022 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003170:	9f01      	ldr	r7, [sp, #4]
 8003172:	1e7e      	subs	r6, r7, #1
 8003174:	9601      	str	r6, [sp, #4]
          while (wait_loop_index != 0UL)
 8003176:	9801      	ldr	r0, [sp, #4]
 8003178:	2800      	cmp	r0, #0
 800317a:	f43f af52 	beq.w	8003022 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 800317e:	9901      	ldr	r1, [sp, #4]
 8003180:	1e4d      	subs	r5, r1, #1
 8003182:	9501      	str	r5, [sp, #4]
          while (wait_loop_index != 0UL)
 8003184:	9c01      	ldr	r4, [sp, #4]
 8003186:	2c00      	cmp	r4, #0
 8003188:	d1c8      	bne.n	800311c <HAL_ADC_ConfigChannel+0x1c8>
 800318a:	e74a      	b.n	8003022 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800318c:	2f00      	cmp	r7, #0
 800318e:	d067      	beq.n	8003260 <HAL_ADC_ConfigChannel+0x30c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	fa92 f6a2 	rbit	r6, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003194:	2e00      	cmp	r6, #0
 8003196:	f000 80c0 	beq.w	800331a <HAL_ADC_ConfigChannel+0x3c6>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800319a:	fab6 f786 	clz	r7, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800319e:	3701      	adds	r7, #1
 80031a0:	f007 051f 	and.w	r5, r7, #31
 80031a4:	2d09      	cmp	r5, #9
 80031a6:	f240 80b8 	bls.w	800331a <HAL_ADC_ConfigChannel+0x3c6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80031ae:	2800      	cmp	r0, #0
 80031b0:	f000 8150 	beq.w	8003454 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 80031b4:	fab0 f680 	clz	r6, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031b8:	3601      	adds	r6, #1
 80031ba:	06b7      	lsls	r7, r6, #26
 80031bc:	f007 40f8 	and.w	r0, r7, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80031c4:	2d00      	cmp	r5, #0
 80031c6:	f000 814a 	beq.w	800345e <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 80031ca:	fab5 f685 	clz	r6, r5
 80031ce:	3601      	adds	r6, #1
 80031d0:	f006 071f 	and.w	r7, r6, #31
 80031d4:	2501      	movs	r5, #1
 80031d6:	fa05 f607 	lsl.w	r6, r5, r7
 80031da:	4330      	orrs	r0, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	f000 813a 	beq.w	800345a <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 80031e6:	fab2 f782 	clz	r7, r2
 80031ea:	1c7d      	adds	r5, r7, #1
 80031ec:	f005 071f 	and.w	r7, r5, #31
 80031f0:	f04f 0803 	mov.w	r8, #3
 80031f4:	f06f 0c1d 	mvn.w	ip, #29
 80031f8:	fb18 c607 	smlabb	r6, r8, r7, ip
 80031fc:	0532      	lsls	r2, r6, #20
 80031fe:	f042 7500 	orr.w	r5, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003202:	4305      	orrs	r5, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003204:	0de8      	lsrs	r0, r5, #23
  MODIFY_REG(*preg,
 8003206:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003208:	f000 0804 	and.w	r8, r0, #4
 800320c:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 8003210:	f3c5 5204 	ubfx	r2, r5, #20, #5
 8003214:	fa07 f502 	lsl.w	r5, r7, r2
 8003218:	f856 0008 	ldr.w	r0, [r6, r8]
 800321c:	2707      	movs	r7, #7
 800321e:	fa07 fc02 	lsl.w	ip, r7, r2
 8003222:	ea20 020c 	bic.w	r2, r0, ip
 8003226:	432a      	orrs	r2, r5
 8003228:	f846 2008 	str.w	r2, [r6, r8]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800322c:	680a      	ldr	r2, [r1, #0]
}
 800322e:	e6db      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x94>
  __HAL_LOCK(hadc);
 8003230:	2002      	movs	r0, #2
}
 8003232:	b002      	add	sp, #8
 8003234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003238:	01f9      	lsls	r1, r7, #7
 800323a:	f53f aef2 	bmi.w	8003022 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800323e:	4819      	ldr	r0, [pc, #100]	@ (80032a4 <HAL_ADC_ConfigChannel+0x350>)
 8003240:	4284      	cmp	r4, r0
 8003242:	d004      	beq.n	800324e <HAL_ADC_ConfigChannel+0x2fa>
 8003244:	f500 7100 	add.w	r1, r0, #512	@ 0x200
 8003248:	428c      	cmp	r4, r1
 800324a:	f47f aeea 	bne.w	8003022 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800324e:	4d11      	ldr	r5, [pc, #68]	@ (8003294 <HAL_ADC_ConfigChannel+0x340>)
 8003250:	68aa      	ldr	r2, [r5, #8]
 8003252:	f022 74e0 	bic.w	r4, r2, #29360128	@ 0x1c00000
 8003256:	4334      	orrs	r4, r6
 8003258:	f044 7780 	orr.w	r7, r4, #16777216	@ 0x1000000
 800325c:	60af      	str	r7, [r5, #8]
}
 800325e:	e6e0      	b.n	8003022 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003260:	0e90      	lsrs	r0, r2, #26
 8003262:	3001      	adds	r0, #1
 8003264:	f000 051f 	and.w	r5, r0, #31
 8003268:	0682      	lsls	r2, r0, #26
 800326a:	2001      	movs	r0, #1
 800326c:	f002 47f8 	and.w	r7, r2, #2080374784	@ 0x7c000000
 8003270:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003272:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003274:	ea40 0007 	orr.w	r0, r0, r7
 8003278:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800327c:	d972      	bls.n	8003364 <HAL_ADC_ConfigChannel+0x410>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800327e:	3e1e      	subs	r6, #30
 8003280:	0535      	lsls	r5, r6, #20
 8003282:	f045 7500 	orr.w	r5, r5, #33554432	@ 0x2000000
 8003286:	e7bc      	b.n	8003202 <HAL_ADC_ConfigChannel+0x2ae>
 8003288:	0007ffff 	.word	0x0007ffff
 800328c:	407f0000 	.word	0x407f0000
 8003290:	80080000 	.word	0x80080000
 8003294:	50040300 	.word	0x50040300
 8003298:	c7520000 	.word	0xc7520000
 800329c:	cb840000 	.word	0xcb840000
 80032a0:	80000001 	.word	0x80000001
 80032a4:	50040000 	.word	0x50040000
 80032a8:	03fff000 	.word	0x03fff000
 80032ac:	08009e88 	.word	0x08009e88
 80032b0:	20000400 	.word	0x20000400
 80032b4:	053e2d63 	.word	0x053e2d63
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032b8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80032ba:	6e25      	ldr	r5, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032bc:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032c0:	f3c5 6784 	ubfx	r7, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d14f      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x414>
 80032c8:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032cc:	4297      	cmp	r7, r2
 80032ce:	f000 8091 	beq.w	80033f4 <HAL_ADC_ConfigChannel+0x4a0>
 80032d2:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80032d4:	6e65      	ldr	r5, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032d6:	f3c5 6884 	ubfx	r8, r5, #26, #5
 80032da:	4590      	cmp	r8, r2
 80032dc:	d075      	beq.n	80033ca <HAL_ADC_ConfigChannel+0x476>
 80032de:	68b0      	ldr	r0, [r6, #8]
 80032e0:	68b7      	ldr	r7, [r6, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032e2:	f3c7 6084 	ubfx	r0, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032e6:	f106 0708 	add.w	r7, r6, #8
 80032ea:	4290      	cmp	r0, r2
 80032ec:	f000 8094 	beq.w	8003418 <HAL_ADC_ConfigChannel+0x4c4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032f0:	68f0      	ldr	r0, [r6, #12]
 80032f2:	68f0      	ldr	r0, [r6, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032f4:	f106 050c 	add.w	r5, r6, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032f8:	f3c0 6784 	ubfx	r7, r0, #26, #5
 80032fc:	42ba      	cmp	r2, r7
 80032fe:	f000 80a0 	beq.w	8003442 <HAL_ADC_ConfigChannel+0x4ee>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003302:	4662      	mov	r2, ip
 8003304:	e65a      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x68>
  MODIFY_REG(*preg,
 8003306:	f858 000c 	ldr.w	r0, [r8, ip]
 800330a:	4002      	ands	r2, r0
 800330c:	f848 200c 	str.w	r2, [r8, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003310:	6962      	ldr	r2, [r4, #20]
 8003312:	f042 4700 	orr.w	r7, r2, #2147483648	@ 0x80000000
 8003316:	6167      	str	r7, [r4, #20]
}
 8003318:	e6ae      	b.n	8003078 <HAL_ADC_ConfigChannel+0x124>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800331e:	2800      	cmp	r0, #0
 8003320:	f000 80a1 	beq.w	8003466 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8003324:	fab0 f780 	clz	r7, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003328:	3701      	adds	r7, #1
 800332a:	06be      	lsls	r6, r7, #26
 800332c:	f006 40f8 	and.w	r0, r6, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8003334:	2d00      	cmp	r5, #0
 8003336:	f000 8094 	beq.w	8003462 <HAL_ADC_ConfigChannel+0x50e>
  return __builtin_clz(value);
 800333a:	fab5 f785 	clz	r7, r5
 800333e:	3701      	adds	r7, #1
 8003340:	f007 081f 	and.w	r8, r7, #31
 8003344:	f04f 0c01 	mov.w	ip, #1
 8003348:	fa0c f608 	lsl.w	r6, ip, r8
 800334c:	4330      	orrs	r0, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003352:	2a00      	cmp	r2, #0
 8003354:	d07b      	beq.n	800344e <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 8003356:	fab2 f582 	clz	r5, r2
 800335a:	3501      	adds	r5, #1
 800335c:	f005 071f 	and.w	r7, r5, #31
 8003360:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8003364:	0535      	lsls	r5, r6, #20
 8003366:	e74c      	b.n	8003202 <HAL_ADC_ConfigChannel+0x2ae>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800336c:	b11d      	cbz	r5, 8003376 <HAL_ADC_ConfigChannel+0x422>
  return __builtin_clz(value);
 800336e:	fab5 f085 	clz	r0, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003372:	4287      	cmp	r7, r0
 8003374:	d03e      	beq.n	80033f4 <HAL_ADC_ConfigChannel+0x4a0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003376:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003378:	6e67      	ldr	r7, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800337a:	f3c7 6884 	ubfx	r8, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	fa9c f0ac 	rbit	r0, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003382:	f106 0708 	add.w	r7, r6, #8
 8003386:	46be      	mov	lr, r7
  if (value == 0U)
 8003388:	b118      	cbz	r0, 8003392 <HAL_ADC_ConfigChannel+0x43e>
  return __builtin_clz(value);
 800338a:	fab0 f580 	clz	r5, r0
 800338e:	4545      	cmp	r5, r8
 8003390:	d01d      	beq.n	80033ce <HAL_ADC_ConfigChannel+0x47a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003392:	68b0      	ldr	r0, [r6, #8]
 8003394:	68b0      	ldr	r0, [r6, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003396:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800339e:	f106 050c 	add.w	r5, r6, #12
 80033a2:	46a8      	mov	r8, r5
  if (value == 0U)
 80033a4:	f1be 0f00 	cmp.w	lr, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_ADC_ConfigChannel+0x45e>
  return __builtin_clz(value);
 80033aa:	fabe fe8e 	clz	lr, lr
 80033ae:	4586      	cmp	lr, r0
 80033b0:	d034      	beq.n	800341c <HAL_ADC_ConfigChannel+0x4c8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033b2:	68f0      	ldr	r0, [r6, #12]
 80033b4:	68f6      	ldr	r6, [r6, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033b6:	f3c6 6784 	ubfx	r7, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 80033be:	2e00      	cmp	r6, #0
 80033c0:	f43f adfc 	beq.w	8002fbc <HAL_ADC_ConfigChannel+0x68>
  return __builtin_clz(value);
 80033c4:	fab6 f286 	clz	r2, r6
 80033c8:	e798      	b.n	80032fc <HAL_ADC_ConfigChannel+0x3a8>
 80033ca:	f106 0e08 	add.w	lr, r6, #8
  MODIFY_REG(*preg,
 80033ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80033d0:	f022 4500 	bic.w	r5, r2, #2147483648	@ 0x80000000
 80033d4:	6665      	str	r5, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033d6:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033da:	68b2      	ldr	r2, [r6, #8]
 80033dc:	68b0      	ldr	r0, [r6, #8]
 80033de:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033e2:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033e4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033e8:	4662      	mov	r2, ip
 80033ea:	2d00      	cmp	r5, #0
 80033ec:	d1d5      	bne.n	800339a <HAL_ADC_ConfigChannel+0x446>
 80033ee:	f3cc 6284 	ubfx	r2, ip, #26, #5
 80033f2:	e77a      	b.n	80032ea <HAL_ADC_ConfigChannel+0x396>
  MODIFY_REG(*preg,
 80033f4:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80033f6:	f020 4700 	bic.w	r7, r0, #2147483648	@ 0x80000000
 80033fa:	6627      	str	r7, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033fc:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003400:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003404:	f3cc 0512 	ubfx	r5, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003408:	f3c2 6884 	ubfx	r8, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800340c:	4662      	mov	r2, ip
 800340e:	2d00      	cmp	r5, #0
 8003410:	d1b5      	bne.n	800337e <HAL_ADC_ConfigChannel+0x42a>
 8003412:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8003416:	e760      	b.n	80032da <HAL_ADC_ConfigChannel+0x386>
 8003418:	f106 080c 	add.w	r8, r6, #12
  MODIFY_REG(*preg,
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 8003422:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003424:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003428:	68f2      	ldr	r2, [r6, #12]
 800342a:	68f6      	ldr	r6, [r6, #12]
 800342c:	f3cc 0012 	ubfx	r0, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003430:	4645      	mov	r5, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003432:	f3c6 6784 	ubfx	r7, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003436:	4662      	mov	r2, ip
 8003438:	2800      	cmp	r0, #0
 800343a:	d1be      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x466>
 800343c:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8003440:	e75c      	b.n	80032fc <HAL_ADC_ConfigChannel+0x3a8>
  MODIFY_REG(*preg,
 8003442:	682f      	ldr	r7, [r5, #0]
 8003444:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8003448:	602a      	str	r2, [r5, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800344a:	680a      	ldr	r2, [r1, #0]
}
 800344c:	e5b6      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x68>
 800344e:	f44f 1540 	mov.w	r5, #3145728	@ 0x300000
 8003452:	e6d6      	b.n	8003202 <HAL_ADC_ConfigChannel+0x2ae>
 8003454:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003458:	e6b2      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x26c>
 800345a:	4d04      	ldr	r5, [pc, #16]	@ (800346c <HAL_ADC_ConfigChannel+0x518>)
 800345c:	e6d1      	b.n	8003202 <HAL_ADC_ConfigChannel+0x2ae>
 800345e:	2602      	movs	r6, #2
 8003460:	e6bb      	b.n	80031da <HAL_ADC_ConfigChannel+0x286>
 8003462:	2602      	movs	r6, #2
 8003464:	e772      	b.n	800334c <HAL_ADC_ConfigChannel+0x3f8>
 8003466:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800346a:	e761      	b.n	8003330 <HAL_ADC_ConfigChannel+0x3dc>
 800346c:	fe500000 	.word	0xfe500000

08003470 <ADC_Enable>:
{
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003474:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003476:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8003478:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800347a:	6899      	ldr	r1, [r3, #8]
 800347c:	07ca      	lsls	r2, r1, #31
 800347e:	d464      	bmi.n	800354a <ADC_Enable+0xda>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003480:	4d39      	ldr	r5, [pc, #228]	@ (8003568 <ADC_Enable+0xf8>)
 8003482:	4604      	mov	r4, r0
 8003484:	6898      	ldr	r0, [r3, #8]
 8003486:	4228      	tst	r0, r5
 8003488:	d162      	bne.n	8003550 <ADC_Enable+0xe0>
  MODIFY_REG(ADCx->CR,
 800348a:	689e      	ldr	r6, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800348c:	4937      	ldr	r1, [pc, #220]	@ (800356c <ADC_Enable+0xfc>)
  MODIFY_REG(ADCx->CR,
 800348e:	f026 4c00 	bic.w	ip, r6, #2147483648	@ 0x80000000
 8003492:	f02c 0e3f 	bic.w	lr, ip, #63	@ 0x3f
 8003496:	f04e 0201 	orr.w	r2, lr, #1
 800349a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800349c:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	d537      	bpl.n	8003512 <ADC_Enable+0xa2>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034a2:	4833      	ldr	r0, [pc, #204]	@ (8003570 <ADC_Enable+0x100>)
 80034a4:	4d33      	ldr	r5, [pc, #204]	@ (8003574 <ADC_Enable+0x104>)
 80034a6:	6806      	ldr	r6, [r0, #0]
 80034a8:	09b1      	lsrs	r1, r6, #6
 80034aa:	fba5 2301 	umull	r2, r3, r5, r1
 80034ae:	099a      	lsrs	r2, r3, #6
 80034b0:	3201      	adds	r2, #1
 80034b2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 80034b6:	0085      	lsls	r5, r0, #2
 80034b8:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 80034ba:	9e01      	ldr	r6, [sp, #4]
 80034bc:	2e00      	cmp	r6, #0
 80034be:	d028      	beq.n	8003512 <ADC_Enable+0xa2>
        wait_loop_index--;
 80034c0:	9901      	ldr	r1, [sp, #4]
 80034c2:	1e4b      	subs	r3, r1, #1
 80034c4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80034c6:	9a01      	ldr	r2, [sp, #4]
 80034c8:	b31a      	cbz	r2, 8003512 <ADC_Enable+0xa2>
        wait_loop_index--;
 80034ca:	9801      	ldr	r0, [sp, #4]
 80034cc:	1e45      	subs	r5, r0, #1
 80034ce:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 80034d0:	9e01      	ldr	r6, [sp, #4]
 80034d2:	b1f6      	cbz	r6, 8003512 <ADC_Enable+0xa2>
        wait_loop_index--;
 80034d4:	9901      	ldr	r1, [sp, #4]
 80034d6:	1e4b      	subs	r3, r1, #1
 80034d8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80034da:	9a01      	ldr	r2, [sp, #4]
 80034dc:	b1ca      	cbz	r2, 8003512 <ADC_Enable+0xa2>
        wait_loop_index--;
 80034de:	9801      	ldr	r0, [sp, #4]
 80034e0:	1e45      	subs	r5, r0, #1
 80034e2:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 80034e4:	9e01      	ldr	r6, [sp, #4]
 80034e6:	b1a6      	cbz	r6, 8003512 <ADC_Enable+0xa2>
        wait_loop_index--;
 80034e8:	9901      	ldr	r1, [sp, #4]
 80034ea:	1e4b      	subs	r3, r1, #1
 80034ec:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80034ee:	9a01      	ldr	r2, [sp, #4]
 80034f0:	b17a      	cbz	r2, 8003512 <ADC_Enable+0xa2>
        wait_loop_index--;
 80034f2:	9801      	ldr	r0, [sp, #4]
 80034f4:	1e45      	subs	r5, r0, #1
 80034f6:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 80034f8:	9e01      	ldr	r6, [sp, #4]
 80034fa:	b156      	cbz	r6, 8003512 <ADC_Enable+0xa2>
        wait_loop_index--;
 80034fc:	9901      	ldr	r1, [sp, #4]
 80034fe:	1e4b      	subs	r3, r1, #1
 8003500:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003502:	9a01      	ldr	r2, [sp, #4]
 8003504:	b12a      	cbz	r2, 8003512 <ADC_Enable+0xa2>
        wait_loop_index--;
 8003506:	9801      	ldr	r0, [sp, #4]
 8003508:	1e45      	subs	r5, r0, #1
 800350a:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 800350c:	9e01      	ldr	r6, [sp, #4]
 800350e:	2e00      	cmp	r6, #0
 8003510:	d1d6      	bne.n	80034c0 <ADC_Enable+0x50>
    tickstart = HAL_GetTick();
 8003512:	f7ff fb91 	bl	8002c38 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	07ce      	lsls	r6, r1, #31
    tickstart = HAL_GetTick();
 800351c:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800351e:	d414      	bmi.n	800354a <ADC_Enable+0xda>
  MODIFY_REG(ADCx->CR,
 8003520:	4e15      	ldr	r6, [pc, #84]	@ (8003578 <ADC_Enable+0x108>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	07d0      	lsls	r0, r2, #31
 8003526:	d404      	bmi.n	8003532 <ADC_Enable+0xc2>
  MODIFY_REG(ADCx->CR,
 8003528:	6898      	ldr	r0, [r3, #8]
 800352a:	4030      	ands	r0, r6
 800352c:	f040 0101 	orr.w	r1, r0, #1
 8003530:	6099      	str	r1, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003532:	f7ff fb81 	bl	8002c38 <HAL_GetTick>
 8003536:	1b43      	subs	r3, r0, r5
 8003538:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800353a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800353c:	d902      	bls.n	8003544 <ADC_Enable+0xd4>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	07d1      	lsls	r1, r2, #31
 8003542:	d505      	bpl.n	8003550 <ADC_Enable+0xe0>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	07c2      	lsls	r2, r0, #31
 8003548:	d5eb      	bpl.n	8003522 <ADC_Enable+0xb2>
  return HAL_OK;
 800354a:	2000      	movs	r0, #0
}
 800354c:	b002      	add	sp, #8
 800354e:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003550:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003552:	f045 0610 	orr.w	r6, r5, #16
 8003556:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003558:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800355a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355c:	f041 0301 	orr.w	r3, r1, #1
 8003560:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8003562:	b002      	add	sp, #8
 8003564:	bd70      	pop	{r4, r5, r6, pc}
 8003566:	bf00      	nop
 8003568:	8000003f 	.word	0x8000003f
 800356c:	50040300 	.word	0x50040300
 8003570:	20000400 	.word	0x20000400
 8003574:	053e2d63 	.word	0x053e2d63
 8003578:	7fffffc0 	.word	0x7fffffc0

0800357c <HAL_ADC_Start_DMA>:
{
 800357c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003580:	4b37      	ldr	r3, [pc, #220]	@ (8003660 <HAL_ADC_Start_DMA+0xe4>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003582:	6806      	ldr	r6, [r0, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
{
 8003586:	460d      	mov	r5, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003588:	68b1      	ldr	r1, [r6, #8]
 800358a:	0749      	lsls	r1, r1, #29
 800358c:	d418      	bmi.n	80035c0 <HAL_ADC_Start_DMA+0x44>
 800358e:	4617      	mov	r7, r2
    __HAL_LOCK(hadc);
 8003590:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8003594:	2a01      	cmp	r2, #1
 8003596:	4604      	mov	r4, r0
 8003598:	d012      	beq.n	80035c0 <HAL_ADC_Start_DMA+0x44>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800359a:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800359e:	4b31      	ldr	r3, [pc, #196]	@ (8003664 <HAL_ADC_Start_DMA+0xe8>)
    __HAL_LOCK(hadc);
 80035a0:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80035a2:	429e      	cmp	r6, r3
    __HAL_LOCK(hadc);
 80035a4:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80035a8:	d00d      	beq.n	80035c6 <HAL_ADC_Start_DMA+0x4a>
 80035aa:	f240 2621 	movw	r6, #545	@ 0x221
 80035ae:	fa26 fc08 	lsr.w	ip, r6, r8
 80035b2:	ea1c 0100 	ands.w	r1, ip, r0
 80035b6:	d106      	bne.n	80035c6 <HAL_ADC_Start_DMA+0x4a>
      __HAL_UNLOCK(hadc);
 80035b8:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
}
 80035bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 80035c0:	2002      	movs	r0, #2
}
 80035c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80035c6:	4620      	mov	r0, r4
 80035c8:	f7ff ff52 	bl	8003470 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d13d      	bne.n	800364c <HAL_ADC_Start_DMA+0xd0>
        ADC_STATE_CLR_SET(hadc->State,
 80035d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035d2:	6821      	ldr	r1, [r4, #0]
 80035d4:	4e24      	ldr	r6, [pc, #144]	@ (8003668 <HAL_ADC_Start_DMA+0xec>)
        ADC_STATE_CLR_SET(hadc->State,
 80035d6:	f420 6270 	bic.w	r2, r0, #3840	@ 0xf00
 80035da:	f022 0e01 	bic.w	lr, r2, #1
 80035de:	f44e 7380 	orr.w	r3, lr, #256	@ 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035e2:	42b1      	cmp	r1, r6
        ADC_STATE_CLR_SET(hadc->State,
 80035e4:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035e6:	d036      	beq.n	8003656 <HAL_ADC_Start_DMA+0xda>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035ea:	f420 1280 	bic.w	r2, r0, #1048576	@ 0x100000
 80035ee:	65a2      	str	r2, [r4, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80035f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035f2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80035f4:	f413 5680 	ands.w	r6, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035f8:	bf18      	it	ne
 80035fa:	6de6      	ldrne	r6, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035fc:	463b      	mov	r3, r7
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035fe:	bf18      	it	ne
 8003600:	f026 0606 	bicne.w	r6, r6, #6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003604:	4f19      	ldr	r7, [pc, #100]	@ (800366c <HAL_ADC_Start_DMA+0xf0>)
          ADC_CLEAR_ERRORCODE(hadc);
 8003606:	65e6      	str	r6, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003608:	462a      	mov	r2, r5
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800360a:	62c7      	str	r7, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800360c:	4d18      	ldr	r5, [pc, #96]	@ (8003670 <HAL_ADC_Start_DMA+0xf4>)
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800360e:	4e19      	ldr	r6, [pc, #100]	@ (8003674 <HAL_ADC_Start_DMA+0xf8>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003610:	6305      	str	r5, [r0, #48]	@ 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003612:	271c      	movs	r7, #28
        __HAL_UNLOCK(hadc);
 8003614:	f04f 0800 	mov.w	r8, #0
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003618:	6346      	str	r6, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800361a:	600f      	str	r7, [r1, #0]
        __HAL_UNLOCK(hadc);
 800361c:	f884 8054 	strb.w	r8, [r4, #84]	@ 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003620:	684d      	ldr	r5, [r1, #4]
 8003622:	f045 0610 	orr.w	r6, r5, #16
 8003626:	604e      	str	r6, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003628:	68cf      	ldr	r7, [r1, #12]
 800362a:	f047 0501 	orr.w	r5, r7, #1
 800362e:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003630:	3140      	adds	r1, #64	@ 0x40
 8003632:	f000 fcf5 	bl	8004020 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003636:	6824      	ldr	r4, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003638:	68a1      	ldr	r1, [r4, #8]
 800363a:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800363e:	f022 033f 	bic.w	r3, r2, #63	@ 0x3f
 8003642:	f043 0604 	orr.w	r6, r3, #4
 8003646:	60a6      	str	r6, [r4, #8]
}
 8003648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 800364c:	2500      	movs	r5, #0
 800364e:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8003652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003656:	f1b8 0f00 	cmp.w	r8, #0
 800365a:	d1c9      	bne.n	80035f0 <HAL_ADC_Start_DMA+0x74>
 800365c:	e7c4      	b.n	80035e8 <HAL_ADC_Start_DMA+0x6c>
 800365e:	bf00      	nop
 8003660:	50040300 	.word	0x50040300
 8003664:	50040200 	.word	0x50040200
 8003668:	50040100 	.word	0x50040100
 800366c:	08002ecd 	.word	0x08002ecd
 8003670:	08002ebd 	.word	0x08002ebd
 8003674:	08002f39 	.word	0x08002f39

08003678 <ADC_Disable>:
{
 8003678:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800367a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	0795      	lsls	r5, r2, #30
 8003680:	d502      	bpl.n	8003688 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003682:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003684:	2000      	movs	r0, #0
}
 8003686:	bd38      	pop	{r3, r4, r5, pc}
 8003688:	6899      	ldr	r1, [r3, #8]
 800368a:	07cc      	lsls	r4, r1, #31
 800368c:	d5fa      	bpl.n	8003684 <ADC_Disable+0xc>
 800368e:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003690:	6898      	ldr	r0, [r3, #8]
 8003692:	f000 050d 	and.w	r5, r0, #13
 8003696:	2d01      	cmp	r5, #1
 8003698:	d009      	beq.n	80036ae <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369a:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 800369c:	f045 0010 	orr.w	r0, r5, #16
 80036a0:	65a0      	str	r0, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	65e2      	str	r2, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80036aa:	2001      	movs	r0, #1
}
 80036ac:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 80036b4:	f020 053f 	bic.w	r5, r0, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036b8:	2103      	movs	r1, #3
 80036ba:	f045 0202 	orr.w	r2, r5, #2
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80036c2:	f7ff fab9 	bl	8002c38 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	07c9      	lsls	r1, r1, #31
    tickstart = HAL_GetTick();
 80036cc:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036ce:	d403      	bmi.n	80036d8 <ADC_Disable+0x60>
 80036d0:	e7d8      	b.n	8003684 <ADC_Disable+0xc>
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	07cb      	lsls	r3, r1, #31
 80036d6:	d5d5      	bpl.n	8003684 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036d8:	f7ff faae 	bl	8002c38 <HAL_GetTick>
 80036dc:	1b40      	subs	r0, r0, r5
 80036de:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036e0:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036e2:	d9f6      	bls.n	80036d2 <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	07d2      	lsls	r2, r2, #31
 80036e8:	d5f3      	bpl.n	80036d2 <ADC_Disable+0x5a>
 80036ea:	e7d6      	b.n	800369a <ADC_Disable+0x22>

080036ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80036ec:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036ee:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 80036f2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80036f4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80036f6:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 80036f8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80036fa:	d040      	beq.n	800377e <HAL_ADCEx_Calibration_Start+0x92>
 80036fc:	460d      	mov	r5, r1
 80036fe:	2101      	movs	r1, #1
 8003700:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003704:	4604      	mov	r4, r0
 8003706:	f7ff ffb7 	bl	8003678 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800370a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 800370c:	b9e0      	cbnz	r0, 8003748 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 800370e:	f423 5188 	bic.w	r1, r3, #4352	@ 0x1100
 8003712:	f021 0c02 	bic.w	ip, r1, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003716:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8003718:	f04c 0302 	orr.w	r3, ip, #2
 800371c:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 800371e:	6891      	ldr	r1, [r2, #8]
 8003720:	f021 4e40 	bic.w	lr, r1, #3221225472	@ 0xc0000000
 8003724:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 8003728:	f02e 033f 	bic.w	r3, lr, #63	@ 0x3f
 800372c:	432b      	orrs	r3, r5
 800372e:	f043 4500 	orr.w	r5, r3, #2147483648	@ 0x80000000
 8003732:	6095      	str	r5, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003734:	6891      	ldr	r1, [r2, #8]
 8003736:	2900      	cmp	r1, #0
 8003738:	db0e      	blt.n	8003758 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800373a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800373c:	f022 0c03 	bic.w	ip, r2, #3
 8003740:	f04c 0301 	orr.w	r3, ip, #1
 8003744:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003746:	e002      	b.n	800374e <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003748:	f043 0210 	orr.w	r2, r3, #16
 800374c:	65a2      	str	r2, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800374e:	2500      	movs	r5, #0
 8003750:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8003754:	b003      	add	sp, #12
 8003756:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 8003758:	9901      	ldr	r1, [sp, #4]
 800375a:	3101      	adds	r1, #1
 800375c:	9101      	str	r1, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800375e:	9b01      	ldr	r3, [sp, #4]
 8003760:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003764:	d3e6      	bcc.n	8003734 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8003766:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003768:	f020 0212 	bic.w	r2, r0, #18
        __HAL_UNLOCK(hadc);
 800376c:	f04f 0e00 	mov.w	lr, #0
        ADC_STATE_CLR_SET(hadc->State,
 8003770:	f042 0510 	orr.w	r5, r2, #16
 8003774:	65a5      	str	r5, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8003776:	f884 e054 	strb.w	lr, [r4, #84]	@ 0x54
        return HAL_ERROR;
 800377a:	2001      	movs	r0, #1
 800377c:	e7ea      	b.n	8003754 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 800377e:	2002      	movs	r0, #2
}
 8003780:	b003      	add	sp, #12
 8003782:	bd30      	pop	{r4, r5, pc}

08003784 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003784:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003786:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800378a:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800378c:	2a01      	cmp	r2, #1
{
 800378e:	b09a      	sub	sp, #104	@ 0x68
  __HAL_LOCK(hadc);
 8003790:	d044      	beq.n	800381c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003792:	4603      	mov	r3, r0

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003794:	4d2e      	ldr	r5, [pc, #184]	@ (8003850 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8003796:	681c      	ldr	r4, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003798:	2700      	movs	r7, #0
  __HAL_LOCK(hadc);
 800379a:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800379c:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800379e:	9716      	str	r7, [sp, #88]	@ 0x58
  __HAL_LOCK(hadc);
 80037a0:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80037a4:	9717      	str	r7, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80037a6:	d008      	beq.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a8:	6d99      	ldr	r1, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037aa:	f883 7054 	strb.w	r7, [r3, #84]	@ 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ae:	f041 0220 	orr.w	r2, r1, #32
 80037b2:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80037b4:	b01a      	add	sp, #104	@ 0x68
 80037b6:	bcf0      	pop	{r4, r5, r6, r7}
 80037b8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037ba:	4a26      	ldr	r2, [pc, #152]	@ (8003854 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 80037bc:	6890      	ldr	r0, [r2, #8]
 80037be:	0740      	lsls	r0, r0, #29
 80037c0:	d50b      	bpl.n	80037da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80037c2:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c4:	6d9f      	ldr	r7, [r3, #88]	@ 0x58
 80037c6:	f047 0520 	orr.w	r5, r7, #32
    tmp_hal_status = HAL_ERROR;
 80037ca:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037cc:	659d      	str	r5, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80037ce:	2400      	movs	r4, #0
 80037d0:	f883 4054 	strb.w	r4, [r3, #84]	@ 0x54
}
 80037d4:	b01a      	add	sp, #104	@ 0x68
 80037d6:	bcf0      	pop	{r4, r5, r6, r7}
 80037d8:	4770      	bx	lr
 80037da:	68a7      	ldr	r7, [r4, #8]
 80037dc:	077f      	lsls	r7, r7, #29
 80037de:	d4f1      	bmi.n	80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037e0:	b306      	cbz	r6, 8003824 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037e2:	4f1d      	ldr	r7, [pc, #116]	@ (8003858 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 80037e4:	684d      	ldr	r5, [r1, #4]
 80037e6:	68b8      	ldr	r0, [r7, #8]
 80037e8:	f893 c030 	ldrb.w	ip, [r3, #48]	@ 0x30
 80037ec:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80037f0:	4328      	orrs	r0, r5
 80037f2:	ea40 354c 	orr.w	r5, r0, ip, lsl #13
 80037f6:	60bd      	str	r5, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037f8:	4818      	ldr	r0, [pc, #96]	@ (800385c <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 80037fa:	68a4      	ldr	r4, [r4, #8]
 80037fc:	6892      	ldr	r2, [r2, #8]
 80037fe:	6885      	ldr	r5, [r0, #8]
 8003800:	4322      	orrs	r2, r4
 8003802:	432a      	orrs	r2, r5
 8003804:	07d5      	lsls	r5, r2, #31
 8003806:	d420      	bmi.n	800384a <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        MODIFY_REG(tmpADC_Common->CCR,
 8003808:	68bc      	ldr	r4, [r7, #8]
 800380a:	688a      	ldr	r2, [r1, #8]
 800380c:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 8003810:	4332      	orrs	r2, r6
 8003812:	f021 060f 	bic.w	r6, r1, #15
 8003816:	4332      	orrs	r2, r6
 8003818:	60ba      	str	r2, [r7, #8]
 800381a:	e016      	b.n	800384a <HAL_ADCEx_MultiModeConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 800381c:	2002      	movs	r0, #2
}
 800381e:	b01a      	add	sp, #104	@ 0x68
 8003820:	bcf0      	pop	{r4, r5, r6, r7}
 8003822:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003824:	4e0c      	ldr	r6, [pc, #48]	@ (8003858 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8003826:	480d      	ldr	r0, [pc, #52]	@ (800385c <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003828:	68b5      	ldr	r5, [r6, #8]
 800382a:	f425 4160 	bic.w	r1, r5, #57344	@ 0xe000
 800382e:	60b1      	str	r1, [r6, #8]
 8003830:	68a4      	ldr	r4, [r4, #8]
 8003832:	6892      	ldr	r2, [r2, #8]
 8003834:	6887      	ldr	r7, [r0, #8]
 8003836:	4322      	orrs	r2, r4
 8003838:	433a      	orrs	r2, r7
 800383a:	07d4      	lsls	r4, r2, #31
 800383c:	d405      	bmi.n	800384a <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800383e:	68b5      	ldr	r5, [r6, #8]
 8003840:	f425 6171 	bic.w	r1, r5, #3856	@ 0xf10
 8003844:	f021 000f 	bic.w	r0, r1, #15
 8003848:	60b0      	str	r0, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800384a:	2000      	movs	r0, #0
 800384c:	e7bf      	b.n	80037ce <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800384e:	bf00      	nop
 8003850:	50040000 	.word	0x50040000
 8003854:	50040100 	.word	0x50040100
 8003858:	50040300 	.word	0x50040300
 800385c:	50040200 	.word	0x50040200

08003860 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003860:	4907      	ldr	r1, [pc, #28]	@ (8003880 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003862:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003864:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003866:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
 800386a:	4002      	ands	r2, r0
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800386c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003870:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003872:	f043 62bf 	orr.w	r2, r3, #100139008	@ 0x5f80000
 8003876:	f442 3000 	orr.w	r0, r2, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800387a:	60c8      	str	r0, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003884:	4b1b      	ldr	r3, [pc, #108]	@ (80038f4 <HAL_NVIC_SetPriority+0x70>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800388c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800388e:	f1c3 0e07 	rsb	lr, r3, #7
 8003892:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003896:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800389a:	bf28      	it	cs
 800389c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a0:	f1bc 0f06 	cmp.w	ip, #6
 80038a4:	d91c      	bls.n	80038e0 <HAL_NVIC_SetPriority+0x5c>
 80038a6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
 80038ae:	fa03 f30c 	lsl.w	r3, r3, ip
 80038b2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	fa03 f30e 	lsl.w	r3, r3, lr
 80038be:	ea21 0103 	bic.w	r1, r1, r3
 80038c2:	fa01 f30c 	lsl.w	r3, r1, ip
 80038c6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c8:	011a      	lsls	r2, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80038ca:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038cc:	b2d1      	uxtb	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80038ce:	db0a      	blt.n	80038e6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d0:	f100 4c60 	add.w	ip, r0, #3758096384	@ 0xe0000000
 80038d4:	f50c 4261 	add.w	r2, ip, #57600	@ 0xe100
 80038d8:	f882 1300 	strb.w	r1, [r2, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80038dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80038e0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e2:	4694      	mov	ip, r2
 80038e4:	e7e7      	b.n	80038b6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e6:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <HAL_NVIC_SetPriority+0x74>)
 80038e8:	f000 000f 	and.w	r0, r0, #15
 80038ec:	4403      	add	r3, r0
 80038ee:	7619      	strb	r1, [r3, #24]
 80038f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80038f4:	e000ed00 	.word	0xe000ed00
 80038f8:	e000ecfc 	.word	0xe000ecfc

080038fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80038fc:	2800      	cmp	r0, #0
 80038fe:	db07      	blt.n	8003910 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003900:	4a04      	ldr	r2, [pc, #16]	@ (8003914 <HAL_NVIC_EnableIRQ+0x18>)
 8003902:	0941      	lsrs	r1, r0, #5
 8003904:	2301      	movs	r3, #1
 8003906:	f000 001f 	and.w	r0, r0, #31
 800390a:	4083      	lsls	r3, r0
 800390c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	e000e100 	.word	0xe000e100

08003918 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003918:	3801      	subs	r0, #1
 800391a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800391e:	d301      	bcc.n	8003924 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003920:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003922:	4770      	bx	lr
{
 8003924:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003926:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392a:	4c07      	ldr	r4, [pc, #28]	@ (8003948 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800392c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003932:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003936:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003938:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800393a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800393c:	619a      	str	r2, [r3, #24]
}
 800393e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003942:	6119      	str	r1, [r3, #16]
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <CRYP_SetKey>:
  */
static HAL_StatusTypeDef  CRYP_SetKey(CRYP_HandleTypeDef *hcryp)
{
  uint32_t keyaddr;

  if (hcryp->Init.pKey == NULL)
 800394c:	6a03      	ldr	r3, [r0, #32]
 800394e:	b32b      	cbz	r3, 800399c <CRYP_SetKey+0x50>
{
 8003950:	b410      	push	{r4}
  }


  keyaddr = (uint32_t)(hcryp->Init.pKey);

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003952:	68c4      	ldr	r4, [r0, #12]
  {
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8003954:	6802      	ldr	r2, [r0, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003956:	f5b4 2f80 	cmp.w	r4, #262144	@ 0x40000
  keyaddr = (uint32_t)(hcryp->Init.pKey);
 800395a:	4619      	mov	r1, r3
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 800395c:	d10e      	bne.n	800397c <CRYP_SetKey+0x30>
  return __builtin_bswap32(value);
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	ba04      	rev	r4, r0
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8003962:	63d4      	str	r4, [r2, #60]	@ 0x3c
 8003964:	6858      	ldr	r0, [r3, #4]
 8003966:	ba04      	rev	r4, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR6 = __REV(*(uint32_t*)(keyaddr));
 8003968:	6394      	str	r4, [r2, #56]	@ 0x38
 800396a:	6898      	ldr	r0, [r3, #8]
 800396c:	ba04      	rev	r4, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR5 = __REV(*(uint32_t*)(keyaddr));
 800396e:	6354      	str	r4, [r2, #52]	@ 0x34
 8003970:	68d8      	ldr	r0, [r3, #12]
    keyaddr+=4U;
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4U;
 8003972:	f103 0110 	add.w	r1, r3, #16
 8003976:	ba04      	rev	r4, r0
  }

  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 8003978:	460b      	mov	r3, r1
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
 800397a:	6314      	str	r4, [r2, #48]	@ 0x30
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	ba1c      	rev	r4, r3
  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 8003980:	61d4      	str	r4, [r2, #28]
 8003982:	684b      	ldr	r3, [r1, #4]
 8003984:	ba1c      	rev	r4, r3
  keyaddr+=4U;
  hcryp->Instance->KEYR2 = __REV(*(uint32_t*)(keyaddr));
 8003986:	6194      	str	r4, [r2, #24]
 8003988:	688b      	ldr	r3, [r1, #8]
 800398a:	ba1c      	rev	r4, r3
  keyaddr+=4U;
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
 800398c:	6154      	str	r4, [r2, #20]
 800398e:	68c9      	ldr	r1, [r1, #12]
  keyaddr+=4U;
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));

  return HAL_OK;
}
 8003990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003994:	ba0b      	rev	r3, r1
  return HAL_OK;
 8003996:	2000      	movs	r0, #0
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));
 8003998:	6113      	str	r3, [r2, #16]
}
 800399a:	4770      	bx	lr
    return HAL_ERROR;
 800399c:	2001      	movs	r0, #1
}
 800399e:	4770      	bx	lr

080039a0 <HAL_CRYP_Init>:
  if(hcryp == NULL)
 80039a0:	2800      	cmp	r0, #0
 80039a2:	f000 80a4 	beq.w	8003aee <HAL_CRYP_Init+0x14e>
  if (hcryp->Init.OperatingMode != CRYP_ALGOMODE_KEYDERIVATION)
 80039a6:	6902      	ldr	r2, [r0, #16]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 80039a8:	2a18      	cmp	r2, #24
{
 80039aa:	b570      	push	{r4, r5, r6, lr}
 80039ac:	4604      	mov	r4, r0
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 80039ae:	d04d      	beq.n	8003a4c <HAL_CRYP_Init+0xac>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80039b0:	2a08      	cmp	r2, #8
 80039b2:	d03e      	beq.n	8003a32 <HAL_CRYP_Init+0x92>
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 80039b4:	f894 0055 	ldrb.w	r0, [r4, #85]	@ 0x55
 80039b8:	f000 05ff 	and.w	r5, r0, #255	@ 0xff
 80039bc:	2800      	cmp	r0, #0
 80039be:	d03e      	beq.n	8003a3e <HAL_CRYP_Init+0x9e>
  __HAL_CRYP_DISABLE(hcryp);
 80039c0:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80039c2:	68e1      	ldr	r1, [r4, #12]
  hcryp->State = HAL_CRYP_STATE_BUSY;
 80039c4:	2602      	movs	r6, #2
 80039c6:	f884 6055 	strb.w	r6, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 80039ca:	682b      	ldr	r3, [r5, #0]
 80039cc:	f023 0001 	bic.w	r0, r3, #1
 80039d0:	6028      	str	r0, [r5, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80039d2:	682e      	ldr	r6, [r5, #0]
 80039d4:	f426 2380 	bic.w	r3, r6, #262144	@ 0x40000
 80039d8:	430b      	orrs	r3, r1
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80039da:	f04f 0c0a 	mov.w	ip, #10
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80039de:	2a08      	cmp	r2, #8
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80039e0:	602b      	str	r3, [r5, #0]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80039e2:	f884 c048 	strb.w	ip, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80039e6:	d066      	beq.n	8003ab6 <HAL_CRYP_Init+0x116>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80039e8:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 80039ec:	2e60      	cmp	r6, #96	@ 0x60
 80039ee:	d033      	beq.n	8003a58 <HAL_CRYP_Init+0xb8>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80039f0:	6829      	ldr	r1, [r5, #0]
 80039f2:	f421 3380 	bic.w	r3, r1, #65536	@ 0x10000
 80039f6:	f023 017e 	bic.w	r1, r3, #126	@ 0x7e
 80039fa:	68a3      	ldr	r3, [r4, #8]
 80039fc:	4333      	orrs	r3, r6
 80039fe:	430b      	orrs	r3, r1
 8003a00:	4313      	orrs	r3, r2
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003a02:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003a06:	602b      	str	r3, [r5, #0]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003a08:	d061      	beq.n	8003ace <HAL_CRYP_Init+0x12e>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d04d      	beq.n	8003aaa <HAL_CRYP_Init+0x10a>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8003a0e:	2e00      	cmp	r6, #0
 8003a10:	d13b      	bne.n	8003a8a <HAL_CRYP_Init+0xea>
  hcryp->CrypInCount = 0;
 8003a12:	2200      	movs	r2, #0
 8003a14:	2300      	movs	r3, #0
 8003a16:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003a1a:	2000      	movs	r0, #0
  hcryp->State = HAL_CRYP_STATE_READY;
 8003a1c:	2101      	movs	r1, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003a1e:	65a0      	str	r0, [r4, #88]	@ 0x58
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003a20:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hcryp->State = HAL_CRYP_STATE_READY;
 8003a24:	f884 1055 	strb.w	r1, [r4, #85]	@ 0x55
  __HAL_CRYP_ENABLE(hcryp);
 8003a28:	682c      	ldr	r4, [r5, #0]
 8003a2a:	f044 0301 	orr.w	r3, r4, #1
 8003a2e:	602b      	str	r3, [r5, #0]
}
 8003a30:	bd70      	pop	{r4, r5, r6, pc}
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003a32:	6943      	ldr	r3, [r0, #20]
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a38:	d1bc      	bne.n	80039b4 <HAL_CRYP_Init+0x14>
    return HAL_ERROR;
 8003a3a:	2001      	movs	r0, #1
}
 8003a3c:	bd70      	pop	{r4, r5, r6, pc}
    hcryp->Lock = HAL_UNLOCKED;
 8003a3e:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
    HAL_CRYP_MspInit(hcryp);
 8003a42:	4620      	mov	r0, r4
 8003a44:	f7fc ffea 	bl	8000a1c <HAL_CRYP_MspInit>
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003a48:	6922      	ldr	r2, [r4, #16]
 8003a4a:	e7b9      	b.n	80039c0 <HAL_CRYP_Init+0x20>
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
 8003a4c:	6943      	ldr	r3, [r0, #20]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003a4e:	f023 0120 	bic.w	r1, r3, #32
 8003a52:	2940      	cmp	r1, #64	@ 0x40
 8003a54:	d1ee      	bne.n	8003a34 <HAL_CRYP_Init+0x94>
 8003a56:	e7f0      	b.n	8003a3a <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003a58:	682e      	ldr	r6, [r5, #0]
 8003a5a:	f426 3180 	bic.w	r1, r6, #65536	@ 0x10000
 8003a5e:	f021 037e 	bic.w	r3, r1, #126	@ 0x7e
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8003a68:	602a      	str	r2, [r5, #0]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003a6a:	682e      	ldr	r6, [r5, #0]
 8003a6c:	69e1      	ldr	r1, [r4, #28]
 8003a6e:	f426 43c0 	bic.w	r3, r6, #24576	@ 0x6000
 8003a72:	430b      	orrs	r3, r1
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003a74:	f04f 0c03 	mov.w	ip, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003a78:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003a7a:	f884 c048 	strb.w	ip, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003a7e:	b920      	cbnz	r0, 8003a8a <HAL_CRYP_Init+0xea>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003a80:	4620      	mov	r0, r4
 8003a82:	f7ff ff63 	bl	800394c <CRYP_SetKey>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d1d7      	bne.n	8003a3a <HAL_CRYP_Init+0x9a>
    hcryp->Instance->IVR0 = 0;
  }
  else
#endif
  {
    if (hcryp->Init.pInitVect == NULL)
 8003a8a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d0d4      	beq.n	8003a3a <HAL_CRYP_Init+0x9a>
 8003a90:	6802      	ldr	r2, [r0, #0]
 8003a92:	ba16      	rev	r6, r2
      return HAL_ERROR;
    }

    ivaddr = (uint32_t)(hcryp->Init.pInitVect);

    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 8003a94:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8003a96:	6841      	ldr	r1, [r0, #4]
 8003a98:	ba0b      	rev	r3, r1
    ivaddr+=4U;
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 8003a9a:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003a9c:	6882      	ldr	r2, [r0, #8]
 8003a9e:	ba16      	rev	r6, r2
    ivaddr+=4U;
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 8003aa0:	626e      	str	r6, [r5, #36]	@ 0x24
 8003aa2:	68c0      	ldr	r0, [r0, #12]
 8003aa4:	ba01      	rev	r1, r0
    ivaddr+=4U;
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 8003aa6:	6229      	str	r1, [r5, #32]
 8003aa8:	e7b3      	b.n	8003a12 <HAL_CRYP_Init+0x72>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7ff ff4e 	bl	800394c <CRYP_SetKey>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d0ac      	beq.n	8003a0e <HAL_CRYP_Init+0x6e>
 8003ab4:	e7c1      	b.n	8003a3a <HAL_CRYP_Init+0x9a>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003ab6:	682b      	ldr	r3, [r5, #0]
 8003ab8:	f023 0218 	bic.w	r2, r3, #24
 8003abc:	f042 0608 	orr.w	r6, r2, #8
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8003ac0:	4620      	mov	r0, r4
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003ac2:	602e      	str	r6, [r5, #0]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8003ac4:	f7ff ff42 	bl	800394c <CRYP_SetKey>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d0a2      	beq.n	8003a12 <HAL_CRYP_Init+0x72>
 8003acc:	e7b5      	b.n	8003a3a <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003ace:	682e      	ldr	r6, [r5, #0]
 8003ad0:	69e2      	ldr	r2, [r4, #28]
 8003ad2:	f426 41c0 	bic.w	r1, r6, #24576	@ 0x6000
 8003ad6:	4311      	orrs	r1, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003ad8:	2303      	movs	r3, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003ada:	6029      	str	r1, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003adc:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003ae0:	b138      	cbz	r0, 8003af2 <HAL_CRYP_Init+0x152>
    hcryp->Instance->IVR3 = 0;
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	62e8      	str	r0, [r5, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 8003ae6:	62a8      	str	r0, [r5, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 8003ae8:	6268      	str	r0, [r5, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 8003aea:	6228      	str	r0, [r5, #32]
 8003aec:	e791      	b.n	8003a12 <HAL_CRYP_Init+0x72>
    return HAL_ERROR;
 8003aee:	2001      	movs	r0, #1
}
 8003af0:	4770      	bx	lr
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003af2:	4620      	mov	r0, r4
 8003af4:	f7ff ff2a 	bl	800394c <CRYP_SetKey>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d19e      	bne.n	8003a3a <HAL_CRYP_Init+0x9a>
 8003afc:	e7f1      	b.n	8003ae2 <HAL_CRYP_Init+0x142>
 8003afe:	bf00      	nop

08003b00 <HAL_CRYP_DeInit>:
  if(hcryp == NULL)
 8003b00:	b1c0      	cbz	r0, 8003b34 <HAL_CRYP_DeInit+0x34>
  hcryp->CrypInCount = 0;
 8003b02:	2200      	movs	r2, #0
 8003b04:	2300      	movs	r3, #0
{
 8003b06:	b510      	push	{r4, lr}
  hcryp->CrypInCount = 0;
 8003b08:	e9c0 2310 	strd	r2, r3, [r0, #64]	@ 0x40
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003b0c:	2102      	movs	r1, #2
  __HAL_CRYP_DISABLE(hcryp);
 8003b0e:	6802      	ldr	r2, [r0, #0]
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003b10:	f880 1055 	strb.w	r1, [r0, #85]	@ 0x55
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  __HAL_CRYP_DISABLE(hcryp);
 8003b1a:	6811      	ldr	r1, [r2, #0]
 8003b1c:	f021 0301 	bic.w	r3, r1, #1
 8003b20:	4604      	mov	r4, r0
 8003b22:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 8003b24:	f7fc ff92 	bl	8000a4c <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8003b28:	2000      	movs	r0, #0
 8003b2a:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  __HAL_UNLOCK(hcryp);
 8003b2e:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
}
 8003b32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003b34:	2001      	movs	r0, #1
}
 8003b36:	4770      	bx	lr

08003b38 <HAL_CRYP_AESCBC_Encrypt>:
{
 8003b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  if(hcryp == NULL)
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d073      	beq.n	8003c2e <HAL_CRYP_AESCBC_Encrypt+0xf6>
  hcryp->CrypInCount = 0;
 8003b46:	ed9f 7b7a 	vldr	d7, [pc, #488]	@ 8003d30 <HAL_CRYP_AESCBC_Encrypt+0x1f8>
 8003b4a:	ed80 7b10 	vstr	d7, [r0, #64]	@ 0x40
 8003b4e:	4616      	mov	r6, r2
 8003b50:	461f      	mov	r7, r3
  __HAL_CRYP_DISABLE(hcryp);
 8003b52:	6802      	ldr	r2, [r0, #0]
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 8003b54:	2301      	movs	r3, #1
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003b56:	f04f 0902 	mov.w	r9, #2
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 8003b5a:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003b5e:	f880 9055 	strb.w	r9, [r0, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003b62:	460d      	mov	r5, r1
 8003b64:	6811      	ldr	r1, [r2, #0]
 8003b66:	f021 0301 	bic.w	r3, r1, #1
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 8003b6e:	f7fc ff6d 	bl	8000a4c <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8003b72:	2000      	movs	r0, #0
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 8003b74:	ed9f 0b70 	vldr	d0, [pc, #448]	@ 8003d38 <HAL_CRYP_AESCBC_Encrypt+0x200>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8003b78:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8003b7c:	f894 2055 	ldrb.w	r2, [r4, #85]	@ 0x55
  __HAL_UNLOCK(hcryp);
 8003b80:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 8003b84:	ed84 0b04 	vstr	d0, [r4, #16]
  hcryp->Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8003b88:	61a0      	str	r0, [r4, #24]
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8003b8a:	2a00      	cmp	r2, #0
 8003b8c:	d053      	beq.n	8003c36 <HAL_CRYP_AESCBC_Encrypt+0xfe>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003b8e:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003b92:	f8d4 9000 	ldr.w	r9, [r4]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003b96:	68e1      	ldr	r1, [r4, #12]
  __HAL_CRYP_DISABLE(hcryp);
 8003b98:	f8d9 3000 	ldr.w	r3, [r9]
 8003b9c:	f023 0201 	bic.w	r2, r3, #1
 8003ba0:	f8c9 2000 	str.w	r2, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003ba4:	f8d9 3000 	ldr.w	r3, [r9]
 8003ba8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003bac:	430a      	orrs	r2, r1
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003bae:	210a      	movs	r1, #10
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003bb0:	f8c9 2000 	str.w	r2, [r9]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003bb4:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003bb8:	e9d4 2c05 	ldrd	r2, ip, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8003bbc:	2a60      	cmp	r2, #96	@ 0x60
 8003bbe:	d063      	beq.n	8003c88 <HAL_CRYP_AESCBC_Encrypt+0x150>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003bc0:	f8d9 3000 	ldr.w	r3, [r9]
 8003bc4:	f423 3e80 	bic.w	lr, r3, #65536	@ 0x10000
 8003bc8:	68a3      	ldr	r3, [r4, #8]
 8003bca:	f02e 017e 	bic.w	r1, lr, #126	@ 0x7e
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	4303      	orrs	r3, r0
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003bd4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003bd8:	f8c9 3000 	str.w	r3, [r9]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003bdc:	f000 808e 	beq.w	8003cfc <HAL_CRYP_AESCBC_Encrypt+0x1c4>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003be0:	f1bc 0f00 	cmp.w	ip, #0
 8003be4:	f000 8082 	beq.w	8003cec <HAL_CRYP_AESCBC_Encrypt+0x1b4>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8003be8:	2a00      	cmp	r2, #0
 8003bea:	d16b      	bne.n	8003cc4 <HAL_CRYP_AESCBC_Encrypt+0x18c>
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003bec:	4632      	mov	r2, r6
 8003bee:	4629      	mov	r1, r5
  hcryp->State = HAL_CRYP_STATE_READY;
 8003bf0:	2601      	movs	r6, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	65a5      	str	r5, [r4, #88]	@ 0x58
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003bf6:	463b      	mov	r3, r7
  hcryp->State = HAL_CRYP_STATE_READY;
 8003bf8:	f884 6055 	strb.w	r6, [r4, #85]	@ 0x55
  hcryp->CrypInCount = 0;
 8003bfc:	2700      	movs	r7, #0
 8003bfe:	2600      	movs	r6, #0
 8003c00:	e9c4 6710 	strd	r6, r7, [r4, #64]	@ 0x40
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003c04:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003c08:	4620      	mov	r0, r4
  __HAL_CRYP_ENABLE(hcryp);
 8003c0a:	f8d9 4000 	ldr.w	r4, [r9]
 8003c0e:	f044 0701 	orr.w	r7, r4, #1
 8003c12:	f8c9 7000 	str.w	r7, [r9]
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003c16:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
}
 8003c1a:	b003      	add	sp, #12
 8003c1c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003c20:	f000 b88e 	b.w	8003d40 <HAL_CRYPEx_AES>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003c24:	4620      	mov	r0, r4
 8003c26:	f7ff fe91 	bl	800394c <CRYP_SetKey>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d074      	beq.n	8003d18 <HAL_CRYP_AESCBC_Encrypt+0x1e0>
}
 8003c2e:	2001      	movs	r0, #1
 8003c30:	b003      	add	sp, #12
 8003c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_CRYP_MspInit(hcryp);
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7fc fef0 	bl	8000a1c <HAL_CRYP_MspInit>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003c3c:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003c40:	f8d4 9000 	ldr.w	r9, [r4]
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003c44:	6920      	ldr	r0, [r4, #16]
  __HAL_CRYP_DISABLE(hcryp);
 8003c46:	f8d9 3000 	ldr.w	r3, [r9]
 8003c4a:	f023 0201 	bic.w	r2, r3, #1
 8003c4e:	f8c9 2000 	str.w	r2, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003c52:	f8d9 1000 	ldr.w	r1, [r9]
 8003c56:	68e2      	ldr	r2, [r4, #12]
 8003c58:	f421 2380 	bic.w	r3, r1, #262144	@ 0x40000
 8003c5c:	4313      	orrs	r3, r2
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003c5e:	210a      	movs	r1, #10
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003c60:	2808      	cmp	r0, #8
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003c62:	f8c9 3000 	str.w	r3, [r9]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003c66:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003c6a:	d1a5      	bne.n	8003bb8 <HAL_CRYP_AESCBC_Encrypt+0x80>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003c6c:	f8d9 3000 	ldr.w	r3, [r9]
 8003c70:	f023 0218 	bic.w	r2, r3, #24
 8003c74:	f042 0008 	orr.w	r0, r2, #8
 8003c78:	f8c9 0000 	str.w	r0, [r9]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7ff fe65 	bl	800394c <CRYP_SetKey>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d0b2      	beq.n	8003bec <HAL_CRYP_AESCBC_Encrypt+0xb4>
 8003c86:	e7d2      	b.n	8003c2e <HAL_CRYP_AESCBC_Encrypt+0xf6>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003c88:	f8d9 1000 	ldr.w	r1, [r9]
 8003c8c:	f421 3e80 	bic.w	lr, r1, #65536	@ 0x10000
 8003c90:	f02e 037e 	bic.w	r3, lr, #126	@ 0x7e
 8003c94:	4303      	orrs	r3, r0
 8003c96:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8003c9a:	f8c9 2000 	str.w	r2, [r9]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003c9e:	f8d9 0000 	ldr.w	r0, [r9]
 8003ca2:	69e3      	ldr	r3, [r4, #28]
 8003ca4:	f420 41c0 	bic.w	r1, r0, #24576	@ 0x6000
 8003ca8:	4319      	orrs	r1, r3
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003caa:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003cac:	f8c9 1000 	str.w	r1, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003cb0:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003cb4:	f1bc 0f00 	cmp.w	ip, #0
 8003cb8:	d104      	bne.n	8003cc4 <HAL_CRYP_AESCBC_Encrypt+0x18c>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f7ff fe46 	bl	800394c <CRYP_SetKey>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d1b4      	bne.n	8003c2e <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.pInitVect == NULL)
 8003cc4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d0b1      	beq.n	8003c2e <HAL_CRYP_AESCBC_Encrypt+0xf6>
 8003cca:	6801      	ldr	r1, [r0, #0]
 8003ccc:	ba0b      	rev	r3, r1
    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 8003cce:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
 8003cd2:	6842      	ldr	r2, [r0, #4]
 8003cd4:	ba11      	rev	r1, r2
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 8003cd6:	f8c9 1028 	str.w	r1, [r9, #40]	@ 0x28
 8003cda:	6883      	ldr	r3, [r0, #8]
 8003cdc:	ba1a      	rev	r2, r3
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 8003cde:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
 8003ce2:	68c0      	ldr	r0, [r0, #12]
 8003ce4:	ba01      	rev	r1, r0
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 8003ce6:	f8c9 1020 	str.w	r1, [r9, #32]
 8003cea:	e77f      	b.n	8003bec <HAL_CRYP_AESCBC_Encrypt+0xb4>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003cec:	4620      	mov	r0, r4
 8003cee:	9201      	str	r2, [sp, #4]
 8003cf0:	f7ff fe2c 	bl	800394c <CRYP_SetKey>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d19a      	bne.n	8003c2e <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8003cf8:	9a01      	ldr	r2, [sp, #4]
 8003cfa:	e775      	b.n	8003be8 <HAL_CRYP_AESCBC_Encrypt+0xb0>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003cfc:	f8d9 0000 	ldr.w	r0, [r9]
 8003d00:	69e3      	ldr	r3, [r4, #28]
 8003d02:	f420 41c0 	bic.w	r1, r0, #24576	@ 0x6000
 8003d06:	4319      	orrs	r1, r3
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003d08:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003d0a:	f8c9 1000 	str.w	r1, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003d0e:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003d12:	f1bc 0f00 	cmp.w	ip, #0
 8003d16:	d085      	beq.n	8003c24 <HAL_CRYP_AESCBC_Encrypt+0xec>
    hcryp->Instance->IVR3 = 0;
 8003d18:	2000      	movs	r0, #0
 8003d1a:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 8003d1e:	f8c9 0028 	str.w	r0, [r9, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 8003d22:	f8c9 0024 	str.w	r0, [r9, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 8003d26:	f8c9 0020 	str.w	r0, [r9, #32]
 8003d2a:	e75f      	b.n	8003bec <HAL_CRYP_AESCBC_Encrypt+0xb4>
 8003d2c:	f3af 8000 	nop.w
	...
 8003d3c:	00000020 	.word	0x00000020

08003d40 <HAL_CRYPEx_AES>:
  *                     case of key derivation only.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AES(CRYP_HandleTypeDef *hcryp, uint8_t *pInputData, uint16_t Size, uint8_t *pOutputData, uint32_t Timeout)
{
 8003d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d44:	461c      	mov	r4, r3

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003d46:	f890 3055 	ldrb.w	r3, [r0, #85]	@ 0x55
{
 8003d4a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	f040 80c7 	bne.w	8003ee2 <HAL_CRYPEx_AES+0x1a2>
 8003d54:	4606      	mov	r6, r0
 8003d56:	b2d8      	uxtb	r0, r3
  {
    /* Check parameters setting */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003d58:	6935      	ldr	r5, [r6, #16]
 8003d5a:	2d08      	cmp	r5, #8
 8003d5c:	d063      	beq.n	8003e26 <HAL_CRYPEx_AES+0xe6>
        return  HAL_ERROR;
      }
    }
    else
    {
      if ((pInputData == NULL) || (pOutputData == NULL) || (Size == 0U))
 8003d5e:	2900      	cmp	r1, #0
 8003d60:	f000 80bd 	beq.w	8003ede <HAL_CRYPEx_AES+0x19e>
 8003d64:	2c00      	cmp	r4, #0
 8003d66:	f000 80ba 	beq.w	8003ede <HAL_CRYPEx_AES+0x19e>
 8003d6a:	4617      	mov	r7, r2
 8003d6c:	2a00      	cmp	r2, #0
 8003d6e:	f000 80b6 	beq.w	8003ede <HAL_CRYPEx_AES+0x19e>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(hcryp);
 8003d72:	f896 2054 	ldrb.w	r2, [r6, #84]	@ 0x54
 8003d76:	2a01      	cmp	r2, #1
 8003d78:	f000 80b3 	beq.w	8003ee2 <HAL_CRYPEx_AES+0x1a2>
 8003d7c:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003d80:	f101 0510 	add.w	r5, r1, #16
 8003d84:	2002      	movs	r0, #2


  for(index=0U ; (index < Ilength); index += 16U)
  {
    /* Write the Input block in the Data Input register */
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003d86:	6831      	ldr	r1, [r6, #0]
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003d88:	f886 0055 	strb.w	r0, [r6, #85]	@ 0x55
  for(index=0U ; (index < Ilength); index += 16U)
 8003d8c:	3410      	adds	r4, #16
 8003d8e:	f04f 0900 	mov.w	r9, #0
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003d92:	f855 3c10 	ldr.w	r3, [r5, #-16]
 8003d96:	608b      	str	r3, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003d98:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8003d9c:	608a      	str	r2, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 8003d9e:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8003da2:	6088      	str	r0, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003da4:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8003da8:	608b      	str	r3, [r1, #8]
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef const * const hcryp, uint32_t Timeout)
{
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003daa:	f7fe ff45 	bl	8002c38 <HAL_GetTick>
 8003dae:	f1b8 3fff 	cmp.w	r8, #4294967295

  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003db2:	6831      	ldr	r1, [r6, #0]
  tickstart = HAL_GetTick();
 8003db4:	4682      	mov	sl, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003db6:	f040 809e 	bne.w	8003ef6 <HAL_CRYPEx_AES+0x1b6>
 8003dba:	6848      	ldr	r0, [r1, #4]
 8003dbc:	07c3      	lsls	r3, r0, #31
 8003dbe:	d414      	bmi.n	8003dea <HAL_CRYPEx_AES+0xaa>
 8003dc0:	684b      	ldr	r3, [r1, #4]
 8003dc2:	07db      	lsls	r3, r3, #31
 8003dc4:	d411      	bmi.n	8003dea <HAL_CRYPEx_AES+0xaa>
 8003dc6:	684a      	ldr	r2, [r1, #4]
 8003dc8:	07d0      	lsls	r0, r2, #31
 8003dca:	d40e      	bmi.n	8003dea <HAL_CRYPEx_AES+0xaa>
 8003dcc:	6848      	ldr	r0, [r1, #4]
 8003dce:	07c2      	lsls	r2, r0, #31
 8003dd0:	d40b      	bmi.n	8003dea <HAL_CRYPEx_AES+0xaa>
 8003dd2:	684b      	ldr	r3, [r1, #4]
 8003dd4:	07db      	lsls	r3, r3, #31
 8003dd6:	d408      	bmi.n	8003dea <HAL_CRYPEx_AES+0xaa>
 8003dd8:	684a      	ldr	r2, [r1, #4]
 8003dda:	07d0      	lsls	r0, r2, #31
 8003ddc:	d405      	bmi.n	8003dea <HAL_CRYPEx_AES+0xaa>
 8003dde:	6848      	ldr	r0, [r1, #4]
 8003de0:	07c2      	lsls	r2, r0, #31
 8003de2:	d402      	bmi.n	8003dea <HAL_CRYPEx_AES+0xaa>
 8003de4:	684b      	ldr	r3, [r1, #4]
 8003de6:	07db      	lsls	r3, r3, #31
 8003de8:	d5e7      	bpl.n	8003dba <HAL_CRYPEx_AES+0x7a>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003dea:	6808      	ldr	r0, [r1, #0]
 8003dec:	f040 0280 	orr.w	r2, r0, #128	@ 0x80
 8003df0:	600a      	str	r2, [r1, #0]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8003df2:	68cb      	ldr	r3, [r1, #12]
 8003df4:	f844 3c10 	str.w	r3, [r4, #-16]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8003df8:	68c8      	ldr	r0, [r1, #12]
 8003dfa:	f844 0c0c 	str.w	r0, [r4, #-12]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8003dfe:	68ca      	ldr	r2, [r1, #12]
 8003e00:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8003e04:	68cb      	ldr	r3, [r1, #12]
 8003e06:	f844 3c04 	str.w	r3, [r4, #-4]
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8003e0a:	f896 005c 	ldrb.w	r0, [r6, #92]	@ 0x5c
 8003e0e:	2801      	cmp	r0, #1
 8003e10:	f109 0c10 	add.w	ip, r9, #16
 8003e14:	d07d      	beq.n	8003f12 <HAL_CRYPEx_AES+0x1d2>
  for(index=0U ; (index < Ilength); index += 16U)
 8003e16:	4567      	cmp	r7, ip
 8003e18:	f105 0510 	add.w	r5, r5, #16
 8003e1c:	f104 0410 	add.w	r4, r4, #16
 8003e20:	d951      	bls.n	8003ec6 <HAL_CRYPEx_AES+0x186>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8003e22:	46e1      	mov	r9, ip
 8003e24:	e7b5      	b.n	8003d92 <HAL_CRYPEx_AES+0x52>
      if (pOutputData == NULL)
 8003e26:	2c00      	cmp	r4, #0
 8003e28:	d059      	beq.n	8003ede <HAL_CRYPEx_AES+0x19e>
    __HAL_LOCK(hcryp);
 8003e2a:	f896 2054 	ldrb.w	r2, [r6, #84]	@ 0x54
 8003e2e:	2a01      	cmp	r2, #1
 8003e30:	d057      	beq.n	8003ee2 <HAL_CRYPEx_AES+0x1a2>
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003e32:	f04f 0e02 	mov.w	lr, #2
    __HAL_LOCK(hcryp);
 8003e36:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003e3a:	f886 e055 	strb.w	lr, [r6, #85]	@ 0x55
  tickstart = HAL_GetTick();
 8003e3e:	f7fe fefb 	bl	8002c38 <HAL_GetTick>
 8003e42:	f1b8 3fff 	cmp.w	r8, #4294967295
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003e46:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 8003e48:	4607      	mov	r7, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003e4a:	d15e      	bne.n	8003f0a <HAL_CRYPEx_AES+0x1ca>
 8003e4c:	685d      	ldr	r5, [r3, #4]
 8003e4e:	07e9      	lsls	r1, r5, #31
 8003e50:	d414      	bmi.n	8003e7c <HAL_CRYPEx_AES+0x13c>
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	07d1      	lsls	r1, r2, #31
 8003e56:	d411      	bmi.n	8003e7c <HAL_CRYPEx_AES+0x13c>
 8003e58:	6858      	ldr	r0, [r3, #4]
 8003e5a:	07c2      	lsls	r2, r0, #31
 8003e5c:	d40e      	bmi.n	8003e7c <HAL_CRYPEx_AES+0x13c>
 8003e5e:	685f      	ldr	r7, [r3, #4]
 8003e60:	07ff      	lsls	r7, r7, #31
 8003e62:	d40b      	bmi.n	8003e7c <HAL_CRYPEx_AES+0x13c>
 8003e64:	6859      	ldr	r1, [r3, #4]
 8003e66:	07cd      	lsls	r5, r1, #31
 8003e68:	d408      	bmi.n	8003e7c <HAL_CRYPEx_AES+0x13c>
 8003e6a:	685d      	ldr	r5, [r3, #4]
 8003e6c:	07e8      	lsls	r0, r5, #31
 8003e6e:	d405      	bmi.n	8003e7c <HAL_CRYPEx_AES+0x13c>
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	07d1      	lsls	r1, r2, #31
 8003e74:	d402      	bmi.n	8003e7c <HAL_CRYPEx_AES+0x13c>
 8003e76:	6858      	ldr	r0, [r3, #4]
 8003e78:	07c2      	lsls	r2, r0, #31
 8003e7a:	d5e7      	bpl.n	8003e4c <HAL_CRYPEx_AES+0x10c>
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003e7c:	681f      	ldr	r7, [r3, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003e7e:	68f1      	ldr	r1, [r6, #12]
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003e80:	f047 0580 	orr.w	r5, r7, #128	@ 0x80
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003e84:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003e88:	601d      	str	r5, [r3, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003e8a:	d110      	bne.n	8003eae <HAL_CRYPEx_AES+0x16e>
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8003e8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    outputaddr+=4U;
 8003e8e:	3410      	adds	r4, #16
 8003e90:	ba10      	rev	r0, r2
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8003e92:	f844 0c10 	str.w	r0, [r4, #-16]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR6);
 8003e96:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8003e98:	ba39      	rev	r1, r7
 8003e9a:	f844 1c0c 	str.w	r1, [r4, #-12]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR5);
 8003e9e:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8003ea0:	ba2a      	rev	r2, r5
 8003ea2:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR4);
 8003ea6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ea8:	ba07      	rev	r7, r0
 8003eaa:	f844 7c04 	str.w	r7, [r4, #-4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR3);
 8003eae:	69d9      	ldr	r1, [r3, #28]
 8003eb0:	ba0d      	rev	r5, r1
 8003eb2:	6025      	str	r5, [r4, #0]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR2);
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	ba10      	rev	r0, r2
 8003eb8:	6060      	str	r0, [r4, #4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR1);
 8003eba:	695f      	ldr	r7, [r3, #20]
 8003ebc:	ba39      	rev	r1, r7
 8003ebe:	60a1      	str	r1, [r4, #8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR0);
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	ba1d      	rev	r5, r3
 8003ec4:	60e5      	str	r5, [r4, #12]
    if (hcryp->State != HAL_CRYP_STATE_SUSPENDED)
 8003ec6:	f896 4055 	ldrb.w	r4, [r6, #85]	@ 0x55
 8003eca:	2c05      	cmp	r4, #5
      hcryp->State = HAL_CRYP_STATE_READY;
 8003ecc:	bf18      	it	ne
 8003ece:	2401      	movne	r4, #1
    __HAL_UNLOCK(hcryp);
 8003ed0:	f04f 0000 	mov.w	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 8003ed4:	bf18      	it	ne
 8003ed6:	f886 4055 	strbne.w	r4, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 8003eda:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
}
 8003ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hcryp);
 8003ee2:	2002      	movs	r0, #2
}
 8003ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((HAL_GetTick() - tickstart ) > Timeout)
 8003ee8:	f7fe fea6 	bl	8002c38 <HAL_GetTick>
 8003eec:	eba0 010a 	sub.w	r1, r0, sl
 8003ef0:	4588      	cmp	r8, r1
 8003ef2:	d31e      	bcc.n	8003f32 <HAL_CRYPEx_AES+0x1f2>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003ef4:	6831      	ldr	r1, [r6, #0]
 8003ef6:	684a      	ldr	r2, [r1, #4]
 8003ef8:	07d0      	lsls	r0, r2, #31
 8003efa:	d5f5      	bpl.n	8003ee8 <HAL_CRYPEx_AES+0x1a8>
 8003efc:	e775      	b.n	8003dea <HAL_CRYPEx_AES+0xaa>
      if((HAL_GetTick() - tickstart ) > Timeout)
 8003efe:	f7fe fe9b 	bl	8002c38 <HAL_GetTick>
 8003f02:	1bc3      	subs	r3, r0, r7
 8003f04:	4598      	cmp	r8, r3
 8003f06:	d314      	bcc.n	8003f32 <HAL_CRYPEx_AES+0x1f2>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003f08:	6833      	ldr	r3, [r6, #0]
 8003f0a:	6858      	ldr	r0, [r3, #4]
 8003f0c:	07c2      	lsls	r2, r0, #31
 8003f0e:	d5f6      	bpl.n	8003efe <HAL_CRYPEx_AES+0x1be>
 8003f10:	e7b4      	b.n	8003e7c <HAL_CRYPEx_AES+0x13c>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8003f12:	4567      	cmp	r7, ip
 8003f14:	d9d7      	bls.n	8003ec6 <HAL_CRYPEx_AES+0x186>
      hcryp->pCrypOutBuffPtr =  (uint8_t *)outputaddr;
 8003f16:	63f4      	str	r4, [r6, #60]	@ 0x3c
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8003f18:	f1a7 0410 	sub.w	r4, r7, #16
 8003f1c:	eba4 0709 	sub.w	r7, r4, r9
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8003f20:	2105      	movs	r1, #5
      hcryp->pCrypInBuffPtr  =  (uint8_t *)inputaddr;
 8003f22:	63b5      	str	r5, [r6, #56]	@ 0x38
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003f24:	2500      	movs	r5, #0
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8003f26:	6437      	str	r7, [r6, #64]	@ 0x40
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8003f28:	f886 1055 	strb.w	r1, [r6, #85]	@ 0x55
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003f2c:	f886 505c 	strb.w	r5, [r6, #92]	@ 0x5c
      return HAL_OK;
 8003f30:	e7c9      	b.n	8003ec6 <HAL_CRYPEx_AES+0x186>
    hcryp->State = HAL_CRYP_STATE_READY;
 8003f32:	2401      	movs	r4, #1
    __HAL_UNLOCK(hcryp);
 8003f34:	2100      	movs	r1, #0
    hcryp->State = HAL_CRYP_STATE_READY;
 8003f36:	f886 4055 	strb.w	r4, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 8003f3a:	f886 1054 	strb.w	r1, [r6, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003f3e:	2003      	movs	r0, #3
}
 8003f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003f44 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d051      	beq.n	8003fec <HAL_DMA_Init+0xa8>
{
 8003f48:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8004008 <HAL_DMA_Init+0xc4>)
 8003f4c:	6804      	ldr	r4, [r0, #0]
 8003f4e:	4294      	cmp	r4, r2
 8003f50:	4603      	mov	r3, r0
 8003f52:	d942      	bls.n	8003fda <HAL_DMA_Init+0x96>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f54:	492d      	ldr	r1, [pc, #180]	@ (800400c <HAL_DMA_Init+0xc8>)
 8003f56:	482e      	ldr	r0, [pc, #184]	@ (8004010 <HAL_DMA_Init+0xcc>)
 8003f58:	4421      	add	r1, r4
 8003f5a:	fba0 2501 	umull	r2, r5, r0, r1
 8003f5e:	092e      	lsrs	r6, r5, #4
    hdma->DmaBaseAddress = DMA2;
 8003f60:	4d2c      	ldr	r5, [pc, #176]	@ (8004014 <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f62:	00b1      	lsls	r1, r6, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f64:	2702      	movs	r7, #2
 8003f66:	f883 7025 	strb.w	r7, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f6a:	6822      	ldr	r2, [r4, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6c:	691f      	ldr	r7, [r3, #16]
 8003f6e:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f70:	f422 4cff 	bic.w	ip, r2, #32640	@ 0x7f80
  tmp |=  hdma->Init.Direction        |
 8003f74:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
 8003f78:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7a:	433a      	orrs	r2, r7
 8003f7c:	695f      	ldr	r7, [r3, #20]
 8003f7e:	6459      	str	r1, [r3, #68]	@ 0x44
 8003f80:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f82:	699f      	ldr	r7, [r3, #24]
 8003f84:	433a      	orrs	r2, r7
 8003f86:	69df      	ldr	r7, [r3, #28]
 8003f88:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f8a:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f8c:	f02c 0070 	bic.w	r0, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f90:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 8003f92:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f94:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 8003f98:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f9a:	d015      	beq.n	8003fc8 <HAL_DMA_Init+0x84>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f9c:	4f1e      	ldr	r7, [pc, #120]	@ (8004018 <HAL_DMA_Init+0xd4>)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f9e:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fa0:	f001 041c 	and.w	r4, r1, #28
 8003fa4:	210f      	movs	r1, #15
 8003fa6:	40a1      	lsls	r1, r4
    if (DMA1 == hdma->DmaBaseAddress)
 8003fa8:	42bd      	cmp	r5, r7
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003faa:	ea6f 0601 	mvn.w	r6, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fae:	fa00 f004 	lsl.w	r0, r0, r4
    if (DMA1 == hdma->DmaBaseAddress)
 8003fb2:	d01d      	beq.n	8003ff0 <HAL_DMA_Init+0xac>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fb4:	f8d7 54a8 	ldr.w	r5, [r7, #1192]	@ 0x4a8
 8003fb8:	402e      	ands	r6, r5
 8003fba:	f8c7 64a8 	str.w	r6, [r7, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fbe:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	@ 0x4a8
 8003fc2:	4302      	orrs	r2, r0
 8003fc4:	f8c7 24a8 	str.w	r2, [r7, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc8:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fca:	2601      	movs	r6, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fcc:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fce:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8003fd2:	f883 6025 	strb.w	r6, [r3, #37]	@ 0x25

  return HAL_OK;
}
 8003fd6:	bcf0      	pop	{r4, r5, r6, r7}
 8003fd8:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fda:	4f10      	ldr	r7, [pc, #64]	@ (800401c <HAL_DMA_Init+0xd8>)
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8004010 <HAL_DMA_Init+0xcc>)
    hdma->DmaBaseAddress = DMA1;
 8003fde:	4d0e      	ldr	r5, [pc, #56]	@ (8004018 <HAL_DMA_Init+0xd4>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fe0:	4427      	add	r7, r4
 8003fe2:	fba2 2007 	umull	r2, r0, r2, r7
 8003fe6:	0906      	lsrs	r6, r0, #4
 8003fe8:	00b1      	lsls	r1, r6, #2
    hdma->DmaBaseAddress = DMA1;
 8003fea:	e7bb      	b.n	8003f64 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8003fec:	2001      	movs	r0, #1
}
 8003fee:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ff0:	f8d5 40a8 	ldr.w	r4, [r5, #168]	@ 0xa8
 8003ff4:	4026      	ands	r6, r4
 8003ff6:	f8c5 60a8 	str.w	r6, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ffa:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8003ffe:	4301      	orrs	r1, r0
 8004000:	f8c5 10a8 	str.w	r1, [r5, #168]	@ 0xa8
 8004004:	e7e0      	b.n	8003fc8 <HAL_DMA_Init+0x84>
 8004006:	bf00      	nop
 8004008:	40020407 	.word	0x40020407
 800400c:	bffdfbf8 	.word	0xbffdfbf8
 8004010:	cccccccd 	.word	0xcccccccd
 8004014:	40020400 	.word	0x40020400
 8004018:	40020000 	.word	0x40020000
 800401c:	bffdfff8 	.word	0xbffdfff8

08004020 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004020:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004022:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8004026:	2c01      	cmp	r4, #1
 8004028:	d00b      	beq.n	8004042 <HAL_DMA_Start_IT+0x22>

  if (HAL_DMA_STATE_READY == hdma->State)
 800402a:	f890 6025 	ldrb.w	r6, [r0, #37]	@ 0x25
  __HAL_LOCK(hdma);
 800402e:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8004030:	2e01      	cmp	r6, #1
  __HAL_LOCK(hdma);
 8004032:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8004036:	fa5f fc86 	uxtb.w	ip, r6
 800403a:	d005      	beq.n	8004048 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403c:	2300      	movs	r3, #0
 800403e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8004042:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8004044:	bc70      	pop	{r4, r5, r6}
 8004046:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004048:	2502      	movs	r5, #2
 800404a:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800404e:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 8004050:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004052:	2600      	movs	r6, #0
 8004054:	63c6      	str	r6, [r0, #60]	@ 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004056:	f005 061c 	and.w	r6, r5, #28
 800405a:	fa0c f506 	lsl.w	r5, ip, r6
    __HAL_DMA_DISABLE(hdma);
 800405e:	6826      	ldr	r6, [r4, #0]
 8004060:	f026 0601 	bic.w	r6, r6, #1
 8004064:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004066:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8004068:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800406a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800406c:	6883      	ldr	r3, [r0, #8]
    if (NULL != hdma->XferHalfCpltCallback)
 800406e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004070:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004072:	bf0b      	itete	eq
 8004074:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004076:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004078:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800407a:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800407c:	b150      	cbz	r0, 8004094 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	f043 000e 	orr.w	r0, r3, #14
 8004084:	6020      	str	r0, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004086:	6821      	ldr	r1, [r4, #0]
 8004088:	f041 0201 	orr.w	r2, r1, #1
  HAL_StatusTypeDef status = HAL_OK;
 800408c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800408e:	6022      	str	r2, [r4, #0]
}
 8004090:	bc70      	pop	{r4, r5, r6}
 8004092:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004094:	6821      	ldr	r1, [r4, #0]
 8004096:	f021 0204 	bic.w	r2, r1, #4
 800409a:	6022      	str	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800409c:	6825      	ldr	r5, [r4, #0]
 800409e:	f045 060a 	orr.w	r6, r5, #10
 80040a2:	6026      	str	r6, [r4, #0]
 80040a4:	e7ef      	b.n	8004086 <HAL_DMA_Start_IT+0x66>
 80040a6:	bf00      	nop

080040a8 <HAL_DMA_IRQHandler>:
{
 80040a8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040aa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040ac:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80040ae:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040b0:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80040b2:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040b4:	f003 031c 	and.w	r3, r3, #28
 80040b8:	2204      	movs	r2, #4
 80040ba:	409a      	lsls	r2, r3
 80040bc:	420a      	tst	r2, r1
 80040be:	d00e      	beq.n	80040de <HAL_DMA_IRQHandler+0x36>
 80040c0:	f014 0f04 	tst.w	r4, #4
 80040c4:	d00b      	beq.n	80040de <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040c6:	6829      	ldr	r1, [r5, #0]
 80040c8:	068b      	lsls	r3, r1, #26
 80040ca:	d403      	bmi.n	80040d4 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	f023 0404 	bic.w	r4, r3, #4
 80040d2:	602c      	str	r4, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80040d4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80040d6:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80040d8:	b1cb      	cbz	r3, 800410e <HAL_DMA_IRQHandler+0x66>
}
 80040da:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80040dc:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80040de:	2202      	movs	r2, #2
 80040e0:	409a      	lsls	r2, r3
 80040e2:	420a      	tst	r2, r1
 80040e4:	d015      	beq.n	8004112 <HAL_DMA_IRQHandler+0x6a>
 80040e6:	f014 0f02 	tst.w	r4, #2
 80040ea:	d012      	beq.n	8004112 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ec:	682c      	ldr	r4, [r5, #0]
 80040ee:	06a1      	lsls	r1, r4, #26
 80040f0:	d406      	bmi.n	8004100 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040f2:	682b      	ldr	r3, [r5, #0]
 80040f4:	f023 010a 	bic.w	r1, r3, #10
 80040f8:	6029      	str	r1, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80040fa:	2501      	movs	r5, #1
 80040fc:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8004100:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004102:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8004104:	2400      	movs	r4, #0
 8004106:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e5      	bne.n	80040da <HAL_DMA_IRQHandler+0x32>
}
 800410e:	bc70      	pop	{r4, r5, r6}
 8004110:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004112:	2208      	movs	r2, #8
 8004114:	409a      	lsls	r2, r3
 8004116:	420a      	tst	r2, r1
 8004118:	d0f9      	beq.n	800410e <HAL_DMA_IRQHandler+0x66>
 800411a:	0722      	lsls	r2, r4, #28
 800411c:	d5f7      	bpl.n	800410e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800411e:	6829      	ldr	r1, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8004120:	6b42      	ldr	r2, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004122:	f021 040e 	bic.w	r4, r1, #14
 8004126:	602c      	str	r4, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004128:	2501      	movs	r5, #1
 800412a:	fa05 f303 	lsl.w	r3, r5, r3
    __HAL_UNLOCK(hdma);
 800412e:	2100      	movs	r1, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004130:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004132:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004134:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8004138:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 800413c:	2a00      	cmp	r2, #0
 800413e:	d0e6      	beq.n	800410e <HAL_DMA_IRQHandler+0x66>
}
 8004140:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004142:	4710      	bx	r2

08004144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004148:	680c      	ldr	r4, [r1, #0]
{
 800414a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800414c:	2c00      	cmp	r4, #0
 800414e:	f000 8092 	beq.w	8004276 <HAL_GPIO_Init+0x132>
  uint32_t position = 0x00u;
 8004152:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004154:	f04f 0b01 	mov.w	fp, #1
 8004158:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 800415c:	ea1e 0a04 	ands.w	sl, lr, r4
 8004160:	f000 8084 	beq.w	800426c <HAL_GPIO_Init+0x128>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004164:	684d      	ldr	r5, [r1, #4]
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004166:	2603      	movs	r6, #3
 8004168:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800416c:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004170:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004174:	1e56      	subs	r6, r2, #1
 8004176:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004178:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800417c:	d97e      	bls.n	800427c <HAL_GPIO_Init+0x138>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800417e:	2a03      	cmp	r2, #3
 8004180:	f040 80b9 	bne.w	80042f6 <HAL_GPIO_Init+0x1b2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004184:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8004188:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800418c:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004190:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004192:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004196:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004198:	d068      	beq.n	800426c <HAL_GPIO_Init+0x128>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419a:	4e6f      	ldr	r6, [pc, #444]	@ (8004358 <HAL_GPIO_Init+0x214>)
 800419c:	6e32      	ldr	r2, [r6, #96]	@ 0x60
 800419e:	f042 0701 	orr.w	r7, r2, #1
 80041a2:	6637      	str	r7, [r6, #96]	@ 0x60
 80041a4:	6e36      	ldr	r6, [r6, #96]	@ 0x60
 80041a6:	f023 0803 	bic.w	r8, r3, #3
 80041aa:	f006 0201 	and.w	r2, r6, #1
 80041ae:	9203      	str	r2, [sp, #12]
 80041b0:	f108 4980 	add.w	r9, r8, #1073741824	@ 0x40000000
 80041b4:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041b6:	f509 3280 	add.w	r2, r9, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041ba:	f003 0703 	and.w	r7, r3, #3
 80041be:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 80041c2:	f04f 0e0f 	mov.w	lr, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 80041c6:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041c8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041cc:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041d0:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041d4:	d026      	beq.n	8004224 <HAL_GPIO_Init+0xe0>
 80041d6:	4e61      	ldr	r6, [pc, #388]	@ (800435c <HAL_GPIO_Init+0x218>)
 80041d8:	42b0      	cmp	r0, r6
 80041da:	f000 809e 	beq.w	800431a <HAL_GPIO_Init+0x1d6>
 80041de:	4e60      	ldr	r6, [pc, #384]	@ (8004360 <HAL_GPIO_Init+0x21c>)
 80041e0:	42b0      	cmp	r0, r6
 80041e2:	f000 80a0 	beq.w	8004326 <HAL_GPIO_Init+0x1e2>
 80041e6:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8004368 <HAL_GPIO_Init+0x224>
 80041ea:	4540      	cmp	r0, r8
 80041ec:	f000 808f 	beq.w	800430e <HAL_GPIO_Init+0x1ca>
 80041f0:	f8df 9178 	ldr.w	r9, [pc, #376]	@ 800436c <HAL_GPIO_Init+0x228>
 80041f4:	4548      	cmp	r0, r9
 80041f6:	f000 80a2 	beq.w	800433e <HAL_GPIO_Init+0x1fa>
 80041fa:	f8df e174 	ldr.w	lr, [pc, #372]	@ 8004370 <HAL_GPIO_Init+0x22c>
 80041fe:	4570      	cmp	r0, lr
 8004200:	f000 80a3 	beq.w	800434a <HAL_GPIO_Init+0x206>
 8004204:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 8004374 <HAL_GPIO_Init+0x230>
 8004208:	4540      	cmp	r0, r8
 800420a:	f000 8092 	beq.w	8004332 <HAL_GPIO_Init+0x1ee>
 800420e:	f8df e168 	ldr.w	lr, [pc, #360]	@ 8004378 <HAL_GPIO_Init+0x234>
 8004212:	4570      	cmp	r0, lr
 8004214:	bf0c      	ite	eq
 8004216:	f04f 0e07 	moveq.w	lr, #7
 800421a:	f04f 0e08 	movne.w	lr, #8
 800421e:	fa0e f60c 	lsl.w	r6, lr, ip
 8004222:	4337      	orrs	r7, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004224:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004226:	4a4f      	ldr	r2, [pc, #316]	@ (8004364 <HAL_GPIO_Init+0x220>)
 8004228:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800422a:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800422c:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004230:	4e4c      	ldr	r6, [pc, #304]	@ (8004364 <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 8004232:	bf54      	ite	pl
 8004234:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004236:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 800423a:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800423c:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800423e:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004240:	4e48      	ldr	r6, [pc, #288]	@ (8004364 <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 8004242:	bf54      	ite	pl
 8004244:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004246:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 800424a:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800424c:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800424e:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8004250:	4e44      	ldr	r6, [pc, #272]	@ (8004364 <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 8004252:	bf54      	ite	pl
 8004254:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004256:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 800425a:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 800425c:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800425e:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8004260:	4d40      	ldr	r5, [pc, #256]	@ (8004364 <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 8004262:	bf54      	ite	pl
 8004264:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004266:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 800426a:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 800426c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800426e:	fa34 f203 	lsrs.w	r2, r4, r3
 8004272:	f47f af71 	bne.w	8004158 <HAL_GPIO_Init+0x14>
  }
}
 8004276:	b005      	add	sp, #20
 8004278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800427c:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004280:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004282:	ea08 0907 	and.w	r9, r8, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004286:	fa06 f60c 	lsl.w	r6, r6, ip
 800428a:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->OSPEEDR = temp;
 800428e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8004292:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004296:	ea29 060e 	bic.w	r6, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800429a:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800429e:	fa0e f803 	lsl.w	r8, lr, r3
 80042a2:	ea48 0906 	orr.w	r9, r8, r6
        GPIOx->OTYPER = temp;
 80042a6:	f8c0 9004 	str.w	r9, [r0, #4]
        temp = GPIOx->PUPDR;
 80042aa:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042ae:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042b0:	ea0e 0807 	and.w	r8, lr, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b4:	fa06 f60c 	lsl.w	r6, r6, ip
 80042b8:	ea46 0e08 	orr.w	lr, r6, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042bc:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80042be:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042c2:	f47f af5f 	bne.w	8004184 <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 80042c6:	08de      	lsrs	r6, r3, #3
 80042c8:	eb00 0886 	add.w	r8, r0, r6, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042cc:	f003 0607 	and.w	r6, r3, #7
 80042d0:	ea4f 0e86 	mov.w	lr, r6, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042d4:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 80042d6:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042da:	fa06 f60e 	lsl.w	r6, r6, lr
 80042de:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042e0:	260f      	movs	r6, #15
 80042e2:	fa06 f60e 	lsl.w	r6, r6, lr
 80042e6:	ea29 0e06 	bic.w	lr, r9, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042ea:	9e01      	ldr	r6, [sp, #4]
 80042ec:	ea46 0e0e 	orr.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 80042f0:	f8c8 e020 	str.w	lr, [r8, #32]
 80042f4:	e746      	b.n	8004184 <HAL_GPIO_Init+0x40>
        temp = GPIOx->PUPDR;
 80042f6:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042fa:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042fc:	ea08 0907 	and.w	r9, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004300:	fa06 f60c 	lsl.w	r6, r6, ip
 8004304:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->PUPDR = temp;
 8004308:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800430c:	e73a      	b.n	8004184 <HAL_GPIO_Init+0x40>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800430e:	f04f 0e03 	mov.w	lr, #3
 8004312:	fa0e f60c 	lsl.w	r6, lr, ip
 8004316:	4337      	orrs	r7, r6
 8004318:	e784      	b.n	8004224 <HAL_GPIO_Init+0xe0>
 800431a:	f04f 0e01 	mov.w	lr, #1
 800431e:	fa0e f60c 	lsl.w	r6, lr, ip
 8004322:	4337      	orrs	r7, r6
 8004324:	e77e      	b.n	8004224 <HAL_GPIO_Init+0xe0>
 8004326:	f04f 0e02 	mov.w	lr, #2
 800432a:	fa0e f60c 	lsl.w	r6, lr, ip
 800432e:	4337      	orrs	r7, r6
 8004330:	e778      	b.n	8004224 <HAL_GPIO_Init+0xe0>
 8004332:	f04f 0e06 	mov.w	lr, #6
 8004336:	fa0e f60c 	lsl.w	r6, lr, ip
 800433a:	4337      	orrs	r7, r6
 800433c:	e772      	b.n	8004224 <HAL_GPIO_Init+0xe0>
 800433e:	f04f 0e04 	mov.w	lr, #4
 8004342:	fa0e f60c 	lsl.w	r6, lr, ip
 8004346:	4337      	orrs	r7, r6
 8004348:	e76c      	b.n	8004224 <HAL_GPIO_Init+0xe0>
 800434a:	f04f 0e05 	mov.w	lr, #5
 800434e:	fa0e f60c 	lsl.w	r6, lr, ip
 8004352:	4337      	orrs	r7, r6
 8004354:	e766      	b.n	8004224 <HAL_GPIO_Init+0xe0>
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	48000400 	.word	0x48000400
 8004360:	48000800 	.word	0x48000800
 8004364:	40010400 	.word	0x40010400
 8004368:	48000c00 	.word	0x48000c00
 800436c:	48001000 	.word	0x48001000
 8004370:	48001400 	.word	0x48001400
 8004374:	48001800 	.word	0x48001800
 8004378:	48001c00 	.word	0x48001c00

0800437c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800437c:	b10a      	cbz	r2, 8004382 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800437e:	6181      	str	r1, [r0, #24]
 8004380:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004382:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop

08004388 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004388:	4a04      	ldr	r2, [pc, #16]	@ (800439c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800438a:	6951      	ldr	r1, [r2, #20]
 800438c:	4201      	tst	r1, r0
 800438e:	d100      	bne.n	8004392 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004390:	4770      	bx	lr
{
 8004392:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004394:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004396:	f7fc fccb 	bl	8000d30 <HAL_GPIO_EXTI_Callback>
  }
}
 800439a:	bd08      	pop	{r3, pc}
 800439c:	40010400 	.word	0x40010400

080043a0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043a0:	4b02      	ldr	r3, [pc, #8]	@ (80043ac <HAL_PWREx_GetVoltageRange+0xc>)
 80043a2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80043a4:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40007000 	.word	0x40007000

080043b0 <HAL_PWREx_ControlVoltageScaling>:
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b0:	4a3d      	ldr	r2, [pc, #244]	@ (80044a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80043b2:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b4:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b8:	f403 61c0 	and.w	r1, r3, #1536	@ 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043bc:	d00a      	beq.n	80043d4 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80043be:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80043c2:	d005      	beq.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043c4:	6810      	ldr	r0, [r2, #0]
 80043c6:	f420 6cc0 	bic.w	ip, r0, #1536	@ 0x600
 80043ca:	f44c 6380 	orr.w	r3, ip, #1024	@ 0x400
 80043ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043d0:	2000      	movs	r0, #0
 80043d2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043d4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80043d8:	d0fa      	beq.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043da:	6810      	ldr	r0, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043dc:	4933      	ldr	r1, [pc, #204]	@ (80044ac <HAL_PWREx_ControlVoltageScaling+0xfc>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043de:	f420 6cc0 	bic.w	ip, r0, #1536	@ 0x600
 80043e2:	f44c 7300 	orr.w	r3, ip, #512	@ 0x200
 80043e6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043e8:	680b      	ldr	r3, [r1, #0]
 80043ea:	4931      	ldr	r1, [pc, #196]	@ (80044b0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80043ec:	2032      	movs	r0, #50	@ 0x32
 80043ee:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f2:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043f4:	fba1 1303 	umull	r1, r3, r1, r3
 80043f8:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fa:	0541      	lsls	r1, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043fc:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004400:	d54c      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 8004402:	f013 0107 	ands.w	r1, r3, #7
 8004406:	d02f      	beq.n	8004468 <HAL_PWREx_ControlVoltageScaling+0xb8>
 8004408:	2901      	cmp	r1, #1
 800440a:	d027      	beq.n	800445c <HAL_PWREx_ControlVoltageScaling+0xac>
 800440c:	2902      	cmp	r1, #2
 800440e:	d020      	beq.n	8004452 <HAL_PWREx_ControlVoltageScaling+0xa2>
 8004410:	2903      	cmp	r1, #3
 8004412:	d019      	beq.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004414:	2904      	cmp	r1, #4
 8004416:	d012      	beq.n	800443e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8004418:	2905      	cmp	r1, #5
 800441a:	d00b      	beq.n	8004434 <HAL_PWREx_ControlVoltageScaling+0x84>
 800441c:	2906      	cmp	r1, #6
 800441e:	d004      	beq.n	800442a <HAL_PWREx_ControlVoltageScaling+0x7a>
 8004420:	6950      	ldr	r0, [r2, #20]
 8004422:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 8004424:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004428:	d538      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 800442a:	6951      	ldr	r1, [r2, #20]
 800442c:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 800442e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004432:	d533      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 8004434:	6950      	ldr	r0, [r2, #20]
 8004436:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 8004438:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800443c:	d52e      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 800443e:	6951      	ldr	r1, [r2, #20]
 8004440:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 8004442:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004446:	d529      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 8004448:	6950      	ldr	r0, [r2, #20]
 800444a:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 800444c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004450:	d524      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 8004452:	6951      	ldr	r1, [r2, #20]
 8004454:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 8004456:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800445a:	d51f      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 800445c:	6950      	ldr	r0, [r2, #20]
 800445e:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 8004460:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004464:	d51a      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 8004466:	b1cb      	cbz	r3, 800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 8004468:	6951      	ldr	r1, [r2, #20]
 800446a:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 800446c:	f1a3 0308 	sub.w	r3, r3, #8
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004470:	d514      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 8004472:	6950      	ldr	r0, [r2, #20]
 8004474:	0541      	lsls	r1, r0, #21
 8004476:	d511      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 8004478:	6951      	ldr	r1, [r2, #20]
 800447a:	0548      	lsls	r0, r1, #21
 800447c:	d50e      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 800447e:	6950      	ldr	r0, [r2, #20]
 8004480:	0541      	lsls	r1, r0, #21
 8004482:	d50b      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 8004484:	6951      	ldr	r1, [r2, #20]
 8004486:	0548      	lsls	r0, r1, #21
 8004488:	d508      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 800448a:	6950      	ldr	r0, [r2, #20]
 800448c:	0541      	lsls	r1, r0, #21
 800448e:	d505      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 8004490:	6951      	ldr	r1, [r2, #20]
 8004492:	0548      	lsls	r0, r1, #21
 8004494:	d502      	bpl.n	800449c <HAL_PWREx_ControlVoltageScaling+0xec>
 8004496:	6950      	ldr	r0, [r2, #20]
 8004498:	0541      	lsls	r1, r0, #21
 800449a:	d4e4      	bmi.n	8004466 <HAL_PWREx_ControlVoltageScaling+0xb6>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800449c:	4a02      	ldr	r2, [pc, #8]	@ (80044a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800449e:	6953      	ldr	r3, [r2, #20]
 80044a0:	0558      	lsls	r0, r3, #21
 80044a2:	d595      	bpl.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 80044a4:	2003      	movs	r0, #3
}
 80044a6:	4770      	bx	lr
 80044a8:	40007000 	.word	0x40007000
 80044ac:	20000400 	.word	0x20000400
 80044b0:	431bde83 	.word	0x431bde83

080044b4 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80044b4:	4a02      	ldr	r2, [pc, #8]	@ (80044c0 <HAL_PWREx_EnableVddIO2+0xc>)
 80044b6:	6853      	ldr	r3, [r2, #4]
 80044b8:	f443 7000 	orr.w	r0, r3, #512	@ 0x200
 80044bc:	6050      	str	r0, [r2, #4]
}
 80044be:	4770      	bx	lr
 80044c0:	40007000 	.word	0x40007000

080044c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044c4:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044c6:	4d20      	ldr	r5, [pc, #128]	@ (8004548 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 80044c8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80044ca:	00db      	lsls	r3, r3, #3
{
 80044cc:	b083      	sub	sp, #12
 80044ce:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044d0:	d51a      	bpl.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044d2:	f7ff ff65 	bl	80043a0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044d6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80044da:	d027      	beq.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044dc:	2c80      	cmp	r4, #128	@ 0x80
 80044de:	d82c      	bhi.n	800453a <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044e0:	d02f      	beq.n	8004542 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044e2:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 80044e6:	fab4 f484 	clz	r4, r4
 80044ea:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044ec:	4d17      	ldr	r5, [pc, #92]	@ (800454c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80044ee:	6828      	ldr	r0, [r5, #0]
 80044f0:	f020 0307 	bic.w	r3, r0, #7
 80044f4:	4323      	orrs	r3, r4
 80044f6:	602b      	str	r3, [r5, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044f8:	6829      	ldr	r1, [r5, #0]
 80044fa:	f001 0207 	and.w	r2, r1, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80044fe:	1b10      	subs	r0, r2, r4
 8004500:	bf18      	it	ne
 8004502:	2001      	movne	r0, #1
 8004504:	b003      	add	sp, #12
 8004506:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800450a:	f040 5180 	orr.w	r1, r0, #268435456	@ 0x10000000
 800450e:	65a9      	str	r1, [r5, #88]	@ 0x58
 8004510:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 8004512:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800451a:	f7ff ff41 	bl	80043a0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004520:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8004524:	f021 5280 	bic.w	r2, r1, #268435456	@ 0x10000000
 8004528:	65aa      	str	r2, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800452a:	d1d7      	bne.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 800452c:	2c80      	cmp	r4, #128	@ 0x80
 800452e:	d906      	bls.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004530:	2ca1      	cmp	r4, #161	@ 0xa1
 8004532:	bf34      	ite	cc
 8004534:	2401      	movcc	r4, #1
 8004536:	2402      	movcs	r4, #2
 8004538:	e7d8      	b.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 800453a:	2403      	movs	r4, #3
 800453c:	e7d6      	b.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800453e:	2400      	movs	r4, #0
 8004540:	e7d4      	b.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004542:	2402      	movs	r4, #2
 8004544:	e7d2      	b.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x28>
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	40022000 	.word	0x40022000

08004550 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004550:	4a28      	ldr	r2, [pc, #160]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004552:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004554:	68d0      	ldr	r0, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004556:	f013 030c 	ands.w	r3, r3, #12
 800455a:	d005      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x18>
 800455c:	2b0c      	cmp	r3, #12
 800455e:	d035      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004560:	2b04      	cmp	r3, #4
 8004562:	d141      	bne.n	80045e8 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8004564:	4824      	ldr	r0, [pc, #144]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004566:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004568:	4a22      	ldr	r2, [pc, #136]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800456a:	6810      	ldr	r0, [r2, #0]
 800456c:	0701      	lsls	r1, r0, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800456e:	bf54      	ite	pl
 8004570:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004574:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8004576:	4921      	ldr	r1, [pc, #132]	@ (80045fc <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004578:	bf54      	ite	pl
 800457a:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800457e:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8004582:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004586:	b303      	cbz	r3, 80045ca <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004588:	2b0c      	cmp	r3, #12
 800458a:	d11d      	bne.n	80045c8 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800458c:	4b19      	ldr	r3, [pc, #100]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	f002 0303 	and.w	r3, r2, #3
    switch (pllsource)
 8004594:	2b02      	cmp	r3, #2
 8004596:	d025      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x94>
 8004598:	4919      	ldr	r1, [pc, #100]	@ (8004600 <HAL_RCC_GetSysClockFreq+0xb0>)
 800459a:	2b03      	cmp	r3, #3
 800459c:	bf18      	it	ne
 800459e:	4601      	movne	r1, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045a0:	4b14      	ldr	r3, [pc, #80]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045a2:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045a4:	68d8      	ldr	r0, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80045ac:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045ae:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045b2:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045b6:	fb01 f000 	mul.w	r0, r1, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045ba:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045bc:	0059      	lsls	r1, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045be:	fbb0 fcf2 	udiv	ip, r0, r2
    sysclockfreq = pllvco / pllr;
 80045c2:	fbbc f0f1 	udiv	r0, ip, r1
 80045c6:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045c8:	2000      	movs	r0, #0
}
 80045ca:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045cc:	f000 0103 	and.w	r1, r0, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045d0:	2901      	cmp	r1, #1
 80045d2:	d0c9      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045d4:	4b07      	ldr	r3, [pc, #28]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	f002 0303 	and.w	r3, r2, #3
    switch (pllsource)
 80045dc:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045de:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 80045e2:	d1d9      	bne.n	8004598 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 80045e4:	4904      	ldr	r1, [pc, #16]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80045e6:	e7db      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	4805      	ldr	r0, [pc, #20]	@ (8004600 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045ec:	bf18      	it	ne
 80045ee:	2000      	movne	r0, #0
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	08009df0 	.word	0x08009df0
 8004600:	007a1200 	.word	0x007a1200

08004604 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004604:	2800      	cmp	r0, #0
 8004606:	f000 8230 	beq.w	8004a6a <HAL_RCC_OscConfig+0x466>
{
 800460a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460e:	4a93      	ldr	r2, [pc, #588]	@ (800485c <HAL_RCC_OscConfig+0x258>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004610:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004612:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004614:	68d6      	ldr	r6, [r2, #12]
 8004616:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004618:	06d8      	lsls	r0, r3, #27
{
 800461a:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004620:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004624:	d52e      	bpl.n	8004684 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004626:	2d00      	cmp	r5, #0
 8004628:	f000 8121 	beq.w	800486e <HAL_RCC_OscConfig+0x26a>
 800462c:	2d0c      	cmp	r5, #12
 800462e:	f000 811b 	beq.w	8004868 <HAL_RCC_OscConfig+0x264>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004632:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8004634:	4f89      	ldr	r7, [pc, #548]	@ (800485c <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 8192 	beq.w	8004960 <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_MSI_ENABLE();
 800463c:	6838      	ldr	r0, [r7, #0]
 800463e:	f040 0101 	orr.w	r1, r0, #1
 8004642:	6039      	str	r1, [r7, #0]
        tickstart = HAL_GetTick();
 8004644:	f7fe faf8 	bl	8002c38 <HAL_GetTick>
 8004648:	4681      	mov	r9, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800464a:	e006      	b.n	800465a <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800464c:	f7fe faf4 	bl	8002c38 <HAL_GetTick>
 8004650:	eba0 0009 	sub.w	r0, r0, r9
 8004654:	2802      	cmp	r0, #2
 8004656:	f200 8193 	bhi.w	8004980 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	0793      	lsls	r3, r2, #30
 800465e:	d5f5      	bpl.n	800464c <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f043 0008 	orr.w	r0, r3, #8
 8004666:	6038      	str	r0, [r7, #0]
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	6a22      	ldr	r2, [r4, #32]
 800466c:	f021 03f0 	bic.w	r3, r1, #240	@ 0xf0
 8004670:	4313      	orrs	r3, r2
 8004672:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	69e3      	ldr	r3, [r4, #28]
 8004678:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
 800467c:	ea41 2203 	orr.w	r2, r1, r3, lsl #8
 8004680:	607a      	str	r2, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	07d9      	lsls	r1, r3, #31
 8004686:	f100 80bf 	bmi.w	8004808 <HAL_RCC_OscConfig+0x204>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468a:	0799      	lsls	r1, r3, #30
 800468c:	d523      	bpl.n	80046d6 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800468e:	2d04      	cmp	r5, #4
 8004690:	f000 8156 	beq.w	8004940 <HAL_RCC_OscConfig+0x33c>
 8004694:	2d0c      	cmp	r5, #12
 8004696:	f000 8150 	beq.w	800493a <HAL_RCC_OscConfig+0x336>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800469a:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800469c:	4e6f      	ldr	r6, [pc, #444]	@ (800485c <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8189 	beq.w	80049b6 <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_ENABLE();
 80046a4:	6830      	ldr	r0, [r6, #0]
 80046a6:	f440 7280 	orr.w	r2, r0, #256	@ 0x100
 80046aa:	6032      	str	r2, [r6, #0]
        tickstart = HAL_GetTick();
 80046ac:	f7fe fac4 	bl	8002c38 <HAL_GetTick>
 80046b0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b2:	e005      	b.n	80046c0 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b4:	f7fe fac0 	bl	8002c38 <HAL_GetTick>
 80046b8:	1bc2      	subs	r2, r0, r7
 80046ba:	2a02      	cmp	r2, #2
 80046bc:	f200 8160 	bhi.w	8004980 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c0:	6831      	ldr	r1, [r6, #0]
 80046c2:	054b      	lsls	r3, r1, #21
 80046c4:	d5f6      	bpl.n	80046b4 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c6:	6877      	ldr	r7, [r6, #4]
 80046c8:	6920      	ldr	r0, [r4, #16]
 80046ca:	f027 48fe 	bic.w	r8, r7, #2130706432	@ 0x7f000000
 80046ce:	ea48 6300 	orr.w	r3, r8, r0, lsl #24
 80046d2:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	0719      	lsls	r1, r3, #28
 80046d8:	d519      	bpl.n	800470e <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046da:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80046dc:	4e5f      	ldr	r6, [pc, #380]	@ (800485c <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8117 	beq.w	8004912 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 80046e4:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	f8c6 2094 	str.w	r2, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80046f0:	f7fe faa2 	bl	8002c38 <HAL_GetTick>
 80046f4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046f6:	e005      	b.n	8004704 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f8:	f7fe fa9e 	bl	8002c38 <HAL_GetTick>
 80046fc:	1bc0      	subs	r0, r0, r7
 80046fe:	2802      	cmp	r0, #2
 8004700:	f200 813e 	bhi.w	8004980 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004704:	f8d6 1094 	ldr.w	r1, [r6, #148]	@ 0x94
 8004708:	078a      	lsls	r2, r1, #30
 800470a:	d5f5      	bpl.n	80046f8 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	075f      	lsls	r7, r3, #29
 8004710:	d53f      	bpl.n	8004792 <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004712:	4f52      	ldr	r7, [pc, #328]	@ (800485c <HAL_RCC_OscConfig+0x258>)
 8004714:	6dbe      	ldr	r6, [r7, #88]	@ 0x58
 8004716:	00f6      	lsls	r6, r6, #3
 8004718:	f100 814b 	bmi.w	80049b2 <HAL_RCC_OscConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 800471c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800471e:	f040 5380 	orr.w	r3, r0, #268435456	@ 0x10000000
 8004722:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004724:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004726:	f002 5180 	and.w	r1, r2, #268435456	@ 0x10000000
 800472a:	9101      	str	r1, [sp, #4]
 800472c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800472e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004730:	4f4b      	ldr	r7, [pc, #300]	@ (8004860 <HAL_RCC_OscConfig+0x25c>)
 8004732:	6838      	ldr	r0, [r7, #0]
 8004734:	05c0      	lsls	r0, r0, #23
 8004736:	f140 819a 	bpl.w	8004a6e <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800473a:	68a0      	ldr	r0, [r4, #8]
 800473c:	2801      	cmp	r0, #1
 800473e:	f000 814c 	beq.w	80049da <HAL_RCC_OscConfig+0x3d6>
 8004742:	2805      	cmp	r0, #5
 8004744:	f000 81c2 	beq.w	8004acc <HAL_RCC_OscConfig+0x4c8>
 8004748:	4f44      	ldr	r7, [pc, #272]	@ (800485c <HAL_RCC_OscConfig+0x258>)
 800474a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800474e:	f023 0201 	bic.w	r2, r3, #1
 8004752:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004756:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800475a:	f021 0304 	bic.w	r3, r1, #4
 800475e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004762:	2800      	cmp	r0, #0
 8004764:	f040 8140 	bne.w	80049e8 <HAL_RCC_OscConfig+0x3e4>
      tickstart = HAL_GetTick();
 8004768:	f7fe fa66 	bl	8002c38 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476c:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004770:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004772:	e006      	b.n	8004782 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004774:	f7fe fa60 	bl	8002c38 <HAL_GetTick>
 8004778:	eba0 0208 	sub.w	r2, r0, r8
 800477c:	454a      	cmp	r2, r9
 800477e:	f200 80ff 	bhi.w	8004980 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004782:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8004786:	0783      	lsls	r3, r0, #30
 8004788:	d4f4      	bmi.n	8004774 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 800478a:	2e00      	cmp	r6, #0
 800478c:	f040 8181 	bne.w	8004a92 <HAL_RCC_OscConfig+0x48e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	069e      	lsls	r6, r3, #26
 8004794:	d518      	bpl.n	80047c8 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004796:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8004798:	4e30      	ldr	r6, [pc, #192]	@ (800485c <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800479a:	2800      	cmp	r0, #0
 800479c:	f000 8151 	beq.w	8004a42 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_ENABLE();
 80047a0:	f8d6 0098 	ldr.w	r0, [r6, #152]	@ 0x98
 80047a4:	f040 0201 	orr.w	r2, r0, #1
 80047a8:	f8c6 2098 	str.w	r2, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80047ac:	f7fe fa44 	bl	8002c38 <HAL_GetTick>
 80047b0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047b2:	e005      	b.n	80047c0 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047b4:	f7fe fa40 	bl	8002c38 <HAL_GetTick>
 80047b8:	1bc2      	subs	r2, r0, r7
 80047ba:	2a02      	cmp	r2, #2
 80047bc:	f200 80e0 	bhi.w	8004980 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047c0:	f8d6 1098 	ldr.w	r1, [r6, #152]	@ 0x98
 80047c4:	0788      	lsls	r0, r1, #30
 80047c6:	d5f5      	bpl.n	80047b4 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80047ca:	b1de      	cbz	r6, 8004804 <HAL_RCC_OscConfig+0x200>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047cc:	2e02      	cmp	r6, #2
 80047ce:	f000 818b 	beq.w	8004ae8 <HAL_RCC_OscConfig+0x4e4>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047d2:	2d0c      	cmp	r5, #12
 80047d4:	f000 808d 	beq.w	80048f2 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_PLL_DISABLE();
 80047d8:	4c20      	ldr	r4, [pc, #128]	@ (800485c <HAL_RCC_OscConfig+0x258>)
 80047da:	6825      	ldr	r5, [r4, #0]
 80047dc:	f025 7780 	bic.w	r7, r5, #16777216	@ 0x1000000
 80047e0:	6027      	str	r7, [r4, #0]
        tickstart = HAL_GetTick();
 80047e2:	f7fe fa29 	bl	8002c38 <HAL_GetTick>
 80047e6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e8:	e005      	b.n	80047f6 <HAL_RCC_OscConfig+0x1f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ea:	f7fe fa25 	bl	8002c38 <HAL_GetTick>
 80047ee:	1b81      	subs	r1, r0, r6
 80047f0:	2902      	cmp	r1, #2
 80047f2:	f200 80c5 	bhi.w	8004980 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	019b      	lsls	r3, r3, #6
 80047fa:	d4f6      	bmi.n	80047ea <HAL_RCC_OscConfig+0x1e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047fc:	68e0      	ldr	r0, [r4, #12]
 80047fe:	4a19      	ldr	r2, [pc, #100]	@ (8004864 <HAL_RCC_OscConfig+0x260>)
 8004800:	4002      	ands	r2, r0
 8004802:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8004804:	2000      	movs	r0, #0
 8004806:	e075      	b.n	80048f4 <HAL_RCC_OscConfig+0x2f0>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004808:	2d08      	cmp	r5, #8
 800480a:	d078      	beq.n	80048fe <HAL_RCC_OscConfig+0x2fa>
 800480c:	2d0c      	cmp	r5, #12
 800480e:	d074      	beq.n	80048fa <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004810:	6861      	ldr	r1, [r4, #4]
 8004812:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004816:	f000 80b7 	beq.w	8004988 <HAL_RCC_OscConfig+0x384>
 800481a:	f5b1 2fa0 	cmp.w	r1, #327680	@ 0x50000
 800481e:	f000 8144 	beq.w	8004aaa <HAL_RCC_OscConfig+0x4a6>
 8004822:	4f0e      	ldr	r7, [pc, #56]	@ (800485c <HAL_RCC_OscConfig+0x258>)
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	f422 3380 	bic.w	r3, r2, #65536	@ 0x10000
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	6838      	ldr	r0, [r7, #0]
 800482e:	f420 2280 	bic.w	r2, r0, #262144	@ 0x40000
 8004832:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004834:	2900      	cmp	r1, #0
 8004836:	f040 80ac 	bne.w	8004992 <HAL_RCC_OscConfig+0x38e>
        tickstart = HAL_GetTick();
 800483a:	f7fe f9fd 	bl	8002c38 <HAL_GetTick>
 800483e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004840:	e006      	b.n	8004850 <HAL_RCC_OscConfig+0x24c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004842:	f7fe f9f9 	bl	8002c38 <HAL_GetTick>
 8004846:	eba0 0308 	sub.w	r3, r0, r8
 800484a:	2b64      	cmp	r3, #100	@ 0x64
 800484c:	f200 8098 	bhi.w	8004980 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	0388      	lsls	r0, r1, #14
 8004854:	d4f5      	bmi.n	8004842 <HAL_RCC_OscConfig+0x23e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	e717      	b.n	800468a <HAL_RCC_OscConfig+0x86>
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	40007000 	.word	0x40007000
 8004864:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004868:	2e01      	cmp	r6, #1
 800486a:	f47f aee2 	bne.w	8004632 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800486e:	4fac      	ldr	r7, [pc, #688]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 8004870:	6839      	ldr	r1, [r7, #0]
 8004872:	0789      	lsls	r1, r1, #30
 8004874:	d43a      	bmi.n	80048ec <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004876:	4faa      	ldr	r7, [pc, #680]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 8004878:	6a20      	ldr	r0, [r4, #32]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	0712      	lsls	r2, r2, #28
 800487e:	bf56      	itet	pl
 8004880:	f8d7 7094 	ldrpl.w	r7, [r7, #148]	@ 0x94
 8004884:	683f      	ldrmi	r7, [r7, #0]
 8004886:	093f      	lsrpl	r7, r7, #4
 8004888:	f007 01f0 	and.w	r1, r7, #240	@ 0xf0
 800488c:	4288      	cmp	r0, r1
 800488e:	f200 80c0 	bhi.w	8004a12 <HAL_RCC_OscConfig+0x40e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004892:	4ba3      	ldr	r3, [pc, #652]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 8004894:	681f      	ldr	r7, [r3, #0]
 8004896:	f047 0208 	orr.w	r2, r7, #8
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	6819      	ldr	r1, [r3, #0]
 800489e:	f021 07f0 	bic.w	r7, r1, #240	@ 0xf0
 80048a2:	4307      	orrs	r7, r0
 80048a4:	601f      	str	r7, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	69e1      	ldr	r1, [r4, #28]
 80048aa:	f422 477f 	bic.w	r7, r2, #65280	@ 0xff00
 80048ae:	ea47 2201 	orr.w	r2, r7, r1, lsl #8
 80048b2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048b4:	2d00      	cmp	r5, #0
 80048b6:	f000 80f2 	beq.w	8004a9e <HAL_RCC_OscConfig+0x49a>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ba:	f7ff fe49 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 80048be:	4b98      	ldr	r3, [pc, #608]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 80048c0:	4a98      	ldr	r2, [pc, #608]	@ (8004b24 <HAL_RCC_OscConfig+0x520>)
 80048c2:	689f      	ldr	r7, [r3, #8]
 80048c4:	f3c7 1103 	ubfx	r1, r7, #4, #4
 80048c8:	4f97      	ldr	r7, [pc, #604]	@ (8004b28 <HAL_RCC_OscConfig+0x524>)
 80048ca:	f812 8001 	ldrb.w	r8, [r2, r1]
 80048ce:	f008 091f 	and.w	r9, r8, #31
 80048d2:	fa20 f309 	lsr.w	r3, r0, r9
        status = HAL_InitTick(uwTickPrio);
 80048d6:	4895      	ldr	r0, [pc, #596]	@ (8004b2c <HAL_RCC_OscConfig+0x528>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048d8:	603b      	str	r3, [r7, #0]
        status = HAL_InitTick(uwTickPrio);
 80048da:	6800      	ldr	r0, [r0, #0]
 80048dc:	f7fe f96a 	bl	8002bb4 <HAL_InitTick>
        if(status != HAL_OK)
 80048e0:	b940      	cbnz	r0, 80048f4 <HAL_RCC_OscConfig+0x2f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	07d9      	lsls	r1, r3, #31
 80048e6:	f57f aed0 	bpl.w	800468a <HAL_RCC_OscConfig+0x86>
 80048ea:	e78d      	b.n	8004808 <HAL_RCC_OscConfig+0x204>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048ec:	69a3      	ldr	r3, [r4, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1c1      	bne.n	8004876 <HAL_RCC_OscConfig+0x272>
    return HAL_ERROR;
 80048f2:	2001      	movs	r0, #1
}
 80048f4:	b003      	add	sp, #12
 80048f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048fa:	2e03      	cmp	r6, #3
 80048fc:	d188      	bne.n	8004810 <HAL_RCC_OscConfig+0x20c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fe:	4a88      	ldr	r2, [pc, #544]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 8004900:	6811      	ldr	r1, [r2, #0]
 8004902:	038a      	lsls	r2, r1, #14
 8004904:	f57f aec1 	bpl.w	800468a <HAL_RCC_OscConfig+0x86>
 8004908:	6867      	ldr	r7, [r4, #4]
 800490a:	2f00      	cmp	r7, #0
 800490c:	f47f aebd 	bne.w	800468a <HAL_RCC_OscConfig+0x86>
 8004910:	e7ef      	b.n	80048f2 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_DISABLE();
 8004912:	f8d6 7094 	ldr.w	r7, [r6, #148]	@ 0x94
 8004916:	f027 0201 	bic.w	r2, r7, #1
 800491a:	f8c6 2094 	str.w	r2, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800491e:	f7fe f98b 	bl	8002c38 <HAL_GetTick>
 8004922:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004924:	e004      	b.n	8004930 <HAL_RCC_OscConfig+0x32c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004926:	f7fe f987 	bl	8002c38 <HAL_GetTick>
 800492a:	1bc0      	subs	r0, r0, r7
 800492c:	2802      	cmp	r0, #2
 800492e:	d827      	bhi.n	8004980 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004930:	f8d6 1094 	ldr.w	r1, [r6, #148]	@ 0x94
 8004934:	078b      	lsls	r3, r1, #30
 8004936:	d4f6      	bmi.n	8004926 <HAL_RCC_OscConfig+0x322>
 8004938:	e6e8      	b.n	800470c <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800493a:	2e02      	cmp	r6, #2
 800493c:	f47f aead 	bne.w	800469a <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004940:	4e77      	ldr	r6, [pc, #476]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 8004942:	6831      	ldr	r1, [r6, #0]
 8004944:	054a      	lsls	r2, r1, #21
 8004946:	d502      	bpl.n	800494e <HAL_RCC_OscConfig+0x34a>
 8004948:	68e0      	ldr	r0, [r4, #12]
 800494a:	2800      	cmp	r0, #0
 800494c:	d0d1      	beq.n	80048f2 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494e:	4f74      	ldr	r7, [pc, #464]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 8004950:	6921      	ldr	r1, [r4, #16]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	f022 46fe 	bic.w	r6, r2, #2130706432	@ 0x7f000000
 8004958:	ea46 6001 	orr.w	r0, r6, r1, lsl #24
 800495c:	6078      	str	r0, [r7, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800495e:	e6ba      	b.n	80046d6 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8004960:	6838      	ldr	r0, [r7, #0]
 8004962:	f020 0101 	bic.w	r1, r0, #1
 8004966:	6039      	str	r1, [r7, #0]
        tickstart = HAL_GetTick();
 8004968:	f7fe f966 	bl	8002c38 <HAL_GetTick>
 800496c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	0790      	lsls	r0, r2, #30
 8004972:	d5b6      	bpl.n	80048e2 <HAL_RCC_OscConfig+0x2de>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004974:	f7fe f960 	bl	8002c38 <HAL_GetTick>
 8004978:	eba0 0308 	sub.w	r3, r0, r8
 800497c:	2b02      	cmp	r3, #2
 800497e:	d9f6      	bls.n	800496e <HAL_RCC_OscConfig+0x36a>
            return HAL_TIMEOUT;
 8004980:	2003      	movs	r0, #3
}
 8004982:	b003      	add	sp, #12
 8004984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004988:	4865      	ldr	r0, [pc, #404]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 800498a:	6803      	ldr	r3, [r0, #0]
 800498c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004990:	6002      	str	r2, [r0, #0]
        tickstart = HAL_GetTick();
 8004992:	f7fe f951 	bl	8002c38 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004996:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8004b20 <HAL_RCC_OscConfig+0x51c>
        tickstart = HAL_GetTick();
 800499a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800499c:	e004      	b.n	80049a8 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499e:	f7fe f94b 	bl	8002c38 <HAL_GetTick>
 80049a2:	1bc0      	subs	r0, r0, r7
 80049a4:	2864      	cmp	r0, #100	@ 0x64
 80049a6:	d8eb      	bhi.n	8004980 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049a8:	f8d9 1000 	ldr.w	r1, [r9]
 80049ac:	038b      	lsls	r3, r1, #14
 80049ae:	d5f6      	bpl.n	800499e <HAL_RCC_OscConfig+0x39a>
 80049b0:	e751      	b.n	8004856 <HAL_RCC_OscConfig+0x252>
    FlagStatus       pwrclkchanged = RESET;
 80049b2:	2600      	movs	r6, #0
 80049b4:	e6bc      	b.n	8004730 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80049b6:	6830      	ldr	r0, [r6, #0]
 80049b8:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 80049bc:	6032      	str	r2, [r6, #0]
        tickstart = HAL_GetTick();
 80049be:	f7fe f93b 	bl	8002c38 <HAL_GetTick>
 80049c2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049c4:	e004      	b.n	80049d0 <HAL_RCC_OscConfig+0x3cc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c6:	f7fe f937 	bl	8002c38 <HAL_GetTick>
 80049ca:	1bc3      	subs	r3, r0, r7
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d8d7      	bhi.n	8004980 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049d0:	6831      	ldr	r1, [r6, #0]
 80049d2:	0548      	lsls	r0, r1, #21
 80049d4:	d4f7      	bmi.n	80049c6 <HAL_RCC_OscConfig+0x3c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	e67d      	b.n	80046d6 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049da:	4951      	ldr	r1, [pc, #324]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 80049dc:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80049e0:	f043 0001 	orr.w	r0, r3, #1
 80049e4:	f8c1 0090 	str.w	r0, [r1, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80049e8:	f7fe f926 	bl	8002c38 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ec:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8004b20 <HAL_RCC_OscConfig+0x51c>
      tickstart = HAL_GetTick();
 80049f0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f2:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f6:	e004      	b.n	8004a02 <HAL_RCC_OscConfig+0x3fe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fe f91e 	bl	8002c38 <HAL_GetTick>
 80049fc:	1bc1      	subs	r1, r0, r7
 80049fe:	4549      	cmp	r1, r9
 8004a00:	d8be      	bhi.n	8004980 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a02:	f8d8 2090 	ldr.w	r2, [r8, #144]	@ 0x90
 8004a06:	0792      	lsls	r2, r2, #30
 8004a08:	d5f6      	bpl.n	80049f8 <HAL_RCC_OscConfig+0x3f4>
    if(pwrclkchanged == SET)
 8004a0a:	2e00      	cmp	r6, #0
 8004a0c:	f43f aec0 	beq.w	8004790 <HAL_RCC_OscConfig+0x18c>
 8004a10:	e03f      	b.n	8004a92 <HAL_RCC_OscConfig+0x48e>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a12:	f7ff fd57 	bl	80044c4 <RCC_SetFlashLatencyFromMSIRange>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	f47f af6b 	bne.w	80048f2 <HAL_RCC_OscConfig+0x2ee>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a1c:	4840      	ldr	r0, [pc, #256]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 8004a1e:	6803      	ldr	r3, [r0, #0]
 8004a20:	f043 0708 	orr.w	r7, r3, #8
 8004a24:	6007      	str	r7, [r0, #0]
 8004a26:	6801      	ldr	r1, [r0, #0]
 8004a28:	6a23      	ldr	r3, [r4, #32]
 8004a2a:	f021 02f0 	bic.w	r2, r1, #240	@ 0xf0
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	6002      	str	r2, [r0, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a32:	6847      	ldr	r7, [r0, #4]
 8004a34:	69e1      	ldr	r1, [r4, #28]
 8004a36:	f427 4c7f 	bic.w	ip, r7, #65280	@ 0xff00
 8004a3a:	ea4c 2201 	orr.w	r2, ip, r1, lsl #8
 8004a3e:	6042      	str	r2, [r0, #4]
 8004a40:	e73b      	b.n	80048ba <HAL_RCC_OscConfig+0x2b6>
      __HAL_RCC_HSI48_DISABLE();
 8004a42:	f8d6 2098 	ldr.w	r2, [r6, #152]	@ 0x98
 8004a46:	f022 0701 	bic.w	r7, r2, #1
 8004a4a:	f8c6 7098 	str.w	r7, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004a4e:	f7fe f8f3 	bl	8002c38 <HAL_GetTick>
 8004a52:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a54:	e004      	b.n	8004a60 <HAL_RCC_OscConfig+0x45c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a56:	f7fe f8ef 	bl	8002c38 <HAL_GetTick>
 8004a5a:	1bc3      	subs	r3, r0, r7
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d88f      	bhi.n	8004980 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a60:	f8d6 1098 	ldr.w	r1, [r6, #152]	@ 0x98
 8004a64:	0789      	lsls	r1, r1, #30
 8004a66:	d4f6      	bmi.n	8004a56 <HAL_RCC_OscConfig+0x452>
 8004a68:	e6ae      	b.n	80047c8 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 8004a6a:	2001      	movs	r0, #1
}
 8004a6c:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a74:	603a      	str	r2, [r7, #0]
      tickstart = HAL_GetTick();
 8004a76:	f7fe f8df 	bl	8002c38 <HAL_GetTick>
 8004a7a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7c:	6839      	ldr	r1, [r7, #0]
 8004a7e:	05c9      	lsls	r1, r1, #23
 8004a80:	f53f ae5b 	bmi.w	800473a <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a84:	f7fe f8d8 	bl	8002c38 <HAL_GetTick>
 8004a88:	eba0 0308 	sub.w	r3, r0, r8
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d9f5      	bls.n	8004a7c <HAL_RCC_OscConfig+0x478>
 8004a90:	e776      	b.n	8004980 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a92:	4e23      	ldr	r6, [pc, #140]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 8004a94:	6db7      	ldr	r7, [r6, #88]	@ 0x58
 8004a96:	f027 5180 	bic.w	r1, r7, #268435456	@ 0x10000000
 8004a9a:	65b1      	str	r1, [r6, #88]	@ 0x58
 8004a9c:	e678      	b.n	8004790 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a9e:	f7ff fd11 	bl	80044c4 <RCC_SetFlashLatencyFromMSIRange>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	f43f af09 	beq.w	80048ba <HAL_RCC_OscConfig+0x2b6>
 8004aa8:	e723      	b.n	80048f2 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aaa:	f101 4e80 	add.w	lr, r1, #1073741824	@ 0x40000000
 8004aae:	f5ae 3c3c 	sub.w	ip, lr, #192512	@ 0x2f000
 8004ab2:	f8dc 0000 	ldr.w	r0, [ip]
 8004ab6:	f440 2280 	orr.w	r2, r0, #262144	@ 0x40000
 8004aba:	f8cc 2000 	str.w	r2, [ip]
 8004abe:	f8dc 1000 	ldr.w	r1, [ip]
 8004ac2:	f441 3780 	orr.w	r7, r1, #65536	@ 0x10000
 8004ac6:	f8cc 7000 	str.w	r7, [ip]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aca:	e762      	b.n	8004992 <HAL_RCC_OscConfig+0x38e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004acc:	4914      	ldr	r1, [pc, #80]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 8004ace:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8004ad2:	f043 0004 	orr.w	r0, r3, #4
 8004ad6:	f8c1 0090 	str.w	r0, [r1, #144]	@ 0x90
 8004ada:	f8d1 7090 	ldr.w	r7, [r1, #144]	@ 0x90
 8004ade:	f047 0201 	orr.w	r2, r7, #1
 8004ae2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ae6:	e77f      	b.n	80049e8 <HAL_RCC_OscConfig+0x3e4>
      pll_config = RCC->PLLCFGR;
 8004ae8:	4e0d      	ldr	r6, [pc, #52]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aea:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8004aec:	68f7      	ldr	r7, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aee:	f007 0303 	and.w	r3, r7, #3
 8004af2:	4283      	cmp	r3, r0
 8004af4:	d058      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x5a4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004af6:	2d0c      	cmp	r5, #12
 8004af8:	f43f aefb 	beq.w	80048f2 <HAL_RCC_OscConfig+0x2ee>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004afc:	4d08      	ldr	r5, [pc, #32]	@ (8004b20 <HAL_RCC_OscConfig+0x51c>)
 8004afe:	6828      	ldr	r0, [r5, #0]
 8004b00:	0142      	lsls	r2, r0, #5
 8004b02:	f53f aef6 	bmi.w	80048f2 <HAL_RCC_OscConfig+0x2ee>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b06:	682a      	ldr	r2, [r5, #0]
 8004b08:	00d3      	lsls	r3, r2, #3
 8004b0a:	f53f aef2 	bmi.w	80048f2 <HAL_RCC_OscConfig+0x2ee>
            __HAL_RCC_PLL_DISABLE();
 8004b0e:	682f      	ldr	r7, [r5, #0]
 8004b10:	f027 7380 	bic.w	r3, r7, #16777216	@ 0x1000000
 8004b14:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8004b16:	f7fe f88f 	bl	8002c38 <HAL_GetTick>
 8004b1a:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b1c:	e00e      	b.n	8004b3c <HAL_RCC_OscConfig+0x538>
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000
 8004b24:	08009e28 	.word	0x08009e28
 8004b28:	20000400 	.word	0x20000400
 8004b2c:	20000408 	.word	0x20000408
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b30:	f7fe f882 	bl	8002c38 <HAL_GetTick>
 8004b34:	1b80      	subs	r0, r0, r6
 8004b36:	2802      	cmp	r0, #2
 8004b38:	f63f af22 	bhi.w	8004980 <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3c:	6829      	ldr	r1, [r5, #0]
 8004b3e:	018f      	lsls	r7, r1, #6
 8004b40:	d4f6      	bmi.n	8004b30 <HAL_RCC_OscConfig+0x52c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b42:	68ee      	ldr	r6, [r5, #12]
 8004b44:	4838      	ldr	r0, [pc, #224]	@ (8004c28 <HAL_RCC_OscConfig+0x624>)
 8004b46:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004b48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004b4a:	e9d4 710d 	ldrd	r7, r1, [r4, #52]	@ 0x34
 8004b4e:	4030      	ands	r0, r6
 8004b50:	e9d4 460f 	ldrd	r4, r6, [r4, #60]	@ 0x3c
 8004b54:	4310      	orrs	r0, r2
 8004b56:	ea40 2e07 	orr.w	lr, r0, r7, lsl #8
 8004b5a:	ea4e 6cc1 	orr.w	ip, lr, r1, lsl #27
 8004b5e:	0860      	lsrs	r0, r4, #1
 8004b60:	f103 38ff 	add.w	r8, r3, #4294967295
 8004b64:	ea4c 1708 	orr.w	r7, ip, r8, lsl #4
 8004b68:	0872      	lsrs	r2, r6, #1
 8004b6a:	f100 39ff 	add.w	r9, r0, #4294967295
 8004b6e:	ea47 5149 	orr.w	r1, r7, r9, lsl #21
 8004b72:	1e53      	subs	r3, r2, #1
 8004b74:	ea41 6443 	orr.w	r4, r1, r3, lsl #25
 8004b78:	60ec      	str	r4, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8004b7a:	6828      	ldr	r0, [r5, #0]
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b7c:	4e2b      	ldr	r6, [pc, #172]	@ (8004c2c <HAL_RCC_OscConfig+0x628>)
            __HAL_RCC_PLL_ENABLE();
 8004b7e:	f040 7780 	orr.w	r7, r0, #16777216	@ 0x1000000
 8004b82:	602f      	str	r7, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b84:	68ea      	ldr	r2, [r5, #12]
 8004b86:	f042 7180 	orr.w	r1, r2, #16777216	@ 0x1000000
 8004b8a:	60e9      	str	r1, [r5, #12]
            tickstart = HAL_GetTick();
 8004b8c:	f7fe f854 	bl	8002c38 <HAL_GetTick>
 8004b90:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b92:	e005      	b.n	8004ba0 <HAL_RCC_OscConfig+0x59c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fe f850 	bl	8002c38 <HAL_GetTick>
 8004b98:	1b03      	subs	r3, r0, r4
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	f63f aef0 	bhi.w	8004980 <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba0:	6835      	ldr	r5, [r6, #0]
 8004ba2:	01a8      	lsls	r0, r5, #6
 8004ba4:	d5f6      	bpl.n	8004b94 <HAL_RCC_OscConfig+0x590>
 8004ba6:	e62d      	b.n	8004804 <HAL_RCC_OscConfig+0x200>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ba8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004baa:	f007 0c70 	and.w	ip, r7, #112	@ 0x70
 8004bae:	f102 38ff 	add.w	r8, r2, #4294967295
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb2:	ebbc 1f08 	cmp.w	ip, r8, lsl #4
 8004bb6:	d19e      	bne.n	8004af6 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bba:	f407 43fe 	and.w	r3, r7, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bbe:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 8004bc2:	d198      	bne.n	8004af6 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bc4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004bc6:	f007 4078 	and.w	r0, r7, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bca:	ebb0 6fc2 	cmp.w	r0, r2, lsl #27
 8004bce:	d192      	bne.n	8004af6 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bd0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8004bd2:	0848      	lsrs	r0, r1, #1
 8004bd4:	f407 03c0 	and.w	r3, r7, #6291456	@ 0x600000
 8004bd8:	f100 39ff 	add.w	r9, r0, #4294967295
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bdc:	ebb3 5f49 	cmp.w	r3, r9, lsl #21
 8004be0:	d189      	bne.n	8004af6 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004be2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004be4:	0853      	lsrs	r3, r2, #1
 8004be6:	f007 67c0 	and.w	r7, r7, #100663296	@ 0x6000000
 8004bea:	1e59      	subs	r1, r3, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bec:	ebb7 6f41 	cmp.w	r7, r1, lsl #25
 8004bf0:	d181      	bne.n	8004af6 <HAL_RCC_OscConfig+0x4f2>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf2:	6835      	ldr	r5, [r6, #0]
 8004bf4:	01a9      	lsls	r1, r5, #6
 8004bf6:	f53f ae05 	bmi.w	8004804 <HAL_RCC_OscConfig+0x200>
          __HAL_RCC_PLL_ENABLE();
 8004bfa:	6834      	ldr	r4, [r6, #0]
 8004bfc:	f044 7080 	orr.w	r0, r4, #16777216	@ 0x1000000
 8004c00:	6030      	str	r0, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c02:	68f2      	ldr	r2, [r6, #12]
 8004c04:	f042 7780 	orr.w	r7, r2, #16777216	@ 0x1000000
 8004c08:	60f7      	str	r7, [r6, #12]
          tickstart = HAL_GetTick();
 8004c0a:	f7fe f815 	bl	8002c38 <HAL_GetTick>
 8004c0e:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c10:	e005      	b.n	8004c1e <HAL_RCC_OscConfig+0x61a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c12:	f7fe f811 	bl	8002c38 <HAL_GetTick>
 8004c16:	1b41      	subs	r1, r0, r5
 8004c18:	2902      	cmp	r1, #2
 8004c1a:	f63f aeb1 	bhi.w	8004980 <HAL_RCC_OscConfig+0x37c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1e:	6833      	ldr	r3, [r6, #0]
 8004c20:	019a      	lsls	r2, r3, #6
 8004c22:	d5f6      	bpl.n	8004c12 <HAL_RCC_OscConfig+0x60e>
 8004c24:	e5ee      	b.n	8004804 <HAL_RCC_OscConfig+0x200>
 8004c26:	bf00      	nop
 8004c28:	019d808c 	.word	0x019d808c
 8004c2c:	40021000 	.word	0x40021000

08004c30 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004c30:	2800      	cmp	r0, #0
 8004c32:	f000 80a0 	beq.w	8004d76 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c36:	4a54      	ldr	r2, [pc, #336]	@ (8004d88 <HAL_RCC_ClockConfig+0x158>)
 8004c38:	6813      	ldr	r3, [r2, #0]
{
 8004c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	f003 0007 	and.w	r0, r3, #7
 8004c44:	4288      	cmp	r0, r1
 8004c46:	460d      	mov	r5, r1
 8004c48:	d20c      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	6811      	ldr	r1, [r2, #0]
 8004c4c:	f021 0607 	bic.w	r6, r1, #7
 8004c50:	432e      	orrs	r6, r5
 8004c52:	6016      	str	r6, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c54:	6817      	ldr	r7, [r2, #0]
 8004c56:	f007 0207 	and.w	r2, r7, #7
 8004c5a:	42aa      	cmp	r2, r5
 8004c5c:	d002      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004c5e:	2001      	movs	r0, #1
}
 8004c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c68:	f003 0701 	and.w	r7, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c6c:	d570      	bpl.n	8004d50 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c6e:	4e47      	ldr	r6, [pc, #284]	@ (8004d8c <HAL_RCC_ClockConfig+0x15c>)
 8004c70:	68a0      	ldr	r0, [r4, #8]
 8004c72:	68b1      	ldr	r1, [r6, #8]
 8004c74:	f001 02f0 	and.w	r2, r1, #240	@ 0xf0
 8004c78:	4290      	cmp	r0, r2
 8004c7a:	d904      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c7c:	68b1      	ldr	r1, [r6, #8]
 8004c7e:	f021 02f0 	bic.w	r2, r1, #240	@ 0xf0
 8004c82:	4302      	orrs	r2, r0
 8004c84:	60b2      	str	r2, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c86:	b337      	cbz	r7, 8004cd6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c88:	6861      	ldr	r1, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8a:	4b40      	ldr	r3, [pc, #256]	@ (8004d8c <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c8c:	2903      	cmp	r1, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8e:	681f      	ldr	r7, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c90:	d065      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c92:	2902      	cmp	r1, #2
 8004c94:	d06c      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c96:	2900      	cmp	r1, #0
 8004c98:	d171      	bne.n	8004d7e <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c9a:	07be      	lsls	r6, r7, #30
 8004c9c:	d5df      	bpl.n	8004c5e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c9e:	4e3b      	ldr	r6, [pc, #236]	@ (8004d8c <HAL_RCC_ClockConfig+0x15c>)
 8004ca0:	68b0      	ldr	r0, [r6, #8]
 8004ca2:	f020 0203 	bic.w	r2, r0, #3
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8004caa:	f7fd ffc5 	bl	8002c38 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cae:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004cb2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb4:	e004      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb6:	f7fd ffbf 	bl	8002c38 <HAL_GetTick>
 8004cba:	1bc1      	subs	r1, r0, r7
 8004cbc:	4541      	cmp	r1, r8
 8004cbe:	d85c      	bhi.n	8004d7a <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc0:	68b1      	ldr	r1, [r6, #8]
 8004cc2:	6860      	ldr	r0, [r4, #4]
 8004cc4:	f001 0c0c 	and.w	ip, r1, #12
 8004cc8:	ebbc 0f80 	cmp.w	ip, r0, lsl #2
 8004ccc:	d1f3      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	0799      	lsls	r1, r3, #30
 8004cd2:	d506      	bpl.n	8004ce2 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cd4:	68a0      	ldr	r0, [r4, #8]
 8004cd6:	4e2d      	ldr	r6, [pc, #180]	@ (8004d8c <HAL_RCC_ClockConfig+0x15c>)
 8004cd8:	68b7      	ldr	r7, [r6, #8]
 8004cda:	f007 08f0 	and.w	r8, r7, #240	@ 0xf0
 8004cde:	4580      	cmp	r8, r0
 8004ce0:	d840      	bhi.n	8004d64 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce2:	4829      	ldr	r0, [pc, #164]	@ (8004d88 <HAL_RCC_ClockConfig+0x158>)
 8004ce4:	6806      	ldr	r6, [r0, #0]
 8004ce6:	f006 0707 	and.w	r7, r6, #7
 8004cea:	42af      	cmp	r7, r5
 8004cec:	d909      	bls.n	8004d02 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cee:	6802      	ldr	r2, [r0, #0]
 8004cf0:	f022 0107 	bic.w	r1, r2, #7
 8004cf4:	4329      	orrs	r1, r5
 8004cf6:	6001      	str	r1, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf8:	6800      	ldr	r0, [r0, #0]
 8004cfa:	f000 0607 	and.w	r6, r0, #7
 8004cfe:	42ae      	cmp	r6, r5
 8004d00:	d1ad      	bne.n	8004c5e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d02:	075a      	lsls	r2, r3, #29
 8004d04:	d506      	bpl.n	8004d14 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d06:	4d21      	ldr	r5, [pc, #132]	@ (8004d8c <HAL_RCC_ClockConfig+0x15c>)
 8004d08:	68e7      	ldr	r7, [r4, #12]
 8004d0a:	68aa      	ldr	r2, [r5, #8]
 8004d0c:	f422 61e0 	bic.w	r1, r2, #1792	@ 0x700
 8004d10:	4339      	orrs	r1, r7
 8004d12:	60a9      	str	r1, [r5, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d14:	071b      	lsls	r3, r3, #28
 8004d16:	d507      	bpl.n	8004d28 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d18:	481c      	ldr	r0, [pc, #112]	@ (8004d8c <HAL_RCC_ClockConfig+0x15c>)
 8004d1a:	6924      	ldr	r4, [r4, #16]
 8004d1c:	6883      	ldr	r3, [r0, #8]
 8004d1e:	f423 5660 	bic.w	r6, r3, #14336	@ 0x3800
 8004d22:	ea46 05c4 	orr.w	r5, r6, r4, lsl #3
 8004d26:	6085      	str	r5, [r0, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d28:	f7ff fc12 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8004d2c:	4a17      	ldr	r2, [pc, #92]	@ (8004d8c <HAL_RCC_ClockConfig+0x15c>)
 8004d2e:	4c18      	ldr	r4, [pc, #96]	@ (8004d90 <HAL_RCC_ClockConfig+0x160>)
 8004d30:	6891      	ldr	r1, [r2, #8]
 8004d32:	4e18      	ldr	r6, [pc, #96]	@ (8004d94 <HAL_RCC_ClockConfig+0x164>)
 8004d34:	f3c1 1303 	ubfx	r3, r1, #4, #4
 8004d38:	4607      	mov	r7, r0
 8004d3a:	5ce5      	ldrb	r5, [r4, r3]
  status = HAL_InitTick(uwTickPrio);
 8004d3c:	4816      	ldr	r0, [pc, #88]	@ (8004d98 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d3e:	f005 021f 	and.w	r2, r5, #31
 8004d42:	40d7      	lsrs	r7, r2
 8004d44:	6037      	str	r7, [r6, #0]
  status = HAL_InitTick(uwTickPrio);
 8004d46:	6800      	ldr	r0, [r0, #0]
}
 8004d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8004d4c:	f7fd bf32 	b.w	8002bb4 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d50:	2f00      	cmp	r7, #0
 8004d52:	d0c6      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d54:	6861      	ldr	r1, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d56:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d58:	2903      	cmp	r1, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5a:	681f      	ldr	r7, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d5c:	d199      	bne.n	8004c92 <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5e:	01bb      	lsls	r3, r7, #6
 8004d60:	d49d      	bmi.n	8004c9e <HAL_RCC_ClockConfig+0x6e>
 8004d62:	e77c      	b.n	8004c5e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d64:	68b2      	ldr	r2, [r6, #8]
 8004d66:	f022 01f0 	bic.w	r1, r2, #240	@ 0xf0
 8004d6a:	4301      	orrs	r1, r0
 8004d6c:	60b1      	str	r1, [r6, #8]
 8004d6e:	e7b8      	b.n	8004ce2 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d70:	03bf      	lsls	r7, r7, #14
 8004d72:	d494      	bmi.n	8004c9e <HAL_RCC_ClockConfig+0x6e>
 8004d74:	e773      	b.n	8004c5e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004d76:	2001      	movs	r0, #1
}
 8004d78:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004d7a:	2003      	movs	r0, #3
 8004d7c:	e770      	b.n	8004c60 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d7e:	0578      	lsls	r0, r7, #21
 8004d80:	f57f af6d 	bpl.w	8004c5e <HAL_RCC_ClockConfig+0x2e>
 8004d84:	e78b      	b.n	8004c9e <HAL_RCC_ClockConfig+0x6e>
 8004d86:	bf00      	nop
 8004d88:	40022000 	.word	0x40022000
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	08009e28 	.word	0x08009e28
 8004d94:	20000400 	.word	0x20000400
 8004d98:	20000408 	.word	0x20000408

08004d9c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8004d9c:	4b01      	ldr	r3, [pc, #4]	@ (8004da4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000400 	.word	0x20000400

08004da8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004da8:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004daa:	4a07      	ldr	r2, [pc, #28]	@ (8004dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dac:	6898      	ldr	r0, [r3, #8]
  return SystemCoreClock;
 8004dae:	4907      	ldr	r1, [pc, #28]	@ (8004dcc <HAL_RCC_GetPCLK1Freq+0x24>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004db0:	f3c0 2c02 	ubfx	ip, r0, #8, #3
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	f812 300c 	ldrb.w	r3, [r2, ip]
 8004dba:	f003 021f 	and.w	r2, r3, #31
}
 8004dbe:	40d0      	lsrs	r0, r2
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	08009e20 	.word	0x08009e20
 8004dcc:	20000400 	.word	0x20000400

08004dd0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dd0:	4b06      	ldr	r3, [pc, #24]	@ (8004dec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004dd2:	4a07      	ldr	r2, [pc, #28]	@ (8004df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd4:	6898      	ldr	r0, [r3, #8]
  return SystemCoreClock;
 8004dd6:	4907      	ldr	r1, [pc, #28]	@ (8004df4 <HAL_RCC_GetPCLK2Freq+0x24>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dd8:	f3c0 2cc2 	ubfx	ip, r0, #11, #3
 8004ddc:	6808      	ldr	r0, [r1, #0]
 8004dde:	f812 300c 	ldrb.w	r3, [r2, ip]
 8004de2:	f003 021f 	and.w	r2, r3, #31
}
 8004de6:	40d0      	lsrs	r0, r2
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40021000 	.word	0x40021000
 8004df0:	08009e20 	.word	0x08009e20
 8004df4:	20000400 	.word	0x20000400

08004df8 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004df8:	4a45      	ldr	r2, [pc, #276]	@ (8004f10 <RCCEx_PLLSAI1_Config+0x118>)
{
 8004dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dfc:	68d6      	ldr	r6, [r2, #12]
{
 8004dfe:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e00:	07b1      	lsls	r1, r6, #30
{
 8004e02:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e04:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e06:	d006      	beq.n	8004e16 <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e08:	68d6      	ldr	r6, [r2, #12]
 8004e0a:	f006 0103 	and.w	r1, r6, #3
 8004e0e:	4281      	cmp	r1, r0
 8004e10:	d04b      	beq.n	8004eaa <RCCEx_PLLSAI1_Config+0xb2>
 8004e12:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8004e16:	2802      	cmp	r0, #2
 8004e18:	d058      	beq.n	8004ecc <RCCEx_PLLSAI1_Config+0xd4>
 8004e1a:	2803      	cmp	r0, #3
 8004e1c:	d04f      	beq.n	8004ebe <RCCEx_PLLSAI1_Config+0xc6>
 8004e1e:	2801      	cmp	r0, #1
 8004e20:	d1f7      	bne.n	8004e12 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	0793      	lsls	r3, r2, #30
 8004e26:	d5f5      	bpl.n	8004e14 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e28:	4e39      	ldr	r6, [pc, #228]	@ (8004f10 <RCCEx_PLLSAI1_Config+0x118>)
 8004e2a:	6867      	ldr	r7, [r4, #4]
 8004e2c:	68f1      	ldr	r1, [r6, #12]
 8004e2e:	f021 0373 	bic.w	r3, r1, #115	@ 0x73
 8004e32:	4318      	orrs	r0, r3
 8004e34:	f107 3cff 	add.w	ip, r7, #4294967295
 8004e38:	ea40 120c 	orr.w	r2, r0, ip, lsl #4
 8004e3c:	60f2      	str	r2, [r6, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e3e:	4e34      	ldr	r6, [pc, #208]	@ (8004f10 <RCCEx_PLLSAI1_Config+0x118>)
 8004e40:	6832      	ldr	r2, [r6, #0]
 8004e42:	f022 6180 	bic.w	r1, r2, #67108864	@ 0x4000000
 8004e46:	6031      	str	r1, [r6, #0]
    tickstart = HAL_GetTick();
 8004e48:	f7fd fef6 	bl	8002c38 <HAL_GetTick>
 8004e4c:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e4e:	e004      	b.n	8004e5a <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e50:	f7fd fef2 	bl	8002c38 <HAL_GetTick>
 8004e54:	1bc2      	subs	r2, r0, r7
 8004e56:	2a02      	cmp	r2, #2
 8004e58:	d83c      	bhi.n	8004ed4 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e5a:	6833      	ldr	r3, [r6, #0]
 8004e5c:	011a      	lsls	r2, r3, #4
 8004e5e:	d4f7      	bmi.n	8004e50 <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e60:	68a0      	ldr	r0, [r4, #8]
 8004e62:	0207      	lsls	r7, r0, #8
      if(Divider == DIVIDER_P_UPDATE)
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	d137      	bne.n	8004ed8 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e68:	6935      	ldr	r5, [r6, #16]
 8004e6a:	68e1      	ldr	r1, [r4, #12]
 8004e6c:	f025 4c78 	bic.w	ip, r5, #4160749568	@ 0xf8000000
 8004e70:	ea47 63c1 	orr.w	r3, r7, r1, lsl #27
 8004e74:	f42c 42fe 	bic.w	r2, ip, #32512	@ 0x7f00
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e7c:	4d24      	ldr	r5, [pc, #144]	@ (8004f10 <RCCEx_PLLSAI1_Config+0x118>)
 8004e7e:	682e      	ldr	r6, [r5, #0]
 8004e80:	f046 6080 	orr.w	r0, r6, #67108864	@ 0x4000000
 8004e84:	6028      	str	r0, [r5, #0]
      tickstart = HAL_GetTick();
 8004e86:	f7fd fed7 	bl	8002c38 <HAL_GetTick>
 8004e8a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e8c:	e004      	b.n	8004e98 <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e8e:	f7fd fed3 	bl	8002c38 <HAL_GetTick>
 8004e92:	1b83      	subs	r3, r0, r6
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d81d      	bhi.n	8004ed4 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e98:	682f      	ldr	r7, [r5, #0]
 8004e9a:	013b      	lsls	r3, r7, #4
 8004e9c:	d5f7      	bpl.n	8004e8e <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e9e:	6929      	ldr	r1, [r5, #16]
 8004ea0:	69a4      	ldr	r4, [r4, #24]
 8004ea2:	4321      	orrs	r1, r4
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	6129      	str	r1, [r5, #16]
}
 8004ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004eaa:	2900      	cmp	r1, #0
 8004eac:	d0b1      	beq.n	8004e12 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eae:	68d3      	ldr	r3, [r2, #12]
       ||
 8004eb0:	6860      	ldr	r0, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eb2:	f3c3 1702 	ubfx	r7, r3, #4, #3
 8004eb6:	3701      	adds	r7, #1
       ||
 8004eb8:	4287      	cmp	r7, r0
 8004eba:	d1aa      	bne.n	8004e12 <RCCEx_PLLSAI1_Config+0x1a>
 8004ebc:	e7bf      	b.n	8004e3e <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	039e      	lsls	r6, r3, #14
 8004ec2:	d4b1      	bmi.n	8004e28 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ec4:	6817      	ldr	r7, [r2, #0]
 8004ec6:	0379      	lsls	r1, r7, #13
 8004ec8:	d5a3      	bpl.n	8004e12 <RCCEx_PLLSAI1_Config+0x1a>
 8004eca:	e7ad      	b.n	8004e28 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ecc:	6811      	ldr	r1, [r2, #0]
 8004ece:	054f      	lsls	r7, r1, #21
 8004ed0:	d59f      	bpl.n	8004e12 <RCCEx_PLLSAI1_Config+0x1a>
 8004ed2:	e7a9      	b.n	8004e28 <RCCEx_PLLSAI1_Config+0x30>
 8004ed4:	2003      	movs	r0, #3
}
 8004ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ed8:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eda:	6931      	ldr	r1, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8004edc:	d00b      	beq.n	8004ef6 <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ede:	6965      	ldr	r5, [r4, #20]
 8004ee0:	f021 6ec0 	bic.w	lr, r1, #100663296	@ 0x6000000
 8004ee4:	086a      	lsrs	r2, r5, #1
 8004ee6:	f42e 43fe 	bic.w	r3, lr, #32512	@ 0x7f00
 8004eea:	1e50      	subs	r0, r2, #1
 8004eec:	433b      	orrs	r3, r7
 8004eee:	ea43 6740 	orr.w	r7, r3, r0, lsl #25
 8004ef2:	6137      	str	r7, [r6, #16]
 8004ef4:	e7c2      	b.n	8004e7c <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ef6:	6925      	ldr	r5, [r4, #16]
 8004ef8:	f421 01c0 	bic.w	r1, r1, #6291456	@ 0x600000
 8004efc:	086a      	lsrs	r2, r5, #1
 8004efe:	f421 43fe 	bic.w	r3, r1, #32512	@ 0x7f00
 8004f02:	1e50      	subs	r0, r2, #1
 8004f04:	433b      	orrs	r3, r7
 8004f06:	ea43 5740 	orr.w	r7, r3, r0, lsl #21
 8004f0a:	6137      	str	r7, [r6, #16]
 8004f0c:	e7b6      	b.n	8004e7c <RCCEx_PLLSAI1_Config+0x84>
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000

08004f14 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f14:	4a3e      	ldr	r2, [pc, #248]	@ (8005010 <RCCEx_PLLSAI2_Config+0xfc>)
{
 8004f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f18:	68d6      	ldr	r6, [r2, #12]
{
 8004f1a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f1c:	07b1      	lsls	r1, r6, #30
{
 8004f1e:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f20:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f22:	d006      	beq.n	8004f32 <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f24:	68d6      	ldr	r6, [r2, #12]
 8004f26:	f006 0103 	and.w	r1, r6, #3
 8004f2a:	4281      	cmp	r1, r0
 8004f2c:	d04b      	beq.n	8004fc6 <RCCEx_PLLSAI2_Config+0xb2>
 8004f2e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8004f32:	2802      	cmp	r0, #2
 8004f34:	d058      	beq.n	8004fe8 <RCCEx_PLLSAI2_Config+0xd4>
 8004f36:	2803      	cmp	r0, #3
 8004f38:	d04f      	beq.n	8004fda <RCCEx_PLLSAI2_Config+0xc6>
 8004f3a:	2801      	cmp	r0, #1
 8004f3c:	d1f7      	bne.n	8004f2e <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	0793      	lsls	r3, r2, #30
 8004f42:	d5f5      	bpl.n	8004f30 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f44:	4e32      	ldr	r6, [pc, #200]	@ (8005010 <RCCEx_PLLSAI2_Config+0xfc>)
 8004f46:	6867      	ldr	r7, [r4, #4]
 8004f48:	68f1      	ldr	r1, [r6, #12]
 8004f4a:	f021 0373 	bic.w	r3, r1, #115	@ 0x73
 8004f4e:	4318      	orrs	r0, r3
 8004f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8004f54:	ea40 120c 	orr.w	r2, r0, ip, lsl #4
 8004f58:	60f2      	str	r2, [r6, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f5a:	4e2d      	ldr	r6, [pc, #180]	@ (8005010 <RCCEx_PLLSAI2_Config+0xfc>)
 8004f5c:	6832      	ldr	r2, [r6, #0]
 8004f5e:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 8004f62:	6031      	str	r1, [r6, #0]
    tickstart = HAL_GetTick();
 8004f64:	f7fd fe68 	bl	8002c38 <HAL_GetTick>
 8004f68:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f6a:	e004      	b.n	8004f76 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f6c:	f7fd fe64 	bl	8002c38 <HAL_GetTick>
 8004f70:	1bc2      	subs	r2, r0, r7
 8004f72:	2a02      	cmp	r2, #2
 8004f74:	d83c      	bhi.n	8004ff0 <RCCEx_PLLSAI2_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f76:	6833      	ldr	r3, [r6, #0]
 8004f78:	009a      	lsls	r2, r3, #2
 8004f7a:	d4f7      	bmi.n	8004f6c <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f7c:	68a0      	ldr	r0, [r4, #8]
 8004f7e:	0207      	lsls	r7, r0, #8
      if(Divider == DIVIDER_P_UPDATE)
 8004f80:	2d00      	cmp	r5, #0
 8004f82:	d137      	bne.n	8004ff4 <RCCEx_PLLSAI2_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f84:	6975      	ldr	r5, [r6, #20]
 8004f86:	68e1      	ldr	r1, [r4, #12]
 8004f88:	f025 4c78 	bic.w	ip, r5, #4160749568	@ 0xf8000000
 8004f8c:	ea47 63c1 	orr.w	r3, r7, r1, lsl #27
 8004f90:	f42c 42fe 	bic.w	r2, ip, #32512	@ 0x7f00
 8004f94:	4313      	orrs	r3, r2
 8004f96:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f98:	4d1d      	ldr	r5, [pc, #116]	@ (8005010 <RCCEx_PLLSAI2_Config+0xfc>)
 8004f9a:	682e      	ldr	r6, [r5, #0]
 8004f9c:	f046 5080 	orr.w	r0, r6, #268435456	@ 0x10000000
 8004fa0:	6028      	str	r0, [r5, #0]
      tickstart = HAL_GetTick();
 8004fa2:	f7fd fe49 	bl	8002c38 <HAL_GetTick>
 8004fa6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fa8:	e004      	b.n	8004fb4 <RCCEx_PLLSAI2_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004faa:	f7fd fe45 	bl	8002c38 <HAL_GetTick>
 8004fae:	1b83      	subs	r3, r0, r6
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d81d      	bhi.n	8004ff0 <RCCEx_PLLSAI2_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fb4:	682f      	ldr	r7, [r5, #0]
 8004fb6:	00bb      	lsls	r3, r7, #2
 8004fb8:	d5f7      	bpl.n	8004faa <RCCEx_PLLSAI2_Config+0x96>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004fba:	6969      	ldr	r1, [r5, #20]
 8004fbc:	6964      	ldr	r4, [r4, #20]
 8004fbe:	4321      	orrs	r1, r4
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	6169      	str	r1, [r5, #20]
}
 8004fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004fc6:	2900      	cmp	r1, #0
 8004fc8:	d0b1      	beq.n	8004f2e <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fca:	68d3      	ldr	r3, [r2, #12]
       ||
 8004fcc:	6860      	ldr	r0, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fce:	f3c3 1702 	ubfx	r7, r3, #4, #3
 8004fd2:	3701      	adds	r7, #1
       ||
 8004fd4:	4287      	cmp	r7, r0
 8004fd6:	d1aa      	bne.n	8004f2e <RCCEx_PLLSAI2_Config+0x1a>
 8004fd8:	e7bf      	b.n	8004f5a <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	039e      	lsls	r6, r3, #14
 8004fde:	d4b1      	bmi.n	8004f44 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fe0:	6817      	ldr	r7, [r2, #0]
 8004fe2:	0379      	lsls	r1, r7, #13
 8004fe4:	d5a3      	bpl.n	8004f2e <RCCEx_PLLSAI2_Config+0x1a>
 8004fe6:	e7ad      	b.n	8004f44 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fe8:	6811      	ldr	r1, [r2, #0]
 8004fea:	054f      	lsls	r7, r1, #21
 8004fec:	d59f      	bpl.n	8004f2e <RCCEx_PLLSAI2_Config+0x1a>
 8004fee:	e7a9      	b.n	8004f44 <RCCEx_PLLSAI2_Config+0x30>
 8004ff0:	2003      	movs	r0, #3
}
 8004ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ff4:	6975      	ldr	r5, [r6, #20]
 8004ff6:	6921      	ldr	r1, [r4, #16]
 8004ff8:	f025 6ec0 	bic.w	lr, r5, #100663296	@ 0x6000000
 8004ffc:	084b      	lsrs	r3, r1, #1
 8004ffe:	f42e 42fe 	bic.w	r2, lr, #32512	@ 0x7f00
 8005002:	1e58      	subs	r0, r3, #1
 8005004:	433a      	orrs	r2, r7
 8005006:	ea42 6740 	orr.w	r7, r2, r0, lsl #25
 800500a:	6177      	str	r7, [r6, #20]
 800500c:	e7c4      	b.n	8004f98 <RCCEx_PLLSAI2_Config+0x84>
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000

08005014 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005018:	6803      	ldr	r3, [r0, #0]
 800501a:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 800501e:	b083      	sub	sp, #12
 8005020:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005022:	d016      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005024:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8005026:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800502a:	f000 81e8 	beq.w	80053fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800502e:	f200 8123 	bhi.w	8005278 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005032:	2900      	cmp	r1, #0
 8005034:	f000 81b7 	beq.w	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005038:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800503c:	f040 81d1 	bne.w	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005040:	2100      	movs	r1, #0
 8005042:	3020      	adds	r0, #32
 8005044:	f7ff ff66 	bl	8004f14 <RCCEx_PLLSAI2_Config>
 8005048:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800504a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800504c:	2e00      	cmp	r6, #0
 800504e:	f000 81e3 	beq.w	8005418 <HAL_RCCEx_PeriphCLKConfig+0x404>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005052:	04d8      	lsls	r0, r3, #19
 8005054:	f140 8121 	bpl.w	800529a <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005058:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800505a:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800505e:	f000 81d4 	beq.w	800540a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8005062:	f200 817f 	bhi.w	8005364 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005066:	2900      	cmp	r1, #0
 8005068:	f000 81a6 	beq.w	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800506c:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8005070:	f040 81b9 	bne.w	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005074:	2100      	movs	r1, #0
 8005076:	f104 0020 	add.w	r0, r4, #32
 800507a:	f7ff ff4b 	bl	8004f14 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800507e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005080:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8005082:	2f00      	cmp	r7, #0
 8005084:	f040 8175 	bne.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005088:	49b4      	ldr	r1, [pc, #720]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800508a:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800508c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005090:	f022 7540 	bic.w	r5, r2, #50331648	@ 0x3000000
 8005094:	4305      	orrs	r5, r0
 8005096:	f8c1 5088 	str.w	r5, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800509a:	0399      	lsls	r1, r3, #14
 800509c:	f100 8101 	bmi.w	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050a0:	07d9      	lsls	r1, r3, #31
 80050a2:	d508      	bpl.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050a4:	4fad      	ldr	r7, [pc, #692]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80050a6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80050a8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80050ac:	f020 0103 	bic.w	r1, r0, #3
 80050b0:	4311      	orrs	r1, r2
 80050b2:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050b6:	079a      	lsls	r2, r3, #30
 80050b8:	d508      	bpl.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050ba:	4da8      	ldr	r5, [pc, #672]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80050bc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80050be:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 80050c2:	f027 010c 	bic.w	r1, r7, #12
 80050c6:	4301      	orrs	r1, r0
 80050c8:	f8c5 1088 	str.w	r1, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050cc:	075f      	lsls	r7, r3, #29
 80050ce:	d508      	bpl.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050d0:	4da2      	ldr	r5, [pc, #648]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80050d2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80050d4:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
 80050d8:	f022 0730 	bic.w	r7, r2, #48	@ 0x30
 80050dc:	430f      	orrs	r7, r1
 80050de:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050e2:	071d      	lsls	r5, r3, #28
 80050e4:	d508      	bpl.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050e6:	4d9d      	ldr	r5, [pc, #628]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80050e8:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 80050ea:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 80050ee:	f020 02c0 	bic.w	r2, r0, #192	@ 0xc0
 80050f2:	433a      	orrs	r2, r7
 80050f4:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050f8:	06d8      	lsls	r0, r3, #27
 80050fa:	d508      	bpl.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050fc:	4997      	ldr	r1, [pc, #604]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80050fe:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005100:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 8005104:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
 8005108:	4302      	orrs	r2, r0
 800510a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800510e:	0699      	lsls	r1, r3, #26
 8005110:	d508      	bpl.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005112:	4f92      	ldr	r7, [pc, #584]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005114:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8005116:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800511a:	f421 6540 	bic.w	r5, r1, #3072	@ 0xc00
 800511e:	4315      	orrs	r5, r2
 8005120:	f8c7 5088 	str.w	r5, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005124:	059a      	lsls	r2, r3, #22
 8005126:	d508      	bpl.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005128:	4f8c      	ldr	r7, [pc, #560]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800512a:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800512c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8005130:	f420 2140 	bic.w	r1, r0, #786432	@ 0xc0000
 8005134:	4329      	orrs	r1, r5
 8005136:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800513a:	055f      	lsls	r7, r3, #21
 800513c:	d508      	bpl.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800513e:	4f87      	ldr	r7, [pc, #540]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005140:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8005142:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005146:	f422 1140 	bic.w	r1, r2, #3145728	@ 0x300000
 800514a:	4301      	orrs	r1, r0
 800514c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005150:	065d      	lsls	r5, r3, #25
 8005152:	d508      	bpl.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005154:	4d81      	ldr	r5, [pc, #516]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005156:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005158:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 800515c:	f427 5240 	bic.w	r2, r7, #12288	@ 0x3000
 8005160:	430a      	orrs	r2, r1
 8005162:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005166:	0618      	lsls	r0, r3, #24
 8005168:	d508      	bpl.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800516a:	4d7c      	ldr	r5, [pc, #496]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800516c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800516e:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8005172:	f420 4740 	bic.w	r7, r0, #49152	@ 0xc000
 8005176:	4317      	orrs	r7, r2
 8005178:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800517c:	05d9      	lsls	r1, r3, #23
 800517e:	d508      	bpl.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005180:	4976      	ldr	r1, [pc, #472]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005182:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005184:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 8005188:	f425 3740 	bic.w	r7, r5, #196608	@ 0x30000
 800518c:	4307      	orrs	r7, r0
 800518e:	f8c1 7088 	str.w	r7, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005192:	02da      	lsls	r2, r3, #11
 8005194:	d508      	bpl.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005196:	4971      	ldr	r1, [pc, #452]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005198:	6de7      	ldr	r7, [r4, #92]	@ 0x5c
 800519a:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800519e:	f022 0503 	bic.w	r5, r2, #3
 80051a2:	433d      	orrs	r5, r7
 80051a4:	f8c1 509c 	str.w	r5, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051a8:	049f      	lsls	r7, r3, #18
 80051aa:	d510      	bpl.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ac:	496b      	ldr	r1, [pc, #428]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80051ae:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 80051b0:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
 80051b4:	f020 6240 	bic.w	r2, r0, #201326592	@ 0xc000000
 80051b8:	432a      	orrs	r2, r5
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051ba:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051be:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051c2:	f000 8104 	beq.w	80053ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80051c6:	f1b5 6f80 	cmp.w	r5, #67108864	@ 0x4000000
 80051ca:	f000 8132 	beq.w	8005432 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80051ce:	031d      	lsls	r5, r3, #12
 80051d0:	d510      	bpl.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051d2:	4962      	ldr	r1, [pc, #392]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80051d4:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 80051d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80051da:	f022 6540 	bic.w	r5, r2, #201326592	@ 0xc000000
 80051de:	433d      	orrs	r5, r7
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051e0:	f1b7 6f00 	cmp.w	r7, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051e4:	f8c1 5088 	str.w	r5, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051e8:	f000 80f6 	beq.w	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051ec:	f1b7 6f80 	cmp.w	r7, #67108864	@ 0x4000000
 80051f0:	f000 8129 	beq.w	8005446 <HAL_RCCEx_PeriphCLKConfig+0x432>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051f4:	0358      	lsls	r0, r3, #13
 80051f6:	d510      	bpl.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051f8:	4958      	ldr	r1, [pc, #352]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80051fa:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80051fc:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 8005200:	f025 6740 	bic.w	r7, r5, #201326592	@ 0xc000000
 8005204:	4307      	orrs	r7, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005206:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800520a:	f8c1 7088 	str.w	r7, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800520e:	f000 80d9 	beq.w	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005212:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8005216:	f000 8120 	beq.w	800545a <HAL_RCCEx_PeriphCLKConfig+0x446>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800521a:	0459      	lsls	r1, r3, #17
 800521c:	d510      	bpl.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800521e:	4f4f      	ldr	r7, [pc, #316]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005220:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8005222:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8005226:	f021 5040 	bic.w	r0, r1, #805306368	@ 0x30000000
 800522a:	4310      	orrs	r0, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800522c:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005230:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005234:	f000 80d9 	beq.w	80053ea <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005238:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800523c:	f000 80ee 	beq.w	800541c <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005240:	041a      	lsls	r2, r3, #16
 8005242:	d509      	bpl.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005244:	4d45      	ldr	r5, [pc, #276]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005246:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800524a:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 800524e:	f027 4180 	bic.w	r1, r7, #1073741824	@ 0x40000000
 8005252:	4301      	orrs	r1, r0
 8005254:	f8c5 1088 	str.w	r1, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005258:	03db      	lsls	r3, r3, #15
 800525a:	d509      	bpl.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800525c:	4a3f      	ldr	r2, [pc, #252]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800525e:	f8d4 4084 	ldr.w	r4, [r4, #132]	@ 0x84
 8005262:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005266:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800526a:	4325      	orrs	r5, r4
 800526c:	f8c2 5088 	str.w	r5, [r2, #136]	@ 0x88
}
 8005270:	4630      	mov	r0, r6
 8005272:	b003      	add	sp, #12
 8005274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8005278:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 800527c:	f040 80b1 	bne.w	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005280:	4e36      	ldr	r6, [pc, #216]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005282:	f8d6 7088 	ldr.w	r7, [r6, #136]	@ 0x88
 8005286:	f427 0040 	bic.w	r0, r7, #12582912	@ 0xc00000
 800528a:	4308      	orrs	r0, r1
 800528c:	f8c6 0088 	str.w	r0, [r6, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005290:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005292:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005296:	f53f aedf 	bmi.w	8005058 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 800529a:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800529c:	0399      	lsls	r1, r3, #14
 800529e:	f57f aeff 	bpl.w	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052a2:	4b2e      	ldr	r3, [pc, #184]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80052a4:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80052a6:	00ca      	lsls	r2, r1, #3
 80052a8:	d565      	bpl.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x362>
    FlagStatus       pwrclkchanged = RESET;
 80052aa:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ae:	4d2c      	ldr	r5, [pc, #176]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80052b0:	6829      	ldr	r1, [r5, #0]
 80052b2:	f441 7080 	orr.w	r0, r1, #256	@ 0x100
 80052b6:	6028      	str	r0, [r5, #0]
    tickstart = HAL_GetTick();
 80052b8:	f7fd fcbe 	bl	8002c38 <HAL_GetTick>
 80052bc:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052be:	e005      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c0:	f7fd fcba 	bl	8002c38 <HAL_GetTick>
 80052c4:	eba0 0009 	sub.w	r0, r0, r9
 80052c8:	2802      	cmp	r0, #2
 80052ca:	d860      	bhi.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052cc:	682a      	ldr	r2, [r5, #0]
 80052ce:	05d3      	lsls	r3, r2, #23
 80052d0:	d5f6      	bpl.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    if(ret == HAL_OK)
 80052d2:	2f00      	cmp	r7, #0
 80052d4:	f040 80cb 	bne.w	800546e <HAL_RCCEx_PeriphCLKConfig+0x45a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052d8:	4d20      	ldr	r5, [pc, #128]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052da:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052de:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052e2:	f417 7940 	ands.w	r9, r7, #768	@ 0x300
 80052e6:	d026      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80052e8:	4591      	cmp	r9, r2
 80052ea:	d024      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x322>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052ec:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80052f0:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80052f4:	f443 3080 	orr.w	r0, r3, #65536	@ 0x10000
 80052f8:	f8c5 0090 	str.w	r0, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052fc:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005300:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005304:	f427 3380 	bic.w	r3, r7, #65536	@ 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005308:	07cf      	lsls	r7, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800530a:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 800530e:	f8c5 0090 	str.w	r0, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005312:	d510      	bpl.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x322>
        tickstart = HAL_GetTick();
 8005314:	f7fd fc90 	bl	8002c38 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005318:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800531c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531e:	e004      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x316>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005320:	f7fd fc8a 	bl	8002c38 <HAL_GetTick>
 8005324:	1bc3      	subs	r3, r0, r7
 8005326:	454b      	cmp	r3, r9
 8005328:	d831      	bhi.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x37a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532a:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 800532e:	0790      	lsls	r0, r2, #30
 8005330:	d5f6      	bpl.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005332:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8005336:	4d09      	ldr	r5, [pc, #36]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005338:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 800533c:	f421 7740 	bic.w	r7, r1, #768	@ 0x300
 8005340:	4317      	orrs	r7, r2
 8005342:	f8c5 7090 	str.w	r7, [r5, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005346:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8005348:	f1b8 0f00 	cmp.w	r8, #0
 800534c:	f43f aea8 	beq.w	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005350:	4902      	ldr	r1, [pc, #8]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005352:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8005354:	f022 5580 	bic.w	r5, r2, #268435456	@ 0x10000000
 8005358:	658d      	str	r5, [r1, #88]	@ 0x58
 800535a:	e6a1      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800535c:	40021000 	.word	0x40021000
 8005360:	40007000 	.word	0x40007000
    switch(PeriphClkInit->Sai2ClockSelection)
 8005364:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8005368:	d13d      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch(PeriphClkInit->Sai1ClockSelection)
 800536a:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 800536c:	2f00      	cmp	r7, #0
 800536e:	f43f ae8b 	beq.w	8005088 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005372:	463e      	mov	r6, r7
 8005374:	e792      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005376:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005378:	f040 5280 	orr.w	r2, r0, #268435456	@ 0x10000000
 800537c:	659a      	str	r2, [r3, #88]	@ 0x58
 800537e:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8005380:	f005 5380 	and.w	r3, r5, #268435456	@ 0x10000000
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005388:	f04f 0801 	mov.w	r8, #1
 800538c:	e78f      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = HAL_TIMEOUT;
 800538e:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005390:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8005392:	f1b8 0f00 	cmp.w	r8, #0
 8005396:	f43f ae83 	beq.w	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800539a:	4936      	ldr	r1, [pc, #216]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800539c:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800539e:	f022 5580 	bic.w	r5, r2, #268435456	@ 0x10000000
 80053a2:	658d      	str	r5, [r1, #88]	@ 0x58
 80053a4:	e67c      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053a6:	3004      	adds	r0, #4
 80053a8:	f7ff fd26 	bl	8004df8 <RCCEx_PLLSAI1_Config>
 80053ac:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053ae:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80053b0:	2e00      	cmp	r6, #0
 80053b2:	f47f ae4e 	bne.w	8005052 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80053b6:	e02f      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x404>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053b8:	1d20      	adds	r0, r4, #4
 80053ba:	f7ff fd1d 	bl	8004df8 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053be:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053c0:	4607      	mov	r7, r0
      break;
 80053c2:	e65e      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c4:	68ca      	ldr	r2, [r1, #12]
 80053c6:	f442 1580 	orr.w	r5, r2, #1048576	@ 0x100000
 80053ca:	60cd      	str	r5, [r1, #12]
 80053cc:	e725      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ce:	68cf      	ldr	r7, [r1, #12]
 80053d0:	f447 1080 	orr.w	r0, r7, #1048576	@ 0x100000
 80053d4:	60c8      	str	r0, [r1, #12]
 80053d6:	e6fa      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053d8:	68c8      	ldr	r0, [r1, #12]
 80053da:	f440 1280 	orr.w	r2, r0, #1048576	@ 0x100000
 80053de:	60ca      	str	r2, [r1, #12]
 80053e0:	e708      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai1ClockSelection)
 80053e2:	2601      	movs	r6, #1
 80053e4:	e635      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 80053e6:	2601      	movs	r6, #1
 80053e8:	e757      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053ea:	2102      	movs	r1, #2
 80053ec:	1d20      	adds	r0, r4, #4
 80053ee:	f7ff fd03 	bl	8004df8 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053f2:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f43f af23 	beq.w	8005240 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053fa:	4606      	mov	r6, r0
 80053fc:	e720      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053fe:	481d      	ldr	r0, [pc, #116]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005400:	68c2      	ldr	r2, [r0, #12]
 8005402:	f442 3580 	orr.w	r5, r2, #65536	@ 0x10000
 8005406:	60c5      	str	r5, [r0, #12]
    if(ret == HAL_OK)
 8005408:	e73a      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800540a:	491a      	ldr	r1, [pc, #104]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800540c:	68ca      	ldr	r2, [r1, #12]
 800540e:	f442 3580 	orr.w	r5, r2, #65536	@ 0x10000
 8005412:	60cd      	str	r5, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8005414:	4637      	mov	r7, r6
 8005416:	e7a9      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005418:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800541a:	e731      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800541c:	2102      	movs	r1, #2
 800541e:	f104 0020 	add.w	r0, r4, #32
 8005422:	f7ff fd77 	bl	8004f14 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005426:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005428:	2800      	cmp	r0, #0
 800542a:	f43f af09 	beq.w	8005240 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800542e:	4606      	mov	r6, r0
 8005430:	e706      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005432:	2101      	movs	r1, #1
 8005434:	1d20      	adds	r0, r4, #4
 8005436:	f7ff fcdf 	bl	8004df8 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800543a:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 800543c:	2800      	cmp	r0, #0
 800543e:	f43f aec6 	beq.w	80051ce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005442:	4606      	mov	r6, r0
 8005444:	e6c3      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005446:	2101      	movs	r1, #1
 8005448:	1d20      	adds	r0, r4, #4
 800544a:	f7ff fcd5 	bl	8004df8 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800544e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005450:	2800      	cmp	r0, #0
 8005452:	f43f aecf 	beq.w	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005456:	4606      	mov	r6, r0
 8005458:	e6cc      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800545a:	2101      	movs	r1, #1
 800545c:	1d20      	adds	r0, r4, #4
 800545e:	f7ff fccb 	bl	8004df8 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005462:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005464:	2800      	cmp	r0, #0
 8005466:	f43f aed8 	beq.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800546a:	4606      	mov	r6, r0
 800546c:	e6d5      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800546e:	463e      	mov	r6, r7
 8005470:	e78e      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8005472:	bf00      	nop
 8005474:	40021000 	.word	0x40021000

08005478 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547c:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800547e:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005480:	460e      	mov	r6, r1
 8005482:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8005484:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005488:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800548a:	f7fd fbd5 	bl	8002c38 <HAL_GetTick>
 800548e:	4437      	add	r7, r6
 8005490:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005492:	f7fd fbd1 	bl	8002c38 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005496:	4958      	ldr	r1, [pc, #352]	@ (80055f8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x180>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005498:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800549a:	680a      	ldr	r2, [r1, #0]
 800549c:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 80054a0:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 80054a4:	0d19      	lsrs	r1, r3, #20
 80054a6:	fb07 f101 	mul.w	r1, r7, r1
 80054aa:	3601      	adds	r6, #1
 80054ac:	9101      	str	r1, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80054ae:	d15c      	bne.n	800556a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xf2>
 80054b0:	68a5      	ldr	r5, [r4, #8]
 80054b2:	f415 6fc0 	tst.w	r5, #1536	@ 0x600
 80054b6:	d054      	beq.n	8005562 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80054b8:	7b26      	ldrb	r6, [r4, #12]
 80054ba:	fa5f f886 	uxtb.w	r8, r6
 80054be:	f88d 8003 	strb.w	r8, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80054c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80054c6:	68a3      	ldr	r3, [r4, #8]
 80054c8:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80054cc:	d049      	beq.n	8005562 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 80054ce:	7b21      	ldrb	r1, [r4, #12]
 80054d0:	b2c8      	uxtb	r0, r1
 80054d2:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 80054d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80054da:	68a7      	ldr	r7, [r4, #8]
 80054dc:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 80054e0:	d03f      	beq.n	8005562 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 80054e2:	7b22      	ldrb	r2, [r4, #12]
 80054e4:	b2d5      	uxtb	r5, r2
 80054e6:	f88d 5003 	strb.w	r5, [sp, #3]
      UNUSED(tmpreg8);
 80054ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80054ee:	68a6      	ldr	r6, [r4, #8]
 80054f0:	f416 6fc0 	tst.w	r6, #1536	@ 0x600
 80054f4:	d035      	beq.n	8005562 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 80054f6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80054fa:	fa5f fe8c 	uxtb.w	lr, ip
 80054fe:	f88d e003 	strb.w	lr, [sp, #3]
      UNUSED(tmpreg8);
 8005502:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005506:	68a3      	ldr	r3, [r4, #8]
 8005508:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800550c:	d029      	beq.n	8005562 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 800550e:	7b21      	ldrb	r1, [r4, #12]
 8005510:	b2c8      	uxtb	r0, r1
 8005512:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 8005516:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800551a:	68a7      	ldr	r7, [r4, #8]
 800551c:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 8005520:	d01f      	beq.n	8005562 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005522:	7b22      	ldrb	r2, [r4, #12]
 8005524:	b2d5      	uxtb	r5, r2
 8005526:	f88d 5003 	strb.w	r5, [sp, #3]
      UNUSED(tmpreg8);
 800552a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800552e:	68a6      	ldr	r6, [r4, #8]
 8005530:	f416 6fc0 	tst.w	r6, #1536	@ 0x600
 8005534:	d015      	beq.n	8005562 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005536:	f894 800c 	ldrb.w	r8, [r4, #12]
 800553a:	fa5f fc88 	uxtb.w	ip, r8
 800553e:	f88d c003 	strb.w	ip, [sp, #3]
      UNUSED(tmpreg8);
 8005542:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005546:	68a3      	ldr	r3, [r4, #8]
 8005548:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800554c:	d009      	beq.n	8005562 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 800554e:	7b21      	ldrb	r1, [r4, #12]
 8005550:	b2c8      	uxtb	r0, r1
 8005552:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 8005556:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800555a:	68a7      	ldr	r7, [r4, #8]
 800555c:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 8005560:	d1aa      	bne.n	80054b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 8005562:	2000      	movs	r0, #0
}
 8005564:	b002      	add	sp, #8
 8005566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800556a:	4606      	mov	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800556c:	4620      	mov	r0, r4
 800556e:	e015      	b.n	800559c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x124>
      tmpreg8 = *ptmpreg8;
 8005570:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8005574:	fa5f fe8c 	uxtb.w	lr, ip
 8005578:	f88d e003 	strb.w	lr, [sp, #3]
      UNUSED(tmpreg8);
 800557c:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005580:	f7fd fb5a 	bl	8002c38 <HAL_GetTick>
 8005584:	1b83      	subs	r3, r0, r6
 8005586:	42bb      	cmp	r3, r7
 8005588:	d20d      	bcs.n	80055a6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x12e>
      if (count == 0U)
 800558a:	9901      	ldr	r1, [sp, #4]
      count--;
 800558c:	9801      	ldr	r0, [sp, #4]
        tmp_timeout = 0U;
 800558e:	2900      	cmp	r1, #0
      count--;
 8005590:	f100 32ff 	add.w	r2, r0, #4294967295
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005594:	6828      	ldr	r0, [r5, #0]
      count--;
 8005596:	9201      	str	r2, [sp, #4]
        tmp_timeout = 0U;
 8005598:	bf08      	it	eq
 800559a:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 800559c:	6882      	ldr	r2, [r0, #8]
 800559e:	f412 6fc0 	tst.w	r2, #1536	@ 0x600
 80055a2:	d1e5      	bne.n	8005570 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xf8>
 80055a4:	e7dd      	b.n	8005562 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a6:	e9d5 7400 	ldrd	r7, r4, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055aa:	687e      	ldr	r6, [r7, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ac:	f5b4 7f82 	cmp.w	r4, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055b0:	f026 03e0 	bic.w	r3, r6, #224	@ 0xe0
 80055b4:	607b      	str	r3, [r7, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b6:	d013      	beq.n	80055e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x168>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055b8:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80055ba:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80055be:	d107      	bne.n	80055d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x158>
          SPI_RESET_CRC(hspi);
 80055c0:	683e      	ldr	r6, [r7, #0]
 80055c2:	f426 5300 	bic.w	r3, r6, #8192	@ 0x2000
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	f441 5000 	orr.w	r0, r1, #8192	@ 0x2000
 80055ce:	6038      	str	r0, [r7, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80055d0:	2701      	movs	r7, #1
        __HAL_UNLOCK(hspi);
 80055d2:	2200      	movs	r2, #0
        hspi->State = HAL_SPI_STATE_READY;
 80055d4:	f885 705d 	strb.w	r7, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80055d8:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80055dc:	2003      	movs	r0, #3
 80055de:	e7c1      	b.n	8005564 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xec>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055e0:	68a9      	ldr	r1, [r5, #8]
 80055e2:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80055e6:	d002      	beq.n	80055ee <SPI_WaitFifoStateUntilTimeout.constprop.0+0x176>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055e8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80055ec:	d1e4      	bne.n	80055b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x140>
          __HAL_SPI_DISABLE(hspi);
 80055ee:	6838      	ldr	r0, [r7, #0]
 80055f0:	f020 0240 	bic.w	r2, r0, #64	@ 0x40
 80055f4:	603a      	str	r2, [r7, #0]
 80055f6:	e7df      	b.n	80055b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x140>
 80055f8:	20000400 	.word	0x20000400

080055fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005600:	b084      	sub	sp, #16
  __IO uint8_t  tmpreg8 = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	188f      	adds	r7, r1, r2
{
 8005606:	460d      	mov	r5, r1
 8005608:	4616      	mov	r6, r2
  __IO uint8_t  tmpreg8 = 0;
 800560a:	f88d 3007 	strb.w	r3, [sp, #7]
{
 800560e:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005610:	f7fd fb12 	bl	8002c38 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005614:	f8df 8190 	ldr.w	r8, [pc, #400]	@ 80057a8 <SPI_EndRxTxTransaction+0x1ac>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005618:	eba7 0900 	sub.w	r9, r7, r0
  tmp_tickstart = HAL_GetTick();
 800561c:	f7fd fb0c 	bl	8002c38 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005620:	f8d8 1000 	ldr.w	r1, [r8]
 8005624:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005628:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800562c:	0d19      	lsrs	r1, r3, #20
 800562e:	fb09 f201 	mul.w	r2, r9, r1
 8005632:	9202      	str	r2, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005634:	1c6a      	adds	r2, r5, #1
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	bf18      	it	ne
 800563a:	4682      	movne	sl, r0
 800563c:	d160      	bne.n	8005700 <SPI_EndRxTxTransaction+0x104>
 800563e:	6898      	ldr	r0, [r3, #8]
 8005640:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 8005644:	d01b      	beq.n	800567e <SPI_EndRxTxTransaction+0x82>
 8005646:	6899      	ldr	r1, [r3, #8]
 8005648:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 800564c:	d017      	beq.n	800567e <SPI_EndRxTxTransaction+0x82>
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	f412 5fc0 	tst.w	r2, #6144	@ 0x1800
 8005654:	d013      	beq.n	800567e <SPI_EndRxTxTransaction+0x82>
 8005656:	6898      	ldr	r0, [r3, #8]
 8005658:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 800565c:	d00f      	beq.n	800567e <SPI_EndRxTxTransaction+0x82>
 800565e:	6899      	ldr	r1, [r3, #8]
 8005660:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 8005664:	d00b      	beq.n	800567e <SPI_EndRxTxTransaction+0x82>
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	f412 5fc0 	tst.w	r2, #6144	@ 0x1800
 800566c:	d007      	beq.n	800567e <SPI_EndRxTxTransaction+0x82>
 800566e:	6898      	ldr	r0, [r3, #8]
 8005670:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 8005674:	d003      	beq.n	800567e <SPI_EndRxTxTransaction+0x82>
 8005676:	6899      	ldr	r1, [r3, #8]
 8005678:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 800567c:	d1df      	bne.n	800563e <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800567e:	f7fd fadb 	bl	8002c38 <HAL_GetTick>
 8005682:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005684:	f7fd fad8 	bl	8002c38 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005688:	f8d8 2000 	ldr.w	r2, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800568c:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 800568e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005690:	f3c2 30cb 	ubfx	r0, r2, #15, #12
 8005694:	fb07 f000 	mul.w	r0, r7, r0
 8005698:	1c69      	adds	r1, r5, #1
 800569a:	9003      	str	r0, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800569c:	d144      	bne.n	8005728 <SPI_EndRxTxTransaction+0x12c>
 800569e:	689f      	ldr	r7, [r3, #8]
 80056a0:	063a      	lsls	r2, r7, #24
 80056a2:	d514      	bpl.n	80056ce <SPI_EndRxTxTransaction+0xd2>
 80056a4:	6898      	ldr	r0, [r3, #8]
 80056a6:	0600      	lsls	r0, r0, #24
 80056a8:	d511      	bpl.n	80056ce <SPI_EndRxTxTransaction+0xd2>
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	0611      	lsls	r1, r2, #24
 80056ae:	d50e      	bpl.n	80056ce <SPI_EndRxTxTransaction+0xd2>
 80056b0:	6899      	ldr	r1, [r3, #8]
 80056b2:	060a      	lsls	r2, r1, #24
 80056b4:	d50b      	bpl.n	80056ce <SPI_EndRxTxTransaction+0xd2>
 80056b6:	689f      	ldr	r7, [r3, #8]
 80056b8:	063f      	lsls	r7, r7, #24
 80056ba:	d508      	bpl.n	80056ce <SPI_EndRxTxTransaction+0xd2>
 80056bc:	6898      	ldr	r0, [r3, #8]
 80056be:	0600      	lsls	r0, r0, #24
 80056c0:	d505      	bpl.n	80056ce <SPI_EndRxTxTransaction+0xd2>
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	0611      	lsls	r1, r2, #24
 80056c6:	d502      	bpl.n	80056ce <SPI_EndRxTxTransaction+0xd2>
 80056c8:	6899      	ldr	r1, [r3, #8]
 80056ca:	060a      	lsls	r2, r1, #24
 80056cc:	d4e7      	bmi.n	800569e <SPI_EndRxTxTransaction+0xa2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056ce:	4632      	mov	r2, r6
 80056d0:	4629      	mov	r1, r5
 80056d2:	4620      	mov	r0, r4
 80056d4:	f7ff fed0 	bl	8005478 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80056d8:	bb50      	cbnz	r0, 8005730 <SPI_EndRxTxTransaction+0x134>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80056da:	b004      	add	sp, #16
 80056dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056e0:	f7fd faaa 	bl	8002c38 <HAL_GetTick>
 80056e4:	eba0 030a 	sub.w	r3, r0, sl
 80056e8:	4599      	cmp	r9, r3
 80056ea:	d929      	bls.n	8005740 <SPI_EndRxTxTransaction+0x144>
      if (count == 0U)
 80056ec:	9802      	ldr	r0, [sp, #8]
      count--;
 80056ee:	9a02      	ldr	r2, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80056f0:	6823      	ldr	r3, [r4, #0]
        tmp_timeout = 0U;
 80056f2:	2800      	cmp	r0, #0
      count--;
 80056f4:	f102 31ff 	add.w	r1, r2, #4294967295
        tmp_timeout = 0U;
 80056f8:	bf08      	it	eq
 80056fa:	f04f 0900 	moveq.w	r9, #0
      count--;
 80056fe:	9102      	str	r1, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8005706:	d1eb      	bne.n	80056e0 <SPI_EndRxTxTransaction+0xe4>
 8005708:	e7b9      	b.n	800567e <SPI_EndRxTxTransaction+0x82>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800570a:	f7fd fa95 	bl	8002c38 <HAL_GetTick>
 800570e:	eba0 0308 	sub.w	r3, r0, r8
 8005712:	429f      	cmp	r7, r3
 8005714:	d914      	bls.n	8005740 <SPI_EndRxTxTransaction+0x144>
      if (count == 0U)
 8005716:	9803      	ldr	r0, [sp, #12]
      count--;
 8005718:	9a03      	ldr	r2, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800571a:	6823      	ldr	r3, [r4, #0]
        tmp_timeout = 0U;
 800571c:	2800      	cmp	r0, #0
      count--;
 800571e:	f102 31ff 	add.w	r1, r2, #4294967295
        tmp_timeout = 0U;
 8005722:	bf08      	it	eq
 8005724:	2700      	moveq	r7, #0
      count--;
 8005726:	9103      	str	r1, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005728:	6899      	ldr	r1, [r3, #8]
 800572a:	060b      	lsls	r3, r1, #24
 800572c:	d4ed      	bmi.n	800570a <SPI_EndRxTxTransaction+0x10e>
 800572e:	e7ce      	b.n	80056ce <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005730:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8005732:	f045 0620 	orr.w	r6, r5, #32
 8005736:	6626      	str	r6, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005738:	2003      	movs	r0, #3
}
 800573a:	b004      	add	sp, #16
 800573c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005740:	e9d4 a500 	ldrd	sl, r5, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005744:	f8da 6004 	ldr.w	r6, [sl, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005748:	f5b5 7f82 	cmp.w	r5, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800574c:	f026 07e0 	bic.w	r7, r6, #224	@ 0xe0
 8005750:	f8ca 7004 	str.w	r7, [sl, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005754:	d01a      	beq.n	800578c <SPI_EndRxTxTransaction+0x190>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005756:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800575c:	d10b      	bne.n	8005776 <SPI_EndRxTxTransaction+0x17a>
          SPI_RESET_CRC(hspi);
 800575e:	f8da 5000 	ldr.w	r5, [sl]
 8005762:	f425 5600 	bic.w	r6, r5, #8192	@ 0x2000
 8005766:	f8ca 6000 	str.w	r6, [sl]
 800576a:	f8da 7000 	ldr.w	r7, [sl]
 800576e:	f447 5000 	orr.w	r0, r7, #8192	@ 0x2000
 8005772:	f8ca 0000 	str.w	r0, [sl]
        hspi->State = HAL_SPI_STATE_READY;
 8005776:	2201      	movs	r2, #1
 8005778:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800577c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 800577e:	2500      	movs	r5, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005780:	f041 0320 	orr.w	r3, r1, #32
        __HAL_UNLOCK(hspi);
 8005784:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005788:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800578a:	e7d5      	b.n	8005738 <SPI_EndRxTxTransaction+0x13c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800578c:	68a0      	ldr	r0, [r4, #8]
 800578e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005792:	d002      	beq.n	800579a <SPI_EndRxTxTransaction+0x19e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005794:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8005798:	d1dd      	bne.n	8005756 <SPI_EndRxTxTransaction+0x15a>
          __HAL_SPI_DISABLE(hspi);
 800579a:	f8da 2000 	ldr.w	r2, [sl]
 800579e:	f022 0140 	bic.w	r1, r2, #64	@ 0x40
 80057a2:	f8ca 1000 	str.w	r1, [sl]
 80057a6:	e7d6      	b.n	8005756 <SPI_EndRxTxTransaction+0x15a>
 80057a8:	20000400 	.word	0x20000400

080057ac <HAL_SPI_Init>:
  if (hspi == NULL)
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d074      	beq.n	800589a <HAL_SPI_Init+0xee>
{
 80057b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b4:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057b6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d053      	beq.n	8005864 <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057bc:	2300      	movs	r3, #0
 80057be:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80057c2:	f894 505d 	ldrb.w	r5, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057c6:	2200      	movs	r2, #0
 80057c8:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80057ca:	f005 06ff 	and.w	r6, r5, #255	@ 0xff
 80057ce:	2d00      	cmp	r5, #0
 80057d0:	d057      	beq.n	8005882 <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 80057d2:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057d4:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80057d6:	2702      	movs	r7, #2
 80057d8:	f884 705d 	strb.w	r7, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80057dc:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057de:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80057e2:	f023 0540 	bic.w	r5, r3, #64	@ 0x40
 80057e6:	600d      	str	r5, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057e8:	d842      	bhi.n	8005870 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057ea:	d151      	bne.n	8005890 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057ee:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057f2:	f406 5500 	and.w	r5, r6, #8192	@ 0x2000
 80057f6:	6863      	ldr	r3, [r4, #4]
 80057f8:	68a6      	ldr	r6, [r4, #8]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057fa:	f402 6870 	and.w	r8, r2, #3840	@ 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057fe:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005802:	6923      	ldr	r3, [r4, #16]
 8005804:	f406 4704 	and.w	r7, r6, #33792	@ 0x8400
 8005808:	433a      	orrs	r2, r7
 800580a:	f003 0602 	and.w	r6, r3, #2
 800580e:	4316      	orrs	r6, r2
 8005810:	6962      	ldr	r2, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005812:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005814:	69e3      	ldr	r3, [r4, #28]
 8005816:	f002 0201 	and.w	r2, r2, #1
 800581a:	4332      	orrs	r2, r6
 800581c:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800581e:	f007 0e08 	and.w	lr, r7, #8
 8005822:	ea4e 0e08 	orr.w	lr, lr, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005826:	6a27      	ldr	r7, [r4, #32]
 8005828:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 800582c:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 8005830:	4313      	orrs	r3, r2
 8005832:	ea43 0208 	orr.w	r2, r3, r8
 8005836:	f007 0780 	and.w	r7, r7, #128	@ 0x80
 800583a:	433a      	orrs	r2, r7
 800583c:	432a      	orrs	r2, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800583e:	0c35      	lsrs	r5, r6, #16
 8005840:	f005 0604 	and.w	r6, r5, #4
 8005844:	f000 0010 	and.w	r0, r0, #16
 8005848:	ea4e 0706 	orr.w	r7, lr, r6
 800584c:	4307      	orrs	r7, r0
 800584e:	ea47 030c 	orr.w	r3, r7, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005852:	600a      	str	r2, [r1, #0]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005854:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005856:	604b      	str	r3, [r1, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 8005858:	2101      	movs	r1, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800585a:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800585c:	f884 105d 	strb.w	r1, [r4, #93]	@ 0x5d
}
 8005860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005864:	6861      	ldr	r1, [r4, #4]
 8005866:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 800586a:	d0aa      	beq.n	80057c2 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800586c:	61e0      	str	r0, [r4, #28]
 800586e:	e7a8      	b.n	80057c2 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005870:	f5b2 6f70 	cmp.w	r2, #3840	@ 0xf00
 8005874:	d113      	bne.n	800589e <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005876:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005878:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800587c:	f407 5500 	and.w	r5, r7, #8192	@ 0x2000
 8005880:	e7b9      	b.n	80057f6 <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 8005882:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005884:	f884 605c 	strb.w	r6, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005888:	f7fc ff00 	bl	800268c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800588c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800588e:	e7a0      	b.n	80057d2 <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005890:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005894:	2500      	movs	r5, #0
 8005896:	62a5      	str	r5, [r4, #40]	@ 0x28
 8005898:	e7ad      	b.n	80057f6 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 800589a:	2001      	movs	r0, #1
}
 800589c:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800589e:	f04f 0c00 	mov.w	ip, #0
 80058a2:	e7f7      	b.n	8005894 <HAL_SPI_Init+0xe8>

080058a4 <HAL_SPI_TransmitReceive>:
{
 80058a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a8:	4604      	mov	r4, r0
 80058aa:	4691      	mov	r9, r2
 80058ac:	461f      	mov	r7, r3
 80058ae:	9e08      	ldr	r6, [sp, #32]
 80058b0:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 80058b2:	f7fd f9c1 	bl	8002c38 <HAL_GetTick>
  tmp_state           = hspi->State;
 80058b6:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 80058ba:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058bc:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80058be:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058c0:	d00b      	beq.n	80058da <HAL_SPI_TransmitReceive+0x36>
 80058c2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80058c6:	f040 8099 	bne.w	80059fc <HAL_SPI_TransmitReceive+0x158>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80058ca:	68a0      	ldr	r0, [r4, #8]
 80058cc:	b2d9      	uxtb	r1, r3
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f040 8094 	bne.w	80059fc <HAL_SPI_TransmitReceive+0x158>
 80058d4:	2904      	cmp	r1, #4
 80058d6:	f040 8091 	bne.w	80059fc <HAL_SPI_TransmitReceive+0x158>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058da:	f1b8 0f00 	cmp.w	r8, #0
 80058de:	f000 8168 	beq.w	8005bb2 <HAL_SPI_TransmitReceive+0x30e>
 80058e2:	f1b9 0f00 	cmp.w	r9, #0
 80058e6:	f000 8164 	beq.w	8005bb2 <HAL_SPI_TransmitReceive+0x30e>
 80058ea:	2f00      	cmp	r7, #0
 80058ec:	f000 8161 	beq.w	8005bb2 <HAL_SPI_TransmitReceive+0x30e>
  __HAL_LOCK(hspi);
 80058f0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	f000 8081 	beq.w	80059fc <HAL_SPI_TransmitReceive+0x158>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058fa:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80058fe:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005900:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005904:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005906:	bf1c      	itt	ne
 8005908:	2005      	movne	r0, #5
 800590a:	f884 005d 	strbne.w	r0, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800590e:	2300      	movs	r3, #0
  __HAL_LOCK(hspi);
 8005910:	f04f 0c01 	mov.w	ip, #1
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005914:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005918:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 800591a:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 800591e:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005922:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hspi);
 8005924:	f884 c05c 	strb.w	ip, [r4, #92]	@ 0x5c
  hspi->RxXferSize  = Size;
 8005928:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800592c:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005930:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005932:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005934:	d965      	bls.n	8005a02 <HAL_SPI_TransmitReceive+0x15e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005936:	6858      	ldr	r0, [r3, #4]
 8005938:	f420 5180 	bic.w	r1, r0, #4096	@ 0x1000
 800593c:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	0640      	lsls	r0, r0, #25
 8005942:	d403      	bmi.n	800594c <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	f041 0040 	orr.w	r0, r1, #64	@ 0x40
 800594a:	6018      	str	r0, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594c:	2a00      	cmp	r2, #0
 800594e:	f000 80f1 	beq.w	8005b34 <HAL_SPI_TransmitReceive+0x290>
 8005952:	2f01      	cmp	r7, #1
 8005954:	f000 80ee 	beq.w	8005b34 <HAL_SPI_TransmitReceive+0x290>
 8005958:	1c73      	adds	r3, r6, #1
        txallowed = 1U;
 800595a:	f04f 0701 	mov.w	r7, #1
 800595e:	d031      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0x120>
 8005960:	e0cf      	b.n	8005b02 <HAL_SPI_TransmitReceive+0x25e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	6890      	ldr	r0, [r2, #8]
 8005966:	0780      	lsls	r0, r0, #30
 8005968:	d513      	bpl.n	8005992 <HAL_SPI_TransmitReceive+0xee>
 800596a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 800596e:	fa1f f38c 	uxth.w	r3, ip
 8005972:	b173      	cbz	r3, 8005992 <HAL_SPI_TransmitReceive+0xee>
 8005974:	b167      	cbz	r7, 8005990 <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005976:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8005978:	f837 1b02 	ldrh.w	r1, [r7], #2
 800597c:	60d1      	str	r1, [r2, #12]
        hspi->TxXferCount--;
 800597e:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005982:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005984:	f10e 30ff 	add.w	r0, lr, #4294967295
 8005988:	fa1f f880 	uxth.w	r8, r0
 800598c:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005990:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005992:	6893      	ldr	r3, [r2, #8]
 8005994:	f013 0901 	ands.w	r9, r3, #1
 8005998:	d012      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x11c>
 800599a:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
 800599e:	fa1f f18c 	uxth.w	r1, ip
 80059a2:	b169      	cbz	r1, 80059c0 <HAL_SPI_TransmitReceive+0x11c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059a4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80059a6:	68d2      	ldr	r2, [r2, #12]
 80059a8:	f820 2b02 	strh.w	r2, [r0], #2
        hspi->RxXferCount--;
 80059ac:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b0:	6420      	str	r0, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80059b2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80059b6:	fa1f f388 	uxth.w	r3, r8
        txallowed = 1U;
 80059ba:	464f      	mov	r7, r9
        hspi->RxXferCount--;
 80059bc:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059c0:	f7fd f93a 	bl	8002c38 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c4:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80059c6:	b290      	uxth	r0, r2
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d1ca      	bne.n	8005962 <HAL_SPI_TransmitReceive+0xbe>
 80059cc:	f8b4 9046 	ldrh.w	r9, [r4, #70]	@ 0x46
 80059d0:	fa1f f389 	uxth.w	r3, r9
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1c4      	bne.n	8005962 <HAL_SPI_TransmitReceive+0xbe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d8:	462a      	mov	r2, r5
 80059da:	4631      	mov	r1, r6
 80059dc:	4620      	mov	r0, r4
 80059de:	f7ff fe0d 	bl	80055fc <SPI_EndRxTxTransaction>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	f040 80e0 	bne.w	8005ba8 <HAL_SPI_TransmitReceive+0x304>
  hspi->State = HAL_SPI_STATE_READY;
 80059e8:	2701      	movs	r7, #1
 80059ea:	f884 705d 	strb.w	r7, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ee:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 80059f0:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059f4:	1e08      	subs	r0, r1, #0
 80059f6:	bf18      	it	ne
 80059f8:	2001      	movne	r0, #1
 80059fa:	e000      	b.n	80059fe <HAL_SPI_TransmitReceive+0x15a>
    return HAL_BUSY;
 80059fc:	2002      	movs	r0, #2
}
 80059fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a02:	2f01      	cmp	r7, #1
 8005a04:	f000 80f5 	beq.w	8005bf2 <HAL_SPI_TransmitReceive+0x34e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a08:	6858      	ldr	r0, [r3, #4]
 8005a0a:	f420 5180 	bic.w	r1, r0, #4096	@ 0x1000
 8005a0e:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a10:	681f      	ldr	r7, [r3, #0]
 8005a12:	0679      	lsls	r1, r7, #25
 8005a14:	d403      	bmi.n	8005a1e <HAL_SPI_TransmitReceive+0x17a>
    __HAL_SPI_ENABLE(hspi);
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	f040 0140 	orr.w	r1, r0, #64	@ 0x40
 8005a1c:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1e:	b97a      	cbnz	r2, 8005a40 <HAL_SPI_TransmitReceive+0x19c>
      if (hspi->TxXferCount > 1U)
 8005a20:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
 8005a24:	fa1f f28e 	uxth.w	r2, lr
 8005a28:	2a01      	cmp	r2, #1
 8005a2a:	f240 80c4 	bls.w	8005bb6 <HAL_SPI_TransmitReceive+0x312>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a2e:	4642      	mov	r2, r8
 8005a30:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005a34:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount -= 2U;
 8005a36:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a38:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005a3a:	1e9f      	subs	r7, r3, #2
 8005a3c:	b2b8      	uxth	r0, r7
 8005a3e:	87e0      	strh	r0, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005a40:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a42:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005a44:	b291      	uxth	r1, r2
 8005a46:	b929      	cbnz	r1, 8005a54 <HAL_SPI_TransmitReceive+0x1b0>
 8005a48:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
 8005a4c:	fa1f f38e 	uxth.w	r3, lr
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0c1      	beq.n	80059d8 <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	6890      	ldr	r0, [r2, #8]
 8005a58:	0781      	lsls	r1, r0, #30
 8005a5a:	d506      	bpl.n	8005a6a <HAL_SPI_TransmitReceive+0x1c6>
 8005a5c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8005a5e:	b28b      	uxth	r3, r1
 8005a60:	b11b      	cbz	r3, 8005a6a <HAL_SPI_TransmitReceive+0x1c6>
 8005a62:	2f00      	cmp	r7, #0
 8005a64:	f040 8081 	bne.w	8005b6a <HAL_SPI_TransmitReceive+0x2c6>
        txallowed = 0U;
 8005a68:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a6a:	6893      	ldr	r3, [r2, #8]
 8005a6c:	f013 0801 	ands.w	r8, r3, #1
 8005a70:	d01b      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x206>
 8005a72:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
 8005a76:	b281      	uxth	r1, r0
 8005a78:	b1b9      	cbz	r1, 8005aaa <HAL_SPI_TransmitReceive+0x206>
        if (hspi->RxXferCount > 1U)
 8005a7a:	f8b4 7046 	ldrh.w	r7, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a7e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8005a80:	b2bb      	uxth	r3, r7
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d964      	bls.n	8005b50 <HAL_SPI_TransmitReceive+0x2ac>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a86:	68d0      	ldr	r0, [r2, #12]
 8005a88:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->RxXferCount -= 2U;
 8005a8c:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a90:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005a92:	f1ac 0e02 	sub.w	lr, ip, #2
 8005a96:	fa1f f18e 	uxth.w	r1, lr
 8005a9a:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005a9e:	f8b4 7046 	ldrh.w	r7, [r4, #70]	@ 0x46
 8005aa2:	b2bb      	uxth	r3, r7
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d940      	bls.n	8005b2a <HAL_SPI_TransmitReceive+0x286>
        txallowed = 1U;
 8005aa8:	4647      	mov	r7, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005aaa:	f7fd f8c5 	bl	8002c38 <HAL_GetTick>
 8005aae:	1b42      	subs	r2, r0, r5
 8005ab0:	42b2      	cmp	r2, r6
 8005ab2:	d3c6      	bcc.n	8005a42 <HAL_SPI_TransmitReceive+0x19e>
 8005ab4:	1c73      	adds	r3, r6, #1
 8005ab6:	d0c4      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x19e>
        hspi->State = HAL_SPI_STATE_READY;
 8005ab8:	2601      	movs	r6, #1
        __HAL_UNLOCK(hspi);
 8005aba:	2500      	movs	r5, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005abc:	f884 605d 	strb.w	r6, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005ac0:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ac4:	2003      	movs	r0, #3
}
 8005ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005aca:	b157      	cbz	r7, 8005ae2 <HAL_SPI_TransmitReceive+0x23e>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005acc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8005ace:	f837 3b02 	ldrh.w	r3, [r7], #2
 8005ad2:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005ad4:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad8:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ada:	f108 31ff 	add.w	r1, r8, #4294967295
 8005ade:	b288      	uxth	r0, r1
 8005ae0:	87e0      	strh	r0, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8005ae2:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ae4:	6893      	ldr	r3, [r2, #8]
 8005ae6:	f013 0901 	ands.w	r9, r3, #1
 8005aea:	d005      	beq.n	8005af8 <HAL_SPI_TransmitReceive+0x254>
 8005aec:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
 8005af0:	fa1f f18c 	uxth.w	r1, ip
 8005af4:	2900      	cmp	r1, #0
 8005af6:	d16d      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x330>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005af8:	f7fd f89e 	bl	8002c38 <HAL_GetTick>
 8005afc:	1b41      	subs	r1, r0, r5
 8005afe:	42b1      	cmp	r1, r6
 8005b00:	d2da      	bcs.n	8005ab8 <HAL_SPI_TransmitReceive+0x214>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b02:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
 8005b06:	fa1f f38e 	uxth.w	r3, lr
 8005b0a:	b92b      	cbnz	r3, 8005b18 <HAL_SPI_TransmitReceive+0x274>
 8005b0c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005b10:	b288      	uxth	r0, r1
 8005b12:	2800      	cmp	r0, #0
 8005b14:	f43f af60 	beq.w	80059d8 <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b18:	6822      	ldr	r2, [r4, #0]
 8005b1a:	6893      	ldr	r3, [r2, #8]
 8005b1c:	0799      	lsls	r1, r3, #30
 8005b1e:	d5e1      	bpl.n	8005ae4 <HAL_SPI_TransmitReceive+0x240>
 8005b20:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8005b22:	b288      	uxth	r0, r1
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d0dd      	beq.n	8005ae4 <HAL_SPI_TransmitReceive+0x240>
 8005b28:	e7cf      	b.n	8005aca <HAL_SPI_TransmitReceive+0x226>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b2a:	6850      	ldr	r0, [r2, #4]
 8005b2c:	f440 5180 	orr.w	r1, r0, #4096	@ 0x1000
 8005b30:	6051      	str	r1, [r2, #4]
 8005b32:	e7b9      	b.n	8005aa8 <HAL_SPI_TransmitReceive+0x204>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b34:	4647      	mov	r7, r8
 8005b36:	f837 2b02 	ldrh.w	r2, [r7], #2
 8005b3a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005b3c:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b40:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b42:	f108 39ff 	add.w	r9, r8, #4294967295
 8005b46:	fa1f fc89 	uxth.w	ip, r9
 8005b4a:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8005b4e:	e703      	b.n	8005958 <HAL_SPI_TransmitReceive+0xb4>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b50:	7b12      	ldrb	r2, [r2, #12]
 8005b52:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8005b54:	f8b4 9046 	ldrh.w	r9, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr++;
 8005b58:	6c20      	ldr	r0, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005b5a:	f109 37ff 	add.w	r7, r9, #4294967295
          hspi->pRxBuffPtr++;
 8005b5e:	3001      	adds	r0, #1
          hspi->RxXferCount--;
 8005b60:	b2bb      	uxth	r3, r7
          hspi->pRxBuffPtr++;
 8005b62:	6420      	str	r0, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005b64:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8005b68:	e79e      	b.n	8005aa8 <HAL_SPI_TransmitReceive+0x204>
        if (hspi->TxXferCount > 1U)
 8005b6a:	8fe7      	ldrh	r7, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b6c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8005b6e:	b2b8      	uxth	r0, r7
 8005b70:	2801      	cmp	r0, #1
 8005b72:	d90c      	bls.n	8005b8e <HAL_SPI_TransmitReceive+0x2ea>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b74:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005b78:	60d1      	str	r1, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005b7a:	f8b4 903e 	ldrh.w	r9, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b7e:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b80:	f1a9 0c02 	sub.w	ip, r9, #2
 8005b84:	fa1f fe8c 	uxth.w	lr, ip
 8005b88:	f8a4 e03e 	strh.w	lr, [r4, #62]	@ 0x3e
 8005b8c:	e76c      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x1c4>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b8e:	7819      	ldrb	r1, [r3, #0]
 8005b90:	7311      	strb	r1, [r2, #12]
          hspi->TxXferCount--;
 8005b92:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8005b96:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005b98:	f108 37ff 	add.w	r7, r8, #4294967295
          hspi->pTxBuffPtr++;
 8005b9c:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8005b9e:	b2b8      	uxth	r0, r7
          hspi->pTxBuffPtr++;
 8005ba0:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005ba2:	87e0      	strh	r0, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ba4:	6822      	ldr	r2, [r4, #0]
 8005ba6:	e75f      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x1c4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ba8:	2620      	movs	r6, #32
    __HAL_UNLOCK(hspi);
 8005baa:	2500      	movs	r5, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bac:	6626      	str	r6, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005bae:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	e723      	b.n	80059fe <HAL_SPI_TransmitReceive+0x15a>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005bb6:	f898 7000 	ldrb.w	r7, [r8]
 8005bba:	731f      	strb	r7, [r3, #12]
        hspi->TxXferCount--;
 8005bbc:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 8005bc0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005bc2:	f108 39ff 	add.w	r9, r8, #4294967295
        hspi->pTxBuffPtr++;
 8005bc6:	3001      	adds	r0, #1
        hspi->TxXferCount--;
 8005bc8:	fa1f fc89 	uxth.w	ip, r9
        hspi->pTxBuffPtr++;
 8005bcc:	63a0      	str	r0, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005bce:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8005bd2:	e735      	b.n	8005a40 <HAL_SPI_TransmitReceive+0x19c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bd4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005bd6:	68d2      	ldr	r2, [r2, #12]
 8005bd8:	f820 2b02 	strh.w	r2, [r0], #2
        hspi->RxXferCount--;
 8005bdc:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005be0:	6420      	str	r0, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005be2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8005be6:	fa1f f388 	uxth.w	r3, r8
        txallowed = 1U;
 8005bea:	464f      	mov	r7, r9
        hspi->RxXferCount--;
 8005bec:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8005bf0:	e782      	b.n	8005af8 <HAL_SPI_TransmitReceive+0x254>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bf2:	685f      	ldr	r7, [r3, #4]
 8005bf4:	f447 5280 	orr.w	r2, r7, #4096	@ 0x1000
 8005bf8:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	0640      	lsls	r0, r0, #25
 8005bfe:	f53f af0f 	bmi.w	8005a20 <HAL_SPI_TransmitReceive+0x17c>
    __HAL_SPI_ENABLE(hspi);
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	f041 0740 	orr.w	r7, r1, #64	@ 0x40
 8005c08:	601f      	str	r7, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c0a:	e709      	b.n	8005a20 <HAL_SPI_TransmitReceive+0x17c>

08005c0c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	f000 808c 	beq.w	8005d2a <HAL_TIM_Base_Init+0x11e>
{
 8005c12:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c14:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005c18:	4604      	mov	r4, r0
 8005c1a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d078      	beq.n	8005d14 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c22:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c24:	4942      	ldr	r1, [pc, #264]	@ (8005d30 <HAL_TIM_Base_Init+0x124>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005c26:	2002      	movs	r0, #2
 8005c28:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c2c:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005c2e:	681d      	ldr	r5, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c30:	d05c      	beq.n	8005cec <HAL_TIM_Base_Init+0xe0>
 8005c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c36:	d024      	beq.n	8005c82 <HAL_TIM_Base_Init+0x76>
 8005c38:	f5a1 3c94 	sub.w	ip, r1, #75776	@ 0x12800
 8005c3c:	4563      	cmp	r3, ip
 8005c3e:	d020      	beq.n	8005c82 <HAL_TIM_Base_Init+0x76>
 8005c40:	f50c 6280 	add.w	r2, ip, #1024	@ 0x400
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d01c      	beq.n	8005c82 <HAL_TIM_Base_Init+0x76>
 8005c48:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8005c4c:	4283      	cmp	r3, r0
 8005c4e:	d018      	beq.n	8005c82 <HAL_TIM_Base_Init+0x76>
 8005c50:	f500 3194 	add.w	r1, r0, #75776	@ 0x12800
 8005c54:	428b      	cmp	r3, r1
 8005c56:	d049      	beq.n	8005cec <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c58:	f501 6240 	add.w	r2, r1, #3072	@ 0xc00
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d05e      	beq.n	8005d1e <HAL_TIM_Base_Init+0x112>
 8005c60:	4834      	ldr	r0, [pc, #208]	@ (8005d34 <HAL_TIM_Base_Init+0x128>)
 8005c62:	4283      	cmp	r3, r0
 8005c64:	d05b      	beq.n	8005d1e <HAL_TIM_Base_Init+0x112>
 8005c66:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 8005c6a:	4563      	cmp	r3, ip
 8005c6c:	d057      	beq.n	8005d1e <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c6e:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8005c72:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c74:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c76:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c78:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005c7a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c7c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c7e:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c80:	e010      	b.n	8005ca4 <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 8005c82:	68a0      	ldr	r0, [r4, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c84:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c86:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c8a:	4305      	orrs	r5, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c8c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c8e:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c92:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c94:	f022 0580 	bic.w	r5, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c98:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005c9a:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c9c:	430d      	orrs	r5, r1
  TIMx->CR1 = tmpcr1;
 8005c9e:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ca2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ca8:	6918      	ldr	r0, [r3, #16]
 8005caa:	07c2      	lsls	r2, r0, #31
 8005cac:	d503      	bpl.n	8005cb6 <HAL_TIM_Base_Init+0xaa>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cae:	691d      	ldr	r5, [r3, #16]
 8005cb0:	f025 0101 	bic.w	r1, r5, #1
 8005cb4:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cbc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005cc0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005cc4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005cc8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005ccc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005cd8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005cdc:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005ce0:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005ce4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005ce8:	2000      	movs	r0, #0
}
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005cec:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cee:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf0:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005cf4:	4305      	orrs	r5, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf6:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfa:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cfc:	69a1      	ldr	r1, [r4, #24]
 8005cfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d02:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005d04:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d06:	68e0      	ldr	r0, [r4, #12]
 8005d08:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d0a:	6865      	ldr	r5, [r4, #4]
 8005d0c:	629d      	str	r5, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005d0e:	6961      	ldr	r1, [r4, #20]
 8005d10:	6319      	str	r1, [r3, #48]	@ 0x30
 8005d12:	e7c7      	b.n	8005ca4 <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 8005d14:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005d18:	f7fc fdc0 	bl	800289c <HAL_TIM_Base_MspInit>
 8005d1c:	e781      	b.n	8005c22 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d1e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d20:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d22:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d26:	4302      	orrs	r2, r0
 8005d28:	e7e9      	b.n	8005cfe <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 8005d2a:	2001      	movs	r0, #1
}
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40014400 	.word	0x40014400

08005d38 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005d38:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d123      	bne.n	8005d88 <HAL_TIM_Base_Start+0x50>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d40:	6803      	ldr	r3, [r0, #0]
 8005d42:	4a17      	ldr	r2, [pc, #92]	@ (8005da0 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d46:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d4c:	d01e      	beq.n	8005d8c <HAL_TIM_Base_Start+0x54>
 8005d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d52:	d01b      	beq.n	8005d8c <HAL_TIM_Base_Start+0x54>
 8005d54:	f5a2 3094 	sub.w	r0, r2, #75776	@ 0x12800
 8005d58:	4283      	cmp	r3, r0
 8005d5a:	d017      	beq.n	8005d8c <HAL_TIM_Base_Start+0x54>
 8005d5c:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 8005d60:	4563      	cmp	r3, ip
 8005d62:	d013      	beq.n	8005d8c <HAL_TIM_Base_Start+0x54>
 8005d64:	f50c 6280 	add.w	r2, ip, #1024	@ 0x400
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00f      	beq.n	8005d8c <HAL_TIM_Base_Start+0x54>
 8005d6c:	f502 3194 	add.w	r1, r2, #75776	@ 0x12800
 8005d70:	428b      	cmp	r3, r1
 8005d72:	d00b      	beq.n	8005d8c <HAL_TIM_Base_Start+0x54>
 8005d74:	f501 6040 	add.w	r0, r1, #3072	@ 0xc00
 8005d78:	4283      	cmp	r3, r0
 8005d7a:	d007      	beq.n	8005d8c <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	f040 0101 	orr.w	r1, r0, #1
 8005d82:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8005d84:	2000      	movs	r0, #0
 8005d86:	4770      	bx	lr
    return HAL_ERROR;
 8005d88:	2001      	movs	r0, #1
}
 8005d8a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d8c:	6899      	ldr	r1, [r3, #8]
 8005d8e:	4a05      	ldr	r2, [pc, #20]	@ (8005da4 <HAL_TIM_Base_Start+0x6c>)
 8005d90:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d92:	2a06      	cmp	r2, #6
 8005d94:	d0f6      	beq.n	8005d84 <HAL_TIM_Base_Start+0x4c>
 8005d96:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005d9a:	d1ef      	bne.n	8005d7c <HAL_TIM_Base_Start+0x44>
  return HAL_OK;
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	4770      	bx	lr
 8005da0:	40012c00 	.word	0x40012c00
 8005da4:	00010007 	.word	0x00010007

08005da8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005da8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d070      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0xea>
 8005db0:	4602      	mov	r2, r0
{
 8005db2:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8005db4:	6804      	ldr	r4, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db6:	4b50      	ldr	r3, [pc, #320]	@ (8005ef8 <HAL_TIM_ConfigClockSource+0x150>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 8005dba:	2001      	movs	r0, #1
 8005dbc:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	f882 503d 	strb.w	r5, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005dc4:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc6:	402b      	ands	r3, r5
  switch (sClockSourceConfig->ClockSource)
 8005dc8:	680d      	ldr	r5, [r1, #0]
  htim->Instance->SMCR = tmpsmcr;
 8005dca:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005dcc:	2d60      	cmp	r5, #96	@ 0x60
 8005dce:	d062      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0xee>
 8005dd0:	d825      	bhi.n	8005e1e <HAL_TIM_ConfigClockSource+0x76>
 8005dd2:	2d40      	cmp	r5, #64	@ 0x40
 8005dd4:	d078      	beq.n	8005ec8 <HAL_TIM_ConfigClockSource+0x120>
 8005dd6:	d94b      	bls.n	8005e70 <HAL_TIM_ConfigClockSource+0xc8>
 8005dd8:	2d50      	cmp	r5, #80	@ 0x50
 8005dda:	d117      	bne.n	8005e0c <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8005ddc:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005dde:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005de0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005de2:	6a23      	ldr	r3, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005de4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005de8:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dea:	f023 0501 	bic.w	r5, r3, #1
 8005dee:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df0:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005df2:	f023 05f0 	bic.w	r5, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005df6:	ea45 1000 	orr.w	r0, r5, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dfa:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 8005dfc:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dfe:	68a1      	ldr	r1, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e00:	f021 0c70 	bic.w	ip, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e04:	f04c 0357 	orr.w	r3, ip, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e08:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005e0a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005e0c:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 8005e0e:	f04f 0c00 	mov.w	ip, #0
  htim->State = HAL_TIM_STATE_READY;
 8005e12:	f882 403d 	strb.w	r4, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005e16:	f882 c03c 	strb.w	ip, [r2, #60]	@ 0x3c
}
 8005e1a:	bc30      	pop	{r4, r5}
 8005e1c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005e1e:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8005e22:	d0f2      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x62>
 8005e24:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 8005e28:	d110      	bne.n	8005e4c <HAL_TIM_ConfigClockSource+0xa4>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e2a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005e2e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e30:	432b      	orrs	r3, r5
 8005e32:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e34:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e38:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005e3c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3e:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e40:	68a0      	ldr	r0, [r4, #8]
 8005e42:	f440 4580 	orr.w	r5, r0, #16384	@ 0x4000
 8005e46:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005e48:	2000      	movs	r0, #0
 8005e4a:	e7df      	b.n	8005e0c <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8005e4c:	2d70      	cmp	r5, #112	@ 0x70
 8005e4e:	d1dd      	bne.n	8005e0c <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e50:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005e54:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e56:	432b      	orrs	r3, r5
 8005e58:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e5a:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e5e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005e62:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005e64:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005e66:	68a0      	ldr	r0, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e68:	f040 0577 	orr.w	r5, r0, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005e6c:	60a5      	str	r5, [r4, #8]
      break;
 8005e6e:	e7cc      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8005e70:	2d20      	cmp	r5, #32
 8005e72:	d002      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0xd2>
 8005e74:	d909      	bls.n	8005e8a <HAL_TIM_ConfigClockSource+0xe2>
 8005e76:	2d30      	cmp	r5, #48	@ 0x30
 8005e78:	d1c8      	bne.n	8005e0c <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8005e7a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e7c:	f020 0170 	bic.w	r1, r0, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e80:	430d      	orrs	r5, r1
 8005e82:	f045 0507 	orr.w	r5, r5, #7
  TIMx->SMCR = tmpsmcr;
 8005e86:	60a5      	str	r5, [r4, #8]
}
 8005e88:	e7bf      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8005e8a:	f035 0110 	bics.w	r1, r5, #16
 8005e8e:	d1bd      	bne.n	8005e0c <HAL_TIM_ConfigClockSource+0x64>
 8005e90:	e7f3      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0xd2>
  __HAL_LOCK(htim);
 8005e92:	2002      	movs	r0, #2
}
 8005e94:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8005e96:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005e98:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8005e9a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e9c:	f021 0ca0 	bic.w	ip, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ea0:	ea4c 1305 	orr.w	r3, ip, r5, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ea4:	6a25      	ldr	r5, [r4, #32]
 8005ea6:	f025 0110 	bic.w	r1, r5, #16
 8005eaa:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eac:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eae:	f425 4c70 	bic.w	ip, r5, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eb2:	ea4c 3000 	orr.w	r0, ip, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005eb6:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 8005eb8:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005eba:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ebc:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ec0:	f041 0567 	orr.w	r5, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005ec4:	60a5      	str	r5, [r4, #8]
}
 8005ec6:	e7a0      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x62>
                               sClockSourceConfig->ClockPolarity,
 8005ec8:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005eca:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8005ecc:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ece:	f021 050a 	bic.w	r5, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005ed2:	431d      	orrs	r5, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ed4:	6a23      	ldr	r3, [r4, #32]
 8005ed6:	f023 0101 	bic.w	r1, r3, #1
 8005eda:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005edc:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ede:	f023 01f0 	bic.w	r1, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ee2:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005ee6:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 8005ee8:	6225      	str	r5, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005eea:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eec:	f025 0c70 	bic.w	ip, r5, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ef0:	f04c 0347 	orr.w	r3, ip, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005ef4:	60a3      	str	r3, [r4, #8]
}
 8005ef6:	e788      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x62>
 8005ef8:	fffe0088 	.word	0xfffe0088

08005efc <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop

08005f00 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop

08005f04 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop

08005f08 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop

08005f0c <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop

08005f10 <HAL_TIM_IRQHandler>:
{
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8005f12:	6803      	ldr	r3, [r0, #0]
 8005f14:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f16:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f18:	07a1      	lsls	r1, r4, #30
{
 8005f1a:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f1c:	d501      	bpl.n	8005f22 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f1e:	07b2      	lsls	r2, r6, #30
 8005f20:	d457      	bmi.n	8005fd2 <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f22:	0767      	lsls	r7, r4, #29
 8005f24:	d501      	bpl.n	8005f2a <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f26:	0770      	lsls	r0, r6, #29
 8005f28:	d440      	bmi.n	8005fac <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f2a:	0721      	lsls	r1, r4, #28
 8005f2c:	d501      	bpl.n	8005f32 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f2e:	0732      	lsls	r2, r6, #28
 8005f30:	d42a      	bmi.n	8005f88 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f32:	06e7      	lsls	r7, r4, #27
 8005f34:	d501      	bpl.n	8005f3a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f36:	06f0      	lsls	r0, r6, #27
 8005f38:	d413      	bmi.n	8005f62 <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f3a:	07e1      	lsls	r1, r4, #31
 8005f3c:	d501      	bpl.n	8005f42 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f3e:	07f2      	lsls	r2, r6, #31
 8005f40:	d465      	bmi.n	800600e <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f42:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f46:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f4a:	d052      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f4c:	0633      	lsls	r3, r6, #24
 8005f4e:	d466      	bmi.n	800601e <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f50:	0660      	lsls	r0, r4, #25
 8005f52:	d501      	bpl.n	8005f58 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f54:	0671      	lsls	r1, r6, #25
 8005f56:	d473      	bmi.n	8006040 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f58:	06a2      	lsls	r2, r4, #26
 8005f5a:	d501      	bpl.n	8005f60 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f5c:	06b3      	lsls	r3, r6, #26
 8005f5e:	d44d      	bmi.n	8005ffc <HAL_TIM_IRQHandler+0xec>
}
 8005f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f62:	682b      	ldr	r3, [r5, #0]
 8005f64:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f68:	2108      	movs	r1, #8
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f6c:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f6e:	69df      	ldr	r7, [r3, #28]
 8005f70:	f417 7f40 	tst.w	r7, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005f74:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f76:	d174      	bne.n	8006062 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f78:	f7ff ffc2 	bl	8005f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f7ff ffc3 	bl	8005f08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f82:	2000      	movs	r0, #0
 8005f84:	7728      	strb	r0, [r5, #28]
 8005f86:	e7d8      	b.n	8005f3a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f8e:	2104      	movs	r1, #4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f92:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f94:	69df      	ldr	r7, [r3, #28]
 8005f96:	07bb      	lsls	r3, r7, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005f98:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f9a:	d15f      	bne.n	800605c <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9c:	f7ff ffb0 	bl	8005f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f7ff ffb1 	bl	8005f08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	7728      	strb	r0, [r5, #28]
 8005faa:	e7c2      	b.n	8005f32 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb2:	2102      	movs	r1, #2
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb6:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fb8:	699f      	ldr	r7, [r3, #24]
 8005fba:	f417 7f40 	tst.w	r7, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005fbe:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fc0:	d149      	bne.n	8006056 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	f7ff ff9d 	bl	8005f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f7ff ff9e 	bl	8005f08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fcc:	2000      	movs	r0, #0
 8005fce:	7728      	strb	r0, [r5, #28]
 8005fd0:	e7ab      	b.n	8005f2a <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fd2:	f06f 0202 	mvn.w	r2, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fd6:	2101      	movs	r1, #1
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fda:	7701      	strb	r1, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fdc:	699f      	ldr	r7, [r3, #24]
 8005fde:	07bb      	lsls	r3, r7, #30
 8005fe0:	d136      	bne.n	8006050 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	f7ff ff8d 	bl	8005f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f7ff ff8e 	bl	8005f08 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fec:	2000      	movs	r0, #0
 8005fee:	7728      	strb	r0, [r5, #28]
 8005ff0:	e797      	b.n	8005f22 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ff2:	2f00      	cmp	r7, #0
 8005ff4:	d0ac      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ff6:	0637      	lsls	r7, r6, #24
 8005ff8:	d41a      	bmi.n	8006030 <HAL_TIM_IRQHandler+0x120>
 8005ffa:	e7a9      	b.n	8005f50 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ffc:	682e      	ldr	r6, [r5, #0]
 8005ffe:	f06f 0420 	mvn.w	r4, #32
 8006002:	6134      	str	r4, [r6, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006004:	4628      	mov	r0, r5
}
 8006006:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 800600a:	f000 b87d 	b.w	8006108 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800600e:	682b      	ldr	r3, [r5, #0]
 8006010:	f06f 0201 	mvn.w	r2, #1
 8006014:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006016:	4628      	mov	r0, r5
 8006018:	f7ff ff70 	bl	8005efc <HAL_TIM_PeriodElapsedCallback>
 800601c:	e791      	b.n	8005f42 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800601e:	6829      	ldr	r1, [r5, #0]
 8006020:	f46f 5002 	mvn.w	r0, #8320	@ 0x2080
 8006024:	6108      	str	r0, [r1, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006026:	4628      	mov	r0, r5
 8006028:	f000 f870 	bl	800610c <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800602c:	2f00      	cmp	r7, #0
 800602e:	d08f      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006036:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006038:	4628      	mov	r0, r5
 800603a:	f000 f869 	bl	8006110 <HAL_TIMEx_Break2Callback>
 800603e:	e787      	b.n	8005f50 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006040:	682f      	ldr	r7, [r5, #0]
 8006042:	f06f 0140 	mvn.w	r1, #64	@ 0x40
 8006046:	6139      	str	r1, [r7, #16]
      HAL_TIM_TriggerCallback(htim);
 8006048:	4628      	mov	r0, r5
 800604a:	f7ff ff5f 	bl	8005f0c <HAL_TIM_TriggerCallback>
 800604e:	e783      	b.n	8005f58 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 8006050:	f7ff ff58 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8006054:	e7ca      	b.n	8005fec <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8006056:	f7ff ff55 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 800605a:	e7b7      	b.n	8005fcc <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 800605c:	f7ff ff52 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8006060:	e7a1      	b.n	8005fa6 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8006062:	f7ff ff4f 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8006066:	e78c      	b.n	8005f82 <HAL_TIM_IRQHandler+0x72>

08006068 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006068:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800606c:	2a01      	cmp	r2, #1
 800606e:	d044      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006070:	6802      	ldr	r2, [r0, #0]
{
 8006072:	b470      	push	{r4, r5, r6}
 8006074:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006076:	4e22      	ldr	r6, [pc, #136]	@ (8006100 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	2002      	movs	r0, #2
 800607a:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800607e:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 8006080:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006082:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006084:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006086:	d026      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006088:	f506 6c00 	add.w	ip, r6, #2048	@ 0x800
 800608c:	4562      	cmp	r2, ip
 800608e:	d02b      	beq.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8006090:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006094:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006096:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800609a:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609c:	d00e      	beq.n	80060bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800609e:	4e19      	ldr	r6, [pc, #100]	@ (8006104 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80060a0:	42b2      	cmp	r2, r6
 80060a2:	d00b      	beq.n	80060bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80060a4:	f506 6580 	add.w	r5, r6, #1024	@ 0x400
 80060a8:	42aa      	cmp	r2, r5
 80060aa:	d007      	beq.n	80060bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80060ac:	f505 6c80 	add.w	ip, r5, #1024	@ 0x400
 80060b0:	4562      	cmp	r2, ip
 80060b2:	d003      	beq.n	80060bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80060b4:	f50c 309a 	add.w	r0, ip, #78848	@ 0x13400
 80060b8:	4282      	cmp	r2, r0
 80060ba:	d104      	bne.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060bc:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060be:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060c2:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060c4:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80060c6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80060ce:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80060d2:	bc70      	pop	{r4, r5, r6}
 80060d4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060d6:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060d8:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060dc:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80060de:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060e2:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80060e4:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e6:	e7e9      	b.n	80060bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060e8:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060ea:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060ee:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80060f0:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f4:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 80060f6:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f8:	e7e0      	b.n	80060bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 80060fa:	2002      	movs	r0, #2
}
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40012c00 	.word	0x40012c00
 8006104:	40000400 	.word	0x40000400

08006108 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop

0800610c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop

08006110 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop

08006114 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006118:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800611a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800611c:	2820      	cmp	r0, #32
 800611e:	d17c      	bne.n	800621a <HAL_UART_Transmit+0x106>
  {
    if ((pData == NULL) || (Size == 0U))
 8006120:	4688      	mov	r8, r1
 8006122:	b109      	cbz	r1, 8006128 <HAL_UART_Transmit+0x14>
 8006124:	4617      	mov	r7, r2
 8006126:	b912      	cbnz	r2, 800612e <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 8006128:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 800612a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800612e:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006130:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006134:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006136:	f8c4 9084 	str.w	r9, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800613a:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800613c:	f7fc fd7c 	bl	8002c38 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006140:	68a1      	ldr	r1, [r4, #8]
    huart->TxXferSize  = Size;
 8006142:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006146:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800614a:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 800614e:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006150:	d072      	beq.n	8006238 <HAL_UART_Transmit+0x124>
    while (huart->TxXferCount > 0U)
 8006152:	f8b4 0052 	ldrh.w	r0, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006156:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8006158:	b287      	uxth	r7, r0
 800615a:	2f00      	cmp	r7, #0
 800615c:	d02c      	beq.n	80061b8 <HAL_UART_Transmit+0xa4>
 800615e:	1c68      	adds	r0, r5, #1
 8006160:	d150      	bne.n	8006204 <HAL_UART_Transmit+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006162:	69d0      	ldr	r0, [r2, #28]
 8006164:	0603      	lsls	r3, r0, #24
 8006166:	d414      	bmi.n	8006192 <HAL_UART_Transmit+0x7e>
 8006168:	69d7      	ldr	r7, [r2, #28]
 800616a:	0638      	lsls	r0, r7, #24
 800616c:	d411      	bmi.n	8006192 <HAL_UART_Transmit+0x7e>
 800616e:	69d3      	ldr	r3, [r2, #28]
 8006170:	0619      	lsls	r1, r3, #24
 8006172:	d40e      	bmi.n	8006192 <HAL_UART_Transmit+0x7e>
 8006174:	69d1      	ldr	r1, [r2, #28]
 8006176:	060b      	lsls	r3, r1, #24
 8006178:	d40b      	bmi.n	8006192 <HAL_UART_Transmit+0x7e>
 800617a:	69d0      	ldr	r0, [r2, #28]
 800617c:	0607      	lsls	r7, r0, #24
 800617e:	d408      	bmi.n	8006192 <HAL_UART_Transmit+0x7e>
 8006180:	69d7      	ldr	r7, [r2, #28]
 8006182:	0638      	lsls	r0, r7, #24
 8006184:	d405      	bmi.n	8006192 <HAL_UART_Transmit+0x7e>
 8006186:	69d3      	ldr	r3, [r2, #28]
 8006188:	0619      	lsls	r1, r3, #24
 800618a:	d402      	bmi.n	8006192 <HAL_UART_Transmit+0x7e>
 800618c:	69d1      	ldr	r1, [r2, #28]
 800618e:	060b      	lsls	r3, r1, #24
 8006190:	d5e7      	bpl.n	8006162 <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 8006192:	f1b8 0f00 	cmp.w	r8, #0
 8006196:	d03b      	beq.n	8006210 <HAL_UART_Transmit+0xfc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006198:	f818 0b01 	ldrb.w	r0, [r8], #1
 800619c:	8510      	strh	r0, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800619e:	f8b4 c052 	ldrh.w	ip, [r4, #82]	@ 0x52
 80061a2:	f10c 3eff 	add.w	lr, ip, #4294967295
 80061a6:	fa1f f38e 	uxth.w	r3, lr
 80061aa:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80061ae:	f8b4 1052 	ldrh.w	r1, [r4, #82]	@ 0x52
 80061b2:	b288      	uxth	r0, r1
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d1d2      	bne.n	800615e <HAL_UART_Transmit+0x4a>
 80061b8:	1c69      	adds	r1, r5, #1
 80061ba:	d139      	bne.n	8006230 <HAL_UART_Transmit+0x11c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061bc:	69d1      	ldr	r1, [r2, #28]
 80061be:	064b      	lsls	r3, r1, #25
 80061c0:	d414      	bmi.n	80061ec <HAL_UART_Transmit+0xd8>
 80061c2:	69d0      	ldr	r0, [r2, #28]
 80061c4:	0645      	lsls	r5, r0, #25
 80061c6:	d411      	bmi.n	80061ec <HAL_UART_Transmit+0xd8>
 80061c8:	69d5      	ldr	r5, [r2, #28]
 80061ca:	0668      	lsls	r0, r5, #25
 80061cc:	d40e      	bmi.n	80061ec <HAL_UART_Transmit+0xd8>
 80061ce:	69d6      	ldr	r6, [r2, #28]
 80061d0:	0671      	lsls	r1, r6, #25
 80061d2:	d40b      	bmi.n	80061ec <HAL_UART_Transmit+0xd8>
 80061d4:	69d7      	ldr	r7, [r2, #28]
 80061d6:	067b      	lsls	r3, r7, #25
 80061d8:	d408      	bmi.n	80061ec <HAL_UART_Transmit+0xd8>
 80061da:	69d3      	ldr	r3, [r2, #28]
 80061dc:	065f      	lsls	r7, r3, #25
 80061de:	d405      	bmi.n	80061ec <HAL_UART_Transmit+0xd8>
 80061e0:	69d1      	ldr	r1, [r2, #28]
 80061e2:	064e      	lsls	r6, r1, #25
 80061e4:	d402      	bmi.n	80061ec <HAL_UART_Transmit+0xd8>
 80061e6:	69d0      	ldr	r0, [r2, #28]
 80061e8:	0645      	lsls	r5, r0, #25
 80061ea:	d5e7      	bpl.n	80061bc <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 80061ec:	2220      	movs	r2, #32
 80061ee:	67e2      	str	r2, [r4, #124]	@ 0x7c
    return HAL_OK;
 80061f0:	2000      	movs	r0, #0
 80061f2:	e79a      	b.n	800612a <HAL_UART_Transmit+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f4:	f7fc fd20 	bl	8002c38 <HAL_GetTick>
 80061f8:	1b81      	subs	r1, r0, r6
 80061fa:	428d      	cmp	r5, r1
 80061fc:	d322      	bcc.n	8006244 <HAL_UART_Transmit+0x130>
 80061fe:	b30d      	cbz	r5, 8006244 <HAL_UART_Transmit+0x130>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006200:	6822      	ldr	r2, [r4, #0]
 8006202:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006204:	69d3      	ldr	r3, [r2, #28]
 8006206:	061f      	lsls	r7, r3, #24
 8006208:	d5f4      	bpl.n	80061f4 <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 800620a:	f1b8 0f00 	cmp.w	r8, #0
 800620e:	d1c3      	bne.n	8006198 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006210:	f839 7b02 	ldrh.w	r7, [r9], #2
 8006214:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8006218:	e7c0      	b.n	800619c <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 800621a:	2002      	movs	r0, #2
}
 800621c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006220:	f7fc fd0a 	bl	8002c38 <HAL_GetTick>
 8006224:	1b87      	subs	r7, r0, r6
 8006226:	42bd      	cmp	r5, r7
 8006228:	d30c      	bcc.n	8006244 <HAL_UART_Transmit+0x130>
 800622a:	b15d      	cbz	r5, 8006244 <HAL_UART_Transmit+0x130>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800622c:	6822      	ldr	r2, [r4, #0]
 800622e:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006230:	69d2      	ldr	r2, [r2, #28]
 8006232:	0657      	lsls	r7, r2, #25
 8006234:	d5f4      	bpl.n	8006220 <HAL_UART_Transmit+0x10c>
 8006236:	e7d9      	b.n	80061ec <HAL_UART_Transmit+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006238:	6922      	ldr	r2, [r4, #16]
 800623a:	2a00      	cmp	r2, #0
 800623c:	d189      	bne.n	8006152 <HAL_UART_Transmit+0x3e>
 800623e:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8006240:	4690      	mov	r8, r2
 8006242:	e786      	b.n	8006152 <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8006244:	2320      	movs	r3, #32
 8006246:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8006248:	2003      	movs	r0, #3
}
 800624a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800624e:	bf00      	nop

08006250 <HAL_UART_Receive>:
{
 8006250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006254:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8006256:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800625a:	2820      	cmp	r0, #32
 800625c:	d161      	bne.n	8006322 <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 800625e:	4689      	mov	r9, r1
 8006260:	b109      	cbz	r1, 8006266 <HAL_UART_Receive+0x16>
 8006262:	4617      	mov	r7, r2
 8006264:	b912      	cbnz	r2, 800626c <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 8006266:	2001      	movs	r0, #1
}
 8006268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626c:	2500      	movs	r5, #0
 800626e:	4698      	mov	r8, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006270:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006272:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006276:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627a:	6625      	str	r5, [r4, #96]	@ 0x60
    tickstart = HAL_GetTick();
 800627c:	f7fc fcdc 	bl	8002c38 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8006280:	f8a4 7058 	strh.w	r7, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006284:	f8a4 705a 	strh.w	r7, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8006288:	68a7      	ldr	r7, [r4, #8]
 800628a:	f5b7 5f80 	cmp.w	r7, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800628e:	4606      	mov	r6, r0
    UART_MASK_COMPUTATION(huart);
 8006290:	f000 80f1 	beq.w	8006476 <HAL_UART_Receive+0x226>
 8006294:	2f00      	cmp	r7, #0
 8006296:	f040 8108 	bne.w	80064aa <HAL_UART_Receive+0x25a>
 800629a:	6922      	ldr	r2, [r4, #16]
    uhMask = huart->Mask;
 800629c:	2a00      	cmp	r2, #0
 800629e:	bf0c      	ite	eq
 80062a0:	25ff      	moveq	r5, #255	@ 0xff
 80062a2:	257f      	movne	r5, #127	@ 0x7f
    while (huart->RxXferCount > 0U)
 80062a4:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 80062a8:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 80062ac:	fa1f f38c 	uxth.w	r3, ip
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d030      	beq.n	8006316 <HAL_UART_Receive+0xc6>
 80062b4:	6822      	ldr	r2, [r4, #0]
 80062b6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80062ba:	d135      	bne.n	8006328 <HAL_UART_Receive+0xd8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062bc:	69d1      	ldr	r1, [r2, #28]
 80062be:	0688      	lsls	r0, r1, #26
 80062c0:	d414      	bmi.n	80062ec <HAL_UART_Receive+0x9c>
 80062c2:	69d0      	ldr	r0, [r2, #28]
 80062c4:	0683      	lsls	r3, r0, #26
 80062c6:	d411      	bmi.n	80062ec <HAL_UART_Receive+0x9c>
 80062c8:	69d3      	ldr	r3, [r2, #28]
 80062ca:	0698      	lsls	r0, r3, #26
 80062cc:	d40e      	bmi.n	80062ec <HAL_UART_Receive+0x9c>
 80062ce:	69d1      	ldr	r1, [r2, #28]
 80062d0:	0689      	lsls	r1, r1, #26
 80062d2:	d40b      	bmi.n	80062ec <HAL_UART_Receive+0x9c>
 80062d4:	69d0      	ldr	r0, [r2, #28]
 80062d6:	0683      	lsls	r3, r0, #26
 80062d8:	d408      	bmi.n	80062ec <HAL_UART_Receive+0x9c>
 80062da:	69d3      	ldr	r3, [r2, #28]
 80062dc:	0698      	lsls	r0, r3, #26
 80062de:	d405      	bmi.n	80062ec <HAL_UART_Receive+0x9c>
 80062e0:	69d1      	ldr	r1, [r2, #28]
 80062e2:	0689      	lsls	r1, r1, #26
 80062e4:	d402      	bmi.n	80062ec <HAL_UART_Receive+0x9c>
 80062e6:	69d0      	ldr	r0, [r2, #28]
 80062e8:	0683      	lsls	r3, r0, #26
 80062ea:	d5e7      	bpl.n	80062bc <HAL_UART_Receive+0x6c>
      if (pdata8bits == NULL)
 80062ec:	f1b9 0f00 	cmp.w	r9, #0
 80062f0:	f000 80c8 	beq.w	8006484 <HAL_UART_Receive+0x234>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80062f4:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80062f6:	402a      	ands	r2, r5
 80062f8:	f809 2b01 	strb.w	r2, [r9], #1
      huart->RxXferCount--;
 80062fc:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	@ 0x5a
 8006300:	f10e 3cff 	add.w	ip, lr, #4294967295
 8006304:	fa1f f38c 	uxth.w	r3, ip
 8006308:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800630c:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
 8006310:	b288      	uxth	r0, r1
 8006312:	2800      	cmp	r0, #0
 8006314:	d1ce      	bne.n	80062b4 <HAL_UART_Receive+0x64>
    huart->RxState = HAL_UART_STATE_READY;
 8006316:	2620      	movs	r6, #32
 8006318:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    return HAL_OK;
 800631c:	2000      	movs	r0, #0
}
 800631e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8006322:	2002      	movs	r0, #2
}
 8006324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006328:	69d1      	ldr	r1, [r2, #28]
 800632a:	0689      	lsls	r1, r1, #26
 800632c:	d4de      	bmi.n	80062ec <HAL_UART_Receive+0x9c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632e:	f7fc fc83 	bl	8002c38 <HAL_GetTick>
 8006332:	1b80      	subs	r0, r0, r6
 8006334:	4580      	cmp	r8, r0
 8006336:	f0c0 8098 	bcc.w	800646a <HAL_UART_Receive+0x21a>
 800633a:	f1b8 0f00 	cmp.w	r8, #0
 800633e:	f000 8094 	beq.w	800646a <HAL_UART_Receive+0x21a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	6813      	ldr	r3, [r2, #0]
 8006346:	0758      	lsls	r0, r3, #29
 8006348:	d5ee      	bpl.n	8006328 <HAL_UART_Receive+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800634a:	69d1      	ldr	r1, [r2, #28]
 800634c:	0709      	lsls	r1, r1, #28
 800634e:	f100 80ba 	bmi.w	80064c6 <HAL_UART_Receive+0x276>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006352:	69d0      	ldr	r0, [r2, #28]
 8006354:	0503      	lsls	r3, r0, #20
 8006356:	d5e7      	bpl.n	8006328 <HAL_UART_Receive+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006358:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800635c:	6215      	str	r5, [r2, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	e852 6f00 	ldrex	r6, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006362:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	e842 7300 	strex	r3, r7, [r2]
 800636a:	b38b      	cbz	r3, 80063d0 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	e852 1f00 	ldrex	r1, [r2]
 8006370:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	e842 0500 	strex	r5, r0, [r2]
 8006378:	b355      	cbz	r5, 80063d0 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	e852 6f00 	ldrex	r6, [r2]
 800637e:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	e842 7300 	strex	r3, r7, [r2]
 8006386:	b31b      	cbz	r3, 80063d0 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	e852 1f00 	ldrex	r1, [r2]
 800638c:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	e842 0500 	strex	r5, r0, [r2]
 8006394:	b1e5      	cbz	r5, 80063d0 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	e852 6f00 	ldrex	r6, [r2]
 800639a:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	e842 7300 	strex	r3, r7, [r2]
 80063a2:	b1ab      	cbz	r3, 80063d0 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	e852 1f00 	ldrex	r1, [r2]
 80063a8:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	e842 0500 	strex	r5, r0, [r2]
 80063b0:	b175      	cbz	r5, 80063d0 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	e852 6f00 	ldrex	r6, [r2]
 80063b6:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	e842 7300 	strex	r3, r7, [r2]
 80063be:	b13b      	cbz	r3, 80063d0 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	e852 1f00 	ldrex	r1, [r2]
 80063c4:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	e842 0500 	strex	r5, r0, [r2]
 80063cc:	2d00      	cmp	r5, #0
 80063ce:	d1c6      	bne.n	800635e <HAL_UART_Receive+0x10e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d0:	f102 0e08 	add.w	lr, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	e85e 6f00 	ldrex	r6, [lr]
 80063d8:	f026 0701 	bic.w	r7, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	e84e 7300 	strex	r3, r7, [lr]
 80063e0:	b3ab      	cbz	r3, 800644e <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	f102 0908 	add.w	r9, r2, #8
 80063e6:	e859 1f00 	ldrex	r1, [r9]
 80063ea:	f021 0601 	bic.w	r6, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	f102 0508 	add.w	r5, r2, #8
 80063f2:	e845 6000 	strex	r0, r6, [r5]
 80063f6:	b350      	cbz	r0, 800644e <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	e85e 7f00 	ldrex	r7, [lr]
 80063fc:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	e84e 3100 	strex	r1, r3, [lr]
 8006404:	b319      	cbz	r1, 800644e <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	e85e 6f00 	ldrex	r6, [lr]
 800640a:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	e84e 5000 	strex	r0, r5, [lr]
 8006412:	b1e0      	cbz	r0, 800644e <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	e85e 7f00 	ldrex	r7, [lr]
 8006418:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	e84e 3100 	strex	r1, r3, [lr]
 8006420:	b1a9      	cbz	r1, 800644e <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006422:	e85e 6f00 	ldrex	r6, [lr]
 8006426:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	e84e 5000 	strex	r0, r5, [lr]
 800642e:	b170      	cbz	r0, 800644e <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	e85e 7f00 	ldrex	r7, [lr]
 8006434:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	e84e 3100 	strex	r1, r3, [lr]
 800643c:	b139      	cbz	r1, 800644e <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	e85e 6f00 	ldrex	r6, [lr]
 8006442:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	e84e 5000 	strex	r0, r5, [lr]
 800644a:	2800      	cmp	r0, #0
 800644c:	d1c0      	bne.n	80063d0 <HAL_UART_Receive+0x180>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800644e:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8006450:	2f01      	cmp	r7, #1
 8006452:	f000 80c1 	beq.w	80065d8 <HAL_UART_Receive+0x388>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006458:	2220      	movs	r2, #32
 800645a:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800645e:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006460:	6620      	str	r0, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006462:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006466:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800646a:	2320      	movs	r3, #32
 800646c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8006470:	2003      	movs	r0, #3
}
 8006472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8006476:	6920      	ldr	r0, [r4, #16]
 8006478:	bb10      	cbnz	r0, 80064c0 <HAL_UART_Receive+0x270>
 800647a:	464f      	mov	r7, r9
    uhMask = huart->Mask;
 800647c:	f240 15ff 	movw	r5, #511	@ 0x1ff
      pdata8bits  = NULL;
 8006480:	4681      	mov	r9, r0
 8006482:	e70f      	b.n	80062a4 <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006484:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 8006486:	402b      	ands	r3, r5
 8006488:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 800648c:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	@ 0x5a
 8006490:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006494:	b288      	uxth	r0, r1
 8006496:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800649a:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	@ 0x5a
 800649e:	fa1f f38c 	uxth.w	r3, ip
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f47f af07 	bne.w	80062b6 <HAL_UART_Receive+0x66>
 80064a8:	e735      	b.n	8006316 <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 80064aa:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
    uhMask = huart->Mask;
 80064ae:	462f      	mov	r7, r5
    UART_MASK_COMPUTATION(huart);
 80064b0:	f47f aef8 	bne.w	80062a4 <HAL_UART_Receive+0x54>
 80064b4:	6921      	ldr	r1, [r4, #16]
    uhMask = huart->Mask;
 80064b6:	2900      	cmp	r1, #0
 80064b8:	bf14      	ite	ne
 80064ba:	253f      	movne	r5, #63	@ 0x3f
 80064bc:	257f      	moveq	r5, #127	@ 0x7f
 80064be:	e6f1      	b.n	80062a4 <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 80064c0:	462f      	mov	r7, r5
    uhMask = huart->Mask;
 80064c2:	25ff      	movs	r5, #255	@ 0xff
 80064c4:	e6ee      	b.n	80062a4 <HAL_UART_Receive+0x54>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064c6:	2708      	movs	r7, #8
 80064c8:	6217      	str	r7, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	e852 8f00 	ldrex	r8, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ce:	f428 7990 	bic.w	r9, r8, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	e842 9300 	strex	r3, r9, [r2]
 80064d6:	b38b      	cbz	r3, 800653c <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	e852 1f00 	ldrex	r1, [r2]
 80064dc:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	e842 6500 	strex	r5, r6, [r2]
 80064e4:	b355      	cbz	r5, 800653c <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	e852 0f00 	ldrex	r0, [r2]
 80064ea:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	e842 7300 	strex	r3, r7, [r2]
 80064f2:	b31b      	cbz	r3, 800653c <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	e852 1f00 	ldrex	r1, [r2]
 80064f8:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	e842 6500 	strex	r5, r6, [r2]
 8006500:	b1e5      	cbz	r5, 800653c <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	e852 0f00 	ldrex	r0, [r2]
 8006506:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	e842 7300 	strex	r3, r7, [r2]
 800650e:	b1ab      	cbz	r3, 800653c <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	e852 1f00 	ldrex	r1, [r2]
 8006514:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006518:	e842 6500 	strex	r5, r6, [r2]
 800651c:	b175      	cbz	r5, 800653c <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	e852 0f00 	ldrex	r0, [r2]
 8006522:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	e842 7300 	strex	r3, r7, [r2]
 800652a:	b13b      	cbz	r3, 800653c <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	e852 1f00 	ldrex	r1, [r2]
 8006530:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	e842 6500 	strex	r5, r6, [r2]
 8006538:	2d00      	cmp	r5, #0
 800653a:	d1c6      	bne.n	80064ca <HAL_UART_Receive+0x27a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653c:	f102 0e08 	add.w	lr, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	e85e 0f00 	ldrex	r0, [lr]
 8006544:	f020 0701 	bic.w	r7, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	e84e 7300 	strex	r3, r7, [lr]
 800654c:	b3ab      	cbz	r3, 80065ba <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	f102 0908 	add.w	r9, r2, #8
 8006552:	e859 1f00 	ldrex	r1, [r9]
 8006556:	f021 0601 	bic.w	r6, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	f102 0508 	add.w	r5, r2, #8
 800655e:	e845 6000 	strex	r0, r6, [r5]
 8006562:	b350      	cbz	r0, 80065ba <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	e85e 7f00 	ldrex	r7, [lr]
 8006568:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	e84e 3100 	strex	r1, r3, [lr]
 8006570:	b319      	cbz	r1, 80065ba <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	e85e 6f00 	ldrex	r6, [lr]
 8006576:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	e84e 5000 	strex	r0, r5, [lr]
 800657e:	b1e0      	cbz	r0, 80065ba <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	e85e 7f00 	ldrex	r7, [lr]
 8006584:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	e84e 3100 	strex	r1, r3, [lr]
 800658c:	b1a9      	cbz	r1, 80065ba <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	e85e 6f00 	ldrex	r6, [lr]
 8006592:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	e84e 5000 	strex	r0, r5, [lr]
 800659a:	b170      	cbz	r0, 80065ba <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	e85e 7f00 	ldrex	r7, [lr]
 80065a0:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	e84e 3100 	strex	r1, r3, [lr]
 80065a8:	b139      	cbz	r1, 80065ba <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	e85e 6f00 	ldrex	r6, [lr]
 80065ae:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	e84e 5000 	strex	r0, r5, [lr]
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d1c0      	bne.n	800653c <HAL_UART_Receive+0x2ec>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ba:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 80065bc:	2f01      	cmp	r7, #1
 80065be:	d053      	beq.n	8006668 <HAL_UART_Receive+0x418>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c0:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 80065c2:	2720      	movs	r7, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065c4:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 80065c6:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80065ca:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065cc:	6620      	str	r0, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80065ce:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065d2:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          return HAL_ERROR;
 80065d6:	e748      	b.n	800646a <HAL_UART_Receive+0x21a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	e852 ef00 	ldrex	lr, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065dc:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	e842 c300 	strex	r3, ip, [r2]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f43f af36 	beq.w	8006456 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	e852 1f00 	ldrex	r1, [r2]
 80065ee:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	e842 6500 	strex	r5, r6, [r2]
 80065f6:	2d00      	cmp	r5, #0
 80065f8:	f43f af2d 	beq.w	8006456 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	e852 0f00 	ldrex	r0, [r2]
 8006600:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	e842 7300 	strex	r3, r7, [r2]
 8006608:	2b00      	cmp	r3, #0
 800660a:	f43f af24 	beq.w	8006456 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	e852 1f00 	ldrex	r1, [r2]
 8006612:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	e842 6500 	strex	r5, r6, [r2]
 800661a:	2d00      	cmp	r5, #0
 800661c:	f43f af1b 	beq.w	8006456 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	e852 0f00 	ldrex	r0, [r2]
 8006624:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	e842 7300 	strex	r3, r7, [r2]
 800662c:	2b00      	cmp	r3, #0
 800662e:	f43f af12 	beq.w	8006456 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	e852 1f00 	ldrex	r1, [r2]
 8006636:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	e842 6500 	strex	r5, r6, [r2]
 800663e:	2d00      	cmp	r5, #0
 8006640:	f43f af09 	beq.w	8006456 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	e852 0f00 	ldrex	r0, [r2]
 8006648:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	e842 7300 	strex	r3, r7, [r2]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f43f af00 	beq.w	8006456 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	e852 1f00 	ldrex	r1, [r2]
 800665a:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	e842 6500 	strex	r5, r6, [r2]
 8006662:	2d00      	cmp	r5, #0
 8006664:	d1b8      	bne.n	80065d8 <HAL_UART_Receive+0x388>
 8006666:	e6f6      	b.n	8006456 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	e852 ef00 	ldrex	lr, [r2]
 800666c:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	e842 c300 	strex	r3, ip, [r2]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0a3      	beq.n	80065c0 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	e852 1f00 	ldrex	r1, [r2]
 800667c:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	e842 6500 	strex	r5, r6, [r2]
 8006684:	2d00      	cmp	r5, #0
 8006686:	d09b      	beq.n	80065c0 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	e852 0f00 	ldrex	r0, [r2]
 800668c:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	e842 7300 	strex	r3, r7, [r2]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d093      	beq.n	80065c0 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	e852 1f00 	ldrex	r1, [r2]
 800669c:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	e842 6500 	strex	r5, r6, [r2]
 80066a4:	2d00      	cmp	r5, #0
 80066a6:	d08b      	beq.n	80065c0 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	e852 0f00 	ldrex	r0, [r2]
 80066ac:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	e842 7300 	strex	r3, r7, [r2]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d083      	beq.n	80065c0 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	e852 1f00 	ldrex	r1, [r2]
 80066bc:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	e842 6500 	strex	r5, r6, [r2]
 80066c4:	2d00      	cmp	r5, #0
 80066c6:	f43f af7b 	beq.w	80065c0 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	e852 0f00 	ldrex	r0, [r2]
 80066ce:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	e842 7300 	strex	r3, r7, [r2]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f43f af72 	beq.w	80065c0 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	e852 1f00 	ldrex	r1, [r2]
 80066e0:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	e842 6500 	strex	r5, r6, [r2]
 80066e8:	2d00      	cmp	r5, #0
 80066ea:	d1bd      	bne.n	8006668 <HAL_UART_Receive+0x418>
 80066ec:	e768      	b.n	80065c0 <HAL_UART_Receive+0x370>
 80066ee:	bf00      	nop

080066f0 <UART_SetConfig>:
{
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80066f4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066f6:	6882      	ldr	r2, [r0, #8]
 80066f8:	6900      	ldr	r0, [r0, #16]
 80066fa:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066fc:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066fe:	4302      	orrs	r2, r0
 8006700:	430a      	orrs	r2, r1
 8006702:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006704:	4981      	ldr	r1, [pc, #516]	@ (800690c <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006706:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006708:	4029      	ands	r1, r5
 800670a:	430a      	orrs	r2, r1
 800670c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006712:	497f      	ldr	r1, [pc, #508]	@ (8006910 <UART_SetConfig+0x220>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006714:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006718:	432a      	orrs	r2, r5
 800671a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800671c:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800671e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006720:	689d      	ldr	r5, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006722:	d040      	beq.n	80067a6 <UART_SetConfig+0xb6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006724:	f425 6130 	bic.w	r1, r5, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006728:	6a25      	ldr	r5, [r4, #32]
 800672a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800672c:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800672e:	4979      	ldr	r1, [pc, #484]	@ (8006914 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006730:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006732:	428b      	cmp	r3, r1
 8006734:	d115      	bne.n	8006762 <UART_SetConfig+0x72>
 8006736:	4a78      	ldr	r2, [pc, #480]	@ (8006918 <UART_SetConfig+0x228>)
 8006738:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800673c:	f003 0503 	and.w	r5, r3, #3
 8006740:	2d02      	cmp	r5, #2
 8006742:	f000 808e 	beq.w	8006862 <UART_SetConfig+0x172>
 8006746:	2d03      	cmp	r5, #3
 8006748:	d078      	beq.n	800683c <UART_SetConfig+0x14c>
 800674a:	2d01      	cmp	r5, #1
 800674c:	d06e      	beq.n	800682c <UART_SetConfig+0x13c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800674e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006752:	f000 80d0 	beq.w	80068f6 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006756:	f7fe fb3b 	bl	8004dd0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800675a:	2800      	cmp	r0, #0
 800675c:	d173      	bne.n	8006846 <UART_SetConfig+0x156>
        pclk = (uint32_t) HSI_VALUE;
 800675e:	2000      	movs	r0, #0
 8006760:	e01d      	b.n	800679e <UART_SetConfig+0xae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006762:	4a6e      	ldr	r2, [pc, #440]	@ (800691c <UART_SetConfig+0x22c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d110      	bne.n	800678a <UART_SetConfig+0x9a>
 8006768:	4d6b      	ldr	r5, [pc, #428]	@ (8006918 <UART_SetConfig+0x228>)
 800676a:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800676e:	f001 0c0c 	and.w	ip, r1, #12
 8006772:	f1bc 0f0c 	cmp.w	ip, #12
 8006776:	d811      	bhi.n	800679c <UART_SetConfig+0xac>
 8006778:	e8df f00c 	tbb	[pc, ip]
 800677c:	10101082 	.word	0x10101082
 8006780:	10101058 	.word	0x10101058
 8006784:	10101073 	.word	0x10101073
 8006788:	60          	.byte	0x60
 8006789:	00          	.byte	0x00
 800678a:	4d65      	ldr	r5, [pc, #404]	@ (8006920 <UART_SetConfig+0x230>)
 800678c:	42ab      	cmp	r3, r5
 800678e:	d07d      	beq.n	800688c <UART_SetConfig+0x19c>
 8006790:	4964      	ldr	r1, [pc, #400]	@ (8006924 <UART_SetConfig+0x234>)
 8006792:	428b      	cmp	r3, r1
 8006794:	d03f      	beq.n	8006816 <UART_SetConfig+0x126>
 8006796:	4a64      	ldr	r2, [pc, #400]	@ (8006928 <UART_SetConfig+0x238>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d067      	beq.n	800686c <UART_SetConfig+0x17c>
        ret = HAL_ERROR;
 800679c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800679e:	2200      	movs	r2, #0
 80067a0:	e9c4 221a 	strd	r2, r2, [r4, #104]	@ 0x68
}
 80067a4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067a6:	f425 6130 	bic.w	r1, r5, #2816	@ 0xb00
 80067aa:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ac:	485a      	ldr	r0, [pc, #360]	@ (8006918 <UART_SetConfig+0x228>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067ae:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067b0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80067b4:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 80067b8:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80067bc:	d07e      	beq.n	80068bc <UART_SetConfig+0x1cc>
 80067be:	d807      	bhi.n	80067d0 <UART_SetConfig+0xe0>
 80067c0:	b322      	cbz	r2, 800680c <UART_SetConfig+0x11c>
 80067c2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80067c6:	d1e9      	bne.n	800679c <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 80067c8:	f7fd fec2 	bl	8004550 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80067cc:	b928      	cbnz	r0, 80067da <UART_SetConfig+0xea>
 80067ce:	e7c6      	b.n	800675e <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067d0:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 80067d4:	d1e2      	bne.n	800679c <UART_SetConfig+0xac>
        pclk = (uint32_t) LSE_VALUE;
 80067d6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067da:	6862      	ldr	r2, [r4, #4]
 80067dc:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80067e0:	4285      	cmp	r5, r0
 80067e2:	d8db      	bhi.n	800679c <UART_SetConfig+0xac>
 80067e4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80067e8:	d8d8      	bhi.n	800679c <UART_SetConfig+0xac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067ea:	0851      	lsrs	r1, r2, #1
 80067ec:	2300      	movs	r3, #0
 80067ee:	f44f 7e80 	mov.w	lr, #256	@ 0x100
 80067f2:	468c      	mov	ip, r1
 80067f4:	4619      	mov	r1, r3
 80067f6:	fbe0 c10e 	umlal	ip, r1, r0, lr
 80067fa:	4660      	mov	r0, ip
 80067fc:	f7f9 fd48 	bl	8000290 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006800:	4b4a      	ldr	r3, [pc, #296]	@ (800692c <UART_SetConfig+0x23c>)
 8006802:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006806:	429a      	cmp	r2, r3
 8006808:	d8c8      	bhi.n	800679c <UART_SetConfig+0xac>
 800680a:	e027      	b.n	800685c <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fe facc 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006810:	2800      	cmp	r0, #0
 8006812:	d1e2      	bne.n	80067da <UART_SetConfig+0xea>
 8006814:	e7a3      	b.n	800675e <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006816:	4a40      	ldr	r2, [pc, #256]	@ (8006918 <UART_SetConfig+0x228>)
 8006818:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800681c:	f003 05c0 	and.w	r5, r3, #192	@ 0xc0
 8006820:	2d80      	cmp	r5, #128	@ 0x80
 8006822:	d01e      	beq.n	8006862 <UART_SetConfig+0x172>
 8006824:	d83f      	bhi.n	80068a6 <UART_SetConfig+0x1b6>
 8006826:	b35d      	cbz	r5, 8006880 <UART_SetConfig+0x190>
 8006828:	2d40      	cmp	r5, #64	@ 0x40
 800682a:	d1b7      	bne.n	800679c <UART_SetConfig+0xac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800682c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006830:	d069      	beq.n	8006906 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetSysClockFreq();
 8006832:	f7fd fe8d 	bl	8004550 <HAL_RCC_GetSysClockFreq>
        break;
 8006836:	e790      	b.n	800675a <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006838:	2b30      	cmp	r3, #48	@ 0x30
 800683a:	d1af      	bne.n	800679c <UART_SetConfig+0xac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800683c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006840:	d05e      	beq.n	8006900 <UART_SetConfig+0x210>
        pclk = (uint32_t) LSE_VALUE;
 8006842:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006846:	6861      	ldr	r1, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006848:	f64f 7cef 	movw	ip, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800684c:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 8006850:	fbb2 f0f1 	udiv	r0, r2, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006854:	f1a0 0310 	sub.w	r3, r0, #16
 8006858:	4563      	cmp	r3, ip
 800685a:	d89f      	bhi.n	800679c <UART_SetConfig+0xac>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800685c:	6825      	ldr	r5, [r4, #0]
 800685e:	60e8      	str	r0, [r5, #12]
 8006860:	e77d      	b.n	800675e <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006862:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006866:	d049      	beq.n	80068fc <UART_SetConfig+0x20c>
        pclk = (uint32_t) HSI_VALUE;
 8006868:	4831      	ldr	r0, [pc, #196]	@ (8006930 <UART_SetConfig+0x240>)
 800686a:	e7ec      	b.n	8006846 <UART_SetConfig+0x156>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800686c:	4b2a      	ldr	r3, [pc, #168]	@ (8006918 <UART_SetConfig+0x228>)
 800686e:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8006872:	f405 7140 	and.w	r1, r5, #768	@ 0x300
 8006876:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800687a:	d0f2      	beq.n	8006862 <UART_SetConfig+0x172>
 800687c:	d81a      	bhi.n	80068b4 <UART_SetConfig+0x1c4>
 800687e:	b9a9      	cbnz	r1, 80068ac <UART_SetConfig+0x1bc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006880:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006884:	d01c      	beq.n	80068c0 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006886:	f7fe fa8f 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
        break;
 800688a:	e766      	b.n	800675a <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800688c:	4922      	ldr	r1, [pc, #136]	@ (8006918 <UART_SetConfig+0x228>)
 800688e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006892:	f002 0330 	and.w	r3, r2, #48	@ 0x30
 8006896:	2b20      	cmp	r3, #32
 8006898:	d0e3      	beq.n	8006862 <UART_SetConfig+0x172>
 800689a:	d8cd      	bhi.n	8006838 <UART_SetConfig+0x148>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0ef      	beq.n	8006880 <UART_SetConfig+0x190>
 80068a0:	2b10      	cmp	r3, #16
 80068a2:	d0c3      	beq.n	800682c <UART_SetConfig+0x13c>
 80068a4:	e77a      	b.n	800679c <UART_SetConfig+0xac>
 80068a6:	2dc0      	cmp	r5, #192	@ 0xc0
 80068a8:	d0c8      	beq.n	800683c <UART_SetConfig+0x14c>
 80068aa:	e777      	b.n	800679c <UART_SetConfig+0xac>
 80068ac:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80068b0:	d0bc      	beq.n	800682c <UART_SetConfig+0x13c>
 80068b2:	e773      	b.n	800679c <UART_SetConfig+0xac>
 80068b4:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 80068b8:	d0c0      	beq.n	800683c <UART_SetConfig+0x14c>
 80068ba:	e76f      	b.n	800679c <UART_SetConfig+0xac>
        pclk = (uint32_t) HSI_VALUE;
 80068bc:	481c      	ldr	r0, [pc, #112]	@ (8006930 <UART_SetConfig+0x240>)
 80068be:	e78c      	b.n	80067da <UART_SetConfig+0xea>
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c0:	f7fe fa72 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80068c4:	2800      	cmp	r0, #0
 80068c6:	f43f af4a 	beq.w	800675e <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068ca:	0040      	lsls	r0, r0, #1
 80068cc:	6861      	ldr	r1, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ce:	f64f 7cef 	movw	ip, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068d2:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 80068d6:	fbb0 f3f1 	udiv	r3, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068da:	f1a3 0210 	sub.w	r2, r3, #16
 80068de:	4562      	cmp	r2, ip
 80068e0:	f63f af5c 	bhi.w	800679c <UART_SetConfig+0xac>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068e4:	f023 050f 	bic.w	r5, r3, #15
        huart->Instance->BRR = brrtemp;
 80068e8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068ea:	b2a8      	uxth	r0, r5
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068ec:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80068f0:	4303      	orrs	r3, r0
 80068f2:	60cb      	str	r3, [r1, #12]
 80068f4:	e733      	b.n	800675e <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f6:	f7fe fa6b 	bl	8004dd0 <HAL_RCC_GetPCLK2Freq>
        break;
 80068fa:	e7e3      	b.n	80068c4 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068fc:	480d      	ldr	r0, [pc, #52]	@ (8006934 <UART_SetConfig+0x244>)
 80068fe:	e7e5      	b.n	80068cc <UART_SetConfig+0x1dc>
 8006900:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006904:	e7e2      	b.n	80068cc <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetSysClockFreq();
 8006906:	f7fd fe23 	bl	8004550 <HAL_RCC_GetSysClockFreq>
        break;
 800690a:	e7db      	b.n	80068c4 <UART_SetConfig+0x1d4>
 800690c:	efff69f3 	.word	0xefff69f3
 8006910:	40008000 	.word	0x40008000
 8006914:	40013800 	.word	0x40013800
 8006918:	40021000 	.word	0x40021000
 800691c:	40004400 	.word	0x40004400
 8006920:	40004800 	.word	0x40004800
 8006924:	40004c00 	.word	0x40004c00
 8006928:	40005000 	.word	0x40005000
 800692c:	000ffcff 	.word	0x000ffcff
 8006930:	00f42400 	.word	0x00f42400
 8006934:	01e84800 	.word	0x01e84800

08006938 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006938:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800693a:	071a      	lsls	r2, r3, #28
{
 800693c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800693e:	d506      	bpl.n	800694e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006940:	6801      	ldr	r1, [r0, #0]
 8006942:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006944:	684a      	ldr	r2, [r1, #4]
 8006946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800694a:	4322      	orrs	r2, r4
 800694c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800694e:	07dc      	lsls	r4, r3, #31
 8006950:	d506      	bpl.n	8006960 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006952:	6801      	ldr	r1, [r0, #0]
 8006954:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8006956:	684a      	ldr	r2, [r1, #4]
 8006958:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800695c:	4322      	orrs	r2, r4
 800695e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006960:	0799      	lsls	r1, r3, #30
 8006962:	d506      	bpl.n	8006972 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006964:	6801      	ldr	r1, [r0, #0]
 8006966:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006968:	684a      	ldr	r2, [r1, #4]
 800696a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800696e:	4322      	orrs	r2, r4
 8006970:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006972:	075a      	lsls	r2, r3, #29
 8006974:	d506      	bpl.n	8006984 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006976:	6801      	ldr	r1, [r0, #0]
 8006978:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800697a:	684a      	ldr	r2, [r1, #4]
 800697c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006980:	4322      	orrs	r2, r4
 8006982:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006984:	06dc      	lsls	r4, r3, #27
 8006986:	d506      	bpl.n	8006996 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006988:	6801      	ldr	r1, [r0, #0]
 800698a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800698c:	688a      	ldr	r2, [r1, #8]
 800698e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006992:	4322      	orrs	r2, r4
 8006994:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006996:	0699      	lsls	r1, r3, #26
 8006998:	d506      	bpl.n	80069a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800699a:	6801      	ldr	r1, [r0, #0]
 800699c:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800699e:	688a      	ldr	r2, [r1, #8]
 80069a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069a4:	4322      	orrs	r2, r4
 80069a6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069a8:	065a      	lsls	r2, r3, #25
 80069aa:	d509      	bpl.n	80069c0 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069ac:	6801      	ldr	r1, [r0, #0]
 80069ae:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80069b0:	684a      	ldr	r2, [r1, #4]
 80069b2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80069b6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069b8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069bc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069be:	d00b      	beq.n	80069d8 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069c0:	061b      	lsls	r3, r3, #24
 80069c2:	d506      	bpl.n	80069d2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069c4:	6804      	ldr	r4, [r0, #0]
 80069c6:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80069c8:	6863      	ldr	r3, [r4, #4]
 80069ca:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069ce:	4301      	orrs	r1, r0
 80069d0:	6061      	str	r1, [r4, #4]
}
 80069d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069d6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069d8:	684a      	ldr	r2, [r1, #4]
 80069da:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80069dc:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80069e0:	4322      	orrs	r2, r4
 80069e2:	604a      	str	r2, [r1, #4]
 80069e4:	e7ec      	b.n	80069c0 <UART_AdvFeatureConfig+0x88>
 80069e6:	bf00      	nop

080069e8 <UART_CheckIdleState>:
{
 80069e8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ea:	2300      	movs	r3, #0
{
 80069ec:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ee:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80069f2:	f7fc f921 	bl	8002c38 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069f6:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80069f8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069fa:	6810      	ldr	r0, [r2, #0]
 80069fc:	0703      	lsls	r3, r0, #28
 80069fe:	d40e      	bmi.n	8006a1e <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a00:	6811      	ldr	r1, [r2, #0]
 8006a02:	0749      	lsls	r1, r1, #29
 8006a04:	d462      	bmi.n	8006acc <UART_CheckIdleState+0xe4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a06:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8006a08:	2120      	movs	r1, #32
 8006a0a:	67e1      	str	r1, [r4, #124]	@ 0x7c
  return HAL_OK;
 8006a0c:	4628      	mov	r0, r5
  huart->RxState = HAL_UART_STATE_READY;
 8006a0e:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	6625      	str	r5, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a14:	6665      	str	r5, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8006a16:	2200      	movs	r2, #0
 8006a18:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
}
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a1e:	69d1      	ldr	r1, [r2, #28]
 8006a20:	0288      	lsls	r0, r1, #10
 8006a22:	d4ed      	bmi.n	8006a00 <UART_CheckIdleState+0x18>
 8006a24:	e00e      	b.n	8006a44 <UART_CheckIdleState+0x5c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	0741      	lsls	r1, r0, #29
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	d507      	bpl.n	8006a3e <UART_CheckIdleState+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a2e:	69d9      	ldr	r1, [r3, #28]
 8006a30:	0708      	lsls	r0, r1, #28
 8006a32:	f100 80e0 	bmi.w	8006bf6 <UART_CheckIdleState+0x20e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a36:	69d8      	ldr	r0, [r3, #28]
 8006a38:	0501      	lsls	r1, r0, #20
 8006a3a:	f100 81a6 	bmi.w	8006d8a <UART_CheckIdleState+0x3a2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	0298      	lsls	r0, r3, #10
 8006a42:	d4dd      	bmi.n	8006a00 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a44:	f7fc f8f8 	bl	8002c38 <HAL_GetTick>
 8006a48:	1b42      	subs	r2, r0, r5
 8006a4a:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a4e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a50:	d3e9      	bcc.n	8006a26 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a52:	e853 ef00 	ldrex	lr, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a56:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	e843 c200 	strex	r2, ip, [r3]
 8006a5e:	b38a      	cbz	r2, 8006ac4 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	e853 5f00 	ldrex	r5, [r3]
 8006a64:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	e843 0100 	strex	r1, r0, [r3]
 8006a6c:	b351      	cbz	r1, 8006ac4 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	e853 ef00 	ldrex	lr, [r3]
 8006a72:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	e843 c200 	strex	r2, ip, [r3]
 8006a7a:	b31a      	cbz	r2, 8006ac4 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	e853 5f00 	ldrex	r5, [r3]
 8006a80:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	e843 0100 	strex	r1, r0, [r3]
 8006a88:	b1e1      	cbz	r1, 8006ac4 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	e853 ef00 	ldrex	lr, [r3]
 8006a8e:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	e843 c200 	strex	r2, ip, [r3]
 8006a96:	b1aa      	cbz	r2, 8006ac4 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	e853 5f00 	ldrex	r5, [r3]
 8006a9c:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	e843 0100 	strex	r1, r0, [r3]
 8006aa4:	b171      	cbz	r1, 8006ac4 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	e853 ef00 	ldrex	lr, [r3]
 8006aaa:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	e843 c200 	strex	r2, ip, [r3]
 8006ab2:	b13a      	cbz	r2, 8006ac4 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	e853 5f00 	ldrex	r5, [r3]
 8006ab8:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	e843 0100 	strex	r1, r0, [r3]
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	d1c6      	bne.n	8006a52 <UART_CheckIdleState+0x6a>
      huart->gState = HAL_UART_STATE_READY;
 8006ac4:	2320      	movs	r3, #32
 8006ac6:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8006ac8:	2003      	movs	r0, #3
 8006aca:	e7a4      	b.n	8006a16 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006acc:	69d2      	ldr	r2, [r2, #28]
 8006ace:	0253      	lsls	r3, r2, #9
 8006ad0:	d499      	bmi.n	8006a06 <UART_CheckIdleState+0x1e>
 8006ad2:	e00d      	b.n	8006af0 <UART_CheckIdleState+0x108>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ad4:	6819      	ldr	r1, [r3, #0]
 8006ad6:	0748      	lsls	r0, r1, #29
 8006ad8:	d507      	bpl.n	8006aea <UART_CheckIdleState+0x102>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	0711      	lsls	r1, r2, #28
 8006ade:	f100 821e 	bmi.w	8006f1e <UART_CheckIdleState+0x536>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ae2:	69d8      	ldr	r0, [r3, #28]
 8006ae4:	0502      	lsls	r2, r0, #20
 8006ae6:	f100 82e4 	bmi.w	80070b2 <UART_CheckIdleState+0x6ca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	025b      	lsls	r3, r3, #9
 8006aee:	d48a      	bmi.n	8006a06 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af0:	f7fc f8a2 	bl	8002c38 <HAL_GetTick>
 8006af4:	1b40      	subs	r0, r0, r5
 8006af6:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	d3ea      	bcc.n	8006ad4 <UART_CheckIdleState+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	e853 ef00 	ldrex	lr, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b02:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	e843 c200 	strex	r2, ip, [r3]
 8006b0a:	b38a      	cbz	r2, 8006b70 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	e853 5f00 	ldrex	r5, [r3]
 8006b10:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	e843 0100 	strex	r1, r0, [r3]
 8006b18:	b351      	cbz	r1, 8006b70 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	e853 ef00 	ldrex	lr, [r3]
 8006b1e:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	e843 c200 	strex	r2, ip, [r3]
 8006b26:	b31a      	cbz	r2, 8006b70 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	e853 5f00 	ldrex	r5, [r3]
 8006b2c:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	e843 0100 	strex	r1, r0, [r3]
 8006b34:	b1e1      	cbz	r1, 8006b70 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	e853 ef00 	ldrex	lr, [r3]
 8006b3a:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	e843 c200 	strex	r2, ip, [r3]
 8006b42:	b1aa      	cbz	r2, 8006b70 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	e853 5f00 	ldrex	r5, [r3]
 8006b48:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	e843 0100 	strex	r1, r0, [r3]
 8006b50:	b171      	cbz	r1, 8006b70 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	e853 ef00 	ldrex	lr, [r3]
 8006b56:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	e843 c200 	strex	r2, ip, [r3]
 8006b5e:	b13a      	cbz	r2, 8006b70 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	e853 5f00 	ldrex	r5, [r3]
 8006b64:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	e843 0100 	strex	r1, r0, [r3]
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	d1c6      	bne.n	8006afe <UART_CheckIdleState+0x116>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b70:	f103 0e08 	add.w	lr, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	e85e 2f00 	ldrex	r2, [lr]
 8006b78:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	e84e 1000 	strex	r0, r1, [lr]
 8006b80:	b3a8      	cbz	r0, 8006bee <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	f103 0c08 	add.w	ip, r3, #8
 8006b86:	e85c 2f00 	ldrex	r2, [ip]
 8006b8a:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	f103 0508 	add.w	r5, r3, #8
 8006b92:	e845 1000 	strex	r0, r1, [r5]
 8006b96:	b350      	cbz	r0, 8006bee <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	e85e 2f00 	ldrex	r2, [lr]
 8006b9c:	f022 0c01 	bic.w	ip, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	e84e c100 	strex	r1, ip, [lr]
 8006ba4:	b319      	cbz	r1, 8006bee <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	e85e 5f00 	ldrex	r5, [lr]
 8006baa:	f025 0201 	bic.w	r2, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	e84e 2000 	strex	r0, r2, [lr]
 8006bb2:	b1e0      	cbz	r0, 8006bee <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	e85e cf00 	ldrex	ip, [lr]
 8006bb8:	f02c 0101 	bic.w	r1, ip, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	e84e 1500 	strex	r5, r1, [lr]
 8006bc0:	b1ad      	cbz	r5, 8006bee <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	e85e 2f00 	ldrex	r2, [lr]
 8006bc6:	f022 0c01 	bic.w	ip, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	e84e c000 	strex	r0, ip, [lr]
 8006bce:	b170      	cbz	r0, 8006bee <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	e85e 1f00 	ldrex	r1, [lr]
 8006bd4:	f021 0501 	bic.w	r5, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd8:	e84e 5200 	strex	r2, r5, [lr]
 8006bdc:	b13a      	cbz	r2, 8006bee <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	e85e 0f00 	ldrex	r0, [lr]
 8006be2:	f020 0c01 	bic.w	ip, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	e84e c100 	strex	r1, ip, [lr]
 8006bea:	2900      	cmp	r1, #0
 8006bec:	d1c0      	bne.n	8006b70 <UART_CheckIdleState+0x188>
      huart->RxState = HAL_UART_STATE_READY;
 8006bee:	2320      	movs	r3, #32
 8006bf0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8006bf4:	e768      	b.n	8006ac8 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf6:	2108      	movs	r1, #8
 8006bf8:	6219      	str	r1, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	e853 cf00 	ldrex	ip, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bfe:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	e843 e200 	strex	r2, lr, [r3]
 8006c06:	b38a      	cbz	r2, 8006c6c <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	e853 5f00 	ldrex	r5, [r3]
 8006c0c:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	e843 0100 	strex	r1, r0, [r3]
 8006c14:	b351      	cbz	r1, 8006c6c <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	e853 cf00 	ldrex	ip, [r3]
 8006c1a:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	e843 e200 	strex	r2, lr, [r3]
 8006c22:	b31a      	cbz	r2, 8006c6c <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	e853 5f00 	ldrex	r5, [r3]
 8006c28:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	e843 0100 	strex	r1, r0, [r3]
 8006c30:	b1e1      	cbz	r1, 8006c6c <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	e853 cf00 	ldrex	ip, [r3]
 8006c36:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	e843 e200 	strex	r2, lr, [r3]
 8006c3e:	b1aa      	cbz	r2, 8006c6c <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	e853 5f00 	ldrex	r5, [r3]
 8006c44:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	e843 0100 	strex	r1, r0, [r3]
 8006c4c:	b171      	cbz	r1, 8006c6c <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	e853 cf00 	ldrex	ip, [r3]
 8006c52:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	e843 e200 	strex	r2, lr, [r3]
 8006c5a:	b13a      	cbz	r2, 8006c6c <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	e853 5f00 	ldrex	r5, [r3]
 8006c60:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	e843 0100 	strex	r1, r0, [r3]
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	d1c6      	bne.n	8006bfa <UART_CheckIdleState+0x212>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6c:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	e85c 2f00 	ldrex	r2, [ip]
 8006c74:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	e84c 1000 	strex	r0, r1, [ip]
 8006c7c:	b3a8      	cbz	r0, 8006cea <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	f103 0e08 	add.w	lr, r3, #8
 8006c82:	e85e 2f00 	ldrex	r2, [lr]
 8006c86:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	f103 0508 	add.w	r5, r3, #8
 8006c8e:	e845 1000 	strex	r0, r1, [r5]
 8006c92:	b350      	cbz	r0, 8006cea <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	e85c 2f00 	ldrex	r2, [ip]
 8006c98:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	e84c e100 	strex	r1, lr, [ip]
 8006ca0:	b319      	cbz	r1, 8006cea <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	e85c 5f00 	ldrex	r5, [ip]
 8006ca6:	f025 0201 	bic.w	r2, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	e84c 2000 	strex	r0, r2, [ip]
 8006cae:	b1e0      	cbz	r0, 8006cea <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	e85c ef00 	ldrex	lr, [ip]
 8006cb4:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	e84c 1500 	strex	r5, r1, [ip]
 8006cbc:	b1ad      	cbz	r5, 8006cea <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	e85c 2f00 	ldrex	r2, [ip]
 8006cc2:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	e84c e000 	strex	r0, lr, [ip]
 8006cca:	b170      	cbz	r0, 8006cea <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	e85c 1f00 	ldrex	r1, [ip]
 8006cd0:	f021 0501 	bic.w	r5, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	e84c 5200 	strex	r2, r5, [ip]
 8006cd8:	b13a      	cbz	r2, 8006cea <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cda:	e85c 0f00 	ldrex	r0, [ip]
 8006cde:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	e84c e100 	strex	r1, lr, [ip]
 8006ce6:	2900      	cmp	r1, #0
 8006ce8:	d1c0      	bne.n	8006c6c <UART_CheckIdleState+0x284>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cea:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8006cec:	2d01      	cmp	r5, #1
 8006cee:	d00b      	beq.n	8006d08 <UART_CheckIdleState+0x320>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf0:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006cf2:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cf4:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006cfa:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfc:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006cfe:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d02:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8006d06:	e6a4      	b.n	8006a52 <UART_CheckIdleState+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	e853 cf00 	ldrex	ip, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0c:	f02c 0210 	bic.w	r2, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	e843 2000 	strex	r0, r2, [r3]
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d0eb      	beq.n	8006cf0 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	e853 1f00 	ldrex	r1, [r3]
 8006d1c:	f021 0510 	bic.w	r5, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	e843 5200 	strex	r2, r5, [r3]
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	d0e3      	beq.n	8006cf0 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	e853 0f00 	ldrex	r0, [r3]
 8006d2c:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	e843 5100 	strex	r1, r5, [r3]
 8006d34:	2900      	cmp	r1, #0
 8006d36:	d0db      	beq.n	8006cf0 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	e853 ef00 	ldrex	lr, [r3]
 8006d3c:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	e843 c200 	strex	r2, ip, [r3]
 8006d44:	2a00      	cmp	r2, #0
 8006d46:	d0d3      	beq.n	8006cf0 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	e853 0f00 	ldrex	r0, [r3]
 8006d4c:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	e843 5100 	strex	r1, r5, [r3]
 8006d54:	2900      	cmp	r1, #0
 8006d56:	d0cb      	beq.n	8006cf0 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	e853 ef00 	ldrex	lr, [r3]
 8006d5c:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	e843 c200 	strex	r2, ip, [r3]
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	d0c3      	beq.n	8006cf0 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	e853 0f00 	ldrex	r0, [r3]
 8006d6c:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	e843 5100 	strex	r1, r5, [r3]
 8006d74:	2900      	cmp	r1, #0
 8006d76:	d0bb      	beq.n	8006cf0 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	e853 ef00 	ldrex	lr, [r3]
 8006d7c:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	e843 c200 	strex	r2, ip, [r3]
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	d1bf      	bne.n	8006d08 <UART_CheckIdleState+0x320>
 8006d88:	e7b2      	b.n	8006cf0 <UART_CheckIdleState+0x308>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d8a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8006d8e:	621d      	str	r5, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	e853 ef00 	ldrex	lr, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d94:	f42e 7290 	bic.w	r2, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	e843 2000 	strex	r0, r2, [r3]
 8006d9c:	b388      	cbz	r0, 8006e02 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	e853 1f00 	ldrex	r1, [r3]
 8006da2:	f421 7590 	bic.w	r5, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	e843 5200 	strex	r2, r5, [r3]
 8006daa:	b352      	cbz	r2, 8006e02 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	e853 0f00 	ldrex	r0, [r3]
 8006db0:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	e843 5100 	strex	r1, r5, [r3]
 8006db8:	b319      	cbz	r1, 8006e02 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	e853 cf00 	ldrex	ip, [r3]
 8006dbe:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	e843 e200 	strex	r2, lr, [r3]
 8006dc6:	b1e2      	cbz	r2, 8006e02 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	e853 0f00 	ldrex	r0, [r3]
 8006dcc:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	e843 5100 	strex	r1, r5, [r3]
 8006dd4:	b1a9      	cbz	r1, 8006e02 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	e853 cf00 	ldrex	ip, [r3]
 8006dda:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	e843 e200 	strex	r2, lr, [r3]
 8006de2:	b172      	cbz	r2, 8006e02 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	e853 0f00 	ldrex	r0, [r3]
 8006de8:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	e843 5100 	strex	r1, r5, [r3]
 8006df0:	b139      	cbz	r1, 8006e02 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	e853 cf00 	ldrex	ip, [r3]
 8006df6:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	e843 e200 	strex	r2, lr, [r3]
 8006dfe:	2a00      	cmp	r2, #0
 8006e00:	d1c6      	bne.n	8006d90 <UART_CheckIdleState+0x3a8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e02:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e06:	e85c 5f00 	ldrex	r5, [ip]
 8006e0a:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	e84c 1200 	strex	r2, r1, [ip]
 8006e12:	b3aa      	cbz	r2, 8006e80 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	f103 0008 	add.w	r0, r3, #8
 8006e18:	e850 5f00 	ldrex	r5, [r0]
 8006e1c:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	f103 0e08 	add.w	lr, r3, #8
 8006e24:	e84e 1200 	strex	r2, r1, [lr]
 8006e28:	b352      	cbz	r2, 8006e80 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	e85c 0f00 	ldrex	r0, [ip]
 8006e2e:	f020 0501 	bic.w	r5, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	e84c 5100 	strex	r1, r5, [ip]
 8006e36:	b319      	cbz	r1, 8006e80 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	e85c 2f00 	ldrex	r2, [ip]
 8006e3c:	f022 0501 	bic.w	r5, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	e84c 5000 	strex	r0, r5, [ip]
 8006e44:	b1e0      	cbz	r0, 8006e80 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	e85c ef00 	ldrex	lr, [ip]
 8006e4a:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	e84c 1200 	strex	r2, r1, [ip]
 8006e52:	b1aa      	cbz	r2, 8006e80 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	e85c 5f00 	ldrex	r5, [ip]
 8006e58:	f025 0e01 	bic.w	lr, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	e84c e000 	strex	r0, lr, [ip]
 8006e60:	b170      	cbz	r0, 8006e80 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	e85c 1f00 	ldrex	r1, [ip]
 8006e66:	f021 0201 	bic.w	r2, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	e84c 2500 	strex	r5, r2, [ip]
 8006e6e:	b13d      	cbz	r5, 8006e80 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	e85c 0f00 	ldrex	r0, [ip]
 8006e74:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	e84c e100 	strex	r1, lr, [ip]
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d1c0      	bne.n	8006e02 <UART_CheckIdleState+0x41a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006e82:	2a01      	cmp	r2, #1
 8006e84:	d00a      	beq.n	8006e9c <UART_CheckIdleState+0x4b4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e86:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006e88:	2020      	movs	r0, #32
 8006e8a:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006e8e:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e90:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006e92:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e96:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006e9a:	e5da      	b.n	8006a52 <UART_CheckIdleState+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	e853 5f00 	ldrex	r5, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea0:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	e843 0100 	strex	r1, r0, [r3]
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	d0ec      	beq.n	8006e86 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	e853 cf00 	ldrex	ip, [r3]
 8006eb0:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	e843 e200 	strex	r2, lr, [r3]
 8006eb8:	2a00      	cmp	r2, #0
 8006eba:	d0e4      	beq.n	8006e86 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	e853 5f00 	ldrex	r5, [r3]
 8006ec0:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	e843 0100 	strex	r1, r0, [r3]
 8006ec8:	2900      	cmp	r1, #0
 8006eca:	d0dc      	beq.n	8006e86 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	e853 cf00 	ldrex	ip, [r3]
 8006ed0:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	e843 e200 	strex	r2, lr, [r3]
 8006ed8:	2a00      	cmp	r2, #0
 8006eda:	d0d4      	beq.n	8006e86 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	e853 5f00 	ldrex	r5, [r3]
 8006ee0:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	e843 0100 	strex	r1, r0, [r3]
 8006ee8:	2900      	cmp	r1, #0
 8006eea:	d0cc      	beq.n	8006e86 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	e853 cf00 	ldrex	ip, [r3]
 8006ef0:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	e843 e200 	strex	r2, lr, [r3]
 8006ef8:	2a00      	cmp	r2, #0
 8006efa:	d0c4      	beq.n	8006e86 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	e853 5f00 	ldrex	r5, [r3]
 8006f00:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	e843 0100 	strex	r1, r0, [r3]
 8006f08:	2900      	cmp	r1, #0
 8006f0a:	d0bc      	beq.n	8006e86 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	e853 cf00 	ldrex	ip, [r3]
 8006f10:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	e843 e200 	strex	r2, lr, [r3]
 8006f18:	2a00      	cmp	r2, #0
 8006f1a:	d1bf      	bne.n	8006e9c <UART_CheckIdleState+0x4b4>
 8006f1c:	e7b3      	b.n	8006e86 <UART_CheckIdleState+0x49e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f1e:	2108      	movs	r1, #8
 8006f20:	6219      	str	r1, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	e853 cf00 	ldrex	ip, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f26:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	e843 e200 	strex	r2, lr, [r3]
 8006f2e:	b38a      	cbz	r2, 8006f94 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	e853 5f00 	ldrex	r5, [r3]
 8006f34:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	e843 0100 	strex	r1, r0, [r3]
 8006f3c:	b351      	cbz	r1, 8006f94 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	e853 cf00 	ldrex	ip, [r3]
 8006f42:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	e843 e200 	strex	r2, lr, [r3]
 8006f4a:	b31a      	cbz	r2, 8006f94 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	e853 5f00 	ldrex	r5, [r3]
 8006f50:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	e843 0100 	strex	r1, r0, [r3]
 8006f58:	b1e1      	cbz	r1, 8006f94 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	e853 cf00 	ldrex	ip, [r3]
 8006f5e:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	e843 e200 	strex	r2, lr, [r3]
 8006f66:	b1aa      	cbz	r2, 8006f94 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	e853 5f00 	ldrex	r5, [r3]
 8006f6c:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	e843 0100 	strex	r1, r0, [r3]
 8006f74:	b171      	cbz	r1, 8006f94 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	e853 cf00 	ldrex	ip, [r3]
 8006f7a:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	e843 e200 	strex	r2, lr, [r3]
 8006f82:	b13a      	cbz	r2, 8006f94 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	e853 5f00 	ldrex	r5, [r3]
 8006f88:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	e843 0100 	strex	r1, r0, [r3]
 8006f90:	2900      	cmp	r1, #0
 8006f92:	d1c6      	bne.n	8006f22 <UART_CheckIdleState+0x53a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f94:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	e85c 2f00 	ldrex	r2, [ip]
 8006f9c:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	e84c 1000 	strex	r0, r1, [ip]
 8006fa4:	b3a8      	cbz	r0, 8007012 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	f103 0e08 	add.w	lr, r3, #8
 8006faa:	e85e 2f00 	ldrex	r2, [lr]
 8006fae:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	f103 0508 	add.w	r5, r3, #8
 8006fb6:	e845 1000 	strex	r0, r1, [r5]
 8006fba:	b350      	cbz	r0, 8007012 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	e85c 2f00 	ldrex	r2, [ip]
 8006fc0:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	e84c e100 	strex	r1, lr, [ip]
 8006fc8:	b319      	cbz	r1, 8007012 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	e85c 5f00 	ldrex	r5, [ip]
 8006fce:	f025 0201 	bic.w	r2, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	e84c 2000 	strex	r0, r2, [ip]
 8006fd6:	b1e0      	cbz	r0, 8007012 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	e85c ef00 	ldrex	lr, [ip]
 8006fdc:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	e84c 1500 	strex	r5, r1, [ip]
 8006fe4:	b1ad      	cbz	r5, 8007012 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	e85c 2f00 	ldrex	r2, [ip]
 8006fea:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	e84c e000 	strex	r0, lr, [ip]
 8006ff2:	b170      	cbz	r0, 8007012 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	e85c 1f00 	ldrex	r1, [ip]
 8006ff8:	f021 0501 	bic.w	r5, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	e84c 5200 	strex	r2, r5, [ip]
 8007000:	b13a      	cbz	r2, 8007012 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007002:	e85c 0f00 	ldrex	r0, [ip]
 8007006:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	e84c e100 	strex	r1, lr, [ip]
 800700e:	2900      	cmp	r1, #0
 8007010:	d1c0      	bne.n	8006f94 <UART_CheckIdleState+0x5ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007012:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8007014:	2d01      	cmp	r5, #1
 8007016:	d00b      	beq.n	8007030 <UART_CheckIdleState+0x648>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007018:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 800701a:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800701c:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800701e:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8007022:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007024:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8007026:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800702a:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 800702e:	e566      	b.n	8006afe <UART_CheckIdleState+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	e853 cf00 	ldrex	ip, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007034:	f02c 0210 	bic.w	r2, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	e843 2000 	strex	r0, r2, [r3]
 800703c:	2800      	cmp	r0, #0
 800703e:	d0eb      	beq.n	8007018 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	e853 1f00 	ldrex	r1, [r3]
 8007044:	f021 0510 	bic.w	r5, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	e843 5200 	strex	r2, r5, [r3]
 800704c:	2a00      	cmp	r2, #0
 800704e:	d0e3      	beq.n	8007018 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	e853 0f00 	ldrex	r0, [r3]
 8007054:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	e843 5100 	strex	r1, r5, [r3]
 800705c:	2900      	cmp	r1, #0
 800705e:	d0db      	beq.n	8007018 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	e853 ef00 	ldrex	lr, [r3]
 8007064:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	e843 c200 	strex	r2, ip, [r3]
 800706c:	2a00      	cmp	r2, #0
 800706e:	d0d3      	beq.n	8007018 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	e853 0f00 	ldrex	r0, [r3]
 8007074:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	e843 5100 	strex	r1, r5, [r3]
 800707c:	2900      	cmp	r1, #0
 800707e:	d0cb      	beq.n	8007018 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	e853 ef00 	ldrex	lr, [r3]
 8007084:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	e843 c200 	strex	r2, ip, [r3]
 800708c:	2a00      	cmp	r2, #0
 800708e:	d0c3      	beq.n	8007018 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	e853 0f00 	ldrex	r0, [r3]
 8007094:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	e843 5100 	strex	r1, r5, [r3]
 800709c:	2900      	cmp	r1, #0
 800709e:	d0bb      	beq.n	8007018 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	e853 ef00 	ldrex	lr, [r3]
 80070a4:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	e843 c200 	strex	r2, ip, [r3]
 80070ac:	2a00      	cmp	r2, #0
 80070ae:	d1bf      	bne.n	8007030 <UART_CheckIdleState+0x648>
 80070b0:	e7b2      	b.n	8007018 <UART_CheckIdleState+0x630>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070b6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	e853 0f00 	ldrex	r0, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070bc:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	e843 5100 	strex	r1, r5, [r3]
 80070c4:	b389      	cbz	r1, 800712a <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	e853 cf00 	ldrex	ip, [r3]
 80070ca:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	e843 e200 	strex	r2, lr, [r3]
 80070d2:	b352      	cbz	r2, 800712a <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	e853 0f00 	ldrex	r0, [r3]
 80070d8:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	e843 5100 	strex	r1, r5, [r3]
 80070e0:	b319      	cbz	r1, 800712a <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	e853 cf00 	ldrex	ip, [r3]
 80070e6:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	e843 e200 	strex	r2, lr, [r3]
 80070ee:	b1e2      	cbz	r2, 800712a <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	e853 0f00 	ldrex	r0, [r3]
 80070f4:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	e843 5100 	strex	r1, r5, [r3]
 80070fc:	b1a9      	cbz	r1, 800712a <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	e853 cf00 	ldrex	ip, [r3]
 8007102:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	e843 e200 	strex	r2, lr, [r3]
 800710a:	b172      	cbz	r2, 800712a <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	e853 0f00 	ldrex	r0, [r3]
 8007110:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	e843 5100 	strex	r1, r5, [r3]
 8007118:	b139      	cbz	r1, 800712a <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	e853 cf00 	ldrex	ip, [r3]
 800711e:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	e843 e200 	strex	r2, lr, [r3]
 8007126:	2a00      	cmp	r2, #0
 8007128:	d1c6      	bne.n	80070b8 <UART_CheckIdleState+0x6d0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712a:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	e85c 5f00 	ldrex	r5, [ip]
 8007132:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	e84c 1200 	strex	r2, r1, [ip]
 800713a:	b3aa      	cbz	r2, 80071a8 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	f103 0008 	add.w	r0, r3, #8
 8007140:	e850 5f00 	ldrex	r5, [r0]
 8007144:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	f103 0e08 	add.w	lr, r3, #8
 800714c:	e84e 1200 	strex	r2, r1, [lr]
 8007150:	b352      	cbz	r2, 80071a8 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	e85c 0f00 	ldrex	r0, [ip]
 8007156:	f020 0501 	bic.w	r5, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	e84c 5100 	strex	r1, r5, [ip]
 800715e:	b319      	cbz	r1, 80071a8 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	e85c 2f00 	ldrex	r2, [ip]
 8007164:	f022 0501 	bic.w	r5, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	e84c 5000 	strex	r0, r5, [ip]
 800716c:	b1e0      	cbz	r0, 80071a8 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	e85c ef00 	ldrex	lr, [ip]
 8007172:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	e84c 1200 	strex	r2, r1, [ip]
 800717a:	b1aa      	cbz	r2, 80071a8 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	e85c 5f00 	ldrex	r5, [ip]
 8007180:	f025 0e01 	bic.w	lr, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	e84c e000 	strex	r0, lr, [ip]
 8007188:	b170      	cbz	r0, 80071a8 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	e85c 1f00 	ldrex	r1, [ip]
 800718e:	f021 0201 	bic.w	r2, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	e84c 2500 	strex	r5, r2, [ip]
 8007196:	b13d      	cbz	r5, 80071a8 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	e85c 0f00 	ldrex	r0, [ip]
 800719c:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	e84c e100 	strex	r1, lr, [ip]
 80071a4:	2900      	cmp	r1, #0
 80071a6:	d1c0      	bne.n	800712a <UART_CheckIdleState+0x742>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80071aa:	2a01      	cmp	r2, #1
 80071ac:	d00a      	beq.n	80071c4 <UART_CheckIdleState+0x7dc>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ae:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 80071b0:	2020      	movs	r0, #32
 80071b2:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80071b6:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b8:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80071ba:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071be:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80071c2:	e49c      	b.n	8006afe <UART_CheckIdleState+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	e853 5f00 	ldrex	r5, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c8:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	e843 0100 	strex	r1, r0, [r3]
 80071d0:	2900      	cmp	r1, #0
 80071d2:	d0ec      	beq.n	80071ae <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	e853 cf00 	ldrex	ip, [r3]
 80071d8:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	e843 e200 	strex	r2, lr, [r3]
 80071e0:	2a00      	cmp	r2, #0
 80071e2:	d0e4      	beq.n	80071ae <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	e853 5f00 	ldrex	r5, [r3]
 80071e8:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	e843 0100 	strex	r1, r0, [r3]
 80071f0:	2900      	cmp	r1, #0
 80071f2:	d0dc      	beq.n	80071ae <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	e853 cf00 	ldrex	ip, [r3]
 80071f8:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	e843 e200 	strex	r2, lr, [r3]
 8007200:	2a00      	cmp	r2, #0
 8007202:	d0d4      	beq.n	80071ae <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	e853 5f00 	ldrex	r5, [r3]
 8007208:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720c:	e843 0100 	strex	r1, r0, [r3]
 8007210:	2900      	cmp	r1, #0
 8007212:	d0cc      	beq.n	80071ae <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	e853 cf00 	ldrex	ip, [r3]
 8007218:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	e843 e200 	strex	r2, lr, [r3]
 8007220:	2a00      	cmp	r2, #0
 8007222:	d0c4      	beq.n	80071ae <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	e853 5f00 	ldrex	r5, [r3]
 8007228:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722c:	e843 0100 	strex	r1, r0, [r3]
 8007230:	2900      	cmp	r1, #0
 8007232:	d0bc      	beq.n	80071ae <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	e853 cf00 	ldrex	ip, [r3]
 8007238:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	e843 e200 	strex	r2, lr, [r3]
 8007240:	2a00      	cmp	r2, #0
 8007242:	d1bf      	bne.n	80071c4 <UART_CheckIdleState+0x7dc>
 8007244:	e7b3      	b.n	80071ae <UART_CheckIdleState+0x7c6>
 8007246:	bf00      	nop

08007248 <HAL_UART_Init>:
  if (huart == NULL)
 8007248:	b370      	cbz	r0, 80072a8 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800724a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 800724c:	b510      	push	{r4, lr}
 800724e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007250:	b32b      	cbz	r3, 800729e <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8007252:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007254:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8007256:	2024      	movs	r0, #36	@ 0x24
 8007258:	67e0      	str	r0, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	f023 0001 	bic.w	r0, r3, #1
 8007260:	6010      	str	r0, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007262:	b9c1      	cbnz	r1, 8007296 <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007264:	4620      	mov	r0, r4
 8007266:	f7ff fa43 	bl	80066f0 <UART_SetConfig>
 800726a:	2801      	cmp	r0, #1
 800726c:	d011      	beq.n	8007292 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800726e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8007270:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007272:	685c      	ldr	r4, [r3, #4]
 8007274:	f424 4290 	bic.w	r2, r4, #18432	@ 0x4800
 8007278:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800727a:	6899      	ldr	r1, [r3, #8]
 800727c:	f021 042a 	bic.w	r4, r1, #42	@ 0x2a
 8007280:	609c      	str	r4, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	f042 0101 	orr.w	r1, r2, #1
}
 8007288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800728c:	6019      	str	r1, [r3, #0]
  return (UART_CheckIdleState(huart));
 800728e:	f7ff bbab 	b.w	80069e8 <UART_CheckIdleState>
}
 8007292:	2001      	movs	r0, #1
 8007294:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8007296:	4620      	mov	r0, r4
 8007298:	f7ff fb4e 	bl	8006938 <UART_AdvFeatureConfig>
 800729c:	e7e2      	b.n	8007264 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 800729e:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 80072a2:	f7fb fb41 	bl	8002928 <HAL_UART_MspInit>
 80072a6:	e7d4      	b.n	8007252 <HAL_UART_Init+0xa>
}
 80072a8:	2001      	movs	r0, #1
 80072aa:	4770      	bx	lr

080072ac <arm_split_rfft_q15>:
 80072ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	b083      	sub	sp, #12
 80072b2:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 80072b6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80072b8:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80072ba:	3d01      	subs	r5, #1
 80072bc:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 80072c0:	00ac      	lsls	r4, r5, #2
 80072c2:	9401      	str	r4, [sp, #4]
 80072c4:	1e4c      	subs	r4, r1, #1
 80072c6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80072ca:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80072ce:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80072d2:	d02d      	beq.n	8007330 <arm_split_rfft_q15+0x84>
 80072d4:	2f01      	cmp	r7, #1
 80072d6:	f1a6 0c04 	sub.w	ip, r6, #4
 80072da:	f100 0604 	add.w	r6, r0, #4
 80072de:	d13e      	bne.n	800735e <arm_split_rfft_q15+0xb2>
 80072e0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80072e2:	f1ac 0104 	sub.w	r1, ip, #4
 80072e6:	f107 0808 	add.w	r8, r7, #8
 80072ea:	f856 7b04 	ldr.w	r7, [r6], #4
 80072ee:	f852 9b04 	ldr.w	r9, [r2], #4
 80072f2:	fb47 fc09 	smusd	ip, r7, r9
 80072f6:	f855 e904 	ldr.w	lr, [r5], #-4
 80072fa:	f853 ab04 	ldr.w	sl, [r3], #4
 80072fe:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8007302:	fb4e fe1a 	smusdx	lr, lr, sl
 8007306:	fb27 e719 	smladx	r7, r7, r9, lr
 800730a:	143f      	asrs	r7, r7, #16
 800730c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8007310:	f1c7 0e00 	rsb	lr, r7, #0
 8007314:	3c01      	subs	r4, #1
 8007316:	f828 7c02 	strh.w	r7, [r8, #-2]
 800731a:	f828 cc04 	strh.w	ip, [r8, #-4]
 800731e:	f1a1 0104 	sub.w	r1, r1, #4
 8007322:	f8a1 e00a 	strh.w	lr, [r1, #10]
 8007326:	f8a1 c008 	strh.w	ip, [r1, #8]
 800732a:	f108 0804 	add.w	r8, r8, #4
 800732e:	d1dc      	bne.n	80072ea <arm_split_rfft_q15+0x3e>
 8007330:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8007334:	f9b0 3000 	ldrsh.w	r3, [r0]
 8007338:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800733a:	9a01      	ldr	r2, [sp, #4]
 800733c:	1a5b      	subs	r3, r3, r1
 800733e:	4422      	add	r2, r4
 8007340:	2100      	movs	r1, #0
 8007342:	105b      	asrs	r3, r3, #1
 8007344:	8093      	strh	r3, [r2, #4]
 8007346:	80d1      	strh	r1, [r2, #6]
 8007348:	f9b0 3000 	ldrsh.w	r3, [r0]
 800734c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007350:	8061      	strh	r1, [r4, #2]
 8007352:	4413      	add	r3, r2
 8007354:	105b      	asrs	r3, r3, #1
 8007356:	8023      	strh	r3, [r4, #0]
 8007358:	b003      	add	sp, #12
 800735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8007362:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8007364:	f1ac 0104 	sub.w	r1, ip, #4
 8007368:	f107 0808 	add.w	r8, r7, #8
 800736c:	f856 7b04 	ldr.w	r7, [r6], #4
 8007370:	f8d2 9000 	ldr.w	r9, [r2]
 8007374:	fb47 fc09 	smusd	ip, r7, r9
 8007378:	f855 e904 	ldr.w	lr, [r5], #-4
 800737c:	f8d3 a000 	ldr.w	sl, [r3]
 8007380:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8007384:	fb4e fe1a 	smusdx	lr, lr, sl
 8007388:	fb27 e719 	smladx	r7, r7, r9, lr
 800738c:	143f      	asrs	r7, r7, #16
 800738e:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8007392:	f1c7 0e00 	rsb	lr, r7, #0
 8007396:	3c01      	subs	r4, #1
 8007398:	f828 7c02 	strh.w	r7, [r8, #-2]
 800739c:	f828 cc04 	strh.w	ip, [r8, #-4]
 80073a0:	445b      	add	r3, fp
 80073a2:	f8a1 e006 	strh.w	lr, [r1, #6]
 80073a6:	f8a1 c004 	strh.w	ip, [r1, #4]
 80073aa:	445a      	add	r2, fp
 80073ac:	f108 0804 	add.w	r8, r8, #4
 80073b0:	f1a1 0104 	sub.w	r1, r1, #4
 80073b4:	d1da      	bne.n	800736c <arm_split_rfft_q15+0xc0>
 80073b6:	e7bb      	b.n	8007330 <arm_split_rfft_q15+0x84>

080073b8 <arm_rfft_q15>:
 80073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	f890 e004 	ldrb.w	lr, [r0, #4]
 80073c0:	6806      	ldr	r6, [r0, #0]
 80073c2:	f1be 0f01 	cmp.w	lr, #1
 80073c6:	4604      	mov	r4, r0
 80073c8:	b083      	sub	sp, #12
 80073ca:	6940      	ldr	r0, [r0, #20]
 80073cc:	4615      	mov	r5, r2
 80073ce:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80073d2:	460f      	mov	r7, r1
 80073d4:	d00f      	beq.n	80073f6 <arm_rfft_q15+0x3e>
 80073d6:	7963      	ldrb	r3, [r4, #5]
 80073d8:	4672      	mov	r2, lr
 80073da:	f000 f9e1 	bl	80077a0 <arm_cfft_q15>
 80073de:	68a3      	ldr	r3, [r4, #8]
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	9500      	str	r5, [sp, #0]
 80073e4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80073e8:	4631      	mov	r1, r6
 80073ea:	4638      	mov	r0, r7
 80073ec:	f7ff ff5e 	bl	80072ac <arm_split_rfft_q15>
 80073f0:	b003      	add	sp, #12
 80073f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f6:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 80073fa:	68a2      	ldr	r2, [r4, #8]
 80073fc:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 8007400:	b30e      	cbz	r6, 8007446 <arm_rfft_q15+0x8e>
 8007402:	2a01      	cmp	r2, #1
 8007404:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8007408:	d132      	bne.n	8007470 <arm_rfft_q15+0xb8>
 800740a:	46a9      	mov	r9, r5
 800740c:	f85c 8904 	ldr.w	r8, [ip], #-4
 8007410:	f851 2b04 	ldr.w	r2, [r1], #4
 8007414:	fb48 fa02 	smusd	sl, r8, r2
 8007418:	f857 bb04 	ldr.w	fp, [r7], #4
 800741c:	f853 eb04 	ldr.w	lr, [r3], #4
 8007420:	fb2b aa0e 	smlad	sl, fp, lr, sl
 8007424:	fb28 f812 	smuadx	r8, r8, r2
 8007428:	f1c8 0200 	rsb	r2, r8, #0
 800742c:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 8007430:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8007434:	0412      	lsls	r2, r2, #16
 8007436:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 800743a:	3e01      	subs	r6, #1
 800743c:	f849 2b04 	str.w	r2, [r9], #4
 8007440:	d1e4      	bne.n	800740c <arm_rfft_q15+0x54>
 8007442:	f894 e004 	ldrb.w	lr, [r4, #4]
 8007446:	7963      	ldrb	r3, [r4, #5]
 8007448:	4672      	mov	r2, lr
 800744a:	4629      	mov	r1, r5
 800744c:	f000 f9a8 	bl	80077a0 <arm_cfft_q15>
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0cc      	beq.n	80073f0 <arm_rfft_q15+0x38>
 8007456:	3d02      	subs	r5, #2
 8007458:	2100      	movs	r1, #0
 800745a:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	802b      	strh	r3, [r5, #0]
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	3101      	adds	r1, #1
 8007466:	428b      	cmp	r3, r1
 8007468:	d8f7      	bhi.n	800745a <arm_rfft_q15+0xa2>
 800746a:	b003      	add	sp, #12
 800746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007470:	ee07 0a90 	vmov	s15, r0
 8007474:	46a8      	mov	r8, r5
 8007476:	f85c e904 	ldr.w	lr, [ip], #-4
 800747a:	6808      	ldr	r0, [r1, #0]
 800747c:	fb4e f900 	smusd	r9, lr, r0
 8007480:	f857 ab04 	ldr.w	sl, [r7], #4
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	fb2a 9902 	smlad	r9, sl, r2, r9
 800748a:	fb2e fe10 	smuadx	lr, lr, r0
 800748e:	f1ce 0e00 	rsb	lr, lr, #0
 8007492:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 8007496:	0c12      	lsrs	r2, r2, #16
 8007498:	0412      	lsls	r2, r2, #16
 800749a:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 800749e:	3e01      	subs	r6, #1
 80074a0:	f848 2b04 	str.w	r2, [r8], #4
 80074a4:	4459      	add	r1, fp
 80074a6:	445b      	add	r3, fp
 80074a8:	d1e5      	bne.n	8007476 <arm_rfft_q15+0xbe>
 80074aa:	ee17 0a90 	vmov	r0, s15
 80074ae:	e7c8      	b.n	8007442 <arm_rfft_q15+0x8a>

080074b0 <arm_rfft_init_q15>:
 80074b0:	b430      	push	{r4, r5}
 80074b2:	b289      	uxth	r1, r1
 80074b4:	4d31      	ldr	r5, [pc, #196]	@ (800757c <arm_rfft_init_q15+0xcc>)
 80074b6:	4c32      	ldr	r4, [pc, #200]	@ (8007580 <arm_rfft_init_q15+0xd0>)
 80074b8:	6001      	str	r1, [r0, #0]
 80074ba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80074be:	e9c0 5403 	strd	r5, r4, [r0, #12]
 80074c2:	7102      	strb	r2, [r0, #4]
 80074c4:	7143      	strb	r3, [r0, #5]
 80074c6:	d053      	beq.n	8007570 <arm_rfft_init_q15+0xc0>
 80074c8:	d91a      	bls.n	8007500 <arm_rfft_init_q15+0x50>
 80074ca:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80074ce:	d033      	beq.n	8007538 <arm_rfft_init_q15+0x88>
 80074d0:	d909      	bls.n	80074e6 <arm_rfft_init_q15+0x36>
 80074d2:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80074d6:	d12b      	bne.n	8007530 <arm_rfft_init_q15+0x80>
 80074d8:	4b2a      	ldr	r3, [pc, #168]	@ (8007584 <arm_rfft_init_q15+0xd4>)
 80074da:	6143      	str	r3, [r0, #20]
 80074dc:	2201      	movs	r2, #1
 80074de:	6082      	str	r2, [r0, #8]
 80074e0:	2000      	movs	r0, #0
 80074e2:	bc30      	pop	{r4, r5}
 80074e4:	4770      	bx	lr
 80074e6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80074ea:	d02c      	beq.n	8007546 <arm_rfft_init_q15+0x96>
 80074ec:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80074f0:	d11e      	bne.n	8007530 <arm_rfft_init_q15+0x80>
 80074f2:	4b25      	ldr	r3, [pc, #148]	@ (8007588 <arm_rfft_init_q15+0xd8>)
 80074f4:	6143      	str	r3, [r0, #20]
 80074f6:	2204      	movs	r2, #4
 80074f8:	6082      	str	r2, [r0, #8]
 80074fa:	bc30      	pop	{r4, r5}
 80074fc:	2000      	movs	r0, #0
 80074fe:	4770      	bx	lr
 8007500:	2980      	cmp	r1, #128	@ 0x80
 8007502:	d027      	beq.n	8007554 <arm_rfft_init_q15+0xa4>
 8007504:	d909      	bls.n	800751a <arm_rfft_init_q15+0x6a>
 8007506:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800750a:	d111      	bne.n	8007530 <arm_rfft_init_q15+0x80>
 800750c:	4b1f      	ldr	r3, [pc, #124]	@ (800758c <arm_rfft_init_q15+0xdc>)
 800750e:	6143      	str	r3, [r0, #20]
 8007510:	2220      	movs	r2, #32
 8007512:	6082      	str	r2, [r0, #8]
 8007514:	bc30      	pop	{r4, r5}
 8007516:	2000      	movs	r0, #0
 8007518:	4770      	bx	lr
 800751a:	2920      	cmp	r1, #32
 800751c:	d021      	beq.n	8007562 <arm_rfft_init_q15+0xb2>
 800751e:	2940      	cmp	r1, #64	@ 0x40
 8007520:	d106      	bne.n	8007530 <arm_rfft_init_q15+0x80>
 8007522:	4b1b      	ldr	r3, [pc, #108]	@ (8007590 <arm_rfft_init_q15+0xe0>)
 8007524:	6143      	str	r3, [r0, #20]
 8007526:	2280      	movs	r2, #128	@ 0x80
 8007528:	6082      	str	r2, [r0, #8]
 800752a:	bc30      	pop	{r4, r5}
 800752c:	2000      	movs	r0, #0
 800752e:	4770      	bx	lr
 8007530:	f04f 30ff 	mov.w	r0, #4294967295
 8007534:	bc30      	pop	{r4, r5}
 8007536:	4770      	bx	lr
 8007538:	4b16      	ldr	r3, [pc, #88]	@ (8007594 <arm_rfft_init_q15+0xe4>)
 800753a:	6143      	str	r3, [r0, #20]
 800753c:	2202      	movs	r2, #2
 800753e:	6082      	str	r2, [r0, #8]
 8007540:	bc30      	pop	{r4, r5}
 8007542:	2000      	movs	r0, #0
 8007544:	4770      	bx	lr
 8007546:	4b14      	ldr	r3, [pc, #80]	@ (8007598 <arm_rfft_init_q15+0xe8>)
 8007548:	6143      	str	r3, [r0, #20]
 800754a:	2208      	movs	r2, #8
 800754c:	6082      	str	r2, [r0, #8]
 800754e:	bc30      	pop	{r4, r5}
 8007550:	2000      	movs	r0, #0
 8007552:	4770      	bx	lr
 8007554:	4b11      	ldr	r3, [pc, #68]	@ (800759c <arm_rfft_init_q15+0xec>)
 8007556:	6143      	str	r3, [r0, #20]
 8007558:	2240      	movs	r2, #64	@ 0x40
 800755a:	6082      	str	r2, [r0, #8]
 800755c:	bc30      	pop	{r4, r5}
 800755e:	2000      	movs	r0, #0
 8007560:	4770      	bx	lr
 8007562:	4b0f      	ldr	r3, [pc, #60]	@ (80075a0 <arm_rfft_init_q15+0xf0>)
 8007564:	6143      	str	r3, [r0, #20]
 8007566:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800756a:	6082      	str	r2, [r0, #8]
 800756c:	2000      	movs	r0, #0
 800756e:	e7b8      	b.n	80074e2 <arm_rfft_init_q15+0x32>
 8007570:	4b0c      	ldr	r3, [pc, #48]	@ (80075a4 <arm_rfft_init_q15+0xf4>)
 8007572:	6143      	str	r3, [r0, #20]
 8007574:	2210      	movs	r2, #16
 8007576:	6082      	str	r2, [r0, #8]
 8007578:	2000      	movs	r0, #0
 800757a:	e7b2      	b.n	80074e2 <arm_rfft_init_q15+0x32>
 800757c:	0800dd20 	.word	0x0800dd20
 8007580:	08011d20 	.word	0x08011d20
 8007584:	08009ef8 	.word	0x08009ef8
 8007588:	08009e98 	.word	0x08009e98
 800758c:	08009ea8 	.word	0x08009ea8
 8007590:	08009ee8 	.word	0x08009ee8
 8007594:	08009ec8 	.word	0x08009ec8
 8007598:	08009f08 	.word	0x08009f08
 800759c:	08009f18 	.word	0x08009f18
 80075a0:	08009eb8 	.word	0x08009eb8
 80075a4:	08009ed8 	.word	0x08009ed8

080075a8 <arm_dot_prod_q15>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	ea5f 0992 	movs.w	r9, r2, lsr #2
 80075b0:	d036      	beq.n	8007620 <arm_dot_prod_q15+0x78>
 80075b2:	468e      	mov	lr, r1
 80075b4:	4684      	mov	ip, r0
 80075b6:	46c8      	mov	r8, r9
 80075b8:	2600      	movs	r6, #0
 80075ba:	2700      	movs	r7, #0
 80075bc:	f8dc a000 	ldr.w	sl, [ip]
 80075c0:	f8de b000 	ldr.w	fp, [lr]
 80075c4:	4635      	mov	r5, r6
 80075c6:	463c      	mov	r4, r7
 80075c8:	fbca 54cb 	smlald	r5, r4, sl, fp
 80075cc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80075d0:	f8de 7004 	ldr.w	r7, [lr, #4]
 80075d4:	f10c 0c08 	add.w	ip, ip, #8
 80075d8:	f10e 0e08 	add.w	lr, lr, #8
 80075dc:	fbc6 54c7 	smlald	r5, r4, r6, r7
 80075e0:	f1b8 0801 	subs.w	r8, r8, #1
 80075e4:	462e      	mov	r6, r5
 80075e6:	4627      	mov	r7, r4
 80075e8:	d1e8      	bne.n	80075bc <arm_dot_prod_q15+0x14>
 80075ea:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80075ee:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 80075f2:	f012 0203 	ands.w	r2, r2, #3
 80075f6:	d00f      	beq.n	8007618 <arm_dot_prod_q15+0x70>
 80075f8:	880d      	ldrh	r5, [r1, #0]
 80075fa:	8804      	ldrh	r4, [r0, #0]
 80075fc:	3a01      	subs	r2, #1
 80075fe:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 8007602:	d009      	beq.n	8007618 <arm_dot_prod_q15+0x70>
 8007604:	884d      	ldrh	r5, [r1, #2]
 8007606:	8844      	ldrh	r4, [r0, #2]
 8007608:	2a01      	cmp	r2, #1
 800760a:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 800760e:	d003      	beq.n	8007618 <arm_dot_prod_q15+0x70>
 8007610:	8880      	ldrh	r0, [r0, #4]
 8007612:	888a      	ldrh	r2, [r1, #4]
 8007614:	fbc0 6782 	smlalbb	r6, r7, r0, r2
 8007618:	e9c3 6700 	strd	r6, r7, [r3]
 800761c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007620:	2600      	movs	r6, #0
 8007622:	2700      	movs	r7, #0
 8007624:	e7e5      	b.n	80075f2 <arm_dot_prod_q15+0x4a>
 8007626:	bf00      	nop

08007628 <arm_cfft_radix4by2_q15>:
 8007628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800762c:	084d      	lsrs	r5, r1, #1
 800762e:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8007632:	4616      	mov	r6, r2
 8007634:	d047      	beq.n	80076c6 <arm_cfft_radix4by2_q15+0x9e>
 8007636:	4604      	mov	r4, r0
 8007638:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 80076e0 <arm_cfft_radix4by2_q15+0xb8>
 800763c:	4696      	mov	lr, r2
 800763e:	4638      	mov	r0, r7
 8007640:	4621      	mov	r1, r4
 8007642:	462a      	mov	r2, r5
 8007644:	f04f 0c00 	mov.w	ip, #0
 8007648:	680b      	ldr	r3, [r1, #0]
 800764a:	f8d0 a000 	ldr.w	sl, [r0]
 800764e:	fa93 f32c 	shadd16	r3, r3, ip
 8007652:	fa9a fa2c 	shadd16	sl, sl, ip
 8007656:	fa93 f92a 	shadd16	r9, r3, sl
 800765a:	fad3 fa1a 	qsub16	sl, r3, sl
 800765e:	f85e 3b04 	ldr.w	r3, [lr], #4
 8007662:	f841 9b04 	str.w	r9, [r1], #4
 8007666:	fb23 f90a 	smuad	r9, r3, sl
 800766a:	fb43 f31a 	smusdx	r3, r3, sl
 800766e:	ea03 0308 	and.w	r3, r3, r8
 8007672:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8007676:	3a01      	subs	r2, #1
 8007678:	f840 3b04 	str.w	r3, [r0], #4
 800767c:	d1e4      	bne.n	8007648 <arm_cfft_radix4by2_q15+0x20>
 800767e:	4629      	mov	r1, r5
 8007680:	2302      	movs	r3, #2
 8007682:	4632      	mov	r2, r6
 8007684:	4620      	mov	r0, r4
 8007686:	f000 f8e9 	bl	800785c <arm_radix4_butterfly_q15>
 800768a:	4638      	mov	r0, r7
 800768c:	4629      	mov	r1, r5
 800768e:	4632      	mov	r2, r6
 8007690:	2302      	movs	r3, #2
 8007692:	f000 f8e3 	bl	800785c <arm_radix4_butterfly_q15>
 8007696:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800769a:	4620      	mov	r0, r4
 800769c:	f9b0 6000 	ldrsh.w	r6, [r0]
 80076a0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80076a4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80076a8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80076ac:	0076      	lsls	r6, r6, #1
 80076ae:	0064      	lsls	r4, r4, #1
 80076b0:	0052      	lsls	r2, r2, #1
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	8006      	strh	r6, [r0, #0]
 80076b6:	8044      	strh	r4, [r0, #2]
 80076b8:	8082      	strh	r2, [r0, #4]
 80076ba:	80c3      	strh	r3, [r0, #6]
 80076bc:	3008      	adds	r0, #8
 80076be:	4285      	cmp	r5, r0
 80076c0:	d1ec      	bne.n	800769c <arm_cfft_radix4by2_q15+0x74>
 80076c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c6:	4629      	mov	r1, r5
 80076c8:	2302      	movs	r3, #2
 80076ca:	f000 f8c7 	bl	800785c <arm_radix4_butterfly_q15>
 80076ce:	4632      	mov	r2, r6
 80076d0:	4629      	mov	r1, r5
 80076d2:	4638      	mov	r0, r7
 80076d4:	2302      	movs	r3, #2
 80076d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076da:	f000 b8bf 	b.w	800785c <arm_radix4_butterfly_q15>
 80076de:	bf00      	nop
 80076e0:	ffff0000 	.word	0xffff0000

080076e4 <arm_cfft_radix4by2_inverse_q15>:
 80076e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	084d      	lsrs	r5, r1, #1
 80076ea:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80076ee:	4616      	mov	r6, r2
 80076f0:	d047      	beq.n	8007782 <arm_cfft_radix4by2_inverse_q15+0x9e>
 80076f2:	4604      	mov	r4, r0
 80076f4:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 800779c <arm_cfft_radix4by2_inverse_q15+0xb8>
 80076f8:	4696      	mov	lr, r2
 80076fa:	4638      	mov	r0, r7
 80076fc:	4621      	mov	r1, r4
 80076fe:	462a      	mov	r2, r5
 8007700:	f04f 0c00 	mov.w	ip, #0
 8007704:	680b      	ldr	r3, [r1, #0]
 8007706:	f8d0 a000 	ldr.w	sl, [r0]
 800770a:	fa93 f32c 	shadd16	r3, r3, ip
 800770e:	fa9a fa2c 	shadd16	sl, sl, ip
 8007712:	fa93 f92a 	shadd16	r9, r3, sl
 8007716:	fad3 fa1a 	qsub16	sl, r3, sl
 800771a:	f85e 3b04 	ldr.w	r3, [lr], #4
 800771e:	f841 9b04 	str.w	r9, [r1], #4
 8007722:	fb43 f90a 	smusd	r9, r3, sl
 8007726:	fb23 f31a 	smuadx	r3, r3, sl
 800772a:	ea03 0308 	and.w	r3, r3, r8
 800772e:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8007732:	3a01      	subs	r2, #1
 8007734:	f840 3b04 	str.w	r3, [r0], #4
 8007738:	d1e4      	bne.n	8007704 <arm_cfft_radix4by2_inverse_q15+0x20>
 800773a:	4629      	mov	r1, r5
 800773c:	2302      	movs	r3, #2
 800773e:	4632      	mov	r2, r6
 8007740:	4620      	mov	r0, r4
 8007742:	f000 fa35 	bl	8007bb0 <arm_radix4_butterfly_inverse_q15>
 8007746:	4638      	mov	r0, r7
 8007748:	4629      	mov	r1, r5
 800774a:	4632      	mov	r2, r6
 800774c:	2302      	movs	r3, #2
 800774e:	f000 fa2f 	bl	8007bb0 <arm_radix4_butterfly_inverse_q15>
 8007752:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8007756:	4620      	mov	r0, r4
 8007758:	f9b0 6000 	ldrsh.w	r6, [r0]
 800775c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007760:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007764:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007768:	0076      	lsls	r6, r6, #1
 800776a:	0064      	lsls	r4, r4, #1
 800776c:	0052      	lsls	r2, r2, #1
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	8006      	strh	r6, [r0, #0]
 8007772:	8044      	strh	r4, [r0, #2]
 8007774:	8082      	strh	r2, [r0, #4]
 8007776:	80c3      	strh	r3, [r0, #6]
 8007778:	3008      	adds	r0, #8
 800777a:	4285      	cmp	r5, r0
 800777c:	d1ec      	bne.n	8007758 <arm_cfft_radix4by2_inverse_q15+0x74>
 800777e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007782:	4629      	mov	r1, r5
 8007784:	2302      	movs	r3, #2
 8007786:	f000 fa13 	bl	8007bb0 <arm_radix4_butterfly_inverse_q15>
 800778a:	4632      	mov	r2, r6
 800778c:	4629      	mov	r1, r5
 800778e:	4638      	mov	r0, r7
 8007790:	2302      	movs	r3, #2
 8007792:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007796:	f000 ba0b 	b.w	8007bb0 <arm_radix4_butterfly_inverse_q15>
 800779a:	bf00      	nop
 800779c:	ffff0000 	.word	0xffff0000

080077a0 <arm_cfft_q15>:
 80077a0:	b5e0      	push	{r5, r6, r7, lr}
 80077a2:	2a01      	cmp	r2, #1
 80077a4:	460f      	mov	r7, r1
 80077a6:	4605      	mov	r5, r0
 80077a8:	8801      	ldrh	r1, [r0, #0]
 80077aa:	461e      	mov	r6, r3
 80077ac:	d02f      	beq.n	800780e <arm_cfft_q15+0x6e>
 80077ae:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80077b2:	d026      	beq.n	8007802 <arm_cfft_q15+0x62>
 80077b4:	d908      	bls.n	80077c8 <arm_cfft_q15+0x28>
 80077b6:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80077ba:	d017      	beq.n	80077ec <arm_cfft_q15+0x4c>
 80077bc:	d91b      	bls.n	80077f6 <arm_cfft_q15+0x56>
 80077be:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80077c2:	d01e      	beq.n	8007802 <arm_cfft_q15+0x62>
 80077c4:	b93e      	cbnz	r6, 80077d6 <arm_cfft_q15+0x36>
 80077c6:	bde0      	pop	{r5, r6, r7, pc}
 80077c8:	2940      	cmp	r1, #64	@ 0x40
 80077ca:	d01a      	beq.n	8007802 <arm_cfft_q15+0x62>
 80077cc:	d90a      	bls.n	80077e4 <arm_cfft_q15+0x44>
 80077ce:	2980      	cmp	r1, #128	@ 0x80
 80077d0:	d00c      	beq.n	80077ec <arm_cfft_q15+0x4c>
 80077d2:	2e00      	cmp	r6, #0
 80077d4:	d0f7      	beq.n	80077c6 <arm_cfft_q15+0x26>
 80077d6:	68aa      	ldr	r2, [r5, #8]
 80077d8:	89a9      	ldrh	r1, [r5, #12]
 80077da:	4638      	mov	r0, r7
 80077dc:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 80077e0:	f000 bb90 	b.w	8007f04 <arm_bitreversal_16>
 80077e4:	2910      	cmp	r1, #16
 80077e6:	d00c      	beq.n	8007802 <arm_cfft_q15+0x62>
 80077e8:	2920      	cmp	r1, #32
 80077ea:	d1eb      	bne.n	80077c4 <arm_cfft_q15+0x24>
 80077ec:	686a      	ldr	r2, [r5, #4]
 80077ee:	4638      	mov	r0, r7
 80077f0:	f7ff ff1a 	bl	8007628 <arm_cfft_radix4by2_q15>
 80077f4:	e7e6      	b.n	80077c4 <arm_cfft_q15+0x24>
 80077f6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80077fa:	d0f7      	beq.n	80077ec <arm_cfft_q15+0x4c>
 80077fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007800:	d1e0      	bne.n	80077c4 <arm_cfft_q15+0x24>
 8007802:	686a      	ldr	r2, [r5, #4]
 8007804:	2301      	movs	r3, #1
 8007806:	4638      	mov	r0, r7
 8007808:	f000 f828 	bl	800785c <arm_radix4_butterfly_q15>
 800780c:	e7da      	b.n	80077c4 <arm_cfft_q15+0x24>
 800780e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007812:	d01d      	beq.n	8007850 <arm_cfft_q15+0xb0>
 8007814:	d907      	bls.n	8007826 <arm_cfft_q15+0x86>
 8007816:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800781a:	d00e      	beq.n	800783a <arm_cfft_q15+0x9a>
 800781c:	d912      	bls.n	8007844 <arm_cfft_q15+0xa4>
 800781e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007822:	d1cf      	bne.n	80077c4 <arm_cfft_q15+0x24>
 8007824:	e014      	b.n	8007850 <arm_cfft_q15+0xb0>
 8007826:	2940      	cmp	r1, #64	@ 0x40
 8007828:	d012      	beq.n	8007850 <arm_cfft_q15+0xb0>
 800782a:	d902      	bls.n	8007832 <arm_cfft_q15+0x92>
 800782c:	2980      	cmp	r1, #128	@ 0x80
 800782e:	d004      	beq.n	800783a <arm_cfft_q15+0x9a>
 8007830:	e7c8      	b.n	80077c4 <arm_cfft_q15+0x24>
 8007832:	2910      	cmp	r1, #16
 8007834:	d00c      	beq.n	8007850 <arm_cfft_q15+0xb0>
 8007836:	2920      	cmp	r1, #32
 8007838:	d1c4      	bne.n	80077c4 <arm_cfft_q15+0x24>
 800783a:	686a      	ldr	r2, [r5, #4]
 800783c:	4638      	mov	r0, r7
 800783e:	f7ff ff51 	bl	80076e4 <arm_cfft_radix4by2_inverse_q15>
 8007842:	e7bf      	b.n	80077c4 <arm_cfft_q15+0x24>
 8007844:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007848:	d0f7      	beq.n	800783a <arm_cfft_q15+0x9a>
 800784a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800784e:	d1b9      	bne.n	80077c4 <arm_cfft_q15+0x24>
 8007850:	686a      	ldr	r2, [r5, #4]
 8007852:	2301      	movs	r3, #1
 8007854:	4638      	mov	r0, r7
 8007856:	f000 f9ab 	bl	8007bb0 <arm_radix4_butterfly_inverse_q15>
 800785a:	e7b3      	b.n	80077c4 <arm_cfft_q15+0x24>

0800785c <arm_radix4_butterfly_q15>:
 800785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	b093      	sub	sp, #76	@ 0x4c
 8007862:	f021 0a03 	bic.w	sl, r1, #3
 8007866:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 800786a:	9210      	str	r2, [sp, #64]	@ 0x40
 800786c:	2b01      	cmp	r3, #1
 800786e:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8007872:	eb0c 050a 	add.w	r5, ip, sl
 8007876:	9101      	str	r1, [sp, #4]
 8007878:	900f      	str	r0, [sp, #60]	@ 0x3c
 800787a:	9303      	str	r3, [sp, #12]
 800787c:	4482      	add	sl, r0
 800787e:	9211      	str	r2, [sp, #68]	@ 0x44
 8007880:	f040 8124 	bne.w	8007acc <arm_radix4_butterfly_q15+0x270>
 8007884:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007886:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8007bac <arm_radix4_butterfly_q15+0x350>
 800788a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800788c:	f8cd a008 	str.w	sl, [sp, #8]
 8007890:	4693      	mov	fp, r2
 8007892:	4690      	mov	r8, r2
 8007894:	4657      	mov	r7, sl
 8007896:	2300      	movs	r3, #0
 8007898:	4691      	mov	r9, r2
 800789a:	6830      	ldr	r0, [r6, #0]
 800789c:	f8dc 2000 	ldr.w	r2, [ip]
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	fa90 f023 	shadd16	r0, r0, r3
 80078a6:	fa91 f123 	shadd16	r1, r1, r3
 80078aa:	fa90 f023 	shadd16	r0, r0, r3
 80078ae:	fa91 fa23 	shadd16	sl, r1, r3
 80078b2:	fa92 f223 	shadd16	r2, r2, r3
 80078b6:	6829      	ldr	r1, [r5, #0]
 80078b8:	fa92 f223 	shadd16	r2, r2, r3
 80078bc:	fa91 f123 	shadd16	r1, r1, r3
 80078c0:	fa90 f412 	qadd16	r4, r0, r2
 80078c4:	fa91 f123 	shadd16	r1, r1, r3
 80078c8:	fa9a f111 	qadd16	r1, sl, r1
 80078cc:	fa94 fa21 	shadd16	sl, r4, r1
 80078d0:	f846 ab04 	str.w	sl, [r6], #4
 80078d4:	fad4 f411 	qsub16	r4, r4, r1
 80078d8:	fad0 f212 	qsub16	r2, r0, r2
 80078dc:	f85b 1b08 	ldr.w	r1, [fp], #8
 80078e0:	fb21 f004 	smuad	r0, r1, r4
 80078e4:	fb41 f114 	smusdx	r1, r1, r4
 80078e8:	ea01 010e 	and.w	r1, r1, lr
 80078ec:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 80078f0:	6838      	ldr	r0, [r7, #0]
 80078f2:	f847 1b04 	str.w	r1, [r7], #4
 80078f6:	fa90 f023 	shadd16	r0, r0, r3
 80078fa:	682c      	ldr	r4, [r5, #0]
 80078fc:	fa90 f023 	shadd16	r0, r0, r3
 8007900:	fa94 f423 	shadd16	r4, r4, r3
 8007904:	f859 1b04 	ldr.w	r1, [r9], #4
 8007908:	fa94 f423 	shadd16	r4, r4, r3
 800790c:	fad0 f014 	qsub16	r0, r0, r4
 8007910:	faa2 f410 	qasx	r4, r2, r0
 8007914:	fae2 f210 	qsax	r2, r2, r0
 8007918:	fb21 fa02 	smuad	sl, r1, r2
 800791c:	fb41 f212 	smusdx	r2, r1, r2
 8007920:	ea02 020e 	and.w	r2, r2, lr
 8007924:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8007928:	f84c 2b04 	str.w	r2, [ip], #4
 800792c:	f858 2b0c 	ldr.w	r2, [r8], #12
 8007930:	fb22 f104 	smuad	r1, r2, r4
 8007934:	fb42 f214 	smusdx	r2, r2, r4
 8007938:	ea02 020e 	and.w	r2, r2, lr
 800793c:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007940:	f845 2b04 	str.w	r2, [r5], #4
 8007944:	9a02      	ldr	r2, [sp, #8]
 8007946:	42b2      	cmp	r2, r6
 8007948:	d1a7      	bne.n	800789a <arm_radix4_butterfly_q15+0x3e>
 800794a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800794c:	9b03      	ldr	r3, [sp, #12]
 800794e:	2a04      	cmp	r2, #4
 8007950:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007954:	f240 8127 	bls.w	8007ba6 <arm_radix4_butterfly_q15+0x34a>
 8007958:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8007bac <arm_radix4_butterfly_q15+0x350>
 800795c:	920e      	str	r2, [sp, #56]	@ 0x38
 800795e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007960:	9102      	str	r1, [sp, #8]
 8007962:	4608      	mov	r0, r1
 8007964:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007968:	0889      	lsrs	r1, r1, #2
 800796a:	0092      	lsls	r2, r2, #2
 800796c:	0086      	lsls	r6, r0, #2
 800796e:	9801      	ldr	r0, [sp, #4]
 8007970:	920d      	str	r2, [sp, #52]	@ 0x34
 8007972:	008c      	lsls	r4, r1, #2
 8007974:	009a      	lsls	r2, r3, #2
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	4288      	cmp	r0, r1
 800797a:	940a      	str	r4, [sp, #40]	@ 0x28
 800797c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800797e:	4604      	mov	r4, r0
 8007980:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007982:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007984:	910e      	str	r1, [sp, #56]	@ 0x38
 8007986:	bf28      	it	cs
 8007988:	460c      	movcs	r4, r1
 800798a:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800798e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007992:	9308      	str	r3, [sp, #32]
 8007994:	9307      	str	r3, [sp, #28]
 8007996:	2300      	movs	r3, #0
 8007998:	940c      	str	r4, [sp, #48]	@ 0x30
 800799a:	9104      	str	r1, [sp, #16]
 800799c:	9209      	str	r2, [sp, #36]	@ 0x24
 800799e:	9303      	str	r3, [sp, #12]
 80079a0:	9b08      	ldr	r3, [sp, #32]
 80079a2:	9a05      	ldr	r2, [sp, #20]
 80079a4:	f8d3 9000 	ldr.w	r9, [r3]
 80079a8:	9b07      	ldr	r3, [sp, #28]
 80079aa:	9f03      	ldr	r7, [sp, #12]
 80079ac:	f8d3 8000 	ldr.w	r8, [r3]
 80079b0:	9b06      	ldr	r3, [sp, #24]
 80079b2:	f8d3 e000 	ldr.w	lr, [r3]
 80079b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079b8:	4615      	mov	r5, r2
 80079ba:	1898      	adds	r0, r3, r2
 80079bc:	9a04      	ldr	r2, [sp, #16]
 80079be:	4614      	mov	r4, r2
 80079c0:	1899      	adds	r1, r3, r2
 80079c2:	682a      	ldr	r2, [r5, #0]
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	f8d0 b000 	ldr.w	fp, [r0]
 80079ca:	fa92 fc13 	qadd16	ip, r2, r3
 80079ce:	fad2 f213 	qsub16	r2, r2, r3
 80079d2:	680b      	ldr	r3, [r1, #0]
 80079d4:	fa9b f313 	qadd16	r3, fp, r3
 80079d8:	fa9c fb23 	shadd16	fp, ip, r3
 80079dc:	fadc f323 	shsub16	r3, ip, r3
 80079e0:	f04f 0c00 	mov.w	ip, #0
 80079e4:	fa9b fb2c 	shadd16	fp, fp, ip
 80079e8:	f8c5 b000 	str.w	fp, [r5]
 80079ec:	4435      	add	r5, r6
 80079ee:	fb28 fb03 	smuad	fp, r8, r3
 80079f2:	fb48 f313 	smusdx	r3, r8, r3
 80079f6:	ea03 030a 	and.w	r3, r3, sl
 80079fa:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80079fe:	f8d0 b000 	ldr.w	fp, [r0]
 8007a02:	6003      	str	r3, [r0, #0]
 8007a04:	f8d1 c000 	ldr.w	ip, [r1]
 8007a08:	fadb fc1c 	qsub16	ip, fp, ip
 8007a0c:	4430      	add	r0, r6
 8007a0e:	faa2 f32c 	shasx	r3, r2, ip
 8007a12:	fae2 f22c 	shsax	r2, r2, ip
 8007a16:	fb29 fc02 	smuad	ip, r9, r2
 8007a1a:	fb49 f212 	smusdx	r2, r9, r2
 8007a1e:	ea02 020a 	and.w	r2, r2, sl
 8007a22:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8007a26:	6022      	str	r2, [r4, #0]
 8007a28:	4434      	add	r4, r6
 8007a2a:	fb2e f203 	smuad	r2, lr, r3
 8007a2e:	fb4e f313 	smusdx	r3, lr, r3
 8007a32:	ea03 030a 	and.w	r3, r3, sl
 8007a36:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007a3a:	9a02      	ldr	r2, [sp, #8]
 8007a3c:	600b      	str	r3, [r1, #0]
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	4417      	add	r7, r2
 8007a42:	42bb      	cmp	r3, r7
 8007a44:	4431      	add	r1, r6
 8007a46:	d8bc      	bhi.n	80079c2 <arm_radix4_butterfly_q15+0x166>
 8007a48:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	9208      	str	r2, [sp, #32]
 8007a50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a52:	9a07      	ldr	r2, [sp, #28]
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	440a      	add	r2, r1
 8007a58:	9207      	str	r2, [sp, #28]
 8007a5a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007a5c:	9a06      	ldr	r2, [sp, #24]
 8007a5e:	440a      	add	r2, r1
 8007a60:	9206      	str	r2, [sp, #24]
 8007a62:	9a05      	ldr	r2, [sp, #20]
 8007a64:	3204      	adds	r2, #4
 8007a66:	9205      	str	r2, [sp, #20]
 8007a68:	9a04      	ldr	r2, [sp, #16]
 8007a6a:	3204      	adds	r2, #4
 8007a6c:	9204      	str	r2, [sp, #16]
 8007a6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a70:	3301      	adds	r3, #1
 8007a72:	4293      	cmp	r3, r2
 8007a74:	9303      	str	r3, [sp, #12]
 8007a76:	d393      	bcc.n	80079a0 <arm_radix4_butterfly_q15+0x144>
 8007a78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a7c:	2a04      	cmp	r2, #4
 8007a7e:	f63f af6e 	bhi.w	800795e <arm_radix4_butterfly_q15+0x102>
 8007a82:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a86:	689d      	ldr	r5, [r3, #8]
 8007a88:	68de      	ldr	r6, [r3, #12]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	6859      	ldr	r1, [r3, #4]
 8007a8e:	fa92 f015 	qadd16	r0, r2, r5
 8007a92:	3c01      	subs	r4, #1
 8007a94:	fad2 f215 	qsub16	r2, r2, r5
 8007a98:	f103 0310 	add.w	r3, r3, #16
 8007a9c:	fa91 f516 	qadd16	r5, r1, r6
 8007aa0:	fad1 f116 	qsub16	r1, r1, r6
 8007aa4:	fa90 f625 	shadd16	r6, r0, r5
 8007aa8:	fad0 f025 	shsub16	r0, r0, r5
 8007aac:	f843 6c10 	str.w	r6, [r3, #-16]
 8007ab0:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007ab4:	fae2 f021 	shsax	r0, r2, r1
 8007ab8:	faa2 f221 	shasx	r2, r2, r1
 8007abc:	f843 0c08 	str.w	r0, [r3, #-8]
 8007ac0:	f843 2c04 	str.w	r2, [r3, #-4]
 8007ac4:	d1df      	bne.n	8007a86 <arm_radix4_butterfly_q15+0x22a>
 8007ac6:	b013      	add	sp, #76	@ 0x4c
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	2400      	movs	r4, #0
 8007ace:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8007bac <arm_radix4_butterfly_q15+0x350>
 8007ad2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007ad4:	4623      	mov	r3, r4
 8007ad6:	4680      	mov	r8, r0
 8007ad8:	4691      	mov	r9, r2
 8007ada:	f8d8 0000 	ldr.w	r0, [r8]
 8007ade:	f8dc 2000 	ldr.w	r2, [ip]
 8007ae2:	f8da 1000 	ldr.w	r1, [sl]
 8007ae6:	fa90 f023 	shadd16	r0, r0, r3
 8007aea:	fa91 f123 	shadd16	r1, r1, r3
 8007aee:	fa90 f023 	shadd16	r0, r0, r3
 8007af2:	fa91 fb23 	shadd16	fp, r1, r3
 8007af6:	fa92 f223 	shadd16	r2, r2, r3
 8007afa:	6829      	ldr	r1, [r5, #0]
 8007afc:	fa92 f223 	shadd16	r2, r2, r3
 8007b00:	fa91 f123 	shadd16	r1, r1, r3
 8007b04:	fa90 f612 	qadd16	r6, r0, r2
 8007b08:	fa91 f123 	shadd16	r1, r1, r3
 8007b0c:	fa9b f111 	qadd16	r1, fp, r1
 8007b10:	fa96 fb21 	shadd16	fp, r6, r1
 8007b14:	f848 bb04 	str.w	fp, [r8], #4
 8007b18:	fad6 f611 	qsub16	r6, r6, r1
 8007b1c:	fad0 f212 	qsub16	r2, r0, r2
 8007b20:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8007b24:	fb21 f006 	smuad	r0, r1, r6
 8007b28:	fb41 f116 	smusdx	r1, r1, r6
 8007b2c:	ea01 010e 	and.w	r1, r1, lr
 8007b30:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007b34:	f8da 0000 	ldr.w	r0, [sl]
 8007b38:	f84a 1b04 	str.w	r1, [sl], #4
 8007b3c:	fa90 f023 	shadd16	r0, r0, r3
 8007b40:	682e      	ldr	r6, [r5, #0]
 8007b42:	fa90 f023 	shadd16	r0, r0, r3
 8007b46:	fa96 f623 	shadd16	r6, r6, r3
 8007b4a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007b4e:	fa96 f623 	shadd16	r6, r6, r3
 8007b52:	fad0 f016 	qsub16	r0, r0, r6
 8007b56:	faa2 f610 	qasx	r6, r2, r0
 8007b5a:	fae2 f210 	qsax	r2, r2, r0
 8007b5e:	fb21 fb02 	smuad	fp, r1, r2
 8007b62:	fb41 f212 	smusdx	r2, r1, r2
 8007b66:	ea02 020e 	and.w	r2, r2, lr
 8007b6a:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8007b6e:	f84c 2b04 	str.w	r2, [ip], #4
 8007b72:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007b76:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8007b7a:	fb22 f106 	smuad	r1, r2, r6
 8007b7e:	fb42 f216 	smusdx	r2, r2, r6
 8007b82:	ea02 020e 	and.w	r2, r2, lr
 8007b86:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007b8a:	f845 2b04 	str.w	r2, [r5], #4
 8007b8e:	9a03      	ldr	r2, [sp, #12]
 8007b90:	f1b9 0901 	subs.w	r9, r9, #1
 8007b94:	4414      	add	r4, r2
 8007b96:	d1a0      	bne.n	8007ada <arm_radix4_butterfly_q15+0x27e>
 8007b98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	2a04      	cmp	r2, #4
 8007b9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007ba2:	f63f aed9 	bhi.w	8007958 <arm_radix4_butterfly_q15+0xfc>
 8007ba6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ba8:	4614      	mov	r4, r2
 8007baa:	e76c      	b.n	8007a86 <arm_radix4_butterfly_q15+0x22a>
 8007bac:	ffff0000 	.word	0xffff0000

08007bb0 <arm_radix4_butterfly_inverse_q15>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	b093      	sub	sp, #76	@ 0x4c
 8007bb6:	f021 0a03 	bic.w	sl, r1, #3
 8007bba:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8007bbe:	9210      	str	r2, [sp, #64]	@ 0x40
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8007bc6:	eb0c 050a 	add.w	r5, ip, sl
 8007bca:	9101      	str	r1, [sp, #4]
 8007bcc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007bce:	9303      	str	r3, [sp, #12]
 8007bd0:	4482      	add	sl, r0
 8007bd2:	9211      	str	r2, [sp, #68]	@ 0x44
 8007bd4:	f040 8124 	bne.w	8007e20 <arm_radix4_butterfly_inverse_q15+0x270>
 8007bd8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007bda:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8007f00 <arm_radix4_butterfly_inverse_q15+0x350>
 8007bde:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8007be0:	f8cd a008 	str.w	sl, [sp, #8]
 8007be4:	4693      	mov	fp, r2
 8007be6:	4690      	mov	r8, r2
 8007be8:	4657      	mov	r7, sl
 8007bea:	2300      	movs	r3, #0
 8007bec:	4691      	mov	r9, r2
 8007bee:	6830      	ldr	r0, [r6, #0]
 8007bf0:	f8dc 2000 	ldr.w	r2, [ip]
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	fa90 f023 	shadd16	r0, r0, r3
 8007bfa:	fa91 f123 	shadd16	r1, r1, r3
 8007bfe:	fa90 f023 	shadd16	r0, r0, r3
 8007c02:	fa91 fa23 	shadd16	sl, r1, r3
 8007c06:	fa92 f223 	shadd16	r2, r2, r3
 8007c0a:	6829      	ldr	r1, [r5, #0]
 8007c0c:	fa92 f223 	shadd16	r2, r2, r3
 8007c10:	fa91 f123 	shadd16	r1, r1, r3
 8007c14:	fa90 f412 	qadd16	r4, r0, r2
 8007c18:	fa91 f123 	shadd16	r1, r1, r3
 8007c1c:	fa9a f111 	qadd16	r1, sl, r1
 8007c20:	fa94 fa21 	shadd16	sl, r4, r1
 8007c24:	f846 ab04 	str.w	sl, [r6], #4
 8007c28:	fad4 f411 	qsub16	r4, r4, r1
 8007c2c:	fad0 f212 	qsub16	r2, r0, r2
 8007c30:	f85b 1b08 	ldr.w	r1, [fp], #8
 8007c34:	fb41 f004 	smusd	r0, r1, r4
 8007c38:	fb21 f114 	smuadx	r1, r1, r4
 8007c3c:	ea01 010e 	and.w	r1, r1, lr
 8007c40:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007c44:	6838      	ldr	r0, [r7, #0]
 8007c46:	f847 1b04 	str.w	r1, [r7], #4
 8007c4a:	fa90 f023 	shadd16	r0, r0, r3
 8007c4e:	682c      	ldr	r4, [r5, #0]
 8007c50:	fa90 f023 	shadd16	r0, r0, r3
 8007c54:	fa94 f423 	shadd16	r4, r4, r3
 8007c58:	f859 1b04 	ldr.w	r1, [r9], #4
 8007c5c:	fa94 f423 	shadd16	r4, r4, r3
 8007c60:	fad0 f014 	qsub16	r0, r0, r4
 8007c64:	fae2 f410 	qsax	r4, r2, r0
 8007c68:	faa2 f210 	qasx	r2, r2, r0
 8007c6c:	fb41 fa02 	smusd	sl, r1, r2
 8007c70:	fb21 f212 	smuadx	r2, r1, r2
 8007c74:	ea02 020e 	and.w	r2, r2, lr
 8007c78:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8007c7c:	f84c 2b04 	str.w	r2, [ip], #4
 8007c80:	f858 2b0c 	ldr.w	r2, [r8], #12
 8007c84:	fb42 f104 	smusd	r1, r2, r4
 8007c88:	fb22 f214 	smuadx	r2, r2, r4
 8007c8c:	ea02 020e 	and.w	r2, r2, lr
 8007c90:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007c94:	f845 2b04 	str.w	r2, [r5], #4
 8007c98:	9a02      	ldr	r2, [sp, #8]
 8007c9a:	42b2      	cmp	r2, r6
 8007c9c:	d1a7      	bne.n	8007bee <arm_radix4_butterfly_inverse_q15+0x3e>
 8007c9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	2a04      	cmp	r2, #4
 8007ca4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007ca8:	f240 8127 	bls.w	8007efa <arm_radix4_butterfly_inverse_q15+0x34a>
 8007cac:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8007f00 <arm_radix4_butterfly_inverse_q15+0x350>
 8007cb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cb2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007cb4:	9102      	str	r1, [sp, #8]
 8007cb6:	4608      	mov	r0, r1
 8007cb8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007cbc:	0889      	lsrs	r1, r1, #2
 8007cbe:	0092      	lsls	r2, r2, #2
 8007cc0:	0086      	lsls	r6, r0, #2
 8007cc2:	9801      	ldr	r0, [sp, #4]
 8007cc4:	920d      	str	r2, [sp, #52]	@ 0x34
 8007cc6:	008c      	lsls	r4, r1, #2
 8007cc8:	009a      	lsls	r2, r3, #2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	4288      	cmp	r0, r1
 8007cce:	940a      	str	r4, [sp, #40]	@ 0x28
 8007cd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007cd6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007cd8:	910e      	str	r1, [sp, #56]	@ 0x38
 8007cda:	bf28      	it	cs
 8007cdc:	460c      	movcs	r4, r1
 8007cde:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8007ce2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007ce6:	9308      	str	r3, [sp, #32]
 8007ce8:	9307      	str	r3, [sp, #28]
 8007cea:	2300      	movs	r3, #0
 8007cec:	940c      	str	r4, [sp, #48]	@ 0x30
 8007cee:	9104      	str	r1, [sp, #16]
 8007cf0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cf2:	9303      	str	r3, [sp, #12]
 8007cf4:	9b08      	ldr	r3, [sp, #32]
 8007cf6:	9a05      	ldr	r2, [sp, #20]
 8007cf8:	f8d3 9000 	ldr.w	r9, [r3]
 8007cfc:	9b07      	ldr	r3, [sp, #28]
 8007cfe:	9f03      	ldr	r7, [sp, #12]
 8007d00:	f8d3 8000 	ldr.w	r8, [r3]
 8007d04:	9b06      	ldr	r3, [sp, #24]
 8007d06:	f8d3 e000 	ldr.w	lr, [r3]
 8007d0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d0c:	4615      	mov	r5, r2
 8007d0e:	1898      	adds	r0, r3, r2
 8007d10:	9a04      	ldr	r2, [sp, #16]
 8007d12:	4614      	mov	r4, r2
 8007d14:	1899      	adds	r1, r3, r2
 8007d16:	682a      	ldr	r2, [r5, #0]
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	f8d0 b000 	ldr.w	fp, [r0]
 8007d1e:	fa92 fc13 	qadd16	ip, r2, r3
 8007d22:	fad2 f213 	qsub16	r2, r2, r3
 8007d26:	680b      	ldr	r3, [r1, #0]
 8007d28:	fa9b f313 	qadd16	r3, fp, r3
 8007d2c:	fa9c fb23 	shadd16	fp, ip, r3
 8007d30:	fadc f323 	shsub16	r3, ip, r3
 8007d34:	f04f 0c00 	mov.w	ip, #0
 8007d38:	fa9b fb2c 	shadd16	fp, fp, ip
 8007d3c:	f8c5 b000 	str.w	fp, [r5]
 8007d40:	4435      	add	r5, r6
 8007d42:	fb48 fb03 	smusd	fp, r8, r3
 8007d46:	fb28 f313 	smuadx	r3, r8, r3
 8007d4a:	ea03 030a 	and.w	r3, r3, sl
 8007d4e:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8007d52:	f8d0 b000 	ldr.w	fp, [r0]
 8007d56:	6003      	str	r3, [r0, #0]
 8007d58:	f8d1 c000 	ldr.w	ip, [r1]
 8007d5c:	fadb fc1c 	qsub16	ip, fp, ip
 8007d60:	4430      	add	r0, r6
 8007d62:	fae2 f32c 	shsax	r3, r2, ip
 8007d66:	faa2 f22c 	shasx	r2, r2, ip
 8007d6a:	fb49 fc02 	smusd	ip, r9, r2
 8007d6e:	fb29 f212 	smuadx	r2, r9, r2
 8007d72:	ea02 020a 	and.w	r2, r2, sl
 8007d76:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8007d7a:	6022      	str	r2, [r4, #0]
 8007d7c:	4434      	add	r4, r6
 8007d7e:	fb4e f203 	smusd	r2, lr, r3
 8007d82:	fb2e f313 	smuadx	r3, lr, r3
 8007d86:	ea03 030a 	and.w	r3, r3, sl
 8007d8a:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007d8e:	9a02      	ldr	r2, [sp, #8]
 8007d90:	600b      	str	r3, [r1, #0]
 8007d92:	9b01      	ldr	r3, [sp, #4]
 8007d94:	4417      	add	r7, r2
 8007d96:	42bb      	cmp	r3, r7
 8007d98:	4431      	add	r1, r6
 8007d9a:	d8bc      	bhi.n	8007d16 <arm_radix4_butterfly_inverse_q15+0x166>
 8007d9c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8007da0:	440a      	add	r2, r1
 8007da2:	9208      	str	r2, [sp, #32]
 8007da4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007da6:	9a07      	ldr	r2, [sp, #28]
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	440a      	add	r2, r1
 8007dac:	9207      	str	r2, [sp, #28]
 8007dae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007db0:	9a06      	ldr	r2, [sp, #24]
 8007db2:	440a      	add	r2, r1
 8007db4:	9206      	str	r2, [sp, #24]
 8007db6:	9a05      	ldr	r2, [sp, #20]
 8007db8:	3204      	adds	r2, #4
 8007dba:	9205      	str	r2, [sp, #20]
 8007dbc:	9a04      	ldr	r2, [sp, #16]
 8007dbe:	3204      	adds	r2, #4
 8007dc0:	9204      	str	r2, [sp, #16]
 8007dc2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	d393      	bcc.n	8007cf4 <arm_radix4_butterfly_inverse_q15+0x144>
 8007dcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd0:	2a04      	cmp	r2, #4
 8007dd2:	f63f af6e 	bhi.w	8007cb2 <arm_radix4_butterfly_inverse_q15+0x102>
 8007dd6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007dd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dda:	689d      	ldr	r5, [r3, #8]
 8007ddc:	68de      	ldr	r6, [r3, #12]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	6859      	ldr	r1, [r3, #4]
 8007de2:	fa92 f015 	qadd16	r0, r2, r5
 8007de6:	3c01      	subs	r4, #1
 8007de8:	fad2 f215 	qsub16	r2, r2, r5
 8007dec:	f103 0310 	add.w	r3, r3, #16
 8007df0:	fa91 f516 	qadd16	r5, r1, r6
 8007df4:	fad1 f116 	qsub16	r1, r1, r6
 8007df8:	fa90 f625 	shadd16	r6, r0, r5
 8007dfc:	fad0 f025 	shsub16	r0, r0, r5
 8007e00:	f843 6c10 	str.w	r6, [r3, #-16]
 8007e04:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007e08:	faa2 f021 	shasx	r0, r2, r1
 8007e0c:	fae2 f221 	shsax	r2, r2, r1
 8007e10:	f843 0c08 	str.w	r0, [r3, #-8]
 8007e14:	f843 2c04 	str.w	r2, [r3, #-4]
 8007e18:	d1df      	bne.n	8007dda <arm_radix4_butterfly_inverse_q15+0x22a>
 8007e1a:	b013      	add	sp, #76	@ 0x4c
 8007e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e20:	2400      	movs	r4, #0
 8007e22:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8007f00 <arm_radix4_butterfly_inverse_q15+0x350>
 8007e26:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007e28:	4623      	mov	r3, r4
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	4691      	mov	r9, r2
 8007e2e:	f8d8 0000 	ldr.w	r0, [r8]
 8007e32:	f8dc 2000 	ldr.w	r2, [ip]
 8007e36:	f8da 1000 	ldr.w	r1, [sl]
 8007e3a:	fa90 f023 	shadd16	r0, r0, r3
 8007e3e:	fa91 f123 	shadd16	r1, r1, r3
 8007e42:	fa90 f023 	shadd16	r0, r0, r3
 8007e46:	fa91 fb23 	shadd16	fp, r1, r3
 8007e4a:	fa92 f223 	shadd16	r2, r2, r3
 8007e4e:	6829      	ldr	r1, [r5, #0]
 8007e50:	fa92 f223 	shadd16	r2, r2, r3
 8007e54:	fa91 f123 	shadd16	r1, r1, r3
 8007e58:	fa90 f612 	qadd16	r6, r0, r2
 8007e5c:	fa91 f123 	shadd16	r1, r1, r3
 8007e60:	fa9b f111 	qadd16	r1, fp, r1
 8007e64:	fa96 fb21 	shadd16	fp, r6, r1
 8007e68:	f848 bb04 	str.w	fp, [r8], #4
 8007e6c:	fad6 f611 	qsub16	r6, r6, r1
 8007e70:	fad0 f212 	qsub16	r2, r0, r2
 8007e74:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8007e78:	fb41 f006 	smusd	r0, r1, r6
 8007e7c:	fb21 f116 	smuadx	r1, r1, r6
 8007e80:	ea01 010e 	and.w	r1, r1, lr
 8007e84:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007e88:	f8da 0000 	ldr.w	r0, [sl]
 8007e8c:	f84a 1b04 	str.w	r1, [sl], #4
 8007e90:	fa90 f023 	shadd16	r0, r0, r3
 8007e94:	682e      	ldr	r6, [r5, #0]
 8007e96:	fa90 f023 	shadd16	r0, r0, r3
 8007e9a:	fa96 f623 	shadd16	r6, r6, r3
 8007e9e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007ea2:	fa96 f623 	shadd16	r6, r6, r3
 8007ea6:	fad0 f016 	qsub16	r0, r0, r6
 8007eaa:	fae2 f610 	qsax	r6, r2, r0
 8007eae:	faa2 f210 	qasx	r2, r2, r0
 8007eb2:	fb41 fb02 	smusd	fp, r1, r2
 8007eb6:	fb21 f212 	smuadx	r2, r1, r2
 8007eba:	ea02 020e 	and.w	r2, r2, lr
 8007ebe:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8007ec2:	f84c 2b04 	str.w	r2, [ip], #4
 8007ec6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007eca:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8007ece:	fb42 f106 	smusd	r1, r2, r6
 8007ed2:	fb22 f216 	smuadx	r2, r2, r6
 8007ed6:	ea02 020e 	and.w	r2, r2, lr
 8007eda:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007ede:	f845 2b04 	str.w	r2, [r5], #4
 8007ee2:	9a03      	ldr	r2, [sp, #12]
 8007ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ee8:	4414      	add	r4, r2
 8007eea:	d1a0      	bne.n	8007e2e <arm_radix4_butterfly_inverse_q15+0x27e>
 8007eec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007eee:	9b03      	ldr	r3, [sp, #12]
 8007ef0:	2a04      	cmp	r2, #4
 8007ef2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007ef6:	f63f aed9 	bhi.w	8007cac <arm_radix4_butterfly_inverse_q15+0xfc>
 8007efa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007efc:	4614      	mov	r4, r2
 8007efe:	e76c      	b.n	8007dda <arm_radix4_butterfly_inverse_q15+0x22a>
 8007f00:	ffff0000 	.word	0xffff0000

08007f04 <arm_bitreversal_16>:
 8007f04:	b1f1      	cbz	r1, 8007f44 <arm_bitreversal_16+0x40>
 8007f06:	b4f0      	push	{r4, r5, r6, r7}
 8007f08:	2400      	movs	r4, #0
 8007f0a:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8007f0e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8007f12:	886d      	ldrh	r5, [r5, #2]
 8007f14:	08ad      	lsrs	r5, r5, #2
 8007f16:	089b      	lsrs	r3, r3, #2
 8007f18:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 8007f1c:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 8007f20:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8007f24:	006e      	lsls	r6, r5, #1
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 8007f2c:	3302      	adds	r3, #2
 8007f2e:	1cb5      	adds	r5, r6, #2
 8007f30:	3402      	adds	r4, #2
 8007f32:	b2a4      	uxth	r4, r4
 8007f34:	5ac6      	ldrh	r6, [r0, r3]
 8007f36:	5b47      	ldrh	r7, [r0, r5]
 8007f38:	52c7      	strh	r7, [r0, r3]
 8007f3a:	42a1      	cmp	r1, r4
 8007f3c:	5346      	strh	r6, [r0, r5]
 8007f3e:	d8e4      	bhi.n	8007f0a <arm_bitreversal_16+0x6>
 8007f40:	bcf0      	pop	{r4, r5, r6, r7}
 8007f42:	4770      	bx	lr
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop

08007f48 <malloc>:
 8007f48:	4b02      	ldr	r3, [pc, #8]	@ (8007f54 <malloc+0xc>)
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	6818      	ldr	r0, [r3, #0]
 8007f4e:	f000 b82d 	b.w	8007fac <_malloc_r>
 8007f52:	bf00      	nop
 8007f54:	20000418 	.word	0x20000418

08007f58 <free>:
 8007f58:	4b02      	ldr	r3, [pc, #8]	@ (8007f64 <free+0xc>)
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	f000 bc09 	b.w	8008774 <_free_r>
 8007f62:	bf00      	nop
 8007f64:	20000418 	.word	0x20000418

08007f68 <sbrk_aligned>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	4e0f      	ldr	r6, [pc, #60]	@ (8007fa8 <sbrk_aligned+0x40>)
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	6831      	ldr	r1, [r6, #0]
 8007f70:	4605      	mov	r5, r0
 8007f72:	b911      	cbnz	r1, 8007f7a <sbrk_aligned+0x12>
 8007f74:	f000 fba0 	bl	80086b8 <_sbrk_r>
 8007f78:	6030      	str	r0, [r6, #0]
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f000 fb9b 	bl	80086b8 <_sbrk_r>
 8007f82:	1c43      	adds	r3, r0, #1
 8007f84:	d103      	bne.n	8007f8e <sbrk_aligned+0x26>
 8007f86:	f04f 34ff 	mov.w	r4, #4294967295
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	bd70      	pop	{r4, r5, r6, pc}
 8007f8e:	1cc4      	adds	r4, r0, #3
 8007f90:	f024 0403 	bic.w	r4, r4, #3
 8007f94:	42a0      	cmp	r0, r4
 8007f96:	d0f8      	beq.n	8007f8a <sbrk_aligned+0x22>
 8007f98:	1a21      	subs	r1, r4, r0
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f000 fb8c 	bl	80086b8 <_sbrk_r>
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d1f2      	bne.n	8007f8a <sbrk_aligned+0x22>
 8007fa4:	e7ef      	b.n	8007f86 <sbrk_aligned+0x1e>
 8007fa6:	bf00      	nop
 8007fa8:	20002238 	.word	0x20002238

08007fac <_malloc_r>:
 8007fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb0:	1ccd      	adds	r5, r1, #3
 8007fb2:	f025 0503 	bic.w	r5, r5, #3
 8007fb6:	3508      	adds	r5, #8
 8007fb8:	2d0c      	cmp	r5, #12
 8007fba:	bf38      	it	cc
 8007fbc:	250c      	movcc	r5, #12
 8007fbe:	2d00      	cmp	r5, #0
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	db01      	blt.n	8007fc8 <_malloc_r+0x1c>
 8007fc4:	42a9      	cmp	r1, r5
 8007fc6:	d904      	bls.n	8007fd2 <_malloc_r+0x26>
 8007fc8:	230c      	movs	r3, #12
 8007fca:	6033      	str	r3, [r6, #0]
 8007fcc:	2000      	movs	r0, #0
 8007fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080a8 <_malloc_r+0xfc>
 8007fd6:	f000 f869 	bl	80080ac <__malloc_lock>
 8007fda:	f8d8 3000 	ldr.w	r3, [r8]
 8007fde:	461c      	mov	r4, r3
 8007fe0:	bb44      	cbnz	r4, 8008034 <_malloc_r+0x88>
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7ff ffbf 	bl	8007f68 <sbrk_aligned>
 8007fea:	1c43      	adds	r3, r0, #1
 8007fec:	4604      	mov	r4, r0
 8007fee:	d158      	bne.n	80080a2 <_malloc_r+0xf6>
 8007ff0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ff4:	4627      	mov	r7, r4
 8007ff6:	2f00      	cmp	r7, #0
 8007ff8:	d143      	bne.n	8008082 <_malloc_r+0xd6>
 8007ffa:	2c00      	cmp	r4, #0
 8007ffc:	d04b      	beq.n	8008096 <_malloc_r+0xea>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	4639      	mov	r1, r7
 8008002:	4630      	mov	r0, r6
 8008004:	eb04 0903 	add.w	r9, r4, r3
 8008008:	f000 fb56 	bl	80086b8 <_sbrk_r>
 800800c:	4581      	cmp	r9, r0
 800800e:	d142      	bne.n	8008096 <_malloc_r+0xea>
 8008010:	6821      	ldr	r1, [r4, #0]
 8008012:	1a6d      	subs	r5, r5, r1
 8008014:	4629      	mov	r1, r5
 8008016:	4630      	mov	r0, r6
 8008018:	f7ff ffa6 	bl	8007f68 <sbrk_aligned>
 800801c:	3001      	adds	r0, #1
 800801e:	d03a      	beq.n	8008096 <_malloc_r+0xea>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	442b      	add	r3, r5
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	f8d8 3000 	ldr.w	r3, [r8]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	bb62      	cbnz	r2, 8008088 <_malloc_r+0xdc>
 800802e:	f8c8 7000 	str.w	r7, [r8]
 8008032:	e00f      	b.n	8008054 <_malloc_r+0xa8>
 8008034:	6822      	ldr	r2, [r4, #0]
 8008036:	1b52      	subs	r2, r2, r5
 8008038:	d420      	bmi.n	800807c <_malloc_r+0xd0>
 800803a:	2a0b      	cmp	r2, #11
 800803c:	d917      	bls.n	800806e <_malloc_r+0xc2>
 800803e:	1961      	adds	r1, r4, r5
 8008040:	42a3      	cmp	r3, r4
 8008042:	6025      	str	r5, [r4, #0]
 8008044:	bf18      	it	ne
 8008046:	6059      	strne	r1, [r3, #4]
 8008048:	6863      	ldr	r3, [r4, #4]
 800804a:	bf08      	it	eq
 800804c:	f8c8 1000 	streq.w	r1, [r8]
 8008050:	5162      	str	r2, [r4, r5]
 8008052:	604b      	str	r3, [r1, #4]
 8008054:	4630      	mov	r0, r6
 8008056:	f000 f82f 	bl	80080b8 <__malloc_unlock>
 800805a:	f104 000b 	add.w	r0, r4, #11
 800805e:	1d23      	adds	r3, r4, #4
 8008060:	f020 0007 	bic.w	r0, r0, #7
 8008064:	1ac2      	subs	r2, r0, r3
 8008066:	bf1c      	itt	ne
 8008068:	1a1b      	subne	r3, r3, r0
 800806a:	50a3      	strne	r3, [r4, r2]
 800806c:	e7af      	b.n	8007fce <_malloc_r+0x22>
 800806e:	6862      	ldr	r2, [r4, #4]
 8008070:	42a3      	cmp	r3, r4
 8008072:	bf0c      	ite	eq
 8008074:	f8c8 2000 	streq.w	r2, [r8]
 8008078:	605a      	strne	r2, [r3, #4]
 800807a:	e7eb      	b.n	8008054 <_malloc_r+0xa8>
 800807c:	4623      	mov	r3, r4
 800807e:	6864      	ldr	r4, [r4, #4]
 8008080:	e7ae      	b.n	8007fe0 <_malloc_r+0x34>
 8008082:	463c      	mov	r4, r7
 8008084:	687f      	ldr	r7, [r7, #4]
 8008086:	e7b6      	b.n	8007ff6 <_malloc_r+0x4a>
 8008088:	461a      	mov	r2, r3
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	42a3      	cmp	r3, r4
 800808e:	d1fb      	bne.n	8008088 <_malloc_r+0xdc>
 8008090:	2300      	movs	r3, #0
 8008092:	6053      	str	r3, [r2, #4]
 8008094:	e7de      	b.n	8008054 <_malloc_r+0xa8>
 8008096:	230c      	movs	r3, #12
 8008098:	6033      	str	r3, [r6, #0]
 800809a:	4630      	mov	r0, r6
 800809c:	f000 f80c 	bl	80080b8 <__malloc_unlock>
 80080a0:	e794      	b.n	8007fcc <_malloc_r+0x20>
 80080a2:	6005      	str	r5, [r0, #0]
 80080a4:	e7d6      	b.n	8008054 <_malloc_r+0xa8>
 80080a6:	bf00      	nop
 80080a8:	2000223c 	.word	0x2000223c

080080ac <__malloc_lock>:
 80080ac:	4801      	ldr	r0, [pc, #4]	@ (80080b4 <__malloc_lock+0x8>)
 80080ae:	f000 bb50 	b.w	8008752 <__retarget_lock_acquire_recursive>
 80080b2:	bf00      	nop
 80080b4:	20002380 	.word	0x20002380

080080b8 <__malloc_unlock>:
 80080b8:	4801      	ldr	r0, [pc, #4]	@ (80080c0 <__malloc_unlock+0x8>)
 80080ba:	f000 bb4b 	b.w	8008754 <__retarget_lock_release_recursive>
 80080be:	bf00      	nop
 80080c0:	20002380 	.word	0x20002380

080080c4 <std>:
 80080c4:	2300      	movs	r3, #0
 80080c6:	b510      	push	{r4, lr}
 80080c8:	4604      	mov	r4, r0
 80080ca:	e9c0 3300 	strd	r3, r3, [r0]
 80080ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080d2:	6083      	str	r3, [r0, #8]
 80080d4:	8181      	strh	r1, [r0, #12]
 80080d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80080d8:	81c2      	strh	r2, [r0, #14]
 80080da:	6183      	str	r3, [r0, #24]
 80080dc:	4619      	mov	r1, r3
 80080de:	2208      	movs	r2, #8
 80080e0:	305c      	adds	r0, #92	@ 0x5c
 80080e2:	f000 faad 	bl	8008640 <memset>
 80080e6:	4b0d      	ldr	r3, [pc, #52]	@ (800811c <std+0x58>)
 80080e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80080ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008120 <std+0x5c>)
 80080ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008124 <std+0x60>)
 80080f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008128 <std+0x64>)
 80080f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80080f6:	4b0d      	ldr	r3, [pc, #52]	@ (800812c <std+0x68>)
 80080f8:	6224      	str	r4, [r4, #32]
 80080fa:	429c      	cmp	r4, r3
 80080fc:	d006      	beq.n	800810c <std+0x48>
 80080fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008102:	4294      	cmp	r4, r2
 8008104:	d002      	beq.n	800810c <std+0x48>
 8008106:	33d0      	adds	r3, #208	@ 0xd0
 8008108:	429c      	cmp	r4, r3
 800810a:	d105      	bne.n	8008118 <std+0x54>
 800810c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008114:	f000 bb1c 	b.w	8008750 <__retarget_lock_init_recursive>
 8008118:	bd10      	pop	{r4, pc}
 800811a:	bf00      	nop
 800811c:	08008491 	.word	0x08008491
 8008120:	080084b3 	.word	0x080084b3
 8008124:	080084eb 	.word	0x080084eb
 8008128:	0800850f 	.word	0x0800850f
 800812c:	20002240 	.word	0x20002240

08008130 <stdio_exit_handler>:
 8008130:	4a02      	ldr	r2, [pc, #8]	@ (800813c <stdio_exit_handler+0xc>)
 8008132:	4903      	ldr	r1, [pc, #12]	@ (8008140 <stdio_exit_handler+0x10>)
 8008134:	4803      	ldr	r0, [pc, #12]	@ (8008144 <stdio_exit_handler+0x14>)
 8008136:	f000 b869 	b.w	800820c <_fwalk_sglue>
 800813a:	bf00      	nop
 800813c:	2000040c 	.word	0x2000040c
 8008140:	08008eb1 	.word	0x08008eb1
 8008144:	2000041c 	.word	0x2000041c

08008148 <cleanup_stdio>:
 8008148:	6841      	ldr	r1, [r0, #4]
 800814a:	4b0c      	ldr	r3, [pc, #48]	@ (800817c <cleanup_stdio+0x34>)
 800814c:	4299      	cmp	r1, r3
 800814e:	b510      	push	{r4, lr}
 8008150:	4604      	mov	r4, r0
 8008152:	d001      	beq.n	8008158 <cleanup_stdio+0x10>
 8008154:	f000 feac 	bl	8008eb0 <_fflush_r>
 8008158:	68a1      	ldr	r1, [r4, #8]
 800815a:	4b09      	ldr	r3, [pc, #36]	@ (8008180 <cleanup_stdio+0x38>)
 800815c:	4299      	cmp	r1, r3
 800815e:	d002      	beq.n	8008166 <cleanup_stdio+0x1e>
 8008160:	4620      	mov	r0, r4
 8008162:	f000 fea5 	bl	8008eb0 <_fflush_r>
 8008166:	68e1      	ldr	r1, [r4, #12]
 8008168:	4b06      	ldr	r3, [pc, #24]	@ (8008184 <cleanup_stdio+0x3c>)
 800816a:	4299      	cmp	r1, r3
 800816c:	d004      	beq.n	8008178 <cleanup_stdio+0x30>
 800816e:	4620      	mov	r0, r4
 8008170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008174:	f000 be9c 	b.w	8008eb0 <_fflush_r>
 8008178:	bd10      	pop	{r4, pc}
 800817a:	bf00      	nop
 800817c:	20002240 	.word	0x20002240
 8008180:	200022a8 	.word	0x200022a8
 8008184:	20002310 	.word	0x20002310

08008188 <global_stdio_init.part.0>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4b0b      	ldr	r3, [pc, #44]	@ (80081b8 <global_stdio_init.part.0+0x30>)
 800818c:	4c0b      	ldr	r4, [pc, #44]	@ (80081bc <global_stdio_init.part.0+0x34>)
 800818e:	4a0c      	ldr	r2, [pc, #48]	@ (80081c0 <global_stdio_init.part.0+0x38>)
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	4620      	mov	r0, r4
 8008194:	2200      	movs	r2, #0
 8008196:	2104      	movs	r1, #4
 8008198:	f7ff ff94 	bl	80080c4 <std>
 800819c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081a0:	2201      	movs	r2, #1
 80081a2:	2109      	movs	r1, #9
 80081a4:	f7ff ff8e 	bl	80080c4 <std>
 80081a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081ac:	2202      	movs	r2, #2
 80081ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b2:	2112      	movs	r1, #18
 80081b4:	f7ff bf86 	b.w	80080c4 <std>
 80081b8:	20002378 	.word	0x20002378
 80081bc:	20002240 	.word	0x20002240
 80081c0:	08008131 	.word	0x08008131

080081c4 <__sfp_lock_acquire>:
 80081c4:	4801      	ldr	r0, [pc, #4]	@ (80081cc <__sfp_lock_acquire+0x8>)
 80081c6:	f000 bac4 	b.w	8008752 <__retarget_lock_acquire_recursive>
 80081ca:	bf00      	nop
 80081cc:	20002381 	.word	0x20002381

080081d0 <__sfp_lock_release>:
 80081d0:	4801      	ldr	r0, [pc, #4]	@ (80081d8 <__sfp_lock_release+0x8>)
 80081d2:	f000 babf 	b.w	8008754 <__retarget_lock_release_recursive>
 80081d6:	bf00      	nop
 80081d8:	20002381 	.word	0x20002381

080081dc <__sinit>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	4604      	mov	r4, r0
 80081e0:	f7ff fff0 	bl	80081c4 <__sfp_lock_acquire>
 80081e4:	6a23      	ldr	r3, [r4, #32]
 80081e6:	b11b      	cbz	r3, 80081f0 <__sinit+0x14>
 80081e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ec:	f7ff bff0 	b.w	80081d0 <__sfp_lock_release>
 80081f0:	4b04      	ldr	r3, [pc, #16]	@ (8008204 <__sinit+0x28>)
 80081f2:	6223      	str	r3, [r4, #32]
 80081f4:	4b04      	ldr	r3, [pc, #16]	@ (8008208 <__sinit+0x2c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f5      	bne.n	80081e8 <__sinit+0xc>
 80081fc:	f7ff ffc4 	bl	8008188 <global_stdio_init.part.0>
 8008200:	e7f2      	b.n	80081e8 <__sinit+0xc>
 8008202:	bf00      	nop
 8008204:	08008149 	.word	0x08008149
 8008208:	20002378 	.word	0x20002378

0800820c <_fwalk_sglue>:
 800820c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008210:	4607      	mov	r7, r0
 8008212:	4688      	mov	r8, r1
 8008214:	4614      	mov	r4, r2
 8008216:	2600      	movs	r6, #0
 8008218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800821c:	f1b9 0901 	subs.w	r9, r9, #1
 8008220:	d505      	bpl.n	800822e <_fwalk_sglue+0x22>
 8008222:	6824      	ldr	r4, [r4, #0]
 8008224:	2c00      	cmp	r4, #0
 8008226:	d1f7      	bne.n	8008218 <_fwalk_sglue+0xc>
 8008228:	4630      	mov	r0, r6
 800822a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800822e:	89ab      	ldrh	r3, [r5, #12]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d907      	bls.n	8008244 <_fwalk_sglue+0x38>
 8008234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008238:	3301      	adds	r3, #1
 800823a:	d003      	beq.n	8008244 <_fwalk_sglue+0x38>
 800823c:	4629      	mov	r1, r5
 800823e:	4638      	mov	r0, r7
 8008240:	47c0      	blx	r8
 8008242:	4306      	orrs	r6, r0
 8008244:	3568      	adds	r5, #104	@ 0x68
 8008246:	e7e9      	b.n	800821c <_fwalk_sglue+0x10>

08008248 <iprintf>:
 8008248:	b40f      	push	{r0, r1, r2, r3}
 800824a:	b507      	push	{r0, r1, r2, lr}
 800824c:	4906      	ldr	r1, [pc, #24]	@ (8008268 <iprintf+0x20>)
 800824e:	ab04      	add	r3, sp, #16
 8008250:	6808      	ldr	r0, [r1, #0]
 8008252:	f853 2b04 	ldr.w	r2, [r3], #4
 8008256:	6881      	ldr	r1, [r0, #8]
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	f000 faff 	bl	800885c <_vfiprintf_r>
 800825e:	b003      	add	sp, #12
 8008260:	f85d eb04 	ldr.w	lr, [sp], #4
 8008264:	b004      	add	sp, #16
 8008266:	4770      	bx	lr
 8008268:	20000418 	.word	0x20000418

0800826c <_puts_r>:
 800826c:	6a03      	ldr	r3, [r0, #32]
 800826e:	b570      	push	{r4, r5, r6, lr}
 8008270:	6884      	ldr	r4, [r0, #8]
 8008272:	4605      	mov	r5, r0
 8008274:	460e      	mov	r6, r1
 8008276:	b90b      	cbnz	r3, 800827c <_puts_r+0x10>
 8008278:	f7ff ffb0 	bl	80081dc <__sinit>
 800827c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800827e:	07db      	lsls	r3, r3, #31
 8008280:	d405      	bmi.n	800828e <_puts_r+0x22>
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	0598      	lsls	r0, r3, #22
 8008286:	d402      	bmi.n	800828e <_puts_r+0x22>
 8008288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800828a:	f000 fa62 	bl	8008752 <__retarget_lock_acquire_recursive>
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	0719      	lsls	r1, r3, #28
 8008292:	d502      	bpl.n	800829a <_puts_r+0x2e>
 8008294:	6923      	ldr	r3, [r4, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d135      	bne.n	8008306 <_puts_r+0x9a>
 800829a:	4621      	mov	r1, r4
 800829c:	4628      	mov	r0, r5
 800829e:	f000 f979 	bl	8008594 <__swsetup_r>
 80082a2:	b380      	cbz	r0, 8008306 <_puts_r+0x9a>
 80082a4:	f04f 35ff 	mov.w	r5, #4294967295
 80082a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082aa:	07da      	lsls	r2, r3, #31
 80082ac:	d405      	bmi.n	80082ba <_puts_r+0x4e>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	059b      	lsls	r3, r3, #22
 80082b2:	d402      	bmi.n	80082ba <_puts_r+0x4e>
 80082b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082b6:	f000 fa4d 	bl	8008754 <__retarget_lock_release_recursive>
 80082ba:	4628      	mov	r0, r5
 80082bc:	bd70      	pop	{r4, r5, r6, pc}
 80082be:	2b00      	cmp	r3, #0
 80082c0:	da04      	bge.n	80082cc <_puts_r+0x60>
 80082c2:	69a2      	ldr	r2, [r4, #24]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	dc17      	bgt.n	80082f8 <_puts_r+0x8c>
 80082c8:	290a      	cmp	r1, #10
 80082ca:	d015      	beq.n	80082f8 <_puts_r+0x8c>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	6022      	str	r2, [r4, #0]
 80082d2:	7019      	strb	r1, [r3, #0]
 80082d4:	68a3      	ldr	r3, [r4, #8]
 80082d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082da:	3b01      	subs	r3, #1
 80082dc:	60a3      	str	r3, [r4, #8]
 80082de:	2900      	cmp	r1, #0
 80082e0:	d1ed      	bne.n	80082be <_puts_r+0x52>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	da11      	bge.n	800830a <_puts_r+0x9e>
 80082e6:	4622      	mov	r2, r4
 80082e8:	210a      	movs	r1, #10
 80082ea:	4628      	mov	r0, r5
 80082ec:	f000 f913 	bl	8008516 <__swbuf_r>
 80082f0:	3001      	adds	r0, #1
 80082f2:	d0d7      	beq.n	80082a4 <_puts_r+0x38>
 80082f4:	250a      	movs	r5, #10
 80082f6:	e7d7      	b.n	80082a8 <_puts_r+0x3c>
 80082f8:	4622      	mov	r2, r4
 80082fa:	4628      	mov	r0, r5
 80082fc:	f000 f90b 	bl	8008516 <__swbuf_r>
 8008300:	3001      	adds	r0, #1
 8008302:	d1e7      	bne.n	80082d4 <_puts_r+0x68>
 8008304:	e7ce      	b.n	80082a4 <_puts_r+0x38>
 8008306:	3e01      	subs	r6, #1
 8008308:	e7e4      	b.n	80082d4 <_puts_r+0x68>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	6022      	str	r2, [r4, #0]
 8008310:	220a      	movs	r2, #10
 8008312:	701a      	strb	r2, [r3, #0]
 8008314:	e7ee      	b.n	80082f4 <_puts_r+0x88>
	...

08008318 <puts>:
 8008318:	4b02      	ldr	r3, [pc, #8]	@ (8008324 <puts+0xc>)
 800831a:	4601      	mov	r1, r0
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	f7ff bfa5 	b.w	800826c <_puts_r>
 8008322:	bf00      	nop
 8008324:	20000418 	.word	0x20000418

08008328 <setvbuf>:
 8008328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800832c:	461d      	mov	r5, r3
 800832e:	4b57      	ldr	r3, [pc, #348]	@ (800848c <setvbuf+0x164>)
 8008330:	681f      	ldr	r7, [r3, #0]
 8008332:	4604      	mov	r4, r0
 8008334:	460e      	mov	r6, r1
 8008336:	4690      	mov	r8, r2
 8008338:	b127      	cbz	r7, 8008344 <setvbuf+0x1c>
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	b913      	cbnz	r3, 8008344 <setvbuf+0x1c>
 800833e:	4638      	mov	r0, r7
 8008340:	f7ff ff4c 	bl	80081dc <__sinit>
 8008344:	f1b8 0f02 	cmp.w	r8, #2
 8008348:	d006      	beq.n	8008358 <setvbuf+0x30>
 800834a:	f1b8 0f01 	cmp.w	r8, #1
 800834e:	f200 809a 	bhi.w	8008486 <setvbuf+0x15e>
 8008352:	2d00      	cmp	r5, #0
 8008354:	f2c0 8097 	blt.w	8008486 <setvbuf+0x15e>
 8008358:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800835a:	07d9      	lsls	r1, r3, #31
 800835c:	d405      	bmi.n	800836a <setvbuf+0x42>
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	059a      	lsls	r2, r3, #22
 8008362:	d402      	bmi.n	800836a <setvbuf+0x42>
 8008364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008366:	f000 f9f4 	bl	8008752 <__retarget_lock_acquire_recursive>
 800836a:	4621      	mov	r1, r4
 800836c:	4638      	mov	r0, r7
 800836e:	f000 fd9f 	bl	8008eb0 <_fflush_r>
 8008372:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008374:	b141      	cbz	r1, 8008388 <setvbuf+0x60>
 8008376:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800837a:	4299      	cmp	r1, r3
 800837c:	d002      	beq.n	8008384 <setvbuf+0x5c>
 800837e:	4638      	mov	r0, r7
 8008380:	f000 f9f8 	bl	8008774 <_free_r>
 8008384:	2300      	movs	r3, #0
 8008386:	6363      	str	r3, [r4, #52]	@ 0x34
 8008388:	2300      	movs	r3, #0
 800838a:	61a3      	str	r3, [r4, #24]
 800838c:	6063      	str	r3, [r4, #4]
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	061b      	lsls	r3, r3, #24
 8008392:	d503      	bpl.n	800839c <setvbuf+0x74>
 8008394:	6921      	ldr	r1, [r4, #16]
 8008396:	4638      	mov	r0, r7
 8008398:	f000 f9ec 	bl	8008774 <_free_r>
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80083a2:	f023 0303 	bic.w	r3, r3, #3
 80083a6:	f1b8 0f02 	cmp.w	r8, #2
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	d061      	beq.n	8008472 <setvbuf+0x14a>
 80083ae:	ab01      	add	r3, sp, #4
 80083b0:	466a      	mov	r2, sp
 80083b2:	4621      	mov	r1, r4
 80083b4:	4638      	mov	r0, r7
 80083b6:	f000 fda3 	bl	8008f00 <__swhatbuf_r>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	4318      	orrs	r0, r3
 80083be:	81a0      	strh	r0, [r4, #12]
 80083c0:	bb2d      	cbnz	r5, 800840e <setvbuf+0xe6>
 80083c2:	9d00      	ldr	r5, [sp, #0]
 80083c4:	4628      	mov	r0, r5
 80083c6:	f7ff fdbf 	bl	8007f48 <malloc>
 80083ca:	4606      	mov	r6, r0
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d152      	bne.n	8008476 <setvbuf+0x14e>
 80083d0:	f8dd 9000 	ldr.w	r9, [sp]
 80083d4:	45a9      	cmp	r9, r5
 80083d6:	d140      	bne.n	800845a <setvbuf+0x132>
 80083d8:	f04f 35ff 	mov.w	r5, #4294967295
 80083dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e0:	f043 0202 	orr.w	r2, r3, #2
 80083e4:	81a2      	strh	r2, [r4, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	60a2      	str	r2, [r4, #8]
 80083ea:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80083ee:	6022      	str	r2, [r4, #0]
 80083f0:	6122      	str	r2, [r4, #16]
 80083f2:	2201      	movs	r2, #1
 80083f4:	6162      	str	r2, [r4, #20]
 80083f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083f8:	07d6      	lsls	r6, r2, #31
 80083fa:	d404      	bmi.n	8008406 <setvbuf+0xde>
 80083fc:	0598      	lsls	r0, r3, #22
 80083fe:	d402      	bmi.n	8008406 <setvbuf+0xde>
 8008400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008402:	f000 f9a7 	bl	8008754 <__retarget_lock_release_recursive>
 8008406:	4628      	mov	r0, r5
 8008408:	b003      	add	sp, #12
 800840a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800840e:	2e00      	cmp	r6, #0
 8008410:	d0d8      	beq.n	80083c4 <setvbuf+0x9c>
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	b913      	cbnz	r3, 800841c <setvbuf+0xf4>
 8008416:	4638      	mov	r0, r7
 8008418:	f7ff fee0 	bl	80081dc <__sinit>
 800841c:	f1b8 0f01 	cmp.w	r8, #1
 8008420:	bf08      	it	eq
 8008422:	89a3      	ldrheq	r3, [r4, #12]
 8008424:	6026      	str	r6, [r4, #0]
 8008426:	bf04      	itt	eq
 8008428:	f043 0301 	orreq.w	r3, r3, #1
 800842c:	81a3      	strheq	r3, [r4, #12]
 800842e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008432:	f013 0208 	ands.w	r2, r3, #8
 8008436:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800843a:	d01e      	beq.n	800847a <setvbuf+0x152>
 800843c:	07d9      	lsls	r1, r3, #31
 800843e:	bf41      	itttt	mi
 8008440:	2200      	movmi	r2, #0
 8008442:	426d      	negmi	r5, r5
 8008444:	60a2      	strmi	r2, [r4, #8]
 8008446:	61a5      	strmi	r5, [r4, #24]
 8008448:	bf58      	it	pl
 800844a:	60a5      	strpl	r5, [r4, #8]
 800844c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800844e:	07d2      	lsls	r2, r2, #31
 8008450:	d401      	bmi.n	8008456 <setvbuf+0x12e>
 8008452:	059b      	lsls	r3, r3, #22
 8008454:	d513      	bpl.n	800847e <setvbuf+0x156>
 8008456:	2500      	movs	r5, #0
 8008458:	e7d5      	b.n	8008406 <setvbuf+0xde>
 800845a:	4648      	mov	r0, r9
 800845c:	f7ff fd74 	bl	8007f48 <malloc>
 8008460:	4606      	mov	r6, r0
 8008462:	2800      	cmp	r0, #0
 8008464:	d0b8      	beq.n	80083d8 <setvbuf+0xb0>
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	464d      	mov	r5, r9
 8008470:	e7cf      	b.n	8008412 <setvbuf+0xea>
 8008472:	2500      	movs	r5, #0
 8008474:	e7b2      	b.n	80083dc <setvbuf+0xb4>
 8008476:	46a9      	mov	r9, r5
 8008478:	e7f5      	b.n	8008466 <setvbuf+0x13e>
 800847a:	60a2      	str	r2, [r4, #8]
 800847c:	e7e6      	b.n	800844c <setvbuf+0x124>
 800847e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008480:	f000 f968 	bl	8008754 <__retarget_lock_release_recursive>
 8008484:	e7e7      	b.n	8008456 <setvbuf+0x12e>
 8008486:	f04f 35ff 	mov.w	r5, #4294967295
 800848a:	e7bc      	b.n	8008406 <setvbuf+0xde>
 800848c:	20000418 	.word	0x20000418

08008490 <__sread>:
 8008490:	b510      	push	{r4, lr}
 8008492:	460c      	mov	r4, r1
 8008494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008498:	f000 f8fc 	bl	8008694 <_read_r>
 800849c:	2800      	cmp	r0, #0
 800849e:	bfab      	itete	ge
 80084a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80084a2:	89a3      	ldrhlt	r3, [r4, #12]
 80084a4:	181b      	addge	r3, r3, r0
 80084a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80084aa:	bfac      	ite	ge
 80084ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80084ae:	81a3      	strhlt	r3, [r4, #12]
 80084b0:	bd10      	pop	{r4, pc}

080084b2 <__swrite>:
 80084b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b6:	461f      	mov	r7, r3
 80084b8:	898b      	ldrh	r3, [r1, #12]
 80084ba:	05db      	lsls	r3, r3, #23
 80084bc:	4605      	mov	r5, r0
 80084be:	460c      	mov	r4, r1
 80084c0:	4616      	mov	r6, r2
 80084c2:	d505      	bpl.n	80084d0 <__swrite+0x1e>
 80084c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c8:	2302      	movs	r3, #2
 80084ca:	2200      	movs	r2, #0
 80084cc:	f000 f8d0 	bl	8008670 <_lseek_r>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	4632      	mov	r2, r6
 80084de:	463b      	mov	r3, r7
 80084e0:	4628      	mov	r0, r5
 80084e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084e6:	f000 b8f7 	b.w	80086d8 <_write_r>

080084ea <__sseek>:
 80084ea:	b510      	push	{r4, lr}
 80084ec:	460c      	mov	r4, r1
 80084ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f2:	f000 f8bd 	bl	8008670 <_lseek_r>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	bf15      	itete	ne
 80084fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80084fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008502:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008506:	81a3      	strheq	r3, [r4, #12]
 8008508:	bf18      	it	ne
 800850a:	81a3      	strhne	r3, [r4, #12]
 800850c:	bd10      	pop	{r4, pc}

0800850e <__sclose>:
 800850e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008512:	f000 b89d 	b.w	8008650 <_close_r>

08008516 <__swbuf_r>:
 8008516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008518:	460e      	mov	r6, r1
 800851a:	4614      	mov	r4, r2
 800851c:	4605      	mov	r5, r0
 800851e:	b118      	cbz	r0, 8008528 <__swbuf_r+0x12>
 8008520:	6a03      	ldr	r3, [r0, #32]
 8008522:	b90b      	cbnz	r3, 8008528 <__swbuf_r+0x12>
 8008524:	f7ff fe5a 	bl	80081dc <__sinit>
 8008528:	69a3      	ldr	r3, [r4, #24]
 800852a:	60a3      	str	r3, [r4, #8]
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	071a      	lsls	r2, r3, #28
 8008530:	d501      	bpl.n	8008536 <__swbuf_r+0x20>
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	b943      	cbnz	r3, 8008548 <__swbuf_r+0x32>
 8008536:	4621      	mov	r1, r4
 8008538:	4628      	mov	r0, r5
 800853a:	f000 f82b 	bl	8008594 <__swsetup_r>
 800853e:	b118      	cbz	r0, 8008548 <__swbuf_r+0x32>
 8008540:	f04f 37ff 	mov.w	r7, #4294967295
 8008544:	4638      	mov	r0, r7
 8008546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	6922      	ldr	r2, [r4, #16]
 800854c:	1a98      	subs	r0, r3, r2
 800854e:	6963      	ldr	r3, [r4, #20]
 8008550:	b2f6      	uxtb	r6, r6
 8008552:	4283      	cmp	r3, r0
 8008554:	4637      	mov	r7, r6
 8008556:	dc05      	bgt.n	8008564 <__swbuf_r+0x4e>
 8008558:	4621      	mov	r1, r4
 800855a:	4628      	mov	r0, r5
 800855c:	f000 fca8 	bl	8008eb0 <_fflush_r>
 8008560:	2800      	cmp	r0, #0
 8008562:	d1ed      	bne.n	8008540 <__swbuf_r+0x2a>
 8008564:	68a3      	ldr	r3, [r4, #8]
 8008566:	3b01      	subs	r3, #1
 8008568:	60a3      	str	r3, [r4, #8]
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	6022      	str	r2, [r4, #0]
 8008570:	701e      	strb	r6, [r3, #0]
 8008572:	6962      	ldr	r2, [r4, #20]
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	429a      	cmp	r2, r3
 8008578:	d004      	beq.n	8008584 <__swbuf_r+0x6e>
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	07db      	lsls	r3, r3, #31
 800857e:	d5e1      	bpl.n	8008544 <__swbuf_r+0x2e>
 8008580:	2e0a      	cmp	r6, #10
 8008582:	d1df      	bne.n	8008544 <__swbuf_r+0x2e>
 8008584:	4621      	mov	r1, r4
 8008586:	4628      	mov	r0, r5
 8008588:	f000 fc92 	bl	8008eb0 <_fflush_r>
 800858c:	2800      	cmp	r0, #0
 800858e:	d0d9      	beq.n	8008544 <__swbuf_r+0x2e>
 8008590:	e7d6      	b.n	8008540 <__swbuf_r+0x2a>
	...

08008594 <__swsetup_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4b29      	ldr	r3, [pc, #164]	@ (800863c <__swsetup_r+0xa8>)
 8008598:	4605      	mov	r5, r0
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	460c      	mov	r4, r1
 800859e:	b118      	cbz	r0, 80085a8 <__swsetup_r+0x14>
 80085a0:	6a03      	ldr	r3, [r0, #32]
 80085a2:	b90b      	cbnz	r3, 80085a8 <__swsetup_r+0x14>
 80085a4:	f7ff fe1a 	bl	80081dc <__sinit>
 80085a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ac:	0719      	lsls	r1, r3, #28
 80085ae:	d422      	bmi.n	80085f6 <__swsetup_r+0x62>
 80085b0:	06da      	lsls	r2, r3, #27
 80085b2:	d407      	bmi.n	80085c4 <__swsetup_r+0x30>
 80085b4:	2209      	movs	r2, #9
 80085b6:	602a      	str	r2, [r5, #0]
 80085b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	f04f 30ff 	mov.w	r0, #4294967295
 80085c2:	e033      	b.n	800862c <__swsetup_r+0x98>
 80085c4:	0758      	lsls	r0, r3, #29
 80085c6:	d512      	bpl.n	80085ee <__swsetup_r+0x5a>
 80085c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085ca:	b141      	cbz	r1, 80085de <__swsetup_r+0x4a>
 80085cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085d0:	4299      	cmp	r1, r3
 80085d2:	d002      	beq.n	80085da <__swsetup_r+0x46>
 80085d4:	4628      	mov	r0, r5
 80085d6:	f000 f8cd 	bl	8008774 <_free_r>
 80085da:	2300      	movs	r3, #0
 80085dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085e4:	81a3      	strh	r3, [r4, #12]
 80085e6:	2300      	movs	r3, #0
 80085e8:	6063      	str	r3, [r4, #4]
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f043 0308 	orr.w	r3, r3, #8
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	6923      	ldr	r3, [r4, #16]
 80085f8:	b94b      	cbnz	r3, 800860e <__swsetup_r+0x7a>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008604:	d003      	beq.n	800860e <__swsetup_r+0x7a>
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f000 fc9f 	bl	8008f4c <__smakebuf_r>
 800860e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008612:	f013 0201 	ands.w	r2, r3, #1
 8008616:	d00a      	beq.n	800862e <__swsetup_r+0x9a>
 8008618:	2200      	movs	r2, #0
 800861a:	60a2      	str	r2, [r4, #8]
 800861c:	6962      	ldr	r2, [r4, #20]
 800861e:	4252      	negs	r2, r2
 8008620:	61a2      	str	r2, [r4, #24]
 8008622:	6922      	ldr	r2, [r4, #16]
 8008624:	b942      	cbnz	r2, 8008638 <__swsetup_r+0xa4>
 8008626:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800862a:	d1c5      	bne.n	80085b8 <__swsetup_r+0x24>
 800862c:	bd38      	pop	{r3, r4, r5, pc}
 800862e:	0799      	lsls	r1, r3, #30
 8008630:	bf58      	it	pl
 8008632:	6962      	ldrpl	r2, [r4, #20]
 8008634:	60a2      	str	r2, [r4, #8]
 8008636:	e7f4      	b.n	8008622 <__swsetup_r+0x8e>
 8008638:	2000      	movs	r0, #0
 800863a:	e7f7      	b.n	800862c <__swsetup_r+0x98>
 800863c:	20000418 	.word	0x20000418

08008640 <memset>:
 8008640:	4402      	add	r2, r0
 8008642:	4603      	mov	r3, r0
 8008644:	4293      	cmp	r3, r2
 8008646:	d100      	bne.n	800864a <memset+0xa>
 8008648:	4770      	bx	lr
 800864a:	f803 1b01 	strb.w	r1, [r3], #1
 800864e:	e7f9      	b.n	8008644 <memset+0x4>

08008650 <_close_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d06      	ldr	r5, [pc, #24]	@ (800866c <_close_r+0x1c>)
 8008654:	2300      	movs	r3, #0
 8008656:	4604      	mov	r4, r0
 8008658:	4608      	mov	r0, r1
 800865a:	602b      	str	r3, [r5, #0]
 800865c:	f7f8 fdac 	bl	80011b8 <_close>
 8008660:	1c43      	adds	r3, r0, #1
 8008662:	d102      	bne.n	800866a <_close_r+0x1a>
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	b103      	cbz	r3, 800866a <_close_r+0x1a>
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	2000237c 	.word	0x2000237c

08008670 <_lseek_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4d07      	ldr	r5, [pc, #28]	@ (8008690 <_lseek_r+0x20>)
 8008674:	4604      	mov	r4, r0
 8008676:	4608      	mov	r0, r1
 8008678:	4611      	mov	r1, r2
 800867a:	2200      	movs	r2, #0
 800867c:	602a      	str	r2, [r5, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	f7f8 fda6 	bl	80011d0 <_lseek>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_lseek_r+0x1e>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	b103      	cbz	r3, 800868e <_lseek_r+0x1e>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	2000237c 	.word	0x2000237c

08008694 <_read_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4d07      	ldr	r5, [pc, #28]	@ (80086b4 <_read_r+0x20>)
 8008698:	4604      	mov	r4, r0
 800869a:	4608      	mov	r0, r1
 800869c:	4611      	mov	r1, r2
 800869e:	2200      	movs	r2, #0
 80086a0:	602a      	str	r2, [r5, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	f7f8 fd9c 	bl	80011e0 <_read>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d102      	bne.n	80086b2 <_read_r+0x1e>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	b103      	cbz	r3, 80086b2 <_read_r+0x1e>
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	2000237c 	.word	0x2000237c

080086b8 <_sbrk_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d06      	ldr	r5, [pc, #24]	@ (80086d4 <_sbrk_r+0x1c>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	f7fa f86a 	bl	800279c <_sbrk>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d102      	bne.n	80086d2 <_sbrk_r+0x1a>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	b103      	cbz	r3, 80086d2 <_sbrk_r+0x1a>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	2000237c 	.word	0x2000237c

080086d8 <_write_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d07      	ldr	r5, [pc, #28]	@ (80086f8 <_write_r+0x20>)
 80086dc:	4604      	mov	r4, r0
 80086de:	4608      	mov	r0, r1
 80086e0:	4611      	mov	r1, r2
 80086e2:	2200      	movs	r2, #0
 80086e4:	602a      	str	r2, [r5, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	f7f8 fd4c 	bl	8001184 <_write>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_write_r+0x1e>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_write_r+0x1e>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	2000237c 	.word	0x2000237c

080086fc <__errno>:
 80086fc:	4b01      	ldr	r3, [pc, #4]	@ (8008704 <__errno+0x8>)
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20000418 	.word	0x20000418

08008708 <__libc_init_array>:
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	4d0d      	ldr	r5, [pc, #52]	@ (8008740 <__libc_init_array+0x38>)
 800870c:	4c0d      	ldr	r4, [pc, #52]	@ (8008744 <__libc_init_array+0x3c>)
 800870e:	1b64      	subs	r4, r4, r5
 8008710:	10a4      	asrs	r4, r4, #2
 8008712:	2600      	movs	r6, #0
 8008714:	42a6      	cmp	r6, r4
 8008716:	d109      	bne.n	800872c <__libc_init_array+0x24>
 8008718:	4d0b      	ldr	r5, [pc, #44]	@ (8008748 <__libc_init_array+0x40>)
 800871a:	4c0c      	ldr	r4, [pc, #48]	@ (800874c <__libc_init_array+0x44>)
 800871c:	f000 fc74 	bl	8009008 <_init>
 8008720:	1b64      	subs	r4, r4, r5
 8008722:	10a4      	asrs	r4, r4, #2
 8008724:	2600      	movs	r6, #0
 8008726:	42a6      	cmp	r6, r4
 8008728:	d105      	bne.n	8008736 <__libc_init_array+0x2e>
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008730:	4798      	blx	r3
 8008732:	3601      	adds	r6, #1
 8008734:	e7ee      	b.n	8008714 <__libc_init_array+0xc>
 8008736:	f855 3b04 	ldr.w	r3, [r5], #4
 800873a:	4798      	blx	r3
 800873c:	3601      	adds	r6, #1
 800873e:	e7f2      	b.n	8008726 <__libc_init_array+0x1e>
 8008740:	0801bd2c 	.word	0x0801bd2c
 8008744:	0801bd2c 	.word	0x0801bd2c
 8008748:	0801bd2c 	.word	0x0801bd2c
 800874c:	0801bd30 	.word	0x0801bd30

08008750 <__retarget_lock_init_recursive>:
 8008750:	4770      	bx	lr

08008752 <__retarget_lock_acquire_recursive>:
 8008752:	4770      	bx	lr

08008754 <__retarget_lock_release_recursive>:
 8008754:	4770      	bx	lr

08008756 <memcpy>:
 8008756:	440a      	add	r2, r1
 8008758:	4291      	cmp	r1, r2
 800875a:	f100 33ff 	add.w	r3, r0, #4294967295
 800875e:	d100      	bne.n	8008762 <memcpy+0xc>
 8008760:	4770      	bx	lr
 8008762:	b510      	push	{r4, lr}
 8008764:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800876c:	4291      	cmp	r1, r2
 800876e:	d1f9      	bne.n	8008764 <memcpy+0xe>
 8008770:	bd10      	pop	{r4, pc}
	...

08008774 <_free_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4605      	mov	r5, r0
 8008778:	2900      	cmp	r1, #0
 800877a:	d041      	beq.n	8008800 <_free_r+0x8c>
 800877c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008780:	1f0c      	subs	r4, r1, #4
 8008782:	2b00      	cmp	r3, #0
 8008784:	bfb8      	it	lt
 8008786:	18e4      	addlt	r4, r4, r3
 8008788:	f7ff fc90 	bl	80080ac <__malloc_lock>
 800878c:	4a1d      	ldr	r2, [pc, #116]	@ (8008804 <_free_r+0x90>)
 800878e:	6813      	ldr	r3, [r2, #0]
 8008790:	b933      	cbnz	r3, 80087a0 <_free_r+0x2c>
 8008792:	6063      	str	r3, [r4, #4]
 8008794:	6014      	str	r4, [r2, #0]
 8008796:	4628      	mov	r0, r5
 8008798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800879c:	f7ff bc8c 	b.w	80080b8 <__malloc_unlock>
 80087a0:	42a3      	cmp	r3, r4
 80087a2:	d908      	bls.n	80087b6 <_free_r+0x42>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	1821      	adds	r1, r4, r0
 80087a8:	428b      	cmp	r3, r1
 80087aa:	bf01      	itttt	eq
 80087ac:	6819      	ldreq	r1, [r3, #0]
 80087ae:	685b      	ldreq	r3, [r3, #4]
 80087b0:	1809      	addeq	r1, r1, r0
 80087b2:	6021      	streq	r1, [r4, #0]
 80087b4:	e7ed      	b.n	8008792 <_free_r+0x1e>
 80087b6:	461a      	mov	r2, r3
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	b10b      	cbz	r3, 80087c0 <_free_r+0x4c>
 80087bc:	42a3      	cmp	r3, r4
 80087be:	d9fa      	bls.n	80087b6 <_free_r+0x42>
 80087c0:	6811      	ldr	r1, [r2, #0]
 80087c2:	1850      	adds	r0, r2, r1
 80087c4:	42a0      	cmp	r0, r4
 80087c6:	d10b      	bne.n	80087e0 <_free_r+0x6c>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	4401      	add	r1, r0
 80087cc:	1850      	adds	r0, r2, r1
 80087ce:	4283      	cmp	r3, r0
 80087d0:	6011      	str	r1, [r2, #0]
 80087d2:	d1e0      	bne.n	8008796 <_free_r+0x22>
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	6053      	str	r3, [r2, #4]
 80087da:	4408      	add	r0, r1
 80087dc:	6010      	str	r0, [r2, #0]
 80087de:	e7da      	b.n	8008796 <_free_r+0x22>
 80087e0:	d902      	bls.n	80087e8 <_free_r+0x74>
 80087e2:	230c      	movs	r3, #12
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	e7d6      	b.n	8008796 <_free_r+0x22>
 80087e8:	6820      	ldr	r0, [r4, #0]
 80087ea:	1821      	adds	r1, r4, r0
 80087ec:	428b      	cmp	r3, r1
 80087ee:	bf04      	itt	eq
 80087f0:	6819      	ldreq	r1, [r3, #0]
 80087f2:	685b      	ldreq	r3, [r3, #4]
 80087f4:	6063      	str	r3, [r4, #4]
 80087f6:	bf04      	itt	eq
 80087f8:	1809      	addeq	r1, r1, r0
 80087fa:	6021      	streq	r1, [r4, #0]
 80087fc:	6054      	str	r4, [r2, #4]
 80087fe:	e7ca      	b.n	8008796 <_free_r+0x22>
 8008800:	bd38      	pop	{r3, r4, r5, pc}
 8008802:	bf00      	nop
 8008804:	2000223c 	.word	0x2000223c

08008808 <__sfputc_r>:
 8008808:	6893      	ldr	r3, [r2, #8]
 800880a:	3b01      	subs	r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	b410      	push	{r4}
 8008810:	6093      	str	r3, [r2, #8]
 8008812:	da08      	bge.n	8008826 <__sfputc_r+0x1e>
 8008814:	6994      	ldr	r4, [r2, #24]
 8008816:	42a3      	cmp	r3, r4
 8008818:	db01      	blt.n	800881e <__sfputc_r+0x16>
 800881a:	290a      	cmp	r1, #10
 800881c:	d103      	bne.n	8008826 <__sfputc_r+0x1e>
 800881e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008822:	f7ff be78 	b.w	8008516 <__swbuf_r>
 8008826:	6813      	ldr	r3, [r2, #0]
 8008828:	1c58      	adds	r0, r3, #1
 800882a:	6010      	str	r0, [r2, #0]
 800882c:	7019      	strb	r1, [r3, #0]
 800882e:	4608      	mov	r0, r1
 8008830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008834:	4770      	bx	lr

08008836 <__sfputs_r>:
 8008836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008838:	4606      	mov	r6, r0
 800883a:	460f      	mov	r7, r1
 800883c:	4614      	mov	r4, r2
 800883e:	18d5      	adds	r5, r2, r3
 8008840:	42ac      	cmp	r4, r5
 8008842:	d101      	bne.n	8008848 <__sfputs_r+0x12>
 8008844:	2000      	movs	r0, #0
 8008846:	e007      	b.n	8008858 <__sfputs_r+0x22>
 8008848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884c:	463a      	mov	r2, r7
 800884e:	4630      	mov	r0, r6
 8008850:	f7ff ffda 	bl	8008808 <__sfputc_r>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d1f3      	bne.n	8008840 <__sfputs_r+0xa>
 8008858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800885c <_vfiprintf_r>:
 800885c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008860:	460d      	mov	r5, r1
 8008862:	b09d      	sub	sp, #116	@ 0x74
 8008864:	4614      	mov	r4, r2
 8008866:	4698      	mov	r8, r3
 8008868:	4606      	mov	r6, r0
 800886a:	b118      	cbz	r0, 8008874 <_vfiprintf_r+0x18>
 800886c:	6a03      	ldr	r3, [r0, #32]
 800886e:	b90b      	cbnz	r3, 8008874 <_vfiprintf_r+0x18>
 8008870:	f7ff fcb4 	bl	80081dc <__sinit>
 8008874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008876:	07d9      	lsls	r1, r3, #31
 8008878:	d405      	bmi.n	8008886 <_vfiprintf_r+0x2a>
 800887a:	89ab      	ldrh	r3, [r5, #12]
 800887c:	059a      	lsls	r2, r3, #22
 800887e:	d402      	bmi.n	8008886 <_vfiprintf_r+0x2a>
 8008880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008882:	f7ff ff66 	bl	8008752 <__retarget_lock_acquire_recursive>
 8008886:	89ab      	ldrh	r3, [r5, #12]
 8008888:	071b      	lsls	r3, r3, #28
 800888a:	d501      	bpl.n	8008890 <_vfiprintf_r+0x34>
 800888c:	692b      	ldr	r3, [r5, #16]
 800888e:	b99b      	cbnz	r3, 80088b8 <_vfiprintf_r+0x5c>
 8008890:	4629      	mov	r1, r5
 8008892:	4630      	mov	r0, r6
 8008894:	f7ff fe7e 	bl	8008594 <__swsetup_r>
 8008898:	b170      	cbz	r0, 80088b8 <_vfiprintf_r+0x5c>
 800889a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800889c:	07dc      	lsls	r4, r3, #31
 800889e:	d504      	bpl.n	80088aa <_vfiprintf_r+0x4e>
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	b01d      	add	sp, #116	@ 0x74
 80088a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088aa:	89ab      	ldrh	r3, [r5, #12]
 80088ac:	0598      	lsls	r0, r3, #22
 80088ae:	d4f7      	bmi.n	80088a0 <_vfiprintf_r+0x44>
 80088b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088b2:	f7ff ff4f 	bl	8008754 <__retarget_lock_release_recursive>
 80088b6:	e7f3      	b.n	80088a0 <_vfiprintf_r+0x44>
 80088b8:	2300      	movs	r3, #0
 80088ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80088bc:	2320      	movs	r3, #32
 80088be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80088c6:	2330      	movs	r3, #48	@ 0x30
 80088c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a78 <_vfiprintf_r+0x21c>
 80088cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088d0:	f04f 0901 	mov.w	r9, #1
 80088d4:	4623      	mov	r3, r4
 80088d6:	469a      	mov	sl, r3
 80088d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088dc:	b10a      	cbz	r2, 80088e2 <_vfiprintf_r+0x86>
 80088de:	2a25      	cmp	r2, #37	@ 0x25
 80088e0:	d1f9      	bne.n	80088d6 <_vfiprintf_r+0x7a>
 80088e2:	ebba 0b04 	subs.w	fp, sl, r4
 80088e6:	d00b      	beq.n	8008900 <_vfiprintf_r+0xa4>
 80088e8:	465b      	mov	r3, fp
 80088ea:	4622      	mov	r2, r4
 80088ec:	4629      	mov	r1, r5
 80088ee:	4630      	mov	r0, r6
 80088f0:	f7ff ffa1 	bl	8008836 <__sfputs_r>
 80088f4:	3001      	adds	r0, #1
 80088f6:	f000 80a7 	beq.w	8008a48 <_vfiprintf_r+0x1ec>
 80088fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088fc:	445a      	add	r2, fp
 80088fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008900:	f89a 3000 	ldrb.w	r3, [sl]
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 809f 	beq.w	8008a48 <_vfiprintf_r+0x1ec>
 800890a:	2300      	movs	r3, #0
 800890c:	f04f 32ff 	mov.w	r2, #4294967295
 8008910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008914:	f10a 0a01 	add.w	sl, sl, #1
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	9307      	str	r3, [sp, #28]
 800891c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008920:	931a      	str	r3, [sp, #104]	@ 0x68
 8008922:	4654      	mov	r4, sl
 8008924:	2205      	movs	r2, #5
 8008926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892a:	4853      	ldr	r0, [pc, #332]	@ (8008a78 <_vfiprintf_r+0x21c>)
 800892c:	f7f7 fc60 	bl	80001f0 <memchr>
 8008930:	9a04      	ldr	r2, [sp, #16]
 8008932:	b9d8      	cbnz	r0, 800896c <_vfiprintf_r+0x110>
 8008934:	06d1      	lsls	r1, r2, #27
 8008936:	bf44      	itt	mi
 8008938:	2320      	movmi	r3, #32
 800893a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800893e:	0713      	lsls	r3, r2, #28
 8008940:	bf44      	itt	mi
 8008942:	232b      	movmi	r3, #43	@ 0x2b
 8008944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008948:	f89a 3000 	ldrb.w	r3, [sl]
 800894c:	2b2a      	cmp	r3, #42	@ 0x2a
 800894e:	d015      	beq.n	800897c <_vfiprintf_r+0x120>
 8008950:	9a07      	ldr	r2, [sp, #28]
 8008952:	4654      	mov	r4, sl
 8008954:	2000      	movs	r0, #0
 8008956:	f04f 0c0a 	mov.w	ip, #10
 800895a:	4621      	mov	r1, r4
 800895c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008960:	3b30      	subs	r3, #48	@ 0x30
 8008962:	2b09      	cmp	r3, #9
 8008964:	d94b      	bls.n	80089fe <_vfiprintf_r+0x1a2>
 8008966:	b1b0      	cbz	r0, 8008996 <_vfiprintf_r+0x13a>
 8008968:	9207      	str	r2, [sp, #28]
 800896a:	e014      	b.n	8008996 <_vfiprintf_r+0x13a>
 800896c:	eba0 0308 	sub.w	r3, r0, r8
 8008970:	fa09 f303 	lsl.w	r3, r9, r3
 8008974:	4313      	orrs	r3, r2
 8008976:	9304      	str	r3, [sp, #16]
 8008978:	46a2      	mov	sl, r4
 800897a:	e7d2      	b.n	8008922 <_vfiprintf_r+0xc6>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	1d19      	adds	r1, r3, #4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	9103      	str	r1, [sp, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	bfbb      	ittet	lt
 8008988:	425b      	neglt	r3, r3
 800898a:	f042 0202 	orrlt.w	r2, r2, #2
 800898e:	9307      	strge	r3, [sp, #28]
 8008990:	9307      	strlt	r3, [sp, #28]
 8008992:	bfb8      	it	lt
 8008994:	9204      	strlt	r2, [sp, #16]
 8008996:	7823      	ldrb	r3, [r4, #0]
 8008998:	2b2e      	cmp	r3, #46	@ 0x2e
 800899a:	d10a      	bne.n	80089b2 <_vfiprintf_r+0x156>
 800899c:	7863      	ldrb	r3, [r4, #1]
 800899e:	2b2a      	cmp	r3, #42	@ 0x2a
 80089a0:	d132      	bne.n	8008a08 <_vfiprintf_r+0x1ac>
 80089a2:	9b03      	ldr	r3, [sp, #12]
 80089a4:	1d1a      	adds	r2, r3, #4
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	9203      	str	r2, [sp, #12]
 80089aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089ae:	3402      	adds	r4, #2
 80089b0:	9305      	str	r3, [sp, #20]
 80089b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a88 <_vfiprintf_r+0x22c>
 80089b6:	7821      	ldrb	r1, [r4, #0]
 80089b8:	2203      	movs	r2, #3
 80089ba:	4650      	mov	r0, sl
 80089bc:	f7f7 fc18 	bl	80001f0 <memchr>
 80089c0:	b138      	cbz	r0, 80089d2 <_vfiprintf_r+0x176>
 80089c2:	9b04      	ldr	r3, [sp, #16]
 80089c4:	eba0 000a 	sub.w	r0, r0, sl
 80089c8:	2240      	movs	r2, #64	@ 0x40
 80089ca:	4082      	lsls	r2, r0
 80089cc:	4313      	orrs	r3, r2
 80089ce:	3401      	adds	r4, #1
 80089d0:	9304      	str	r3, [sp, #16]
 80089d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d6:	4829      	ldr	r0, [pc, #164]	@ (8008a7c <_vfiprintf_r+0x220>)
 80089d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089dc:	2206      	movs	r2, #6
 80089de:	f7f7 fc07 	bl	80001f0 <memchr>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d03f      	beq.n	8008a66 <_vfiprintf_r+0x20a>
 80089e6:	4b26      	ldr	r3, [pc, #152]	@ (8008a80 <_vfiprintf_r+0x224>)
 80089e8:	bb1b      	cbnz	r3, 8008a32 <_vfiprintf_r+0x1d6>
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	3307      	adds	r3, #7
 80089ee:	f023 0307 	bic.w	r3, r3, #7
 80089f2:	3308      	adds	r3, #8
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f8:	443b      	add	r3, r7
 80089fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80089fc:	e76a      	b.n	80088d4 <_vfiprintf_r+0x78>
 80089fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a02:	460c      	mov	r4, r1
 8008a04:	2001      	movs	r0, #1
 8008a06:	e7a8      	b.n	800895a <_vfiprintf_r+0xfe>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	3401      	adds	r4, #1
 8008a0c:	9305      	str	r3, [sp, #20]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	f04f 0c0a 	mov.w	ip, #10
 8008a14:	4620      	mov	r0, r4
 8008a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a1a:	3a30      	subs	r2, #48	@ 0x30
 8008a1c:	2a09      	cmp	r2, #9
 8008a1e:	d903      	bls.n	8008a28 <_vfiprintf_r+0x1cc>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0c6      	beq.n	80089b2 <_vfiprintf_r+0x156>
 8008a24:	9105      	str	r1, [sp, #20]
 8008a26:	e7c4      	b.n	80089b2 <_vfiprintf_r+0x156>
 8008a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e7f0      	b.n	8008a14 <_vfiprintf_r+0x1b8>
 8008a32:	ab03      	add	r3, sp, #12
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	462a      	mov	r2, r5
 8008a38:	4b12      	ldr	r3, [pc, #72]	@ (8008a84 <_vfiprintf_r+0x228>)
 8008a3a:	a904      	add	r1, sp, #16
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f3af 8000 	nop.w
 8008a42:	4607      	mov	r7, r0
 8008a44:	1c78      	adds	r0, r7, #1
 8008a46:	d1d6      	bne.n	80089f6 <_vfiprintf_r+0x19a>
 8008a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a4a:	07d9      	lsls	r1, r3, #31
 8008a4c:	d405      	bmi.n	8008a5a <_vfiprintf_r+0x1fe>
 8008a4e:	89ab      	ldrh	r3, [r5, #12]
 8008a50:	059a      	lsls	r2, r3, #22
 8008a52:	d402      	bmi.n	8008a5a <_vfiprintf_r+0x1fe>
 8008a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a56:	f7ff fe7d 	bl	8008754 <__retarget_lock_release_recursive>
 8008a5a:	89ab      	ldrh	r3, [r5, #12]
 8008a5c:	065b      	lsls	r3, r3, #25
 8008a5e:	f53f af1f 	bmi.w	80088a0 <_vfiprintf_r+0x44>
 8008a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a64:	e71e      	b.n	80088a4 <_vfiprintf_r+0x48>
 8008a66:	ab03      	add	r3, sp, #12
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	4b05      	ldr	r3, [pc, #20]	@ (8008a84 <_vfiprintf_r+0x228>)
 8008a6e:	a904      	add	r1, sp, #16
 8008a70:	4630      	mov	r0, r6
 8008a72:	f000 f879 	bl	8008b68 <_printf_i>
 8008a76:	e7e4      	b.n	8008a42 <_vfiprintf_r+0x1e6>
 8008a78:	0801bcf0 	.word	0x0801bcf0
 8008a7c:	0801bcfa 	.word	0x0801bcfa
 8008a80:	00000000 	.word	0x00000000
 8008a84:	08008837 	.word	0x08008837
 8008a88:	0801bcf6 	.word	0x0801bcf6

08008a8c <_printf_common>:
 8008a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	4616      	mov	r6, r2
 8008a92:	4698      	mov	r8, r3
 8008a94:	688a      	ldr	r2, [r1, #8]
 8008a96:	690b      	ldr	r3, [r1, #16]
 8008a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	bfb8      	it	lt
 8008aa0:	4613      	movlt	r3, r2
 8008aa2:	6033      	str	r3, [r6, #0]
 8008aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	460c      	mov	r4, r1
 8008aac:	b10a      	cbz	r2, 8008ab2 <_printf_common+0x26>
 8008aae:	3301      	adds	r3, #1
 8008ab0:	6033      	str	r3, [r6, #0]
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	0699      	lsls	r1, r3, #26
 8008ab6:	bf42      	ittt	mi
 8008ab8:	6833      	ldrmi	r3, [r6, #0]
 8008aba:	3302      	addmi	r3, #2
 8008abc:	6033      	strmi	r3, [r6, #0]
 8008abe:	6825      	ldr	r5, [r4, #0]
 8008ac0:	f015 0506 	ands.w	r5, r5, #6
 8008ac4:	d106      	bne.n	8008ad4 <_printf_common+0x48>
 8008ac6:	f104 0a19 	add.w	sl, r4, #25
 8008aca:	68e3      	ldr	r3, [r4, #12]
 8008acc:	6832      	ldr	r2, [r6, #0]
 8008ace:	1a9b      	subs	r3, r3, r2
 8008ad0:	42ab      	cmp	r3, r5
 8008ad2:	dc26      	bgt.n	8008b22 <_printf_common+0x96>
 8008ad4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ad8:	6822      	ldr	r2, [r4, #0]
 8008ada:	3b00      	subs	r3, #0
 8008adc:	bf18      	it	ne
 8008ade:	2301      	movne	r3, #1
 8008ae0:	0692      	lsls	r2, r2, #26
 8008ae2:	d42b      	bmi.n	8008b3c <_printf_common+0xb0>
 8008ae4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ae8:	4641      	mov	r1, r8
 8008aea:	4638      	mov	r0, r7
 8008aec:	47c8      	blx	r9
 8008aee:	3001      	adds	r0, #1
 8008af0:	d01e      	beq.n	8008b30 <_printf_common+0xa4>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	6922      	ldr	r2, [r4, #16]
 8008af6:	f003 0306 	and.w	r3, r3, #6
 8008afa:	2b04      	cmp	r3, #4
 8008afc:	bf02      	ittt	eq
 8008afe:	68e5      	ldreq	r5, [r4, #12]
 8008b00:	6833      	ldreq	r3, [r6, #0]
 8008b02:	1aed      	subeq	r5, r5, r3
 8008b04:	68a3      	ldr	r3, [r4, #8]
 8008b06:	bf0c      	ite	eq
 8008b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b0c:	2500      	movne	r5, #0
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	bfc4      	itt	gt
 8008b12:	1a9b      	subgt	r3, r3, r2
 8008b14:	18ed      	addgt	r5, r5, r3
 8008b16:	2600      	movs	r6, #0
 8008b18:	341a      	adds	r4, #26
 8008b1a:	42b5      	cmp	r5, r6
 8008b1c:	d11a      	bne.n	8008b54 <_printf_common+0xc8>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e008      	b.n	8008b34 <_printf_common+0xa8>
 8008b22:	2301      	movs	r3, #1
 8008b24:	4652      	mov	r2, sl
 8008b26:	4641      	mov	r1, r8
 8008b28:	4638      	mov	r0, r7
 8008b2a:	47c8      	blx	r9
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d103      	bne.n	8008b38 <_printf_common+0xac>
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b38:	3501      	adds	r5, #1
 8008b3a:	e7c6      	b.n	8008aca <_printf_common+0x3e>
 8008b3c:	18e1      	adds	r1, r4, r3
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	2030      	movs	r0, #48	@ 0x30
 8008b42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b46:	4422      	add	r2, r4
 8008b48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b50:	3302      	adds	r3, #2
 8008b52:	e7c7      	b.n	8008ae4 <_printf_common+0x58>
 8008b54:	2301      	movs	r3, #1
 8008b56:	4622      	mov	r2, r4
 8008b58:	4641      	mov	r1, r8
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	47c8      	blx	r9
 8008b5e:	3001      	adds	r0, #1
 8008b60:	d0e6      	beq.n	8008b30 <_printf_common+0xa4>
 8008b62:	3601      	adds	r6, #1
 8008b64:	e7d9      	b.n	8008b1a <_printf_common+0x8e>
	...

08008b68 <_printf_i>:
 8008b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b6c:	7e0f      	ldrb	r7, [r1, #24]
 8008b6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b70:	2f78      	cmp	r7, #120	@ 0x78
 8008b72:	4691      	mov	r9, r2
 8008b74:	4680      	mov	r8, r0
 8008b76:	460c      	mov	r4, r1
 8008b78:	469a      	mov	sl, r3
 8008b7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b7e:	d807      	bhi.n	8008b90 <_printf_i+0x28>
 8008b80:	2f62      	cmp	r7, #98	@ 0x62
 8008b82:	d80a      	bhi.n	8008b9a <_printf_i+0x32>
 8008b84:	2f00      	cmp	r7, #0
 8008b86:	f000 80d2 	beq.w	8008d2e <_printf_i+0x1c6>
 8008b8a:	2f58      	cmp	r7, #88	@ 0x58
 8008b8c:	f000 80b9 	beq.w	8008d02 <_printf_i+0x19a>
 8008b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b98:	e03a      	b.n	8008c10 <_printf_i+0xa8>
 8008b9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b9e:	2b15      	cmp	r3, #21
 8008ba0:	d8f6      	bhi.n	8008b90 <_printf_i+0x28>
 8008ba2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ba8 <_printf_i+0x40>)
 8008ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ba8:	08008c01 	.word	0x08008c01
 8008bac:	08008c15 	.word	0x08008c15
 8008bb0:	08008b91 	.word	0x08008b91
 8008bb4:	08008b91 	.word	0x08008b91
 8008bb8:	08008b91 	.word	0x08008b91
 8008bbc:	08008b91 	.word	0x08008b91
 8008bc0:	08008c15 	.word	0x08008c15
 8008bc4:	08008b91 	.word	0x08008b91
 8008bc8:	08008b91 	.word	0x08008b91
 8008bcc:	08008b91 	.word	0x08008b91
 8008bd0:	08008b91 	.word	0x08008b91
 8008bd4:	08008d15 	.word	0x08008d15
 8008bd8:	08008c3f 	.word	0x08008c3f
 8008bdc:	08008ccf 	.word	0x08008ccf
 8008be0:	08008b91 	.word	0x08008b91
 8008be4:	08008b91 	.word	0x08008b91
 8008be8:	08008d37 	.word	0x08008d37
 8008bec:	08008b91 	.word	0x08008b91
 8008bf0:	08008c3f 	.word	0x08008c3f
 8008bf4:	08008b91 	.word	0x08008b91
 8008bf8:	08008b91 	.word	0x08008b91
 8008bfc:	08008cd7 	.word	0x08008cd7
 8008c00:	6833      	ldr	r3, [r6, #0]
 8008c02:	1d1a      	adds	r2, r3, #4
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6032      	str	r2, [r6, #0]
 8008c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c10:	2301      	movs	r3, #1
 8008c12:	e09d      	b.n	8008d50 <_printf_i+0x1e8>
 8008c14:	6833      	ldr	r3, [r6, #0]
 8008c16:	6820      	ldr	r0, [r4, #0]
 8008c18:	1d19      	adds	r1, r3, #4
 8008c1a:	6031      	str	r1, [r6, #0]
 8008c1c:	0606      	lsls	r6, r0, #24
 8008c1e:	d501      	bpl.n	8008c24 <_printf_i+0xbc>
 8008c20:	681d      	ldr	r5, [r3, #0]
 8008c22:	e003      	b.n	8008c2c <_printf_i+0xc4>
 8008c24:	0645      	lsls	r5, r0, #25
 8008c26:	d5fb      	bpl.n	8008c20 <_printf_i+0xb8>
 8008c28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c2c:	2d00      	cmp	r5, #0
 8008c2e:	da03      	bge.n	8008c38 <_printf_i+0xd0>
 8008c30:	232d      	movs	r3, #45	@ 0x2d
 8008c32:	426d      	negs	r5, r5
 8008c34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c38:	4859      	ldr	r0, [pc, #356]	@ (8008da0 <_printf_i+0x238>)
 8008c3a:	230a      	movs	r3, #10
 8008c3c:	e011      	b.n	8008c62 <_printf_i+0xfa>
 8008c3e:	6821      	ldr	r1, [r4, #0]
 8008c40:	6833      	ldr	r3, [r6, #0]
 8008c42:	0608      	lsls	r0, r1, #24
 8008c44:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c48:	d402      	bmi.n	8008c50 <_printf_i+0xe8>
 8008c4a:	0649      	lsls	r1, r1, #25
 8008c4c:	bf48      	it	mi
 8008c4e:	b2ad      	uxthmi	r5, r5
 8008c50:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c52:	4853      	ldr	r0, [pc, #332]	@ (8008da0 <_printf_i+0x238>)
 8008c54:	6033      	str	r3, [r6, #0]
 8008c56:	bf14      	ite	ne
 8008c58:	230a      	movne	r3, #10
 8008c5a:	2308      	moveq	r3, #8
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c62:	6866      	ldr	r6, [r4, #4]
 8008c64:	60a6      	str	r6, [r4, #8]
 8008c66:	2e00      	cmp	r6, #0
 8008c68:	bfa2      	ittt	ge
 8008c6a:	6821      	ldrge	r1, [r4, #0]
 8008c6c:	f021 0104 	bicge.w	r1, r1, #4
 8008c70:	6021      	strge	r1, [r4, #0]
 8008c72:	b90d      	cbnz	r5, 8008c78 <_printf_i+0x110>
 8008c74:	2e00      	cmp	r6, #0
 8008c76:	d04b      	beq.n	8008d10 <_printf_i+0x1a8>
 8008c78:	4616      	mov	r6, r2
 8008c7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c7e:	fb03 5711 	mls	r7, r3, r1, r5
 8008c82:	5dc7      	ldrb	r7, [r0, r7]
 8008c84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c88:	462f      	mov	r7, r5
 8008c8a:	42bb      	cmp	r3, r7
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	d9f4      	bls.n	8008c7a <_printf_i+0x112>
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d10b      	bne.n	8008cac <_printf_i+0x144>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	07df      	lsls	r7, r3, #31
 8008c98:	d508      	bpl.n	8008cac <_printf_i+0x144>
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	6861      	ldr	r1, [r4, #4]
 8008c9e:	4299      	cmp	r1, r3
 8008ca0:	bfde      	ittt	le
 8008ca2:	2330      	movle	r3, #48	@ 0x30
 8008ca4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ca8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cac:	1b92      	subs	r2, r2, r6
 8008cae:	6122      	str	r2, [r4, #16]
 8008cb0:	f8cd a000 	str.w	sl, [sp]
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	aa03      	add	r2, sp, #12
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4640      	mov	r0, r8
 8008cbc:	f7ff fee6 	bl	8008a8c <_printf_common>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d14a      	bne.n	8008d5a <_printf_i+0x1f2>
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc8:	b004      	add	sp, #16
 8008cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	f043 0320 	orr.w	r3, r3, #32
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	4833      	ldr	r0, [pc, #204]	@ (8008da4 <_printf_i+0x23c>)
 8008cd8:	2778      	movs	r7, #120	@ 0x78
 8008cda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	6831      	ldr	r1, [r6, #0]
 8008ce2:	061f      	lsls	r7, r3, #24
 8008ce4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ce8:	d402      	bmi.n	8008cf0 <_printf_i+0x188>
 8008cea:	065f      	lsls	r7, r3, #25
 8008cec:	bf48      	it	mi
 8008cee:	b2ad      	uxthmi	r5, r5
 8008cf0:	6031      	str	r1, [r6, #0]
 8008cf2:	07d9      	lsls	r1, r3, #31
 8008cf4:	bf44      	itt	mi
 8008cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cfa:	6023      	strmi	r3, [r4, #0]
 8008cfc:	b11d      	cbz	r5, 8008d06 <_printf_i+0x19e>
 8008cfe:	2310      	movs	r3, #16
 8008d00:	e7ac      	b.n	8008c5c <_printf_i+0xf4>
 8008d02:	4827      	ldr	r0, [pc, #156]	@ (8008da0 <_printf_i+0x238>)
 8008d04:	e7e9      	b.n	8008cda <_printf_i+0x172>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	f023 0320 	bic.w	r3, r3, #32
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	e7f6      	b.n	8008cfe <_printf_i+0x196>
 8008d10:	4616      	mov	r6, r2
 8008d12:	e7bd      	b.n	8008c90 <_printf_i+0x128>
 8008d14:	6833      	ldr	r3, [r6, #0]
 8008d16:	6825      	ldr	r5, [r4, #0]
 8008d18:	6961      	ldr	r1, [r4, #20]
 8008d1a:	1d18      	adds	r0, r3, #4
 8008d1c:	6030      	str	r0, [r6, #0]
 8008d1e:	062e      	lsls	r6, r5, #24
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	d501      	bpl.n	8008d28 <_printf_i+0x1c0>
 8008d24:	6019      	str	r1, [r3, #0]
 8008d26:	e002      	b.n	8008d2e <_printf_i+0x1c6>
 8008d28:	0668      	lsls	r0, r5, #25
 8008d2a:	d5fb      	bpl.n	8008d24 <_printf_i+0x1bc>
 8008d2c:	8019      	strh	r1, [r3, #0]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	6123      	str	r3, [r4, #16]
 8008d32:	4616      	mov	r6, r2
 8008d34:	e7bc      	b.n	8008cb0 <_printf_i+0x148>
 8008d36:	6833      	ldr	r3, [r6, #0]
 8008d38:	1d1a      	adds	r2, r3, #4
 8008d3a:	6032      	str	r2, [r6, #0]
 8008d3c:	681e      	ldr	r6, [r3, #0]
 8008d3e:	6862      	ldr	r2, [r4, #4]
 8008d40:	2100      	movs	r1, #0
 8008d42:	4630      	mov	r0, r6
 8008d44:	f7f7 fa54 	bl	80001f0 <memchr>
 8008d48:	b108      	cbz	r0, 8008d4e <_printf_i+0x1e6>
 8008d4a:	1b80      	subs	r0, r0, r6
 8008d4c:	6060      	str	r0, [r4, #4]
 8008d4e:	6863      	ldr	r3, [r4, #4]
 8008d50:	6123      	str	r3, [r4, #16]
 8008d52:	2300      	movs	r3, #0
 8008d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d58:	e7aa      	b.n	8008cb0 <_printf_i+0x148>
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	4649      	mov	r1, r9
 8008d60:	4640      	mov	r0, r8
 8008d62:	47d0      	blx	sl
 8008d64:	3001      	adds	r0, #1
 8008d66:	d0ad      	beq.n	8008cc4 <_printf_i+0x15c>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	079b      	lsls	r3, r3, #30
 8008d6c:	d413      	bmi.n	8008d96 <_printf_i+0x22e>
 8008d6e:	68e0      	ldr	r0, [r4, #12]
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	4298      	cmp	r0, r3
 8008d74:	bfb8      	it	lt
 8008d76:	4618      	movlt	r0, r3
 8008d78:	e7a6      	b.n	8008cc8 <_printf_i+0x160>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	4649      	mov	r1, r9
 8008d80:	4640      	mov	r0, r8
 8008d82:	47d0      	blx	sl
 8008d84:	3001      	adds	r0, #1
 8008d86:	d09d      	beq.n	8008cc4 <_printf_i+0x15c>
 8008d88:	3501      	adds	r5, #1
 8008d8a:	68e3      	ldr	r3, [r4, #12]
 8008d8c:	9903      	ldr	r1, [sp, #12]
 8008d8e:	1a5b      	subs	r3, r3, r1
 8008d90:	42ab      	cmp	r3, r5
 8008d92:	dcf2      	bgt.n	8008d7a <_printf_i+0x212>
 8008d94:	e7eb      	b.n	8008d6e <_printf_i+0x206>
 8008d96:	2500      	movs	r5, #0
 8008d98:	f104 0619 	add.w	r6, r4, #25
 8008d9c:	e7f5      	b.n	8008d8a <_printf_i+0x222>
 8008d9e:	bf00      	nop
 8008da0:	0801bd01 	.word	0x0801bd01
 8008da4:	0801bd12 	.word	0x0801bd12

08008da8 <__sflush_r>:
 8008da8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db0:	0716      	lsls	r6, r2, #28
 8008db2:	4605      	mov	r5, r0
 8008db4:	460c      	mov	r4, r1
 8008db6:	d454      	bmi.n	8008e62 <__sflush_r+0xba>
 8008db8:	684b      	ldr	r3, [r1, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dc02      	bgt.n	8008dc4 <__sflush_r+0x1c>
 8008dbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	dd48      	ble.n	8008e56 <__sflush_r+0xae>
 8008dc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dc6:	2e00      	cmp	r6, #0
 8008dc8:	d045      	beq.n	8008e56 <__sflush_r+0xae>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008dd0:	682f      	ldr	r7, [r5, #0]
 8008dd2:	6a21      	ldr	r1, [r4, #32]
 8008dd4:	602b      	str	r3, [r5, #0]
 8008dd6:	d030      	beq.n	8008e3a <__sflush_r+0x92>
 8008dd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	0759      	lsls	r1, r3, #29
 8008dde:	d505      	bpl.n	8008dec <__sflush_r+0x44>
 8008de0:	6863      	ldr	r3, [r4, #4]
 8008de2:	1ad2      	subs	r2, r2, r3
 8008de4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008de6:	b10b      	cbz	r3, 8008dec <__sflush_r+0x44>
 8008de8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008dea:	1ad2      	subs	r2, r2, r3
 8008dec:	2300      	movs	r3, #0
 8008dee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008df0:	6a21      	ldr	r1, [r4, #32]
 8008df2:	4628      	mov	r0, r5
 8008df4:	47b0      	blx	r6
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	d106      	bne.n	8008e0a <__sflush_r+0x62>
 8008dfc:	6829      	ldr	r1, [r5, #0]
 8008dfe:	291d      	cmp	r1, #29
 8008e00:	d82b      	bhi.n	8008e5a <__sflush_r+0xb2>
 8008e02:	4a2a      	ldr	r2, [pc, #168]	@ (8008eac <__sflush_r+0x104>)
 8008e04:	410a      	asrs	r2, r1
 8008e06:	07d6      	lsls	r6, r2, #31
 8008e08:	d427      	bmi.n	8008e5a <__sflush_r+0xb2>
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	6062      	str	r2, [r4, #4]
 8008e0e:	04d9      	lsls	r1, r3, #19
 8008e10:	6922      	ldr	r2, [r4, #16]
 8008e12:	6022      	str	r2, [r4, #0]
 8008e14:	d504      	bpl.n	8008e20 <__sflush_r+0x78>
 8008e16:	1c42      	adds	r2, r0, #1
 8008e18:	d101      	bne.n	8008e1e <__sflush_r+0x76>
 8008e1a:	682b      	ldr	r3, [r5, #0]
 8008e1c:	b903      	cbnz	r3, 8008e20 <__sflush_r+0x78>
 8008e1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e22:	602f      	str	r7, [r5, #0]
 8008e24:	b1b9      	cbz	r1, 8008e56 <__sflush_r+0xae>
 8008e26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e2a:	4299      	cmp	r1, r3
 8008e2c:	d002      	beq.n	8008e34 <__sflush_r+0x8c>
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f7ff fca0 	bl	8008774 <_free_r>
 8008e34:	2300      	movs	r3, #0
 8008e36:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e38:	e00d      	b.n	8008e56 <__sflush_r+0xae>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	47b0      	blx	r6
 8008e40:	4602      	mov	r2, r0
 8008e42:	1c50      	adds	r0, r2, #1
 8008e44:	d1c9      	bne.n	8008dda <__sflush_r+0x32>
 8008e46:	682b      	ldr	r3, [r5, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0c6      	beq.n	8008dda <__sflush_r+0x32>
 8008e4c:	2b1d      	cmp	r3, #29
 8008e4e:	d001      	beq.n	8008e54 <__sflush_r+0xac>
 8008e50:	2b16      	cmp	r3, #22
 8008e52:	d11e      	bne.n	8008e92 <__sflush_r+0xea>
 8008e54:	602f      	str	r7, [r5, #0]
 8008e56:	2000      	movs	r0, #0
 8008e58:	e022      	b.n	8008ea0 <__sflush_r+0xf8>
 8008e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e5e:	b21b      	sxth	r3, r3
 8008e60:	e01b      	b.n	8008e9a <__sflush_r+0xf2>
 8008e62:	690f      	ldr	r7, [r1, #16]
 8008e64:	2f00      	cmp	r7, #0
 8008e66:	d0f6      	beq.n	8008e56 <__sflush_r+0xae>
 8008e68:	0793      	lsls	r3, r2, #30
 8008e6a:	680e      	ldr	r6, [r1, #0]
 8008e6c:	bf08      	it	eq
 8008e6e:	694b      	ldreq	r3, [r1, #20]
 8008e70:	600f      	str	r7, [r1, #0]
 8008e72:	bf18      	it	ne
 8008e74:	2300      	movne	r3, #0
 8008e76:	eba6 0807 	sub.w	r8, r6, r7
 8008e7a:	608b      	str	r3, [r1, #8]
 8008e7c:	f1b8 0f00 	cmp.w	r8, #0
 8008e80:	dde9      	ble.n	8008e56 <__sflush_r+0xae>
 8008e82:	6a21      	ldr	r1, [r4, #32]
 8008e84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e86:	4643      	mov	r3, r8
 8008e88:	463a      	mov	r2, r7
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b0      	blx	r6
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	dc08      	bgt.n	8008ea4 <__sflush_r+0xfc>
 8008e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e9a:	81a3      	strh	r3, [r4, #12]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea4:	4407      	add	r7, r0
 8008ea6:	eba8 0800 	sub.w	r8, r8, r0
 8008eaa:	e7e7      	b.n	8008e7c <__sflush_r+0xd4>
 8008eac:	dfbffffe 	.word	0xdfbffffe

08008eb0 <_fflush_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	690b      	ldr	r3, [r1, #16]
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	b913      	cbnz	r3, 8008ec0 <_fflush_r+0x10>
 8008eba:	2500      	movs	r5, #0
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	b118      	cbz	r0, 8008eca <_fflush_r+0x1a>
 8008ec2:	6a03      	ldr	r3, [r0, #32]
 8008ec4:	b90b      	cbnz	r3, 8008eca <_fflush_r+0x1a>
 8008ec6:	f7ff f989 	bl	80081dc <__sinit>
 8008eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0f3      	beq.n	8008eba <_fflush_r+0xa>
 8008ed2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ed4:	07d0      	lsls	r0, r2, #31
 8008ed6:	d404      	bmi.n	8008ee2 <_fflush_r+0x32>
 8008ed8:	0599      	lsls	r1, r3, #22
 8008eda:	d402      	bmi.n	8008ee2 <_fflush_r+0x32>
 8008edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ede:	f7ff fc38 	bl	8008752 <__retarget_lock_acquire_recursive>
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7ff ff5f 	bl	8008da8 <__sflush_r>
 8008eea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eec:	07da      	lsls	r2, r3, #31
 8008eee:	4605      	mov	r5, r0
 8008ef0:	d4e4      	bmi.n	8008ebc <_fflush_r+0xc>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	059b      	lsls	r3, r3, #22
 8008ef6:	d4e1      	bmi.n	8008ebc <_fflush_r+0xc>
 8008ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008efa:	f7ff fc2b 	bl	8008754 <__retarget_lock_release_recursive>
 8008efe:	e7dd      	b.n	8008ebc <_fflush_r+0xc>

08008f00 <__swhatbuf_r>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	460c      	mov	r4, r1
 8008f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f08:	2900      	cmp	r1, #0
 8008f0a:	b096      	sub	sp, #88	@ 0x58
 8008f0c:	4615      	mov	r5, r2
 8008f0e:	461e      	mov	r6, r3
 8008f10:	da0d      	bge.n	8008f2e <__swhatbuf_r+0x2e>
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f18:	f04f 0100 	mov.w	r1, #0
 8008f1c:	bf14      	ite	ne
 8008f1e:	2340      	movne	r3, #64	@ 0x40
 8008f20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f24:	2000      	movs	r0, #0
 8008f26:	6031      	str	r1, [r6, #0]
 8008f28:	602b      	str	r3, [r5, #0]
 8008f2a:	b016      	add	sp, #88	@ 0x58
 8008f2c:	bd70      	pop	{r4, r5, r6, pc}
 8008f2e:	466a      	mov	r2, sp
 8008f30:	f000 f848 	bl	8008fc4 <_fstat_r>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	dbec      	blt.n	8008f12 <__swhatbuf_r+0x12>
 8008f38:	9901      	ldr	r1, [sp, #4]
 8008f3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f42:	4259      	negs	r1, r3
 8008f44:	4159      	adcs	r1, r3
 8008f46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f4a:	e7eb      	b.n	8008f24 <__swhatbuf_r+0x24>

08008f4c <__smakebuf_r>:
 8008f4c:	898b      	ldrh	r3, [r1, #12]
 8008f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f50:	079d      	lsls	r5, r3, #30
 8008f52:	4606      	mov	r6, r0
 8008f54:	460c      	mov	r4, r1
 8008f56:	d507      	bpl.n	8008f68 <__smakebuf_r+0x1c>
 8008f58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	6123      	str	r3, [r4, #16]
 8008f60:	2301      	movs	r3, #1
 8008f62:	6163      	str	r3, [r4, #20]
 8008f64:	b003      	add	sp, #12
 8008f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f68:	ab01      	add	r3, sp, #4
 8008f6a:	466a      	mov	r2, sp
 8008f6c:	f7ff ffc8 	bl	8008f00 <__swhatbuf_r>
 8008f70:	9f00      	ldr	r7, [sp, #0]
 8008f72:	4605      	mov	r5, r0
 8008f74:	4639      	mov	r1, r7
 8008f76:	4630      	mov	r0, r6
 8008f78:	f7ff f818 	bl	8007fac <_malloc_r>
 8008f7c:	b948      	cbnz	r0, 8008f92 <__smakebuf_r+0x46>
 8008f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f82:	059a      	lsls	r2, r3, #22
 8008f84:	d4ee      	bmi.n	8008f64 <__smakebuf_r+0x18>
 8008f86:	f023 0303 	bic.w	r3, r3, #3
 8008f8a:	f043 0302 	orr.w	r3, r3, #2
 8008f8e:	81a3      	strh	r3, [r4, #12]
 8008f90:	e7e2      	b.n	8008f58 <__smakebuf_r+0xc>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	6020      	str	r0, [r4, #0]
 8008f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	9b01      	ldr	r3, [sp, #4]
 8008f9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008fa2:	b15b      	cbz	r3, 8008fbc <__smakebuf_r+0x70>
 8008fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f000 f81d 	bl	8008fe8 <_isatty_r>
 8008fae:	b128      	cbz	r0, 8008fbc <__smakebuf_r+0x70>
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	f023 0303 	bic.w	r3, r3, #3
 8008fb6:	f043 0301 	orr.w	r3, r3, #1
 8008fba:	81a3      	strh	r3, [r4, #12]
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	431d      	orrs	r5, r3
 8008fc0:	81a5      	strh	r5, [r4, #12]
 8008fc2:	e7cf      	b.n	8008f64 <__smakebuf_r+0x18>

08008fc4 <_fstat_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4d07      	ldr	r5, [pc, #28]	@ (8008fe4 <_fstat_r+0x20>)
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4608      	mov	r0, r1
 8008fce:	4611      	mov	r1, r2
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	f7f8 f91d 	bl	8001210 <_fstat>
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	d102      	bne.n	8008fe0 <_fstat_r+0x1c>
 8008fda:	682b      	ldr	r3, [r5, #0]
 8008fdc:	b103      	cbz	r3, 8008fe0 <_fstat_r+0x1c>
 8008fde:	6023      	str	r3, [r4, #0]
 8008fe0:	bd38      	pop	{r3, r4, r5, pc}
 8008fe2:	bf00      	nop
 8008fe4:	2000237c 	.word	0x2000237c

08008fe8 <_isatty_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d06      	ldr	r5, [pc, #24]	@ (8009004 <_isatty_r+0x1c>)
 8008fec:	2300      	movs	r3, #0
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	602b      	str	r3, [r5, #0]
 8008ff4:	f7f8 f8ba 	bl	800116c <_isatty>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_isatty_r+0x1a>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_isatty_r+0x1a>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	2000237c 	.word	0x2000237c

08009008 <_init>:
 8009008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900a:	bf00      	nop
 800900c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900e:	bc08      	pop	{r3}
 8009010:	469e      	mov	lr, r3
 8009012:	4770      	bx	lr

08009014 <_fini>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	bf00      	nop
 8009018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901a:	bc08      	pop	{r3}
 800901c:	469e      	mov	lr, r3
 800901e:	4770      	bx	lr
