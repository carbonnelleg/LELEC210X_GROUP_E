
optimization_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012dcc  08008478  08008478  00009478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b244  0801b244  0001d468  2**0
                  CONTENTS
  4 .ARM          00000008  0801b244  0801b244  0001c244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b24c  0801b24c  0001d468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b24c  0801b24c  0001c24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b250  0801b250  0001c250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  0801b254  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f1c  20000468  0801b6bc  0001d468  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002384  0801b6bc  0001e384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d468  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040877  00000000  00000000  0001d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000079d9  00000000  00000000  0005dd0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00016ba9  00000000  00000000  000656e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  0007c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002c3d  00000000  00000000  0007daf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030d02  00000000  00000000  00080735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039c49  00000000  00000000  000b1437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00123a57  00000000  00000000  000eb080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0020ead7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050b8  00000000  00000000  0020eb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00213c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000880e  00000000  00000000  00213cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00001330  00000000  00000000  0021c4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000468 	.word	0x20000468
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008460 	.word	0x08008460

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000046c 	.word	0x2000046c
 80001ec:	08008460 	.word	0x08008460

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000582:	4826      	ldr	r0, [pc, #152]	@ (800061c <MX_ADC1_Init+0x9c>)
 8000584:	4a26      	ldr	r2, [pc, #152]	@ (8000620 <MX_ADC1_Init+0xa0>)
 8000586:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000588:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
  ADC_MultiModeTypeDef multimode = {0};
 800058c:	2300      	movs	r3, #0
{
 800058e:	b08a      	sub	sp, #40	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000590:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	2204      	movs	r2, #4
 8000594:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000598:	2201      	movs	r2, #1
  ADC_MultiModeTypeDef multimode = {0};
 800059a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800059e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80005a2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80005a6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	9309      	str	r3, [sp, #36]	@ 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b0:	8303      	strh	r3, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 80005b2:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005b4:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005bc:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005be:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005c2:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80005c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ca:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ce:	f002 f9f1 	bl	80029b4 <HAL_ADC_Init>
 80005d2:	b9c0      	cbnz	r0, 8000606 <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d4:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005d6:	4811      	ldr	r0, [pc, #68]	@ (800061c <MX_ADC1_Init+0x9c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d8:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005da:	a901      	add	r1, sp, #4
 80005dc:	f002 fed4 	bl	8003388 <HAL_ADCEx_MultiModeConfigChannel>
 80005e0:	b9c0      	cbnz	r0, 8000614 <MX_ADC1_Init+0x94>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005e2:	4a10      	ldr	r2, [pc, #64]	@ (8000624 <MX_ADC1_Init+0xa4>)
 80005e4:	9204      	str	r2, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e6:	227f      	movs	r2, #127	@ 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005e8:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ea:	2406      	movs	r4, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ec:	9207      	str	r2, [sp, #28]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ee:	480b      	ldr	r0, [pc, #44]	@ (800061c <MX_ADC1_Init+0x9c>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f0:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	a904      	add	r1, sp, #16
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005f4:	e9cd 4305 	strd	r4, r3, [sp, #20]
  sConfig.Offset = 0;
 80005f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fc:	f002 fb04 	bl	8002c08 <HAL_ADC_ConfigChannel>
 8000600:	b920      	cbnz	r0, 800060c <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000602:	b00a      	add	sp, #40	@ 0x28
 8000604:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000606:	f000 fbd5 	bl	8000db4 <Error_Handler>
 800060a:	e7e3      	b.n	80005d4 <MX_ADC1_Init+0x54>
    Error_Handler();
 800060c:	f000 fbd2 	bl	8000db4 <Error_Handler>
}
 8000610:	b00a      	add	sp, #40	@ 0x28
 8000612:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000614:	f000 fbce 	bl	8000db4 <Error_Handler>
 8000618:	e7e3      	b.n	80005e2 <MX_ADC1_Init+0x62>
 800061a:	bf00      	nop
 800061c:	200004cc 	.word	0x200004cc
 8000620:	50040000 	.word	0x50040000
 8000624:	14f00020 	.word	0x14f00020

08000628 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	4604      	mov	r4, r0
 800062c:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000630:	228c      	movs	r2, #140	@ 0x8c
 8000632:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000638:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800063c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063e:	f007 fa2b 	bl	8007a98 <memset>
  if(adcHandle->Instance==ADC1)
 8000642:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <HAL_ADC_MspInit+0xb8>)
 8000644:	6822      	ldr	r2, [r4, #0]
 8000646:	429a      	cmp	r2, r3
 8000648:	d001      	beq.n	800064e <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800064a:	b02a      	add	sp, #168	@ 0xa8
 800064c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800064e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000652:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000656:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000658:	9207      	str	r2, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800065a:	9326      	str	r3, [sp, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065c:	f004 fa64 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8000660:	2800      	cmp	r0, #0
 8000662:	d136      	bne.n	80006d2 <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000664:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Instance = DMA1_Channel1;
 8000666:	4d20      	ldr	r5, [pc, #128]	@ (80006e8 <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8000668:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800066a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800066e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000670:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000672:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8000676:	9200      	str	r2, [sp, #0]
 8000678:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800067c:	f042 0201 	orr.w	r2, r2, #1
 8000680:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000684:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800068c:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000692:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000696:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f003 fb23 	bl	8003ce8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80006a2:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006a4:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006a6:	e9c5 2600 	strd	r2, r6, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006aa:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006b4:	e9c5 2305 	strd	r2, r3, [r5, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006b8:	4628      	mov	r0, r5
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ba:	2320      	movs	r3, #32
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006bc:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006c0:	e9c5 3607 	strd	r3, r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c4:	f003 fa12 	bl	8003aec <HAL_DMA_Init>
 80006c8:	b930      	cbnz	r0, 80006d8 <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ca:	6525      	str	r5, [r4, #80]	@ 0x50
 80006cc:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80006ce:	b02a      	add	sp, #168	@ 0xa8
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80006d2:	f000 fb6f 	bl	8000db4 <Error_Handler>
 80006d6:	e7c5      	b.n	8000664 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 80006d8:	f000 fb6c 	bl	8000db4 <Error_Handler>
 80006dc:	e7f5      	b.n	80006ca <HAL_ADC_MspInit+0xa2>
 80006de:	bf00      	nop
 80006e0:	50040000 	.word	0x50040000
 80006e4:	40021000 	.word	0x40021000
 80006e8:	20000484 	.word	0x20000484
 80006ec:	40020008 	.word	0x40020008

080006f0 <send_spectrogram>:
		Error_Handler();
	}
}

// Function to create and send the packet
static void send_spectrogram() {
 80006f0:	b510      	push	{r4, lr}
 80006f2:	f5ad 6d1b 	sub.w	sp, sp, #2480	@ 0x9b0
	uint8_t packet[PACKET_LENGTH];

	START_CYCLE_COUNT_ENCODE_PACKET();
 80006f6:	f002 f881 	bl	80027fc <start_cycle_count>
	for (size_t i=0; i<N_MELVECS; i++) {
 80006fa:	491d      	ldr	r1, [pc, #116]	@ (8000770 <send_spectrogram+0x80>)
 80006fc:	ab01      	add	r3, sp, #4
 80006fe:	f50d 7e49 	add.w	lr, sp, #804	@ 0x324
static void send_spectrogram() {
 8000702:	4608      	mov	r0, r1
 8000704:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 8000708:	f930 2f02 	ldrsh.w	r2, [r0, #2]!
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2+1] = mel_vectors[i][j] & 0xFF;
 800070c:	725a      	strb	r2, [r3, #9]
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 800070e:	1212      	asrs	r2, r2, #8
 8000710:	721a      	strb	r2, [r3, #8]
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 8000712:	3302      	adds	r3, #2
 8000714:	4563      	cmp	r3, ip
 8000716:	d1f7      	bne.n	8000708 <send_spectrogram+0x18>
	for (size_t i=0; i<N_MELVECS; i++) {
 8000718:	459e      	cmp	lr, r3
 800071a:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 800071e:	d1f0      	bne.n	8000702 <send_spectrogram+0x12>
	make_packet(packet, PAYLOAD_LENGTH, 0, *packet_cnt);
 8000720:	4c14      	ldr	r4, [pc, #80]	@ (8000774 <send_spectrogram+0x84>)
 8000722:	2200      	movs	r2, #0
 8000724:	6823      	ldr	r3, [r4, #0]
 8000726:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800072a:	a801      	add	r0, sp, #4
 800072c:	f000 fc62 	bl	8000ff4 <make_packet>
	*packet_cnt += 1;
 8000730:	6823      	ldr	r3, [r4, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	6023      	str	r3, [r4, #0]
	if (*packet_cnt == 0) {
 8000736:	b1a3      	cbz	r3, 8000762 <send_spectrogram+0x72>
	encode_packet(packet, &packet_cnt);
	STOP_CYCLE_COUNT_ENCODE_PACKET("Encode Packet");
 8000738:	480f      	ldr	r0, [pc, #60]	@ (8000778 <send_spectrogram+0x88>)
 800073a:	f002 f87f 	bl	800283c <stop_cycle_count>

	START_CYCLE_COUNT_SEND_PACKET();
	S2LP_Send(packet, PACKET_LENGTH);
 800073e:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8000742:	a801      	add	r0, sp, #4
 8000744:	f000 fdde 	bl	8001304 <S2LP_Send>
	hex_encode(hex_encoded_packet, packet, PACKET_LENGTH);
 8000748:	a8cf      	add	r0, sp, #828	@ 0x33c
 800074a:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800074e:	a901      	add	r1, sp, #4
 8000750:	f002 f890 	bl	8002874 <hex_encode>
	DEBUG_PRINT("DF:HEX:%s\r\n", hex_encoded_packet);
 8000754:	a9cf      	add	r1, sp, #828	@ 0x33c
 8000756:	4809      	ldr	r0, [pc, #36]	@ (800077c <send_spectrogram+0x8c>)
 8000758:	f006 ffa2 	bl	80076a0 <iprintf>
	STOP_CYCLE_COUNT_SEND_PACKET("Send Packet");

	print_encoded_packet(packet);
}
 800075c:	f50d 6d1b 	add.w	sp, sp, #2480	@ 0x9b0
 8000760:	bd10      	pop	{r4, pc}
		DEBUG_PRINT("Packet counter overflow.\r\n");
 8000762:	4807      	ldr	r0, [pc, #28]	@ (8000780 <send_spectrogram+0x90>)
 8000764:	f007 f804 	bl	8007770 <puts>
		Error_Handler();
 8000768:	f000 fb24 	bl	8000db4 <Error_Handler>
 800076c:	e7e4      	b.n	8000738 <send_spectrogram+0x48>
 800076e:	bf00      	nop
 8000770:	2000053a 	.word	0x2000053a
 8000774:	20000538 	.word	0x20000538
 8000778:	08008738 	.word	0x08008738
 800077c:	08008748 	.word	0x08008748
 8000780:	0800871c 	.word	0x0800871c

08000784 <StartADCAcq>:
int StartADCAcq(int32_t n_bufs) {
 8000784:	b508      	push	{r3, lr}
	cur_melvec = 0;
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <StartADCAcq+0x20>)
	rem_n_bufs = n_bufs;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <StartADCAcq+0x24>)
	cur_melvec = 0;
 800078a:	2100      	movs	r1, #0
	rem_n_bufs = n_bufs;
 800078c:	6018      	str	r0, [r3, #0]
	cur_melvec = 0;
 800078e:	7011      	strb	r1, [r2, #0]
	if (rem_n_bufs != 0) {
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	b900      	cbnz	r0, 8000796 <StartADCAcq+0x12>
}
 8000794:	bd08      	pop	{r3, pc}
		return HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDoubleBuf, 2*ADC_BUF_SIZE);
 8000796:	4905      	ldr	r1, [pc, #20]	@ (80007ac <StartADCAcq+0x28>)
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <StartADCAcq+0x2c>)
 800079a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800079e:	f002 fcf1 	bl	8003184 <HAL_ADC_Start_DMA>
}
 80007a2:	bd08      	pop	{r3, pc}
 80007a4:	2000085c 	.word	0x2000085c
 80007a8:	20000534 	.word	0x20000534
 80007ac:	20000c64 	.word	0x20000c64
 80007b0:	200004cc 	.word	0x200004cc

080007b4 <IsADCFinished>:
	return (rem_n_bufs == 0);
 80007b4:	4b02      	ldr	r3, [pc, #8]	@ (80007c0 <IsADCFinished+0xc>)
 80007b6:	6818      	ldr	r0, [r3, #0]
}
 80007b8:	fab0 f080 	clz	r0, r0
 80007bc:	0940      	lsrs	r0, r0, #5
 80007be:	4770      	bx	lr
 80007c0:	20000534 	.word	0x20000534

080007c4 <HAL_ADC_ConvCpltCallback>:
        #endif
    }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80007c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (rem_n_bufs != -1) {
 80007c8:	4f31      	ldr	r7, [pc, #196]	@ (8000890 <HAL_ADC_ConvCpltCallback+0xcc>)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	3301      	adds	r3, #1
{
 80007ce:	b08b      	sub	sp, #44	@ 0x2c
    if (rem_n_bufs != -1) {
 80007d0:	d002      	beq.n	80007d8 <HAL_ADC_ConvCpltCallback+0x14>
        rem_n_bufs--;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	603b      	str	r3, [r7, #0]
    if (ADCDataRdy[1-buf_cplt]) {
 80007d8:	4c2e      	ldr	r4, [pc, #184]	@ (8000894 <HAL_ADC_ConvCpltCallback+0xd0>)
 80007da:	7823      	ldrb	r3, [r4, #0]
 80007dc:	bb1b      	cbnz	r3, 8000826 <HAL_ADC_ConvCpltCallback+0x62>
    ADCDataRdy[buf_cplt] = 1;
 80007de:	2301      	movs	r3, #1
	memcpy((void*)ADCProcessBuf, (void*)ADCData[buf_cplt], ADC_BUF_SIZE * sizeof(uint16_t));
 80007e0:	492d      	ldr	r1, [pc, #180]	@ (8000898 <HAL_ADC_ConvCpltCallback+0xd4>)
	Spectrogram_Compute((q15_t *)ADCProcessBuf, mel_vectors[cur_melvec]);
 80007e2:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 80008ac <HAL_ADC_ConvCpltCallback+0xe8>
	memcpy((void*)ADCProcessBuf, (void*)ADCData[buf_cplt], ADC_BUF_SIZE * sizeof(uint16_t));
 80007e6:	482d      	ldr	r0, [pc, #180]	@ (800089c <HAL_ADC_ConvCpltCallback+0xd8>)
    ADCDataRdy[buf_cplt] = 1;
 80007e8:	7063      	strb	r3, [r4, #1]
	memcpy((void*)ADCProcessBuf, (void*)ADCData[buf_cplt], ADC_BUF_SIZE * sizeof(uint16_t));
 80007ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007ee:	f007 f9de 	bl	8007bae <memcpy>
	Spectrogram_Format((q15_t *)ADCProcessBuf);
 80007f2:	482a      	ldr	r0, [pc, #168]	@ (800089c <HAL_ADC_ConvCpltCallback+0xd8>)
	Spectrogram_Compute((q15_t *)ADCProcessBuf, mel_vectors[cur_melvec]);
 80007f4:	4e2a      	ldr	r6, [pc, #168]	@ (80008a0 <HAL_ADC_ConvCpltCallback+0xdc>)
	Spectrogram_Format((q15_t *)ADCProcessBuf);
 80007f6:	f001 fd5f 	bl	80022b8 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCProcessBuf, mel_vectors[cur_melvec]);
 80007fa:	f898 1000 	ldrb.w	r1, [r8]
 80007fe:	4827      	ldr	r0, [pc, #156]	@ (800089c <HAL_ADC_ConvCpltCallback+0xd8>)
 8000800:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000804:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8000808:	f001 fd7e 	bl	8002308 <Spectrogram_Compute>
    cur_melvec++;
 800080c:	f898 3000 	ldrb.w	r3, [r8]
 8000810:	3301      	adds	r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	f888 3000 	strb.w	r3, [r8]
    ADCDataRdy[buf_cplt] = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	7063      	strb	r3, [r4, #1]
    if (rem_n_bufs == 0) {
 800081c:	683c      	ldr	r4, [r7, #0]
 800081e:	b144      	cbz	r4, 8000832 <HAL_ADC_ConvCpltCallback+0x6e>
	ADC_Callback(1);
}
 8000820:	b00b      	add	sp, #44	@ 0x2c
 8000822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        DEBUG_PRINT("Error: ADC Data buffer full\r\n");
 8000826:	481f      	ldr	r0, [pc, #124]	@ (80008a4 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000828:	f006 ffa2 	bl	8007770 <puts>
        Error_Handler();
 800082c:	f000 fac2 	bl	8000db4 <Error_Handler>
 8000830:	e7d5      	b.n	80007de <HAL_ADC_ConvCpltCallback+0x1a>
	START_CYCLE_COUNT_THRESHOLD();
 8000832:	f001 ffe3 	bl	80027fc <start_cycle_count>
		for (size_t i = 0; i < N_MELVECS; i++) {
 8000836:	f506 7948 	add.w	r9, r6, #800	@ 0x320
 800083a:	f10d 0526 	add.w	r5, sp, #38	@ 0x26
			arm_copy_q15(mel_vectors[i], temp_buf, MELVEC_LENGTH);
 800083e:	2214      	movs	r2, #20
 8000840:	4669      	mov	r1, sp
 8000842:	4630      	mov	r0, r6
 8000844:	f005 fd78 	bl	8006338 <arm_copy_q15>
			arm_abs_q15(temp_buf, temp_buf, MELVEC_LENGTH);
 8000848:	2214      	movs	r2, #20
 800084a:	4669      	mov	r1, sp
 800084c:	4668      	mov	r0, sp
 800084e:	f006 f8ad 	bl	80069ac <arm_abs_q15>
			for (size_t j = 0; j < MELVEC_LENGTH; j++) {
 8000852:	f1ad 0302 	sub.w	r3, sp, #2
				total_sum += temp_buf[j];
 8000856:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
			for (size_t j = 0; j < MELVEC_LENGTH; j++) {
 800085a:	42ab      	cmp	r3, r5
				total_sum += temp_buf[j];
 800085c:	4414      	add	r4, r2
			for (size_t j = 0; j < MELVEC_LENGTH; j++) {
 800085e:	d1fa      	bne.n	8000856 <HAL_ADC_ConvCpltCallback+0x92>
			if (total_sum > corrected_threshold) {
 8000860:	f5b4 7fc8 	cmp.w	r4, #400	@ 0x190
 8000864:	dc0d      	bgt.n	8000882 <HAL_ADC_ConvCpltCallback+0xbe>
		for (size_t i = 0; i < N_MELVECS; i++) {
 8000866:	3628      	adds	r6, #40	@ 0x28
 8000868:	454e      	cmp	r6, r9
 800086a:	d1e8      	bne.n	800083e <HAL_ADC_ConvCpltCallback+0x7a>
        STOP_CYCLE_COUNT_THRESHOLD("Hard Full Threshold");
 800086c:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <HAL_ADC_ConvCpltCallback+0xe4>)
 800086e:	f001 ffe5 	bl	800283c <stop_cycle_count>
            cur_melvec = 0;
 8000872:	2200      	movs	r2, #0
            rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 8000874:	2314      	movs	r3, #20
            cur_melvec = 0;
 8000876:	f888 2000 	strb.w	r2, [r8]
            rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 800087a:	603b      	str	r3, [r7, #0]
}
 800087c:	b00b      	add	sp, #44	@ 0x2c
 800087e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				STOP_CYCLE_COUNT_THRESHOLD("Hard Full Threshold");
 8000882:	4809      	ldr	r0, [pc, #36]	@ (80008a8 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000884:	f001 ffda 	bl	800283c <stop_cycle_count>
				send_spectrogram();
 8000888:	f7ff ff32 	bl	80006f0 <send_spectrogram>
 800088c:	e7f1      	b.n	8000872 <HAL_ADC_ConvCpltCallback+0xae>
 800088e:	bf00      	nop
 8000890:	20000534 	.word	0x20000534
 8000894:	20000c60 	.word	0x20000c60
 8000898:	20001064 	.word	0x20001064
 800089c:	20000860 	.word	0x20000860
 80008a0:	2000053c 	.word	0x2000053c
 80008a4:	08008768 	.word	0x08008768
 80008a8:	08008754 	.word	0x08008754
 80008ac:	2000085c 	.word	0x2000085c

080008b0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80008b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (rem_n_bufs != -1) {
 80008b4:	4f31      	ldr	r7, [pc, #196]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	3301      	adds	r3, #1
{
 80008ba:	b08b      	sub	sp, #44	@ 0x2c
    if (rem_n_bufs != -1) {
 80008bc:	d002      	beq.n	80008c4 <HAL_ADC_ConvHalfCpltCallback+0x14>
        rem_n_bufs--;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	603b      	str	r3, [r7, #0]
    if (ADCDataRdy[1-buf_cplt]) {
 80008c4:	4c2e      	ldr	r4, [pc, #184]	@ (8000980 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 80008c6:	7863      	ldrb	r3, [r4, #1]
 80008c8:	bb1b      	cbnz	r3, 8000912 <HAL_ADC_ConvHalfCpltCallback+0x62>
    ADCDataRdy[buf_cplt] = 1;
 80008ca:	2301      	movs	r3, #1
	memcpy((void*)ADCProcessBuf, (void*)ADCData[buf_cplt], ADC_BUF_SIZE * sizeof(uint16_t));
 80008cc:	492d      	ldr	r1, [pc, #180]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
	Spectrogram_Compute((q15_t *)ADCProcessBuf, mel_vectors[cur_melvec]);
 80008ce:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8000998 <HAL_ADC_ConvHalfCpltCallback+0xe8>
	memcpy((void*)ADCProcessBuf, (void*)ADCData[buf_cplt], ADC_BUF_SIZE * sizeof(uint16_t));
 80008d2:	482d      	ldr	r0, [pc, #180]	@ (8000988 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
    ADCDataRdy[buf_cplt] = 1;
 80008d4:	7023      	strb	r3, [r4, #0]
	memcpy((void*)ADCProcessBuf, (void*)ADCData[buf_cplt], ADC_BUF_SIZE * sizeof(uint16_t));
 80008d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008da:	f007 f968 	bl	8007bae <memcpy>
	Spectrogram_Format((q15_t *)ADCProcessBuf);
 80008de:	482a      	ldr	r0, [pc, #168]	@ (8000988 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
	Spectrogram_Compute((q15_t *)ADCProcessBuf, mel_vectors[cur_melvec]);
 80008e0:	4e2a      	ldr	r6, [pc, #168]	@ (800098c <HAL_ADC_ConvHalfCpltCallback+0xdc>)
	Spectrogram_Format((q15_t *)ADCProcessBuf);
 80008e2:	f001 fce9 	bl	80022b8 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCProcessBuf, mel_vectors[cur_melvec]);
 80008e6:	f898 1000 	ldrb.w	r1, [r8]
 80008ea:	4827      	ldr	r0, [pc, #156]	@ (8000988 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 80008ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80008f0:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 80008f4:	f001 fd08 	bl	8002308 <Spectrogram_Compute>
    cur_melvec++;
 80008f8:	f898 3000 	ldrb.w	r3, [r8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	f888 3000 	strb.w	r3, [r8]
    ADCDataRdy[buf_cplt] = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	7023      	strb	r3, [r4, #0]
    if (rem_n_bufs == 0) {
 8000908:	683c      	ldr	r4, [r7, #0]
 800090a:	b144      	cbz	r4, 800091e <HAL_ADC_ConvHalfCpltCallback+0x6e>
	ADC_Callback(0);
}
 800090c:	b00b      	add	sp, #44	@ 0x2c
 800090e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        DEBUG_PRINT("Error: ADC Data buffer full\r\n");
 8000912:	481f      	ldr	r0, [pc, #124]	@ (8000990 <HAL_ADC_ConvHalfCpltCallback+0xe0>)
 8000914:	f006 ff2c 	bl	8007770 <puts>
        Error_Handler();
 8000918:	f000 fa4c 	bl	8000db4 <Error_Handler>
 800091c:	e7d5      	b.n	80008ca <HAL_ADC_ConvHalfCpltCallback+0x1a>
	START_CYCLE_COUNT_THRESHOLD();
 800091e:	f001 ff6d 	bl	80027fc <start_cycle_count>
		for (size_t i = 0; i < N_MELVECS; i++) {
 8000922:	f506 7948 	add.w	r9, r6, #800	@ 0x320
 8000926:	f10d 0526 	add.w	r5, sp, #38	@ 0x26
			arm_copy_q15(mel_vectors[i], temp_buf, MELVEC_LENGTH);
 800092a:	2214      	movs	r2, #20
 800092c:	4669      	mov	r1, sp
 800092e:	4630      	mov	r0, r6
 8000930:	f005 fd02 	bl	8006338 <arm_copy_q15>
			arm_abs_q15(temp_buf, temp_buf, MELVEC_LENGTH);
 8000934:	2214      	movs	r2, #20
 8000936:	4669      	mov	r1, sp
 8000938:	4668      	mov	r0, sp
 800093a:	f006 f837 	bl	80069ac <arm_abs_q15>
			for (size_t j = 0; j < MELVEC_LENGTH; j++) {
 800093e:	f1ad 0302 	sub.w	r3, sp, #2
				total_sum += temp_buf[j];
 8000942:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
			for (size_t j = 0; j < MELVEC_LENGTH; j++) {
 8000946:	42ab      	cmp	r3, r5
				total_sum += temp_buf[j];
 8000948:	4414      	add	r4, r2
			for (size_t j = 0; j < MELVEC_LENGTH; j++) {
 800094a:	d1fa      	bne.n	8000942 <HAL_ADC_ConvHalfCpltCallback+0x92>
			if (total_sum > corrected_threshold) {
 800094c:	f5b4 7fc8 	cmp.w	r4, #400	@ 0x190
 8000950:	dc0d      	bgt.n	800096e <HAL_ADC_ConvHalfCpltCallback+0xbe>
		for (size_t i = 0; i < N_MELVECS; i++) {
 8000952:	3628      	adds	r6, #40	@ 0x28
 8000954:	454e      	cmp	r6, r9
 8000956:	d1e8      	bne.n	800092a <HAL_ADC_ConvHalfCpltCallback+0x7a>
        STOP_CYCLE_COUNT_THRESHOLD("Hard Full Threshold");
 8000958:	480e      	ldr	r0, [pc, #56]	@ (8000994 <HAL_ADC_ConvHalfCpltCallback+0xe4>)
 800095a:	f001 ff6f 	bl	800283c <stop_cycle_count>
            cur_melvec = 0;
 800095e:	2200      	movs	r2, #0
            rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 8000960:	2314      	movs	r3, #20
            cur_melvec = 0;
 8000962:	f888 2000 	strb.w	r2, [r8]
            rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 8000966:	603b      	str	r3, [r7, #0]
}
 8000968:	b00b      	add	sp, #44	@ 0x2c
 800096a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				STOP_CYCLE_COUNT_THRESHOLD("Hard Full Threshold");
 800096e:	4809      	ldr	r0, [pc, #36]	@ (8000994 <HAL_ADC_ConvHalfCpltCallback+0xe4>)
 8000970:	f001 ff64 	bl	800283c <stop_cycle_count>
				send_spectrogram();
 8000974:	f7ff febc 	bl	80006f0 <send_spectrogram>
 8000978:	e7f1      	b.n	800095e <HAL_ADC_ConvHalfCpltCallback+0xae>
 800097a:	bf00      	nop
 800097c:	20000534 	.word	0x20000534
 8000980:	20000c60 	.word	0x20000c60
 8000984:	20000c64 	.word	0x20000c64
 8000988:	20000860 	.word	0x20000860
 800098c:	2000053c 	.word	0x2000053c
 8000990:	08008768 	.word	0x08008768
 8000994:	08008754 	.word	0x08008754
 8000998:	2000085c 	.word	0x2000085c
 800099c:	00000000 	.word	0x00000000

080009a0 <MX_AES_Init>:
/* AES init function */
void MX_AES_Init(void)
{

  /* USER CODE BEGIN AES_Init 0 */
  __HAL_RCC_AES_CLK_ENABLE();
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_AES_Init+0x60>)

  // only possible configuration for CMAC
  //hcryp.Init.OperatingMode = CRYP_ALGOMODE_TAG_GENERATION;

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80009a2:	4818      	ldr	r0, [pc, #96]	@ (8000a04 <MX_AES_Init+0x64>)
  __HAL_RCC_AES_CLK_ENABLE();
 80009a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  hcryp.Instance = AES;
 80009a6:	4918      	ldr	r1, [pc, #96]	@ (8000a08 <MX_AES_Init+0x68>)
{
 80009a8:	b510      	push	{r4, lr}
  __HAL_RCC_AES_CLK_ENABLE();
 80009aa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80009ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 80009b0:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 80009f0 <MX_AES_Init+0x50>
  __HAL_RCC_AES_CLK_ENABLE();
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
  hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
  hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <MX_AES_Init+0x6c>)
  hcryp.Instance = AES;
 80009b8:	6001      	str	r1, [r0, #0]
{
 80009ba:	b082      	sub	sp, #8
  __HAL_RCC_AES_CLK_ENABLE();
 80009bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 80009c0:	ed80 7b02 	vstr	d7, [r0, #8]
 80009c4:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80009f8 <MX_AES_Init+0x58>
  __HAL_RCC_AES_CLK_ENABLE();
 80009c8:	9301      	str	r3, [sp, #4]
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_AES_Init+0x70>)
  __HAL_RCC_AES_CLK_ENABLE();
 80009cc:	9c01      	ldr	r4, [sp, #4]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 80009ce:	2100      	movs	r1, #0
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 80009d0:	ed80 7b04 	vstr	d7, [r0, #16]
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 80009d4:	e9c0 2308 	strd	r2, r3, [r0, #32]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 80009d8:	6181      	str	r1, [r0, #24]
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80009da:	f002 fde3 	bl	80035a4 <HAL_CRYP_Init>
 80009de:	b908      	cbnz	r0, 80009e4 <MX_AES_Init+0x44>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80009e0:	b002      	add	sp, #8
 80009e2:	bd10      	pop	{r4, pc}
 80009e4:	b002      	add	sp, #8
 80009e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80009ea:	f000 b9e3 	b.w	8000db4 <Error_Handler>
 80009ee:	bf00      	nop
 80009f0:	00000004 	.word	0x00000004
	...
 80009fc:	00000020 	.word	0x00000020
 8000a00:	40021000 	.word	0x40021000
 8000a04:	20001468 	.word	0x20001468
 8000a08:	50060000 	.word	0x50060000
 8000a0c:	08008798 	.word	0x08008798
 8000a10:	08008788 	.word	0x08008788

08000a14 <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 8000a14:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <HAL_CRYP_MspInit+0x2c>)
 8000a16:	6802      	ldr	r2, [r0, #0]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d000      	beq.n	8000a1e <HAL_CRYP_MspInit+0xa>
 8000a1c:	4770      	bx	lr
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8000a1e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 8000a22:	f5a3 337c 	sub.w	r3, r3, #258048	@ 0x3f000
{
 8000a26:	b082      	sub	sp, #8
    __HAL_RCC_AES_CLK_ENABLE();
 8000a28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a2a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000a2e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8000a3a:	b002      	add	sp, #8
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	50060000 	.word	0x50060000

08000a44 <HAL_CRYP_MspDeInit>:

void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <HAL_CRYP_MspDeInit+0x18>)
 8000a46:	6802      	ldr	r2, [r0, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d000      	beq.n	8000a4e <HAL_CRYP_MspDeInit+0xa>
    __HAL_RCC_AES_CLK_DISABLE();
  /* USER CODE BEGIN AES_MspDeInit 1 */

  /* USER CODE END AES_MspDeInit 1 */
  }
}
 8000a4c:	4770      	bx	lr
    __HAL_RCC_AES_CLK_DISABLE();
 8000a4e:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <HAL_CRYP_MspDeInit+0x1c>)
 8000a50:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8000a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	50060000 	.word	0x50060000
 8000a60:	40021000 	.word	0x40021000

08000a64 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a64:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <MX_DMA_Init+0x2c>)
{
 8000a66:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a68:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000a6a:	f041 0101 	orr.w	r1, r1, #1
 8000a6e:	6499      	str	r1, [r3, #72]	@ 0x48
 8000a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 8000a72:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000a74:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a76:	400b      	ands	r3, r1
 8000a78:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000a7a:	200b      	movs	r0, #11
 8000a7c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000a80:	f002 fd02 	bl	8003488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a84:	200b      	movs	r0, #11

}
 8000a86:	b003      	add	sp, #12
 8000a88:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a8c:	f002 bd38 	b.w	8003500 <HAL_NVIC_EnableIRQ>
 8000a90:	40021000 	.word	0x40021000

08000a94 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	2400      	movs	r4, #0
{
 8000a9a:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000aa0:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa4:	4b98      	ldr	r3, [pc, #608]	@ (8000d08 <MX_GPIO_Init+0x274>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8000aaa:	4f98      	ldr	r7, [pc, #608]	@ (8000d0c <MX_GPIO_Init+0x278>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8000aac:	f8df a26c 	ldr.w	sl, [pc, #620]	@ 8000d1c <MX_GPIO_Init+0x288>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8000ab0:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 8000d20 <MX_GPIO_Init+0x28c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ab4:	f8df 826c 	ldr.w	r8, [pc, #620]	@ 8000d24 <MX_GPIO_Init+0x290>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ab8:	4e95      	ldr	r6, [pc, #596]	@ (8000d10 <MX_GPIO_Init+0x27c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aba:	f042 0210 	orr.w	r2, r2, #16
 8000abe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ac0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ac2:	f002 0210 	and.w	r2, r2, #16
 8000ac6:	9200      	str	r2, [sp, #0]
 8000ac8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000acc:	f042 0204 	orr.w	r2, r2, #4
 8000ad0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ad2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ad4:	f002 0204 	and.w	r2, r2, #4
 8000ad8:	9201      	str	r2, [sp, #4]
 8000ada:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000adc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ade:	f042 0220 	orr.w	r2, r2, #32
 8000ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ae4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ae6:	f002 0220 	and.w	r2, r2, #32
 8000aea:	9202      	str	r2, [sp, #8]
 8000aec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000af0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000af4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000af6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000af8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000afc:	9203      	str	r2, [sp, #12]
 8000afe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b02:	f042 0201 	orr.w	r2, r2, #1
 8000b06:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b0a:	f002 0201 	and.w	r2, r2, #1
 8000b0e:	9204      	str	r2, [sp, #16]
 8000b10:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b14:	f042 0202 	orr.w	r2, r2, #2
 8000b18:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b1c:	f002 0202 	and.w	r2, r2, #2
 8000b20:	9205      	str	r2, [sp, #20]
 8000b22:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b2a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b2e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000b32:	9206      	str	r2, [sp, #24]
 8000b34:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b38:	f042 0208 	orr.w	r2, r2, #8
 8000b3c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b40:	f003 0308 	and.w	r3, r3, #8
 8000b44:	9307      	str	r3, [sp, #28]
 8000b46:	9b07      	ldr	r3, [sp, #28]
  HAL_PWREx_EnableVddIO2();
 8000b48:	f003 fa4c 	bl	8003fe4 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4638      	mov	r0, r7
 8000b52:	f003 f9ed 	bl	8003f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8000b56:	4650      	mov	r0, sl
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b5e:	f003 f9e7 	bl	8003f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8000b62:	4648      	mov	r0, r9
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b6a:	f003 f9e1 	bl	8003f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b6e:	4622      	mov	r2, r4
 8000b70:	4640      	mov	r0, r8
 8000b72:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000b76:	f003 f9db 	bl	8003f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b7a:	4622      	mov	r2, r4
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	2140      	movs	r1, #64	@ 0x40
 8000b80:	f003 f9d6 	bl	8003f30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b84:	a908      	add	r1, sp, #32
 8000b86:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000b88:	f24d 72ff 	movw	r2, #55295	@ 0xd7ff
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b94:	f003 f8a8 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b98:	a908      	add	r1, sp, #32
 8000b9a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ba0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ba4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f003 f89d 	bl	8003ce8 <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bae:	a908      	add	r1, sp, #32
 8000bb0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bb2:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bbe:	f003 f893 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000bc2:	2209      	movs	r2, #9
 8000bc4:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bc6:	a908      	add	r1, sp, #32
 8000bc8:	4852      	ldr	r0, [pc, #328]	@ (8000d14 <MX_GPIO_Init+0x280>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 8000bcc:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000bce:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	f04f 0b03 	mov.w	fp, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bd6:	f003 f887 	bl	8003ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000bda:	a908      	add	r1, sp, #32
 8000bdc:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	e9cd 5508 	strd	r5, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f003 f87f 	bl	8003ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	4638      	mov	r0, r7
 8000bec:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000bee:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f003 f875 	bl	8003ce8 <HAL_GPIO_Init>
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000c00:	f248 0236 	movw	r2, #32822	@ 0x8036
 8000c04:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000c0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f003 f86a 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000c14:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000c16:	2208      	movs	r2, #8
 8000c18:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000c20:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f003 f85f 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c2a:	f64b 7277 	movw	r2, #49015	@ 0xbf77
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	a908      	add	r1, sp, #32
 8000c30:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c32:	2303      	movs	r3, #3
 8000c34:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f003 f855 	bl	8003ce8 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	4650      	mov	r0, sl
 8000c40:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8000c42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c46:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f003 f84b 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c52:	f64f 621f 	movw	r2, #65055	@ 0xfe1f
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c56:	a908      	add	r1, sp, #32
 8000c58:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c62:	f003 f841 	bl	8003ce8 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c66:	4648      	mov	r0, r9
 8000c68:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8000c6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c6e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f003 f837 	bl	8003ce8 <HAL_GPIO_Init>
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	4640      	mov	r0, r8
 8000c7c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c7e:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000c82:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f003 f82d 	bl	8003ce8 <HAL_GPIO_Init>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c94:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	4820      	ldr	r0, [pc, #128]	@ (8000d18 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f003 f823 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ca2:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	a908      	add	r1, sp, #32
 8000ca6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f003 f81a 	bl	8003ce8 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	a908      	add	r1, sp, #32
 8000cb6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cb8:	2340      	movs	r3, #64	@ 0x40
 8000cba:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f003 f811 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cc6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000cca:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f003 f803 	bl	8003ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ce2:	4622      	mov	r2, r4
 8000ce4:	4621      	mov	r1, r4
 8000ce6:	2009      	movs	r0, #9
 8000ce8:	f002 fbce 	bl	8003488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cec:	2009      	movs	r0, #9
 8000cee:	f002 fc07 	bl	8003500 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	2028      	movs	r0, #40	@ 0x28
 8000cf8:	f002 fbc6 	bl	8003488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cfc:	2028      	movs	r0, #40	@ 0x28
 8000cfe:	f002 fbff 	bl	8003500 <HAL_NVIC_EnableIRQ>

}
 8000d02:	b00f      	add	sp, #60	@ 0x3c
 8000d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48000800 	.word	0x48000800
 8000d10:	48001800 	.word	0x48001800
 8000d14:	48001c00 	.word	0x48001c00
 8000d18:	48000c00 	.word	0x48000c00
 8000d1c:	48001400 	.word	0x48001400
 8000d20:	48001000 	.word	0x48001000
 8000d24:	48000400 	.word	0x48000400

08000d28 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin) {
 8000d28:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8000d2c:	d002      	beq.n	8000d34 <HAL_GPIO_EXTI_Callback+0xc>
		btn_press = 1;
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
 8000d2e:	2808      	cmp	r0, #8
 8000d30:	d004      	beq.n	8000d3c <HAL_GPIO_EXTI_Callback+0x14>
		S2LP_IRQ_Handler();
}
 8000d32:	4770      	bx	lr
		btn_press = 1;
 8000d34:	4b02      	ldr	r3, [pc, #8]	@ (8000d40 <HAL_GPIO_EXTI_Callback+0x18>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	4770      	bx	lr
		S2LP_IRQ_Handler();
 8000d3c:	f001 ba8a 	b.w	8002254 <S2LP_IRQ_Handler>
 8000d40:	200014c8 	.word	0x200014c8

08000d44 <run>:
	}
}

void run(void)
{
	btn_press = 0;
 8000d44:	4c18      	ldr	r4, [pc, #96]	@ (8000da8 <run+0x64>)
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 8000d46:	4e19      	ldr	r6, [pc, #100]	@ (8000dac <run+0x68>)
    #if NO_BUTTON == 1
      acquire_and_send_packet();
    #else
      // Wait for the button press
      while (!btn_press) {
        HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000d48:	4d19      	ldr	r5, [pc, #100]	@ (8000db0 <run+0x6c>)
{
 8000d4a:	b580      	push	{r7, lr}
	btn_press = 0;
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	7027      	strb	r7, [r4, #0]
      while (!btn_press) {
 8000d50:	7823      	ldrb	r3, [r4, #0]
 8000d52:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8000d56:	b9a3      	cbnz	r3, 8000d82 <run+0x3e>
        HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f003 f8e7 	bl	8003f30 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000d62:	20c8      	movs	r0, #200	@ 0xc8
 8000d64:	f001 fe14 	bl	8002990 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000d68:	4642      	mov	r2, r8
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	2180      	movs	r1, #128	@ 0x80
 8000d6e:	f003 f8df 	bl	8003f30 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000d72:	20c8      	movs	r0, #200	@ 0xc8
 8000d74:	f001 fe0c 	bl	8002990 <HAL_Delay>
      while (!btn_press) {
 8000d78:	7823      	ldrb	r3, [r4, #0]
 8000d7a:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0ea      	beq.n	8000d58 <run+0x14>
      }
      btn_press = 0;
 8000d82:	7027      	strb	r7, [r4, #0]
      #if (CONTINUOUS_ACQ == 1)
        // Continuous acquisition while the button is not pressed
        while (!btn_press) {
 8000d84:	7823      	ldrb	r3, [r4, #0]
 8000d86:	b96b      	cbnz	r3, 8000da4 <run+0x60>
	if (StartADCAcq(N_MELVECS) != HAL_OK) {
 8000d88:	2014      	movs	r0, #20
 8000d8a:	f7ff fcfb 	bl	8000784 <StartADCAcq>
 8000d8e:	b928      	cbnz	r0, 8000d9c <run+0x58>
	while (!IsADCFinished()) {
 8000d90:	f7ff fd10 	bl	80007b4 <IsADCFinished>
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d1f5      	bne.n	8000d84 <run+0x40>
		__WFI();
 8000d98:	bf30      	wfi
 8000d9a:	e7f9      	b.n	8000d90 <run+0x4c>
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	f006 fce7 	bl	8007770 <puts>
 8000da2:	e7f5      	b.n	8000d90 <run+0x4c>
          acquire_and_send_packet();
        }
        btn_press = 0;
 8000da4:	7027      	strb	r7, [r4, #0]
      while (!btn_press) {
 8000da6:	e7d3      	b.n	8000d50 <run+0xc>
 8000da8:	200014c8 	.word	0x200014c8
 8000dac:	080087a8 	.word	0x080087a8
 8000db0:	48000400 	.word	0x48000400

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
 8000dba:	481a      	ldr	r0, [pc, #104]	@ (8000e24 <Error_Handler+0x70>)
 8000dbc:	4f1a      	ldr	r7, [pc, #104]	@ (8000e28 <Error_Handler+0x74>)
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000dbe:	4e1b      	ldr	r6, [pc, #108]	@ (8000e2c <Error_Handler+0x78>)
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000dc0:	4d1b      	ldr	r5, [pc, #108]	@ (8000e30 <Error_Handler+0x7c>)
  DEBUG_PRINT("Entering error Handler\r\n");
 8000dc2:	f006 fcd5 	bl	8007770 <puts>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000dc6:	2400      	movs	r4, #0
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dce:	4630      	mov	r0, r6
 8000dd0:	f003 f8ae 	bl	8003f30 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	9400      	str	r4, [sp, #0]
 8000dd8:	9900      	ldr	r1, [sp, #0]
 8000dda:	fba5 2303 	umull	r2, r3, r5, r3
 8000dde:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 8000de2:	ea4f 1293 	mov.w	r2, r3, lsr #6
 8000de6:	d205      	bcs.n	8000df4 <Error_Handler+0x40>
 8000de8:	9b00      	ldr	r3, [sp, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	9b00      	ldr	r3, [sp, #0]
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d3f9      	bcc.n	8000de8 <Error_Handler+0x34>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000df4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	f003 f898 	bl	8003f30 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	9401      	str	r4, [sp, #4]
 8000e04:	9a01      	ldr	r2, [sp, #4]
 8000e06:	fba5 1303 	umull	r1, r3, r5, r3
 8000e0a:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
 8000e0e:	ea4f 1193 	mov.w	r1, r3, lsr #6
 8000e12:	d2d9      	bcs.n	8000dc8 <Error_Handler+0x14>
 8000e14:	9b01      	ldr	r3, [sp, #4]
 8000e16:	3301      	adds	r3, #1
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	9b01      	ldr	r3, [sp, #4]
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d3f9      	bcc.n	8000e14 <Error_Handler+0x60>
 8000e20:	e7d2      	b.n	8000dc8 <Error_Handler+0x14>
 8000e22:	bf00      	nop
 8000e24:	080087c8 	.word	0x080087c8
 8000e28:	20000400 	.word	0x20000400
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	51eb851f 	.word	0x51eb851f
 8000e34:	00000000 	.word	0x00000000

08000e38 <SystemClock_Config>:
{
 8000e38:	b500      	push	{lr}
 8000e3a:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3c:	2244      	movs	r2, #68	@ 0x44
 8000e3e:	2100      	movs	r1, #0
 8000e40:	a806      	add	r0, sp, #24
 8000e42:	f006 fe29 	bl	8007a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e46:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e48:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000e50:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000e54:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e56:	f003 f885 	bl	8003f64 <HAL_PWREx_ControlVoltageScaling>
 8000e5a:	b9e0      	cbnz	r0, 8000e96 <SystemClock_Config+0x5e>
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e5c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8000ea0 <SystemClock_Config+0x68>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e60:	2210      	movs	r2, #16
 8000e62:	4603      	mov	r3, r0
 8000e64:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e66:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000e68:	22b0      	movs	r2, #176	@ 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e6a:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e6c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000e70:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e72:	f003 f95f 	bl	8004134 <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	b968      	cbnz	r0, 8000e96 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7a:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e80:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e84:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e88:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e8a:	f003 fc5f 	bl	800474c <HAL_RCC_ClockConfig>
 8000e8e:	b910      	cbnz	r0, 8000e96 <SystemClock_Config+0x5e>
}
 8000e90:	b019      	add	sp, #100	@ 0x64
 8000e92:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e96:	f7ff ff8d 	bl	8000db4 <Error_Handler>
 8000e9a:	bf00      	nop
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	00000001 	.word	0x00000001
 8000ea4:	00000000 	.word	0x00000000

08000ea8 <main>:
{
 8000ea8:	b508      	push	{r3, lr}
  HAL_Init();
 8000eaa:	f001 fd4f 	bl	800294c <HAL_Init>
  SystemClock_Config();
 8000eae:	f7ff ffc3 	bl	8000e38 <SystemClock_Config>
  MX_GPIO_Init();
 8000eb2:	f7ff fdef 	bl	8000a94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb6:	f7ff fdd5 	bl	8000a64 <MX_DMA_Init>
  MX_SPI1_Init();
 8000eba:	f001 fadf 	bl	800247c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000ebe:	f001 fbcf 	bl	8002660 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000ec2:	f7ff fb5d 	bl	8000580 <MX_ADC1_Init>
  MX_AES_Init();
 8000ec6:	f7ff fd6b 	bl	80009a0 <MX_AES_Init>
	  MX_LPUART1_UART_Init();
 8000eca:	f001 fc25 	bl	8002718 <MX_LPUART1_UART_Init>
  RetargetInit(&hlpuart1);
 8000ece:	4814      	ldr	r0, [pc, #80]	@ (8000f20 <main+0x78>)
 8000ed0:	f000 f8b8 	bl	8001044 <RetargetInit>
  DEBUG_PRINT("Hello world\r\n");
 8000ed4:	4813      	ldr	r0, [pc, #76]	@ (8000f24 <main+0x7c>)
 8000ed6:	f006 fc4b 	bl	8007770 <puts>
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 8000eda:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <main+0x80>)
 8000edc:	f001 f918 	bl	8002110 <S2LP_Init>
  if (err)  {
 8000ee0:	b128      	cbz	r0, 8000eee <main+0x46>
 8000ee2:	4601      	mov	r1, r0
	  DEBUG_PRINT("[S2LP] Error while initializing: %u\r\n", err);
 8000ee4:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <main+0x84>)
 8000ee6:	f006 fbdb 	bl	80076a0 <iprintf>
	  Error_Handler();
 8000eea:	f7ff ff63 	bl	8000db4 <Error_Handler>
	  DEBUG_PRINT("[S2LP] Init OK\r\n");
 8000eee:	4810      	ldr	r0, [pc, #64]	@ (8000f30 <main+0x88>)
 8000ef0:	f006 fc3e 	bl	8007770 <puts>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8000ef4:	480f      	ldr	r0, [pc, #60]	@ (8000f34 <main+0x8c>)
 8000ef6:	217f      	movs	r1, #127	@ 0x7f
 8000ef8:	f002 f9fa 	bl	80032f0 <HAL_ADCEx_Calibration_Start>
 8000efc:	b120      	cbz	r0, 8000f08 <main+0x60>
	  DEBUG_PRINT("Error while calibrating the ADC\r\n");
 8000efe:	480e      	ldr	r0, [pc, #56]	@ (8000f38 <main+0x90>)
 8000f00:	f006 fc36 	bl	8007770 <puts>
	  Error_Handler();
 8000f04:	f7ff ff56 	bl	8000db4 <Error_Handler>
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <main+0x94>)
 8000f0a:	f004 fbf5 	bl	80056f8 <HAL_TIM_Base_Start>
 8000f0e:	b120      	cbz	r0, 8000f1a <main+0x72>
	  DEBUG_PRINT("Error while enabling timer TIM3\r\n");
 8000f10:	480b      	ldr	r0, [pc, #44]	@ (8000f40 <main+0x98>)
 8000f12:	f006 fc2d 	bl	8007770 <puts>
	  Error_Handler();
 8000f16:	f7ff ff4d 	bl	8000db4 <Error_Handler>
  run();
 8000f1a:	f7ff ff13 	bl	8000d44 <run>
 8000f1e:	bf00      	nop
 8000f20:	200021a8 	.word	0x200021a8
 8000f24:	080087e0 	.word	0x080087e0
 8000f28:	200020f0 	.word	0x200020f0
 8000f2c:	080087f0 	.word	0x080087f0
 8000f30:	08008818 	.word	0x08008818
 8000f34:	200004cc 	.word	0x200004cc
 8000f38:	08008828 	.word	0x08008828
 8000f3c:	20002158 	.word	0x20002158
 8000f40:	0800884c 	.word	0x0800884c

08000f44 <tag_cbc_mac_hardware>:
 * @brief Calculate the tag of the packet using the hardware crypto module
 * @param tag : the tag to be calculated
 * @param msg : the message to be tagged
 * @param msg_len : the length of the message
 */
void tag_cbc_mac_hardware(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 8000f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    __ALIGN_BEGIN static uint8_t iv[16] __ALIGN_END = {0};
    // Allocate enough space for all blocks
    __ALIGN_BEGIN static uint8_t *tmp_out = NULL;
    
    // Calculate number of blocks needed (rounded up)
    size_t num_blocks = (msg_len + 15) / 16;
 8000f48:	f102 070f 	add.w	r7, r2, #15
void tag_cbc_mac_hardware(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	4606      	mov	r6, r0
    size_t total_size = num_blocks * 16;
    
    // Allocate memory for all blocks
    tmp_out = malloc(total_size);
 8000f50:	f027 000f 	bic.w	r0, r7, #15
void tag_cbc_mac_hardware(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 8000f54:	4615      	mov	r5, r2
 8000f56:	4688      	mov	r8, r1
    tmp_out = malloc(total_size);
 8000f58:	f006 fa22 	bl	80073a0 <malloc>
 8000f5c:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8000ff0 <tag_cbc_mac_hardware+0xac>
 8000f60:	f8c9 0000 	str.w	r0, [r9]
    if (tmp_out == NULL) {
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d037      	beq.n	8000fd8 <tag_cbc_mac_hardware+0x94>
        Error_Handler();
        return;
    }
    
    // Step 1: reset the AES peripheral
    if (HAL_CRYP_DeInit(&hcryp) != HAL_OK) {
 8000f68:	4c1e      	ldr	r4, [pc, #120]	@ (8000fe4 <tag_cbc_mac_hardware+0xa0>)
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f002 fbc8 	bl	8003700 <HAL_CRYP_DeInit>
 8000f70:	bb70      	cbnz	r0, 8000fd0 <tag_cbc_mac_hardware+0x8c>
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
    hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
    hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
    hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
    hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
    hcryp.Init.pKey = (uint8_t*)AES_Key;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <tag_cbc_mac_hardware+0xa4>)
 8000f74:	6223      	str	r3, [r4, #32]
    hcryp.Init.pInitVect = (uint8_t*)iv;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <tag_cbc_mac_hardware+0xa8>)
 8000f78:	6263      	str	r3, [r4, #36]	@ 0x24
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8000f82:	61a0      	str	r0, [r4, #24]
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000f84:	2200      	movs	r2, #0
 8000f86:	2320      	movs	r3, #32

    if (HAL_CRYP_Init(&hcryp) != HAL_OK) {
 8000f88:	4620      	mov	r0, r4
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000f8a:	e9c4 2304 	strd	r2, r3, [r4, #16]
    if (HAL_CRYP_Init(&hcryp) != HAL_OK) {
 8000f8e:	f002 fb09 	bl	80035a4 <HAL_CRYP_Init>
 8000f92:	b9e8      	cbnz	r0, 8000fd0 <tag_cbc_mac_hardware+0x8c>
        Error_Handler();
        return;
    }

    // Step 3: Perform CBC encryption with proper padding
    if (HAL_CRYP_AESCBC_Encrypt(&hcryp, (uint8_t *)msg, msg_len, tmp_out, 1000) != HAL_OK) {
 8000f94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	f8d9 3000 	ldr.w	r3, [r9]
 8000f9e:	b2aa      	uxth	r2, r5
 8000fa0:	4641      	mov	r1, r8
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f002 fbc8 	bl	8003738 <HAL_CRYP_AESCBC_Encrypt>
 8000fa8:	b990      	cbnz	r0, 8000fd0 <tag_cbc_mac_hardware+0x8c>
        Error_Handler();
        return;
    }

    // Step 4: Copy the last block as the MAC
    memcpy(tag, tmp_out + ((num_blocks - 1) * 16), 16);
 8000faa:	f8d9 0000 	ldr.w	r0, [r9]
 8000fae:	f027 070f 	bic.w	r7, r7, #15
 8000fb2:	3f10      	subs	r7, #16
 8000fb4:	19c3      	adds	r3, r0, r7
 8000fb6:	59c4      	ldr	r4, [r0, r7]
 8000fb8:	6859      	ldr	r1, [r3, #4]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	60f3      	str	r3, [r6, #12]
 8000fc0:	6034      	str	r4, [r6, #0]
 8000fc2:	6071      	str	r1, [r6, #4]
 8000fc4:	60b2      	str	r2, [r6, #8]
    
    // Clean up
    free(tmp_out);
}
 8000fc6:	b003      	add	sp, #12
 8000fc8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    free(tmp_out);
 8000fcc:	f006 b9f0 	b.w	80073b0 <free>
        free(tmp_out);
 8000fd0:	f8d9 0000 	ldr.w	r0, [r9]
 8000fd4:	f006 f9ec 	bl	80073b0 <free>
}
 8000fd8:	b003      	add	sp, #12
 8000fda:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Error_Handler();
 8000fde:	f7ff bee9 	b.w	8000db4 <Error_Handler>
 8000fe2:	bf00      	nop
 8000fe4:	20001468 	.word	0x20001468
 8000fe8:	08008870 	.word	0x08008870
 8000fec:	200014cc 	.word	0x200014cc
 8000ff0:	200014dc 	.word	0x200014dc

08000ff4 <make_packet>:

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	460c      	mov	r4, r1
 8000ff8:	4696      	mov	lr, r2
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
    // Initially, the whole packet header is set to 0s
    memset(packet, 0, PACKET_HEADER_LENGTH);
    // So is the tag
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8000ffa:	f104 0208 	add.w	r2, r4, #8
    memset(packet, 0, PACKET_HEADER_LENGTH);
 8000ffe:	f04f 0c00 	mov.w	ip, #0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001002:	f840 c002 	str.w	ip, [r0, r2]
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8001006:	4601      	mov	r1, r0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001008:	4410      	add	r0, r2
 800100a:	f8c0 c004 	str.w	ip, [r0, #4]
 800100e:	f8c0 c008 	str.w	ip, [r0, #8]
 8001012:	f8c0 c00c 	str.w	ip, [r0, #12]

	// TO DO :  replace the two previous command by properly

	// Set the reserved field to 0
	packet[0] = 0x00;
 8001016:	f881 c000 	strb.w	ip, [r1]
	packet[1] = sender_id;
	// Set the payload_length field
	packet[2] = (payload_len >> 8) & 0xFF;
	packet[3] = payload_len & 0xFF;
	// Set the packet_serial field
	packet[4] = (serial >> 24) & 0xFF;
 800101a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
	packet[5] = (serial >> 16) & 0xFF;
	packet[6] = (serial >> 8) & 0xFF;
	packet[7] = serial & 0xFF;
 800101e:	71cb      	strb	r3, [r1, #7]
	packet[4] = (serial >> 24) & 0xFF;
 8001020:	f881 c004 	strb.w	ip, [r1, #4]
	packet[5] = (serial >> 16) & 0xFF;
 8001024:	ea4f 4c13 	mov.w	ip, r3, lsr #16
	packet[6] = (serial >> 8) & 0xFF;
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	718b      	strb	r3, [r1, #6]
	packet[2] = (payload_len >> 8) & 0xFF;
 800102c:	0a23      	lsrs	r3, r4, #8
	packet[1] = sender_id;
 800102e:	f881 e001 	strb.w	lr, [r1, #1]
	packet[3] = payload_len & 0xFF;
 8001032:	70cc      	strb	r4, [r1, #3]
	packet[5] = (serial >> 16) & 0xFF;
 8001034:	f881 c005 	strb.w	ip, [r1, #5]
	packet[2] = (payload_len >> 8) & 0xFF;
 8001038:	708b      	strb	r3, [r1, #2]
	*/

	// For the tag field, you have to calculate the tag. The function call below is correct but
	// tag_cbc_mac function, calculating the tag, is not implemented.
	#if USE_CRYPTO == USE_HARDWARE_CRYPTO
    	tag_cbc_mac_hardware(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
 800103a:	f7ff ff83 	bl	8000f44 <tag_cbc_mac_hardware>
	#else
		tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
	#endif

    return packet_len;
}
 800103e:	f104 0018 	add.w	r0, r4, #24
 8001042:	bd10      	pop	{r4, pc}

08001044 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001044:	b430      	push	{r4, r5}
  gHuart = huart;

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <RetargetInit+0x1c>)
  gHuart = huart;
 8001048:	4906      	ldr	r1, [pc, #24]	@ (8001064 <RetargetInit+0x20>)
  setvbuf(stdout, NULL, _IONBF, 0);
 800104a:	681d      	ldr	r5, [r3, #0]
void RetargetInit(UART_HandleTypeDef *huart) {
 800104c:	4604      	mov	r4, r0
  setvbuf(stdout, NULL, _IONBF, 0);
 800104e:	2300      	movs	r3, #0
  gHuart = huart;
 8001050:	600c      	str	r4, [r1, #0]
  setvbuf(stdout, NULL, _IONBF, 0);
 8001052:	68a8      	ldr	r0, [r5, #8]
 8001054:	2202      	movs	r2, #2
}
 8001056:	bc30      	pop	{r4, r5}
  setvbuf(stdout, NULL, _IONBF, 0);
 8001058:	4619      	mov	r1, r3
 800105a:	f006 bb91 	b.w	8007780 <setvbuf>
 800105e:	bf00      	nop
 8001060:	20000418 	.word	0x20000418
 8001064:	200014e0 	.word	0x200014e0

08001068 <_isatty>:

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001068:	2802      	cmp	r0, #2
 800106a:	d801      	bhi.n	8001070 <_isatty+0x8>
    return 1;
 800106c:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 800106e:	4770      	bx	lr
int _isatty(int fd) {
 8001070:	b508      	push	{r3, lr}
  errno = EBADF;
 8001072:	f006 fd6f 	bl	8007b54 <__errno>
 8001076:	2309      	movs	r3, #9
 8001078:	6003      	str	r3, [r0, #0]
  return 0;
 800107a:	2000      	movs	r0, #0
}
 800107c:	bd08      	pop	{r3, pc}
 800107e:	bf00      	nop

08001080 <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001080:	3801      	subs	r0, #1
 8001082:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 8001084:	b510      	push	{r4, lr}
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001086:	d80c      	bhi.n	80010a2 <_write+0x22>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001088:	4614      	mov	r4, r2
 800108a:	4a09      	ldr	r2, [pc, #36]	@ (80010b0 <_write+0x30>)
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	6810      	ldr	r0, [r2, #0]
 8001092:	b2a2      	uxth	r2, r4
 8001094:	f004 fd1e 	bl	8005ad4 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
 8001098:	2800      	cmp	r0, #0
 800109a:	bf0c      	ite	eq
 800109c:	4620      	moveq	r0, r4
 800109e:	2005      	movne	r0, #5
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 80010a0:	bd10      	pop	{r4, pc}
  errno = EBADF;
 80010a2:	f006 fd57 	bl	8007b54 <__errno>
 80010a6:	2309      	movs	r3, #9
 80010a8:	6003      	str	r3, [r0, #0]
  return -1;
 80010aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80010ae:	bd10      	pop	{r4, pc}
 80010b0:	200014e0 	.word	0x200014e0

080010b4 <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80010b4:	2802      	cmp	r0, #2
 80010b6:	d801      	bhi.n	80010bc <_close+0x8>
    return 0;
 80010b8:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 80010ba:	4770      	bx	lr
int _close(int fd) {
 80010bc:	b508      	push	{r3, lr}
  errno = EBADF;
 80010be:	f006 fd49 	bl	8007b54 <__errno>
 80010c2:	2309      	movs	r3, #9
 80010c4:	6003      	str	r3, [r0, #0]
  return -1;
 80010c6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80010ca:	bd08      	pop	{r3, pc}

080010cc <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80010cc:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80010ce:	f006 fd41 	bl	8007b54 <__errno>
 80010d2:	2309      	movs	r3, #9
 80010d4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80010d6:	f04f 30ff 	mov.w	r0, #4294967295
 80010da:	bd08      	pop	{r3, pc}

080010dc <_read>:

int _read(int fd, char* ptr, int len) {
 80010dc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80010de:	b958      	cbnz	r0, 80010f8 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80010e0:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <_read+0x2c>)
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	6810      	ldr	r0, [r2, #0]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f004 fd63 	bl	8005bb4 <HAL_UART_Receive>
    if (hstatus == HAL_OK)
      return 1;
 80010ee:	2800      	cmp	r0, #0
 80010f0:	bf14      	ite	ne
 80010f2:	2005      	movne	r0, #5
 80010f4:	2001      	moveq	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 80010f6:	bd08      	pop	{r3, pc}
  errno = EBADF;
 80010f8:	f006 fd2c 	bl	8007b54 <__errno>
 80010fc:	2309      	movs	r3, #9
 80010fe:	6003      	str	r3, [r0, #0]
  return -1;
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001104:	bd08      	pop	{r3, pc}
 8001106:	bf00      	nop
 8001108:	200014e0 	.word	0x200014e0

0800110c <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800110c:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 800110e:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001110:	d804      	bhi.n	800111c <_fstat+0x10>
    st->st_mode = S_IFCHR;
 8001112:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001116:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8001118:	2000      	movs	r0, #0
 800111a:	bd08      	pop	{r3, pc}
  errno = EBADF;
 800111c:	f006 fd1a 	bl	8007b54 <__errno>
 8001120:	2309      	movs	r3, #9
 8001122:	6003      	str	r3, [r0, #0]
}
 8001124:	2000      	movs	r0, #0
 8001126:	bd08      	pop	{r3, pc}

08001128 <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af02      	add	r7, sp, #8
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	733b      	strb	r3, [r7, #12]
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	737b      	strb	r3, [r7, #13]
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2101      	movs	r1, #1
 8001144:	480f      	ldr	r0, [pc, #60]	@ (8001184 <S2LP_Command+0x5c>)
 8001146:	f002 fef3 	bl	8003f30 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <S2LP_Command+0x60>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	f107 0208 	add.w	r2, r7, #8
 8001152:	f107 010c 	add.w	r1, r7, #12
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2302      	movs	r3, #2
 800115e:	f004 f8a9 	bl	80052b4 <HAL_SPI_TransmitReceive>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2101      	movs	r1, #1
 800116a:	4806      	ldr	r0, [pc, #24]	@ (8001184 <S2LP_Command+0x5c>)
 800116c:	f002 fee0 	bl	8003f30 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001170:	b662      	cpsie	i
}
 8001172:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 8001174:	893a      	ldrh	r2, [r7, #8]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	801a      	strh	r2, [r3, #0]
	return err;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	48000800 	.word	0x48000800
 8001188:	200014e8 	.word	0x200014e8

0800118c <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af02      	add	r7, sp, #8
 8001192:	4603      	mov	r3, r0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 800119a:	2301      	movs	r3, #1
 800119c:	753b      	strb	r3, [r7, #20]
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	757b      	strb	r3, [r7, #21]
 80011a2:	2300      	movs	r3, #0
 80011a4:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 80011a6:	b672      	cpsid	i
}
 80011a8:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2101      	movs	r1, #1
 80011ae:	4814      	ldr	r0, [pc, #80]	@ (8001200 <S2LP_ReadReg+0x74>)
 80011b0:	f002 febe 	bl	8003f30 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <S2LP_ReadReg+0x78>)
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	f107 0210 	add.w	r2, r7, #16
 80011bc:	f107 0114 	add.w	r1, r7, #20
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2303      	movs	r3, #3
 80011c8:	f004 f874 	bl	80052b4 <HAL_SPI_TransmitReceive>
 80011cc:	4603      	mov	r3, r0
 80011ce:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2101      	movs	r1, #1
 80011d4:	480a      	ldr	r0, [pc, #40]	@ (8001200 <S2LP_ReadReg+0x74>)
 80011d6:	f002 feab 	bl	8003f30 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80011da:	b662      	cpsie	i
}
 80011dc:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 80011e4:	8a3a      	ldrh	r2, [r7, #16]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 80011f0:	7cba      	ldrb	r2, [r7, #18]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	701a      	strb	r2, [r3, #0]
	return err;
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	48000800 	.word	0x48000800
 8001204:	200014e8 	.word	0x200014e8

08001208 <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	603a      	str	r2, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	460b      	mov	r3, r1
 8001216:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 8001218:	2300      	movs	r3, #0
 800121a:	733b      	strb	r3, [r7, #12]
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	737b      	strb	r3, [r7, #13]
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2101      	movs	r1, #1
 800122c:	4811      	ldr	r0, [pc, #68]	@ (8001274 <S2LP_WriteReg+0x6c>)
 800122e:	f002 fe7f 	bl	8003f30 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <S2LP_WriteReg+0x70>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f107 0208 	add.w	r2, r7, #8
 800123a:	f107 010c 	add.w	r1, r7, #12
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2303      	movs	r3, #3
 8001246:	f004 f835 	bl	80052b4 <HAL_SPI_TransmitReceive>
 800124a:	4603      	mov	r3, r0
 800124c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2101      	movs	r1, #1
 8001252:	4808      	ldr	r0, [pc, #32]	@ (8001274 <S2LP_WriteReg+0x6c>)
 8001254:	f002 fe6c 	bl	8003f30 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001258:	b662      	cpsie	i
}
 800125a:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 8001262:	893a      	ldrh	r2, [r7, #8]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	801a      	strh	r2, [r3, #0]
	return err;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	48000800 	.word	0x48000800
 8001278:	200014e8 	.word	0x200014e8

0800127c <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b08d      	sub	sp, #52	@ 0x34
 8001280:	af02      	add	r7, sp, #8
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	460b      	mov	r3, r1
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 800128e:	23ff      	movs	r3, #255	@ 0xff
 8001290:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 8001292:	7afa      	ldrb	r2, [r7, #11]
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	3302      	adds	r3, #2
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	4618      	mov	r0, r3
 800129e:	f006 fc86 	bl	8007bae <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 80012a2:	b672      	cpsid	i
}
 80012a4:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2101      	movs	r1, #1
 80012aa:	4814      	ldr	r0, [pc, #80]	@ (80012fc <S2LP_WriteTxFIFO+0x80>)
 80012ac:	f002 fe40 	bl	8003f30 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <S2LP_WriteTxFIFO+0x84>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	3302      	adds	r3, #2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	f107 0210 	add.w	r2, r7, #16
 80012c0:	f107 011c 	add.w	r1, r7, #28
 80012c4:	f04f 34ff 	mov.w	r4, #4294967295
 80012c8:	9400      	str	r4, [sp, #0]
 80012ca:	f003 fff3 	bl	80052b4 <HAL_SPI_TransmitReceive>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2101      	movs	r1, #1
 80012d8:	4808      	ldr	r0, [pc, #32]	@ (80012fc <S2LP_WriteTxFIFO+0x80>)
 80012da:	f002 fe29 	bl	8003f30 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80012de:	b662      	cpsie	i
}
 80012e0:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 80012e8:	8a3a      	ldrh	r2, [r7, #16]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	801a      	strh	r2, [r3, #0]
	return err;
 80012ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	372c      	adds	r7, #44	@ 0x2c
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd90      	pop	{r4, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	48000800 	.word	0x48000800
 8001300:	200014e8 	.word	0x200014e8

08001304 <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4619      	mov	r1, r3
 8001316:	2072      	movs	r0, #114	@ 0x72
 8001318:	f7ff ff06 	bl	8001128 <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 800131c:	7b7b      	ldrb	r3, [r7, #13]
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d004      	beq.n	8001332 <S2LP_Send+0x2e>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
 8001328:	4864      	ldr	r0, [pc, #400]	@ (80014bc <S2LP_Send+0x1b8>)
 800132a:	f006 fa21 	bl	8007770 <puts>
		return HAL_BUSY;
 800132e:	2302      	movs	r3, #2
 8001330:	e0c0      	b.n	80014b4 <S2LP_Send+0x1b0>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 8001332:	4b63      	ldr	r3, [pc, #396]	@ (80014c0 <S2LP_Send+0x1bc>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 8001338:	4b62      	ldr	r3, [pc, #392]	@ (80014c4 <S2LP_Send+0x1c0>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 800133e:	4b62      	ldr	r3, [pc, #392]	@ (80014c8 <S2LP_Send+0x1c4>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	0a1b      	lsrs	r3, r3, #8
 8001348:	b29b      	uxth	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2200      	movs	r2, #0
 800134e:	4619      	mov	r1, r3
 8001350:	2031      	movs	r0, #49	@ 0x31
 8001352:	f7ff ff59 	bl	8001208 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2200      	movs	r2, #0
 800135c:	4619      	mov	r1, r3
 800135e:	2032      	movs	r0, #50	@ 0x32
 8001360:	f7ff ff52 	bl	8001208 <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001364:	e00f      	b.n	8001386 <S2LP_Send+0x82>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	4619      	mov	r1, r3
 800136c:	2066      	movs	r0, #102	@ 0x66
 800136e:	f7ff fedb 	bl	8001128 <S2LP_Command>
 8001372:	4603      	mov	r3, r0
 8001374:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <S2LP_Send+0x82>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
 800137c:	4853      	ldr	r0, [pc, #332]	@ (80014cc <S2LP_Send+0x1c8>)
 800137e:	f006 f9f7 	bl	8007770 <puts>
			return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e096      	b.n	80014b4 <S2LP_Send+0x1b0>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001386:	7b7b      	ldrb	r3, [r7, #13]
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b18      	cmp	r3, #24
 8001390:	d1e9      	bne.n	8001366 <S2LP_Send+0x62>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	08db      	lsrs	r3, r3, #3
 800139a:	b29b      	uxth	r3, r3
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	f002 0207 	and.w	r2, r2, #7
 80013a2:	b292      	uxth	r2, r2
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	bf14      	ite	ne
 80013a8:	2201      	movne	r2, #1
 80013aa:	2200      	moveq	r2, #0
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	4413      	add	r3, r2
 80013b0:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 80013b2:	2310      	movs	r3, #16
 80013b4:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	827b      	strh	r3, [r7, #18]
 80013ba:	e063      	b.n	8001484 <S2LP_Send+0x180>
		if (underflow) {
 80013bc:	4b41      	ldr	r3, [pc, #260]	@ (80014c4 <S2LP_Send+0x1c0>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d02f      	beq.n	8001426 <S2LP_Send+0x122>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
 80013c6:	4842      	ldr	r0, [pc, #264]	@ (80014d0 <S2LP_Send+0x1cc>)
 80013c8:	f006 f9d2 	bl	8007770 <puts>
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	461a      	mov	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fed9 	bl	800118c <S2LP_ReadReg>
 80013da:	4603      	mov	r3, r0
 80013dc:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d105      	bne.n	80013f0 <S2LP_Send+0xec>
				S2LP_PrintStatus(&radio_status);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 f879 	bl	80014e0 <S2LP_PrintStatus>
 80013ee:	e002      	b.n	80013f6 <S2LP_Send+0xf2>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
 80013f0:	4838      	ldr	r0, [pc, #224]	@ (80014d4 <S2LP_Send+0x1d0>)
 80013f2:	f006 f9bd 	bl	8007770 <puts>
			}
			return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e05c      	b.n	80014b4 <S2LP_Send+0x1b0>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <S2LP_Send+0x10c>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4619      	mov	r1, r3
 8001406:	2060      	movs	r0, #96	@ 0x60
 8001408:	f7ff fe8e 	bl	8001128 <S2LP_Command>
				sending = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	75fb      	strb	r3, [r7, #23]
			}

			__WFI();
 8001410:	bf30      	wfi
			if (fifo_almost_empty) {
 8001412:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <S2LP_Send+0x1c4>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <S2LP_Send+0x122>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 800141c:	230c      	movs	r3, #12
 800141e:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 8001420:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <S2LP_Send+0x1c4>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 8001426:	8abb      	ldrh	r3, [r7, #20]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e6      	beq.n	80013fa <S2LP_Send+0xf6>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 800142c:	8a7a      	ldrh	r2, [r7, #18]
 800142e:	8a3b      	ldrh	r3, [r7, #16]
 8001430:	3b01      	subs	r3, #1
 8001432:	429a      	cmp	r2, r3
 8001434:	d109      	bne.n	800144a <S2LP_Send+0x146>
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	8a3b      	ldrh	r3, [r7, #16]
 800143c:	3b01      	subs	r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	e000      	b.n	800144c <S2LP_Send+0x148>
 800144a:	2308      	movs	r3, #8
 800144c:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 800144e:	8a7b      	ldrh	r3, [r7, #18]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	461a      	mov	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	f107 020c 	add.w	r2, r7, #12
 800145c:	7bf9      	ldrb	r1, [r7, #15]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff0c 	bl	800127c <S2LP_WriteTxFIFO>
 8001464:	4603      	mov	r3, r0
 8001466:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d004      	beq.n	8001478 <S2LP_Send+0x174>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
 800146e:	481a      	ldr	r0, [pc, #104]	@ (80014d8 <S2LP_Send+0x1d4>)
 8001470:	f006 f97e 	bl	8007770 <puts>
			return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e01d      	b.n	80014b4 <S2LP_Send+0x1b0>
		}
		free_chunks--;
 8001478:	8abb      	ldrh	r3, [r7, #20]
 800147a:	3b01      	subs	r3, #1
 800147c:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 800147e:	8a7b      	ldrh	r3, [r7, #18]
 8001480:	3301      	adds	r3, #1
 8001482:	827b      	strh	r3, [r7, #18]
 8001484:	8a7a      	ldrh	r2, [r7, #18]
 8001486:	8a3b      	ldrh	r3, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d397      	bcc.n	80013bc <S2LP_Send+0xb8>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d107      	bne.n	80014a2 <S2LP_Send+0x19e>
		S2LP_Command(CMD_TX, &radio_status);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4619      	mov	r1, r3
 8001498:	2060      	movs	r0, #96	@ 0x60
 800149a:	f7ff fe45 	bl	8001128 <S2LP_Command>
	}

	while (!packet_sent) {
 800149e:	e000      	b.n	80014a2 <S2LP_Send+0x19e>
		__WFI(); // wait until packet has been fully transmitted
 80014a0:	bf30      	wfi
	while (!packet_sent) {
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <S2LP_Send+0x1bc>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f9      	beq.n	80014a0 <S2LP_Send+0x19c>
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
 80014ac:	480b      	ldr	r0, [pc, #44]	@ (80014dc <S2LP_Send+0x1d8>)
 80014ae:	f006 f95f 	bl	8007770 <puts>
	return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	08008478 	.word	0x08008478
 80014c0:	200014e4 	.word	0x200014e4
 80014c4:	200014e6 	.word	0x200014e6
 80014c8:	200014e5 	.word	0x200014e5
 80014cc:	0800849c 	.word	0x0800849c
 80014d0:	080084c0 	.word	0x080084c0
 80014d4:	080084f0 	.word	0x080084f0
 80014d8:	08008520 	.word	0x08008520
 80014dc:	08008544 	.word	0x08008544

080014e0 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
 80014e8:	486f      	ldr	r0, [pc, #444]	@ (80016a8 <S2LP_PrintStatus+0x1c8>)
 80014ea:	f006 f941 	bl	8007770 <puts>
	DEBUG_PRINT("  MC_STATE: ");
 80014ee:	486f      	ldr	r0, [pc, #444]	@ (80016ac <S2LP_PrintStatus+0x1cc>)
 80014f0:	f006 f8d6 	bl	80076a0 <iprintf>
	switch (status->MC_STATE) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b5c      	cmp	r3, #92	@ 0x5c
 8001500:	f000 808f 	beq.w	8001622 <S2LP_PrintStatus+0x142>
 8001504:	2b5c      	cmp	r3, #92	@ 0x5c
 8001506:	f300 8094 	bgt.w	8001632 <S2LP_PrintStatus+0x152>
 800150a:	2b30      	cmp	r3, #48	@ 0x30
 800150c:	dc6a      	bgt.n	80015e4 <S2LP_PrintStatus+0x104>
 800150e:	2b00      	cmp	r3, #0
 8001510:	f2c0 808f 	blt.w	8001632 <S2LP_PrintStatus+0x152>
 8001514:	2b30      	cmp	r3, #48	@ 0x30
 8001516:	f200 808c 	bhi.w	8001632 <S2LP_PrintStatus+0x152>
 800151a:	a201      	add	r2, pc, #4	@ (adr r2, 8001520 <S2LP_PrintStatus+0x40>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	080015eb 	.word	0x080015eb
 8001524:	08001603 	.word	0x08001603
 8001528:	080015f3 	.word	0x080015f3
 800152c:	080015fb 	.word	0x080015fb
 8001530:	08001633 	.word	0x08001633
 8001534:	08001633 	.word	0x08001633
 8001538:	08001633 	.word	0x08001633
 800153c:	08001633 	.word	0x08001633
 8001540:	08001633 	.word	0x08001633
 8001544:	08001633 	.word	0x08001633
 8001548:	08001633 	.word	0x08001633
 800154c:	08001633 	.word	0x08001633
 8001550:	0800160b 	.word	0x0800160b
 8001554:	08001633 	.word	0x08001633
 8001558:	08001633 	.word	0x08001633
 800155c:	08001633 	.word	0x08001633
 8001560:	08001633 	.word	0x08001633
 8001564:	08001633 	.word	0x08001633
 8001568:	08001633 	.word	0x08001633
 800156c:	08001633 	.word	0x08001633
 8001570:	0800161b 	.word	0x0800161b
 8001574:	08001633 	.word	0x08001633
 8001578:	08001633 	.word	0x08001633
 800157c:	08001633 	.word	0x08001633
 8001580:	08001633 	.word	0x08001633
 8001584:	08001633 	.word	0x08001633
 8001588:	08001633 	.word	0x08001633
 800158c:	08001633 	.word	0x08001633
 8001590:	08001633 	.word	0x08001633
 8001594:	08001633 	.word	0x08001633
 8001598:	08001633 	.word	0x08001633
 800159c:	08001633 	.word	0x08001633
 80015a0:	08001633 	.word	0x08001633
 80015a4:	08001633 	.word	0x08001633
 80015a8:	08001633 	.word	0x08001633
 80015ac:	08001633 	.word	0x08001633
 80015b0:	08001633 	.word	0x08001633
 80015b4:	08001633 	.word	0x08001633
 80015b8:	08001633 	.word	0x08001633
 80015bc:	08001633 	.word	0x08001633
 80015c0:	08001633 	.word	0x08001633
 80015c4:	08001633 	.word	0x08001633
 80015c8:	08001633 	.word	0x08001633
 80015cc:	08001633 	.word	0x08001633
 80015d0:	08001633 	.word	0x08001633
 80015d4:	08001633 	.word	0x08001633
 80015d8:	08001633 	.word	0x08001633
 80015dc:	08001633 	.word	0x08001633
 80015e0:	08001613 	.word	0x08001613
 80015e4:	2b50      	cmp	r3, #80	@ 0x50
 80015e6:	d020      	beq.n	800162a <S2LP_PrintStatus+0x14a>
 80015e8:	e023      	b.n	8001632 <S2LP_PrintStatus+0x152>
		case (MC_STATE_READY):
			DEBUG_PRINT("READY");
 80015ea:	4831      	ldr	r0, [pc, #196]	@ (80016b0 <S2LP_PrintStatus+0x1d0>)
 80015ec:	f006 f858 	bl	80076a0 <iprintf>
			break;
 80015f0:	e023      	b.n	800163a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_STANDBY):
			DEBUG_PRINT("STANDBY");
 80015f2:	4830      	ldr	r0, [pc, #192]	@ (80016b4 <S2LP_PrintStatus+0x1d4>)
 80015f4:	f006 f854 	bl	80076a0 <iprintf>
			break;
 80015f8:	e01f      	b.n	800163a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP):
			DEBUG_PRINT("SLEEP");
 80015fa:	482f      	ldr	r0, [pc, #188]	@ (80016b8 <S2LP_PrintStatus+0x1d8>)
 80015fc:	f006 f850 	bl	80076a0 <iprintf>
			break;
 8001600:	e01b      	b.n	800163a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP_NOFIFO):
			DEBUG_PRINT("SLEEP");
 8001602:	482d      	ldr	r0, [pc, #180]	@ (80016b8 <S2LP_PrintStatus+0x1d8>)
 8001604:	f006 f84c 	bl	80076a0 <iprintf>
			break;
 8001608:	e017      	b.n	800163a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCKON):
			DEBUG_PRINT("LOCKON");
 800160a:	482c      	ldr	r0, [pc, #176]	@ (80016bc <S2LP_PrintStatus+0x1dc>)
 800160c:	f006 f848 	bl	80076a0 <iprintf>
			break;
 8001610:	e013      	b.n	800163a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_RX):
			DEBUG_PRINT("RX");
 8001612:	482b      	ldr	r0, [pc, #172]	@ (80016c0 <S2LP_PrintStatus+0x1e0>)
 8001614:	f006 f844 	bl	80076a0 <iprintf>
			break;
 8001618:	e00f      	b.n	800163a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCK_ST):
			DEBUG_PRINT("LOCK_ST");
 800161a:	482a      	ldr	r0, [pc, #168]	@ (80016c4 <S2LP_PrintStatus+0x1e4>)
 800161c:	f006 f840 	bl	80076a0 <iprintf>
			break;
 8001620:	e00b      	b.n	800163a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_TX):
			DEBUG_PRINT("TX");
 8001622:	4829      	ldr	r0, [pc, #164]	@ (80016c8 <S2LP_PrintStatus+0x1e8>)
 8001624:	f006 f83c 	bl	80076a0 <iprintf>
			break;
 8001628:	e007      	b.n	800163a <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
 800162a:	4828      	ldr	r0, [pc, #160]	@ (80016cc <S2LP_PrintStatus+0x1ec>)
 800162c:	f006 f838 	bl	80076a0 <iprintf>
			break;
 8001630:	e003      	b.n	800163a <S2LP_PrintStatus+0x15a>
		default:
			DEBUG_PRINT("UNKNOWN");
 8001632:	4827      	ldr	r0, [pc, #156]	@ (80016d0 <S2LP_PrintStatus+0x1f0>)
 8001634:	f006 f834 	bl	80076a0 <iprintf>
			break;
 8001638:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
 800163a:	4826      	ldr	r0, [pc, #152]	@ (80016d4 <S2LP_PrintStatus+0x1f4>)
 800163c:	f006 f898 	bl	8007770 <puts>
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4603      	mov	r3, r0
 8001672:	4819      	ldr	r0, [pc, #100]	@ (80016d8 <S2LP_PrintStatus+0x1f8>)
 8001674:	f006 f814 	bl	80076a0 <iprintf>
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4810      	ldr	r0, [pc, #64]	@ (80016dc <S2LP_PrintStatus+0x1fc>)
 800169c:	f006 f800 	bl	80076a0 <iprintf>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	08008560 	.word	0x08008560
 80016ac:	08008578 	.word	0x08008578
 80016b0:	08008588 	.word	0x08008588
 80016b4:	08008590 	.word	0x08008590
 80016b8:	08008598 	.word	0x08008598
 80016bc:	080085a0 	.word	0x080085a0
 80016c0:	080085a8 	.word	0x080085a8
 80016c4:	080085ac 	.word	0x080085ac
 80016c8:	080085b4 	.word	0x080085b4
 80016cc:	080085b8 	.word	0x080085b8
 80016d0:	080085c4 	.word	0x080085c4
 80016d4:	080085cc 	.word	0x080085cc
 80016d8:	080085d0 	.word	0x080085d0
 80016dc:	08008610 	.word	0x08008610

080016e0 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 80016e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e4:	b09e      	sub	sp, #120	@ 0x78
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 80016ea:	2304      	movs	r3, #4
 80016ec:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 80016f0:	2301      	movs	r3, #1
 80016f2:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 80016f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016f8:	17da      	asrs	r2, r3, #31
 80016fa:	469a      	mov	sl, r3
 80016fc:	4693      	mov	fp, r2
 80016fe:	ea4f 396a 	mov.w	r9, sl, asr #13
 8001702:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 8001706:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 800170a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	17da      	asrs	r2, r3, #31
 8001714:	623b      	str	r3, [r7, #32]
 8001716:	627a      	str	r2, [r7, #36]	@ 0x24
 8001718:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800171c:	4603      	mov	r3, r0
 800171e:	fb03 f209 	mul.w	r2, r3, r9
 8001722:	460b      	mov	r3, r1
 8001724:	fb08 f303 	mul.w	r3, r8, r3
 8001728:	4413      	add	r3, r2
 800172a:	4602      	mov	r2, r0
 800172c:	fba8 4502 	umull	r4, r5, r8, r2
 8001730:	442b      	add	r3, r5
 8001732:	461d      	mov	r5, r3
 8001734:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 8001738:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 800173c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001740:	a374      	add	r3, pc, #464	@ (adr r3, 8001914 <S2LP_PLLConf+0x234>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe fda3 	bl	8000290 <__aeabi_uldivmod>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4613      	mov	r3, r2
 8001750:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 8001752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001754:	2200      	movs	r2, #0
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	61fa      	str	r2, [r7, #28]
 800175a:	4b6b      	ldr	r3, [pc, #428]	@ (8001908 <S2LP_PLLConf+0x228>)
 800175c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001760:	462a      	mov	r2, r5
 8001762:	fb03 f202 	mul.w	r2, r3, r2
 8001766:	2300      	movs	r3, #0
 8001768:	4621      	mov	r1, r4
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	4a65      	ldr	r2, [pc, #404]	@ (8001908 <S2LP_PLLConf+0x228>)
 8001772:	4621      	mov	r1, r4
 8001774:	fba1 1202 	umull	r1, r2, r1, r2
 8001778:	637a      	str	r2, [r7, #52]	@ 0x34
 800177a:	460a      	mov	r2, r1
 800177c:	633a      	str	r2, [r7, #48]	@ 0x30
 800177e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001780:	4413      	add	r3, r2
 8001782:	637b      	str	r3, [r7, #52]	@ 0x34
 8001784:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001788:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 800178c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8001790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001792:	3301      	adds	r3, #1
 8001794:	2200      	movs	r2, #0
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	617a      	str	r2, [r7, #20]
 800179a:	4b5b      	ldr	r3, [pc, #364]	@ (8001908 <S2LP_PLLConf+0x228>)
 800179c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017a0:	462a      	mov	r2, r5
 80017a2:	fb03 f202 	mul.w	r2, r3, r2
 80017a6:	2300      	movs	r3, #0
 80017a8:	4621      	mov	r1, r4
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	4a55      	ldr	r2, [pc, #340]	@ (8001908 <S2LP_PLLConf+0x228>)
 80017b2:	4621      	mov	r1, r4
 80017b4:	fba1 1202 	umull	r1, r2, r1, r2
 80017b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017ba:	460a      	mov	r2, r1
 80017bc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017c0:	4413      	add	r3, r2
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017c4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80017c8:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 80017cc:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 80017d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80017d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80017d8:	1a84      	subs	r4, r0, r2
 80017da:	60bc      	str	r4, [r7, #8]
 80017dc:	eb61 0303 	sbc.w	r3, r1, r3
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80017e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017ea:	1a84      	subs	r4, r0, r2
 80017ec:	603c      	str	r4, [r7, #0]
 80017ee:	eb61 0303 	sbc.w	r3, r1, r3
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017f8:	4623      	mov	r3, r4
 80017fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017fe:	4602      	mov	r2, r0
 8001800:	4293      	cmp	r3, r2
 8001802:	462b      	mov	r3, r5
 8001804:	460a      	mov	r2, r1
 8001806:	4193      	sbcs	r3, r2
 8001808:	d202      	bcs.n	8001810 <S2LP_PLLConf+0x130>
 800180a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800180c:	3301      	adds	r3, #1
 800180e:	e000      	b.n	8001812 <S2LP_PLLConf+0x132>
 8001810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001812:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 8001814:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001818:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 8001820:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001824:	4a38      	ldr	r2, [pc, #224]	@ (8001908 <S2LP_PLLConf+0x228>)
 8001826:	fb92 f3f3 	sdiv	r3, r2, r3
 800182a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 800182c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800182e:	4a37      	ldr	r2, [pc, #220]	@ (800190c <S2LP_PLLConf+0x22c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d911      	bls.n	8001858 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001836:	4a36      	ldr	r2, [pc, #216]	@ (8001910 <S2LP_PLLConf+0x230>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d906      	bls.n	800184a <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 800183c:	2302      	movs	r3, #2
 800183e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001848:	e017      	b.n	800187a <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 800184a:	2301      	movs	r3, #1
 800184c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8001850:	2301      	movs	r3, #1
 8001852:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001856:	e010      	b.n	800187a <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800185a:	4a2d      	ldr	r2, [pc, #180]	@ (8001910 <S2LP_PLLConf+0x230>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d906      	bls.n	800186e <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 8001860:	2303      	movs	r3, #3
 8001862:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800186c:	e005      	b.n	800187a <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 800186e:	2302      	movs	r3, #2
 8001870:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 800187a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800187e:	015b      	lsls	r3, r3, #5
 8001880:	b2da      	uxtb	r2, r3
 8001882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001884:	0e1b      	lsrs	r3, r3, #24
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 800188e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 8001896:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 800189e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018a0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 80018a4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	3b30      	subs	r3, #48	@ 0x30
 80018ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 80018b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80018b6:	2200      	movs	r2, #0
 80018b8:	4619      	mov	r1, r3
 80018ba:	2005      	movs	r0, #5
 80018bc:	f7ff fca4 	bl	8001208 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 80018c0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	2006      	movs	r0, #6
 80018ca:	f7ff fc9d 	bl	8001208 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 80018ce:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	2007      	movs	r0, #7
 80018d8:	f7ff fc96 	bl	8001208 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 80018dc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80018e0:	2200      	movs	r2, #0
 80018e2:	4619      	mov	r1, r3
 80018e4:	2008      	movs	r0, #8
 80018e6:	f7ff fc8f 	bl	8001208 <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 80018ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	2065      	movs	r0, #101	@ 0x65
 80018f4:	f7ff fc88 	bl	8001208 <S2LP_WriteReg>
}
 80018f8:	bf00      	nop
 80018fa:	3778      	adds	r7, #120	@ 0x78
 80018fc:	46bd      	mov	sp, r7
 80018fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001902:	bf00      	nop
 8001904:	f3af 8000 	nop.w
 8001908:	02faf080 	.word	0x02faf080
 800190c:	d693a3ff 	.word	0xd693a3ff
 8001910:	01c9c380 	.word	0x01c9c380
 8001914:	02faf080 	.word	0x02faf080
 8001918:	00000000 	.word	0x00000000

0800191c <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 800191c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001920:	b091      	sub	sp, #68	@ 0x44
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	460a      	mov	r2, r1
 8001928:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800192a:	4613      	mov	r3, r2
 800192c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 8001930:	4b3f      	ldr	r3, [pc, #252]	@ (8001a30 <ComputeDatarate+0x114>)
 8001932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001934:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001936:	4b3f      	ldr	r3, [pc, #252]	@ (8001a34 <ComputeDatarate+0x118>)
 8001938:	429a      	cmp	r2, r3
 800193a:	d902      	bls.n	8001942 <ComputeDatarate+0x26>
    f_dig >>= 1;
 800193c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800193e:	085b      	lsrs	r3, r3, #1
 8001940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 8001942:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001946:	2b00      	cmp	r3, #0
 8001948:	d128      	bne.n	800199c <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 800194a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800194c:	2200      	movs	r2, #0
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	61fa      	str	r2, [r7, #28]
 8001952:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001954:	2200      	movs	r2, #0
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	617a      	str	r2, [r7, #20]
 800195a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800195e:	462b      	mov	r3, r5
 8001960:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001964:	4642      	mov	r2, r8
 8001966:	fb02 f203 	mul.w	r2, r2, r3
 800196a:	464b      	mov	r3, r9
 800196c:	4621      	mov	r1, r4
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	4622      	mov	r2, r4
 8001976:	4641      	mov	r1, r8
 8001978:	fba2 ab01 	umull	sl, fp, r2, r1
 800197c:	445b      	add	r3, fp
 800197e:	469b      	mov	fp, r3
 8001980:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 8001984:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 8001988:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	000a      	movs	r2, r1
 8001996:	2300      	movs	r3, #0
 8001998:	4613      	mov	r3, r2
 800199a:	e043      	b.n	8001a24 <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 800199c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800199e:	2200      	movs	r2, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	60fa      	str	r2, [r7, #12]
 80019a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80019a6:	2200      	movs	r2, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 80019b0:	460b      	mov	r3, r1
 80019b2:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 80019b6:	623b      	str	r3, [r7, #32]
 80019b8:	4613      	mov	r3, r2
 80019ba:	f143 0300 	adc.w	r3, r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019c4:	460b      	mov	r3, r1
 80019c6:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80019ca:	4652      	mov	r2, sl
 80019cc:	fb02 f203 	mul.w	r2, r2, r3
 80019d0:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80019d4:	465b      	mov	r3, fp
 80019d6:	4682      	mov	sl, r0
 80019d8:	468b      	mov	fp, r1
 80019da:	4651      	mov	r1, sl
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	4652      	mov	r2, sl
 80019e4:	6a39      	ldr	r1, [r7, #32]
 80019e6:	fba2 4501 	umull	r4, r5, r2, r1
 80019ea:	442b      	add	r3, r5
 80019ec:	461d      	mov	r5, r3
 80019ee:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 80019f2:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 80019f6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019fa:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 80019fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a02:	f1c1 0420 	rsb	r4, r1, #32
 8001a06:	f1a1 0020 	sub.w	r0, r1, #32
 8001a0a:	fa22 f801 	lsr.w	r8, r2, r1
 8001a0e:	fa03 f404 	lsl.w	r4, r3, r4
 8001a12:	ea48 0804 	orr.w	r8, r8, r4
 8001a16:	fa23 f000 	lsr.w	r0, r3, r0
 8001a1a:	ea48 0800 	orr.w	r8, r8, r0
 8001a1e:	fa23 f901 	lsr.w	r9, r3, r1
 8001a22:	4643      	mov	r3, r8
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3744      	adds	r7, #68	@ 0x44
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a2e:	4770      	bx	lr
 8001a30:	02faf080 	.word	0x02faf080
 8001a34:	01c9c380 	.word	0x01c9c380

08001a38 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 8001a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a3c:	b0ae      	sub	sp, #184	@ 0xb8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8001a44:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001a48:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 8001a4c:	4ba5      	ldr	r3, [pc, #660]	@ (8001ce4 <SearchDatarateME+0x2ac>)
 8001a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001a52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a56:	4ba4      	ldr	r3, [pc, #656]	@ (8001ce8 <SearchDatarateME+0x2b0>)
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d904      	bls.n	8001a66 <SearchDatarateME+0x2e>
    f_dig >>= 1;
 8001a5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a60:	085b      	lsrs	r3, r3, #1
 8001a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001a6c:	e013      	b.n	8001a96 <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 8001a6e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001a72:	4619      	mov	r1, r3
 8001a74:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a78:	f7ff ff50 	bl	800191c <ComputeDatarate>
 8001a7c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 8001a80:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d909      	bls.n	8001aa0 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8001a8c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001a90:	3301      	adds	r3, #1
 8001a92:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001a96:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d1e7      	bne.n	8001a6e <SearchDatarateME+0x36>
 8001a9e:	e000      	b.n	8001aa2 <SearchDatarateME+0x6a>
      break;
 8001aa0:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8001aa2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001aa6:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001aaa:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 8001aac:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d16b      	bne.n	8001b8c <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 8001ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	663b      	str	r3, [r7, #96]	@ 0x60
 8001abc:	667a      	str	r2, [r7, #100]	@ 0x64
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001ac8:	000b      	movs	r3, r1
 8001aca:	2200      	movs	r2, #0
 8001acc:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8001ad0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ad8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ade:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001ae2:	f7fe fbd5 	bl	8000290 <__aeabi_uldivmod>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	b293      	uxth	r3, r2
 8001aec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001af0:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 8001af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001af6:	2200      	movs	r2, #0
 8001af8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001afa:	657a      	str	r2, [r7, #84]	@ 0x54
 8001afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	2200      	movs	r2, #0
 8001b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b08:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b0a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001b0e:	462b      	mov	r3, r5
 8001b10:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001b14:	4642      	mov	r2, r8
 8001b16:	fb02 f203 	mul.w	r2, r2, r3
 8001b1a:	464b      	mov	r3, r9
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	4622      	mov	r2, r4
 8001b26:	4641      	mov	r1, r8
 8001b28:	fba2 1201 	umull	r1, r2, r2, r1
 8001b2c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001b2e:	460a      	mov	r2, r1
 8001b30:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001b32:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001b34:	4413      	add	r3, r2
 8001b36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b38:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8001b3c:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8001b40:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 8001b44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b4c:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	17da      	asrs	r2, r3, #31
 8001b58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b5c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001b60:	462b      	mov	r3, r5
 8001b62:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001b66:	4642      	mov	r2, r8
 8001b68:	fb02 f203 	mul.w	r2, r2, r3
 8001b6c:	464b      	mov	r3, r9
 8001b6e:	4621      	mov	r1, r4
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	4622      	mov	r2, r4
 8001b78:	4641      	mov	r1, r8
 8001b7a:	fba2 ab01 	umull	sl, fp, r2, r1
 8001b7e:	445b      	add	r3, fp
 8001b80:	469b      	mov	fp, r3
 8001b82:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8001b86:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8001b8a:	e07d      	b.n	8001c88 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 8001b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b90:	2200      	movs	r2, #0
 8001b92:	4698      	mov	r8, r3
 8001b94:	4691      	mov	r9, r2
 8001b96:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001b9a:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8001b9e:	f1a1 0320 	sub.w	r3, r1, #32
 8001ba2:	f1c1 0220 	rsb	r2, r1, #32
 8001ba6:	fa09 f501 	lsl.w	r5, r9, r1
 8001baa:	fa08 f303 	lsl.w	r3, r8, r3
 8001bae:	431d      	orrs	r5, r3
 8001bb0:	fa28 f202 	lsr.w	r2, r8, r2
 8001bb4:	4315      	orrs	r5, r2
 8001bb6:	fa08 f401 	lsl.w	r4, r8, r1
 8001bba:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 8001bbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bc6:	637a      	str	r2, [r7, #52]	@ 0x34
 8001bc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001bd0:	f7fe fb5e 	bl	8000290 <__aeabi_uldivmod>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	b293      	uxth	r3, r2
 8001bda:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001bde:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8001be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001be4:	2200      	movs	r2, #0
 8001be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001be8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001bf4:	17da      	asrs	r2, r3, #31
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bfa:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001bfe:	462b      	mov	r3, r5
 8001c00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c04:	4642      	mov	r2, r8
 8001c06:	fb02 f203 	mul.w	r2, r2, r3
 8001c0a:	464b      	mov	r3, r9
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	fb01 f303 	mul.w	r3, r1, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	4622      	mov	r2, r4
 8001c16:	4641      	mov	r1, r8
 8001c18:	fba2 1201 	umull	r1, r2, r2, r1
 8001c1c:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c1e:	460a      	mov	r2, r1
 8001c20:	673a      	str	r2, [r7, #112]	@ 0x70
 8001c22:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001c24:	4413      	add	r3, r2
 8001c26:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c28:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8001c2c:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8001c30:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 8001c34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	61fa      	str	r2, [r7, #28]
 8001c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8001c48:	17da      	asrs	r2, r3, #31
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	617a      	str	r2, [r7, #20]
 8001c4e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001c52:	462b      	mov	r3, r5
 8001c54:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c58:	4642      	mov	r2, r8
 8001c5a:	fb02 f203 	mul.w	r2, r2, r3
 8001c5e:	464b      	mov	r3, r9
 8001c60:	4621      	mov	r1, r4
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	4622      	mov	r2, r4
 8001c6a:	4641      	mov	r1, r8
 8001c6c:	fba2 1201 	umull	r1, r2, r2, r1
 8001c70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001c72:	460a      	mov	r2, r1
 8001c74:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001c76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001c78:	4413      	add	r3, r2
 8001c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c7c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8001c80:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 8001c84:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8001c88:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001c8c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001c90:	1a84      	subs	r4, r0, r2
 8001c92:	60bc      	str	r4, [r7, #8]
 8001c94:	eb61 0303 	sbc.w	r3, r1, r3
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001c9e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001ca2:	1a84      	subs	r4, r0, r2
 8001ca4:	603c      	str	r4, [r7, #0]
 8001ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cb0:	4623      	mov	r3, r4
 8001cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	462b      	mov	r3, r5
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	4193      	sbcs	r3, r2
 8001cc0:	d205      	bcs.n	8001cce <SearchDatarateME+0x296>
 8001cc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	e002      	b.n	8001cd4 <SearchDatarateME+0x29c>
 8001cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001cd8:	8013      	strh	r3, [r2, #0]

}
 8001cda:	bf00      	nop
 8001cdc:	37b8      	adds	r7, #184	@ 0xb8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce4:	02faf080 	.word	0x02faf080
 8001ce8:	01c9c380 	.word	0x01c9c380

08001cec <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 8001cec:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001cf0:	b08c      	sub	sp, #48	@ 0x30
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	461e      	mov	r6, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001d02:	4613      	mov	r3, r2
 8001d04:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001d08:	4633      	mov	r3, r6
 8001d0a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 8001d0e:	4b35      	ldr	r3, [pc, #212]	@ (8001de4 <ComputeFreqDeviation+0xf8>)
 8001d10:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 8001d12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d127      	bne.n	8001d6a <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 8001d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	617a      	str	r2, [r7, #20]
 8001d22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d26:	2200      	movs	r2, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	60fa      	str	r2, [r7, #12]
 8001d2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d30:	462b      	mov	r3, r5
 8001d32:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d36:	4642      	mov	r2, r8
 8001d38:	fb02 f203 	mul.w	r2, r2, r3
 8001d3c:	464b      	mov	r3, r9
 8001d3e:	4621      	mov	r1, r4
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	4622      	mov	r2, r4
 8001d48:	4641      	mov	r1, r8
 8001d4a:	fba2 ab01 	umull	sl, fp, r2, r1
 8001d4e:	445b      	add	r3, fp
 8001d50:	469b      	mov	fp, r3
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	ea4f 529a 	mov.w	r2, sl, lsr #22
 8001d5e:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 8001d62:	ea4f 539b 	mov.w	r3, fp, lsr #22
 8001d66:	4613      	mov	r3, r2
 8001d68:	e036      	b.n	8001dd8 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 8001d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d76:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d7a:	17da      	asrs	r2, r3, #31
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	61fa      	str	r2, [r7, #28]
 8001d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d8a:	4652      	mov	r2, sl
 8001d8c:	fb02 f203 	mul.w	r2, r2, r3
 8001d90:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8001d94:	465b      	mov	r3, fp
 8001d96:	4682      	mov	sl, r0
 8001d98:	468b      	mov	fp, r1
 8001d9a:	4651      	mov	r1, sl
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	4652      	mov	r2, sl
 8001da4:	69b9      	ldr	r1, [r7, #24]
 8001da6:	fba2 4501 	umull	r4, r5, r2, r1
 8001daa:	442b      	add	r3, r5
 8001dac:	461d      	mov	r5, r3
 8001dae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001db2:	f1c3 0317 	rsb	r3, r3, #23
 8001db6:	f1c3 0120 	rsb	r1, r3, #32
 8001dba:	f1a3 0220 	sub.w	r2, r3, #32
 8001dbe:	fa24 f803 	lsr.w	r8, r4, r3
 8001dc2:	fa05 f101 	lsl.w	r1, r5, r1
 8001dc6:	ea48 0801 	orr.w	r8, r8, r1
 8001dca:	fa25 f202 	lsr.w	r2, r5, r2
 8001dce:	ea48 0802 	orr.w	r8, r8, r2
 8001dd2:	fa25 f903 	lsr.w	r9, r5, r3
 8001dd6:	4643      	mov	r3, r8
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3730      	adds	r7, #48	@ 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001de2:	4770      	bx	lr
 8001de4:	02faf080 	.word	0x02faf080

08001de8 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8001de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dec:	b0a2      	sub	sp, #136	@ 0x88
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8001df2:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001df4:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 8001df6:	2304      	movs	r3, #4
 8001df8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001e08:	e012      	b.n	8001e30 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 8001e0a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001e0e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001e12:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 8001e16:	20ff      	movs	r0, #255	@ 0xff
 8001e18:	f7ff ff68 	bl	8001cec <ComputeFreqDeviation>
 8001e1c:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 8001e1e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001e20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d309      	bcc.n	8001e3a <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001e26:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001e30:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	d1e8      	bne.n	8001e0a <SearchFreqDevME+0x22>
 8001e38:	e000      	b.n	8001e3c <SearchFreqDevME+0x54>
      break;
 8001e3a:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 8001e3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e3e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e42:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 8001e44:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d155      	bne.n	8001ef8 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 8001e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e4e:	2200      	movs	r2, #0
 8001e50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e52:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001e60:	4629      	mov	r1, r5
 8001e62:	058b      	lsls	r3, r1, #22
 8001e64:	4621      	mov	r1, r4
 8001e66:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	058a      	lsls	r2, r1, #22
 8001e6e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 8001e72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001e76:	a36e      	add	r3, pc, #440	@ (adr r3, 8002030 <SearchFreqDevME+0x248>)
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	f7fe fa08 	bl	8000290 <__aeabi_uldivmod>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	b2d3      	uxtb	r3, r2
 8001e86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e88:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 8001e8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2200      	movs	r2, #0
 8001e92:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e94:	637a      	str	r2, [r7, #52]	@ 0x34
 8001e96:	4b68      	ldr	r3, [pc, #416]	@ (8002038 <SearchFreqDevME+0x250>)
 8001e98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e9c:	462a      	mov	r2, r5
 8001e9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a62      	ldr	r2, [pc, #392]	@ (8002038 <SearchFreqDevME+0x250>)
 8001eae:	4621      	mov	r1, r4
 8001eb0:	fba1 ab02 	umull	sl, fp, r1, r2
 8001eb4:	445b      	add	r3, fp
 8001eb6:	469b      	mov	fp, r3
 8001eb8:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 8001ebc:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8001ec0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	17da      	asrs	r2, r3, #31
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8002038 <SearchFreqDevME+0x250>)
 8001ece:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001ed2:	462a      	mov	r2, r5
 8001ed4:	fb03 f202 	mul.w	r2, r3, r2
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4621      	mov	r1, r4
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a55      	ldr	r2, [pc, #340]	@ (8002038 <SearchFreqDevME+0x250>)
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	fba1 8902 	umull	r8, r9, r1, r2
 8001eea:	444b      	add	r3, r9
 8001eec:	4699      	mov	r9, r3
 8001eee:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8001ef2:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8001ef6:	e06d      	b.n	8001fd4 <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8001ef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001efa:	2200      	movs	r2, #0
 8001efc:	623b      	str	r3, [r7, #32]
 8001efe:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f00:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f04:	f1c3 0117 	rsb	r1, r3, #23
 8001f08:	f1a1 0320 	sub.w	r3, r1, #32
 8001f0c:	f1c1 0220 	rsb	r2, r1, #32
 8001f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f14:	4648      	mov	r0, r9
 8001f16:	fa00 f501 	lsl.w	r5, r0, r1
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	fa00 f303 	lsl.w	r3, r0, r3
 8001f20:	431d      	orrs	r5, r3
 8001f22:	4643      	mov	r3, r8
 8001f24:	fa23 f202 	lsr.w	r2, r3, r2
 8001f28:	4315      	orrs	r5, r2
 8001f2a:	4643      	mov	r3, r8
 8001f2c:	408b      	lsls	r3, r1
 8001f2e:	461c      	mov	r4, r3
 8001f30:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 8001f34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001f38:	a33d      	add	r3, pc, #244	@ (adr r3, 8002030 <SearchFreqDevME+0x248>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe f9a7 	bl	8000290 <__aeabi_uldivmod>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	b2d3      	uxtb	r3, r2
 8001f48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f4a:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 8001f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f54:	17da      	asrs	r2, r3, #31
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	61fa      	str	r2, [r7, #28]
 8001f5a:	4b37      	ldr	r3, [pc, #220]	@ (8002038 <SearchFreqDevME+0x250>)
 8001f5c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f60:	462a      	mov	r2, r5
 8001f62:	fb03 f202 	mul.w	r2, r3, r2
 8001f66:	2300      	movs	r3, #0
 8001f68:	4621      	mov	r1, r4
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a31      	ldr	r2, [pc, #196]	@ (8002038 <SearchFreqDevME+0x250>)
 8001f72:	4621      	mov	r1, r4
 8001f74:	fba1 1202 	umull	r1, r2, r1, r2
 8001f78:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f7a:	460a      	mov	r2, r1
 8001f7c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001f7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f80:	4413      	add	r3, r2
 8001f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f84:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001f88:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8001f8c:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8001f90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8001f98:	17da      	asrs	r2, r3, #31
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	617a      	str	r2, [r7, #20]
 8001f9e:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <SearchFreqDevME+0x250>)
 8001fa0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001fa4:	462a      	mov	r2, r5
 8001fa6:	fb03 f202 	mul.w	r2, r3, r2
 8001faa:	2300      	movs	r3, #0
 8001fac:	4621      	mov	r1, r4
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a20      	ldr	r2, [pc, #128]	@ (8002038 <SearchFreqDevME+0x250>)
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	fba1 1202 	umull	r1, r2, r1, r2
 8001fbc:	647a      	str	r2, [r7, #68]	@ 0x44
 8001fbe:	460a      	mov	r2, r1
 8001fc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8001fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fc4:	4413      	add	r3, r2
 8001fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fc8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001fcc:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8001fd0:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8001fd4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001fd8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001fdc:	1a84      	subs	r4, r0, r2
 8001fde:	60bc      	str	r4, [r7, #8]
 8001fe0:	eb61 0303 	sbc.w	r3, r1, r3
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001fea:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001fee:	1a84      	subs	r4, r0, r2
 8001ff0:	603c      	str	r4, [r7, #0]
 8001ff2:	eb61 0303 	sbc.w	r3, r1, r3
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ffc:	4623      	mov	r3, r4
 8001ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002002:	4602      	mov	r2, r0
 8002004:	4293      	cmp	r3, r2
 8002006:	462b      	mov	r3, r5
 8002008:	460a      	mov	r2, r1
 800200a:	4193      	sbcs	r3, r2
 800200c:	d204      	bcs.n	8002018 <SearchFreqDevME+0x230>
 800200e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e001      	b.n	800201c <SearchFreqDevME+0x234>
 8002018:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800201e:	7013      	strb	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	3788      	adds	r7, #136	@ 0x88
 8002024:	46bd      	mov	sp, r7
 8002026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800202a:	bf00      	nop
 800202c:	f3af 8000 	nop.w
 8002030:	02faf080 	.word	0x02faf080
 8002034:	00000000 	.word	0x00000000
 8002038:	02faf080 	.word	0x02faf080

0800203c <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 800204a:	f107 0217 	add.w	r2, r7, #23
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	68b8      	ldr	r0, [r7, #8]
 8002056:	f7ff fcef 	bl	8001a38 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 800205a:	f107 0212 	add.w	r2, r7, #18
 800205e:	f107 0313 	add.w	r3, r7, #19
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff febf 	bl	8001de8 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 800206a:	8abb      	ldrh	r3, [r7, #20]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b29b      	uxth	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2200      	movs	r2, #0
 8002074:	4619      	mov	r1, r3
 8002076:	200e      	movs	r0, #14
 8002078:	f7ff f8c6 	bl	8001208 <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 800207c:	8abb      	ldrh	r3, [r7, #20]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2200      	movs	r2, #0
 8002082:	4619      	mov	r1, r3
 8002084:	200f      	movs	r0, #15
 8002086:	f7ff f8bf 	bl	8001208 <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 800208a:	7dfa      	ldrb	r2, [r7, #23]
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	4313      	orrs	r3, r2
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2200      	movs	r2, #0
 8002094:	4619      	mov	r1, r3
 8002096:	2010      	movs	r0, #16
 8002098:	f7ff f8b6 	bl	8001208 <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	2200      	movs	r2, #0
 80020a0:	4619      	mov	r1, r3
 80020a2:	2012      	movs	r0, #18
 80020a4:	f7ff f8b0 	bl	8001208 <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 80020a8:	7cbb      	ldrb	r3, [r7, #18]
 80020aa:	2200      	movs	r2, #0
 80020ac:	4619      	mov	r1, r3
 80020ae:	2011      	movs	r0, #17
 80020b0:	f7ff f8aa 	bl	8001208 <S2LP_WriteReg>
}
 80020b4:	bf00      	nop
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b0e      	cmp	r3, #14
 80020c8:	dd02      	ble.n	80020d0 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	e006      	b.n	80020de <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f1c3 031d 	rsb	r3, r3, #29
 80020dc:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	2062      	movs	r0, #98	@ 0x62
 80020e4:	f7ff f890 	bl	8001208 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	2064      	movs	r0, #100	@ 0x64
 80020ee:	f7ff f88b 	bl	8001208 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	2063      	movs	r0, #99	@ 0x63
 80020f8:	f7ff f886 	bl	8001208 <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2200      	movs	r2, #0
 8002100:	4619      	mov	r1, r3
 8002102:	2061      	movs	r0, #97	@ 0x61
 8002104:	f7ff f880 	bl	8001208 <S2LP_WriteReg>
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <S2LP_Init>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 8002118:	4a48      	ldr	r2, [pc, #288]	@ (800223c <S2LP_Init+0x12c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 800211e:	f002 fbcb 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 8002122:	4603      	mov	r3, r0
 8002124:	4a46      	ldr	r2, [pc, #280]	@ (8002240 <S2LP_Init+0x130>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0a9b      	lsrs	r3, r3, #10
 800212c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800212e:	b672      	cpsid	i
}
 8002130:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 8002132:	2200      	movs	r2, #0
 8002134:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002138:	4842      	ldr	r0, [pc, #264]	@ (8002244 <S2LP_Init+0x134>)
 800213a:	f001 fef9 	bl	8003f30 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	e003      	b.n	800214c <S2LP_Init+0x3c>
		asm volatile("nop");
 8002144:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	429a      	cmp	r2, r3
 8002152:	d3f7      	bcc.n	8002144 <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8002154:	b662      	cpsie	i
}
 8002156:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 8002158:	2200      	movs	r2, #0
 800215a:	2103      	movs	r1, #3
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff f853 	bl	8001208 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 8002162:	2200      	movs	r2, #0
 8002164:	21a4      	movs	r1, #164	@ 0xa4
 8002166:	2053      	movs	r0, #83	@ 0x53
 8002168:	f7ff f84e 	bl	8001208 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 800216c:	2200      	movs	r2, #0
 800216e:	2101      	movs	r1, #1
 8002170:	2052      	movs	r0, #82	@ 0x52
 8002172:	f7ff f849 	bl	8001208 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2051      	movs	r0, #81	@ 0x51
 800217c:	f7ff f844 	bl	8001208 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	2050      	movs	r0, #80	@ 0x50
 8002186:	f7ff f83f 	bl	8001208 <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 800218a:	2200      	movs	r2, #0
 800218c:	2120      	movs	r1, #32
 800218e:	203f      	movs	r0, #63	@ 0x3f
 8002190:	f7ff f83a 	bl	8001208 <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 8002194:	2200      	movs	r2, #0
 8002196:	21b7      	movs	r1, #183	@ 0xb7
 8002198:	2033      	movs	r0, #51	@ 0x33
 800219a:	f7ff f835 	bl	8001208 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 800219e:	2200      	movs	r2, #0
 80021a0:	2154      	movs	r1, #84	@ 0x54
 80021a2:	2034      	movs	r0, #52	@ 0x34
 80021a4:	f7ff f830 	bl	8001208 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 80021a8:	2200      	movs	r2, #0
 80021aa:	212a      	movs	r1, #42	@ 0x2a
 80021ac:	2035      	movs	r0, #53	@ 0x35
 80021ae:	f7ff f82b 	bl	8001208 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 80021b2:	2200      	movs	r2, #0
 80021b4:	213e      	movs	r1, #62	@ 0x3e
 80021b6:	2036      	movs	r0, #54	@ 0x36
 80021b8:	f7ff f826 	bl	8001208 <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 80021bc:	4822      	ldr	r0, [pc, #136]	@ (8002248 <S2LP_Init+0x138>)
 80021be:	f7ff fa8f 	bl	80016e0 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff ff7a 	bl	80020bc <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 80021c8:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 80021cc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7ff ff33 	bl	800203c <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 80021d6:	2200      	movs	r2, #0
 80021d8:	2120      	movs	r1, #32
 80021da:	2030      	movs	r0, #48	@ 0x30
 80021dc:	f7ff f814 	bl	8001208 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	202e      	movs	r0, #46	@ 0x2e
 80021e6:	f7ff f80f 	bl	8001208 <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 80021ea:	f107 020c 	add.w	r2, r7, #12
 80021ee:	f107 030b 	add.w	r3, r7, #11
 80021f2:	4619      	mov	r1, r3
 80021f4:	206c      	movs	r0, #108	@ 0x6c
 80021f6:	f7fe ffc9 	bl	800118c <S2LP_ReadReg>
 80021fa:	4603      	mov	r3, r0
 80021fc:	73fb      	strb	r3, [r7, #15]
	if (err) {
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <S2LP_Init+0xf8>
		return err;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	e015      	b.n	8002234 <S2LP_Init+0x124>
	} else if (rco_conf != 0x45) {
 8002208:	7afb      	ldrb	r3, [r7, #11]
 800220a:	2b45      	cmp	r3, #69	@ 0x45
 800220c:	d006      	beq.n	800221c <S2LP_Init+0x10c>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	4619      	mov	r1, r3
 8002212:	480e      	ldr	r0, [pc, #56]	@ (800224c <S2LP_Init+0x13c>)
 8002214:	f005 fa44 	bl	80076a0 <iprintf>
		return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e00b      	b.n	8002234 <S2LP_Init+0x124>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 800221c:	7b7b      	ldrb	r3, [r7, #13]
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <S2LP_Init+0x122>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
 8002228:	4809      	ldr	r0, [pc, #36]	@ (8002250 <S2LP_Init+0x140>)
 800222a:	f005 faa1 	bl	8007770 <puts>
		return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <S2LP_Init+0x124>
	}

	return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200014e8 	.word	0x200014e8
 8002240:	1b4e81b5 	.word	0x1b4e81b5
 8002244:	48001400 	.word	0x48001400
 8002248:	33bca100 	.word	0x33bca100
 800224c:	08008688 	.word	0x08008688
 8002250:	080086e4 	.word	0x080086e4

08002254 <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 800225a:	1dfb      	adds	r3, r7, #7
 800225c:	2200      	movs	r2, #0
 800225e:	4619      	mov	r1, r3
 8002260:	20fc      	movs	r0, #252	@ 0xfc
 8002262:	f7fe ff93 	bl	800118c <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 8002266:	1dbb      	adds	r3, r7, #6
 8002268:	2200      	movs	r2, #0
 800226a:	4619      	mov	r1, r3
 800226c:	20fd      	movs	r0, #253	@ 0xfd
 800226e:	f7fe ff8d 	bl	800118c <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <S2LP_IRQ_Handler+0x58>)
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <S2LP_IRQ_Handler+0x5c>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 8002292:	79bb      	ldrb	r3, [r7, #6]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <S2LP_IRQ_Handler+0x60>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200014e5 	.word	0x200014e5
 80022b0:	200014e6 	.word	0x200014e6
 80022b4:	200014e4 	.word	0x200014e4

080022b8 <Spectrogram_Format>:
}

#if CHAIN_OPT_MODE == CHAIN_OPT
// Convert 12-bit DC ADC samples to Q1.15 fixed point signal and remove DC component
void Spectrogram_Format(q15_t *buf)
{
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4604      	mov	r4, r0
 80022bc:	f5ad 6d80 	sub.w	sp, sp, #1024	@ 0x400
    START_CYCLE_COUNT_SIGNAL_PROC_OP();
 80022c0:	f000 fa9c 	bl	80027fc <start_cycle_count>
    
    // Step 1: Scale up by shifting left by 3 (vectorized)
    q15_t scaled_buf[SAMPLES_PER_MELVEC];
    arm_shift_q15(buf, 3, scaled_buf, SAMPLES_PER_MELVEC);
 80022c4:	466a      	mov	r2, sp
 80022c6:	4620      	mov	r0, r4
 80022c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022cc:	2103      	movs	r1, #3
 80022ce:	f004 fa09 	bl	80066e4 <arm_shift_q15>
    
    // Step 2: Remove DC offset (vectorized)
    q15_t offset = 1 << 14;
    arm_offset_q15(scaled_buf, -offset, scaled_buf, SAMPLES_PER_MELVEC);
 80022d2:	466a      	mov	r2, sp
 80022d4:	4668      	mov	r0, sp
 80022d6:	4909      	ldr	r1, [pc, #36]	@ (80022fc <Spectrogram_Format+0x44>)
 80022d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022dc:	f004 fa94 	bl	8006808 <arm_offset_q15>
    
    // Step 3: Apply window function (vectorized)
    arm_mult_q15(scaled_buf, hamming_window, buf, SAMPLES_PER_MELVEC);
 80022e0:	4907      	ldr	r1, [pc, #28]	@ (8002300 <Spectrogram_Format+0x48>)
 80022e2:	4668      	mov	r0, sp
 80022e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022e8:	4622      	mov	r2, r4
 80022ea:	f004 fac1 	bl	8006870 <arm_mult_q15>
    
    STOP_CYCLE_COUNT_SIGNAL_PROC_OP("Step 0 & 1 - Shift + DC Removal + Windowing");
 80022ee:	4805      	ldr	r0, [pc, #20]	@ (8002304 <Spectrogram_Format+0x4c>)
 80022f0:	f000 faa4 	bl	800283c <stop_cycle_count>
}
 80022f4:	f50d 6d80 	add.w	sp, sp, #1024	@ 0x400
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	bf00      	nop
 80022fc:	ffffc000 	.word	0xffffc000
 8002300:	20000000 	.word	0x20000000
 8002304:	080088a8 	.word	0x080088a8

08002308 <Spectrogram_Compute>:

// Compute spectrogram of samples and transform into MEL vectors.
void Spectrogram_Compute(q15_t *samples, q15_t *melvec)
{
 8002308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800230c:	b088      	sub	sp, #32
 800230e:	460c      	mov	r4, r1
    // STEP 2: Real FFT
	START_CYCLE_COUNT_FFT();
 8002310:	f000 fa74 	bl	80027fc <start_cycle_count>
    arm_rfft_instance_q15 rfft_inst;
    // 0 => FFT, 1 => IFFT // 1 => bitReverse
    arm_rfft_init_q15(&rfft_inst, SAMPLES_PER_MELVEC, 0, 1);
 8002314:	2301      	movs	r3, #1
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800231c:	a802      	add	r0, sp, #8
 800231e:	f004 f965 	bl	80065ec <arm_rfft_init_q15>
	STOP_CYCLE_COUNT_FFT("Step 2.1 - RFFT INIT");
 8002322:	4849      	ldr	r0, [pc, #292]	@ (8002448 <Spectrogram_Compute+0x140>)
 8002324:	4d49      	ldr	r5, [pc, #292]	@ (800244c <Spectrogram_Compute+0x144>)
 8002326:	f000 fa89 	bl	800283c <stop_cycle_count>

    START_CYCLE_COUNT_FFT();
 800232a:	f000 fa67 	bl	80027fc <start_cycle_count>
    arm_rfft_q15(&rfft_inst, buf, buf_fft);
 800232e:	4948      	ldr	r1, [pc, #288]	@ (8002450 <Spectrogram_Compute+0x148>)
 8002330:	4a48      	ldr	r2, [pc, #288]	@ (8002454 <Spectrogram_Compute+0x14c>)
 8002332:	a802      	add	r0, sp, #8
 8002334:	f004 f8de 	bl	80064f4 <arm_rfft_q15>
    STOP_CYCLE_COUNT_FFT("Step 2.2 - RFFT");
 8002338:	4847      	ldr	r0, [pc, #284]	@ (8002458 <Spectrogram_Compute+0x150>)
 800233a:	f000 fa7f 	bl	800283c <stop_cycle_count>

    // STEP 3: Compute magnitude and find max in a single pass
    START_CYCLE_COUNT_SIGNAL_PROC_OP();
 800233e:	f000 fa5d 	bl	80027fc <start_cycle_count>
    q15_t vmax = 0;

    for (int i = 0; i < SAMPLES_PER_MELVEC / 2; i++)
 8002342:	4944      	ldr	r1, [pc, #272]	@ (8002454 <Spectrogram_Compute+0x14c>)
    START_CYCLE_COUNT_SIGNAL_PROC_OP();
 8002344:	4628      	mov	r0, r5
 8002346:	f501 6c80 	add.w	ip, r1, #1024	@ 0x400
    q15_t vmax = 0;
 800234a:	2600      	movs	r6, #0
    {
        q15_t real = buf_fft[2*i];     // Real part
        q15_t imag = buf_fft[2*i + 1]; // Imag part

        // Approx magnitude: mag = max(|r|, |i|) + 0.375 * min(|r|, |i|)
        q15_t absR = (real >= 0) ? real : -real;
 800234c:	f9b1 3000 	ldrsh.w	r3, [r1]
        q15_t absI = (imag >= 0) ? imag : -imag;
 8002350:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
        q15_t absR = (real >= 0) ? real : -real;
 8002354:	2b00      	cmp	r3, #0
 8002356:	bfb8      	it	lt
 8002358:	425b      	neglt	r3, r3
        q15_t absI = (imag >= 0) ? imag : -imag;
 800235a:	2a00      	cmp	r2, #0
 800235c:	bfb8      	it	lt
 800235e:	4252      	neglt	r2, r2
        q15_t absR = (real >= 0) ? real : -real;
 8002360:	b21b      	sxth	r3, r3
        q15_t absI = (imag >= 0) ? imag : -imag;
 8002362:	b212      	sxth	r2, r2
        // small >> 2 is small/4, small >> 3 is small/8, so 3*(small>>3) = small*(3/8).
        // We'll do a single shift:
        //   mag = big + (3*small)/8
        //   => mag = big + (small >> 1) - (small >> 3)
        // or a direct approach:
        q15_t approx = big + ( (3 * small) >> 3 );
 8002364:	4293      	cmp	r3, r2
 8002366:	469e      	mov	lr, r3
 8002368:	bfa8      	it	ge
 800236a:	4696      	movge	lr, r2
        q15_t big  = (absR > absI) ? absR : absI;
 800236c:	4293      	cmp	r3, r2
 800236e:	bfb8      	it	lt
 8002370:	4613      	movlt	r3, r2
        q15_t approx = big + ( (3 * small) >> 3 );
 8002372:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8002376:	eb03 03ee 	add.w	r3, r3, lr, asr #3
 800237a:	b21b      	sxth	r3, r3

        // Save to buf
        buf[i] = approx;
 800237c:	429e      	cmp	r6, r3
    for (int i = 0; i < SAMPLES_PER_MELVEC / 2; i++)
 800237e:	f101 0104 	add.w	r1, r1, #4
 8002382:	bfb8      	it	lt
 8002384:	461e      	movlt	r6, r3
 8002386:	458c      	cmp	ip, r1
        buf[i] = approx;
 8002388:	f820 3f02 	strh.w	r3, [r0, #2]!
    for (int i = 0; i < SAMPLES_PER_MELVEC / 2; i++)
 800238c:	d1de      	bne.n	800234c <Spectrogram_Compute+0x44>
        if (approx > vmax)
        {
            vmax = approx;
        }
    }
    STOP_CYCLE_COUNT_SIGNAL_PROC_OP("Step 3 - Magnitude & Find max");
 800238e:	4833      	ldr	r0, [pc, #204]	@ (800245c <Spectrogram_Compute+0x154>)
 8002390:	f000 fa54 	bl	800283c <stop_cycle_count>

    // STEP 4: Normalize
    START_CYCLE_COUNT_SIGNAL_PROC_OP();
 8002394:	f000 fa32 	bl	80027fc <start_cycle_count>
    if (vmax > 0)
 8002398:	b18e      	cbz	r6, 80023be <Spectrogram_Compute+0xb6>
        // Manual reciprocal in Q15:
        //  1.0 in Q15 is 0x7FFF ~ 32767
        //  We'll do: (32767 << 15) / vmax = Q15 reciprocal
        //  Then multiply each sample by this reciprocal >> 15
        q31_t reciprocal = (((q31_t)0x7FFF) << 15) / (q31_t)vmax; 
        q15_t invVmax = (q15_t)__SSAT(reciprocal, 16); // saturate to Q15
 800239a:	4931      	ldr	r1, [pc, #196]	@ (8002460 <Spectrogram_Compute+0x158>)
        q31_t reciprocal = (((q31_t)0x7FFF) << 15) / (q31_t)vmax; 
 800239c:	4a31      	ldr	r2, [pc, #196]	@ (8002464 <Spectrogram_Compute+0x15c>)
 800239e:	fbb2 f2f6 	udiv	r2, r2, r6
        q15_t invVmax = (q15_t)__SSAT(reciprocal, 16); // saturate to Q15
 80023a2:	f302 020f 	ssat	r2, #16, r2
 80023a6:	b212      	sxth	r2, r2

        for (int i = 0; i < SAMPLES_PER_MELVEC / 2; i++)
        {
            q31_t tmp = ((q31_t)buf[i] * (q31_t)invVmax) >> 15; 
 80023a8:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 80023ac:	fb13 f302 	smulbb	r3, r3, r2
        for (int i = 0; i < SAMPLES_PER_MELVEC / 2; i++)
 80023b0:	42a9      	cmp	r1, r5
            q31_t tmp = ((q31_t)buf[i] * (q31_t)invVmax) >> 15; 
 80023b2:	ea4f 33e3 	mov.w	r3, r3, asr #15
            buf[i] = (q15_t)__SSAT(tmp, 16);
 80023b6:	f303 030f 	ssat	r3, #16, r3
 80023ba:	802b      	strh	r3, [r5, #0]
        for (int i = 0; i < SAMPLES_PER_MELVEC / 2; i++)
 80023bc:	d1f4      	bne.n	80023a8 <Spectrogram_Compute+0xa0>
        }
    }
    STOP_CYCLE_COUNT_SIGNAL_PROC_OP("Step 4 - Normalize magnitude spectrum");
 80023be:	482a      	ldr	r0, [pc, #168]	@ (8002468 <Spectrogram_Compute+0x160>)
 80023c0:	f000 fa3c 	bl	800283c <stop_cycle_count>

    // STEP 5: Mel transform
    START_CYCLE_COUNT_MEL();
 80023c4:	f000 fa1a 	bl	80027fc <start_cycle_count>
 80023c8:	4b28      	ldr	r3, [pc, #160]	@ (800246c <Spectrogram_Compute+0x164>)
    for (size_t i = 0; i < mel_len; i++) {
 80023ca:	2100      	movs	r1, #0
 80023cc:	e002      	b.n	80023d4 <Spectrogram_Compute+0xcc>
 80023ce:	3101      	adds	r1, #1
 80023d0:	2914      	cmp	r1, #20
 80023d2:	d010      	beq.n	80023f6 <Spectrogram_Compute+0xee>
        if (mel_triangles[i].idx_offset + mel_triangles[i].triangle_len > fft_len) {
 80023d4:	e9d3 0200 	ldrd	r0, r2, [r3]
 80023d8:	4402      	add	r2, r0
 80023da:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
    for (size_t i = 0; i < mel_len; i++) {
 80023de:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
        if (mel_triangles[i].idx_offset + mel_triangles[i].triangle_len > fft_len) {
 80023e2:	d9f4      	bls.n	80023ce <Spectrogram_Compute+0xc6>
            DEBUG_PRINT("Error: Mel triangle %d is too large\n", i);
 80023e4:	4822      	ldr	r0, [pc, #136]	@ (8002470 <Spectrogram_Compute+0x168>)
 80023e6:	f005 f95b 	bl	80076a0 <iprintf>
#if MEL_MODE == MEL_MODE_FILTERBANK
    // e.g., mel_filter_apply(buf, melvec, SAMPLES_PER_MELVEC/2, MELVEC_LENGTH);
    mel_filter_apply(buf, melvec, SAMPLES_PER_MELVEC, MELVEC_LENGTH);
    STOP_CYCLE_COUNT_MEL("Step 5 - Mel filter bank");
 80023ea:	4822      	ldr	r0, [pc, #136]	@ (8002474 <Spectrogram_Compute+0x16c>)
 80023ec:	f000 fa26 	bl	800283c <stop_cycle_count>
    arm_mat_init_q15(&melvec_inst, MELVEC_LENGTH, 1, melvec);

    arm_mat_mult_fast_q15(&hz2mel_inst, &fftmag_inst, &melvec_inst, buf_tmp);
    STOP_CYCLE_COUNT_MEL("Step 5 - Mel matrix");
#endif
}
 80023f0:	b008      	add	sp, #32
 80023f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023f6:	4d20      	ldr	r5, [pc, #128]	@ (8002478 <Spectrogram_Compute+0x170>)
 80023f8:	4f15      	ldr	r7, [pc, #84]	@ (8002450 <Spectrogram_Compute+0x148>)
 80023fa:	3c02      	subs	r4, #2
 80023fc:	f505 681b 	add.w	r8, r5, #2480	@ 0x9b0
   */
  __STATIC_FORCEINLINE q15_t clip_q63_to_q15(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 8002400:	f647 76ff 	movw	r6, #32767	@ 0x7fff
        arm_dot_prod_q15(fft_samples,  mel_triangles[i].values,  mel_triangles[i].triangle_len, &mel_result);
 8002404:	e955 2002 	ldrd	r2, r0, [r5, #-8]
 8002408:	4629      	mov	r1, r5
 800240a:	466b      	mov	r3, sp
 800240c:	eb07 0040 	add.w	r0, r7, r0, lsl #1
 8002410:	f004 fa8c 	bl	800692c <arm_dot_prod_q15>
		mel_array[i] = clip_q63_to_q15(mel_result);
 8002414:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002418:	ebb2 7fe3 	cmp.w	r2, r3, asr #31
 800241c:	ea86 71e2 	eor.w	r1, r6, r2, asr #31
 8002420:	d005      	beq.n	800242e <Spectrogram_Compute+0x126>
    for (size_t i = 0; i < mel_len; i++) {
 8002422:	357c      	adds	r5, #124	@ 0x7c
 8002424:	4545      	cmp	r5, r8
		mel_array[i] = clip_q63_to_q15(mel_result);
 8002426:	f824 1f02 	strh.w	r1, [r4, #2]!
    for (size_t i = 0; i < mel_len; i++) {
 800242a:	d1eb      	bne.n	8002404 <Spectrogram_Compute+0xfc>
 800242c:	e7dd      	b.n	80023ea <Spectrogram_Compute+0xe2>
 800242e:	357c      	adds	r5, #124	@ 0x7c
 8002430:	0bdb      	lsrs	r3, r3, #15
 8002432:	4545      	cmp	r5, r8
 8002434:	f824 3f02 	strh.w	r3, [r4, #2]!
 8002438:	d1e4      	bne.n	8002404 <Spectrogram_Compute+0xfc>
    STOP_CYCLE_COUNT_MEL("Step 5 - Mel filter bank");
 800243a:	480e      	ldr	r0, [pc, #56]	@ (8002474 <Spectrogram_Compute+0x16c>)
 800243c:	f000 f9fe 	bl	800283c <stop_cycle_count>
}
 8002440:	b008      	add	sp, #32
 8002442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002446:	bf00      	nop
 8002448:	080088d4 	.word	0x080088d4
 800244c:	20001cea 	.word	0x20001cea
 8002450:	20001cec 	.word	0x20001cec
 8002454:	200014ec 	.word	0x200014ec
 8002458:	080088ec 	.word	0x080088ec
 800245c:	080088fc 	.word	0x080088fc
 8002460:	20001eea 	.word	0x20001eea
 8002464:	3fff8000 	.word	0x3fff8000
 8002468:	0800891c 	.word	0x0800891c
 800246c:	08008960 	.word	0x08008960
 8002470:	08008880 	.word	0x08008880
 8002474:	08008944 	.word	0x08008944
 8002478:	08008968 	.word	0x08008968

0800247c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800247c:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800247e:	4810      	ldr	r0, [pc, #64]	@ (80024c0 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002480:	4c10      	ldr	r4, [pc, #64]	@ (80024c4 <MX_SPI1_Init+0x48>)
 8002482:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002486:	e9c0 4100 	strd	r4, r1, [r0]
 800248a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800248e:	2300      	movs	r3, #0
 8002490:	2208      	movs	r2, #8
 8002492:	f44f 64e0 	mov.w	r4, #1792	@ 0x700
 8002496:	6181      	str	r1, [r0, #24]
 8002498:	2107      	movs	r1, #7
 800249a:	e9c0 3402 	strd	r3, r4, [r0, #8]
 800249e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024a2:	e9c0 2307 	strd	r2, r3, [r0, #28]
 80024a6:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 80024aa:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024ae:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024b0:	f002 fe84 	bl	80051bc <HAL_SPI_Init>
 80024b4:	b900      	cbnz	r0, 80024b8 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024b6:	bd10      	pop	{r4, pc}
 80024b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80024bc:	f7fe bc7a 	b.w	8000db4 <Error_Handler>
 80024c0:	200020f0 	.word	0x200020f0
 80024c4:	40013000 	.word	0x40013000

080024c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024c8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80024ca:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <HAL_SPI_MspInit+0x8c>)
 80024cc:	6802      	ldr	r2, [r0, #0]
{
 80024ce:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 80024d2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80024d8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80024dc:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 80024de:	d001      	beq.n	80024e4 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024e0:	b00a      	add	sp, #40	@ 0x28
 80024e2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024e4:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80024f0:	661a      	str	r2, [r3, #96]	@ 0x60
 80024f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024f4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80024f8:	9201      	str	r2, [sp, #4]
 80024fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002504:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002506:	f002 0201 	and.w	r2, r2, #1
 800250a:	9202      	str	r2, [sp, #8]
 800250c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800250e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002510:	f042 0210 	orr.w	r2, r2, #16
 8002514:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800251e:	22c0      	movs	r2, #192	@ 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002524:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800252a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002532:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002534:	f001 fbd8 	bl	8003ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002538:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800253c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800253e:	4806      	ldr	r0, [pc, #24]	@ (8002558 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002540:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002544:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002546:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800254c:	f001 fbcc 	bl	8003ce8 <HAL_GPIO_Init>
}
 8002550:	b00a      	add	sp, #40	@ 0x28
 8002552:	bd70      	pop	{r4, r5, r6, pc}
 8002554:	40013000 	.word	0x40013000
 8002558:	48001000 	.word	0x48001000

0800255c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255c:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <HAL_MspInit+0x2c>)
 800255e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	661a      	str	r2, [r3, #96]	@ 0x60
 8002566:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8002568:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	f002 0201 	and.w	r2, r2, #1
 800256e:	9200      	str	r2, [sp, #0]
 8002570:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002574:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002578:	659a      	str	r2, [r3, #88]	@ 0x58
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002584:	b002      	add	sp, #8
 8002586:	4770      	bx	lr
 8002588:	40021000 	.word	0x40021000

0800258c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800258c:	e7fe      	b.n	800258c <NMI_Handler>
 800258e:	bf00      	nop

08002590 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <HardFault_Handler>
 8002592:	bf00      	nop

08002594 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <MemManage_Handler>
 8002596:	bf00      	nop

08002598 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <BusFault_Handler>
 800259a:	bf00      	nop

0800259c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800259c:	e7fe      	b.n	800259c <UsageFault_Handler>
 800259e:	bf00      	nop

080025a0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop

080025a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop

080025a8 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop

080025ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ac:	f000 b9de 	b.w	800296c <HAL_IncTick>

080025b0 <EXTI3_IRQHandler>:
  */
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 80025b0:	2008      	movs	r0, #8
 80025b2:	f001 bcc3 	b.w	8003f3c <HAL_GPIO_EXTI_IRQHandler>
 80025b6:	bf00      	nop

080025b8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025b8:	4801      	ldr	r0, [pc, #4]	@ (80025c0 <DMA1_Channel1_IRQHandler+0x8>)
 80025ba:	f001 bb47 	b.w	8003c4c <HAL_DMA_IRQHandler>
 80025be:	bf00      	nop
 80025c0:	20000484 	.word	0x20000484

080025c4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025c4:	4801      	ldr	r0, [pc, #4]	@ (80025cc <TIM3_IRQHandler+0x8>)
 80025c6:	f003 b983 	b.w	80058d0 <HAL_TIM_IRQHandler>
 80025ca:	bf00      	nop
 80025cc:	20002158 	.word	0x20002158

080025d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80025d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025d4:	f001 bcb2 	b.w	8003f3c <HAL_GPIO_EXTI_IRQHandler>

080025d8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d8:	490c      	ldr	r1, [pc, #48]	@ (800260c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025da:	4a0d      	ldr	r2, [pc, #52]	@ (8002610 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80025dc:	680b      	ldr	r3, [r1, #0]
{
 80025de:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e0:	4c0c      	ldr	r4, [pc, #48]	@ (8002614 <_sbrk+0x3c>)
 80025e2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80025e4:	b12b      	cbz	r3, 80025f2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e6:	4418      	add	r0, r3
 80025e8:	4290      	cmp	r0, r2
 80025ea:	d807      	bhi.n	80025fc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80025ec:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <_sbrk+0x40>)
 80025f4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80025f6:	4418      	add	r0, r3
 80025f8:	4290      	cmp	r0, r2
 80025fa:	d9f7      	bls.n	80025ec <_sbrk+0x14>
    errno = ENOMEM;
 80025fc:	f005 faaa 	bl	8007b54 <__errno>
 8002600:	230c      	movs	r3, #12
 8002602:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd10      	pop	{r4, pc}
 800260c:	20002154 	.word	0x20002154
 8002610:	20050000 	.word	0x20050000
 8002614:	00000400 	.word	0x00000400
 8002618:	20002388 	.word	0x20002388

0800261c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800261c:	480e      	ldr	r0, [pc, #56]	@ (8002658 <SystemInit+0x3c>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800261e:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <SystemInit+0x40>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002620:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8002624:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8002628:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 800262c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800262e:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002636:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 800263e:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002642:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8002646:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8002648:	60d8      	str	r0, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002650:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002652:	6199      	str	r1, [r3, #24]
}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00
 800265c:	40021000 	.word	0x40021000

08002660 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002660:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002662:	481a      	ldr	r0, [pc, #104]	@ (80026cc <MX_TIM3_Init+0x6c>)
 8002664:	4a1a      	ldr	r2, [pc, #104]	@ (80026d0 <MX_TIM3_Init+0x70>)
 8002666:	6002      	str	r2, [r0, #0]
{
 8002668:	b089      	sub	sp, #36	@ 0x24
  htim3.Init.Prescaler = 23;
 800266a:	2217      	movs	r2, #23
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800266c:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 23;
 800266e:	6042      	str	r2, [r0, #4]
 8002670:	22c3      	movs	r2, #195	@ 0xc3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002672:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002676:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800267a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.Prescaler = 23;
 800267e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002682:	9303      	str	r3, [sp, #12]
  htim3.Init.Prescaler = 23;
 8002684:	6103      	str	r3, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 195;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002686:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002688:	f002 ffa0 	bl	80055cc <HAL_TIM_Base_Init>
 800268c:	b998      	cbnz	r0, 80026b6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800268e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002692:	480e      	ldr	r0, [pc, #56]	@ (80026cc <MX_TIM3_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002694:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002696:	a904      	add	r1, sp, #16
 8002698:	f003 f866 	bl	8005768 <HAL_TIM_ConfigClockSource>
 800269c:	b998      	cbnz	r0, 80026c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800269e:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026a2:	480a      	ldr	r0, [pc, #40]	@ (80026cc <MX_TIM3_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026a4:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026a6:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026aa:	f003 f9bd 	bl	8005a28 <HAL_TIMEx_MasterConfigSynchronization>
 80026ae:	b928      	cbnz	r0, 80026bc <MX_TIM3_Init+0x5c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026b0:	b009      	add	sp, #36	@ 0x24
 80026b2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80026b6:	f7fe fb7d 	bl	8000db4 <Error_Handler>
 80026ba:	e7e8      	b.n	800268e <MX_TIM3_Init+0x2e>
    Error_Handler();
 80026bc:	f7fe fb7a 	bl	8000db4 <Error_Handler>
}
 80026c0:	b009      	add	sp, #36	@ 0x24
 80026c2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80026c6:	f7fe fb75 	bl	8000db4 <Error_Handler>
 80026ca:	e7e8      	b.n	800269e <MX_TIM3_Init+0x3e>
 80026cc:	20002158 	.word	0x20002158
 80026d0:	40000400 	.word	0x40000400

080026d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 80026d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <HAL_TIM_Base_MspInit+0x3c>)
 80026d6:	6802      	ldr	r2, [r0, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d000      	beq.n	80026de <HAL_TIM_Base_MspInit+0xa>
 80026dc:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026de:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
{
 80026e2:	b500      	push	{lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e4:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80026e6:	f041 0102 	orr.w	r1, r1, #2
 80026ea:	6599      	str	r1, [r3, #88]	@ 0x58
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
{
 80026ee:	b083      	sub	sp, #12

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026f0:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026f8:	201d      	movs	r0, #29
 80026fa:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026fc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026fe:	f000 fec3 	bl	8003488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002702:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002704:	b003      	add	sp, #12
 8002706:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800270a:	f000 bef9 	b.w	8003500 <HAL_NVIC_EnableIRQ>
 800270e:	bf00      	nop
 8002710:	40000400 	.word	0x40000400
 8002714:	00000000 	.word	0x00000000

08002718 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002718:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8002750 <MX_LPUART1_UART_Init+0x38>
{
 800271c:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 800271e:	480e      	ldr	r0, [pc, #56]	@ (8002758 <MX_LPUART1_UART_Init+0x40>)
 8002720:	4c0e      	ldr	r4, [pc, #56]	@ (800275c <MX_LPUART1_UART_Init+0x44>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002722:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 115200;
 8002724:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002728:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = 115200;
 800272a:	e9c0 4100 	strd	r4, r1, [r0]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800272e:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002732:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002736:	e9c0 3204 	strd	r3, r2, [r0, #16]
 800273a:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800273c:	f003 fdca 	bl	80062d4 <HAL_UART_Init>
 8002740:	b900      	cbnz	r0, 8002744 <MX_LPUART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002742:	bd10      	pop	{r4, pc}
 8002744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002748:	f7fe bb34 	b.w	8000db4 <Error_Handler>
 800274c:	f3af 8000 	nop.w
	...
 8002758:	200021a8 	.word	0x200021a8
 800275c:	40008000 	.word	0x40008000

08002760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002760:	b510      	push	{r4, lr}
 8002762:	4604      	mov	r4, r0
 8002764:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002766:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002768:	228c      	movs	r2, #140	@ 0x8c
 800276a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002770:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002774:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002776:	f005 f98f 	bl	8007a98 <memset>
  if(uartHandle->Instance==LPUART1)
 800277a:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <HAL_UART_MspInit+0x90>)
 800277c:	6822      	ldr	r2, [r4, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002782:	b02a      	add	sp, #168	@ 0xa8
 8002784:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002786:	2220      	movs	r2, #32
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800278c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800278e:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002790:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002792:	f002 f9c9 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8002796:	bb20      	cbnz	r0, 80027e2 <HAL_UART_MspInit+0x82>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002798:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <HAL_UART_MspInit+0x94>)
 800279a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027a4:	f002 0201 	and.w	r2, r2, #1
 80027a8:	9200      	str	r2, [sp, #0]
 80027aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80027ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027b2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80027b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 80027be:	f001 fc11 	bl	8003fe4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80027c2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80027e8 <HAL_UART_MspInit+0x88>
 80027c6:	2200      	movs	r2, #0
 80027c8:	2303      	movs	r3, #3
 80027ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027ce:	480a      	ldr	r0, [pc, #40]	@ (80027f8 <HAL_UART_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80027d0:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027d2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80027d4:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80027d8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027da:	f001 fa85 	bl	8003ce8 <HAL_GPIO_Init>
}
 80027de:	b02a      	add	sp, #168	@ 0xa8
 80027e0:	bd10      	pop	{r4, pc}
      Error_Handler();
 80027e2:	f7fe fae7 	bl	8000db4 <Error_Handler>
 80027e6:	e7d7      	b.n	8002798 <HAL_UART_MspInit+0x38>
 80027e8:	00000180 	.word	0x00000180
 80027ec:	00000002 	.word	0x00000002
 80027f0:	40008000 	.word	0x40008000
 80027f4:	40021000 	.word	0x40021000
 80027f8:	48001800 	.word	0x48001800

080027fc <start_cycle_count>:

#if (PERF_COUNT == 1)

volatile uint8_t counting_cycles = 0;

void start_cycle_count() {
 80027fc:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002802:	b672      	cpsid	i
	uint32_t prim = __get_PRIMASK();
	__disable_irq();
	if (counting_cycles) {
 8002804:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <start_cycle_count+0x34>)
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	b95a      	cbnz	r2, 8002822 <start_cycle_count+0x26>
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
		Error_Handler();
	} else {
		counting_cycles = 1;
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
	}
	if (!prim) {
 800280e:	b904      	cbnz	r4, 8002812 <start_cycle_count+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 8002810:	b662      	cpsie	i
		__enable_irq();
	}
	DWT->CTRL |= 1 ; // enable the counter
 8002812:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <start_cycle_count+0x38>)
 8002814:	681a      	ldr	r2, [r3, #0]
	DWT->CYCCNT = 0; // reset the counter
 8002816:	2100      	movs	r1, #0
	DWT->CTRL |= 1 ; // enable the counter
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
	DWT->CYCCNT = 0; // reset the counter
 800281e:	6059      	str	r1, [r3, #4]
}
 8002820:	bd10      	pop	{r4, pc}
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
 8002822:	4805      	ldr	r0, [pc, #20]	@ (8002838 <start_cycle_count+0x3c>)
 8002824:	f004 ffa4 	bl	8007770 <puts>
		Error_Handler();
 8002828:	f7fe fac4 	bl	8000db4 <Error_Handler>
 800282c:	e7ef      	b.n	800280e <start_cycle_count+0x12>
 800282e:	bf00      	nop
 8002830:	20002230 	.word	0x20002230
 8002834:	e0001000 	.word	0xe0001000
 8002838:	08009358 	.word	0x08009358

0800283c <stop_cycle_count>:
void stop_cycle_count(char *s) {
 800283c:	b538      	push	{r3, r4, r5, lr}
	uint32_t res = DWT->CYCCNT;
 800283e:	4909      	ldr	r1, [pc, #36]	@ (8002864 <stop_cycle_count+0x28>)
	counting_cycles = 0;
 8002840:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <stop_cycle_count+0x2c>)
	uint32_t res = DWT->CYCCNT;
 8002842:	684d      	ldr	r5, [r1, #4]
void stop_cycle_count(char *s) {
 8002844:	4604      	mov	r4, r0
	counting_cycles = 0;
 8002846:	2200      	movs	r2, #0
	printf("[PERF] ");
 8002848:	4808      	ldr	r0, [pc, #32]	@ (800286c <stop_cycle_count+0x30>)
	counting_cycles = 0;
 800284a:	701a      	strb	r2, [r3, #0]
	printf("[PERF] ");
 800284c:	f004 ff28 	bl	80076a0 <iprintf>
	printf(s);
 8002850:	4620      	mov	r0, r4
 8002852:	f004 ff25 	bl	80076a0 <iprintf>
	printf(" %lu cycles.\r\n", res);
 8002856:	4629      	mov	r1, r5
 8002858:	4805      	ldr	r0, [pc, #20]	@ (8002870 <stop_cycle_count+0x34>)
}
 800285a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf(" %lu cycles.\r\n", res);
 800285e:	f004 bf1f 	b.w	80076a0 <iprintf>
 8002862:	bf00      	nop
 8002864:	e0001000 	.word	0xe0001000
 8002868:	20002230 	.word	0x20002230
 800286c:	0800937c 	.word	0x0800937c
 8002870:	08009384 	.word	0x08009384

08002874 <hex_encode>:


// Encode the binary buffer buf of length len in the null-terminated string s
// (which must have length at least 2*len+1).
void hex_encode(char* s, const uint8_t* buf, size_t len) {
    s[2*len] = '\0';
 8002874:	2300      	movs	r3, #0
 8002876:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
 800287a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
    for (size_t i=0; i<len; i++) {
 800287e:	b18a      	cbz	r2, 80028a4 <hex_encode+0x30>
 8002880:	4a09      	ldr	r2, [pc, #36]	@ (80028a8 <hex_encode+0x34>)
 8002882:	3901      	subs	r1, #1
 8002884:	4484      	add	ip, r0
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002886:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800288a:	091b      	lsrs	r3, r3, #4
    for (size_t i=0; i<len; i++) {
 800288c:	3002      	adds	r0, #2
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	f800 3c02 	strb.w	r3, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002894:	780b      	ldrb	r3, [r1, #0]
 8002896:	f003 030f 	and.w	r3, r3, #15
    for (size_t i=0; i<len; i++) {
 800289a:	4584      	cmp	ip, r0
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	f800 3c01 	strb.w	r3, [r0, #-1]
    for (size_t i=0; i<len; i++) {
 80028a2:	d1f0      	bne.n	8002886 <hex_encode+0x12>
    }
}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	08009394 	.word	0x08009394

080028ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028b0:	f7ff feb4 	bl	800261c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b4:	480c      	ldr	r0, [pc, #48]	@ (80028e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80028b6:	490d      	ldr	r1, [pc, #52]	@ (80028ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80028b8:	4a0d      	ldr	r2, [pc, #52]	@ (80028f0 <LoopForever+0xe>)
  movs r3, #0
 80028ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028bc:	e002      	b.n	80028c4 <LoopCopyDataInit>

080028be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c2:	3304      	adds	r3, #4

080028c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c8:	d3f9      	bcc.n	80028be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028cc:	4c0a      	ldr	r4, [pc, #40]	@ (80028f8 <LoopForever+0x16>)
  movs r3, #0
 80028ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d0:	e001      	b.n	80028d6 <LoopFillZerobss>

080028d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d4:	3204      	adds	r2, #4

080028d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d8:	d3fb      	bcc.n	80028d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028da:	f005 f941 	bl	8007b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028de:	f7fe fae3 	bl	8000ea8 <main>

080028e2 <LoopForever>:

LoopForever:
    b LoopForever
 80028e2:	e7fe      	b.n	80028e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80028e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ec:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 80028f0:	0801b254 	.word	0x0801b254
  ldr r2, =_sbss
 80028f4:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 80028f8:	20002384 	.word	0x20002384

080028fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028fc:	e7fe      	b.n	80028fc <ADC1_2_IRQHandler>
	...

08002900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002900:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002902:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <HAL_InitTick+0x40>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b90b      	cbnz	r3, 800290c <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002908:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800290a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800290c:	490d      	ldr	r1, [pc, #52]	@ (8002944 <HAL_InitTick+0x44>)
 800290e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002912:	4605      	mov	r5, r0
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	6808      	ldr	r0, [r1, #0]
 800291a:	fbb0 f0f3 	udiv	r0, r0, r3
 800291e:	f000 fdfd 	bl	800351c <HAL_SYSTICK_Config>
 8002922:	4604      	mov	r4, r0
 8002924:	2800      	cmp	r0, #0
 8002926:	d1ef      	bne.n	8002908 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002928:	2d0f      	cmp	r5, #15
 800292a:	d8ed      	bhi.n	8002908 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	4602      	mov	r2, r0
 800292e:	4629      	mov	r1, r5
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f000 fda8 	bl	8003488 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002938:	4b03      	ldr	r3, [pc, #12]	@ (8002948 <HAL_InitTick+0x48>)
 800293a:	4620      	mov	r0, r4
 800293c:	601d      	str	r5, [r3, #0]
}
 800293e:	bd38      	pop	{r3, r4, r5, pc}
 8002940:	20000404 	.word	0x20000404
 8002944:	20000400 	.word	0x20000400
 8002948:	20000408 	.word	0x20000408

0800294c <HAL_Init>:
{
 800294c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294e:	2003      	movs	r0, #3
 8002950:	f000 fd88 	bl	8003464 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002954:	2000      	movs	r0, #0
 8002956:	f7ff ffd3 	bl	8002900 <HAL_InitTick>
 800295a:	b110      	cbz	r0, 8002962 <HAL_Init+0x16>
    status = HAL_ERROR;
 800295c:	2401      	movs	r4, #1
}
 800295e:	4620      	mov	r0, r4
 8002960:	bd10      	pop	{r4, pc}
 8002962:	4604      	mov	r4, r0
    HAL_MspInit();
 8002964:	f7ff fdfa 	bl	800255c <HAL_MspInit>
}
 8002968:	4620      	mov	r0, r4
 800296a:	bd10      	pop	{r4, pc}

0800296c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800296c:	4a03      	ldr	r2, [pc, #12]	@ (800297c <HAL_IncTick+0x10>)
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <HAL_IncTick+0x14>)
 8002970:	6811      	ldr	r1, [r2, #0]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	440b      	add	r3, r1
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20002234 	.word	0x20002234
 8002980:	20000404 	.word	0x20000404

08002984 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002984:	4b01      	ldr	r3, [pc, #4]	@ (800298c <HAL_GetTick+0x8>)
 8002986:	6818      	ldr	r0, [r3, #0]
}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20002234 	.word	0x20002234

08002990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002990:	b538      	push	{r3, r4, r5, lr}
 8002992:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff fff6 	bl	8002984 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002998:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800299a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800299c:	d002      	beq.n	80029a4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 800299e:	4b04      	ldr	r3, [pc, #16]	@ (80029b0 <HAL_Delay+0x20>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029a4:	f7ff ffee 	bl	8002984 <HAL_GetTick>
 80029a8:	1b40      	subs	r0, r0, r5
 80029aa:	42a0      	cmp	r0, r4
 80029ac:	d3fa      	bcc.n	80029a4 <HAL_Delay+0x14>
  {
  }
}
 80029ae:	bd38      	pop	{r3, r4, r5, pc}
 80029b0:	20000404 	.word	0x20000404

080029b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029b4:	b530      	push	{r4, r5, lr}
 80029b6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80029bc:	2800      	cmp	r0, #0
 80029be:	f000 809f 	beq.w	8002b00 <HAL_ADC_Init+0x14c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029c2:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 80029c4:	4604      	mov	r4, r0
 80029c6:	2d00      	cmp	r5, #0
 80029c8:	f000 809f 	beq.w	8002b0a <HAL_ADC_Init+0x156>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029cc:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029ce:	6893      	ldr	r3, [r2, #8]
 80029d0:	009d      	lsls	r5, r3, #2
 80029d2:	d505      	bpl.n	80029e0 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029d4:	6893      	ldr	r3, [r2, #8]
 80029d6:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80029da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029de:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029e0:	6893      	ldr	r3, [r2, #8]
 80029e2:	00d8      	lsls	r0, r3, #3
 80029e4:	d419      	bmi.n	8002a1a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b54 <HAL_ADC_Init+0x1a0>)
 80029e8:	485b      	ldr	r0, [pc, #364]	@ (8002b58 <HAL_ADC_Init+0x1a4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80029ec:	6891      	ldr	r1, [r2, #8]
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	fba0 0303 	umull	r0, r3, r0, r3
 80029f4:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002a06:	6091      	str	r1, [r2, #8]
 8002a08:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002a0a:	9b01      	ldr	r3, [sp, #4]
 8002a0c:	b12b      	cbz	r3, 8002a1a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8002a0e:	9b01      	ldr	r3, [sp, #4]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002a14:	9b01      	ldr	r3, [sp, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f9      	bne.n	8002a0e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a1a:	6893      	ldr	r3, [r2, #8]
 8002a1c:	00d9      	lsls	r1, r3, #3
 8002a1e:	d472      	bmi.n	8002b06 <HAL_ADC_Init+0x152>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a22:	f043 0310 	orr.w	r3, r3, #16
 8002a26:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a28:	6de3      	ldr	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a2a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2c:	4303      	orrs	r3, r0
 8002a2e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a30:	6893      	ldr	r3, [r2, #8]
 8002a32:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a38:	d15e      	bne.n	8002af8 <HAL_ADC_Init+0x144>
 8002a3a:	06db      	lsls	r3, r3, #27
 8002a3c:	d45c      	bmi.n	8002af8 <HAL_ADC_Init+0x144>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a4a:	6893      	ldr	r3, [r2, #8]
 8002a4c:	07dd      	lsls	r5, r3, #31
 8002a4e:	d410      	bmi.n	8002a72 <HAL_ADC_Init+0xbe>
 8002a50:	4942      	ldr	r1, [pc, #264]	@ (8002b5c <HAL_ADC_Init+0x1a8>)
 8002a52:	4b43      	ldr	r3, [pc, #268]	@ (8002b60 <HAL_ADC_Init+0x1ac>)
 8002a54:	6889      	ldr	r1, [r1, #8]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	4942      	ldr	r1, [pc, #264]	@ (8002b64 <HAL_ADC_Init+0x1b0>)
 8002a5c:	6889      	ldr	r1, [r1, #8]
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	07d9      	lsls	r1, r3, #31
 8002a62:	d406      	bmi.n	8002a72 <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a64:	4940      	ldr	r1, [pc, #256]	@ (8002b68 <HAL_ADC_Init+0x1b4>)
 8002a66:	6865      	ldr	r5, [r4, #4]
 8002a68:	688b      	ldr	r3, [r1, #8]
 8002a6a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002a6e:	432b      	orrs	r3, r5
 8002a70:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8002a72:	68e5      	ldr	r5, [r4, #12]
 8002a74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a76:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8002a7a:	432b      	orrs	r3, r5
 8002a7c:	68a5      	ldr	r5, [r4, #8]
 8002a7e:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a80:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a82:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8002a84:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a8c:	d04b      	beq.n	8002b26 <HAL_ADC_Init+0x172>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a8e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002a90:	b121      	cbz	r1, 8002a9c <HAL_ADC_Init+0xe8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8002a92:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a94:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002a98:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a9a:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a9c:	68d5      	ldr	r5, [r2, #12]
 8002a9e:	4933      	ldr	r1, [pc, #204]	@ (8002b6c <HAL_ADC_Init+0x1b8>)
 8002aa0:	4029      	ands	r1, r5
 8002aa2:	4319      	orrs	r1, r3
 8002aa4:	60d1      	str	r1, [r2, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002aa6:	6893      	ldr	r3, [r2, #8]
 8002aa8:	071b      	lsls	r3, r3, #28
 8002aaa:	d416      	bmi.n	8002ada <HAL_ADC_Init+0x126>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002aac:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ab0:	7e25      	ldrb	r5, [r4, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ab2:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ab4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ab6:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 8002aba:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002abc:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8002ac0:	f021 0106 	bic.w	r1, r1, #6
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ac4:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002aca:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d02e      	beq.n	8002b30 <HAL_ADC_Init+0x17c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ad2:	6913      	ldr	r3, [r2, #16]
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ada:	6923      	ldr	r3, [r4, #16]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d01a      	beq.n	8002b16 <HAL_ADC_Init+0x162>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ae0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002ae2:	f023 030f 	bic.w	r3, r3, #15
 8002ae6:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ae8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002af4:	b003      	add	sp, #12
 8002af6:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002afa:	f043 0310 	orr.w	r3, r3, #16
 8002afe:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 8002b00:	2001      	movs	r0, #1
}
 8002b02:	b003      	add	sp, #12
 8002b04:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b06:	2000      	movs	r0, #0
 8002b08:	e792      	b.n	8002a30 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8002b0a:	f7fd fd8d 	bl	8000628 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b0e:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002b10:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8002b14:	e75a      	b.n	80029cc <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b16:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002b18:	69e3      	ldr	r3, [r4, #28]
 8002b1a:	f021 010f 	bic.w	r1, r1, #15
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b24:	e7e0      	b.n	8002ae8 <HAL_ADC_Init+0x134>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b26:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002b28:	3901      	subs	r1, #1
 8002b2a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002b2e:	e7ae      	b.n	8002a8e <HAL_ADC_Init+0xda>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b30:	6911      	ldr	r1, [r2, #16]
 8002b32:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002b34:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8002b36:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8002b3a:	f021 0104 	bic.w	r1, r1, #4
 8002b3e:	432b      	orrs	r3, r5
 8002b40:	430b      	orrs	r3, r1
 8002b42:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002b44:	430b      	orrs	r3, r1
 8002b46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6113      	str	r3, [r2, #16]
 8002b50:	e7c3      	b.n	8002ada <HAL_ADC_Init+0x126>
 8002b52:	bf00      	nop
 8002b54:	20000400 	.word	0x20000400
 8002b58:	053e2d63 	.word	0x053e2d63
 8002b5c:	50040000 	.word	0x50040000
 8002b60:	50040100 	.word	0x50040100
 8002b64:	50040200 	.word	0x50040200
 8002b68:	50040300 	.word	0x50040300
 8002b6c:	fff0c007 	.word	0xfff0c007

08002b70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b70:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b72:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002b74:	f7fd fe9c 	bl	80008b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b78:	bd08      	pop	{r3, pc}
 8002b7a:	bf00      	nop

08002b7c <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop

08002b80 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b80:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b82:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b84:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8002b88:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b8c:	d11d      	bne.n	8002bca <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b8e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b94:	659a      	str	r2, [r3, #88]	@ 0x58
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b96:	680a      	ldr	r2, [r1, #0]
 8002b98:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b9c:	68ca      	ldr	r2, [r1, #12]
 8002b9e:	d01b      	beq.n	8002bd8 <ADC_DMAConvCplt+0x58>
 8002ba0:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8002ba4:	d10d      	bne.n	8002bc2 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ba6:	68ca      	ldr	r2, [r1, #12]
 8002ba8:	0494      	lsls	r4, r2, #18
 8002baa:	d40a      	bmi.n	8002bc2 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bb2:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bb6:	04d1      	lsls	r1, r2, #19
 8002bb8:	d403      	bmi.n	8002bc2 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fdfe 	bl	80007c4 <HAL_ADC_ConvCpltCallback>
}
 8002bc8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bca:	06d2      	lsls	r2, r2, #27
 8002bcc:	d40a      	bmi.n	8002be4 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
 8002bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd6:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002bd8:	0790      	lsls	r0, r2, #30
 8002bda:	d5e7      	bpl.n	8002bac <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fdf1 	bl	80007c4 <HAL_ADC_ConvCpltCallback>
 8002be2:	e7f1      	b.n	8002bc8 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ffc9 	bl	8002b7c <HAL_ADC_ErrorCallback>
}
 8002bea:	bd10      	pop	{r4, pc}

08002bec <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bec:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8002bee:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bf0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bf6:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bf8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
 8002bfe:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c00:	f7ff ffbc 	bl	8002b7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c04:	bd08      	pop	{r3, pc}
 8002c06:	bf00      	nop

08002c08 <HAL_ADC_ConfigChannel>:
{
 8002c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8002c0c:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
{
 8002c10:	b082      	sub	sp, #8
 8002c12:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002c14:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002c16:	f04f 0000 	mov.w	r0, #0
 8002c1a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002c1c:	f000 812f 	beq.w	8002e7e <HAL_ADC_ConfigChannel+0x276>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c20:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c28:	68a2      	ldr	r2, [r4, #8]
 8002c2a:	f012 0c04 	ands.w	ip, r2, #4
 8002c2e:	d155      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0xd4>
    uint32_t config_rank = pConfig->Rank;
 8002c30:	6848      	ldr	r0, [r1, #4]
    if (pConfig->Rank <= 5U)
 8002c32:	2805      	cmp	r0, #5
 8002c34:	f240 8096 	bls.w	8002d64 <HAL_ADC_ConfigChannel+0x15c>
  MODIFY_REG(*preg,
 8002c38:	f000 051f 	and.w	r5, r0, #31
 8002c3c:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c40:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8002c42:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c46:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8002c4a:	ea6f 0e0e 	mvn.w	lr, lr
 8002c4e:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c50:	f104 0030 	add.w	r0, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8002c54:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002c58:	40aa      	lsls	r2, r5
 8002c5a:	f850 500c 	ldr.w	r5, [r0, ip]
 8002c5e:	ea05 050e 	and.w	r5, r5, lr
 8002c62:	432a      	orrs	r2, r5
 8002c64:	f840 200c 	str.w	r2, [r0, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c68:	68a2      	ldr	r2, [r4, #8]
 8002c6a:	0757      	lsls	r7, r2, #29
 8002c6c:	d540      	bpl.n	8002cf0 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c6e:	68a2      	ldr	r2, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c70:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c72:	68a0      	ldr	r0, [r4, #8]
 8002c74:	07c5      	lsls	r5, r0, #31
 8002c76:	d412      	bmi.n	8002c9e <HAL_ADC_ConfigChannel+0x96>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c78:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002c7a:	48af      	ldr	r0, [pc, #700]	@ (8002f38 <HAL_ADC_ConfigChannel+0x330>)
 8002c7c:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8002c80:	f006 0718 	and.w	r7, r6, #24
 8002c84:	40f8      	lsrs	r0, r7
 8002c86:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8002c8a:	4010      	ands	r0, r2
 8002c8c:	ea25 0507 	bic.w	r5, r5, r7
 8002c90:	4328      	orrs	r0, r5
 8002c92:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c96:	48a9      	ldr	r0, [pc, #676]	@ (8002f3c <HAL_ADC_ConfigChannel+0x334>)
 8002c98:	4286      	cmp	r6, r0
 8002c9a:	f000 80a0 	beq.w	8002dde <HAL_ADC_ConfigChannel+0x1d6>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c9e:	49a8      	ldr	r1, [pc, #672]	@ (8002f40 <HAL_ADC_ConfigChannel+0x338>)
 8002ca0:	420a      	tst	r2, r1
 8002ca2:	d019      	beq.n	8002cd8 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ca4:	48a7      	ldr	r0, [pc, #668]	@ (8002f44 <HAL_ADC_ConfigChannel+0x33c>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ca6:	4da8      	ldr	r5, [pc, #672]	@ (8002f48 <HAL_ADC_ConfigChannel+0x340>)
 8002ca8:	6881      	ldr	r1, [r0, #8]
 8002caa:	42aa      	cmp	r2, r5
 8002cac:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8002cb0:	d06e      	beq.n	8002d90 <HAL_ADC_ConfigChannel+0x188>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cb2:	4da6      	ldr	r5, [pc, #664]	@ (8002f4c <HAL_ADC_ConfigChannel+0x344>)
 8002cb4:	42aa      	cmp	r2, r5
 8002cb6:	f000 80e6 	beq.w	8002e86 <HAL_ADC_ConfigChannel+0x27e>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cba:	4da5      	ldr	r5, [pc, #660]	@ (8002f50 <HAL_ADC_ConfigChannel+0x348>)
 8002cbc:	42aa      	cmp	r2, r5
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0xd0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cc0:	024a      	lsls	r2, r1, #9
 8002cc2:	d409      	bmi.n	8002cd8 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cc4:	4aa3      	ldr	r2, [pc, #652]	@ (8002f54 <HAL_ADC_ConfigChannel+0x34c>)
 8002cc6:	4294      	cmp	r4, r2
 8002cc8:	d106      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cca:	6882      	ldr	r2, [r0, #8]
 8002ccc:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002cd0:	4332      	orrs	r2, r6
 8002cd2:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002cd6:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd8:	2000      	movs	r0, #0
 8002cda:	e003      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002cde:	f042 0220 	orr.w	r2, r2, #32
 8002ce2:	659a      	str	r2, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8002cea:	b002      	add	sp, #8
 8002cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cf0:	68a0      	ldr	r0, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cf2:	680a      	ldr	r2, [r1, #0]
 8002cf4:	0706      	lsls	r6, r0, #28
 8002cf6:	d4bc      	bmi.n	8002c72 <HAL_ADC_ConfigChannel+0x6a>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002cf8:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8002cfa:	f3c2 5604 	ubfx	r6, r2, #20, #5
 8002cfe:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d00:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 8002d02:	40b0      	lsls	r0, r6
 8002d04:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d08:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8002d0c:	ea6f 0000 	mvn.w	r0, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d10:	f104 0714 	add.w	r7, r4, #20
 8002d14:	f000 8107 	beq.w	8002f26 <HAL_ADC_ConfigChannel+0x31e>
  MODIFY_REG(*preg,
 8002d18:	40b5      	lsls	r5, r6
 8002d1a:	58be      	ldr	r6, [r7, r2]
 8002d1c:	4030      	ands	r0, r6
 8002d1e:	4328      	orrs	r0, r5
 8002d20:	50b8      	str	r0, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d22:	6962      	ldr	r2, [r4, #20]
 8002d24:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d28:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d2a:	e9d1 7004 	ldrd	r7, r0, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d2e:	680a      	ldr	r2, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d30:	68e5      	ldr	r5, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d32:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d34:	f104 0660 	add.w	r6, r4, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d38:	4694      	mov	ip, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d3a:	f000 80cc 	beq.w	8002ed6 <HAL_ADC_ConfigChannel+0x2ce>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d3e:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8002d42:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 8002d44:	f856 c027 	ldr.w	ip, [r6, r7, lsl #2]
 8002d48:	40a8      	lsls	r0, r5
 8002d4a:	4d83      	ldr	r5, [pc, #524]	@ (8002f58 <HAL_ADC_ConfigChannel+0x350>)
 8002d4c:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002d50:	ea0c 0505 	and.w	r5, ip, r5
 8002d54:	4315      	orrs	r5, r2
 8002d56:	4328      	orrs	r0, r5
 8002d58:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8002d5c:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d60:	680a      	ldr	r2, [r1, #0]
}
 8002d62:	e786      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x6a>
      switch (pConfig->Rank)
 8002d64:	3802      	subs	r0, #2
 8002d66:	2803      	cmp	r0, #3
 8002d68:	d903      	bls.n	8002d72 <HAL_ADC_ConfigChannel+0x16a>
    if (pConfig->Rank <= 5U)
 8002d6a:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 8002d6e:	2506      	movs	r5, #6
 8002d70:	e76d      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x46>
 8002d72:	4a7a      	ldr	r2, [pc, #488]	@ (8002f5c <HAL_ADC_ConfigChannel+0x354>)
 8002d74:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
  MODIFY_REG(*preg,
 8002d78:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d7c:	09aa      	lsrs	r2, r5, #6
  MODIFY_REG(*preg,
 8002d7e:	f005 051f 	and.w	r5, r5, #31
 8002d82:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d86:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8002d8a:	ea6f 0e0e 	mvn.w	lr, lr
 8002d8e:	e75e      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x46>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d90:	0208      	lsls	r0, r1, #8
 8002d92:	d4a1      	bmi.n	8002cd8 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d94:	4a6f      	ldr	r2, [pc, #444]	@ (8002f54 <HAL_ADC_ConfigChannel+0x34c>)
 8002d96:	4294      	cmp	r4, r2
 8002d98:	d003      	beq.n	8002da2 <HAL_ADC_ConfigChannel+0x19a>
 8002d9a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8002d9e:	4294      	cmp	r4, r2
 8002da0:	d19a      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002da2:	4968      	ldr	r1, [pc, #416]	@ (8002f44 <HAL_ADC_ConfigChannel+0x33c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002da4:	486e      	ldr	r0, [pc, #440]	@ (8002f60 <HAL_ADC_ConfigChannel+0x358>)
 8002da6:	688a      	ldr	r2, [r1, #8]
 8002da8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002dac:	4332      	orrs	r2, r6
 8002dae:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002db2:	608a      	str	r2, [r1, #8]
 8002db4:	6802      	ldr	r2, [r0, #0]
 8002db6:	496b      	ldr	r1, [pc, #428]	@ (8002f64 <HAL_ADC_ConfigChannel+0x35c>)
 8002db8:	0992      	lsrs	r2, r2, #6
 8002dba:	fba1 1202 	umull	r1, r2, r1, r2
 8002dbe:	0992      	lsrs	r2, r2, #6
 8002dc0:	3201      	adds	r2, #1
 8002dc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002dc6:	0092      	lsls	r2, r2, #2
 8002dc8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002dca:	9a01      	ldr	r2, [sp, #4]
 8002dcc:	2a00      	cmp	r2, #0
 8002dce:	d083      	beq.n	8002cd8 <HAL_ADC_ConfigChannel+0xd0>
            wait_loop_index--;
 8002dd0:	9a01      	ldr	r2, [sp, #4]
 8002dd2:	3a01      	subs	r2, #1
 8002dd4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002dd6:	9a01      	ldr	r2, [sp, #4]
 8002dd8:	2a00      	cmp	r2, #0
 8002dda:	d1f9      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x1c8>
 8002ddc:	e77c      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dde:	2f00      	cmp	r7, #0
 8002de0:	d065      	beq.n	8002eae <HAL_ADC_ConfigChannel+0x2a6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	fa92 f0a2 	rbit	r0, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002de6:	2800      	cmp	r0, #0
 8002de8:	f000 80be 	beq.w	8002f68 <HAL_ADC_ConfigChannel+0x360>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002dec:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df0:	3001      	adds	r0, #1
 8002df2:	f000 001f 	and.w	r0, r0, #31
 8002df6:	2809      	cmp	r0, #9
 8002df8:	f240 80b6 	bls.w	8002f68 <HAL_ADC_ConfigChannel+0x360>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002e00:	2800      	cmp	r0, #0
 8002e02:	f000 814d 	beq.w	80030a0 <HAL_ADC_ConfigChannel+0x498>
  return __builtin_clz(value);
 8002e06:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	0680      	lsls	r0, r0, #26
 8002e0e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8002e16:	2d00      	cmp	r5, #0
 8002e18:	f000 8147 	beq.w	80030aa <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002e1c:	fab5 f585 	clz	r5, r5
 8002e20:	3501      	adds	r5, #1
 8002e22:	f005 051f 	and.w	r5, r5, #31
 8002e26:	2601      	movs	r6, #1
 8002e28:	fa06 f505 	lsl.w	r5, r6, r5
 8002e2c:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002e32:	2a00      	cmp	r2, #0
 8002e34:	f000 8137 	beq.w	80030a6 <HAL_ADC_ConfigChannel+0x49e>
  return __builtin_clz(value);
 8002e38:	fab2 f282 	clz	r2, r2
 8002e3c:	1c55      	adds	r5, r2, #1
 8002e3e:	f005 051f 	and.w	r5, r5, #31
 8002e42:	2203      	movs	r2, #3
 8002e44:	f06f 061d 	mvn.w	r6, #29
 8002e48:	fb12 6205 	smlabb	r2, r2, r5, r6
 8002e4c:	0512      	lsls	r2, r2, #20
 8002e4e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e52:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e54:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 8002e56:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e58:	f006 0604 	and.w	r6, r6, #4
 8002e5c:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8002e60:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8002e64:	fa00 f702 	lsl.w	r7, r0, r2
 8002e68:	f04f 0c07 	mov.w	ip, #7
 8002e6c:	59a8      	ldr	r0, [r5, r6]
 8002e6e:	fa0c f202 	lsl.w	r2, ip, r2
 8002e72:	ea20 0202 	bic.w	r2, r0, r2
 8002e76:	433a      	orrs	r2, r7
 8002e78:	51aa      	str	r2, [r5, r6]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e7a:	680a      	ldr	r2, [r1, #0]
}
 8002e7c:	e70f      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8002e7e:	2002      	movs	r0, #2
}
 8002e80:	b002      	add	sp, #8
 8002e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e86:	01c9      	lsls	r1, r1, #7
 8002e88:	f53f af26 	bmi.w	8002cd8 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e8c:	4a31      	ldr	r2, [pc, #196]	@ (8002f54 <HAL_ADC_ConfigChannel+0x34c>)
 8002e8e:	4294      	cmp	r4, r2
 8002e90:	d004      	beq.n	8002e9c <HAL_ADC_ConfigChannel+0x294>
 8002e92:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8002e96:	4294      	cmp	r4, r2
 8002e98:	f47f af1e 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e9c:	4929      	ldr	r1, [pc, #164]	@ (8002f44 <HAL_ADC_ConfigChannel+0x33c>)
 8002e9e:	688a      	ldr	r2, [r1, #8]
 8002ea0:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002ea4:	4332      	orrs	r2, r6
 8002ea6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002eaa:	608a      	str	r2, [r1, #8]
}
 8002eac:	e714      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eae:	0e92      	lsrs	r2, r2, #26
 8002eb0:	3201      	adds	r2, #1
 8002eb2:	f002 051f 	and.w	r5, r2, #31
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	0692      	lsls	r2, r2, #26
 8002eba:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002ebe:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec0:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ec2:	ea40 0002 	orr.w	r0, r0, r2
 8002ec6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eca:	d971      	bls.n	8002fb0 <HAL_ADC_ConfigChannel+0x3a8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ecc:	3a1e      	subs	r2, #30
 8002ece:	0512      	lsls	r2, r2, #20
 8002ed0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002ed4:	e7bd      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x24a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ed6:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002ed8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eda:	f3c2 0512 	ubfx	r5, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ede:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ee2:	2d00      	cmp	r5, #0
 8002ee4:	d166      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x3ac>
 8002ee6:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eea:	4290      	cmp	r0, r2
 8002eec:	f000 80a8 	beq.w	8003040 <HAL_ADC_ConfigChannel+0x438>
 8002ef0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8002ef2:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ef4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002ef8:	4290      	cmp	r0, r2
 8002efa:	f000 808c 	beq.w	8003016 <HAL_ADC_ConfigChannel+0x40e>
 8002efe:	68b0      	ldr	r0, [r6, #8]
 8002f00:	68b0      	ldr	r0, [r6, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f02:	f106 0708 	add.w	r7, r6, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f06:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002f0a:	4290      	cmp	r0, r2
 8002f0c:	f000 80aa 	beq.w	8003064 <HAL_ADC_ConfigChannel+0x45c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f10:	68f0      	ldr	r0, [r6, #12]
 8002f12:	68f0      	ldr	r0, [r6, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f14:	f106 050c 	add.w	r5, r6, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f18:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002f1c:	4282      	cmp	r2, r0
 8002f1e:	f000 80b6 	beq.w	800308e <HAL_ADC_ConfigChannel+0x486>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f22:	4662      	mov	r2, ip
 8002f24:	e6a5      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x6a>
  MODIFY_REG(*preg,
 8002f26:	58bd      	ldr	r5, [r7, r2]
 8002f28:	4028      	ands	r0, r5
 8002f2a:	50b8      	str	r0, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f2c:	6962      	ldr	r2, [r4, #20]
 8002f2e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002f32:	6162      	str	r2, [r4, #20]
}
 8002f34:	e6f9      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x122>
 8002f36:	bf00      	nop
 8002f38:	0007ffff 	.word	0x0007ffff
 8002f3c:	407f0000 	.word	0x407f0000
 8002f40:	80080000 	.word	0x80080000
 8002f44:	50040300 	.word	0x50040300
 8002f48:	c7520000 	.word	0xc7520000
 8002f4c:	cb840000 	.word	0xcb840000
 8002f50:	80000001 	.word	0x80000001
 8002f54:	50040000 	.word	0x50040000
 8002f58:	03fff000 	.word	0x03fff000
 8002f5c:	080093a8 	.word	0x080093a8
 8002f60:	20000400 	.word	0x20000400
 8002f64:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	f000 80a0 	beq.w	80030b2 <HAL_ADC_ConfigChannel+0x4aa>
  return __builtin_clz(value);
 8002f72:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f76:	3001      	adds	r0, #1
 8002f78:	0680      	lsls	r0, r0, #26
 8002f7a:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8002f82:	2d00      	cmp	r5, #0
 8002f84:	f000 8093 	beq.w	80030ae <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8002f88:	fab5 f585 	clz	r5, r5
 8002f8c:	3501      	adds	r5, #1
 8002f8e:	f005 051f 	and.w	r5, r5, #31
 8002f92:	2601      	movs	r6, #1
 8002f94:	fa06 f505 	lsl.w	r5, r6, r5
 8002f98:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	d07b      	beq.n	800309a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002fa2:	fab2 f282 	clz	r2, r2
 8002fa6:	3201      	adds	r2, #1
 8002fa8:	f002 021f 	and.w	r2, r2, #31
 8002fac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002fb0:	0512      	lsls	r2, r2, #20
 8002fb2:	e74e      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x24a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8002fb8:	b11d      	cbz	r5, 8002fc2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002fba:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fbe:	42a8      	cmp	r0, r5
 8002fc0:	d03e      	beq.n	8003040 <HAL_ADC_ConfigChannel+0x438>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fc2:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8002fc4:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fc6:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	fa9c f5ac 	rbit	r5, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fce:	f106 0708 	add.w	r7, r6, #8
 8002fd2:	46be      	mov	lr, r7
  if (value == 0U)
 8002fd4:	b11d      	cbz	r5, 8002fde <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002fd6:	fab5 f585 	clz	r5, r5
 8002fda:	4285      	cmp	r5, r0
 8002fdc:	d01d      	beq.n	800301a <HAL_ADC_ConfigChannel+0x412>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fde:	68b0      	ldr	r0, [r6, #8]
 8002fe0:	68b0      	ldr	r0, [r6, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fe2:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fea:	f106 050c 	add.w	r5, r6, #12
 8002fee:	46a8      	mov	r8, r5
  if (value == 0U)
 8002ff0:	f1be 0f00 	cmp.w	lr, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_ADC_ConfigChannel+0x3f6>
  return __builtin_clz(value);
 8002ff6:	fabe fe8e 	clz	lr, lr
 8002ffa:	4586      	cmp	lr, r0
 8002ffc:	d034      	beq.n	8003068 <HAL_ADC_ConfigChannel+0x460>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ffe:	68f0      	ldr	r0, [r6, #12]
 8003000:	68f0      	ldr	r0, [r6, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003002:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 800300a:	2e00      	cmp	r6, #0
 800300c:	f43f ae31 	beq.w	8002c72 <HAL_ADC_ConfigChannel+0x6a>
  return __builtin_clz(value);
 8003010:	fab6 f286 	clz	r2, r6
 8003014:	e782      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x314>
 8003016:	f106 0e08 	add.w	lr, r6, #8
  MODIFY_REG(*preg,
 800301a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800301c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003020:	6662      	str	r2, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003022:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003026:	68b2      	ldr	r2, [r6, #8]
 8003028:	68b0      	ldr	r0, [r6, #8]
 800302a:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800302e:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003030:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003034:	4662      	mov	r2, ip
 8003036:	2d00      	cmp	r5, #0
 8003038:	d1d5      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x3de>
 800303a:	f3cc 6284 	ubfx	r2, ip, #26, #5
 800303e:	e764      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x302>
  MODIFY_REG(*preg,
 8003040:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003042:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003046:	6622      	str	r2, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003048:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800304c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800304e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003050:	f3cc 0512 	ubfx	r5, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003054:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003058:	4662      	mov	r2, ip
 800305a:	2d00      	cmp	r5, #0
 800305c:	d1b5      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x3c2>
 800305e:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8003062:	e749      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x2f0>
 8003064:	f106 080c 	add.w	r8, r6, #12
  MODIFY_REG(*preg,
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800306e:	603a      	str	r2, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003070:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003074:	68f2      	ldr	r2, [r6, #12]
 8003076:	68f0      	ldr	r0, [r6, #12]
 8003078:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800307c:	4645      	mov	r5, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800307e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003082:	4662      	mov	r2, ip
 8003084:	2e00      	cmp	r6, #0
 8003086:	d1be      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x3fe>
 8003088:	f3cc 6284 	ubfx	r2, ip, #26, #5
 800308c:	e746      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x314>
  MODIFY_REG(*preg,
 800308e:	682a      	ldr	r2, [r5, #0]
 8003090:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003094:	602a      	str	r2, [r5, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003096:	680a      	ldr	r2, [r1, #0]
}
 8003098:	e5eb      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x6a>
 800309a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800309e:	e6d8      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x24a>
 80030a0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80030a4:	e6b5      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x20a>
 80030a6:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <HAL_ADC_ConfigChannel+0x4b0>)
 80030a8:	e6d3      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x24a>
 80030aa:	2502      	movs	r5, #2
 80030ac:	e6be      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x224>
 80030ae:	2502      	movs	r5, #2
 80030b0:	e772      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x390>
 80030b2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80030b6:	e762      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x376>
 80030b8:	fe500000 	.word	0xfe500000

080030bc <ADC_Enable>:
{
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80030c0:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c2:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 80030c4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	07d2      	lsls	r2, r2, #31
 80030ca:	d42c      	bmi.n	8003126 <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030cc:	6899      	ldr	r1, [r3, #8]
 80030ce:	4a28      	ldr	r2, [pc, #160]	@ (8003170 <ADC_Enable+0xb4>)
 80030d0:	4211      	tst	r1, r2
 80030d2:	4604      	mov	r4, r0
 80030d4:	d12a      	bne.n	800312c <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 80030d6:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030d8:	4926      	ldr	r1, [pc, #152]	@ (8003174 <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 80030da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030de:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030e8:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	d429      	bmi.n	8003142 <ADC_Enable+0x86>
    tickstart = HAL_GetTick();
 80030ee:	f7ff fc49 	bl	8002984 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 80030f8:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030fa:	d414      	bmi.n	8003126 <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 80030fc:	4e1e      	ldr	r6, [pc, #120]	@ (8003178 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	07d0      	lsls	r0, r2, #31
 8003102:	d404      	bmi.n	800310e <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	4032      	ands	r2, r6
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800310e:	f7ff fc39 	bl	8002984 <HAL_GetTick>
 8003112:	1b43      	subs	r3, r0, r5
 8003114:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003116:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003118:	d902      	bls.n	8003120 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	07d1      	lsls	r1, r2, #31
 800311e:	d505      	bpl.n	800312c <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	07d2      	lsls	r2, r2, #31
 8003124:	d5eb      	bpl.n	80030fe <ADC_Enable+0x42>
  return HAL_OK;
 8003126:	2000      	movs	r0, #0
}
 8003128:	b002      	add	sp, #8
 800312a:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800312e:	f043 0310 	orr.w	r3, r3, #16
 8003132:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003134:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003136:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 800313e:	b002      	add	sp, #8
 8003140:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003142:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <ADC_Enable+0xc0>)
 8003144:	4a0e      	ldr	r2, [pc, #56]	@ (8003180 <ADC_Enable+0xc4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	3301      	adds	r3, #1
 8003152:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800315a:	9b01      	ldr	r3, [sp, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0c6      	beq.n	80030ee <ADC_Enable+0x32>
        wait_loop_index--;
 8003160:	9b01      	ldr	r3, [sp, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003166:	9b01      	ldr	r3, [sp, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f9      	bne.n	8003160 <ADC_Enable+0xa4>
 800316c:	e7bf      	b.n	80030ee <ADC_Enable+0x32>
 800316e:	bf00      	nop
 8003170:	8000003f 	.word	0x8000003f
 8003174:	50040300 	.word	0x50040300
 8003178:	7fffffc0 	.word	0x7fffffc0
 800317c:	20000400 	.word	0x20000400
 8003180:	053e2d63 	.word	0x053e2d63

08003184 <HAL_ADC_Start_DMA>:
{
 8003184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003188:	4b36      	ldr	r3, [pc, #216]	@ (8003264 <HAL_ADC_Start_DMA+0xe0>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800318a:	6806      	ldr	r6, [r0, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
{
 800318e:	460d      	mov	r5, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003190:	68b1      	ldr	r1, [r6, #8]
 8003192:	0749      	lsls	r1, r1, #29
 8003194:	d417      	bmi.n	80031c6 <HAL_ADC_Start_DMA+0x42>
 8003196:	4617      	mov	r7, r2
    __HAL_LOCK(hadc);
 8003198:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 800319c:	2a01      	cmp	r2, #1
 800319e:	4604      	mov	r4, r0
 80031a0:	d011      	beq.n	80031c6 <HAL_ADC_Start_DMA+0x42>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031a2:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80031a6:	4b30      	ldr	r3, [pc, #192]	@ (8003268 <HAL_ADC_Start_DMA+0xe4>)
    __HAL_LOCK(hadc);
 80031a8:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80031aa:	429e      	cmp	r6, r3
    __HAL_LOCK(hadc);
 80031ac:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80031b0:	d00c      	beq.n	80031cc <HAL_ADC_Start_DMA+0x48>
 80031b2:	f240 2121 	movw	r1, #545	@ 0x221
 80031b6:	fa21 f108 	lsr.w	r1, r1, r8
 80031ba:	4001      	ands	r1, r0
 80031bc:	d106      	bne.n	80031cc <HAL_ADC_Start_DMA+0x48>
      __HAL_UNLOCK(hadc);
 80031be:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
}
 80031c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 80031c6:	2002      	movs	r0, #2
}
 80031c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7ff ff75 	bl	80030bc <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d13c      	bne.n	8003250 <HAL_ADC_Start_DMA+0xcc>
        ADC_STATE_CLR_SET(hadc->State,
 80031d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031d8:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80031da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e6:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031e8:	4b20      	ldr	r3, [pc, #128]	@ (800326c <HAL_ADC_Start_DMA+0xe8>)
 80031ea:	4299      	cmp	r1, r3
 80031ec:	d035      	beq.n	800325a <HAL_ADC_Start_DMA+0xd6>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80031f4:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031f8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031fa:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031fe:	bf18      	it	ne
 8003200:	6de3      	ldrne	r3, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003202:	462a      	mov	r2, r5
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003204:	bf18      	it	ne
 8003206:	f023 0306 	bicne.w	r3, r3, #6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800320a:	4d19      	ldr	r5, [pc, #100]	@ (8003270 <HAL_ADC_Start_DMA+0xec>)
          ADC_CLEAR_ERRORCODE(hadc);
 800320c:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800320e:	62c5      	str	r5, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003210:	4d18      	ldr	r5, [pc, #96]	@ (8003274 <HAL_ADC_Start_DMA+0xf0>)
 8003212:	6305      	str	r5, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003214:	4d18      	ldr	r5, [pc, #96]	@ (8003278 <HAL_ADC_Start_DMA+0xf4>)
 8003216:	6345      	str	r5, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003218:	251c      	movs	r5, #28
 800321a:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 800321c:	2500      	movs	r5, #0
 800321e:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003222:	684d      	ldr	r5, [r1, #4]
 8003224:	f045 0510 	orr.w	r5, r5, #16
 8003228:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800322a:	68cd      	ldr	r5, [r1, #12]
 800322c:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003230:	463b      	mov	r3, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003232:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003234:	3140      	adds	r1, #64	@ 0x40
 8003236:	f000 fcc5 	bl	8003bc4 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800323a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800323c:	6893      	ldr	r3, [r2, #8]
 800323e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003242:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6093      	str	r3, [r2, #8]
}
 800324c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8003250:	2300      	movs	r3, #0
 8003252:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8003256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800325a:	f1b8 0f00 	cmp.w	r8, #0
 800325e:	d1ca      	bne.n	80031f6 <HAL_ADC_Start_DMA+0x72>
 8003260:	e7c5      	b.n	80031ee <HAL_ADC_Start_DMA+0x6a>
 8003262:	bf00      	nop
 8003264:	50040300 	.word	0x50040300
 8003268:	50040200 	.word	0x50040200
 800326c:	50040100 	.word	0x50040100
 8003270:	08002b81 	.word	0x08002b81
 8003274:	08002b71 	.word	0x08002b71
 8003278:	08002bed 	.word	0x08002bed

0800327c <ADC_Disable>:
{
 800327c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800327e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	0795      	lsls	r5, r2, #30
 8003284:	d502      	bpl.n	800328c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003286:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003288:	2000      	movs	r0, #0
}
 800328a:	bd38      	pop	{r3, r4, r5, pc}
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	07d4      	lsls	r4, r2, #31
 8003290:	d5fa      	bpl.n	8003288 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	f002 020d 	and.w	r2, r2, #13
 8003298:	2a01      	cmp	r2, #1
 800329a:	4604      	mov	r4, r0
 800329c:	d009      	beq.n	80032b2 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032a0:	f043 0310 	orr.w	r3, r3, #16
 80032a4:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80032ae:	2001      	movs	r0, #1
}
 80032b0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032b8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032bc:	2103      	movs	r1, #3
 80032be:	f042 0202 	orr.w	r2, r2, #2
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80032c6:	f7ff fb5d 	bl	8002984 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80032d0:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032d2:	d403      	bmi.n	80032dc <ADC_Disable+0x60>
 80032d4:	e7d8      	b.n	8003288 <ADC_Disable+0xc>
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	07db      	lsls	r3, r3, #31
 80032da:	d5d5      	bpl.n	8003288 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032dc:	f7ff fb52 	bl	8002984 <HAL_GetTick>
 80032e0:	1b40      	subs	r0, r0, r5
 80032e2:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032e4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032e6:	d9f6      	bls.n	80032d6 <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	07d2      	lsls	r2, r2, #31
 80032ec:	d5f3      	bpl.n	80032d6 <ADC_Disable+0x5a>
 80032ee:	e7d6      	b.n	800329e <ADC_Disable+0x22>

080032f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80032f0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032f2:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 80032f6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80032f8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80032fa:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 80032fc:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80032fe:	d03f      	beq.n	8003380 <HAL_ADCEx_Calibration_Start+0x90>
 8003300:	2301      	movs	r3, #1
 8003302:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003306:	4604      	mov	r4, r0
 8003308:	460d      	mov	r5, r1
 800330a:	f7ff ffb7 	bl	800327c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800330e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 8003310:	b9e0      	cbnz	r0, 800334c <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 8003312:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003316:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800331a:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 8003322:	6893      	ldr	r3, [r2, #8]
 8003324:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003328:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 800332c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003330:	430b      	orrs	r3, r1
 8003332:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003336:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003338:	6893      	ldr	r3, [r2, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	db0e      	blt.n	800335c <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003340:	f023 0303 	bic.w	r3, r3, #3
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	65a3      	str	r3, [r4, #88]	@ 0x58
 800334a:	e002      	b.n	8003352 <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334c:	f043 0310 	orr.w	r3, r3, #16
 8003350:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003352:	2300      	movs	r3, #0
 8003354:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8003358:	b003      	add	sp, #12
 800335a:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 800335c:	9b01      	ldr	r3, [sp, #4]
 800335e:	3301      	adds	r3, #1
 8003360:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003362:	9b01      	ldr	r3, [sp, #4]
 8003364:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003368:	d3e6      	bcc.n	8003338 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800336a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800336c:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8003370:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8003372:	f043 0310 	orr.w	r3, r3, #16
 8003376:	65a3      	str	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8003378:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
        return HAL_ERROR;
 800337c:	2001      	movs	r0, #1
 800337e:	e7eb      	b.n	8003358 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8003380:	2002      	movs	r0, #2
}
 8003382:	b003      	add	sp, #12
 8003384:	bd30      	pop	{r4, r5, pc}
 8003386:	bf00      	nop

08003388 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003388:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800338a:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800338e:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8003390:	2a01      	cmp	r2, #1
{
 8003392:	b09a      	sub	sp, #104	@ 0x68
  __HAL_LOCK(hadc);
 8003394:	d044      	beq.n	8003420 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003396:	4603      	mov	r3, r0

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003398:	4d2e      	ldr	r5, [pc, #184]	@ (8003454 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 800339a:	681c      	ldr	r4, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800339c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800339e:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033a0:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033a2:	9216      	str	r2, [sp, #88]	@ 0x58
  __HAL_LOCK(hadc);
 80033a4:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033a8:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033aa:	d008      	beq.n	80033be <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ac:	6d99      	ldr	r1, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b2:	f041 0120 	orr.w	r1, r1, #32
 80033b6:	6599      	str	r1, [r3, #88]	@ 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80033b8:	b01a      	add	sp, #104	@ 0x68
 80033ba:	bcf0      	pop	{r4, r5, r6, r7}
 80033bc:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033be:	4a26      	ldr	r2, [pc, #152]	@ (8003458 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 80033c0:	6890      	ldr	r0, [r2, #8]
 80033c2:	0740      	lsls	r0, r0, #29
 80033c4:	d50b      	bpl.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80033c6:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033ca:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80033ce:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	659a      	str	r2, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 80033d8:	b01a      	add	sp, #104	@ 0x68
 80033da:	bcf0      	pop	{r4, r5, r6, r7}
 80033dc:	4770      	bx	lr
 80033de:	68a0      	ldr	r0, [r4, #8]
 80033e0:	0747      	lsls	r7, r0, #29
 80033e2:	d4f1      	bmi.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033e4:	b306      	cbz	r6, 8003428 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033e6:	4f1d      	ldr	r7, [pc, #116]	@ (800345c <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 80033e8:	684d      	ldr	r5, [r1, #4]
 80033ea:	68b8      	ldr	r0, [r7, #8]
 80033ec:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80033f0:	4328      	orrs	r0, r5
 80033f2:	f893 5030 	ldrb.w	r5, [r3, #48]	@ 0x30
 80033f6:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 80033fa:	60b8      	str	r0, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033fc:	68a0      	ldr	r0, [r4, #8]
 80033fe:	6892      	ldr	r2, [r2, #8]
 8003400:	4302      	orrs	r2, r0
 8003402:	4817      	ldr	r0, [pc, #92]	@ (8003460 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003404:	6880      	ldr	r0, [r0, #8]
 8003406:	4302      	orrs	r2, r0
 8003408:	07d5      	lsls	r5, r2, #31
 800340a:	d420      	bmi.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        MODIFY_REG(tmpADC_Common->CCR,
 800340c:	68b8      	ldr	r0, [r7, #8]
 800340e:	688a      	ldr	r2, [r1, #8]
 8003410:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 8003414:	4332      	orrs	r2, r6
 8003416:	f021 010f 	bic.w	r1, r1, #15
 800341a:	430a      	orrs	r2, r1
 800341c:	60ba      	str	r2, [r7, #8]
 800341e:	e016      	b.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8003420:	2002      	movs	r0, #2
}
 8003422:	b01a      	add	sp, #104	@ 0x68
 8003424:	bcf0      	pop	{r4, r5, r6, r7}
 8003426:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003428:	480c      	ldr	r0, [pc, #48]	@ (800345c <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 800342a:	6881      	ldr	r1, [r0, #8]
 800342c:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003430:	6081      	str	r1, [r0, #8]
 8003432:	490b      	ldr	r1, [pc, #44]	@ (8003460 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003434:	68a4      	ldr	r4, [r4, #8]
 8003436:	6892      	ldr	r2, [r2, #8]
 8003438:	6889      	ldr	r1, [r1, #8]
 800343a:	4322      	orrs	r2, r4
 800343c:	430a      	orrs	r2, r1
 800343e:	07d4      	lsls	r4, r2, #31
 8003440:	d405      	bmi.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003442:	6882      	ldr	r2, [r0, #8]
 8003444:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003448:	f022 020f 	bic.w	r2, r2, #15
 800344c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344e:	2000      	movs	r0, #0
 8003450:	e7bf      	b.n	80033d2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003452:	bf00      	nop
 8003454:	50040000 	.word	0x50040000
 8003458:	50040100 	.word	0x50040100
 800345c:	50040300 	.word	0x50040300
 8003460:	50040200 	.word	0x50040200

08003464 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003464:	4907      	ldr	r1, [pc, #28]	@ (8003484 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003466:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003468:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800346a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800346e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003472:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003474:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003476:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800347a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800347e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003488:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <HAL_NVIC_SetPriority+0x70>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003490:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003492:	f1c3 0e07 	rsb	lr, r3, #7
 8003496:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349e:	bf28      	it	cs
 80034a0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a4:	f1bc 0f06 	cmp.w	ip, #6
 80034a8:	d91c      	bls.n	80034e4 <HAL_NVIC_SetPriority+0x5c>
 80034aa:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
 80034b2:	fa03 f30c 	lsl.w	r3, r3, ip
 80034b6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	fa03 f30e 	lsl.w	r3, r3, lr
 80034c2:	ea21 0303 	bic.w	r3, r1, r3
 80034c6:	fa03 f30c 	lsl.w	r3, r3, ip
 80034ca:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034cc:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80034ce:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80034d2:	db0a      	blt.n	80034ea <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80034d8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80034dc:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80034e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80034e4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	4694      	mov	ip, r2
 80034e8:	e7e7      	b.n	80034ba <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	4a04      	ldr	r2, [pc, #16]	@ (80034fc <HAL_NVIC_SetPriority+0x74>)
 80034ec:	f000 000f 	and.w	r0, r0, #15
 80034f0:	4402      	add	r2, r0
 80034f2:	7613      	strb	r3, [r2, #24]
 80034f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80034f8:	e000ed00 	.word	0xe000ed00
 80034fc:	e000ecfc 	.word	0xe000ecfc

08003500 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003500:	2800      	cmp	r0, #0
 8003502:	db07      	blt.n	8003514 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003504:	4a04      	ldr	r2, [pc, #16]	@ (8003518 <HAL_NVIC_EnableIRQ+0x18>)
 8003506:	0941      	lsrs	r1, r0, #5
 8003508:	2301      	movs	r3, #1
 800350a:	f000 001f 	and.w	r0, r0, #31
 800350e:	4083      	lsls	r3, r0
 8003510:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	e000e100 	.word	0xe000e100

0800351c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800351c:	3801      	subs	r0, #1
 800351e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003522:	d301      	bcc.n	8003528 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003524:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003526:	4770      	bx	lr
{
 8003528:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800352a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352e:	4c07      	ldr	r4, [pc, #28]	@ (800354c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003530:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003532:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003536:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800353a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800353e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003540:	619a      	str	r2, [r3, #24]
}
 8003542:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003546:	6119      	str	r1, [r3, #16]
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <CRYP_SetKey>:
  */
static HAL_StatusTypeDef  CRYP_SetKey(CRYP_HandleTypeDef *hcryp)
{
  uint32_t keyaddr;

  if (hcryp->Init.pKey == NULL)
 8003550:	6a03      	ldr	r3, [r0, #32]
 8003552:	b32b      	cbz	r3, 80035a0 <CRYP_SetKey+0x50>
{
 8003554:	b410      	push	{r4}
  }


  keyaddr = (uint32_t)(hcryp->Init.pKey);

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003556:	68c4      	ldr	r4, [r0, #12]
  {
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8003558:	6802      	ldr	r2, [r0, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 800355a:	f5b4 2f80 	cmp.w	r4, #262144	@ 0x40000
  keyaddr = (uint32_t)(hcryp->Init.pKey);
 800355e:	4619      	mov	r1, r3
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003560:	d10e      	bne.n	8003580 <CRYP_SetKey+0x30>
  return __builtin_bswap32(value);
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	ba00      	rev	r0, r0
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8003566:	63d0      	str	r0, [r2, #60]	@ 0x3c
 8003568:	6858      	ldr	r0, [r3, #4]
 800356a:	ba00      	rev	r0, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR6 = __REV(*(uint32_t*)(keyaddr));
 800356c:	6390      	str	r0, [r2, #56]	@ 0x38
 800356e:	6898      	ldr	r0, [r3, #8]
 8003570:	ba00      	rev	r0, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR5 = __REV(*(uint32_t*)(keyaddr));
 8003572:	6350      	str	r0, [r2, #52]	@ 0x34
 8003574:	68d8      	ldr	r0, [r3, #12]
    keyaddr+=4U;
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4U;
 8003576:	f103 0110 	add.w	r1, r3, #16
 800357a:	ba00      	rev	r0, r0
  }

  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 800357c:	460b      	mov	r3, r1
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
 800357e:	6310      	str	r0, [r2, #48]	@ 0x30
 8003580:	681b      	ldr	r3, [r3, #0]
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4U;
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));

  return HAL_OK;
}
 8003582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003586:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 8003588:	61d3      	str	r3, [r2, #28]
 800358a:	684b      	ldr	r3, [r1, #4]
 800358c:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR2 = __REV(*(uint32_t*)(keyaddr));
 800358e:	6193      	str	r3, [r2, #24]
 8003590:	688b      	ldr	r3, [r1, #8]
 8003592:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
 8003594:	6153      	str	r3, [r2, #20]
 8003596:	68cb      	ldr	r3, [r1, #12]
 8003598:	ba1b      	rev	r3, r3
  return HAL_OK;
 800359a:	2000      	movs	r0, #0
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));
 800359c:	6113      	str	r3, [r2, #16]
}
 800359e:	4770      	bx	lr
    return HAL_ERROR;
 80035a0:	2001      	movs	r0, #1
}
 80035a2:	4770      	bx	lr

080035a4 <HAL_CRYP_Init>:
  if(hcryp == NULL)
 80035a4:	2800      	cmp	r0, #0
 80035a6:	f000 80a3 	beq.w	80036f0 <HAL_CRYP_Init+0x14c>
  if (hcryp->Init.OperatingMode != CRYP_ALGOMODE_KEYDERIVATION)
 80035aa:	6902      	ldr	r2, [r0, #16]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 80035ac:	2a18      	cmp	r2, #24
{
 80035ae:	b570      	push	{r4, r5, r6, lr}
 80035b0:	4604      	mov	r4, r0
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 80035b2:	d04d      	beq.n	8003650 <HAL_CRYP_Init+0xac>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80035b4:	2a08      	cmp	r2, #8
 80035b6:	d03e      	beq.n	8003636 <HAL_CRYP_Init+0x92>
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 80035b8:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 80035bc:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d03e      	beq.n	8003642 <HAL_CRYP_Init+0x9e>
  __HAL_CRYP_DISABLE(hcryp);
 80035c4:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80035c6:	68e1      	ldr	r1, [r4, #12]
  hcryp->State = HAL_CRYP_STATE_BUSY;
 80035c8:	2302      	movs	r3, #2
 80035ca:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	602b      	str	r3, [r5, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80035d6:	682b      	ldr	r3, [r5, #0]
 80035d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035dc:	430b      	orrs	r3, r1
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80035de:	2a08      	cmp	r2, #8
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80035e0:	f04f 010a 	mov.w	r1, #10
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80035e4:	602b      	str	r3, [r5, #0]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80035e6:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80035ea:	d065      	beq.n	80036b8 <HAL_CRYP_Init+0x114>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80035ec:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 80035f0:	2e60      	cmp	r6, #96	@ 0x60
 80035f2:	d033      	beq.n	800365c <HAL_CRYP_Init+0xb8>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80035f4:	6829      	ldr	r1, [r5, #0]
 80035f6:	68a3      	ldr	r3, [r4, #8]
 80035f8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80035fc:	f021 017e 	bic.w	r1, r1, #126	@ 0x7e
 8003600:	4333      	orrs	r3, r6
 8003602:	430b      	orrs	r3, r1
 8003604:	4313      	orrs	r3, r2
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003606:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 800360a:	602b      	str	r3, [r5, #0]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 800360c:	d060      	beq.n	80036d0 <HAL_CRYP_Init+0x12c>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 800360e:	2800      	cmp	r0, #0
 8003610:	d04c      	beq.n	80036ac <HAL_CRYP_Init+0x108>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8003612:	2e00      	cmp	r6, #0
 8003614:	d13a      	bne.n	800368c <HAL_CRYP_Init+0xe8>
  hcryp->CrypInCount = 0;
 8003616:	2200      	movs	r2, #0
 8003618:	2300      	movs	r3, #0
 800361a:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 800361e:	2000      	movs	r0, #0
  hcryp->State = HAL_CRYP_STATE_READY;
 8003620:	2301      	movs	r3, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003622:	65a0      	str	r0, [r4, #88]	@ 0x58
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003624:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hcryp->State = HAL_CRYP_STATE_READY;
 8003628:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
  __HAL_CRYP_ENABLE(hcryp);
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	602b      	str	r3, [r5, #0]
}
 8003634:	bd70      	pop	{r4, r5, r6, pc}
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003636:	6943      	ldr	r3, [r0, #20]
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800363c:	d1bc      	bne.n	80035b8 <HAL_CRYP_Init+0x14>
    return HAL_ERROR;
 800363e:	2001      	movs	r0, #1
}
 8003640:	bd70      	pop	{r4, r5, r6, pc}
    hcryp->Lock = HAL_UNLOCKED;
 8003642:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
    HAL_CRYP_MspInit(hcryp);
 8003646:	4620      	mov	r0, r4
 8003648:	f7fd f9e4 	bl	8000a14 <HAL_CRYP_MspInit>
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800364c:	6922      	ldr	r2, [r4, #16]
 800364e:	e7b9      	b.n	80035c4 <HAL_CRYP_Init+0x20>
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
 8003650:	6943      	ldr	r3, [r0, #20]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003652:	f023 0120 	bic.w	r1, r3, #32
 8003656:	2940      	cmp	r1, #64	@ 0x40
 8003658:	d1ee      	bne.n	8003638 <HAL_CRYP_Init+0x94>
 800365a:	e7f0      	b.n	800363e <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003662:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8003666:	4313      	orrs	r3, r2
 8003668:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800366c:	602b      	str	r3, [r5, #0]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 800366e:	682b      	ldr	r3, [r5, #0]
 8003670:	69e2      	ldr	r2, [r4, #28]
 8003672:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8003676:	4313      	orrs	r3, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003678:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 800367a:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 800367c:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003680:	b920      	cbnz	r0, 800368c <HAL_CRYP_Init+0xe8>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003682:	4620      	mov	r0, r4
 8003684:	f7ff ff64 	bl	8003550 <CRYP_SetKey>
 8003688:	2800      	cmp	r0, #0
 800368a:	d1d8      	bne.n	800363e <HAL_CRYP_Init+0x9a>
    hcryp->Instance->IVR0 = 0;
  }
  else
#endif
  {
    if (hcryp->Init.pInitVect == NULL)
 800368c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0d5      	beq.n	800363e <HAL_CRYP_Init+0x9a>
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	ba12      	rev	r2, r2
      return HAL_ERROR;
    }

    ivaddr = (uint32_t)(hcryp->Init.pInitVect);

    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 8003696:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	ba12      	rev	r2, r2
    ivaddr+=4U;
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 800369c:	62aa      	str	r2, [r5, #40]	@ 0x28
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	ba12      	rev	r2, r2
    ivaddr+=4U;
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 80036a2:	626a      	str	r2, [r5, #36]	@ 0x24
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	ba1b      	rev	r3, r3
    ivaddr+=4U;
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 80036a8:	622b      	str	r3, [r5, #32]
 80036aa:	e7b4      	b.n	8003616 <HAL_CRYP_Init+0x72>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80036ac:	4620      	mov	r0, r4
 80036ae:	f7ff ff4f 	bl	8003550 <CRYP_SetKey>
 80036b2:	2800      	cmp	r0, #0
 80036b4:	d0ad      	beq.n	8003612 <HAL_CRYP_Init+0x6e>
 80036b6:	e7c2      	b.n	800363e <HAL_CRYP_Init+0x9a>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 80036b8:	682b      	ldr	r3, [r5, #0]
 80036ba:	f023 0318 	bic.w	r3, r3, #24
 80036be:	f043 0308 	orr.w	r3, r3, #8
    if (CRYP_SetKey(hcryp) != HAL_OK)
 80036c2:	4620      	mov	r0, r4
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 80036c4:	602b      	str	r3, [r5, #0]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 80036c6:	f7ff ff43 	bl	8003550 <CRYP_SetKey>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d0a3      	beq.n	8003616 <HAL_CRYP_Init+0x72>
 80036ce:	e7b6      	b.n	800363e <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	69e2      	ldr	r2, [r4, #28]
 80036d4:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80036d8:	4313      	orrs	r3, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80036da:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80036dc:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80036de:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80036e2:	b138      	cbz	r0, 80036f4 <HAL_CRYP_Init+0x150>
    hcryp->Instance->IVR3 = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	62eb      	str	r3, [r5, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 80036e8:	62ab      	str	r3, [r5, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 80036ea:	626b      	str	r3, [r5, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 80036ec:	622b      	str	r3, [r5, #32]
 80036ee:	e792      	b.n	8003616 <HAL_CRYP_Init+0x72>
    return HAL_ERROR;
 80036f0:	2001      	movs	r0, #1
}
 80036f2:	4770      	bx	lr
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80036f4:	4620      	mov	r0, r4
 80036f6:	f7ff ff2b 	bl	8003550 <CRYP_SetKey>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d19f      	bne.n	800363e <HAL_CRYP_Init+0x9a>
 80036fe:	e7f1      	b.n	80036e4 <HAL_CRYP_Init+0x140>

08003700 <HAL_CRYP_DeInit>:
  if(hcryp == NULL)
 8003700:	b1c0      	cbz	r0, 8003734 <HAL_CRYP_DeInit+0x34>
  hcryp->CrypInCount = 0;
 8003702:	2200      	movs	r2, #0
 8003704:	2300      	movs	r3, #0
{
 8003706:	b510      	push	{r4, lr}
  hcryp->CrypInCount = 0;
 8003708:	e9c0 2310 	strd	r2, r3, [r0, #64]	@ 0x40
  hcryp->State = HAL_CRYP_STATE_BUSY;
 800370c:	2102      	movs	r1, #2
  __HAL_CRYP_DISABLE(hcryp);
 800370e:	6802      	ldr	r2, [r0, #0]
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003710:	f880 1055 	strb.w	r1, [r0, #85]	@ 0x55
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 8003714:	2301      	movs	r3, #1
 8003716:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  __HAL_CRYP_DISABLE(hcryp);
 800371a:	6813      	ldr	r3, [r2, #0]
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	4604      	mov	r4, r0
 8003722:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 8003724:	f7fd f98e 	bl	8000a44 <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8003728:	2000      	movs	r0, #0
 800372a:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  __HAL_UNLOCK(hcryp);
 800372e:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
}
 8003732:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003734:	2001      	movs	r0, #1
}
 8003736:	4770      	bx	lr

08003738 <HAL_CRYP_AESCBC_Encrypt>:
{
 8003738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800373c:	b083      	sub	sp, #12
 800373e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  if(hcryp == NULL)
 8003742:	2800      	cmp	r0, #0
 8003744:	d073      	beq.n	800382e <HAL_CRYP_AESCBC_Encrypt+0xf6>
  hcryp->CrypInCount = 0;
 8003746:	ed9f 7b7a 	vldr	d7, [pc, #488]	@ 8003930 <HAL_CRYP_AESCBC_Encrypt+0x1f8>
 800374a:	ed80 7b10 	vstr	d7, [r0, #64]	@ 0x40
 800374e:	4616      	mov	r6, r2
 8003750:	461f      	mov	r7, r3
  __HAL_CRYP_DISABLE(hcryp);
 8003752:	6802      	ldr	r2, [r0, #0]
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 8003754:	2301      	movs	r3, #1
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003756:	f04f 0902 	mov.w	r9, #2
 800375a:	f880 9055 	strb.w	r9, [r0, #85]	@ 0x55
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 800375e:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  __HAL_CRYP_DISABLE(hcryp);
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	4604      	mov	r4, r0
 800376a:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 800376c:	460d      	mov	r5, r1
 800376e:	f7fd f969 	bl	8000a44 <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8003772:	2000      	movs	r0, #0
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 8003774:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 8003938 <HAL_CRYP_AESCBC_Encrypt+0x200>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8003778:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 800377c:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
  __HAL_UNLOCK(hcryp);
 8003780:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 8003784:	ed84 7b04 	vstr	d7, [r4, #16]
  hcryp->Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8003788:	61a0      	str	r0, [r4, #24]
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 800378a:	2b00      	cmp	r3, #0
 800378c:	d053      	beq.n	8003836 <HAL_CRYP_AESCBC_Encrypt+0xfe>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 800378e:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003792:	f8d4 9000 	ldr.w	r9, [r4]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003796:	68e2      	ldr	r2, [r4, #12]
  __HAL_CRYP_DISABLE(hcryp);
 8003798:	f8d9 3000 	ldr.w	r3, [r9]
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	f8c9 3000 	str.w	r3, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80037a4:	f8d9 3000 	ldr.w	r3, [r9]
 80037a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c9 3000 	str.w	r3, [r9]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80037b2:	230a      	movs	r3, #10
 80037b4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80037b8:	e9d4 2c05 	ldrd	r2, ip, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 80037bc:	2a60      	cmp	r2, #96	@ 0x60
 80037be:	d064      	beq.n	800388a <HAL_CRYP_AESCBC_Encrypt+0x152>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80037c0:	f8d9 1000 	ldr.w	r1, [r9]
 80037c4:	68a3      	ldr	r3, [r4, #8]
 80037c6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80037ca:	f021 017e 	bic.w	r1, r1, #126	@ 0x7e
 80037ce:	4313      	orrs	r3, r2
 80037d0:	430b      	orrs	r3, r1
 80037d2:	4303      	orrs	r3, r0
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 80037d4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80037d8:	f8c9 3000 	str.w	r3, [r9]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 80037dc:	f000 808f 	beq.w	80038fe <HAL_CRYP_AESCBC_Encrypt+0x1c6>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80037e0:	f1bc 0f00 	cmp.w	ip, #0
 80037e4:	f000 8083 	beq.w	80038ee <HAL_CRYP_AESCBC_Encrypt+0x1b6>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 80037e8:	2a00      	cmp	r2, #0
 80037ea:	d16c      	bne.n	80038c6 <HAL_CRYP_AESCBC_Encrypt+0x18e>
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 80037ec:	463b      	mov	r3, r7
 80037ee:	4632      	mov	r2, r6
  hcryp->CrypInCount = 0;
 80037f0:	2700      	movs	r7, #0
 80037f2:	2600      	movs	r6, #0
 80037f4:	e9c4 6710 	strd	r6, r7, [r4, #64]	@ 0x40
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80037f8:	2000      	movs	r0, #0
 80037fa:	65a0      	str	r0, [r4, #88]	@ 0x58
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 80037fc:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hcryp->State = HAL_CRYP_STATE_READY;
 8003800:	2001      	movs	r0, #1
 8003802:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003806:	4620      	mov	r0, r4
  __HAL_CRYP_ENABLE(hcryp);
 8003808:	f8d9 4000 	ldr.w	r4, [r9]
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 800380c:	4629      	mov	r1, r5
  __HAL_CRYP_ENABLE(hcryp);
 800380e:	f044 0401 	orr.w	r4, r4, #1
 8003812:	f8c9 4000 	str.w	r4, [r9]
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003816:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
}
 800381a:	b003      	add	sp, #12
 800381c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003820:	f000 b88e 	b.w	8003940 <HAL_CRYPEx_AES>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003824:	4620      	mov	r0, r4
 8003826:	f7ff fe93 	bl	8003550 <CRYP_SetKey>
 800382a:	2800      	cmp	r0, #0
 800382c:	d075      	beq.n	800391a <HAL_CRYP_AESCBC_Encrypt+0x1e2>
}
 800382e:	2001      	movs	r0, #1
 8003830:	b003      	add	sp, #12
 8003832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_CRYP_MspInit(hcryp);
 8003836:	4620      	mov	r0, r4
 8003838:	f7fd f8ec 	bl	8000a14 <HAL_CRYP_MspInit>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 800383c:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003840:	f8d4 9000 	ldr.w	r9, [r4]
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003844:	6920      	ldr	r0, [r4, #16]
  __HAL_CRYP_DISABLE(hcryp);
 8003846:	f8d9 3000 	ldr.w	r3, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800384a:	68e2      	ldr	r2, [r4, #12]
  __HAL_CRYP_DISABLE(hcryp);
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	f8c9 3000 	str.w	r3, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003854:	f8d9 3000 	ldr.w	r3, [r9]
 8003858:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c9 3000 	str.w	r3, [r9]
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003862:	2808      	cmp	r0, #8
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003864:	f04f 030a 	mov.w	r3, #10
 8003868:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800386c:	d1a4      	bne.n	80037b8 <HAL_CRYP_AESCBC_Encrypt+0x80>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 800386e:	f8d9 3000 	ldr.w	r3, [r9]
 8003872:	f023 0318 	bic.w	r3, r3, #24
 8003876:	f043 0308 	orr.w	r3, r3, #8
 800387a:	f8c9 3000 	str.w	r3, [r9]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff fe66 	bl	8003550 <CRYP_SetKey>
 8003884:	2800      	cmp	r0, #0
 8003886:	d0b1      	beq.n	80037ec <HAL_CRYP_AESCBC_Encrypt+0xb4>
 8003888:	e7d1      	b.n	800382e <HAL_CRYP_AESCBC_Encrypt+0xf6>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 800388a:	f8d9 3000 	ldr.w	r3, [r9]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 800388e:	69e2      	ldr	r2, [r4, #28]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003894:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8003898:	4303      	orrs	r3, r0
 800389a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800389e:	f8c9 3000 	str.w	r3, [r9]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80038a2:	f8d9 3000 	ldr.w	r3, [r9]
 80038a6:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c9 3000 	str.w	r3, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80038b0:	2303      	movs	r3, #3
 80038b2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80038b6:	f1bc 0f00 	cmp.w	ip, #0
 80038ba:	d104      	bne.n	80038c6 <HAL_CRYP_AESCBC_Encrypt+0x18e>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80038bc:	4620      	mov	r0, r4
 80038be:	f7ff fe47 	bl	8003550 <CRYP_SetKey>
 80038c2:	2800      	cmp	r0, #0
 80038c4:	d1b3      	bne.n	800382e <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.pInitVect == NULL)
 80038c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0b0      	beq.n	800382e <HAL_CRYP_AESCBC_Encrypt+0xf6>
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	ba12      	rev	r2, r2
    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 80038d0:	f8c9 202c 	str.w	r2, [r9, #44]	@ 0x2c
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	ba12      	rev	r2, r2
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 80038d8:	f8c9 2028 	str.w	r2, [r9, #40]	@ 0x28
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	ba12      	rev	r2, r2
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 80038e0:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	ba1b      	rev	r3, r3
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 80038e8:	f8c9 3020 	str.w	r3, [r9, #32]
 80038ec:	e77e      	b.n	80037ec <HAL_CRYP_AESCBC_Encrypt+0xb4>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80038ee:	4620      	mov	r0, r4
 80038f0:	9201      	str	r2, [sp, #4]
 80038f2:	f7ff fe2d 	bl	8003550 <CRYP_SetKey>
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d199      	bne.n	800382e <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 80038fa:	9a01      	ldr	r2, [sp, #4]
 80038fc:	e774      	b.n	80037e8 <HAL_CRYP_AESCBC_Encrypt+0xb0>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80038fe:	f8d9 3000 	ldr.w	r3, [r9]
 8003902:	69e2      	ldr	r2, [r4, #28]
 8003904:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c9 3000 	str.w	r3, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 800390e:	2303      	movs	r3, #3
 8003910:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003914:	f1bc 0f00 	cmp.w	ip, #0
 8003918:	d084      	beq.n	8003824 <HAL_CRYP_AESCBC_Encrypt+0xec>
    hcryp->Instance->IVR3 = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 8003920:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 8003924:	f8c9 3024 	str.w	r3, [r9, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 8003928:	f8c9 3020 	str.w	r3, [r9, #32]
 800392c:	e75e      	b.n	80037ec <HAL_CRYP_AESCBC_Encrypt+0xb4>
 800392e:	bf00      	nop
	...
 800393c:	00000020 	.word	0x00000020

08003940 <HAL_CRYPEx_AES>:
  *                     case of key derivation only.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AES(CRYP_HandleTypeDef *hcryp, uint8_t *pInputData, uint16_t Size, uint8_t *pOutputData, uint32_t Timeout)
{
 8003940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	461c      	mov	r4, r3

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003946:	f890 3055 	ldrb.w	r3, [r0, #85]	@ 0x55
{
 800394a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (hcryp->State == HAL_CRYP_STATE_READY)
 800394e:	2b01      	cmp	r3, #1
 8003950:	f040 809b 	bne.w	8003a8a <HAL_CRYPEx_AES+0x14a>
 8003954:	4606      	mov	r6, r0
 8003956:	b2d8      	uxtb	r0, r3
  {
    /* Check parameters setting */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003958:	6933      	ldr	r3, [r6, #16]
 800395a:	2b08      	cmp	r3, #8
 800395c:	d04d      	beq.n	80039fa <HAL_CRYPEx_AES+0xba>
        return  HAL_ERROR;
      }
    }
    else
    {
      if ((pInputData == NULL) || (pOutputData == NULL) || (Size == 0U))
 800395e:	2900      	cmp	r1, #0
 8003960:	f000 8091 	beq.w	8003a86 <HAL_CRYPEx_AES+0x146>
 8003964:	2c00      	cmp	r4, #0
 8003966:	f000 808e 	beq.w	8003a86 <HAL_CRYPEx_AES+0x146>
 800396a:	4617      	mov	r7, r2
 800396c:	2a00      	cmp	r2, #0
 800396e:	f000 808a 	beq.w	8003a86 <HAL_CRYPEx_AES+0x146>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(hcryp);
 8003972:	f896 3054 	ldrb.w	r3, [r6, #84]	@ 0x54
 8003976:	2b01      	cmp	r3, #1
 8003978:	f000 8087 	beq.w	8003a8a <HAL_CRYPEx_AES+0x14a>

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800397c:	2302      	movs	r3, #2
 800397e:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55


  for(index=0U ; (index < Ilength); index += 16U)
  {
    /* Write the Input block in the Data Input register */
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003982:	6833      	ldr	r3, [r6, #0]
    __HAL_LOCK(hcryp);
 8003984:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
  for(index=0U ; (index < Ilength); index += 16U)
 8003988:	f101 0510 	add.w	r5, r1, #16
 800398c:	3410      	adds	r4, #16
 800398e:	f04f 0900 	mov.w	r9, #0
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003992:	f855 2c10 	ldr.w	r2, [r5, #-16]
 8003996:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003998:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 800399c:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 800399e:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80039a2:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 80039a4:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80039a8:	609a      	str	r2, [r3, #8]
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef const * const hcryp, uint32_t Timeout)
{
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80039aa:	f7fe ffeb 	bl	8002984 <HAL_GetTick>
 80039ae:	f1b8 3fff 	cmp.w	r8, #4294967295

  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80039b2:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 80039b4:	4682      	mov	sl, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80039b6:	d172      	bne.n	8003a9e <HAL_CRYPEx_AES+0x15e>
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	07c9      	lsls	r1, r1, #31
 80039bc:	d5fc      	bpl.n	80039b8 <HAL_CRYPEx_AES+0x78>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039c4:	601a      	str	r2, [r3, #0]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	f844 2c10 	str.w	r2, [r4, #-16]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	f844 2c0c 	str.w	r2, [r4, #-12]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	f844 2c04 	str.w	r2, [r4, #-4]
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 80039de:	f896 205c 	ldrb.w	r2, [r6, #92]	@ 0x5c
 80039e2:	2a01      	cmp	r2, #1
 80039e4:	f109 0110 	add.w	r1, r9, #16
 80039e8:	d067      	beq.n	8003aba <HAL_CRYPEx_AES+0x17a>
  for(index=0U ; (index < Ilength); index += 16U)
 80039ea:	428f      	cmp	r7, r1
 80039ec:	f105 0510 	add.w	r5, r5, #16
 80039f0:	f104 0410 	add.w	r4, r4, #16
 80039f4:	d93b      	bls.n	8003a6e <HAL_CRYPEx_AES+0x12e>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 80039f6:	4689      	mov	r9, r1
 80039f8:	e7cb      	b.n	8003992 <HAL_CRYPEx_AES+0x52>
      if (pOutputData == NULL)
 80039fa:	2c00      	cmp	r4, #0
 80039fc:	d043      	beq.n	8003a86 <HAL_CRYPEx_AES+0x146>
    __HAL_LOCK(hcryp);
 80039fe:	f896 3054 	ldrb.w	r3, [r6, #84]	@ 0x54
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d041      	beq.n	8003a8a <HAL_CRYPEx_AES+0x14a>
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003a06:	2302      	movs	r3, #2
    __HAL_LOCK(hcryp);
 8003a08:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003a0c:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55
  tickstart = HAL_GetTick();
 8003a10:	f7fe ffb8 	bl	8002984 <HAL_GetTick>
 8003a14:	f1b8 3fff 	cmp.w	r8, #4294967295
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003a18:	6832      	ldr	r2, [r6, #0]
  tickstart = HAL_GetTick();
 8003a1a:	4605      	mov	r5, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003a1c:	d149      	bne.n	8003ab2 <HAL_CRYPEx_AES+0x172>
 8003a1e:	6853      	ldr	r3, [r2, #4]
 8003a20:	07dd      	lsls	r5, r3, #31
 8003a22:	d5fc      	bpl.n	8003a1e <HAL_CRYPEx_AES+0xde>
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003a24:	6813      	ldr	r3, [r2, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003a26:	68f1      	ldr	r1, [r6, #12]
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003a2c:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003a30:	6013      	str	r3, [r2, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003a32:	d110      	bne.n	8003a56 <HAL_CRYPEx_AES+0x116>
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8003a34:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
    outputaddr+=4U;
 8003a36:	3410      	adds	r4, #16
 8003a38:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8003a3a:	f844 3c10 	str.w	r3, [r4, #-16]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR6);
 8003a3e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003a40:	ba1b      	rev	r3, r3
 8003a42:	f844 3c0c 	str.w	r3, [r4, #-12]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR5);
 8003a46:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003a48:	ba1b      	rev	r3, r3
 8003a4a:	f844 3c08 	str.w	r3, [r4, #-8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR4);
 8003a4e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003a50:	ba1b      	rev	r3, r3
 8003a52:	f844 3c04 	str.w	r3, [r4, #-4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR3);
 8003a56:	69d3      	ldr	r3, [r2, #28]
 8003a58:	ba1b      	rev	r3, r3
 8003a5a:	6023      	str	r3, [r4, #0]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR2);
 8003a5c:	6993      	ldr	r3, [r2, #24]
 8003a5e:	ba1b      	rev	r3, r3
 8003a60:	6063      	str	r3, [r4, #4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR1);
 8003a62:	6953      	ldr	r3, [r2, #20]
 8003a64:	ba1b      	rev	r3, r3
 8003a66:	60a3      	str	r3, [r4, #8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR0);
 8003a68:	6913      	ldr	r3, [r2, #16]
 8003a6a:	ba1b      	rev	r3, r3
 8003a6c:	60e3      	str	r3, [r4, #12]
    if (hcryp->State != HAL_CRYP_STATE_SUSPENDED)
 8003a6e:	f896 3055 	ldrb.w	r3, [r6, #85]	@ 0x55
 8003a72:	2b05      	cmp	r3, #5
      hcryp->State = HAL_CRYP_STATE_READY;
 8003a74:	bf18      	it	ne
 8003a76:	2301      	movne	r3, #1
    __HAL_UNLOCK(hcryp);
 8003a78:	f04f 0000 	mov.w	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 8003a7c:	bf18      	it	ne
 8003a7e:	f886 3055 	strbne.w	r3, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 8003a82:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
}
 8003a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hcryp);
 8003a8a:	2002      	movs	r0, #2
}
 8003a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((HAL_GetTick() - tickstart ) > Timeout)
 8003a90:	f7fe ff78 	bl	8002984 <HAL_GetTick>
 8003a94:	eba0 000a 	sub.w	r0, r0, sl
 8003a98:	4580      	cmp	r8, r0
 8003a9a:	d31e      	bcc.n	8003ada <HAL_CRYPEx_AES+0x19a>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003a9c:	6833      	ldr	r3, [r6, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	07d2      	lsls	r2, r2, #31
 8003aa2:	d5f5      	bpl.n	8003a90 <HAL_CRYPEx_AES+0x150>
 8003aa4:	e78b      	b.n	80039be <HAL_CRYPEx_AES+0x7e>
      if((HAL_GetTick() - tickstart ) > Timeout)
 8003aa6:	f7fe ff6d 	bl	8002984 <HAL_GetTick>
 8003aaa:	1b43      	subs	r3, r0, r5
 8003aac:	4598      	cmp	r8, r3
 8003aae:	d314      	bcc.n	8003ada <HAL_CRYPEx_AES+0x19a>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003ab0:	6832      	ldr	r2, [r6, #0]
 8003ab2:	6853      	ldr	r3, [r2, #4]
 8003ab4:	07d8      	lsls	r0, r3, #31
 8003ab6:	d5f6      	bpl.n	8003aa6 <HAL_CRYPEx_AES+0x166>
 8003ab8:	e7b4      	b.n	8003a24 <HAL_CRYPEx_AES+0xe4>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8003aba:	428f      	cmp	r7, r1
 8003abc:	d9d7      	bls.n	8003a6e <HAL_CRYPEx_AES+0x12e>
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8003abe:	f1a7 0310 	sub.w	r3, r7, #16
 8003ac2:	eba3 0309 	sub.w	r3, r3, r9
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8003ac6:	2205      	movs	r2, #5
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8003ac8:	6433      	str	r3, [r6, #64]	@ 0x40
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003aca:	2300      	movs	r3, #0
      hcryp->pCrypOutBuffPtr =  (uint8_t *)outputaddr;
 8003acc:	63f4      	str	r4, [r6, #60]	@ 0x3c
      hcryp->pCrypInBuffPtr  =  (uint8_t *)inputaddr;
 8003ace:	63b5      	str	r5, [r6, #56]	@ 0x38
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8003ad0:	f886 2055 	strb.w	r2, [r6, #85]	@ 0x55
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003ad4:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
      return HAL_OK;
 8003ad8:	e7c9      	b.n	8003a6e <HAL_CRYPEx_AES+0x12e>
    hcryp->State = HAL_CRYP_STATE_READY;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f886 3054 	strb.w	r3, [r6, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003ae6:	2003      	movs	r0, #3
}
 8003ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003aec <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d050      	beq.n	8003b92 <HAL_DMA_Init+0xa6>
{
 8003af0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003af2:	4a2e      	ldr	r2, [pc, #184]	@ (8003bac <HAL_DMA_Init+0xc0>)
 8003af4:	6804      	ldr	r4, [r0, #0]
 8003af6:	4294      	cmp	r4, r2
 8003af8:	4603      	mov	r3, r0
 8003afa:	d941      	bls.n	8003b80 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003afc:	492c      	ldr	r1, [pc, #176]	@ (8003bb0 <HAL_DMA_Init+0xc4>)
 8003afe:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb4 <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA2;
 8003b00:	4d2d      	ldr	r5, [pc, #180]	@ (8003bb8 <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b02:	4421      	add	r1, r4
 8003b04:	fba2 2101 	umull	r2, r1, r2, r1
 8003b08:	0909      	lsrs	r1, r1, #4
 8003b0a:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b12:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b16:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 8003b18:	6820      	ldr	r0, [r4, #0]
 8003b1a:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp |=  hdma->Init.Direction        |
 8003b1c:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1e:	433a      	orrs	r2, r7
 8003b20:	695f      	ldr	r7, [r3, #20]
 8003b22:	6459      	str	r1, [r3, #68]	@ 0x44
 8003b24:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b26:	699f      	ldr	r7, [r3, #24]
 8003b28:	433a      	orrs	r2, r7
 8003b2a:	69df      	ldr	r7, [r3, #28]
 8003b2c:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b2e:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b30:	f420 40ff 	bic.w	r0, r0, #32640	@ 0x7f80
 8003b34:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b38:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 8003b3a:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b3c:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 8003b40:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b42:	d014      	beq.n	8003b6e <HAL_DMA_Init+0x82>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b44:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b46:	f001 011c 	and.w	r1, r1, #28
 8003b4a:	220f      	movs	r2, #15
 8003b4c:	408a      	lsls	r2, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b4e:	4088      	lsls	r0, r1
    if (DMA1 == hdma->DmaBaseAddress)
 8003b50:	491a      	ldr	r1, [pc, #104]	@ (8003bbc <HAL_DMA_Init+0xd0>)
 8003b52:	428d      	cmp	r5, r1
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b54:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8003b58:	d01d      	beq.n	8003b96 <HAL_DMA_Init+0xaa>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b5a:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 8003b5e:	4022      	ands	r2, r4
 8003b60:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b64:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 8003b68:	4302      	orrs	r2, r0
 8003b6a:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b6e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b70:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b72:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b74:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8003b78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 8003b7c:	bcf0      	pop	{r4, r5, r6, r7}
 8003b7e:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b80:	490f      	ldr	r1, [pc, #60]	@ (8003bc0 <HAL_DMA_Init+0xd4>)
 8003b82:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb4 <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA1;
 8003b84:	4d0d      	ldr	r5, [pc, #52]	@ (8003bbc <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b86:	4421      	add	r1, r4
 8003b88:	fba2 2101 	umull	r2, r1, r2, r1
 8003b8c:	0909      	lsrs	r1, r1, #4
 8003b8e:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8003b90:	e7bc      	b.n	8003b0c <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8003b92:	2001      	movs	r0, #1
}
 8003b94:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b96:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8003b9a:	400a      	ands	r2, r1
 8003b9c:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ba0:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 8003ba4:	4302      	orrs	r2, r0
 8003ba6:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
 8003baa:	e7e0      	b.n	8003b6e <HAL_DMA_Init+0x82>
 8003bac:	40020407 	.word	0x40020407
 8003bb0:	bffdfbf8 	.word	0xbffdfbf8
 8003bb4:	cccccccd 	.word	0xcccccccd
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020000 	.word	0x40020000
 8003bc0:	bffdfff8 	.word	0xbffdfff8

08003bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc4:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bc6:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8003bca:	2c01      	cmp	r4, #1
 8003bcc:	d00b      	beq.n	8003be6 <HAL_DMA_Start_IT+0x22>
 8003bce:	2401      	movs	r4, #1
 8003bd0:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003bd4:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8003bd8:	2c01      	cmp	r4, #1
 8003bda:	fa5f fc84 	uxtb.w	ip, r4
 8003bde:	d005      	beq.n	8003bec <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be0:	2300      	movs	r3, #0
 8003be2:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8003be6:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8003be8:	bc70      	pop	{r4, r5, r6}
 8003bea:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bec:	2502      	movs	r5, #2
 8003bee:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 8003bf2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf4:	2500      	movs	r5, #0
 8003bf6:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003bf8:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bfa:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 8003bfc:	f026 0601 	bic.w	r6, r6, #1
 8003c00:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c02:	f005 051c 	and.w	r5, r5, #28
 8003c06:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8003c08:	fa0c f505 	lsl.w	r5, ip, r5
 8003c0c:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c0e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c10:	6883      	ldr	r3, [r0, #8]
 8003c12:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8003c14:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c16:	bf0b      	itete	eq
 8003c18:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003c1a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003c1c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003c1e:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8003c20:	b153      	cbz	r3, 8003c38 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	f043 030e 	orr.w	r3, r3, #14
 8003c28:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003c30:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003c32:	6023      	str	r3, [r4, #0]
}
 8003c34:	bc70      	pop	{r4, r5, r6}
 8003c36:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	f023 0304 	bic.w	r3, r3, #4
 8003c3e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	f043 030a 	orr.w	r3, r3, #10
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	e7ef      	b.n	8003c2a <HAL_DMA_Start_IT+0x66>
 8003c4a:	bf00      	nop

08003c4c <HAL_DMA_IRQHandler>:
{
 8003c4c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c4e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c50:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003c52:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c54:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003c56:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c58:	f003 031c 	and.w	r3, r3, #28
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	420a      	tst	r2, r1
 8003c62:	d00e      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x36>
 8003c64:	f014 0f04 	tst.w	r4, #4
 8003c68:	d00b      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	069b      	lsls	r3, r3, #26
 8003c6e:	d403      	bmi.n	8003c78 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	f023 0304 	bic.w	r3, r3, #4
 8003c76:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8003c78:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c7a:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003c7c:	b1cb      	cbz	r3, 8003cb2 <HAL_DMA_IRQHandler+0x66>
}
 8003c7e:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003c80:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c82:	2202      	movs	r2, #2
 8003c84:	409a      	lsls	r2, r3
 8003c86:	420a      	tst	r2, r1
 8003c88:	d015      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x6a>
 8003c8a:	f014 0f02 	tst.w	r4, #2
 8003c8e:	d012      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	0699      	lsls	r1, r3, #26
 8003c94:	d406      	bmi.n	8003ca4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c96:	682b      	ldr	r3, [r5, #0]
 8003c98:	f023 030a 	bic.w	r3, r3, #10
 8003c9c:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8003ca4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ca6:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8003ca8:	2100      	movs	r1, #0
 8003caa:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e5      	bne.n	8003c7e <HAL_DMA_IRQHandler+0x32>
}
 8003cb2:	bc70      	pop	{r4, r5, r6}
 8003cb4:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	420a      	tst	r2, r1
 8003cbc:	d0f9      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x66>
 8003cbe:	0722      	lsls	r2, r4, #28
 8003cc0:	d5f7      	bpl.n	8003cb2 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cc2:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8003cc4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cc6:	f022 020e 	bic.w	r2, r2, #14
 8003cca:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ccc:	2201      	movs	r2, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8003cd2:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cd4:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cd6:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003cd8:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8003cdc:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8003ce0:	2900      	cmp	r1, #0
 8003ce2:	d0e6      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x66>
}
 8003ce4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003ce6:	4708      	bx	r1

08003ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cec:	680c      	ldr	r4, [r1, #0]
{
 8003cee:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf0:	2c00      	cmp	r4, #0
 8003cf2:	f000 8094 	beq.w	8003e1e <HAL_GPIO_Init+0x136>
  uint32_t position = 0x00u;
 8003cf6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cf8:	f04f 0b01 	mov.w	fp, #1
 8003cfc:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8003d00:	ea1e 0a04 	ands.w	sl, lr, r4
 8003d04:	f000 8086 	beq.w	8003e14 <HAL_GPIO_Init+0x12c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d08:	684d      	ldr	r5, [r1, #4]
 8003d0a:	f005 0203 	and.w	r2, r5, #3
 8003d0e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d12:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d14:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d18:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d1c:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d20:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d24:	d97e      	bls.n	8003e24 <HAL_GPIO_Init+0x13c>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d26:	2a03      	cmp	r2, #3
 8003d28:	f040 80ba 	bne.w	8003ea0 <HAL_GPIO_Init+0x1b8>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d2c:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8003d30:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d34:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d38:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d3a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003d3e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d40:	d068      	beq.n	8003e14 <HAL_GPIO_Init+0x12c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d42:	4f72      	ldr	r7, [pc, #456]	@ (8003f0c <HAL_GPIO_Init+0x224>)
 8003d44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	663a      	str	r2, [r7, #96]	@ 0x60
 8003d4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d4e:	f002 0201 	and.w	r2, r2, #1
 8003d52:	9203      	str	r2, [sp, #12]
 8003d54:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d56:	f023 0203 	bic.w	r2, r3, #3
 8003d5a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003d5e:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d62:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d66:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d68:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003d6c:	260f      	movs	r6, #15
 8003d6e:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d72:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d76:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d7a:	d027      	beq.n	8003dcc <HAL_GPIO_Init+0xe4>
 8003d7c:	4e64      	ldr	r6, [pc, #400]	@ (8003f10 <HAL_GPIO_Init+0x228>)
 8003d7e:	42b0      	cmp	r0, r6
 8003d80:	f000 80a1 	beq.w	8003ec6 <HAL_GPIO_Init+0x1de>
 8003d84:	4e63      	ldr	r6, [pc, #396]	@ (8003f14 <HAL_GPIO_Init+0x22c>)
 8003d86:	42b0      	cmp	r0, r6
 8003d88:	f000 80a4 	beq.w	8003ed4 <HAL_GPIO_Init+0x1ec>
 8003d8c:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8003f1c <HAL_GPIO_Init+0x234>
 8003d90:	4570      	cmp	r0, lr
 8003d92:	f000 8091 	beq.w	8003eb8 <HAL_GPIO_Init+0x1d0>
 8003d96:	f8df e188 	ldr.w	lr, [pc, #392]	@ 8003f20 <HAL_GPIO_Init+0x238>
 8003d9a:	4570      	cmp	r0, lr
 8003d9c:	f000 80a8 	beq.w	8003ef0 <HAL_GPIO_Init+0x208>
 8003da0:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8003f24 <HAL_GPIO_Init+0x23c>
 8003da4:	4570      	cmp	r0, lr
 8003da6:	f000 80aa 	beq.w	8003efe <HAL_GPIO_Init+0x216>
 8003daa:	f8df e17c 	ldr.w	lr, [pc, #380]	@ 8003f28 <HAL_GPIO_Init+0x240>
 8003dae:	4570      	cmp	r0, lr
 8003db0:	f000 8097 	beq.w	8003ee2 <HAL_GPIO_Init+0x1fa>
 8003db4:	f8df e174 	ldr.w	lr, [pc, #372]	@ 8003f2c <HAL_GPIO_Init+0x244>
 8003db8:	4570      	cmp	r0, lr
 8003dba:	bf0c      	ite	eq
 8003dbc:	f04f 0e07 	moveq.w	lr, #7
 8003dc0:	f04f 0e08 	movne.w	lr, #8
 8003dc4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003dc8:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dcc:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dce:	4a52      	ldr	r2, [pc, #328]	@ (8003f18 <HAL_GPIO_Init+0x230>)
 8003dd0:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dd2:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8003dd4:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003dd8:	4e4f      	ldr	r6, [pc, #316]	@ (8003f18 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8003dda:	bf54      	ite	pl
 8003ddc:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003dde:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8003de2:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8003de4:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003de6:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003de8:	4e4b      	ldr	r6, [pc, #300]	@ (8003f18 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8003dea:	bf54      	ite	pl
 8003dec:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003dee:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8003df2:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003df4:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003df6:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003df8:	4e47      	ldr	r6, [pc, #284]	@ (8003f18 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8003dfa:	bf54      	ite	pl
 8003dfc:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003dfe:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8003e02:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 8003e04:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e06:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8003e08:	4d43      	ldr	r5, [pc, #268]	@ (8003f18 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8003e0a:	bf54      	ite	pl
 8003e0c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003e0e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8003e12:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8003e14:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e16:	fa34 f203 	lsrs.w	r2, r4, r3
 8003e1a:	f47f af6f 	bne.w	8003cfc <HAL_GPIO_Init+0x14>
  }
}
 8003e1e:	b005      	add	sp, #20
 8003e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003e24:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e28:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e2a:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e2e:	fa06 f80c 	lsl.w	r8, r6, ip
 8003e32:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003e36:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8003e3a:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e3e:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e40:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e44:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8003e48:	fa0e fe03 	lsl.w	lr, lr, r3
 8003e4c:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8003e50:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8003e54:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e58:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e5c:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e60:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e64:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003e66:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6a:	f47f af5f 	bne.w	8003d2c <HAL_GPIO_Init+0x44>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e6e:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8003e70:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e74:	f003 0e07 	and.w	lr, r3, #7
 8003e78:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003e7c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e80:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 8003e84:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e88:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e8a:	260f      	movs	r6, #15
 8003e8c:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e90:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e92:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e96:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 8003e9a:	f8c8 e020 	str.w	lr, [r8, #32]
 8003e9e:	e745      	b.n	8003d2c <HAL_GPIO_Init+0x44>
        temp = GPIOx->PUPDR;
 8003ea0:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ea4:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ea6:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eaa:	fa06 fe0c 	lsl.w	lr, r6, ip
 8003eae:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8003eb2:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eb6:	e739      	b.n	8003d2c <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003eb8:	f04f 0e03 	mov.w	lr, #3
 8003ebc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003ec0:	ea47 070c 	orr.w	r7, r7, ip
 8003ec4:	e782      	b.n	8003dcc <HAL_GPIO_Init+0xe4>
 8003ec6:	f04f 0e01 	mov.w	lr, #1
 8003eca:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003ece:	ea47 070c 	orr.w	r7, r7, ip
 8003ed2:	e77b      	b.n	8003dcc <HAL_GPIO_Init+0xe4>
 8003ed4:	f04f 0e02 	mov.w	lr, #2
 8003ed8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003edc:	ea47 070c 	orr.w	r7, r7, ip
 8003ee0:	e774      	b.n	8003dcc <HAL_GPIO_Init+0xe4>
 8003ee2:	f04f 0e06 	mov.w	lr, #6
 8003ee6:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003eea:	ea47 070c 	orr.w	r7, r7, ip
 8003eee:	e76d      	b.n	8003dcc <HAL_GPIO_Init+0xe4>
 8003ef0:	f04f 0e04 	mov.w	lr, #4
 8003ef4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003ef8:	ea47 070c 	orr.w	r7, r7, ip
 8003efc:	e766      	b.n	8003dcc <HAL_GPIO_Init+0xe4>
 8003efe:	f04f 0e05 	mov.w	lr, #5
 8003f02:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003f06:	ea47 070c 	orr.w	r7, r7, ip
 8003f0a:	e75f      	b.n	8003dcc <HAL_GPIO_Init+0xe4>
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	48000400 	.word	0x48000400
 8003f14:	48000800 	.word	0x48000800
 8003f18:	40010400 	.word	0x40010400
 8003f1c:	48000c00 	.word	0x48000c00
 8003f20:	48001000 	.word	0x48001000
 8003f24:	48001400 	.word	0x48001400
 8003f28:	48001800 	.word	0x48001800
 8003f2c:	48001c00 	.word	0x48001c00

08003f30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f30:	b10a      	cbz	r2, 8003f36 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f32:	6181      	str	r1, [r0, #24]
 8003f34:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f36:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop

08003f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f3c:	4a04      	ldr	r2, [pc, #16]	@ (8003f50 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003f3e:	6951      	ldr	r1, [r2, #20]
 8003f40:	4201      	tst	r1, r0
 8003f42:	d100      	bne.n	8003f46 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003f44:	4770      	bx	lr
{
 8003f46:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f48:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f4a:	f7fc feed 	bl	8000d28 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f4e:	bd08      	pop	{r3, pc}
 8003f50:	40010400 	.word	0x40010400

08003f54 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f54:	4b02      	ldr	r3, [pc, #8]	@ (8003f60 <HAL_PWREx_GetVoltageRange+0xc>)
 8003f56:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003f58:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40007000 	.word	0x40007000

08003f64 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f64:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8003f68:	d00e      	beq.n	8003f88 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f76:	d005      	beq.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f78:	6813      	ldr	r3, [r2, #0]
 8003f7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f84:	2000      	movs	r0, #0
 8003f86:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f88:	4913      	ldr	r1, [pc, #76]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f8a:	680b      	ldr	r3, [r1, #0]
 8003f8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f94:	d0f6      	beq.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f96:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f98:	4a10      	ldr	r2, [pc, #64]	@ (8003fdc <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fa2:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fa4:	6813      	ldr	r3, [r2, #0]
 8003fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003fa8:	2032      	movs	r0, #50	@ 0x32
 8003faa:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fae:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fb6:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fb8:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fbc:	d506      	bpl.n	8003fcc <HAL_PWREx_ControlVoltageScaling+0x68>
 8003fbe:	e000      	b.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8003fc0:	b123      	cbz	r3, 8003fcc <HAL_PWREx_ControlVoltageScaling+0x68>
 8003fc2:	694a      	ldr	r2, [r1, #20]
 8003fc4:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8003fc6:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fca:	d4f9      	bmi.n	8003fc0 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fcc:	4b02      	ldr	r3, [pc, #8]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	055b      	lsls	r3, r3, #21
 8003fd2:	d5d7      	bpl.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8003fd4:	2003      	movs	r0, #3
}
 8003fd6:	4770      	bx	lr
 8003fd8:	40007000 	.word	0x40007000
 8003fdc:	20000400 	.word	0x20000400
 8003fe0:	431bde83 	.word	0x431bde83

08003fe4 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003fe4:	4a02      	ldr	r2, [pc, #8]	@ (8003ff0 <HAL_PWREx_EnableVddIO2+0xc>)
 8003fe6:	6853      	ldr	r3, [r2, #4]
 8003fe8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fec:	6053      	str	r3, [r2, #4]
}
 8003fee:	4770      	bx	lr
 8003ff0:	40007000 	.word	0x40007000

08003ff4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ff4:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ff6:	4d20      	ldr	r5, [pc, #128]	@ (8004078 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8003ff8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003ffa:	00db      	lsls	r3, r3, #3
{
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004000:	d51a      	bpl.n	8004038 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004002:	f7ff ffa7 	bl	8003f54 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004006:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800400a:	d027      	beq.n	800405c <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800400c:	2c80      	cmp	r4, #128	@ 0x80
 800400e:	d82c      	bhi.n	800406a <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004010:	d02f      	beq.n	8004072 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004012:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8004016:	fab4 f484 	clz	r4, r4
 800401a:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800401c:	4917      	ldr	r1, [pc, #92]	@ (800407c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800401e:	680b      	ldr	r3, [r1, #0]
 8004020:	f023 0307 	bic.w	r3, r3, #7
 8004024:	4323      	orrs	r3, r4
 8004026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004028:	6808      	ldr	r0, [r1, #0]
 800402a:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800402e:	1b00      	subs	r0, r0, r4
 8004030:	bf18      	it	ne
 8004032:	2001      	movne	r0, #1
 8004034:	b003      	add	sp, #12
 8004036:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004038:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800403a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8004040:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800404a:	f7ff ff83 	bl	8003f54 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800404e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004050:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8004054:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004058:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800405a:	d1d7      	bne.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 800405c:	2c80      	cmp	r4, #128	@ 0x80
 800405e:	d906      	bls.n	800406e <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004060:	2ca1      	cmp	r4, #161	@ 0xa1
 8004062:	bf34      	ite	cc
 8004064:	2401      	movcc	r4, #1
 8004066:	2402      	movcs	r4, #2
 8004068:	e7d8      	b.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 800406a:	2403      	movs	r4, #3
 800406c:	e7d6      	b.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800406e:	2400      	movs	r4, #0
 8004070:	e7d4      	b.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004072:	2402      	movs	r4, #2
 8004074:	e7d2      	b.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x28>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	40022000 	.word	0x40022000

08004080 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004080:	4a28      	ldr	r2, [pc, #160]	@ (8004124 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004082:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004084:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004086:	f013 030c 	ands.w	r3, r3, #12
 800408a:	d005      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x18>
 800408c:	2b0c      	cmp	r3, #12
 800408e:	d035      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004090:	2b04      	cmp	r3, #4
 8004092:	d141      	bne.n	8004118 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8004094:	4824      	ldr	r0, [pc, #144]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004096:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004098:	4a22      	ldr	r2, [pc, #136]	@ (8004124 <HAL_RCC_GetSysClockFreq+0xa4>)
 800409a:	6811      	ldr	r1, [r2, #0]
 800409c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800409e:	bf54      	ite	pl
 80040a0:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040a4:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80040a6:	4921      	ldr	r1, [pc, #132]	@ (800412c <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040a8:	bf54      	ite	pl
 80040aa:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040ae:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80040b2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040b6:	b303      	cbz	r3, 80040fa <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	d11d      	bne.n	80040f8 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040bc:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d025      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x94>
 80040c8:	4a19      	ldr	r2, [pc, #100]	@ (8004130 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	bf08      	it	eq
 80040ce:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040d0:	4b14      	ldr	r3, [pc, #80]	@ (8004124 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040d2:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040d4:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040dc:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040e0:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040e4:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040e6:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040ea:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ec:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ee:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 80040f2:	fbb2 f0f3 	udiv	r0, r2, r3
 80040f6:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040f8:	2000      	movs	r0, #0
}
 80040fa:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040fc:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004100:	2a01      	cmp	r2, #1
 8004102:	d0c9      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004104:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800410c:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800410e:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8004112:	d1d9      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8004114:	4804      	ldr	r0, [pc, #16]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004116:	e7db      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 8004118:	2b08      	cmp	r3, #8
 800411a:	4805      	ldr	r0, [pc, #20]	@ (8004130 <HAL_RCC_GetSysClockFreq+0xb0>)
 800411c:	bf18      	it	ne
 800411e:	2000      	movne	r0, #0
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	00f42400 	.word	0x00f42400
 800412c:	08009310 	.word	0x08009310
 8004130:	007a1200 	.word	0x007a1200

08004134 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004134:	2800      	cmp	r0, #0
 8004136:	f000 822f 	beq.w	8004598 <HAL_RCC_OscConfig+0x464>
{
 800413a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413e:	4a93      	ldr	r2, [pc, #588]	@ (800438c <HAL_RCC_OscConfig+0x258>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004140:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004142:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004144:	68d6      	ldr	r6, [r2, #12]
 8004146:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004148:	06d8      	lsls	r0, r3, #27
{
 800414a:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004150:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004154:	d52e      	bpl.n	80041b4 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004156:	2d00      	cmp	r5, #0
 8004158:	f000 8121 	beq.w	800439e <HAL_RCC_OscConfig+0x26a>
 800415c:	2d0c      	cmp	r5, #12
 800415e:	f000 811b 	beq.w	8004398 <HAL_RCC_OscConfig+0x264>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004162:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8004164:	4f89      	ldr	r7, [pc, #548]	@ (800438c <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8191 	beq.w	800448e <HAL_RCC_OscConfig+0x35a>
        __HAL_RCC_MSI_ENABLE();
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004174:	f7fe fc06 	bl	8002984 <HAL_GetTick>
 8004178:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800417a:	e006      	b.n	800418a <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800417c:	f7fe fc02 	bl	8002984 <HAL_GetTick>
 8004180:	eba0 0008 	sub.w	r0, r0, r8
 8004184:	2802      	cmp	r0, #2
 8004186:	f200 8192 	bhi.w	80044ae <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	079b      	lsls	r3, r3, #30
 800418e:	d5f5      	bpl.n	800417c <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f043 0308 	orr.w	r3, r3, #8
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6a22      	ldr	r2, [r4, #32]
 800419c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041a0:	4313      	orrs	r3, r2
 80041a2:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69e2      	ldr	r2, [r4, #28]
 80041a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80041b0:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	07d9      	lsls	r1, r3, #31
 80041b6:	f100 80bf 	bmi.w	8004338 <HAL_RCC_OscConfig+0x204>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ba:	0799      	lsls	r1, r3, #30
 80041bc:	d523      	bpl.n	8004206 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041be:	2d04      	cmp	r5, #4
 80041c0:	f000 8155 	beq.w	800446e <HAL_RCC_OscConfig+0x33a>
 80041c4:	2d0c      	cmp	r5, #12
 80041c6:	f000 814f 	beq.w	8004468 <HAL_RCC_OscConfig+0x334>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ca:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80041cc:	4e6f      	ldr	r6, [pc, #444]	@ (800438c <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 8188 	beq.w	80044e4 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_HSI_ENABLE();
 80041d4:	6833      	ldr	r3, [r6, #0]
 80041d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041da:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80041dc:	f7fe fbd2 	bl	8002984 <HAL_GetTick>
 80041e0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e2:	e005      	b.n	80041f0 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e4:	f7fe fbce 	bl	8002984 <HAL_GetTick>
 80041e8:	1bc0      	subs	r0, r0, r7
 80041ea:	2802      	cmp	r0, #2
 80041ec:	f200 815f 	bhi.w	80044ae <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f0:	6833      	ldr	r3, [r6, #0]
 80041f2:	055b      	lsls	r3, r3, #21
 80041f4:	d5f6      	bpl.n	80041e4 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f6:	6873      	ldr	r3, [r6, #4]
 80041f8:	6922      	ldr	r2, [r4, #16]
 80041fa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80041fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004202:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	0719      	lsls	r1, r3, #28
 8004208:	d519      	bpl.n	800423e <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800420a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800420c:	4e5f      	ldr	r6, [pc, #380]	@ (800438c <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8116 	beq.w	8004440 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_LSI_ENABLE();
 8004214:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004220:	f7fe fbb0 	bl	8002984 <HAL_GetTick>
 8004224:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004226:	e005      	b.n	8004234 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004228:	f7fe fbac 	bl	8002984 <HAL_GetTick>
 800422c:	1bc0      	subs	r0, r0, r7
 800422e:	2802      	cmp	r0, #2
 8004230:	f200 813d 	bhi.w	80044ae <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004234:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004238:	079a      	lsls	r2, r3, #30
 800423a:	d5f5      	bpl.n	8004228 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	075f      	lsls	r7, r3, #29
 8004240:	d53f      	bpl.n	80042c2 <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004242:	4b52      	ldr	r3, [pc, #328]	@ (800438c <HAL_RCC_OscConfig+0x258>)
 8004244:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004246:	00d6      	lsls	r6, r2, #3
 8004248:	f100 814a 	bmi.w	80044e0 <HAL_RCC_OscConfig+0x3ac>
      __HAL_RCC_PWR_CLK_ENABLE();
 800424c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800424e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004252:	659a      	str	r2, [r3, #88]	@ 0x58
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800425e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004260:	4f4b      	ldr	r7, [pc, #300]	@ (8004390 <HAL_RCC_OscConfig+0x25c>)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	05d8      	lsls	r0, r3, #23
 8004266:	f140 8199 	bpl.w	800459c <HAL_RCC_OscConfig+0x468>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426a:	68a3      	ldr	r3, [r4, #8]
 800426c:	2b01      	cmp	r3, #1
 800426e:	f000 814b 	beq.w	8004508 <HAL_RCC_OscConfig+0x3d4>
 8004272:	2b05      	cmp	r3, #5
 8004274:	f000 81bd 	beq.w	80045f2 <HAL_RCC_OscConfig+0x4be>
 8004278:	4f44      	ldr	r7, [pc, #272]	@ (800438c <HAL_RCC_OscConfig+0x258>)
 800427a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004286:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800428a:	f022 0204 	bic.w	r2, r2, #4
 800428e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004292:	2b00      	cmp	r3, #0
 8004294:	f040 813f 	bne.w	8004516 <HAL_RCC_OscConfig+0x3e2>
      tickstart = HAL_GetTick();
 8004298:	f7fe fb74 	bl	8002984 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429c:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80042a0:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a2:	e006      	b.n	80042b2 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fe fb6e 	bl	8002984 <HAL_GetTick>
 80042a8:	eba0 0008 	sub.w	r0, r0, r8
 80042ac:	4548      	cmp	r0, r9
 80042ae:	f200 80fe 	bhi.w	80044ae <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042b6:	079b      	lsls	r3, r3, #30
 80042b8:	d4f4      	bmi.n	80042a4 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 80042ba:	2e00      	cmp	r6, #0
 80042bc:	f040 8180 	bne.w	80045c0 <HAL_RCC_OscConfig+0x48c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	069e      	lsls	r6, r3, #26
 80042c4:	d518      	bpl.n	80042f8 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 80042c8:	4e30      	ldr	r6, [pc, #192]	@ (800438c <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8150 	beq.w	8004570 <HAL_RCC_OscConfig+0x43c>
      __HAL_RCC_HSI48_ENABLE();
 80042d0:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80042dc:	f7fe fb52 	bl	8002984 <HAL_GetTick>
 80042e0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042e2:	e005      	b.n	80042f0 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042e4:	f7fe fb4e 	bl	8002984 <HAL_GetTick>
 80042e8:	1bc0      	subs	r0, r0, r7
 80042ea:	2802      	cmp	r0, #2
 80042ec:	f200 80df 	bhi.w	80044ae <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042f0:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80042f4:	0798      	lsls	r0, r3, #30
 80042f6:	d5f5      	bpl.n	80042e4 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80042fa:	b1db      	cbz	r3, 8004334 <HAL_RCC_OscConfig+0x200>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	f000 8186 	beq.w	800460e <HAL_RCC_OscConfig+0x4da>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004302:	2d0c      	cmp	r5, #12
 8004304:	f000 808c 	beq.w	8004420 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_PLL_DISABLE();
 8004308:	4c20      	ldr	r4, [pc, #128]	@ (800438c <HAL_RCC_OscConfig+0x258>)
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004310:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004312:	f7fe fb37 	bl	8002984 <HAL_GetTick>
 8004316:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004318:	e005      	b.n	8004326 <HAL_RCC_OscConfig+0x1f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431a:	f7fe fb33 	bl	8002984 <HAL_GetTick>
 800431e:	1b40      	subs	r0, r0, r5
 8004320:	2802      	cmp	r0, #2
 8004322:	f200 80c4 	bhi.w	80044ae <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	019b      	lsls	r3, r3, #6
 800432a:	d4f6      	bmi.n	800431a <HAL_RCC_OscConfig+0x1e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800432c:	68e2      	ldr	r2, [r4, #12]
 800432e:	4b19      	ldr	r3, [pc, #100]	@ (8004394 <HAL_RCC_OscConfig+0x260>)
 8004330:	4013      	ands	r3, r2
 8004332:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8004334:	2000      	movs	r0, #0
 8004336:	e074      	b.n	8004422 <HAL_RCC_OscConfig+0x2ee>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004338:	2d08      	cmp	r5, #8
 800433a:	d077      	beq.n	800442c <HAL_RCC_OscConfig+0x2f8>
 800433c:	2d0c      	cmp	r5, #12
 800433e:	d073      	beq.n	8004428 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004340:	6863      	ldr	r3, [r4, #4]
 8004342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004346:	f000 80b6 	beq.w	80044b6 <HAL_RCC_OscConfig+0x382>
 800434a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800434e:	f000 8143 	beq.w	80045d8 <HAL_RCC_OscConfig+0x4a4>
 8004352:	4f0e      	ldr	r7, [pc, #56]	@ (800438c <HAL_RCC_OscConfig+0x258>)
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800435a:	603a      	str	r2, [r7, #0]
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004362:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 80ab 	bne.w	80044c0 <HAL_RCC_OscConfig+0x38c>
        tickstart = HAL_GetTick();
 800436a:	f7fe fb0b 	bl	8002984 <HAL_GetTick>
 800436e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004370:	e006      	b.n	8004380 <HAL_RCC_OscConfig+0x24c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004372:	f7fe fb07 	bl	8002984 <HAL_GetTick>
 8004376:	eba0 0008 	sub.w	r0, r0, r8
 800437a:	2864      	cmp	r0, #100	@ 0x64
 800437c:	f200 8097 	bhi.w	80044ae <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	0398      	lsls	r0, r3, #14
 8004384:	d4f5      	bmi.n	8004372 <HAL_RCC_OscConfig+0x23e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	e717      	b.n	80041ba <HAL_RCC_OscConfig+0x86>
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000
 8004390:	40007000 	.word	0x40007000
 8004394:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004398:	2e01      	cmp	r6, #1
 800439a:	f47f aee2 	bne.w	8004162 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800439e:	4ba9      	ldr	r3, [pc, #676]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	0799      	lsls	r1, r3, #30
 80043a4:	d439      	bmi.n	800441a <HAL_RCC_OscConfig+0x2e6>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043a6:	4ba7      	ldr	r3, [pc, #668]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 80043a8:	6a20      	ldr	r0, [r4, #32]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	0712      	lsls	r2, r2, #28
 80043ae:	bf56      	itet	pl
 80043b0:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 80043b4:	681b      	ldrmi	r3, [r3, #0]
 80043b6:	091b      	lsrpl	r3, r3, #4
 80043b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043bc:	4298      	cmp	r0, r3
 80043be:	f200 80bf 	bhi.w	8004540 <HAL_RCC_OscConfig+0x40c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c2:	4ba0      	ldr	r3, [pc, #640]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	f042 0208 	orr.w	r2, r2, #8
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80043d2:	4302      	orrs	r2, r0
 80043d4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	69e1      	ldr	r1, [r4, #28]
 80043da:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80043de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80043e2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043e4:	2d00      	cmp	r5, #0
 80043e6:	f000 80f1 	beq.w	80045cc <HAL_RCC_OscConfig+0x498>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ea:	f7ff fe49 	bl	8004080 <HAL_RCC_GetSysClockFreq>
 80043ee:	4b95      	ldr	r3, [pc, #596]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 80043f0:	4a95      	ldr	r2, [pc, #596]	@ (8004648 <HAL_RCC_OscConfig+0x514>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043f8:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 80043fa:	4a94      	ldr	r2, [pc, #592]	@ (800464c <HAL_RCC_OscConfig+0x518>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8004404:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004406:	4a92      	ldr	r2, [pc, #584]	@ (8004650 <HAL_RCC_OscConfig+0x51c>)
 8004408:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800440a:	f7fe fa79 	bl	8002900 <HAL_InitTick>
        if(status != HAL_OK)
 800440e:	b940      	cbnz	r0, 8004422 <HAL_RCC_OscConfig+0x2ee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	07d9      	lsls	r1, r3, #31
 8004414:	f57f aed1 	bpl.w	80041ba <HAL_RCC_OscConfig+0x86>
 8004418:	e78e      	b.n	8004338 <HAL_RCC_OscConfig+0x204>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800441a:	69a3      	ldr	r3, [r4, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1c2      	bne.n	80043a6 <HAL_RCC_OscConfig+0x272>
    return HAL_ERROR;
 8004420:	2001      	movs	r0, #1
}
 8004422:	b003      	add	sp, #12
 8004424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004428:	2e03      	cmp	r6, #3
 800442a:	d189      	bne.n	8004340 <HAL_RCC_OscConfig+0x20c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	4a85      	ldr	r2, [pc, #532]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	0392      	lsls	r2, r2, #14
 8004432:	f57f aec2 	bpl.w	80041ba <HAL_RCC_OscConfig+0x86>
 8004436:	6862      	ldr	r2, [r4, #4]
 8004438:	2a00      	cmp	r2, #0
 800443a:	f47f aebe 	bne.w	80041ba <HAL_RCC_OscConfig+0x86>
 800443e:	e7ef      	b.n	8004420 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_DISABLE();
 8004440:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800444c:	f7fe fa9a 	bl	8002984 <HAL_GetTick>
 8004450:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004452:	e004      	b.n	800445e <HAL_RCC_OscConfig+0x32a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004454:	f7fe fa96 	bl	8002984 <HAL_GetTick>
 8004458:	1bc0      	subs	r0, r0, r7
 800445a:	2802      	cmp	r0, #2
 800445c:	d827      	bhi.n	80044ae <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800445e:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004462:	079b      	lsls	r3, r3, #30
 8004464:	d4f6      	bmi.n	8004454 <HAL_RCC_OscConfig+0x320>
 8004466:	e6e9      	b.n	800423c <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004468:	2e02      	cmp	r6, #2
 800446a:	f47f aeae 	bne.w	80041ca <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800446e:	4a75      	ldr	r2, [pc, #468]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	0552      	lsls	r2, r2, #21
 8004474:	d502      	bpl.n	800447c <HAL_RCC_OscConfig+0x348>
 8004476:	68e2      	ldr	r2, [r4, #12]
 8004478:	2a00      	cmp	r2, #0
 800447a:	d0d1      	beq.n	8004420 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	4971      	ldr	r1, [pc, #452]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 800447e:	6920      	ldr	r0, [r4, #16]
 8004480:	684a      	ldr	r2, [r1, #4]
 8004482:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 8004486:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800448a:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800448c:	e6bb      	b.n	8004206 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004496:	f7fe fa75 	bl	8002984 <HAL_GetTick>
 800449a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	0798      	lsls	r0, r3, #30
 80044a0:	d5b6      	bpl.n	8004410 <HAL_RCC_OscConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a2:	f7fe fa6f 	bl	8002984 <HAL_GetTick>
 80044a6:	eba0 0008 	sub.w	r0, r0, r8
 80044aa:	2802      	cmp	r0, #2
 80044ac:	d9f6      	bls.n	800449c <HAL_RCC_OscConfig+0x368>
            return HAL_TIMEOUT;
 80044ae:	2003      	movs	r0, #3
}
 80044b0:	b003      	add	sp, #12
 80044b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b6:	4a63      	ldr	r2, [pc, #396]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 80044b8:	6813      	ldr	r3, [r2, #0]
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044be:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80044c0:	f7fe fa60 	bl	8002984 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044c4:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8004644 <HAL_RCC_OscConfig+0x510>
        tickstart = HAL_GetTick();
 80044c8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ca:	e004      	b.n	80044d6 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fe fa5a 	bl	8002984 <HAL_GetTick>
 80044d0:	1bc0      	subs	r0, r0, r7
 80044d2:	2864      	cmp	r0, #100	@ 0x64
 80044d4:	d8eb      	bhi.n	80044ae <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d6:	f8d8 3000 	ldr.w	r3, [r8]
 80044da:	039b      	lsls	r3, r3, #14
 80044dc:	d5f6      	bpl.n	80044cc <HAL_RCC_OscConfig+0x398>
 80044de:	e752      	b.n	8004386 <HAL_RCC_OscConfig+0x252>
    FlagStatus       pwrclkchanged = RESET;
 80044e0:	2600      	movs	r6, #0
 80044e2:	e6bd      	b.n	8004260 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80044e4:	6833      	ldr	r3, [r6, #0]
 80044e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044ea:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80044ec:	f7fe fa4a 	bl	8002984 <HAL_GetTick>
 80044f0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044f2:	e004      	b.n	80044fe <HAL_RCC_OscConfig+0x3ca>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f4:	f7fe fa46 	bl	8002984 <HAL_GetTick>
 80044f8:	1bc0      	subs	r0, r0, r7
 80044fa:	2802      	cmp	r0, #2
 80044fc:	d8d7      	bhi.n	80044ae <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044fe:	6833      	ldr	r3, [r6, #0]
 8004500:	0558      	lsls	r0, r3, #21
 8004502:	d4f7      	bmi.n	80044f4 <HAL_RCC_OscConfig+0x3c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	e67e      	b.n	8004206 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004508:	4a4e      	ldr	r2, [pc, #312]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 800450a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8004516:	f7fe fa35 	bl	8002984 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451a:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 8004644 <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 800451e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004524:	e004      	b.n	8004530 <HAL_RCC_OscConfig+0x3fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fe fa2d 	bl	8002984 <HAL_GetTick>
 800452a:	1bc0      	subs	r0, r0, r7
 800452c:	4548      	cmp	r0, r9
 800452e:	d8be      	bhi.n	80044ae <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004530:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8004534:	079a      	lsls	r2, r3, #30
 8004536:	d5f6      	bpl.n	8004526 <HAL_RCC_OscConfig+0x3f2>
    if(pwrclkchanged == SET)
 8004538:	2e00      	cmp	r6, #0
 800453a:	f43f aec1 	beq.w	80042c0 <HAL_RCC_OscConfig+0x18c>
 800453e:	e03f      	b.n	80045c0 <HAL_RCC_OscConfig+0x48c>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004540:	f7ff fd58 	bl	8003ff4 <RCC_SetFlashLatencyFromMSIRange>
 8004544:	2800      	cmp	r0, #0
 8004546:	f47f af6b 	bne.w	8004420 <HAL_RCC_OscConfig+0x2ec>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800454a:	4b3e      	ldr	r3, [pc, #248]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	f042 0208 	orr.w	r2, r2, #8
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	6a21      	ldr	r1, [r4, #32]
 8004558:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800455c:	430a      	orrs	r2, r1
 800455e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	69e1      	ldr	r1, [r4, #28]
 8004564:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004568:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	e73c      	b.n	80043ea <HAL_RCC_OscConfig+0x2b6>
      __HAL_RCC_HSI48_DISABLE();
 8004570:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800457c:	f7fe fa02 	bl	8002984 <HAL_GetTick>
 8004580:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004582:	e004      	b.n	800458e <HAL_RCC_OscConfig+0x45a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004584:	f7fe f9fe 	bl	8002984 <HAL_GetTick>
 8004588:	1bc0      	subs	r0, r0, r7
 800458a:	2802      	cmp	r0, #2
 800458c:	d88f      	bhi.n	80044ae <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800458e:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8004592:	0799      	lsls	r1, r3, #30
 8004594:	d4f6      	bmi.n	8004584 <HAL_RCC_OscConfig+0x450>
 8004596:	e6af      	b.n	80042f8 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 8004598:	2001      	movs	r0, #1
}
 800459a:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80045a4:	f7fe f9ee 	bl	8002984 <HAL_GetTick>
 80045a8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	05d9      	lsls	r1, r3, #23
 80045ae:	f53f ae5c 	bmi.w	800426a <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b2:	f7fe f9e7 	bl	8002984 <HAL_GetTick>
 80045b6:	eba0 0008 	sub.w	r0, r0, r8
 80045ba:	2802      	cmp	r0, #2
 80045bc:	d9f5      	bls.n	80045aa <HAL_RCC_OscConfig+0x476>
 80045be:	e776      	b.n	80044ae <HAL_RCC_OscConfig+0x37a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c0:	4a20      	ldr	r2, [pc, #128]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 80045c2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80045c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80045ca:	e679      	b.n	80042c0 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045cc:	f7ff fd12 	bl	8003ff4 <RCC_SetFlashLatencyFromMSIRange>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	f43f af0a 	beq.w	80043ea <HAL_RCC_OscConfig+0x2b6>
 80045d6:	e723      	b.n	8004420 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045dc:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80045ee:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045f0:	e766      	b.n	80044c0 <HAL_RCC_OscConfig+0x38c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f2:	4b14      	ldr	r3, [pc, #80]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 80045f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80045f8:	f042 0204 	orr.w	r2, r2, #4
 80045fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004600:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800460c:	e783      	b.n	8004516 <HAL_RCC_OscConfig+0x3e2>
      pll_config = RCC->PLLCFGR;
 800460e:	4e0d      	ldr	r6, [pc, #52]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004610:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8004612:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004614:	f003 0103 	and.w	r1, r3, #3
 8004618:	4291      	cmp	r1, r2
 800461a:	d055      	beq.n	80046c8 <HAL_RCC_OscConfig+0x594>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800461c:	2d0c      	cmp	r5, #12
 800461e:	f43f aeff 	beq.w	8004420 <HAL_RCC_OscConfig+0x2ec>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004622:	4d08      	ldr	r5, [pc, #32]	@ (8004644 <HAL_RCC_OscConfig+0x510>)
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	f53f aefa 	bmi.w	8004420 <HAL_RCC_OscConfig+0x2ec>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800462c:	682b      	ldr	r3, [r5, #0]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	f53f aef6 	bmi.w	8004420 <HAL_RCC_OscConfig+0x2ec>
            __HAL_RCC_PLL_DISABLE();
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800463a:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800463c:	f7fe f9a2 	bl	8002984 <HAL_GetTick>
 8004640:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004642:	e00d      	b.n	8004660 <HAL_RCC_OscConfig+0x52c>
 8004644:	40021000 	.word	0x40021000
 8004648:	08009348 	.word	0x08009348
 800464c:	20000408 	.word	0x20000408
 8004650:	20000400 	.word	0x20000400
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fe f996 	bl	8002984 <HAL_GetTick>
 8004658:	1b80      	subs	r0, r0, r6
 800465a:	2802      	cmp	r0, #2
 800465c:	f63f af27 	bhi.w	80044ae <HAL_RCC_OscConfig+0x37a>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	019f      	lsls	r7, r3, #6
 8004664:	d4f6      	bmi.n	8004654 <HAL_RCC_OscConfig+0x520>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004666:	68e9      	ldr	r1, [r5, #12]
 8004668:	4b36      	ldr	r3, [pc, #216]	@ (8004744 <HAL_RCC_OscConfig+0x610>)
 800466a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800466c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800466e:	4e36      	ldr	r6, [pc, #216]	@ (8004748 <HAL_RCC_OscConfig+0x614>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004670:	400b      	ands	r3, r1
 8004672:	4313      	orrs	r3, r2
 8004674:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 8004678:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800467c:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004680:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8004684:	3801      	subs	r0, #1
 8004686:	0849      	lsrs	r1, r1, #1
 8004688:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800468c:	3901      	subs	r1, #1
 800468e:	0852      	lsrs	r2, r2, #1
 8004690:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004694:	3a01      	subs	r2, #1
 8004696:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800469a:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046a2:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046a4:	68eb      	ldr	r3, [r5, #12]
 80046a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046aa:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80046ac:	f7fe f96a 	bl	8002984 <HAL_GetTick>
 80046b0:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b2:	e005      	b.n	80046c0 <HAL_RCC_OscConfig+0x58c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fe f966 	bl	8002984 <HAL_GetTick>
 80046b8:	1b00      	subs	r0, r0, r4
 80046ba:	2802      	cmp	r0, #2
 80046bc:	f63f aef7 	bhi.w	80044ae <HAL_RCC_OscConfig+0x37a>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c0:	6833      	ldr	r3, [r6, #0]
 80046c2:	0198      	lsls	r0, r3, #6
 80046c4:	d5f6      	bpl.n	80046b4 <HAL_RCC_OscConfig+0x580>
 80046c6:	e635      	b.n	8004334 <HAL_RCC_OscConfig+0x200>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80046ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80046ce:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80046d4:	d1a2      	bne.n	800461c <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046dc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80046e0:	d19c      	bne.n	800461c <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046e2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80046e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046e8:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80046ec:	d196      	bne.n	800461c <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ee:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80046f0:	0852      	lsrs	r2, r2, #1
 80046f2:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80046f6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046f8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80046fc:	d18e      	bne.n	800461c <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046fe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004700:	0852      	lsrs	r2, r2, #1
 8004702:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8004706:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004708:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800470c:	d186      	bne.n	800461c <HAL_RCC_OscConfig+0x4e8>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470e:	6833      	ldr	r3, [r6, #0]
 8004710:	0199      	lsls	r1, r3, #6
 8004712:	f53f ae0f 	bmi.w	8004334 <HAL_RCC_OscConfig+0x200>
          __HAL_RCC_PLL_ENABLE();
 8004716:	6833      	ldr	r3, [r6, #0]
 8004718:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800471c:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800471e:	68f3      	ldr	r3, [r6, #12]
 8004720:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004724:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8004726:	f7fe f92d 	bl	8002984 <HAL_GetTick>
 800472a:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472c:	e005      	b.n	800473a <HAL_RCC_OscConfig+0x606>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472e:	f7fe f929 	bl	8002984 <HAL_GetTick>
 8004732:	1b03      	subs	r3, r0, r4
 8004734:	2b02      	cmp	r3, #2
 8004736:	f63f aeba 	bhi.w	80044ae <HAL_RCC_OscConfig+0x37a>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473a:	6833      	ldr	r3, [r6, #0]
 800473c:	019a      	lsls	r2, r3, #6
 800473e:	d5f6      	bpl.n	800472e <HAL_RCC_OscConfig+0x5fa>
 8004740:	e5f8      	b.n	8004334 <HAL_RCC_OscConfig+0x200>
 8004742:	bf00      	nop
 8004744:	019d808c 	.word	0x019d808c
 8004748:	40021000 	.word	0x40021000

0800474c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800474c:	2800      	cmp	r0, #0
 800474e:	f000 80a0 	beq.w	8004892 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004752:	4a54      	ldr	r2, [pc, #336]	@ (80048a4 <HAL_RCC_ClockConfig+0x158>)
 8004754:	6813      	ldr	r3, [r2, #0]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	428b      	cmp	r3, r1
{
 800475c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004760:	460d      	mov	r5, r1
 8004762:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004764:	d20c      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	6813      	ldr	r3, [r2, #0]
 8004768:	f023 0307 	bic.w	r3, r3, #7
 800476c:	430b      	orrs	r3, r1
 800476e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004770:	6813      	ldr	r3, [r2, #0]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	428b      	cmp	r3, r1
 8004778:	d002      	beq.n	8004780 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800477a:	2001      	movs	r0, #1
}
 800477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004784:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004788:	d570      	bpl.n	800486c <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800478a:	4e47      	ldr	r6, [pc, #284]	@ (80048a8 <HAL_RCC_ClockConfig+0x15c>)
 800478c:	68a0      	ldr	r0, [r4, #8]
 800478e:	68b1      	ldr	r1, [r6, #8]
 8004790:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 8004794:	4288      	cmp	r0, r1
 8004796:	d904      	bls.n	80047a2 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	68b1      	ldr	r1, [r6, #8]
 800479a:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 800479e:	4301      	orrs	r1, r0
 80047a0:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a2:	b332      	cbz	r2, 80047f2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a4:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a6:	4b40      	ldr	r3, [pc, #256]	@ (80048a8 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a8:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047aa:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ac:	d065      	beq.n	800487a <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ae:	2a02      	cmp	r2, #2
 80047b0:	d06c      	beq.n	800488c <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047b2:	2a00      	cmp	r2, #0
 80047b4:	d171      	bne.n	800489a <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047b6:	079e      	lsls	r6, r3, #30
 80047b8:	d5df      	bpl.n	800477a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ba:	4e3b      	ldr	r6, [pc, #236]	@ (80048a8 <HAL_RCC_ClockConfig+0x15c>)
 80047bc:	68b3      	ldr	r3, [r6, #8]
 80047be:	f023 0303 	bic.w	r3, r3, #3
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80047c6:	f7fe f8dd 	bl	8002984 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ca:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80047ce:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d0:	e004      	b.n	80047dc <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d2:	f7fe f8d7 	bl	8002984 <HAL_GetTick>
 80047d6:	1bc0      	subs	r0, r0, r7
 80047d8:	4540      	cmp	r0, r8
 80047da:	d85c      	bhi.n	8004896 <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047dc:	68b3      	ldr	r3, [r6, #8]
 80047de:	6862      	ldr	r2, [r4, #4]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047e8:	d1f3      	bne.n	80047d2 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	0799      	lsls	r1, r3, #30
 80047ee:	d506      	bpl.n	80047fe <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047f0:	68a0      	ldr	r0, [r4, #8]
 80047f2:	492d      	ldr	r1, [pc, #180]	@ (80048a8 <HAL_RCC_ClockConfig+0x15c>)
 80047f4:	688a      	ldr	r2, [r1, #8]
 80047f6:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80047fa:	4282      	cmp	r2, r0
 80047fc:	d840      	bhi.n	8004880 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047fe:	4929      	ldr	r1, [pc, #164]	@ (80048a4 <HAL_RCC_ClockConfig+0x158>)
 8004800:	680a      	ldr	r2, [r1, #0]
 8004802:	f002 0207 	and.w	r2, r2, #7
 8004806:	42aa      	cmp	r2, r5
 8004808:	d909      	bls.n	800481e <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	680a      	ldr	r2, [r1, #0]
 800480c:	f022 0207 	bic.w	r2, r2, #7
 8004810:	432a      	orrs	r2, r5
 8004812:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004814:	680a      	ldr	r2, [r1, #0]
 8004816:	f002 0207 	and.w	r2, r2, #7
 800481a:	42aa      	cmp	r2, r5
 800481c:	d1ad      	bne.n	800477a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481e:	075a      	lsls	r2, r3, #29
 8004820:	d506      	bpl.n	8004830 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004822:	4921      	ldr	r1, [pc, #132]	@ (80048a8 <HAL_RCC_ClockConfig+0x15c>)
 8004824:	68e0      	ldr	r0, [r4, #12]
 8004826:	688a      	ldr	r2, [r1, #8]
 8004828:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800482c:	4302      	orrs	r2, r0
 800482e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004830:	071b      	lsls	r3, r3, #28
 8004832:	d507      	bpl.n	8004844 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004834:	4a1c      	ldr	r2, [pc, #112]	@ (80048a8 <HAL_RCC_ClockConfig+0x15c>)
 8004836:	6921      	ldr	r1, [r4, #16]
 8004838:	6893      	ldr	r3, [r2, #8]
 800483a:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800483e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004842:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004844:	f7ff fc1c 	bl	8004080 <HAL_RCC_GetSysClockFreq>
 8004848:	4a17      	ldr	r2, [pc, #92]	@ (80048a8 <HAL_RCC_ClockConfig+0x15c>)
 800484a:	4c18      	ldr	r4, [pc, #96]	@ (80048ac <HAL_RCC_ClockConfig+0x160>)
 800484c:	6892      	ldr	r2, [r2, #8]
 800484e:	4918      	ldr	r1, [pc, #96]	@ (80048b0 <HAL_RCC_ClockConfig+0x164>)
 8004850:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004854:	4603      	mov	r3, r0
 8004856:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8004858:	4816      	ldr	r0, [pc, #88]	@ (80048b4 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800485a:	f002 021f 	and.w	r2, r2, #31
 800485e:	40d3      	lsrs	r3, r2
}
 8004860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8004864:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004866:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8004868:	f7fe b84a 	b.w	8002900 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486c:	2a00      	cmp	r2, #0
 800486e:	d0c6      	beq.n	80047fe <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004870:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004872:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004874:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004876:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004878:	d199      	bne.n	80047ae <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487a:	019b      	lsls	r3, r3, #6
 800487c:	d49d      	bmi.n	80047ba <HAL_RCC_ClockConfig+0x6e>
 800487e:	e77c      	b.n	800477a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004880:	688a      	ldr	r2, [r1, #8]
 8004882:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004886:	4302      	orrs	r2, r0
 8004888:	608a      	str	r2, [r1, #8]
 800488a:	e7b8      	b.n	80047fe <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800488c:	039f      	lsls	r7, r3, #14
 800488e:	d494      	bmi.n	80047ba <HAL_RCC_ClockConfig+0x6e>
 8004890:	e773      	b.n	800477a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004892:	2001      	movs	r0, #1
}
 8004894:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004896:	2003      	movs	r0, #3
 8004898:	e770      	b.n	800477c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800489a:	0558      	lsls	r0, r3, #21
 800489c:	f57f af6d 	bpl.w	800477a <HAL_RCC_ClockConfig+0x2e>
 80048a0:	e78b      	b.n	80047ba <HAL_RCC_ClockConfig+0x6e>
 80048a2:	bf00      	nop
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40021000 	.word	0x40021000
 80048ac:	08009348 	.word	0x08009348
 80048b0:	20000400 	.word	0x20000400
 80048b4:	20000408 	.word	0x20000408

080048b8 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80048b8:	4b01      	ldr	r3, [pc, #4]	@ (80048c0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000400 	.word	0x20000400

080048c4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048c4:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80048c6:	4a06      	ldr	r2, [pc, #24]	@ (80048e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80048c8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80048ca:	4906      	ldr	r1, [pc, #24]	@ (80048e4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048cc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80048d0:	6808      	ldr	r0, [r1, #0]
 80048d2:	5cd3      	ldrb	r3, [r2, r3]
 80048d4:	f003 031f 	and.w	r3, r3, #31
}
 80048d8:	40d8      	lsrs	r0, r3
 80048da:	4770      	bx	lr
 80048dc:	40021000 	.word	0x40021000
 80048e0:	08009340 	.word	0x08009340
 80048e4:	20000400 	.word	0x20000400

080048e8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048e8:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <HAL_RCC_GetPCLK2Freq+0x18>)
 80048ea:	4a06      	ldr	r2, [pc, #24]	@ (8004904 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80048ec:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80048ee:	4906      	ldr	r1, [pc, #24]	@ (8004908 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048f0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80048f4:	6808      	ldr	r0, [r1, #0]
 80048f6:	5cd3      	ldrb	r3, [r2, r3]
 80048f8:	f003 031f 	and.w	r3, r3, #31
}
 80048fc:	40d8      	lsrs	r0, r3
 80048fe:	4770      	bx	lr
 8004900:	40021000 	.word	0x40021000
 8004904:	08009340 	.word	0x08009340
 8004908:	20000400 	.word	0x20000400

0800490c <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800490c:	4a45      	ldr	r2, [pc, #276]	@ (8004a24 <RCCEx_PLLSAI1_Config+0x118>)
{
 800490e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004910:	68d6      	ldr	r6, [r2, #12]
{
 8004912:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004914:	07b1      	lsls	r1, r6, #30
{
 8004916:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004918:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800491a:	d006      	beq.n	800492a <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800491c:	68d1      	ldr	r1, [r2, #12]
 800491e:	f001 0103 	and.w	r1, r1, #3
 8004922:	4281      	cmp	r1, r0
 8004924:	d04b      	beq.n	80049be <RCCEx_PLLSAI1_Config+0xb2>
 8004926:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800492a:	2802      	cmp	r0, #2
 800492c:	d058      	beq.n	80049e0 <RCCEx_PLLSAI1_Config+0xd4>
 800492e:	2803      	cmp	r0, #3
 8004930:	d04f      	beq.n	80049d2 <RCCEx_PLLSAI1_Config+0xc6>
 8004932:	2801      	cmp	r0, #1
 8004934:	d1f7      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	0793      	lsls	r3, r2, #30
 800493a:	d5f5      	bpl.n	8004928 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800493c:	4939      	ldr	r1, [pc, #228]	@ (8004a24 <RCCEx_PLLSAI1_Config+0x118>)
 800493e:	68ca      	ldr	r2, [r1, #12]
 8004940:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8004944:	ea42 0300 	orr.w	r3, r2, r0
 8004948:	6862      	ldr	r2, [r4, #4]
 800494a:	3a01      	subs	r2, #1
 800494c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004950:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8004952:	4e34      	ldr	r6, [pc, #208]	@ (8004a24 <RCCEx_PLLSAI1_Config+0x118>)
 8004954:	6833      	ldr	r3, [r6, #0]
 8004956:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800495a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800495c:	f7fe f812 	bl	8002984 <HAL_GetTick>
 8004960:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004962:	e004      	b.n	800496e <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004964:	f7fe f80e 	bl	8002984 <HAL_GetTick>
 8004968:	1bc3      	subs	r3, r0, r7
 800496a:	2b02      	cmp	r3, #2
 800496c:	d83c      	bhi.n	80049e8 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800496e:	6833      	ldr	r3, [r6, #0]
 8004970:	011a      	lsls	r2, r3, #4
 8004972:	d4f7      	bmi.n	8004964 <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004974:	68a3      	ldr	r3, [r4, #8]
 8004976:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8004978:	2d00      	cmp	r5, #0
 800497a:	d137      	bne.n	80049ec <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800497c:	6932      	ldr	r2, [r6, #16]
 800497e:	68e3      	ldr	r3, [r4, #12]
 8004980:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 8004984:	ea41 63c3 	orr.w	r3, r1, r3, lsl #27
 8004988:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800498c:	4313      	orrs	r3, r2
 800498e:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004990:	4d24      	ldr	r5, [pc, #144]	@ (8004a24 <RCCEx_PLLSAI1_Config+0x118>)
 8004992:	682b      	ldr	r3, [r5, #0]
 8004994:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004998:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800499a:	f7fd fff3 	bl	8002984 <HAL_GetTick>
 800499e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049a0:	e004      	b.n	80049ac <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a2:	f7fd ffef 	bl	8002984 <HAL_GetTick>
 80049a6:	1b80      	subs	r0, r0, r6
 80049a8:	2802      	cmp	r0, #2
 80049aa:	d81d      	bhi.n	80049e8 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	d5f7      	bpl.n	80049a2 <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049b2:	692b      	ldr	r3, [r5, #16]
 80049b4:	69a2      	ldr	r2, [r4, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	2000      	movs	r0, #0
 80049ba:	612b      	str	r3, [r5, #16]
}
 80049bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80049be:	2900      	cmp	r1, #0
 80049c0:	d0b1      	beq.n	8004926 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049c2:	68d3      	ldr	r3, [r2, #12]
       ||
 80049c4:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049c6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80049ca:	3301      	adds	r3, #1
       ||
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d1aa      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0x1a>
 80049d0:	e7bf      	b.n	8004952 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049d2:	6811      	ldr	r1, [r2, #0]
 80049d4:	038e      	lsls	r6, r1, #14
 80049d6:	d4b1      	bmi.n	800493c <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	0351      	lsls	r1, r2, #13
 80049dc:	d5a3      	bpl.n	8004926 <RCCEx_PLLSAI1_Config+0x1a>
 80049de:	e7ad      	b.n	800493c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	0557      	lsls	r7, r2, #21
 80049e4:	d59f      	bpl.n	8004926 <RCCEx_PLLSAI1_Config+0x1a>
 80049e6:	e7a9      	b.n	800493c <RCCEx_PLLSAI1_Config+0x30>
 80049e8:	2003      	movs	r0, #3
}
 80049ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 80049ec:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049ee:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 80049f0:	d00b      	beq.n	8004a0a <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049f2:	6962      	ldr	r2, [r4, #20]
 80049f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049f8:	0852      	lsrs	r2, r2, #1
 80049fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049fe:	3a01      	subs	r2, #1
 8004a00:	430b      	orrs	r3, r1
 8004a02:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004a06:	6133      	str	r3, [r6, #16]
 8004a08:	e7c2      	b.n	8004990 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a0a:	6922      	ldr	r2, [r4, #16]
 8004a0c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a10:	0852      	lsrs	r2, r2, #1
 8004a12:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a16:	3a01      	subs	r2, #1
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004a1e:	6133      	str	r3, [r6, #16]
 8004a20:	e7b6      	b.n	8004990 <RCCEx_PLLSAI1_Config+0x84>
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000

08004a28 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a28:	4a3e      	ldr	r2, [pc, #248]	@ (8004b24 <RCCEx_PLLSAI2_Config+0xfc>)
{
 8004a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a2c:	68d6      	ldr	r6, [r2, #12]
{
 8004a2e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a30:	07b1      	lsls	r1, r6, #30
{
 8004a32:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a34:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a36:	d006      	beq.n	8004a46 <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a38:	68d1      	ldr	r1, [r2, #12]
 8004a3a:	f001 0103 	and.w	r1, r1, #3
 8004a3e:	4281      	cmp	r1, r0
 8004a40:	d04b      	beq.n	8004ada <RCCEx_PLLSAI2_Config+0xb2>
 8004a42:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8004a46:	2802      	cmp	r0, #2
 8004a48:	d058      	beq.n	8004afc <RCCEx_PLLSAI2_Config+0xd4>
 8004a4a:	2803      	cmp	r0, #3
 8004a4c:	d04f      	beq.n	8004aee <RCCEx_PLLSAI2_Config+0xc6>
 8004a4e:	2801      	cmp	r0, #1
 8004a50:	d1f7      	bne.n	8004a42 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	0793      	lsls	r3, r2, #30
 8004a56:	d5f5      	bpl.n	8004a44 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a58:	4932      	ldr	r1, [pc, #200]	@ (8004b24 <RCCEx_PLLSAI2_Config+0xfc>)
 8004a5a:	68ca      	ldr	r2, [r1, #12]
 8004a5c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8004a60:	ea42 0300 	orr.w	r3, r2, r0
 8004a64:	6862      	ldr	r2, [r4, #4]
 8004a66:	3a01      	subs	r2, #1
 8004a68:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004a6c:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a6e:	4e2d      	ldr	r6, [pc, #180]	@ (8004b24 <RCCEx_PLLSAI2_Config+0xfc>)
 8004a70:	6833      	ldr	r3, [r6, #0]
 8004a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a76:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004a78:	f7fd ff84 	bl	8002984 <HAL_GetTick>
 8004a7c:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a7e:	e004      	b.n	8004a8a <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a80:	f7fd ff80 	bl	8002984 <HAL_GetTick>
 8004a84:	1bc3      	subs	r3, r0, r7
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d83c      	bhi.n	8004b04 <RCCEx_PLLSAI2_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a8a:	6833      	ldr	r3, [r6, #0]
 8004a8c:	009a      	lsls	r2, r3, #2
 8004a8e:	d4f7      	bmi.n	8004a80 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a90:	68a3      	ldr	r3, [r4, #8]
 8004a92:	021b      	lsls	r3, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	d137      	bne.n	8004b08 <RCCEx_PLLSAI2_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a98:	6972      	ldr	r2, [r6, #20]
 8004a9a:	68e1      	ldr	r1, [r4, #12]
 8004a9c:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 8004aa0:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8004aa4:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8004aac:	4d1d      	ldr	r5, [pc, #116]	@ (8004b24 <RCCEx_PLLSAI2_Config+0xfc>)
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004ab6:	f7fd ff65 	bl	8002984 <HAL_GetTick>
 8004aba:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004abc:	e004      	b.n	8004ac8 <RCCEx_PLLSAI2_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004abe:	f7fd ff61 	bl	8002984 <HAL_GetTick>
 8004ac2:	1b80      	subs	r0, r0, r6
 8004ac4:	2802      	cmp	r0, #2
 8004ac6:	d81d      	bhi.n	8004b04 <RCCEx_PLLSAI2_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	d5f7      	bpl.n	8004abe <RCCEx_PLLSAI2_Config+0x96>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ace:	696b      	ldr	r3, [r5, #20]
 8004ad0:	6962      	ldr	r2, [r4, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	616b      	str	r3, [r5, #20]
}
 8004ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004ada:	2900      	cmp	r1, #0
 8004adc:	d0b1      	beq.n	8004a42 <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ade:	68d3      	ldr	r3, [r2, #12]
       ||
 8004ae0:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ae2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004ae6:	3301      	adds	r3, #1
       ||
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d1aa      	bne.n	8004a42 <RCCEx_PLLSAI2_Config+0x1a>
 8004aec:	e7bf      	b.n	8004a6e <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aee:	6811      	ldr	r1, [r2, #0]
 8004af0:	038e      	lsls	r6, r1, #14
 8004af2:	d4b1      	bmi.n	8004a58 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	0351      	lsls	r1, r2, #13
 8004af8:	d5a3      	bpl.n	8004a42 <RCCEx_PLLSAI2_Config+0x1a>
 8004afa:	e7ad      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	0557      	lsls	r7, r2, #21
 8004b00:	d59f      	bpl.n	8004a42 <RCCEx_PLLSAI2_Config+0x1a>
 8004b02:	e7a9      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0x30>
 8004b04:	2003      	movs	r0, #3
}
 8004b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b08:	6972      	ldr	r2, [r6, #20]
 8004b0a:	6921      	ldr	r1, [r4, #16]
 8004b0c:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8004b10:	0849      	lsrs	r1, r1, #1
 8004b12:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8004b16:	3901      	subs	r1, #1
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8004b1e:	6172      	str	r2, [r6, #20]
 8004b20:	e7c4      	b.n	8004aac <RCCEx_PLLSAI2_Config+0x84>
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000

08004b28 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b2c:	6803      	ldr	r3, [r0, #0]
 8004b2e:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 8004b32:	b083      	sub	sp, #12
 8004b34:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b36:	d016      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b38:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004b3a:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8004b3e:	f000 81e8 	beq.w	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004b42:	f200 8123 	bhi.w	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004b46:	2900      	cmp	r1, #0
 8004b48:	f000 81b7 	beq.w	8004eba <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004b4c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8004b50:	f040 81d1 	bne.w	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b54:	2100      	movs	r1, #0
 8004b56:	3020      	adds	r0, #32
 8004b58:	f7ff ff66 	bl	8004a28 <RCCEx_PLLSAI2_Config>
 8004b5c:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b5e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004b60:	2e00      	cmp	r6, #0
 8004b62:	f000 81e3 	beq.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x404>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b66:	04d8      	lsls	r0, r3, #19
 8004b68:	f140 8121 	bpl.w	8004dae <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004b6c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8004b6e:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8004b72:	f000 81d4 	beq.w	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004b76:	f200 817f 	bhi.w	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004b7a:	2900      	cmp	r1, #0
 8004b7c:	f000 81a6 	beq.w	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004b80:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004b84:	f040 81b9 	bne.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b88:	2100      	movs	r1, #0
 8004b8a:	f104 0020 	add.w	r0, r4, #32
 8004b8e:	f7ff ff4b 	bl	8004a28 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b92:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b94:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8004b96:	2f00      	cmp	r7, #0
 8004b98:	f040 8175 	bne.w	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b9c:	49b4      	ldr	r1, [pc, #720]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004b9e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8004ba0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004ba4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004ba8:	4302      	orrs	r2, r0
 8004baa:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bae:	0399      	lsls	r1, r3, #14
 8004bb0:	f100 8101 	bmi.w	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bb4:	07d9      	lsls	r1, r3, #31
 8004bb6:	d508      	bpl.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bb8:	49ad      	ldr	r1, [pc, #692]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004bba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004bbc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004bc0:	f022 0203 	bic.w	r2, r2, #3
 8004bc4:	4302      	orrs	r2, r0
 8004bc6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bca:	079a      	lsls	r2, r3, #30
 8004bcc:	d508      	bpl.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bce:	49a8      	ldr	r1, [pc, #672]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004bd0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004bd2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004bd6:	f022 020c 	bic.w	r2, r2, #12
 8004bda:	4302      	orrs	r2, r0
 8004bdc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004be0:	075f      	lsls	r7, r3, #29
 8004be2:	d508      	bpl.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004be4:	49a2      	ldr	r1, [pc, #648]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004be6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004be8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004bec:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8004bf0:	4302      	orrs	r2, r0
 8004bf2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bf6:	071d      	lsls	r5, r3, #28
 8004bf8:	d508      	bpl.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bfa:	499d      	ldr	r1, [pc, #628]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004bfc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004bfe:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c02:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004c06:	4302      	orrs	r2, r0
 8004c08:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c0c:	06d8      	lsls	r0, r3, #27
 8004c0e:	d508      	bpl.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c10:	4997      	ldr	r1, [pc, #604]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c12:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004c14:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c18:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004c1c:	4302      	orrs	r2, r0
 8004c1e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c22:	0699      	lsls	r1, r3, #26
 8004c24:	d508      	bpl.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c26:	4992      	ldr	r1, [pc, #584]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c28:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004c2a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c2e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004c32:	4302      	orrs	r2, r0
 8004c34:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c38:	059a      	lsls	r2, r3, #22
 8004c3a:	d508      	bpl.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c3c:	498c      	ldr	r1, [pc, #560]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c3e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004c40:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c44:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004c48:	4302      	orrs	r2, r0
 8004c4a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c4e:	055f      	lsls	r7, r3, #21
 8004c50:	d508      	bpl.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c52:	4987      	ldr	r1, [pc, #540]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c54:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8004c56:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c5a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004c5e:	4302      	orrs	r2, r0
 8004c60:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c64:	065d      	lsls	r5, r3, #25
 8004c66:	d508      	bpl.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c68:	4981      	ldr	r1, [pc, #516]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c6a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004c6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c70:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004c74:	4302      	orrs	r2, r0
 8004c76:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c7a:	0618      	lsls	r0, r3, #24
 8004c7c:	d508      	bpl.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c7e:	497c      	ldr	r1, [pc, #496]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c80:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004c82:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c86:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004c8a:	4302      	orrs	r2, r0
 8004c8c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c90:	05d9      	lsls	r1, r3, #23
 8004c92:	d508      	bpl.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c94:	4976      	ldr	r1, [pc, #472]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c98:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c9c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004ca0:	4302      	orrs	r2, r0
 8004ca2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ca6:	02da      	lsls	r2, r3, #11
 8004ca8:	d508      	bpl.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004caa:	4971      	ldr	r1, [pc, #452]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004cac:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004cae:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 8004cb2:	f022 0203 	bic.w	r2, r2, #3
 8004cb6:	4302      	orrs	r2, r0
 8004cb8:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cbc:	049f      	lsls	r7, r3, #18
 8004cbe:	d510      	bpl.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cc0:	496b      	ldr	r1, [pc, #428]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004cc2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004cc4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004cc8:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004ccc:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cce:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cd2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cd6:	f000 8104 	beq.w	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cda:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004cde:	f000 8132 	beq.w	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ce2:	031d      	lsls	r5, r3, #12
 8004ce4:	d510      	bpl.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ce6:	4962      	ldr	r1, [pc, #392]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004ce8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004cea:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004cee:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004cf2:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cf4:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cf8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cfc:	f000 80f6 	beq.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d00:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004d04:	f000 8129 	beq.w	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x432>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d08:	0358      	lsls	r0, r3, #13
 8004d0a:	d510      	bpl.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d0c:	4958      	ldr	r1, [pc, #352]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d0e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8004d10:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d14:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004d18:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d1a:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d1e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d22:	f000 80d9 	beq.w	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d26:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004d2a:	f000 8120 	beq.w	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x446>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d2e:	0459      	lsls	r1, r3, #17
 8004d30:	d510      	bpl.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d32:	484f      	ldr	r0, [pc, #316]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d34:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004d36:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8004d3a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d3e:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d40:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d44:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d48:	f000 80d9 	beq.w	8004efe <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d4c:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004d50:	f000 80ee 	beq.w	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d54:	041a      	lsls	r2, r3, #16
 8004d56:	d509      	bpl.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d58:	4945      	ldr	r1, [pc, #276]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d5a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8004d5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d62:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8004d66:	4302      	orrs	r2, r0
 8004d68:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d6c:	03db      	lsls	r3, r3, #15
 8004d6e:	d509      	bpl.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d70:	4a3f      	ldr	r2, [pc, #252]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d72:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8004d76:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004d7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8004d84:	4630      	mov	r0, r6
 8004d86:	b003      	add	sp, #12
 8004d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d8c:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8004d90:	f040 80b1 	bne.w	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d94:	4836      	ldr	r0, [pc, #216]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d96:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8004d9a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004da4:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004da6:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004daa:	f53f aedf 	bmi.w	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004dae:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004db0:	0399      	lsls	r1, r3, #14
 8004db2:	f57f aeff 	bpl.w	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004db6:	4b2e      	ldr	r3, [pc, #184]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004db8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004dba:	00d2      	lsls	r2, r2, #3
 8004dbc:	d565      	bpl.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x362>
    FlagStatus       pwrclkchanged = RESET;
 8004dbe:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dc2:	4d2c      	ldr	r5, [pc, #176]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dca:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004dcc:	f7fd fdda 	bl	8002984 <HAL_GetTick>
 8004dd0:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dd2:	e005      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd4:	f7fd fdd6 	bl	8002984 <HAL_GetTick>
 8004dd8:	eba0 0309 	sub.w	r3, r0, r9
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d860      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	05db      	lsls	r3, r3, #23
 8004de4:	d5f6      	bpl.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    if(ret == HAL_OK)
 8004de6:	2f00      	cmp	r7, #0
 8004de8:	f040 80cb 	bne.w	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dec:	4d20      	ldr	r5, [pc, #128]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dee:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004df2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004df6:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004dfa:	d026      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d024      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x322>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e00:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e04:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e0c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e10:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e18:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e1c:	07cf      	lsls	r7, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e1e:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 8004e22:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e26:	d510      	bpl.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x322>
        tickstart = HAL_GetTick();
 8004e28:	f7fd fdac 	bl	8002984 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004e30:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e32:	e004      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x316>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fd fda6 	bl	8002984 <HAL_GetTick>
 8004e38:	1bc0      	subs	r0, r0, r7
 8004e3a:	4548      	cmp	r0, r9
 8004e3c:	d831      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e3e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004e42:	0798      	lsls	r0, r3, #30
 8004e44:	d5f6      	bpl.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e46:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8004e4a:	4909      	ldr	r1, [pc, #36]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004e4c:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8004e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e5a:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8004e5c:	f1b8 0f00 	cmp.w	r8, #0
 8004e60:	f43f aea8 	beq.w	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e64:	4902      	ldr	r1, [pc, #8]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004e66:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004e68:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004e6c:	658a      	str	r2, [r1, #88]	@ 0x58
 8004e6e:	e6a1      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8004e70:	40021000 	.word	0x40021000
 8004e74:	40007000 	.word	0x40007000
    switch(PeriphClkInit->Sai2ClockSelection)
 8004e78:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004e7c:	d13d      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004e7e:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 8004e80:	2f00      	cmp	r7, #0
 8004e82:	f43f ae8b 	beq.w	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e86:	463e      	mov	r6, r7
 8004e88:	e792      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004e8c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004e90:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e9c:	f04f 0801 	mov.w	r8, #1
 8004ea0:	e78f      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = HAL_TIMEOUT;
 8004ea2:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ea4:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8004ea6:	f1b8 0f00 	cmp.w	r8, #0
 8004eaa:	f43f ae83 	beq.w	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eae:	4936      	ldr	r1, [pc, #216]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004eb0:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004eb2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004eb6:	658a      	str	r2, [r1, #88]	@ 0x58
 8004eb8:	e67c      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eba:	3004      	adds	r0, #4
 8004ebc:	f7ff fd26 	bl	800490c <RCCEx_PLLSAI1_Config>
 8004ec0:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ec2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004ec4:	2e00      	cmp	r6, #0
 8004ec6:	f47f ae4e 	bne.w	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8004eca:	e02f      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x404>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ecc:	1d20      	adds	r0, r4, #4
 8004ece:	f7ff fd1d 	bl	800490c <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ed2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ed4:	4607      	mov	r7, r0
      break;
 8004ed6:	e65e      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed8:	68ca      	ldr	r2, [r1, #12]
 8004eda:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004ede:	60ca      	str	r2, [r1, #12]
 8004ee0:	e725      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee2:	68ca      	ldr	r2, [r1, #12]
 8004ee4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004ee8:	60ca      	str	r2, [r1, #12]
 8004eea:	e6fa      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eec:	68ca      	ldr	r2, [r1, #12]
 8004eee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004ef2:	60ca      	str	r2, [r1, #12]
 8004ef4:	e708      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ef6:	2601      	movs	r6, #1
 8004ef8:	e635      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004efa:	2601      	movs	r6, #1
 8004efc:	e757      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004efe:	2102      	movs	r1, #2
 8004f00:	1d20      	adds	r0, r4, #4
 8004f02:	f7ff fd03 	bl	800490c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f06:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	f43f af23 	beq.w	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f0e:	4606      	mov	r6, r0
 8004f10:	e720      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f12:	481d      	ldr	r0, [pc, #116]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004f14:	68c2      	ldr	r2, [r0, #12]
 8004f16:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004f1a:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8004f1c:	e73a      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f1e:	491a      	ldr	r1, [pc, #104]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004f20:	68ca      	ldr	r2, [r1, #12]
 8004f22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004f26:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f28:	4637      	mov	r7, r6
 8004f2a:	e7a9      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f2c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004f2e:	e731      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f30:	2102      	movs	r1, #2
 8004f32:	f104 0020 	add.w	r0, r4, #32
 8004f36:	f7ff fd77 	bl	8004a28 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f3a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f43f af09 	beq.w	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f42:	4606      	mov	r6, r0
 8004f44:	e706      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f46:	2101      	movs	r1, #1
 8004f48:	1d20      	adds	r0, r4, #4
 8004f4a:	f7ff fcdf 	bl	800490c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f4e:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8004f50:	2800      	cmp	r0, #0
 8004f52:	f43f aec6 	beq.w	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f56:	4606      	mov	r6, r0
 8004f58:	e6c3      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	1d20      	adds	r0, r4, #4
 8004f5e:	f7ff fcd5 	bl	800490c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f62:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f64:	2800      	cmp	r0, #0
 8004f66:	f43f aecf 	beq.w	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	e6cc      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f6e:	2101      	movs	r1, #1
 8004f70:	1d20      	adds	r0, r4, #4
 8004f72:	f7ff fccb 	bl	800490c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f76:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	f43f aed8 	beq.w	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f7e:	4606      	mov	r6, r0
 8004f80:	e6d5      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004f82:	463e      	mov	r6, r7
 8004f84:	e78e      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8004f86:	bf00      	nop
 8004f88:	40021000 	.word	0x40021000

08004f8c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f90:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f92:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004f94:	460e      	mov	r6, r1
 8004f96:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8004f98:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004f9c:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f9e:	f7fd fcf1 	bl	8002984 <HAL_GetTick>
 8004fa2:	4437      	add	r7, r6
 8004fa4:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8004fa6:	f7fd fced 	bl	8002984 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004faa:	4b32      	ldr	r3, [pc, #200]	@ (8005074 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fac:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004fb4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004fb8:	0d1b      	lsrs	r3, r3, #20
 8004fba:	fb07 f303 	mul.w	r3, r7, r3
 8004fbe:	3601      	adds	r6, #1
 8004fc0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fc2:	d111      	bne.n	8004fe8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 8004fc4:	68a3      	ldr	r3, [r4, #8]
 8004fc6:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8004fca:	d009      	beq.n	8004fe0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fcc:	7b23      	ldrb	r3, [r4, #12]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fd4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fd8:	68a3      	ldr	r3, [r4, #8]
 8004fda:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8004fde:	d1f5      	bne.n	8004fcc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 8004fe0:	2000      	movs	r0, #0
}
 8004fe2:	b002      	add	sp, #8
 8004fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fe8:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fea:	4623      	mov	r3, r4
 8004fec:	e013      	b.n	8005016 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      tmpreg8 = *ptmpreg8;
 8004fee:	7b23      	ldrb	r3, [r4, #12]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8004ff6:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ffa:	f7fd fcc3 	bl	8002984 <HAL_GetTick>
 8004ffe:	eba0 0008 	sub.w	r0, r0, r8
 8005002:	42b8      	cmp	r0, r7
 8005004:	d20c      	bcs.n	8005020 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 8005006:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005008:	9b01      	ldr	r3, [sp, #4]
 800500a:	3b01      	subs	r3, #1
        tmp_timeout = 0U;
 800500c:	2a00      	cmp	r2, #0
      count--;
 800500e:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005010:	682b      	ldr	r3, [r5, #0]
        tmp_timeout = 0U;
 8005012:	bf08      	it	eq
 8005014:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800501c:	d1e7      	bne.n	8004fee <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
 800501e:	e7df      	b.n	8004fe0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005020:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005024:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005026:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800502a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800502e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005030:	d013      	beq.n	800505a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005032:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005034:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005038:	d107      	bne.n	800504a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005048:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800504a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800504c:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800504e:	f885 205d 	strb.w	r2, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005052:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005056:	2003      	movs	r0, #3
 8005058:	e7c3      	b.n	8004fe2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800505a:	68aa      	ldr	r2, [r5, #8]
 800505c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005060:	d002      	beq.n	8005068 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005062:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005066:	d1e4      	bne.n	8005032 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	e7df      	b.n	8005032 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 8005072:	bf00      	nop
 8005074:	20000400 	.word	0x20000400

08005078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 800507e:	2300      	movs	r3, #0
{
 8005080:	460e      	mov	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 8005082:	f88d 3007 	strb.w	r3, [sp, #7]
 8005086:	eb01 0902 	add.w	r9, r1, r2
{
 800508a:	4617      	mov	r7, r2
 800508c:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800508e:	f7fd fc79 	bl	8002984 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005092:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 80051b8 <SPI_EndRxTxTransaction+0x140>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005096:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 800509a:	f7fd fc73 	bl	8002984 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800509e:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 80050a2:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80050a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80050ac:	0d1b      	lsrs	r3, r3, #20
 80050ae:	fb0a f303 	mul.w	r3, sl, r3
 80050b2:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80050b4:	1c73      	adds	r3, r6, #1
 80050b6:	bf18      	it	ne
 80050b8:	4683      	movne	fp, r0
 80050ba:	d130      	bne.n	800511e <SPI_EndRxTxTransaction+0xa6>
 80050bc:	68a3      	ldr	r3, [r4, #8]
 80050be:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 80050c2:	d1fb      	bne.n	80050bc <SPI_EndRxTxTransaction+0x44>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050c4:	f7fd fc5e 	bl	8002984 <HAL_GetTick>
 80050c8:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 80050cc:	f7fd fc5a 	bl	8002984 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050d0:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050d4:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050d6:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80050da:	fb09 f303 	mul.w	r3, r9, r3
 80050de:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 80050e0:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050e2:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050e4:	d130      	bne.n	8005148 <SPI_EndRxTxTransaction+0xd0>
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	061a      	lsls	r2, r3, #24
 80050ea:	d4fc      	bmi.n	80050e6 <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050ec:	463a      	mov	r2, r7
 80050ee:	4631      	mov	r1, r6
 80050f0:	4628      	mov	r0, r5
 80050f2:	f7ff ff4b 	bl	8004f8c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80050f6:	bb58      	cbnz	r0, 8005150 <SPI_EndRxTxTransaction+0xd8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80050f8:	b005      	add	sp, #20
 80050fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050fe:	f7fd fc41 	bl	8002984 <HAL_GetTick>
 8005102:	eba0 000b 	sub.w	r0, r0, fp
 8005106:	4582      	cmp	sl, r0
 8005108:	d92a      	bls.n	8005160 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 800510a:	9a02      	ldr	r2, [sp, #8]
      count--;
 800510c:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800510e:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8005110:	2a00      	cmp	r2, #0
      count--;
 8005112:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005116:	bf08      	it	eq
 8005118:	f04f 0a00 	moveq.w	sl, #0
      count--;
 800511c:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800511e:	68a3      	ldr	r3, [r4, #8]
 8005120:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8005124:	d1eb      	bne.n	80050fe <SPI_EndRxTxTransaction+0x86>
 8005126:	e7cd      	b.n	80050c4 <SPI_EndRxTxTransaction+0x4c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005128:	f7fd fc2c 	bl	8002984 <HAL_GetTick>
 800512c:	eba0 0008 	sub.w	r0, r0, r8
 8005130:	4581      	cmp	r9, r0
 8005132:	d915      	bls.n	8005160 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8005134:	9a03      	ldr	r2, [sp, #12]
      count--;
 8005136:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005138:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 800513a:	2a00      	cmp	r2, #0
      count--;
 800513c:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005140:	bf08      	it	eq
 8005142:	f04f 0900 	moveq.w	r9, #0
      count--;
 8005146:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005148:	68a3      	ldr	r3, [r4, #8]
 800514a:	061b      	lsls	r3, r3, #24
 800514c:	d4ec      	bmi.n	8005128 <SPI_EndRxTxTransaction+0xb0>
 800514e:	e7cd      	b.n	80050ec <SPI_EndRxTxTransaction+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005150:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8005152:	f043 0320 	orr.w	r3, r3, #32
 8005156:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005158:	2003      	movs	r0, #3
}
 800515a:	b005      	add	sp, #20
 800515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005160:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005164:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005166:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800516a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800516e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005170:	d016      	beq.n	80051a0 <SPI_EndRxTxTransaction+0x128>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005172:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005174:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005178:	d107      	bne.n	800518a <SPI_EndRxTxTransaction+0x112>
          SPI_RESET_CRC(hspi);
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005188:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800518a:	2301      	movs	r3, #1
 800518c:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005190:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8005192:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005194:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 8005198:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519c:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 800519e:	e7db      	b.n	8005158 <SPI_EndRxTxTransaction+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a0:	68aa      	ldr	r2, [r5, #8]
 80051a2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80051a6:	d002      	beq.n	80051ae <SPI_EndRxTxTransaction+0x136>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051a8:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80051ac:	d1e1      	bne.n	8005172 <SPI_EndRxTxTransaction+0xfa>
          __HAL_SPI_DISABLE(hspi);
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e7dc      	b.n	8005172 <SPI_EndRxTxTransaction+0xfa>
 80051b8:	20000400 	.word	0x20000400

080051bc <HAL_SPI_Init>:
  if (hspi == NULL)
 80051bc:	2800      	cmp	r0, #0
 80051be:	d074      	beq.n	80052aa <HAL_SPI_Init+0xee>
{
 80051c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c4:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051c6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d053      	beq.n	8005274 <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80051d2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051d6:	2200      	movs	r2, #0
 80051d8:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80051da:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d057      	beq.n	8005292 <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 80051e2:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051e4:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80051e6:	2302      	movs	r3, #2
 80051e8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80051ec:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051ee:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80051f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f6:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051f8:	d842      	bhi.n	8005280 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051fa:	d151      	bne.n	80052a0 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051fc:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051fe:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005202:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8005206:	6862      	ldr	r2, [r4, #4]
 8005208:	68a3      	ldr	r3, [r4, #8]
 800520a:	69a6      	ldr	r6, [r4, #24]
 800520c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005210:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 8005214:	431a      	orrs	r2, r3
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	4313      	orrs	r3, r2
 800521e:	6962      	ldr	r2, [r4, #20]
 8005220:	f002 0201 	and.w	r2, r2, #1
 8005224:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005226:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005228:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005234:	69e3      	ldr	r3, [r4, #28]
 8005236:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 800523a:	6a23      	ldr	r3, [r4, #32]
 800523c:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 8005240:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 8005244:	4313      	orrs	r3, r2
 8005246:	ea43 0308 	orr.w	r3, r3, r8
 800524a:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800524c:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800524e:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005250:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005254:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005256:	f000 0010 	and.w	r0, r0, #16
 800525a:	ea4e 0306 	orr.w	r3, lr, r6
 800525e:	4303      	orrs	r3, r0
 8005260:	ea43 030c 	orr.w	r3, r3, ip
 8005264:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005266:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005268:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800526a:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800526c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8005270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005274:	6863      	ldr	r3, [r4, #4]
 8005276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800527a:	d0aa      	beq.n	80051d2 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800527c:	61e0      	str	r0, [r4, #28]
 800527e:	e7a8      	b.n	80051d2 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005280:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8005284:	d113      	bne.n	80052ae <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005286:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005288:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800528c:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8005290:	e7b9      	b.n	8005206 <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 8005292:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005294:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005298:	f7fd f916 	bl	80024c8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800529c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800529e:	e7a0      	b.n	80051e2 <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052a0:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052a4:	2500      	movs	r5, #0
 80052a6:	62a5      	str	r5, [r4, #40]	@ 0x28
 80052a8:	e7ad      	b.n	8005206 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 80052aa:	2001      	movs	r0, #1
}
 80052ac:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052ae:	f04f 0c00 	mov.w	ip, #0
 80052b2:	e7f7      	b.n	80052a4 <HAL_SPI_Init+0xe8>

080052b4 <HAL_SPI_TransmitReceive>:
{
 80052b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b8:	4604      	mov	r4, r0
 80052ba:	4691      	mov	r9, r2
 80052bc:	461f      	mov	r7, r3
 80052be:	9e08      	ldr	r6, [sp, #32]
 80052c0:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 80052c2:	f7fd fb5f 	bl	8002984 <HAL_GetTick>
  tmp_state           = hspi->State;
 80052c6:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 80052ca:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052cc:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80052ce:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052d0:	d00b      	beq.n	80052ea <HAL_SPI_TransmitReceive+0x36>
 80052d2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80052d6:	f040 808d 	bne.w	80053f4 <HAL_SPI_TransmitReceive+0x140>
 80052da:	b2d9      	uxtb	r1, r3
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80052dc:	68a3      	ldr	r3, [r4, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 8088 	bne.w	80053f4 <HAL_SPI_TransmitReceive+0x140>
 80052e4:	2904      	cmp	r1, #4
 80052e6:	f040 8085 	bne.w	80053f4 <HAL_SPI_TransmitReceive+0x140>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052ea:	f1b8 0f00 	cmp.w	r8, #0
 80052ee:	f000 8146 	beq.w	800557e <HAL_SPI_TransmitReceive+0x2ca>
 80052f2:	f1b9 0f00 	cmp.w	r9, #0
 80052f6:	f000 8142 	beq.w	800557e <HAL_SPI_TransmitReceive+0x2ca>
 80052fa:	2f00      	cmp	r7, #0
 80052fc:	f000 813f 	beq.w	800557e <HAL_SPI_TransmitReceive+0x2ca>
  __HAL_LOCK(hspi);
 8005300:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d075      	beq.n	80053f4 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005308:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800530c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  __HAL_LOCK(hspi);
 8005310:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005312:	2b04      	cmp	r3, #4
  __HAL_LOCK(hspi);
 8005314:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005318:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 800531a:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800531e:	bf1c      	itt	ne
 8005320:	2305      	movne	r3, #5
 8005322:	f884 305d 	strbne.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005326:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005328:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800532c:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 800532e:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 8005332:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005336:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005338:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800533c:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800533e:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005340:	d95b      	bls.n	80053fa <HAL_SPI_TransmitReceive+0x146>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005342:	6859      	ldr	r1, [r3, #4]
 8005344:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8005348:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800534a:	6819      	ldr	r1, [r3, #0]
 800534c:	0648      	lsls	r0, r1, #25
 800534e:	d403      	bmi.n	8005358 <HAL_SPI_TransmitReceive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8005350:	6819      	ldr	r1, [r3, #0]
 8005352:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8005356:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005358:	2a00      	cmp	r2, #0
 800535a:	f000 80dc 	beq.w	8005516 <HAL_SPI_TransmitReceive+0x262>
 800535e:	2f01      	cmp	r7, #1
 8005360:	f000 80d9 	beq.w	8005516 <HAL_SPI_TransmitReceive+0x262>
 8005364:	1c73      	adds	r3, r6, #1
        txallowed = 1U;
 8005366:	f04f 0701 	mov.w	r7, #1
 800536a:	d028      	beq.n	80053be <HAL_SPI_TransmitReceive+0x10a>
 800536c:	e0bc      	b.n	80054e8 <HAL_SPI_TransmitReceive+0x234>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800536e:	6822      	ldr	r2, [r4, #0]
 8005370:	6893      	ldr	r3, [r2, #8]
 8005372:	0798      	lsls	r0, r3, #30
 8005374:	d50d      	bpl.n	8005392 <HAL_SPI_TransmitReceive+0xde>
 8005376:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005378:	b29b      	uxth	r3, r3
 800537a:	b153      	cbz	r3, 8005392 <HAL_SPI_TransmitReceive+0xde>
 800537c:	b147      	cbz	r7, 8005390 <HAL_SPI_TransmitReceive+0xdc>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800537e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005380:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005384:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005386:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005388:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800538a:	3b01      	subs	r3, #1
 800538c:	b29b      	uxth	r3, r3
 800538e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005390:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005392:	6893      	ldr	r3, [r2, #8]
 8005394:	f013 0301 	ands.w	r3, r3, #1
 8005398:	d00f      	beq.n	80053ba <HAL_SPI_TransmitReceive+0x106>
 800539a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800539e:	b289      	uxth	r1, r1
 80053a0:	b159      	cbz	r1, 80053ba <HAL_SPI_TransmitReceive+0x106>
        txallowed = 1U;
 80053a2:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053a6:	68d2      	ldr	r2, [r2, #12]
 80053a8:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053ac:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80053ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053ba:	f7fd fae3 	bl	8002984 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053be:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1d3      	bne.n	800536e <HAL_SPI_TransmitReceive+0xba>
 80053c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ce      	bne.n	800536e <HAL_SPI_TransmitReceive+0xba>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d0:	462a      	mov	r2, r5
 80053d2:	4631      	mov	r1, r6
 80053d4:	4620      	mov	r0, r4
 80053d6:	f7ff fe4f 	bl	8005078 <SPI_EndRxTxTransaction>
 80053da:	2800      	cmp	r0, #0
 80053dc:	f040 80ca 	bne.w	8005574 <HAL_SPI_TransmitReceive+0x2c0>
  hspi->State = HAL_SPI_STATE_READY;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053e6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 80053e8:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053ec:	1e18      	subs	r0, r3, #0
 80053ee:	bf18      	it	ne
 80053f0:	2001      	movne	r0, #1
 80053f2:	e000      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x142>
    return HAL_BUSY;
 80053f4:	2002      	movs	r0, #2
}
 80053f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80053fa:	2f01      	cmp	r7, #1
 80053fc:	f000 80d9 	beq.w	80055b2 <HAL_SPI_TransmitReceive+0x2fe>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005400:	6859      	ldr	r1, [r3, #4]
 8005402:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8005406:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005408:	6819      	ldr	r1, [r3, #0]
 800540a:	0649      	lsls	r1, r1, #25
 800540c:	d403      	bmi.n	8005416 <HAL_SPI_TransmitReceive+0x162>
    __HAL_SPI_ENABLE(hspi);
 800540e:	6819      	ldr	r1, [r3, #0]
 8005410:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8005414:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005416:	b96a      	cbnz	r2, 8005434 <HAL_SPI_TransmitReceive+0x180>
      if (hspi->TxXferCount > 1U)
 8005418:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800541a:	b292      	uxth	r2, r2
 800541c:	2a01      	cmp	r2, #1
 800541e:	f240 80b0 	bls.w	8005582 <HAL_SPI_TransmitReceive+0x2ce>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005422:	4642      	mov	r2, r8
 8005424:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005428:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount -= 2U;
 800542a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800542c:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800542e:	3b02      	subs	r3, #2
 8005430:	b29b      	uxth	r3, r3
 8005432:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005434:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005436:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005438:	b29b      	uxth	r3, r3
 800543a:	b923      	cbnz	r3, 8005446 <HAL_SPI_TransmitReceive+0x192>
 800543c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0c4      	beq.n	80053d0 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	6893      	ldr	r3, [r2, #8]
 800544a:	0799      	lsls	r1, r3, #30
 800544c:	d505      	bpl.n	800545a <HAL_SPI_TransmitReceive+0x1a6>
 800544e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005450:	b29b      	uxth	r3, r3
 8005452:	b113      	cbz	r3, 800545a <HAL_SPI_TransmitReceive+0x1a6>
 8005454:	2f00      	cmp	r7, #0
 8005456:	d174      	bne.n	8005542 <HAL_SPI_TransmitReceive+0x28e>
        txallowed = 0U;
 8005458:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800545a:	6893      	ldr	r3, [r2, #8]
 800545c:	f013 0301 	ands.w	r3, r3, #1
 8005460:	d019      	beq.n	8005496 <HAL_SPI_TransmitReceive+0x1e2>
 8005462:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005466:	b289      	uxth	r1, r1
 8005468:	b1a9      	cbz	r1, 8005496 <HAL_SPI_TransmitReceive+0x1e2>
        if (hspi->RxXferCount > 1U)
 800546a:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800546e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8005470:	b280      	uxth	r0, r0
 8005472:	2801      	cmp	r0, #1
 8005474:	d959      	bls.n	800552a <HAL_SPI_TransmitReceive+0x276>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005476:	68d0      	ldr	r0, [r2, #12]
 8005478:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800547c:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800547e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005482:	3902      	subs	r1, #2
 8005484:	b289      	uxth	r1, r1
 8005486:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800548a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800548e:	b289      	uxth	r1, r1
 8005490:	2901      	cmp	r1, #1
 8005492:	d93b      	bls.n	800550c <HAL_SPI_TransmitReceive+0x258>
        txallowed = 1U;
 8005494:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005496:	f7fd fa75 	bl	8002984 <HAL_GetTick>
 800549a:	1b40      	subs	r0, r0, r5
 800549c:	42b0      	cmp	r0, r6
 800549e:	d3ca      	bcc.n	8005436 <HAL_SPI_TransmitReceive+0x182>
 80054a0:	1c73      	adds	r3, r6, #1
 80054a2:	d0c8      	beq.n	8005436 <HAL_SPI_TransmitReceive+0x182>
        hspi->State = HAL_SPI_STATE_READY;
 80054a4:	2301      	movs	r3, #1
 80054a6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80054aa:	2300      	movs	r3, #0
 80054ac:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80054b0:	2003      	movs	r0, #3
}
 80054b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054b6:	b147      	cbz	r7, 80054ca <HAL_SPI_TransmitReceive+0x216>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80054ba:	f833 1b02 	ldrh.w	r1, [r3], #2
 80054be:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80054c2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80054ca:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054cc:	6893      	ldr	r3, [r2, #8]
 80054ce:	f013 0301 	ands.w	r3, r3, #1
 80054d2:	d004      	beq.n	80054de <HAL_SPI_TransmitReceive+0x22a>
 80054d4:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 80054d8:	b289      	uxth	r1, r1
 80054da:	2900      	cmp	r1, #0
 80054dc:	d15c      	bne.n	8005598 <HAL_SPI_TransmitReceive+0x2e4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054de:	f7fd fa51 	bl	8002984 <HAL_GetTick>
 80054e2:	1b40      	subs	r0, r0, r5
 80054e4:	42b0      	cmp	r0, r6
 80054e6:	d2dd      	bcs.n	80054a4 <HAL_SPI_TransmitReceive+0x1f0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054e8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	b92b      	cbnz	r3, 80054fa <HAL_SPI_TransmitReceive+0x246>
 80054ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f43f af6b 	beq.w	80053d0 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	6893      	ldr	r3, [r2, #8]
 80054fe:	0799      	lsls	r1, r3, #30
 8005500:	d5e4      	bpl.n	80054cc <HAL_SPI_TransmitReceive+0x218>
 8005502:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0e0      	beq.n	80054cc <HAL_SPI_TransmitReceive+0x218>
 800550a:	e7d4      	b.n	80054b6 <HAL_SPI_TransmitReceive+0x202>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800550c:	6851      	ldr	r1, [r2, #4]
 800550e:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8005512:	6051      	str	r1, [r2, #4]
 8005514:	e7be      	b.n	8005494 <HAL_SPI_TransmitReceive+0x1e0>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005516:	4642      	mov	r2, r8
 8005518:	f832 1b02 	ldrh.w	r1, [r2], #2
 800551c:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 800551e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005520:	63a2      	str	r2, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8005522:	3b01      	subs	r3, #1
 8005524:	b29b      	uxth	r3, r3
 8005526:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005528:	e71c      	b.n	8005364 <HAL_SPI_TransmitReceive+0xb0>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800552a:	7b12      	ldrb	r2, [r2, #12]
 800552c:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 800552e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005530:	3201      	adds	r2, #1
 8005532:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005534:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8005538:	3a01      	subs	r2, #1
 800553a:	b292      	uxth	r2, r2
 800553c:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8005540:	e7a8      	b.n	8005494 <HAL_SPI_TransmitReceive+0x1e0>
        if (hspi->TxXferCount > 1U)
 8005542:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005544:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8005546:	b289      	uxth	r1, r1
 8005548:	2901      	cmp	r1, #1
 800554a:	d908      	bls.n	800555e <HAL_SPI_TransmitReceive+0x2aa>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800554c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005550:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005552:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005554:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005556:	3b02      	subs	r3, #2
 8005558:	b29b      	uxth	r3, r3
 800555a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800555c:	e77c      	b.n	8005458 <HAL_SPI_TransmitReceive+0x1a4>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8005562:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8005564:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005566:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8005568:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800556a:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800556c:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800556e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005570:	6822      	ldr	r2, [r4, #0]
 8005572:	e771      	b.n	8005458 <HAL_SPI_TransmitReceive+0x1a4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005574:	2220      	movs	r2, #32
    __HAL_UNLOCK(hspi);
 8005576:	2300      	movs	r3, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005578:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800557a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800557e:	2001      	movs	r0, #1
 8005580:	e739      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005582:	f898 2000 	ldrb.w	r2, [r8]
 8005586:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8005588:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 800558a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800558c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800558e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8005590:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8005592:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005594:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005596:	e74d      	b.n	8005434 <HAL_SPI_TransmitReceive+0x180>
        txallowed = 1U;
 8005598:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800559a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800559c:	68d2      	ldr	r2, [r2, #12]
 800559e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055a2:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80055a4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 80055b0:	e795      	b.n	80054de <HAL_SPI_TransmitReceive+0x22a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055b8:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	0650      	lsls	r0, r2, #25
 80055be:	f53f af2b 	bmi.w	8005418 <HAL_SPI_TransmitReceive+0x164>
    __HAL_SPI_ENABLE(hspi);
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055c8:	601a      	str	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ca:	e725      	b.n	8005418 <HAL_SPI_TransmitReceive+0x164>

080055cc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055cc:	2800      	cmp	r0, #0
 80055ce:	f000 808c 	beq.w	80056ea <HAL_TIM_Base_Init+0x11e>
{
 80055d2:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80055d8:	4604      	mov	r4, r0
 80055da:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d078      	beq.n	80056d4 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e2:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e4:	4942      	ldr	r1, [pc, #264]	@ (80056f0 <HAL_TIM_Base_Init+0x124>)
  htim->State = HAL_TIM_STATE_BUSY;
 80055e6:	2202      	movs	r2, #2
 80055e8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055ec:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 80055ee:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f0:	d05c      	beq.n	80056ac <HAL_TIM_Base_Init+0xe0>
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f6:	d024      	beq.n	8005642 <HAL_TIM_Base_Init+0x76>
 80055f8:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 80055fc:	428b      	cmp	r3, r1
 80055fe:	d020      	beq.n	8005642 <HAL_TIM_Base_Init+0x76>
 8005600:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005604:	428b      	cmp	r3, r1
 8005606:	d01c      	beq.n	8005642 <HAL_TIM_Base_Init+0x76>
 8005608:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800560c:	428b      	cmp	r3, r1
 800560e:	d018      	beq.n	8005642 <HAL_TIM_Base_Init+0x76>
 8005610:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8005614:	428b      	cmp	r3, r1
 8005616:	d049      	beq.n	80056ac <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005618:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 800561c:	428b      	cmp	r3, r1
 800561e:	d05e      	beq.n	80056de <HAL_TIM_Base_Init+0x112>
 8005620:	4934      	ldr	r1, [pc, #208]	@ (80056f4 <HAL_TIM_Base_Init+0x128>)
 8005622:	428b      	cmp	r3, r1
 8005624:	d05b      	beq.n	80056de <HAL_TIM_Base_Init+0x112>
 8005626:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800562a:	428b      	cmp	r3, r1
 800562c:	d057      	beq.n	80056de <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800562e:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005630:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005632:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005638:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800563a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800563e:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005640:	e010      	b.n	8005664 <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 8005642:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005644:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005646:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800564a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800564c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005650:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005652:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005658:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800565a:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800565c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800565e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005660:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005662:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005664:	2201      	movs	r2, #1
 8005666:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	07d2      	lsls	r2, r2, #31
 800566c:	d503      	bpl.n	8005676 <HAL_TIM_Base_Init+0xaa>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005676:	2301      	movs	r3, #1
 8005678:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005680:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005684:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005688:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800568c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005698:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800569c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80056a0:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80056a8:	2000      	movs	r0, #0
}
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80056ac:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ae:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056b0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80056b4:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80056b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ba:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056bc:	69a1      	ldr	r1, [r4, #24]
 80056be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056c2:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80056c4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c6:	68e2      	ldr	r2, [r4, #12]
 80056c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056ca:	6862      	ldr	r2, [r4, #4]
 80056cc:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80056ce:	6962      	ldr	r2, [r4, #20]
 80056d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80056d2:	e7c7      	b.n	8005664 <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 80056d4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80056d8:	f7fc fffc 	bl	80026d4 <HAL_TIM_Base_MspInit>
 80056dc:	e781      	b.n	80055e2 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056de:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80056e2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056e6:	4302      	orrs	r2, r0
 80056e8:	e7e9      	b.n	80056be <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 80056ea:	2001      	movs	r0, #1
}
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40014400 	.word	0x40014400

080056f8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80056f8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d123      	bne.n	8005748 <HAL_TIM_Base_Start+0x50>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005700:	6803      	ldr	r3, [r0, #0]
 8005702:	4a17      	ldr	r2, [pc, #92]	@ (8005760 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005706:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570c:	d01e      	beq.n	800574c <HAL_TIM_Base_Start+0x54>
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005712:	d01b      	beq.n	800574c <HAL_TIM_Base_Start+0x54>
 8005714:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005718:	4293      	cmp	r3, r2
 800571a:	d017      	beq.n	800574c <HAL_TIM_Base_Start+0x54>
 800571c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005720:	4293      	cmp	r3, r2
 8005722:	d013      	beq.n	800574c <HAL_TIM_Base_Start+0x54>
 8005724:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005728:	4293      	cmp	r3, r2
 800572a:	d00f      	beq.n	800574c <HAL_TIM_Base_Start+0x54>
 800572c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8005730:	4293      	cmp	r3, r2
 8005732:	d00b      	beq.n	800574c <HAL_TIM_Base_Start+0x54>
 8005734:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005738:	4293      	cmp	r3, r2
 800573a:	d007      	beq.n	800574c <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005744:	2000      	movs	r0, #0
 8005746:	4770      	bx	lr
    return HAL_ERROR;
 8005748:	2001      	movs	r0, #1
}
 800574a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574c:	6899      	ldr	r1, [r3, #8]
 800574e:	4a05      	ldr	r2, [pc, #20]	@ (8005764 <HAL_TIM_Base_Start+0x6c>)
 8005750:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	2a06      	cmp	r2, #6
 8005754:	d0f6      	beq.n	8005744 <HAL_TIM_Base_Start+0x4c>
 8005756:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800575a:	d1ef      	bne.n	800573c <HAL_TIM_Base_Start+0x44>
  return HAL_OK;
 800575c:	2000      	movs	r0, #0
 800575e:	4770      	bx	lr
 8005760:	40012c00 	.word	0x40012c00
 8005764:	00010007 	.word	0x00010007

08005768 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005768:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d06f      	beq.n	8005850 <HAL_TIM_ConfigClockSource+0xe8>
 8005770:	4602      	mov	r2, r0
{
 8005772:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8005776:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800577c:	2001      	movs	r0, #1
 800577e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005782:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005784:	4b4c      	ldr	r3, [pc, #304]	@ (80058b8 <HAL_TIM_ConfigClockSource+0x150>)
 8005786:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005788:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800578a:	680b      	ldr	r3, [r1, #0]
 800578c:	2b60      	cmp	r3, #96	@ 0x60
 800578e:	d061      	beq.n	8005854 <HAL_TIM_ConfigClockSource+0xec>
 8005790:	d824      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x74>
 8005792:	2b40      	cmp	r3, #64	@ 0x40
 8005794:	d077      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x11e>
 8005796:	d94a      	bls.n	800582e <HAL_TIM_ConfigClockSource+0xc6>
 8005798:	2b50      	cmp	r3, #80	@ 0x50
 800579a:	d117      	bne.n	80057cc <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 800579c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800579e:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a0:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80057a6:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a8:	6a23      	ldr	r3, [r4, #32]
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b0:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ba:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80057bc:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057be:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c4:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c8:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80057ca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80057ce:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80057d4:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80057d8:	bc30      	pop	{r4, r5}
 80057da:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80057dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e0:	d0f3      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x62>
 80057e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057e6:	d110      	bne.n	800580a <HAL_TIM_ConfigClockSource+0xa2>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057e8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80057ec:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057ee:	432b      	orrs	r3, r5
 80057f0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f2:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80057fa:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fc:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057fe:	68a3      	ldr	r3, [r4, #8]
 8005800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005804:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2000      	movs	r0, #0
 8005808:	e7e0      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800580a:	2b70      	cmp	r3, #112	@ 0x70
 800580c:	d1de      	bne.n	80057cc <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800580e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005812:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005814:	432b      	orrs	r3, r5
 8005816:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005818:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800581c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005820:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005822:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005824:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005826:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800582a:	60a3      	str	r3, [r4, #8]
      break;
 800582c:	e7cd      	b.n	80057ca <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 800582e:	2b20      	cmp	r3, #32
 8005830:	d002      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0xd0>
 8005832:	d909      	bls.n	8005848 <HAL_TIM_ConfigClockSource+0xe0>
 8005834:	2b30      	cmp	r3, #48	@ 0x30
 8005836:	d1c9      	bne.n	80057cc <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8005838:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800583a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800583e:	430b      	orrs	r3, r1
 8005840:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8005844:	60a3      	str	r3, [r4, #8]
}
 8005846:	e7c0      	b.n	80057ca <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8005848:	f033 0110 	bics.w	r1, r3, #16
 800584c:	d1be      	bne.n	80057cc <HAL_TIM_ConfigClockSource+0x64>
 800584e:	e7f3      	b.n	8005838 <HAL_TIM_ConfigClockSource+0xd0>
  __HAL_LOCK(htim);
 8005850:	2002      	movs	r0, #2
}
 8005852:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8005854:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8005856:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005858:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585a:	6a21      	ldr	r1, [r4, #32]
 800585c:	f021 0110 	bic.w	r1, r1, #16
 8005860:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005862:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005864:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005868:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800586c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005870:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005874:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005876:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005878:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800587a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800587e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005882:	60a3      	str	r3, [r4, #8]
}
 8005884:	e7a1      	b.n	80057ca <HAL_TIM_ConfigClockSource+0x62>
                               sClockSourceConfig->ClockPolarity,
 8005886:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005888:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800588a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800588c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005890:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005892:	6a23      	ldr	r3, [r4, #32]
 8005894:	f023 0301 	bic.w	r3, r3, #1
 8005898:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800589a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800589c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058a0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80058a4:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80058a6:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80058a8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ae:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80058b2:	60a3      	str	r3, [r4, #8]
}
 80058b4:	e789      	b.n	80057ca <HAL_TIM_ConfigClockSource+0x62>
 80058b6:	bf00      	nop
 80058b8:	fffe0088 	.word	0xfffe0088

080058bc <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop

080058c0 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop

080058c4 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop

080058c8 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop

080058cc <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop

080058d0 <HAL_TIM_IRQHandler>:
{
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 80058d2:	6803      	ldr	r3, [r0, #0]
 80058d4:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058d6:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058d8:	07a1      	lsls	r1, r4, #30
{
 80058da:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058dc:	d501      	bpl.n	80058e2 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058de:	07b2      	lsls	r2, r6, #30
 80058e0:	d457      	bmi.n	8005992 <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058e2:	0767      	lsls	r7, r4, #29
 80058e4:	d501      	bpl.n	80058ea <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058e6:	0770      	lsls	r0, r6, #29
 80058e8:	d440      	bmi.n	800596c <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058ea:	0721      	lsls	r1, r4, #28
 80058ec:	d501      	bpl.n	80058f2 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058ee:	0732      	lsls	r2, r6, #28
 80058f0:	d42a      	bmi.n	8005948 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058f2:	06e7      	lsls	r7, r4, #27
 80058f4:	d501      	bpl.n	80058fa <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058f6:	06f0      	lsls	r0, r6, #27
 80058f8:	d413      	bmi.n	8005922 <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058fa:	07e1      	lsls	r1, r4, #31
 80058fc:	d501      	bpl.n	8005902 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058fe:	07f2      	lsls	r2, r6, #31
 8005900:	d465      	bmi.n	80059ce <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005902:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005906:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800590a:	d052      	beq.n	80059b2 <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800590c:	0633      	lsls	r3, r6, #24
 800590e:	d466      	bmi.n	80059de <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005910:	0660      	lsls	r0, r4, #25
 8005912:	d501      	bpl.n	8005918 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005914:	0671      	lsls	r1, r6, #25
 8005916:	d473      	bmi.n	8005a00 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005918:	06a2      	lsls	r2, r4, #26
 800591a:	d501      	bpl.n	8005920 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800591c:	06b3      	lsls	r3, r6, #26
 800591e:	d44d      	bmi.n	80059bc <HAL_TIM_IRQHandler+0xec>
}
 8005920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	f06f 0210 	mvn.w	r2, #16
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800592a:	2208      	movs	r2, #8
 800592c:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005934:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005936:	d174      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005938:	f7ff ffc2 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593c:	4628      	mov	r0, r5
 800593e:	f7ff ffc3 	bl	80058c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	2300      	movs	r3, #0
 8005944:	772b      	strb	r3, [r5, #28]
 8005946:	e7d8      	b.n	80058fa <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	f06f 0208 	mvn.w	r2, #8
 800594e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005950:	2204      	movs	r2, #4
 8005952:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005958:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800595a:	d15f      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595c:	f7ff ffb0 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005960:	4628      	mov	r0, r5
 8005962:	f7ff ffb1 	bl	80058c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005966:	2300      	movs	r3, #0
 8005968:	772b      	strb	r3, [r5, #28]
 800596a:	e7c2      	b.n	80058f2 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	f06f 0204 	mvn.w	r2, #4
 8005972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005974:	2202      	movs	r2, #2
 8005976:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005980:	d149      	bne.n	8005a16 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005982:	f7ff ff9d 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005986:	4628      	mov	r0, r5
 8005988:	f7ff ff9e 	bl	80058c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598c:	2300      	movs	r3, #0
 800598e:	772b      	strb	r3, [r5, #28]
 8005990:	e7ab      	b.n	80058ea <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005992:	f06f 0202 	mvn.w	r2, #2
 8005996:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005998:	2201      	movs	r2, #1
 800599a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	079b      	lsls	r3, r3, #30
 80059a0:	d136      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	f7ff ff8d 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a6:	4628      	mov	r0, r5
 80059a8:	f7ff ff8e 	bl	80058c8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ac:	2300      	movs	r3, #0
 80059ae:	772b      	strb	r3, [r5, #28]
 80059b0:	e797      	b.n	80058e2 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059b2:	2f00      	cmp	r7, #0
 80059b4:	d0ac      	beq.n	8005910 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059b6:	0637      	lsls	r7, r6, #24
 80059b8:	d41a      	bmi.n	80059f0 <HAL_TIM_IRQHandler+0x120>
 80059ba:	e7a9      	b.n	8005910 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	f06f 0220 	mvn.w	r2, #32
 80059c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80059c4:	4628      	mov	r0, r5
}
 80059c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 80059ca:	f000 b87d 	b.w	8005ac8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	f06f 0201 	mvn.w	r2, #1
 80059d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80059d6:	4628      	mov	r0, r5
 80059d8:	f7ff ff70 	bl	80058bc <HAL_TIM_PeriodElapsedCallback>
 80059dc:	e791      	b.n	8005902 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059de:	682b      	ldr	r3, [r5, #0]
 80059e0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80059e6:	4628      	mov	r0, r5
 80059e8:	f000 f870 	bl	8005acc <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059ec:	2f00      	cmp	r7, #0
 80059ee:	d08f      	beq.n	8005910 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80059f8:	4628      	mov	r0, r5
 80059fa:	f000 f869 	bl	8005ad0 <HAL_TIMEx_Break2Callback>
 80059fe:	e787      	b.n	8005910 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a06:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f7ff ff5f 	bl	80058cc <HAL_TIM_TriggerCallback>
 8005a0e:	e783      	b.n	8005918 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 8005a10:	f7ff ff58 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 8005a14:	e7ca      	b.n	80059ac <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a16:	f7ff ff55 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 8005a1a:	e7b7      	b.n	800598c <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1c:	f7ff ff52 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 8005a20:	e7a1      	b.n	8005966 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	f7ff ff4f 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 8005a26:	e78c      	b.n	8005942 <HAL_TIM_IRQHandler+0x72>

08005a28 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a28:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005a2c:	2a01      	cmp	r2, #1
 8005a2e:	d044      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a30:	6802      	ldr	r2, [r0, #0]
{
 8005a32:	b470      	push	{r4, r5, r6}
 8005a34:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a36:	4e22      	ldr	r6, [pc, #136]	@ (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	2002      	movs	r0, #2
 8005a3a:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a3e:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 8005a40:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a42:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005a44:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a46:	d026      	beq.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005a48:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8005a4c:	42b2      	cmp	r2, r6
 8005a4e:	d02b      	beq.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a50:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a54:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a56:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005a5a:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a5c:	d00e      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005a5e:	4819      	ldr	r0, [pc, #100]	@ (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8005a60:	4282      	cmp	r2, r0
 8005a62:	d00b      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005a64:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005a68:	4282      	cmp	r2, r0
 8005a6a:	d007      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005a6c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005a70:	4282      	cmp	r2, r0
 8005a72:	d003      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005a74:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8005a78:	4282      	cmp	r2, r0
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a7c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7e:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a82:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a84:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005a86:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005a8e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005a92:	bc70      	pop	{r4, r5, r6}
 8005a94:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a96:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a98:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a9c:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a9e:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aa2:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8005aa4:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa6:	e7e9      	b.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aa8:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aaa:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aae:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab0:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ab4:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 8005ab6:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab8:	e7e0      	b.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 8005aba:	2002      	movs	r0, #2
}
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40012c00 	.word	0x40012c00
 8005ac4:	40000400 	.word	0x40000400

08005ac8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop

08005acc <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop

08005ad0 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop

08005ad4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad8:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ada:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8005adc:	2820      	cmp	r0, #32
 8005ade:	d14f      	bne.n	8005b80 <HAL_UART_Transmit+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae0:	4688      	mov	r8, r1
 8005ae2:	b109      	cbz	r1, 8005ae8 <HAL_UART_Transmit+0x14>
 8005ae4:	4617      	mov	r7, r2
 8005ae6:	b912      	cbnz	r2, 8005aee <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 8005ae8:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aee:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af0:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005af4:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af6:	f8c4 9084 	str.w	r9, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afa:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8005afc:	f7fc ff42 	bl	8002984 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b00:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005b02:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8005b0a:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 8005b0e:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b10:	d045      	beq.n	8005b9e <HAL_UART_Transmit+0xca>
    while (huart->TxXferCount > 0U)
 8005b12:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b16:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8005b18:	b292      	uxth	r2, r2
 8005b1a:	b1aa      	cbz	r2, 8005b48 <HAL_UART_Transmit+0x74>
 8005b1c:	1c68      	adds	r0, r5, #1
 8005b1e:	d124      	bne.n	8005b6a <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b20:	69da      	ldr	r2, [r3, #28]
 8005b22:	0612      	lsls	r2, r2, #24
 8005b24:	d5fc      	bpl.n	8005b20 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8005b26:	f1b8 0f00 	cmp.w	r8, #0
 8005b2a:	d024      	beq.n	8005b76 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b2c:	f818 2b01 	ldrb.w	r2, [r8], #1
 8005b30:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 8005b32:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8005b36:	3a01      	subs	r2, #1
 8005b38:	b292      	uxth	r2, r2
 8005b3a:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b3e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8005b42:	b292      	uxth	r2, r2
 8005b44:	2a00      	cmp	r2, #0
 8005b46:	d1e9      	bne.n	8005b1c <HAL_UART_Transmit+0x48>
 8005b48:	1c69      	adds	r1, r5, #1
 8005b4a:	d124      	bne.n	8005b96 <HAL_UART_Transmit+0xc2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b4c:	69da      	ldr	r2, [r3, #28]
 8005b4e:	0652      	lsls	r2, r2, #25
 8005b50:	d5fc      	bpl.n	8005b4c <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
 8005b52:	2320      	movs	r3, #32
 8005b54:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8005b56:	2000      	movs	r0, #0
 8005b58:	e7c7      	b.n	8005aea <HAL_UART_Transmit+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5a:	f7fc ff13 	bl	8002984 <HAL_GetTick>
 8005b5e:	1b80      	subs	r0, r0, r6
 8005b60:	4285      	cmp	r5, r0
 8005b62:	d322      	bcc.n	8005baa <HAL_UART_Transmit+0xd6>
 8005b64:	b30d      	cbz	r5, 8005baa <HAL_UART_Transmit+0xd6>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	0617      	lsls	r7, r2, #24
 8005b6e:	d5f4      	bpl.n	8005b5a <HAL_UART_Transmit+0x86>
      if (pdata8bits == NULL)
 8005b70:	f1b8 0f00 	cmp.w	r8, #0
 8005b74:	d1da      	bne.n	8005b2c <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b76:	f839 2b02 	ldrh.w	r2, [r9], #2
 8005b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b7e:	e7d7      	b.n	8005b30 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 8005b80:	2002      	movs	r0, #2
}
 8005b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b86:	f7fc fefd 	bl	8002984 <HAL_GetTick>
 8005b8a:	1b83      	subs	r3, r0, r6
 8005b8c:	429d      	cmp	r5, r3
 8005b8e:	d30c      	bcc.n	8005baa <HAL_UART_Transmit+0xd6>
 8005b90:	b15d      	cbz	r5, 8005baa <HAL_UART_Transmit+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	065b      	lsls	r3, r3, #25
 8005b9a:	d5f4      	bpl.n	8005b86 <HAL_UART_Transmit+0xb2>
 8005b9c:	e7d9      	b.n	8005b52 <HAL_UART_Transmit+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1b6      	bne.n	8005b12 <HAL_UART_Transmit+0x3e>
 8005ba4:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8005ba6:	4698      	mov	r8, r3
 8005ba8:	e7b3      	b.n	8005b12 <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8005baa:	2320      	movs	r3, #32
 8005bac:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8005bae:	2003      	movs	r0, #3
}
 8005bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005bb4 <HAL_UART_Receive>:
{
 8005bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb8:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bba:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8005bbe:	2820      	cmp	r0, #32
 8005bc0:	d148      	bne.n	8005c54 <HAL_UART_Receive+0xa0>
    if ((pData == NULL) || (Size == 0U))
 8005bc2:	4689      	mov	r9, r1
 8005bc4:	b109      	cbz	r1, 8005bca <HAL_UART_Receive+0x16>
 8005bc6:	4616      	mov	r6, r2
 8005bc8:	b912      	cbnz	r2, 8005bd0 <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 8005bca:	2001      	movs	r0, #1
}
 8005bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd0:	f04f 0800 	mov.w	r8, #0
 8005bd4:	461d      	mov	r5, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bd6:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd8:	f8c4 8084 	str.w	r8, [r4, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bdc:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be0:	f8c4 8060 	str.w	r8, [r4, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8005be4:	f7fc fece 	bl	8002984 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8005be8:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8005bea:	f8a4 6058 	strh.w	r6, [r4, #88]	@ 0x58
    UART_MASK_COMPUTATION(huart);
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->RxXferCount = Size;
 8005bf2:	f8a4 605a 	strh.w	r6, [r4, #90]	@ 0x5a
    tickstart = HAL_GetTick();
 8005bf6:	4607      	mov	r7, r0
    UART_MASK_COMPUTATION(huart);
 8005bf8:	d06c      	beq.n	8005cd4 <HAL_UART_Receive+0x120>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f040 8081 	bne.w	8005d02 <HAL_UART_Receive+0x14e>
    uhMask = huart->Mask;
 8005c00:	4698      	mov	r8, r3
    UART_MASK_COMPUTATION(huart);
 8005c02:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	bf0c      	ite	eq
 8005c08:	26ff      	moveq	r6, #255	@ 0xff
 8005c0a:	267f      	movne	r6, #127	@ 0x7f
    while (huart->RxXferCount > 0U)
 8005c0c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8005c10:	f8a4 605c 	strh.w	r6, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	b1bb      	cbz	r3, 8005c48 <HAL_UART_Receive+0x94>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	1c6a      	adds	r2, r5, #1
 8005c1c:	d11d      	bne.n	8005c5a <HAL_UART_Receive+0xa6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	0690      	lsls	r0, r2, #26
 8005c22:	d5fc      	bpl.n	8005c1e <HAL_UART_Receive+0x6a>
      if (pdata8bits == NULL)
 8005c24:	f1b9 0f00 	cmp.w	r9, #0
 8005c28:	d05b      	beq.n	8005ce2 <HAL_UART_Receive+0x12e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005c2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005c2c:	4033      	ands	r3, r6
 8005c2e:	f809 3b01 	strb.w	r3, [r9], #1
      huart->RxXferCount--;
 8005c32:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005c3e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e7      	bne.n	8005c18 <HAL_UART_Receive+0x64>
    huart->RxState = HAL_UART_STATE_READY;
 8005c48:	2320      	movs	r3, #32
 8005c4a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8005c4e:	2000      	movs	r0, #0
}
 8005c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8005c54:	2002      	movs	r0, #2
}
 8005c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	0691      	lsls	r1, r2, #26
 8005c5e:	d4e1      	bmi.n	8005c24 <HAL_UART_Receive+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c60:	f7fc fe90 	bl	8002984 <HAL_GetTick>
 8005c64:	1bc0      	subs	r0, r0, r7
 8005c66:	4285      	cmp	r5, r0
 8005c68:	d32e      	bcc.n	8005cc8 <HAL_UART_Receive+0x114>
 8005c6a:	b36d      	cbz	r5, 8005cc8 <HAL_UART_Receive+0x114>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	0750      	lsls	r0, r2, #29
 8005c72:	d5f2      	bpl.n	8005c5a <HAL_UART_Receive+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c74:	69da      	ldr	r2, [r3, #28]
 8005c76:	0711      	lsls	r1, r2, #28
 8005c78:	d459      	bmi.n	8005d2e <HAL_UART_Receive+0x17a>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	0512      	lsls	r2, r2, #20
 8005c7e:	d5ec      	bpl.n	8005c5a <HAL_UART_Receive+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c84:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	e853 2f00 	ldrex	r2, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	e843 2100 	strex	r1, r2, [r3]
 8005c92:	2900      	cmp	r1, #0
 8005c94:	d1f7      	bne.n	8005c86 <HAL_UART_Receive+0xd2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	f103 0208 	add.w	r2, r3, #8
 8005c9a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	f103 0008 	add.w	r0, r3, #8
 8005ca6:	e840 2100 	strex	r1, r2, [r0]
 8005caa:	2900      	cmp	r1, #0
 8005cac:	d1f3      	bne.n	8005c96 <HAL_UART_Receive+0xe2>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cae:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005cb0:	2a01      	cmp	r2, #1
 8005cb2:	d02d      	beq.n	8005d10 <HAL_UART_Receive+0x15c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cbc:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbe:	6623      	str	r3, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8005cc0:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cc4:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	2320      	movs	r3, #32
 8005cca:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8005cce:	2003      	movs	r0, #3
}
 8005cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8005cd4:	6923      	ldr	r3, [r4, #16]
 8005cd6:	b9cb      	cbnz	r3, 8005d0c <HAL_UART_Receive+0x158>
 8005cd8:	46c8      	mov	r8, r9
    uhMask = huart->Mask;
 8005cda:	f240 16ff 	movw	r6, #511	@ 0x1ff
      pdata8bits  = NULL;
 8005cde:	4699      	mov	r9, r3
 8005ce0:	e794      	b.n	8005c0c <HAL_UART_Receive+0x58>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ce2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8005ce4:	4032      	ands	r2, r6
 8005ce6:	f828 2b02 	strh.w	r2, [r8], #2
      huart->RxXferCount--;
 8005cea:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8005cee:	3a01      	subs	r2, #1
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005cf6:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8005cfa:	b292      	uxth	r2, r2
 8005cfc:	2a00      	cmp	r2, #0
 8005cfe:	d18c      	bne.n	8005c1a <HAL_UART_Receive+0x66>
 8005d00:	e7a2      	b.n	8005c48 <HAL_UART_Receive+0x94>
    UART_MASK_COMPUTATION(huart);
 8005d02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d06:	d00c      	beq.n	8005d22 <HAL_UART_Receive+0x16e>
    uhMask = huart->Mask;
 8005d08:	4646      	mov	r6, r8
 8005d0a:	e77f      	b.n	8005c0c <HAL_UART_Receive+0x58>
 8005d0c:	26ff      	movs	r6, #255	@ 0xff
 8005d0e:	e77d      	b.n	8005c0c <HAL_UART_Receive+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d14:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	e843 2100 	strex	r1, r2, [r3]
 8005d1c:	2900      	cmp	r1, #0
 8005d1e:	d1f7      	bne.n	8005d10 <HAL_UART_Receive+0x15c>
 8005d20:	e7c8      	b.n	8005cb4 <HAL_UART_Receive+0x100>
    UART_MASK_COMPUTATION(huart);
 8005d22:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bf14      	ite	ne
 8005d28:	263f      	movne	r6, #63	@ 0x3f
 8005d2a:	267f      	moveq	r6, #127	@ 0x7f
 8005d2c:	e76e      	b.n	8005c0c <HAL_UART_Receive+0x58>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d2e:	2208      	movs	r2, #8
 8005d30:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d36:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	e843 2100 	strex	r1, r2, [r3]
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d1f7      	bne.n	8005d32 <HAL_UART_Receive+0x17e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	f103 0208 	add.w	r2, r3, #8
 8005d46:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	f103 0008 	add.w	r0, r3, #8
 8005d52:	e840 2100 	strex	r1, r2, [r0]
 8005d56:	2900      	cmp	r1, #0
 8005d58:	d1f3      	bne.n	8005d42 <HAL_UART_Receive+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005d5c:	2a01      	cmp	r2, #1
 8005d5e:	d00b      	beq.n	8005d78 <HAL_UART_Receive+0x1c4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d60:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005d62:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d64:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005d66:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8005d6a:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6c:	6623      	str	r3, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8005d6e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d72:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8005d76:	e7a7      	b.n	8005cc8 <HAL_UART_Receive+0x114>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	e843 2100 	strex	r1, r2, [r3]
 8005d84:	2900      	cmp	r1, #0
 8005d86:	d1f7      	bne.n	8005d78 <HAL_UART_Receive+0x1c4>
 8005d88:	e7ea      	b.n	8005d60 <HAL_UART_Receive+0x1ac>
 8005d8a:	bf00      	nop

08005d8c <UART_SetConfig>:
{
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d90:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d92:	6882      	ldr	r2, [r0, #8]
 8005d94:	6900      	ldr	r0, [r0, #16]
 8005d96:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d98:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d9a:	4302      	orrs	r2, r0
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da0:	4981      	ldr	r1, [pc, #516]	@ (8005fa8 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005da2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da4:	4029      	ands	r1, r5
 8005da6:	430a      	orrs	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	68e1      	ldr	r1, [r4, #12]
 8005dae:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005db2:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005db4:	497d      	ldr	r1, [pc, #500]	@ (8005fac <UART_SetConfig+0x220>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005db8:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dba:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dbc:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dbe:	d03f      	beq.n	8005e40 <UART_SetConfig+0xb4>
    tmpreg |= huart->Init.OneBitSampling;
 8005dc0:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dc2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8005dc6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dc8:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dca:	4979      	ldr	r1, [pc, #484]	@ (8005fb0 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dcc:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dce:	428b      	cmp	r3, r1
 8005dd0:	d115      	bne.n	8005dfe <UART_SetConfig+0x72>
 8005dd2:	4b78      	ldr	r3, [pc, #480]	@ (8005fb4 <UART_SetConfig+0x228>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	f000 808d 	beq.w	8005efc <UART_SetConfig+0x170>
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d077      	beq.n	8005ed6 <UART_SetConfig+0x14a>
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d06d      	beq.n	8005ec6 <UART_SetConfig+0x13a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dea:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005dee:	f000 80cf 	beq.w	8005f90 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df2:	f7fe fd79 	bl	80048e8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d172      	bne.n	8005ee0 <UART_SetConfig+0x154>
        pclk = (uint32_t) HSI_VALUE;
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e01c      	b.n	8005e38 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dfe:	4a6e      	ldr	r2, [pc, #440]	@ (8005fb8 <UART_SetConfig+0x22c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d10f      	bne.n	8005e24 <UART_SetConfig+0x98>
 8005e04:	4b6b      	ldr	r3, [pc, #428]	@ (8005fb4 <UART_SetConfig+0x228>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b0c      	cmp	r3, #12
 8005e10:	d811      	bhi.n	8005e36 <UART_SetConfig+0xaa>
 8005e12:	e8df f003 	tbb	[pc, r3]
 8005e16:	1082      	.short	0x1082
 8005e18:	10581010 	.word	0x10581010
 8005e1c:	10731010 	.word	0x10731010
 8005e20:	1010      	.short	0x1010
 8005e22:	60          	.byte	0x60
 8005e23:	00          	.byte	0x00
 8005e24:	4a65      	ldr	r2, [pc, #404]	@ (8005fbc <UART_SetConfig+0x230>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d07d      	beq.n	8005f26 <UART_SetConfig+0x19a>
 8005e2a:	4a65      	ldr	r2, [pc, #404]	@ (8005fc0 <UART_SetConfig+0x234>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d03f      	beq.n	8005eb0 <UART_SetConfig+0x124>
 8005e30:	4a64      	ldr	r2, [pc, #400]	@ (8005fc4 <UART_SetConfig+0x238>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d067      	beq.n	8005f06 <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 8005e36:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e40:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e44:	485b      	ldr	r0, [pc, #364]	@ (8005fb4 <UART_SetConfig+0x228>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e46:	430a      	orrs	r2, r1
 8005e48:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e4a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8005e4e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e56:	d07e      	beq.n	8005f56 <UART_SetConfig+0x1ca>
 8005e58:	d807      	bhi.n	8005e6a <UART_SetConfig+0xde>
 8005e5a:	b323      	cbz	r3, 8005ea6 <UART_SetConfig+0x11a>
 8005e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e60:	d1e9      	bne.n	8005e36 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e62:	f7fe f90d 	bl	8004080 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005e66:	b928      	cbnz	r0, 8005e74 <UART_SetConfig+0xe8>
 8005e68:	e7c7      	b.n	8005dfa <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e6e:	d1e2      	bne.n	8005e36 <UART_SetConfig+0xaa>
        pclk = (uint32_t) LSE_VALUE;
 8005e70:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e74:	6862      	ldr	r2, [r4, #4]
 8005e76:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005e7a:	4283      	cmp	r3, r0
 8005e7c:	d8db      	bhi.n	8005e36 <UART_SetConfig+0xaa>
 8005e7e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005e82:	d8d8      	bhi.n	8005e36 <UART_SetConfig+0xaa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e84:	0851      	lsrs	r1, r2, #1
 8005e86:	2300      	movs	r3, #0
 8005e88:	468c      	mov	ip, r1
 8005e8a:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8005e8e:	4619      	mov	r1, r3
 8005e90:	fbe0 c105 	umlal	ip, r1, r0, r5
 8005e94:	4660      	mov	r0, ip
 8005e96:	f7fa f9fb 	bl	8000290 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005fc8 <UART_SetConfig+0x23c>)
 8005e9c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d8c8      	bhi.n	8005e36 <UART_SetConfig+0xaa>
 8005ea4:	e027      	b.n	8005ef6 <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea6:	f7fe fd0d 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d1e2      	bne.n	8005e74 <UART_SetConfig+0xe8>
 8005eae:	e7a4      	b.n	8005dfa <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eb0:	4b40      	ldr	r3, [pc, #256]	@ (8005fb4 <UART_SetConfig+0x228>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005eba:	2b80      	cmp	r3, #128	@ 0x80
 8005ebc:	d01e      	beq.n	8005efc <UART_SetConfig+0x170>
 8005ebe:	d83f      	bhi.n	8005f40 <UART_SetConfig+0x1b4>
 8005ec0:	b35b      	cbz	r3, 8005f1a <UART_SetConfig+0x18e>
 8005ec2:	2b40      	cmp	r3, #64	@ 0x40
 8005ec4:	d1b7      	bne.n	8005e36 <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ec6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005eca:	d069      	beq.n	8005fa0 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 8005ecc:	f7fe f8d8 	bl	8004080 <HAL_RCC_GetSysClockFreq>
        break;
 8005ed0:	e791      	b.n	8005df6 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ed2:	2b30      	cmp	r3, #48	@ 0x30
 8005ed4:	d1af      	bne.n	8005e36 <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005eda:	d05e      	beq.n	8005f9a <UART_SetConfig+0x20e>
        pclk = (uint32_t) LSE_VALUE;
 8005edc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ee0:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ee6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005eea:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eee:	f1a0 0310 	sub.w	r3, r0, #16
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d89f      	bhi.n	8005e36 <UART_SetConfig+0xaa>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	60d8      	str	r0, [r3, #12]
 8005efa:	e77e      	b.n	8005dfa <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005f00:	d049      	beq.n	8005f96 <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 8005f02:	4832      	ldr	r0, [pc, #200]	@ (8005fcc <UART_SetConfig+0x240>)
 8005f04:	e7ec      	b.n	8005ee0 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f06:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb4 <UART_SetConfig+0x228>)
 8005f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f14:	d0f2      	beq.n	8005efc <UART_SetConfig+0x170>
 8005f16:	d81a      	bhi.n	8005f4e <UART_SetConfig+0x1c2>
 8005f18:	b9ab      	cbnz	r3, 8005f46 <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f1a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005f1e:	d01c      	beq.n	8005f5a <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f20:	f7fe fcd0 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
        break;
 8005f24:	e767      	b.n	8005df6 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f26:	4b23      	ldr	r3, [pc, #140]	@ (8005fb4 <UART_SetConfig+0x228>)
 8005f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d0e3      	beq.n	8005efc <UART_SetConfig+0x170>
 8005f34:	d8cd      	bhi.n	8005ed2 <UART_SetConfig+0x146>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0ef      	beq.n	8005f1a <UART_SetConfig+0x18e>
 8005f3a:	2b10      	cmp	r3, #16
 8005f3c:	d0c3      	beq.n	8005ec6 <UART_SetConfig+0x13a>
 8005f3e:	e77a      	b.n	8005e36 <UART_SetConfig+0xaa>
 8005f40:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f42:	d0c8      	beq.n	8005ed6 <UART_SetConfig+0x14a>
 8005f44:	e777      	b.n	8005e36 <UART_SetConfig+0xaa>
 8005f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f4a:	d0bc      	beq.n	8005ec6 <UART_SetConfig+0x13a>
 8005f4c:	e773      	b.n	8005e36 <UART_SetConfig+0xaa>
 8005f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f52:	d0c0      	beq.n	8005ed6 <UART_SetConfig+0x14a>
 8005f54:	e76f      	b.n	8005e36 <UART_SetConfig+0xaa>
        pclk = (uint32_t) HSI_VALUE;
 8005f56:	481d      	ldr	r0, [pc, #116]	@ (8005fcc <UART_SetConfig+0x240>)
 8005f58:	e78c      	b.n	8005e74 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f5a:	f7fe fcb3 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	f43f af4b 	beq.w	8005dfa <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f64:	0040      	lsls	r0, r0, #1
 8005f66:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f68:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f6c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005f70:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f74:	f1a3 0110 	sub.w	r1, r3, #16
 8005f78:	4291      	cmp	r1, r2
 8005f7a:	f63f af5c 	bhi.w	8005e36 <UART_SetConfig+0xaa>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f7e:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8005f82:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f84:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f86:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60cb      	str	r3, [r1, #12]
 8005f8e:	e734      	b.n	8005dfa <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f90:	f7fe fcaa 	bl	80048e8 <HAL_RCC_GetPCLK2Freq>
        break;
 8005f94:	e7e3      	b.n	8005f5e <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f96:	480e      	ldr	r0, [pc, #56]	@ (8005fd0 <UART_SetConfig+0x244>)
 8005f98:	e7e5      	b.n	8005f66 <UART_SetConfig+0x1da>
 8005f9a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005f9e:	e7e2      	b.n	8005f66 <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa0:	f7fe f86e 	bl	8004080 <HAL_RCC_GetSysClockFreq>
        break;
 8005fa4:	e7db      	b.n	8005f5e <UART_SetConfig+0x1d2>
 8005fa6:	bf00      	nop
 8005fa8:	efff69f3 	.word	0xefff69f3
 8005fac:	40008000 	.word	0x40008000
 8005fb0:	40013800 	.word	0x40013800
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	40004400 	.word	0x40004400
 8005fbc:	40004800 	.word	0x40004800
 8005fc0:	40004c00 	.word	0x40004c00
 8005fc4:	40005000 	.word	0x40005000
 8005fc8:	000ffcff 	.word	0x000ffcff
 8005fcc:	00f42400 	.word	0x00f42400
 8005fd0:	01e84800 	.word	0x01e84800

08005fd4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fd4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005fd6:	071a      	lsls	r2, r3, #28
{
 8005fd8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fda:	d506      	bpl.n	8005fea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fdc:	6801      	ldr	r1, [r0, #0]
 8005fde:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005fe0:	684a      	ldr	r2, [r1, #4]
 8005fe2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fe6:	4322      	orrs	r2, r4
 8005fe8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fea:	07dc      	lsls	r4, r3, #31
 8005fec:	d506      	bpl.n	8005ffc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fee:	6801      	ldr	r1, [r0, #0]
 8005ff0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8005ff2:	684a      	ldr	r2, [r1, #4]
 8005ff4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005ff8:	4322      	orrs	r2, r4
 8005ffa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ffc:	0799      	lsls	r1, r3, #30
 8005ffe:	d506      	bpl.n	800600e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006000:	6801      	ldr	r1, [r0, #0]
 8006002:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006004:	684a      	ldr	r2, [r1, #4]
 8006006:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800600a:	4322      	orrs	r2, r4
 800600c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800600e:	075a      	lsls	r2, r3, #29
 8006010:	d506      	bpl.n	8006020 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006012:	6801      	ldr	r1, [r0, #0]
 8006014:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006016:	684a      	ldr	r2, [r1, #4]
 8006018:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800601c:	4322      	orrs	r2, r4
 800601e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006020:	06dc      	lsls	r4, r3, #27
 8006022:	d506      	bpl.n	8006032 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006024:	6801      	ldr	r1, [r0, #0]
 8006026:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006028:	688a      	ldr	r2, [r1, #8]
 800602a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800602e:	4322      	orrs	r2, r4
 8006030:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006032:	0699      	lsls	r1, r3, #26
 8006034:	d506      	bpl.n	8006044 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006036:	6801      	ldr	r1, [r0, #0]
 8006038:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800603a:	688a      	ldr	r2, [r1, #8]
 800603c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006040:	4322      	orrs	r2, r4
 8006042:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006044:	065a      	lsls	r2, r3, #25
 8006046:	d509      	bpl.n	800605c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006048:	6801      	ldr	r1, [r0, #0]
 800604a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800604c:	684a      	ldr	r2, [r1, #4]
 800604e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006052:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006054:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006058:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800605a:	d00b      	beq.n	8006074 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800605c:	061b      	lsls	r3, r3, #24
 800605e:	d506      	bpl.n	800606e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006060:	6802      	ldr	r2, [r0, #0]
 8006062:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006064:	6853      	ldr	r3, [r2, #4]
 8006066:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800606a:	430b      	orrs	r3, r1
 800606c:	6053      	str	r3, [r2, #4]
}
 800606e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006072:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006074:	684a      	ldr	r2, [r1, #4]
 8006076:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006078:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800607c:	4322      	orrs	r2, r4
 800607e:	604a      	str	r2, [r1, #4]
 8006080:	e7ec      	b.n	800605c <UART_AdvFeatureConfig+0x88>
 8006082:	bf00      	nop

08006084 <UART_CheckIdleState>:
{
 8006084:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006086:	2300      	movs	r3, #0
{
 8006088:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 800608e:	f7fc fc79 	bl	8002984 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006092:	6822      	ldr	r2, [r4, #0]
 8006094:	6813      	ldr	r3, [r2, #0]
 8006096:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8006098:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800609a:	d40e      	bmi.n	80060ba <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800609c:	6813      	ldr	r3, [r2, #0]
 800609e:	0759      	lsls	r1, r3, #29
 80060a0:	d42f      	bmi.n	8006102 <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80060a4:	2220      	movs	r2, #32
 80060a6:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 80060a8:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80060aa:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ae:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b0:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 80060b2:	2300      	movs	r3, #0
 80060b4:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 80060b8:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ba:	69d3      	ldr	r3, [r2, #28]
 80060bc:	0298      	lsls	r0, r3, #10
 80060be:	d4ed      	bmi.n	800609c <UART_CheckIdleState+0x18>
 80060c0:	e00c      	b.n	80060dc <UART_CheckIdleState+0x58>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060c2:	6819      	ldr	r1, [r3, #0]
 80060c4:	0749      	lsls	r1, r1, #29
 80060c6:	461a      	mov	r2, r3
 80060c8:	d505      	bpl.n	80060d6 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060ca:	69d9      	ldr	r1, [r3, #28]
 80060cc:	0708      	lsls	r0, r1, #28
 80060ce:	d449      	bmi.n	8006164 <UART_CheckIdleState+0xe0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060d0:	69d9      	ldr	r1, [r3, #28]
 80060d2:	0509      	lsls	r1, r1, #20
 80060d4:	d474      	bmi.n	80061c0 <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	0298      	lsls	r0, r3, #10
 80060da:	d4df      	bmi.n	800609c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060dc:	f7fc fc52 	bl	8002984 <HAL_GetTick>
 80060e0:	1b43      	subs	r3, r0, r5
 80060e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060e6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e8:	d3eb      	bcc.n	80060c2 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80060ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	e843 2100 	strex	r1, r2, [r3]
 80060f6:	2900      	cmp	r1, #0
 80060f8:	d1f7      	bne.n	80060ea <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 80060fa:	2320      	movs	r3, #32
 80060fc:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80060fe:	2003      	movs	r0, #3
 8006100:	e7d7      	b.n	80060b2 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006102:	69d3      	ldr	r3, [r2, #28]
 8006104:	025b      	lsls	r3, r3, #9
 8006106:	d4cc      	bmi.n	80060a2 <UART_CheckIdleState+0x1e>
 8006108:	e00d      	b.n	8006126 <UART_CheckIdleState+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	0750      	lsls	r0, r2, #29
 800610e:	d507      	bpl.n	8006120 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006110:	69da      	ldr	r2, [r3, #28]
 8006112:	0711      	lsls	r1, r2, #28
 8006114:	f100 8082 	bmi.w	800621c <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006118:	69da      	ldr	r2, [r3, #28]
 800611a:	0512      	lsls	r2, r2, #20
 800611c:	f100 80ac 	bmi.w	8006278 <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	025b      	lsls	r3, r3, #9
 8006124:	d4bd      	bmi.n	80060a2 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006126:	f7fc fc2d 	bl	8002984 <HAL_GetTick>
 800612a:	1b43      	subs	r3, r0, r5
 800612c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	d3ea      	bcc.n	800610a <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006138:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	e843 2100 	strex	r1, r2, [r3]
 8006140:	2900      	cmp	r1, #0
 8006142:	d1f7      	bne.n	8006134 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	f103 0208 	add.w	r2, r3, #8
 8006148:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	f103 0008 	add.w	r0, r3, #8
 8006154:	e840 2100 	strex	r1, r2, [r0]
 8006158:	2900      	cmp	r1, #0
 800615a:	d1f3      	bne.n	8006144 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 800615c:	2320      	movs	r3, #32
 800615e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8006162:	e7cc      	b.n	80060fe <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006164:	2208      	movs	r2, #8
 8006166:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800616c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006170:	e843 2100 	strex	r1, r2, [r3]
 8006174:	2900      	cmp	r1, #0
 8006176:	d1f7      	bne.n	8006168 <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	f103 0208 	add.w	r2, r3, #8
 800617c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006180:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	f103 0008 	add.w	r0, r3, #8
 8006188:	e840 2100 	strex	r1, r2, [r0]
 800618c:	2900      	cmp	r1, #0
 800618e:	d1f3      	bne.n	8006178 <UART_CheckIdleState+0xf4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006190:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006192:	2a01      	cmp	r2, #1
 8006194:	d00b      	beq.n	80061ae <UART_CheckIdleState+0x12a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006196:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006198:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800619a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800619c:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80061a0:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a2:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80061a4:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061a8:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 80061ac:	e79d      	b.n	80060ea <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	e843 2100 	strex	r1, r2, [r3]
 80061ba:	2900      	cmp	r1, #0
 80061bc:	d1f7      	bne.n	80061ae <UART_CheckIdleState+0x12a>
 80061be:	e7ea      	b.n	8006196 <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061c4:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ca:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	e843 2100 	strex	r1, r2, [r3]
 80061d2:	2900      	cmp	r1, #0
 80061d4:	d1f7      	bne.n	80061c6 <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	f103 0208 	add.w	r2, r3, #8
 80061da:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061de:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	f103 0008 	add.w	r0, r3, #8
 80061e6:	e840 2100 	strex	r1, r2, [r0]
 80061ea:	2900      	cmp	r1, #0
 80061ec:	d1f3      	bne.n	80061d6 <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ee:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80061f0:	2a01      	cmp	r2, #1
 80061f2:	d00a      	beq.n	800620a <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80061f6:	2120      	movs	r1, #32
 80061f8:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80061fc:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fe:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006200:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006204:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006208:	e76f      	b.n	80060ea <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	e843 2100 	strex	r1, r2, [r3]
 8006216:	2900      	cmp	r1, #0
 8006218:	d1f7      	bne.n	800620a <UART_CheckIdleState+0x186>
 800621a:	e7eb      	b.n	80061f4 <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800621c:	2208      	movs	r2, #8
 800621e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006224:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	e843 2100 	strex	r1, r2, [r3]
 800622c:	2900      	cmp	r1, #0
 800622e:	d1f7      	bne.n	8006220 <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	f103 0208 	add.w	r2, r3, #8
 8006234:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006238:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	f103 0008 	add.w	r0, r3, #8
 8006240:	e840 2100 	strex	r1, r2, [r0]
 8006244:	2900      	cmp	r1, #0
 8006246:	d1f3      	bne.n	8006230 <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006248:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800624a:	2a01      	cmp	r2, #1
 800624c:	d00b      	beq.n	8006266 <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006250:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006252:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006254:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006258:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625a:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 800625c:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006260:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8006264:	e766      	b.n	8006134 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	e843 2100 	strex	r1, r2, [r3]
 8006272:	2900      	cmp	r1, #0
 8006274:	d1f7      	bne.n	8006266 <UART_CheckIdleState+0x1e2>
 8006276:	e7ea      	b.n	800624e <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006278:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800627c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006282:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	e843 2100 	strex	r1, r2, [r3]
 800628a:	2900      	cmp	r1, #0
 800628c:	d1f7      	bne.n	800627e <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	f103 0208 	add.w	r2, r3, #8
 8006292:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006296:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	f103 0008 	add.w	r0, r3, #8
 800629e:	e840 2100 	strex	r1, r2, [r0]
 80062a2:	2900      	cmp	r1, #0
 80062a4:	d1f3      	bne.n	800628e <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80062a8:	2a01      	cmp	r2, #1
 80062aa:	d00a      	beq.n	80062c2 <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ac:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80062ae:	2120      	movs	r1, #32
 80062b0:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80062b4:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b6:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80062b8:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062bc:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80062c0:	e738      	b.n	8006134 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	e843 2100 	strex	r1, r2, [r3]
 80062ce:	2900      	cmp	r1, #0
 80062d0:	d1f7      	bne.n	80062c2 <UART_CheckIdleState+0x23e>
 80062d2:	e7eb      	b.n	80062ac <UART_CheckIdleState+0x228>

080062d4 <HAL_UART_Init>:
  if (huart == NULL)
 80062d4:	b370      	cbz	r0, 8006334 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80062d6:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 80062d8:	b510      	push	{r4, lr}
 80062da:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80062dc:	b32b      	cbz	r3, 800632a <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 80062de:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 80062e2:	2324      	movs	r3, #36	@ 0x24
 80062e4:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80062e6:	6813      	ldr	r3, [r2, #0]
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062ee:	b9c1      	cbnz	r1, 8006322 <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7ff fd4b 	bl	8005d8c <UART_SetConfig>
 80062f6:	2801      	cmp	r0, #1
 80062f8:	d011      	beq.n	800631e <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800630a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006312:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006314:	601a      	str	r2, [r3, #0]
}
 8006316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800631a:	f7ff beb3 	b.w	8006084 <UART_CheckIdleState>
}
 800631e:	2001      	movs	r0, #1
 8006320:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8006322:	4620      	mov	r0, r4
 8006324:	f7ff fe56 	bl	8005fd4 <UART_AdvFeatureConfig>
 8006328:	e7e2      	b.n	80062f0 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 800632a:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800632e:	f7fc fa17 	bl	8002760 <HAL_UART_MspInit>
 8006332:	e7d4      	b.n	80062de <HAL_UART_Init+0xa>
}
 8006334:	2001      	movs	r0, #1
 8006336:	4770      	bx	lr

08006338 <arm_copy_q15>:
 8006338:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 800633c:	d041      	beq.n	80063c2 <arm_copy_q15+0x8a>
 800633e:	1dc3      	adds	r3, r0, #7
 8006340:	1a5b      	subs	r3, r3, r1
 8006342:	b4f0      	push	{r4, r5, r6, r7}
 8006344:	ea41 0400 	orr.w	r4, r1, r0
 8006348:	2b0e      	cmp	r3, #14
 800634a:	f3c4 0402 	ubfx	r4, r4, #0, #3
 800634e:	bf94      	ite	ls
 8006350:	2300      	movls	r3, #0
 8006352:	2301      	movhi	r3, #1
 8006354:	2c00      	cmp	r4, #0
 8006356:	bf18      	it	ne
 8006358:	2300      	movne	r3, #0
 800635a:	b323      	cbz	r3, 80063a6 <arm_copy_q15+0x6e>
 800635c:	f10c 33ff 	add.w	r3, ip, #4294967295
 8006360:	2b04      	cmp	r3, #4
 8006362:	d920      	bls.n	80063a6 <arm_copy_q15+0x6e>
 8006364:	f1a0 0508 	sub.w	r5, r0, #8
 8006368:	460c      	mov	r4, r1
 800636a:	2300      	movs	r3, #0
 800636c:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 8006370:	3301      	adds	r3, #1
 8006372:	459c      	cmp	ip, r3
 8006374:	e8e4 6702 	strd	r6, r7, [r4], #8
 8006378:	d1f8      	bne.n	800636c <arm_copy_q15+0x34>
 800637a:	f012 0203 	ands.w	r2, r2, #3
 800637e:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8006382:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 8006386:	d00c      	beq.n	80063a2 <arm_copy_q15+0x6a>
 8006388:	f9b0 3000 	ldrsh.w	r3, [r0]
 800638c:	800b      	strh	r3, [r1, #0]
 800638e:	3a01      	subs	r2, #1
 8006390:	d007      	beq.n	80063a2 <arm_copy_q15+0x6a>
 8006392:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8006396:	804b      	strh	r3, [r1, #2]
 8006398:	2a01      	cmp	r2, #1
 800639a:	bf1c      	itt	ne
 800639c:	f9b0 3004 	ldrshne.w	r3, [r0, #4]
 80063a0:	808b      	strhne	r3, [r1, #4]
 80063a2:	bcf0      	pop	{r4, r5, r6, r7}
 80063a4:	4770      	bx	lr
 80063a6:	460c      	mov	r4, r1
 80063a8:	4603      	mov	r3, r0
 80063aa:	4665      	mov	r5, ip
 80063ac:	681e      	ldr	r6, [r3, #0]
 80063ae:	6026      	str	r6, [r4, #0]
 80063b0:	685e      	ldr	r6, [r3, #4]
 80063b2:	6066      	str	r6, [r4, #4]
 80063b4:	3d01      	subs	r5, #1
 80063b6:	f103 0308 	add.w	r3, r3, #8
 80063ba:	f104 0408 	add.w	r4, r4, #8
 80063be:	d1f5      	bne.n	80063ac <arm_copy_q15+0x74>
 80063c0:	e7db      	b.n	800637a <arm_copy_q15+0x42>
 80063c2:	f012 0203 	ands.w	r2, r2, #3
 80063c6:	d00d      	beq.n	80063e4 <arm_copy_q15+0xac>
 80063c8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80063cc:	800b      	strh	r3, [r1, #0]
 80063ce:	3a01      	subs	r2, #1
 80063d0:	d008      	beq.n	80063e4 <arm_copy_q15+0xac>
 80063d2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80063d6:	804b      	strh	r3, [r1, #2]
 80063d8:	2a01      	cmp	r2, #1
 80063da:	d003      	beq.n	80063e4 <arm_copy_q15+0xac>
 80063dc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80063e0:	808b      	strh	r3, [r1, #4]
 80063e2:	4770      	bx	lr
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop

080063e8 <arm_split_rfft_q15>:
 80063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	b083      	sub	sp, #12
 80063ee:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 80063f2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80063f4:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80063f6:	3d01      	subs	r5, #1
 80063f8:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 80063fc:	00ac      	lsls	r4, r5, #2
 80063fe:	9401      	str	r4, [sp, #4]
 8006400:	1e4c      	subs	r4, r1, #1
 8006402:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006406:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800640a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800640e:	d02d      	beq.n	800646c <arm_split_rfft_q15+0x84>
 8006410:	2f01      	cmp	r7, #1
 8006412:	f1a6 0c04 	sub.w	ip, r6, #4
 8006416:	f100 0604 	add.w	r6, r0, #4
 800641a:	d13e      	bne.n	800649a <arm_split_rfft_q15+0xb2>
 800641c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800641e:	f1ac 0104 	sub.w	r1, ip, #4
 8006422:	f107 0808 	add.w	r8, r7, #8
 8006426:	f856 7b04 	ldr.w	r7, [r6], #4
 800642a:	f852 9b04 	ldr.w	r9, [r2], #4
 800642e:	fb47 fc09 	smusd	ip, r7, r9
 8006432:	f855 e904 	ldr.w	lr, [r5], #-4
 8006436:	f853 ab04 	ldr.w	sl, [r3], #4
 800643a:	fb2e cc0a 	smlad	ip, lr, sl, ip
 800643e:	fb4e fe1a 	smusdx	lr, lr, sl
 8006442:	fb27 e719 	smladx	r7, r7, r9, lr
 8006446:	143f      	asrs	r7, r7, #16
 8006448:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 800644c:	f1c7 0e00 	rsb	lr, r7, #0
 8006450:	3c01      	subs	r4, #1
 8006452:	f828 7c02 	strh.w	r7, [r8, #-2]
 8006456:	f828 cc04 	strh.w	ip, [r8, #-4]
 800645a:	f1a1 0104 	sub.w	r1, r1, #4
 800645e:	f8a1 e00a 	strh.w	lr, [r1, #10]
 8006462:	f8a1 c008 	strh.w	ip, [r1, #8]
 8006466:	f108 0804 	add.w	r8, r8, #4
 800646a:	d1dc      	bne.n	8006426 <arm_split_rfft_q15+0x3e>
 800646c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8006470:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006474:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006476:	9a01      	ldr	r2, [sp, #4]
 8006478:	1a5b      	subs	r3, r3, r1
 800647a:	4422      	add	r2, r4
 800647c:	2100      	movs	r1, #0
 800647e:	105b      	asrs	r3, r3, #1
 8006480:	8093      	strh	r3, [r2, #4]
 8006482:	80d1      	strh	r1, [r2, #6]
 8006484:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006488:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800648c:	8061      	strh	r1, [r4, #2]
 800648e:	4413      	add	r3, r2
 8006490:	105b      	asrs	r3, r3, #1
 8006492:	8023      	strh	r3, [r4, #0]
 8006494:	b003      	add	sp, #12
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800649e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80064a0:	f1ac 0104 	sub.w	r1, ip, #4
 80064a4:	f107 0808 	add.w	r8, r7, #8
 80064a8:	f856 7b04 	ldr.w	r7, [r6], #4
 80064ac:	f8d2 9000 	ldr.w	r9, [r2]
 80064b0:	fb47 fc09 	smusd	ip, r7, r9
 80064b4:	f855 e904 	ldr.w	lr, [r5], #-4
 80064b8:	f8d3 a000 	ldr.w	sl, [r3]
 80064bc:	fb2e cc0a 	smlad	ip, lr, sl, ip
 80064c0:	fb4e fe1a 	smusdx	lr, lr, sl
 80064c4:	fb27 e719 	smladx	r7, r7, r9, lr
 80064c8:	143f      	asrs	r7, r7, #16
 80064ca:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 80064ce:	f1c7 0e00 	rsb	lr, r7, #0
 80064d2:	3c01      	subs	r4, #1
 80064d4:	f828 7c02 	strh.w	r7, [r8, #-2]
 80064d8:	f828 cc04 	strh.w	ip, [r8, #-4]
 80064dc:	445b      	add	r3, fp
 80064de:	f8a1 e006 	strh.w	lr, [r1, #6]
 80064e2:	f8a1 c004 	strh.w	ip, [r1, #4]
 80064e6:	445a      	add	r2, fp
 80064e8:	f108 0804 	add.w	r8, r8, #4
 80064ec:	f1a1 0104 	sub.w	r1, r1, #4
 80064f0:	d1da      	bne.n	80064a8 <arm_split_rfft_q15+0xc0>
 80064f2:	e7bb      	b.n	800646c <arm_split_rfft_q15+0x84>

080064f4 <arm_rfft_q15>:
 80064f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f8:	f890 e004 	ldrb.w	lr, [r0, #4]
 80064fc:	6806      	ldr	r6, [r0, #0]
 80064fe:	f1be 0f01 	cmp.w	lr, #1
 8006502:	4604      	mov	r4, r0
 8006504:	b083      	sub	sp, #12
 8006506:	6940      	ldr	r0, [r0, #20]
 8006508:	4615      	mov	r5, r2
 800650a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800650e:	460f      	mov	r7, r1
 8006510:	d00f      	beq.n	8006532 <arm_rfft_q15+0x3e>
 8006512:	7963      	ldrb	r3, [r4, #5]
 8006514:	4672      	mov	r2, lr
 8006516:	f000 fb6f 	bl	8006bf8 <arm_cfft_q15>
 800651a:	68a3      	ldr	r3, [r4, #8]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	9500      	str	r5, [sp, #0]
 8006520:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8006524:	4631      	mov	r1, r6
 8006526:	4638      	mov	r0, r7
 8006528:	f7ff ff5e 	bl	80063e8 <arm_split_rfft_q15>
 800652c:	b003      	add	sp, #12
 800652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006532:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 8006536:	68a2      	ldr	r2, [r4, #8]
 8006538:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 800653c:	b30e      	cbz	r6, 8006582 <arm_rfft_q15+0x8e>
 800653e:	2a01      	cmp	r2, #1
 8006540:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8006544:	d132      	bne.n	80065ac <arm_rfft_q15+0xb8>
 8006546:	46a9      	mov	r9, r5
 8006548:	f85c 8904 	ldr.w	r8, [ip], #-4
 800654c:	f851 2b04 	ldr.w	r2, [r1], #4
 8006550:	fb48 fa02 	smusd	sl, r8, r2
 8006554:	f857 bb04 	ldr.w	fp, [r7], #4
 8006558:	f853 eb04 	ldr.w	lr, [r3], #4
 800655c:	fb2b aa0e 	smlad	sl, fp, lr, sl
 8006560:	fb28 f812 	smuadx	r8, r8, r2
 8006564:	f1c8 0200 	rsb	r2, r8, #0
 8006568:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 800656c:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8006570:	0412      	lsls	r2, r2, #16
 8006572:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8006576:	3e01      	subs	r6, #1
 8006578:	f849 2b04 	str.w	r2, [r9], #4
 800657c:	d1e4      	bne.n	8006548 <arm_rfft_q15+0x54>
 800657e:	f894 e004 	ldrb.w	lr, [r4, #4]
 8006582:	7963      	ldrb	r3, [r4, #5]
 8006584:	4672      	mov	r2, lr
 8006586:	4629      	mov	r1, r5
 8006588:	f000 fb36 	bl	8006bf8 <arm_cfft_q15>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0cc      	beq.n	800652c <arm_rfft_q15+0x38>
 8006592:	3d02      	subs	r5, #2
 8006594:	2100      	movs	r1, #0
 8006596:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	802b      	strh	r3, [r5, #0]
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	3101      	adds	r1, #1
 80065a2:	428b      	cmp	r3, r1
 80065a4:	d8f7      	bhi.n	8006596 <arm_rfft_q15+0xa2>
 80065a6:	b003      	add	sp, #12
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ac:	ee07 0a90 	vmov	s15, r0
 80065b0:	46a8      	mov	r8, r5
 80065b2:	f85c e904 	ldr.w	lr, [ip], #-4
 80065b6:	6808      	ldr	r0, [r1, #0]
 80065b8:	fb4e f900 	smusd	r9, lr, r0
 80065bc:	f857 ab04 	ldr.w	sl, [r7], #4
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	fb2a 9902 	smlad	r9, sl, r2, r9
 80065c6:	fb2e fe10 	smuadx	lr, lr, r0
 80065ca:	f1ce 0e00 	rsb	lr, lr, #0
 80065ce:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 80065d2:	0c12      	lsrs	r2, r2, #16
 80065d4:	0412      	lsls	r2, r2, #16
 80065d6:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 80065da:	3e01      	subs	r6, #1
 80065dc:	f848 2b04 	str.w	r2, [r8], #4
 80065e0:	4459      	add	r1, fp
 80065e2:	445b      	add	r3, fp
 80065e4:	d1e5      	bne.n	80065b2 <arm_rfft_q15+0xbe>
 80065e6:	ee17 0a90 	vmov	r0, s15
 80065ea:	e7c8      	b.n	800657e <arm_rfft_q15+0x8a>

080065ec <arm_rfft_init_q15>:
 80065ec:	b430      	push	{r4, r5}
 80065ee:	b289      	uxth	r1, r1
 80065f0:	4d31      	ldr	r5, [pc, #196]	@ (80066b8 <arm_rfft_init_q15+0xcc>)
 80065f2:	4c32      	ldr	r4, [pc, #200]	@ (80066bc <arm_rfft_init_q15+0xd0>)
 80065f4:	6001      	str	r1, [r0, #0]
 80065f6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80065fa:	e9c0 5403 	strd	r5, r4, [r0, #12]
 80065fe:	7102      	strb	r2, [r0, #4]
 8006600:	7143      	strb	r3, [r0, #5]
 8006602:	d053      	beq.n	80066ac <arm_rfft_init_q15+0xc0>
 8006604:	d91a      	bls.n	800663c <arm_rfft_init_q15+0x50>
 8006606:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800660a:	d033      	beq.n	8006674 <arm_rfft_init_q15+0x88>
 800660c:	d909      	bls.n	8006622 <arm_rfft_init_q15+0x36>
 800660e:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006612:	d12b      	bne.n	800666c <arm_rfft_init_q15+0x80>
 8006614:	4b2a      	ldr	r3, [pc, #168]	@ (80066c0 <arm_rfft_init_q15+0xd4>)
 8006616:	6143      	str	r3, [r0, #20]
 8006618:	2201      	movs	r2, #1
 800661a:	6082      	str	r2, [r0, #8]
 800661c:	2000      	movs	r0, #0
 800661e:	bc30      	pop	{r4, r5}
 8006620:	4770      	bx	lr
 8006622:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006626:	d02c      	beq.n	8006682 <arm_rfft_init_q15+0x96>
 8006628:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800662c:	d11e      	bne.n	800666c <arm_rfft_init_q15+0x80>
 800662e:	4b25      	ldr	r3, [pc, #148]	@ (80066c4 <arm_rfft_init_q15+0xd8>)
 8006630:	6143      	str	r3, [r0, #20]
 8006632:	2204      	movs	r2, #4
 8006634:	6082      	str	r2, [r0, #8]
 8006636:	bc30      	pop	{r4, r5}
 8006638:	2000      	movs	r0, #0
 800663a:	4770      	bx	lr
 800663c:	2980      	cmp	r1, #128	@ 0x80
 800663e:	d027      	beq.n	8006690 <arm_rfft_init_q15+0xa4>
 8006640:	d909      	bls.n	8006656 <arm_rfft_init_q15+0x6a>
 8006642:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006646:	d111      	bne.n	800666c <arm_rfft_init_q15+0x80>
 8006648:	4b1f      	ldr	r3, [pc, #124]	@ (80066c8 <arm_rfft_init_q15+0xdc>)
 800664a:	6143      	str	r3, [r0, #20]
 800664c:	2220      	movs	r2, #32
 800664e:	6082      	str	r2, [r0, #8]
 8006650:	bc30      	pop	{r4, r5}
 8006652:	2000      	movs	r0, #0
 8006654:	4770      	bx	lr
 8006656:	2920      	cmp	r1, #32
 8006658:	d021      	beq.n	800669e <arm_rfft_init_q15+0xb2>
 800665a:	2940      	cmp	r1, #64	@ 0x40
 800665c:	d106      	bne.n	800666c <arm_rfft_init_q15+0x80>
 800665e:	4b1b      	ldr	r3, [pc, #108]	@ (80066cc <arm_rfft_init_q15+0xe0>)
 8006660:	6143      	str	r3, [r0, #20]
 8006662:	2280      	movs	r2, #128	@ 0x80
 8006664:	6082      	str	r2, [r0, #8]
 8006666:	bc30      	pop	{r4, r5}
 8006668:	2000      	movs	r0, #0
 800666a:	4770      	bx	lr
 800666c:	f04f 30ff 	mov.w	r0, #4294967295
 8006670:	bc30      	pop	{r4, r5}
 8006672:	4770      	bx	lr
 8006674:	4b16      	ldr	r3, [pc, #88]	@ (80066d0 <arm_rfft_init_q15+0xe4>)
 8006676:	6143      	str	r3, [r0, #20]
 8006678:	2202      	movs	r2, #2
 800667a:	6082      	str	r2, [r0, #8]
 800667c:	bc30      	pop	{r4, r5}
 800667e:	2000      	movs	r0, #0
 8006680:	4770      	bx	lr
 8006682:	4b14      	ldr	r3, [pc, #80]	@ (80066d4 <arm_rfft_init_q15+0xe8>)
 8006684:	6143      	str	r3, [r0, #20]
 8006686:	2208      	movs	r2, #8
 8006688:	6082      	str	r2, [r0, #8]
 800668a:	bc30      	pop	{r4, r5}
 800668c:	2000      	movs	r0, #0
 800668e:	4770      	bx	lr
 8006690:	4b11      	ldr	r3, [pc, #68]	@ (80066d8 <arm_rfft_init_q15+0xec>)
 8006692:	6143      	str	r3, [r0, #20]
 8006694:	2240      	movs	r2, #64	@ 0x40
 8006696:	6082      	str	r2, [r0, #8]
 8006698:	bc30      	pop	{r4, r5}
 800669a:	2000      	movs	r0, #0
 800669c:	4770      	bx	lr
 800669e:	4b0f      	ldr	r3, [pc, #60]	@ (80066dc <arm_rfft_init_q15+0xf0>)
 80066a0:	6143      	str	r3, [r0, #20]
 80066a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80066a6:	6082      	str	r2, [r0, #8]
 80066a8:	2000      	movs	r0, #0
 80066aa:	e7b8      	b.n	800661e <arm_rfft_init_q15+0x32>
 80066ac:	4b0c      	ldr	r3, [pc, #48]	@ (80066e0 <arm_rfft_init_q15+0xf4>)
 80066ae:	6143      	str	r3, [r0, #20]
 80066b0:	2210      	movs	r2, #16
 80066b2:	6082      	str	r2, [r0, #8]
 80066b4:	2000      	movs	r0, #0
 80066b6:	e7b2      	b.n	800661e <arm_rfft_init_q15+0x32>
 80066b8:	0800d240 	.word	0x0800d240
 80066bc:	08011240 	.word	0x08011240
 80066c0:	08009418 	.word	0x08009418
 80066c4:	080093b8 	.word	0x080093b8
 80066c8:	080093c8 	.word	0x080093c8
 80066cc:	08009408 	.word	0x08009408
 80066d0:	080093e8 	.word	0x080093e8
 80066d4:	08009428 	.word	0x08009428
 80066d8:	08009438 	.word	0x08009438
 80066dc:	080093d8 	.word	0x080093d8
 80066e0:	080093f8 	.word	0x080093f8

080066e4 <arm_shift_q15>:
 80066e4:	2900      	cmp	r1, #0
 80066e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ea:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80066ee:	db4a      	blt.n	8006786 <arm_shift_q15+0xa2>
 80066f0:	f1bc 0f00 	cmp.w	ip, #0
 80066f4:	d02b      	beq.n	800674e <arm_shift_q15+0x6a>
 80066f6:	f100 0508 	add.w	r5, r0, #8
 80066fa:	4616      	mov	r6, r2
 80066fc:	4667      	mov	r7, ip
 80066fe:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 8006702:	408c      	lsls	r4, r1
 8006704:	f304 040f 	ssat	r4, #16, r4
 8006708:	f935 ec06 	ldrsh.w	lr, [r5, #-6]
 800670c:	fa0e fe01 	lsl.w	lr, lr, r1
 8006710:	f30e 0e0f 	ssat	lr, #16, lr
 8006714:	b2a4      	uxth	r4, r4
 8006716:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800671a:	6034      	str	r4, [r6, #0]
 800671c:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 8006720:	408c      	lsls	r4, r1
 8006722:	f304 040f 	ssat	r4, #16, r4
 8006726:	f935 ec02 	ldrsh.w	lr, [r5, #-2]
 800672a:	fa0e fe01 	lsl.w	lr, lr, r1
 800672e:	f30e 0e0f 	ssat	lr, #16, lr
 8006732:	b2a4      	uxth	r4, r4
 8006734:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8006738:	3f01      	subs	r7, #1
 800673a:	6074      	str	r4, [r6, #4]
 800673c:	f105 0508 	add.w	r5, r5, #8
 8006740:	f106 0608 	add.w	r6, r6, #8
 8006744:	d1db      	bne.n	80066fe <arm_shift_q15+0x1a>
 8006746:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 800674a:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800674e:	f013 0303 	ands.w	r3, r3, #3
 8006752:	d016      	beq.n	8006782 <arm_shift_q15+0x9e>
 8006754:	f9b0 4000 	ldrsh.w	r4, [r0]
 8006758:	408c      	lsls	r4, r1
 800675a:	f304 040f 	ssat	r4, #16, r4
 800675e:	3b01      	subs	r3, #1
 8006760:	8014      	strh	r4, [r2, #0]
 8006762:	d00e      	beq.n	8006782 <arm_shift_q15+0x9e>
 8006764:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8006768:	408c      	lsls	r4, r1
 800676a:	f304 040f 	ssat	r4, #16, r4
 800676e:	2b01      	cmp	r3, #1
 8006770:	8054      	strh	r4, [r2, #2]
 8006772:	d006      	beq.n	8006782 <arm_shift_q15+0x9e>
 8006774:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8006778:	fa03 f101 	lsl.w	r1, r3, r1
 800677c:	f301 010f 	ssat	r1, #16, r1
 8006780:	8091      	strh	r1, [r2, #4]
 8006782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006786:	f1bc 0f00 	cmp.w	ip, #0
 800678a:	d025      	beq.n	80067d8 <arm_shift_q15+0xf4>
 800678c:	424f      	negs	r7, r1
 800678e:	f100 0508 	add.w	r5, r0, #8
 8006792:	4616      	mov	r6, r2
 8006794:	46e6      	mov	lr, ip
 8006796:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 800679a:	f935 8c06 	ldrsh.w	r8, [r5, #-6]
 800679e:	413c      	asrs	r4, r7
 80067a0:	fa48 f807 	asr.w	r8, r8, r7
 80067a4:	b2a4      	uxth	r4, r4
 80067a6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80067aa:	6034      	str	r4, [r6, #0]
 80067ac:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 80067b0:	f935 8c02 	ldrsh.w	r8, [r5, #-2]
 80067b4:	413c      	asrs	r4, r7
 80067b6:	b2a4      	uxth	r4, r4
 80067b8:	fa48 f807 	asr.w	r8, r8, r7
 80067bc:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80067c0:	f1be 0e01 	subs.w	lr, lr, #1
 80067c4:	6074      	str	r4, [r6, #4]
 80067c6:	f105 0508 	add.w	r5, r5, #8
 80067ca:	f106 0608 	add.w	r6, r6, #8
 80067ce:	d1e2      	bne.n	8006796 <arm_shift_q15+0xb2>
 80067d0:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80067d4:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 80067d8:	f013 0303 	ands.w	r3, r3, #3
 80067dc:	d0d1      	beq.n	8006782 <arm_shift_q15+0x9e>
 80067de:	f9b0 4000 	ldrsh.w	r4, [r0]
 80067e2:	4249      	negs	r1, r1
 80067e4:	410c      	asrs	r4, r1
 80067e6:	3b01      	subs	r3, #1
 80067e8:	8014      	strh	r4, [r2, #0]
 80067ea:	d0ca      	beq.n	8006782 <arm_shift_q15+0x9e>
 80067ec:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	fa44 f401 	asr.w	r4, r4, r1
 80067f6:	8054      	strh	r4, [r2, #2]
 80067f8:	d0c3      	beq.n	8006782 <arm_shift_q15+0x9e>
 80067fa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80067fe:	fa43 f101 	asr.w	r1, r3, r1
 8006802:	8091      	strh	r1, [r2, #4]
 8006804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006808 <arm_offset_q15>:
 8006808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800680a:	fa1f fc81 	uxth.w	ip, r1
 800680e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8006812:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 8006816:	d014      	beq.n	8006842 <arm_offset_q15+0x3a>
 8006818:	4615      	mov	r5, r2
 800681a:	4604      	mov	r4, r0
 800681c:	4677      	mov	r7, lr
 800681e:	6826      	ldr	r6, [r4, #0]
 8006820:	fa96 f61c 	qadd16	r6, r6, ip
 8006824:	3f01      	subs	r7, #1
 8006826:	602e      	str	r6, [r5, #0]
 8006828:	6866      	ldr	r6, [r4, #4]
 800682a:	fa96 f61c 	qadd16	r6, r6, ip
 800682e:	f104 0408 	add.w	r4, r4, #8
 8006832:	606e      	str	r6, [r5, #4]
 8006834:	f105 0508 	add.w	r5, r5, #8
 8006838:	d1f1      	bne.n	800681e <arm_offset_q15+0x16>
 800683a:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 800683e:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8006842:	f013 0303 	ands.w	r3, r3, #3
 8006846:	d012      	beq.n	800686e <arm_offset_q15+0x66>
 8006848:	3b01      	subs	r3, #1
 800684a:	f9b0 4000 	ldrsh.w	r4, [r0]
 800684e:	fa94 f411 	qadd16	r4, r4, r1
 8006852:	8014      	strh	r4, [r2, #0]
 8006854:	d00b      	beq.n	800686e <arm_offset_q15+0x66>
 8006856:	2b01      	cmp	r3, #1
 8006858:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800685c:	fa94 f411 	qadd16	r4, r4, r1
 8006860:	8054      	strh	r4, [r2, #2]
 8006862:	d004      	beq.n	800686e <arm_offset_q15+0x66>
 8006864:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8006868:	fa93 f111 	qadd16	r1, r3, r1
 800686c:	8091      	strh	r1, [r2, #4]
 800686e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006870 <arm_mult_q15>:
 8006870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	ea5f 0893 	movs.w	r8, r3, lsr #2
 8006878:	d037      	beq.n	80068ea <arm_mult_q15+0x7a>
 800687a:	4694      	mov	ip, r2
 800687c:	460f      	mov	r7, r1
 800687e:	4606      	mov	r6, r0
 8006880:	46c6      	mov	lr, r8
 8006882:	f8d6 a000 	ldr.w	sl, [r6]
 8006886:	683d      	ldr	r5, [r7, #0]
 8006888:	6874      	ldr	r4, [r6, #4]
 800688a:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800688e:	fb15 f93a 	smultt	r9, r5, sl
 8006892:	ea4f 39e9 	mov.w	r9, r9, asr #15
 8006896:	3608      	adds	r6, #8
 8006898:	3708      	adds	r7, #8
 800689a:	f309 090f 	ssat	r9, #16, r9
 800689e:	fb1a fa05 	smulbb	sl, sl, r5
 80068a2:	ea4f 3aea 	mov.w	sl, sl, asr #15
 80068a6:	f30a 0a0f 	ssat	sl, #16, sl
 80068aa:	fb1b f534 	smultt	r5, fp, r4
 80068ae:	13ed      	asrs	r5, r5, #15
 80068b0:	f305 050f 	ssat	r5, #16, r5
 80068b4:	fb14 f40b 	smulbb	r4, r4, fp
 80068b8:	13e4      	asrs	r4, r4, #15
 80068ba:	f304 040f 	ssat	r4, #16, r4
 80068be:	fa1f fa8a 	uxth.w	sl, sl
 80068c2:	b2a4      	uxth	r4, r4
 80068c4:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 80068c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80068cc:	f1be 0e01 	subs.w	lr, lr, #1
 80068d0:	f8cc 9000 	str.w	r9, [ip]
 80068d4:	f8cc 4004 	str.w	r4, [ip, #4]
 80068d8:	f10c 0c08 	add.w	ip, ip, #8
 80068dc:	d1d1      	bne.n	8006882 <arm_mult_q15+0x12>
 80068de:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 80068e2:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80068e6:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80068ea:	f013 0303 	ands.w	r3, r3, #3
 80068ee:	d01b      	beq.n	8006928 <arm_mult_q15+0xb8>
 80068f0:	880c      	ldrh	r4, [r1, #0]
 80068f2:	8805      	ldrh	r5, [r0, #0]
 80068f4:	fb14 f405 	smulbb	r4, r4, r5
 80068f8:	13e4      	asrs	r4, r4, #15
 80068fa:	f304 040f 	ssat	r4, #16, r4
 80068fe:	3b01      	subs	r3, #1
 8006900:	8014      	strh	r4, [r2, #0]
 8006902:	d011      	beq.n	8006928 <arm_mult_q15+0xb8>
 8006904:	884c      	ldrh	r4, [r1, #2]
 8006906:	8845      	ldrh	r5, [r0, #2]
 8006908:	fb14 f405 	smulbb	r4, r4, r5
 800690c:	13e4      	asrs	r4, r4, #15
 800690e:	f304 040f 	ssat	r4, #16, r4
 8006912:	2b01      	cmp	r3, #1
 8006914:	8054      	strh	r4, [r2, #2]
 8006916:	d007      	beq.n	8006928 <arm_mult_q15+0xb8>
 8006918:	8883      	ldrh	r3, [r0, #4]
 800691a:	8889      	ldrh	r1, [r1, #4]
 800691c:	fb13 f301 	smulbb	r3, r3, r1
 8006920:	13db      	asrs	r3, r3, #15
 8006922:	f303 030f 	ssat	r3, #16, r3
 8006926:	8093      	strh	r3, [r2, #4]
 8006928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800692c <arm_dot_prod_q15>:
 800692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006930:	ea5f 0992 	movs.w	r9, r2, lsr #2
 8006934:	d036      	beq.n	80069a4 <arm_dot_prod_q15+0x78>
 8006936:	468e      	mov	lr, r1
 8006938:	4684      	mov	ip, r0
 800693a:	46c8      	mov	r8, r9
 800693c:	2600      	movs	r6, #0
 800693e:	2700      	movs	r7, #0
 8006940:	f8dc a000 	ldr.w	sl, [ip]
 8006944:	f8de b000 	ldr.w	fp, [lr]
 8006948:	4635      	mov	r5, r6
 800694a:	463c      	mov	r4, r7
 800694c:	fbca 54cb 	smlald	r5, r4, sl, fp
 8006950:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006954:	f8de 7004 	ldr.w	r7, [lr, #4]
 8006958:	f10c 0c08 	add.w	ip, ip, #8
 800695c:	f10e 0e08 	add.w	lr, lr, #8
 8006960:	fbc6 54c7 	smlald	r5, r4, r6, r7
 8006964:	f1b8 0801 	subs.w	r8, r8, #1
 8006968:	462e      	mov	r6, r5
 800696a:	4627      	mov	r7, r4
 800696c:	d1e8      	bne.n	8006940 <arm_dot_prod_q15+0x14>
 800696e:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8006972:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 8006976:	f012 0203 	ands.w	r2, r2, #3
 800697a:	d00f      	beq.n	800699c <arm_dot_prod_q15+0x70>
 800697c:	880d      	ldrh	r5, [r1, #0]
 800697e:	8804      	ldrh	r4, [r0, #0]
 8006980:	3a01      	subs	r2, #1
 8006982:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 8006986:	d009      	beq.n	800699c <arm_dot_prod_q15+0x70>
 8006988:	884d      	ldrh	r5, [r1, #2]
 800698a:	8844      	ldrh	r4, [r0, #2]
 800698c:	2a01      	cmp	r2, #1
 800698e:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 8006992:	d003      	beq.n	800699c <arm_dot_prod_q15+0x70>
 8006994:	8880      	ldrh	r0, [r0, #4]
 8006996:	888a      	ldrh	r2, [r1, #4]
 8006998:	fbc0 6782 	smlalbb	r6, r7, r0, r2
 800699c:	e9c3 6700 	strd	r6, r7, [r3]
 80069a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a4:	2600      	movs	r6, #0
 80069a6:	2700      	movs	r7, #0
 80069a8:	e7e5      	b.n	8006976 <arm_dot_prod_q15+0x4a>
 80069aa:	bf00      	nop

080069ac <arm_abs_q15>:
 80069ac:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 80069b0:	b4f0      	push	{r4, r5, r6, r7}
 80069b2:	d030      	beq.n	8006a16 <arm_abs_q15+0x6a>
 80069b4:	f100 0308 	add.w	r3, r0, #8
 80069b8:	f101 0408 	add.w	r4, r1, #8
 80069bc:	4666      	mov	r6, ip
 80069be:	2700      	movs	r7, #0
 80069c0:	f933 5c08 	ldrsh.w	r5, [r3, #-8]
 80069c4:	2d00      	cmp	r5, #0
 80069c6:	dc02      	bgt.n	80069ce <arm_abs_q15+0x22>
 80069c8:	fad7 f515 	qsub16	r5, r7, r5
 80069cc:	b22d      	sxth	r5, r5
 80069ce:	f824 5c08 	strh.w	r5, [r4, #-8]
 80069d2:	f933 5c06 	ldrsh.w	r5, [r3, #-6]
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	dc02      	bgt.n	80069e0 <arm_abs_q15+0x34>
 80069da:	fad7 f515 	qsub16	r5, r7, r5
 80069de:	b22d      	sxth	r5, r5
 80069e0:	f824 5c06 	strh.w	r5, [r4, #-6]
 80069e4:	f933 5c04 	ldrsh.w	r5, [r3, #-4]
 80069e8:	2d00      	cmp	r5, #0
 80069ea:	dc02      	bgt.n	80069f2 <arm_abs_q15+0x46>
 80069ec:	fad7 f515 	qsub16	r5, r7, r5
 80069f0:	b22d      	sxth	r5, r5
 80069f2:	f824 5c04 	strh.w	r5, [r4, #-4]
 80069f6:	f933 5c02 	ldrsh.w	r5, [r3, #-2]
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	dd27      	ble.n	8006a4e <arm_abs_q15+0xa2>
 80069fe:	3e01      	subs	r6, #1
 8006a00:	f824 5c02 	strh.w	r5, [r4, #-2]
 8006a04:	f103 0308 	add.w	r3, r3, #8
 8006a08:	f104 0408 	add.w	r4, r4, #8
 8006a0c:	d1d8      	bne.n	80069c0 <arm_abs_q15+0x14>
 8006a0e:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8006a12:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 8006a16:	f012 0203 	ands.w	r2, r2, #3
 8006a1a:	d016      	beq.n	8006a4a <arm_abs_q15+0x9e>
 8006a1c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dd1f      	ble.n	8006a64 <arm_abs_q15+0xb8>
 8006a24:	3a01      	subs	r2, #1
 8006a26:	800b      	strh	r3, [r1, #0]
 8006a28:	d00f      	beq.n	8006a4a <arm_abs_q15+0x9e>
 8006a2a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	dd1d      	ble.n	8006a6e <arm_abs_q15+0xc2>
 8006a32:	2a01      	cmp	r2, #1
 8006a34:	804b      	strh	r3, [r1, #2]
 8006a36:	d008      	beq.n	8006a4a <arm_abs_q15+0x9e>
 8006a38:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	dc03      	bgt.n	8006a48 <arm_abs_q15+0x9c>
 8006a40:	2200      	movs	r2, #0
 8006a42:	fad2 f313 	qsub16	r3, r2, r3
 8006a46:	b21b      	sxth	r3, r3
 8006a48:	808b      	strh	r3, [r1, #4]
 8006a4a:	bcf0      	pop	{r4, r5, r6, r7}
 8006a4c:	4770      	bx	lr
 8006a4e:	3e01      	subs	r6, #1
 8006a50:	fad7 f515 	qsub16	r5, r7, r5
 8006a54:	f103 0308 	add.w	r3, r3, #8
 8006a58:	f824 5c02 	strh.w	r5, [r4, #-2]
 8006a5c:	f104 0408 	add.w	r4, r4, #8
 8006a60:	d1ae      	bne.n	80069c0 <arm_abs_q15+0x14>
 8006a62:	e7d4      	b.n	8006a0e <arm_abs_q15+0x62>
 8006a64:	2400      	movs	r4, #0
 8006a66:	fad4 f313 	qsub16	r3, r4, r3
 8006a6a:	b21b      	sxth	r3, r3
 8006a6c:	e7da      	b.n	8006a24 <arm_abs_q15+0x78>
 8006a6e:	2400      	movs	r4, #0
 8006a70:	2a01      	cmp	r2, #1
 8006a72:	fad4 f313 	qsub16	r3, r4, r3
 8006a76:	b21b      	sxth	r3, r3
 8006a78:	804b      	strh	r3, [r1, #2]
 8006a7a:	d1dd      	bne.n	8006a38 <arm_abs_q15+0x8c>
 8006a7c:	e7e5      	b.n	8006a4a <arm_abs_q15+0x9e>
 8006a7e:	bf00      	nop

08006a80 <arm_cfft_radix4by2_q15>:
 8006a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a84:	084d      	lsrs	r5, r1, #1
 8006a86:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8006a8a:	4616      	mov	r6, r2
 8006a8c:	d047      	beq.n	8006b1e <arm_cfft_radix4by2_q15+0x9e>
 8006a8e:	4604      	mov	r4, r0
 8006a90:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8006b38 <arm_cfft_radix4by2_q15+0xb8>
 8006a94:	4696      	mov	lr, r2
 8006a96:	4638      	mov	r0, r7
 8006a98:	4621      	mov	r1, r4
 8006a9a:	462a      	mov	r2, r5
 8006a9c:	f04f 0c00 	mov.w	ip, #0
 8006aa0:	680b      	ldr	r3, [r1, #0]
 8006aa2:	f8d0 a000 	ldr.w	sl, [r0]
 8006aa6:	fa93 f32c 	shadd16	r3, r3, ip
 8006aaa:	fa9a fa2c 	shadd16	sl, sl, ip
 8006aae:	fa93 f92a 	shadd16	r9, r3, sl
 8006ab2:	fad3 fa1a 	qsub16	sl, r3, sl
 8006ab6:	f85e 3b04 	ldr.w	r3, [lr], #4
 8006aba:	f841 9b04 	str.w	r9, [r1], #4
 8006abe:	fb23 f90a 	smuad	r9, r3, sl
 8006ac2:	fb43 f31a 	smusdx	r3, r3, sl
 8006ac6:	ea03 0308 	and.w	r3, r3, r8
 8006aca:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8006ace:	3a01      	subs	r2, #1
 8006ad0:	f840 3b04 	str.w	r3, [r0], #4
 8006ad4:	d1e4      	bne.n	8006aa0 <arm_cfft_radix4by2_q15+0x20>
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	2302      	movs	r3, #2
 8006ada:	4632      	mov	r2, r6
 8006adc:	4620      	mov	r0, r4
 8006ade:	f000 f8e9 	bl	8006cb4 <arm_radix4_butterfly_q15>
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4632      	mov	r2, r6
 8006ae8:	2302      	movs	r3, #2
 8006aea:	f000 f8e3 	bl	8006cb4 <arm_radix4_butterfly_q15>
 8006aee:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8006af2:	4620      	mov	r0, r4
 8006af4:	f9b0 6000 	ldrsh.w	r6, [r0]
 8006af8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8006afc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8006b00:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8006b04:	0076      	lsls	r6, r6, #1
 8006b06:	0064      	lsls	r4, r4, #1
 8006b08:	0052      	lsls	r2, r2, #1
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	8006      	strh	r6, [r0, #0]
 8006b0e:	8044      	strh	r4, [r0, #2]
 8006b10:	8082      	strh	r2, [r0, #4]
 8006b12:	80c3      	strh	r3, [r0, #6]
 8006b14:	3008      	adds	r0, #8
 8006b16:	4285      	cmp	r5, r0
 8006b18:	d1ec      	bne.n	8006af4 <arm_cfft_radix4by2_q15+0x74>
 8006b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1e:	4629      	mov	r1, r5
 8006b20:	2302      	movs	r3, #2
 8006b22:	f000 f8c7 	bl	8006cb4 <arm_radix4_butterfly_q15>
 8006b26:	4632      	mov	r2, r6
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b32:	f000 b8bf 	b.w	8006cb4 <arm_radix4_butterfly_q15>
 8006b36:	bf00      	nop
 8006b38:	ffff0000 	.word	0xffff0000

08006b3c <arm_cfft_radix4by2_inverse_q15>:
 8006b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b40:	084d      	lsrs	r5, r1, #1
 8006b42:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8006b46:	4616      	mov	r6, r2
 8006b48:	d047      	beq.n	8006bda <arm_cfft_radix4by2_inverse_q15+0x9e>
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8006bf4 <arm_cfft_radix4by2_inverse_q15+0xb8>
 8006b50:	4696      	mov	lr, r2
 8006b52:	4638      	mov	r0, r7
 8006b54:	4621      	mov	r1, r4
 8006b56:	462a      	mov	r2, r5
 8006b58:	f04f 0c00 	mov.w	ip, #0
 8006b5c:	680b      	ldr	r3, [r1, #0]
 8006b5e:	f8d0 a000 	ldr.w	sl, [r0]
 8006b62:	fa93 f32c 	shadd16	r3, r3, ip
 8006b66:	fa9a fa2c 	shadd16	sl, sl, ip
 8006b6a:	fa93 f92a 	shadd16	r9, r3, sl
 8006b6e:	fad3 fa1a 	qsub16	sl, r3, sl
 8006b72:	f85e 3b04 	ldr.w	r3, [lr], #4
 8006b76:	f841 9b04 	str.w	r9, [r1], #4
 8006b7a:	fb43 f90a 	smusd	r9, r3, sl
 8006b7e:	fb23 f31a 	smuadx	r3, r3, sl
 8006b82:	ea03 0308 	and.w	r3, r3, r8
 8006b86:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8006b8a:	3a01      	subs	r2, #1
 8006b8c:	f840 3b04 	str.w	r3, [r0], #4
 8006b90:	d1e4      	bne.n	8006b5c <arm_cfft_radix4by2_inverse_q15+0x20>
 8006b92:	4629      	mov	r1, r5
 8006b94:	2302      	movs	r3, #2
 8006b96:	4632      	mov	r2, r6
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fa35 	bl	8007008 <arm_radix4_butterfly_inverse_q15>
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	4632      	mov	r2, r6
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	f000 fa2f 	bl	8007008 <arm_radix4_butterfly_inverse_q15>
 8006baa:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f9b0 6000 	ldrsh.w	r6, [r0]
 8006bb4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8006bb8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8006bbc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8006bc0:	0076      	lsls	r6, r6, #1
 8006bc2:	0064      	lsls	r4, r4, #1
 8006bc4:	0052      	lsls	r2, r2, #1
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	8006      	strh	r6, [r0, #0]
 8006bca:	8044      	strh	r4, [r0, #2]
 8006bcc:	8082      	strh	r2, [r0, #4]
 8006bce:	80c3      	strh	r3, [r0, #6]
 8006bd0:	3008      	adds	r0, #8
 8006bd2:	4285      	cmp	r5, r0
 8006bd4:	d1ec      	bne.n	8006bb0 <arm_cfft_radix4by2_inverse_q15+0x74>
 8006bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bda:	4629      	mov	r1, r5
 8006bdc:	2302      	movs	r3, #2
 8006bde:	f000 fa13 	bl	8007008 <arm_radix4_butterfly_inverse_q15>
 8006be2:	4632      	mov	r2, r6
 8006be4:	4629      	mov	r1, r5
 8006be6:	4638      	mov	r0, r7
 8006be8:	2302      	movs	r3, #2
 8006bea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bee:	f000 ba0b 	b.w	8007008 <arm_radix4_butterfly_inverse_q15>
 8006bf2:	bf00      	nop
 8006bf4:	ffff0000 	.word	0xffff0000

08006bf8 <arm_cfft_q15>:
 8006bf8:	b5e0      	push	{r5, r6, r7, lr}
 8006bfa:	2a01      	cmp	r2, #1
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	4605      	mov	r5, r0
 8006c00:	8801      	ldrh	r1, [r0, #0]
 8006c02:	461e      	mov	r6, r3
 8006c04:	d02f      	beq.n	8006c66 <arm_cfft_q15+0x6e>
 8006c06:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006c0a:	d026      	beq.n	8006c5a <arm_cfft_q15+0x62>
 8006c0c:	d908      	bls.n	8006c20 <arm_cfft_q15+0x28>
 8006c0e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006c12:	d017      	beq.n	8006c44 <arm_cfft_q15+0x4c>
 8006c14:	d91b      	bls.n	8006c4e <arm_cfft_q15+0x56>
 8006c16:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006c1a:	d01e      	beq.n	8006c5a <arm_cfft_q15+0x62>
 8006c1c:	b93e      	cbnz	r6, 8006c2e <arm_cfft_q15+0x36>
 8006c1e:	bde0      	pop	{r5, r6, r7, pc}
 8006c20:	2940      	cmp	r1, #64	@ 0x40
 8006c22:	d01a      	beq.n	8006c5a <arm_cfft_q15+0x62>
 8006c24:	d90a      	bls.n	8006c3c <arm_cfft_q15+0x44>
 8006c26:	2980      	cmp	r1, #128	@ 0x80
 8006c28:	d00c      	beq.n	8006c44 <arm_cfft_q15+0x4c>
 8006c2a:	2e00      	cmp	r6, #0
 8006c2c:	d0f7      	beq.n	8006c1e <arm_cfft_q15+0x26>
 8006c2e:	68aa      	ldr	r2, [r5, #8]
 8006c30:	89a9      	ldrh	r1, [r5, #12]
 8006c32:	4638      	mov	r0, r7
 8006c34:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8006c38:	f000 bb90 	b.w	800735c <arm_bitreversal_16>
 8006c3c:	2910      	cmp	r1, #16
 8006c3e:	d00c      	beq.n	8006c5a <arm_cfft_q15+0x62>
 8006c40:	2920      	cmp	r1, #32
 8006c42:	d1eb      	bne.n	8006c1c <arm_cfft_q15+0x24>
 8006c44:	686a      	ldr	r2, [r5, #4]
 8006c46:	4638      	mov	r0, r7
 8006c48:	f7ff ff1a 	bl	8006a80 <arm_cfft_radix4by2_q15>
 8006c4c:	e7e6      	b.n	8006c1c <arm_cfft_q15+0x24>
 8006c4e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006c52:	d0f7      	beq.n	8006c44 <arm_cfft_q15+0x4c>
 8006c54:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006c58:	d1e0      	bne.n	8006c1c <arm_cfft_q15+0x24>
 8006c5a:	686a      	ldr	r2, [r5, #4]
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f000 f828 	bl	8006cb4 <arm_radix4_butterfly_q15>
 8006c64:	e7da      	b.n	8006c1c <arm_cfft_q15+0x24>
 8006c66:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006c6a:	d01d      	beq.n	8006ca8 <arm_cfft_q15+0xb0>
 8006c6c:	d907      	bls.n	8006c7e <arm_cfft_q15+0x86>
 8006c6e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006c72:	d00e      	beq.n	8006c92 <arm_cfft_q15+0x9a>
 8006c74:	d912      	bls.n	8006c9c <arm_cfft_q15+0xa4>
 8006c76:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006c7a:	d1cf      	bne.n	8006c1c <arm_cfft_q15+0x24>
 8006c7c:	e014      	b.n	8006ca8 <arm_cfft_q15+0xb0>
 8006c7e:	2940      	cmp	r1, #64	@ 0x40
 8006c80:	d012      	beq.n	8006ca8 <arm_cfft_q15+0xb0>
 8006c82:	d902      	bls.n	8006c8a <arm_cfft_q15+0x92>
 8006c84:	2980      	cmp	r1, #128	@ 0x80
 8006c86:	d004      	beq.n	8006c92 <arm_cfft_q15+0x9a>
 8006c88:	e7c8      	b.n	8006c1c <arm_cfft_q15+0x24>
 8006c8a:	2910      	cmp	r1, #16
 8006c8c:	d00c      	beq.n	8006ca8 <arm_cfft_q15+0xb0>
 8006c8e:	2920      	cmp	r1, #32
 8006c90:	d1c4      	bne.n	8006c1c <arm_cfft_q15+0x24>
 8006c92:	686a      	ldr	r2, [r5, #4]
 8006c94:	4638      	mov	r0, r7
 8006c96:	f7ff ff51 	bl	8006b3c <arm_cfft_radix4by2_inverse_q15>
 8006c9a:	e7bf      	b.n	8006c1c <arm_cfft_q15+0x24>
 8006c9c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006ca0:	d0f7      	beq.n	8006c92 <arm_cfft_q15+0x9a>
 8006ca2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ca6:	d1b9      	bne.n	8006c1c <arm_cfft_q15+0x24>
 8006ca8:	686a      	ldr	r2, [r5, #4]
 8006caa:	2301      	movs	r3, #1
 8006cac:	4638      	mov	r0, r7
 8006cae:	f000 f9ab 	bl	8007008 <arm_radix4_butterfly_inverse_q15>
 8006cb2:	e7b3      	b.n	8006c1c <arm_cfft_q15+0x24>

08006cb4 <arm_radix4_butterfly_q15>:
 8006cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb8:	b093      	sub	sp, #76	@ 0x4c
 8006cba:	f021 0a03 	bic.w	sl, r1, #3
 8006cbe:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8006cc2:	9210      	str	r2, [sp, #64]	@ 0x40
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8006cca:	eb0c 050a 	add.w	r5, ip, sl
 8006cce:	9101      	str	r1, [sp, #4]
 8006cd0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006cd2:	9303      	str	r3, [sp, #12]
 8006cd4:	4482      	add	sl, r0
 8006cd6:	9211      	str	r2, [sp, #68]	@ 0x44
 8006cd8:	f040 8124 	bne.w	8006f24 <arm_radix4_butterfly_q15+0x270>
 8006cdc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006cde:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8007004 <arm_radix4_butterfly_q15+0x350>
 8006ce2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8006ce4:	f8cd a008 	str.w	sl, [sp, #8]
 8006ce8:	4693      	mov	fp, r2
 8006cea:	4690      	mov	r8, r2
 8006cec:	4657      	mov	r7, sl
 8006cee:	2300      	movs	r3, #0
 8006cf0:	4691      	mov	r9, r2
 8006cf2:	6830      	ldr	r0, [r6, #0]
 8006cf4:	f8dc 2000 	ldr.w	r2, [ip]
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	fa90 f023 	shadd16	r0, r0, r3
 8006cfe:	fa91 f123 	shadd16	r1, r1, r3
 8006d02:	fa90 f023 	shadd16	r0, r0, r3
 8006d06:	fa91 fa23 	shadd16	sl, r1, r3
 8006d0a:	fa92 f223 	shadd16	r2, r2, r3
 8006d0e:	6829      	ldr	r1, [r5, #0]
 8006d10:	fa92 f223 	shadd16	r2, r2, r3
 8006d14:	fa91 f123 	shadd16	r1, r1, r3
 8006d18:	fa90 f412 	qadd16	r4, r0, r2
 8006d1c:	fa91 f123 	shadd16	r1, r1, r3
 8006d20:	fa9a f111 	qadd16	r1, sl, r1
 8006d24:	fa94 fa21 	shadd16	sl, r4, r1
 8006d28:	f846 ab04 	str.w	sl, [r6], #4
 8006d2c:	fad4 f411 	qsub16	r4, r4, r1
 8006d30:	fad0 f212 	qsub16	r2, r0, r2
 8006d34:	f85b 1b08 	ldr.w	r1, [fp], #8
 8006d38:	fb21 f004 	smuad	r0, r1, r4
 8006d3c:	fb41 f114 	smusdx	r1, r1, r4
 8006d40:	ea01 010e 	and.w	r1, r1, lr
 8006d44:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8006d48:	6838      	ldr	r0, [r7, #0]
 8006d4a:	f847 1b04 	str.w	r1, [r7], #4
 8006d4e:	fa90 f023 	shadd16	r0, r0, r3
 8006d52:	682c      	ldr	r4, [r5, #0]
 8006d54:	fa90 f023 	shadd16	r0, r0, r3
 8006d58:	fa94 f423 	shadd16	r4, r4, r3
 8006d5c:	f859 1b04 	ldr.w	r1, [r9], #4
 8006d60:	fa94 f423 	shadd16	r4, r4, r3
 8006d64:	fad0 f014 	qsub16	r0, r0, r4
 8006d68:	faa2 f410 	qasx	r4, r2, r0
 8006d6c:	fae2 f210 	qsax	r2, r2, r0
 8006d70:	fb21 fa02 	smuad	sl, r1, r2
 8006d74:	fb41 f212 	smusdx	r2, r1, r2
 8006d78:	ea02 020e 	and.w	r2, r2, lr
 8006d7c:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8006d80:	f84c 2b04 	str.w	r2, [ip], #4
 8006d84:	f858 2b0c 	ldr.w	r2, [r8], #12
 8006d88:	fb22 f104 	smuad	r1, r2, r4
 8006d8c:	fb42 f214 	smusdx	r2, r2, r4
 8006d90:	ea02 020e 	and.w	r2, r2, lr
 8006d94:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8006d98:	f845 2b04 	str.w	r2, [r5], #4
 8006d9c:	9a02      	ldr	r2, [sp, #8]
 8006d9e:	42b2      	cmp	r2, r6
 8006da0:	d1a7      	bne.n	8006cf2 <arm_radix4_butterfly_q15+0x3e>
 8006da2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	2a04      	cmp	r2, #4
 8006da8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006dac:	f240 8127 	bls.w	8006ffe <arm_radix4_butterfly_q15+0x34a>
 8006db0:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8007004 <arm_radix4_butterfly_q15+0x350>
 8006db4:	920e      	str	r2, [sp, #56]	@ 0x38
 8006db6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006db8:	9102      	str	r1, [sp, #8]
 8006dba:	4608      	mov	r0, r1
 8006dbc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006dc0:	0889      	lsrs	r1, r1, #2
 8006dc2:	0092      	lsls	r2, r2, #2
 8006dc4:	0086      	lsls	r6, r0, #2
 8006dc6:	9801      	ldr	r0, [sp, #4]
 8006dc8:	920d      	str	r2, [sp, #52]	@ 0x34
 8006dca:	008c      	lsls	r4, r1, #2
 8006dcc:	009a      	lsls	r2, r3, #2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4288      	cmp	r0, r1
 8006dd2:	940a      	str	r4, [sp, #40]	@ 0x28
 8006dd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006dda:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8006ddc:	910e      	str	r1, [sp, #56]	@ 0x38
 8006dde:	bf28      	it	cs
 8006de0:	460c      	movcs	r4, r1
 8006de2:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8006de6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8006dea:	9308      	str	r3, [sp, #32]
 8006dec:	9307      	str	r3, [sp, #28]
 8006dee:	2300      	movs	r3, #0
 8006df0:	940c      	str	r4, [sp, #48]	@ 0x30
 8006df2:	9104      	str	r1, [sp, #16]
 8006df4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006df6:	9303      	str	r3, [sp, #12]
 8006df8:	9b08      	ldr	r3, [sp, #32]
 8006dfa:	9a05      	ldr	r2, [sp, #20]
 8006dfc:	f8d3 9000 	ldr.w	r9, [r3]
 8006e00:	9b07      	ldr	r3, [sp, #28]
 8006e02:	9f03      	ldr	r7, [sp, #12]
 8006e04:	f8d3 8000 	ldr.w	r8, [r3]
 8006e08:	9b06      	ldr	r3, [sp, #24]
 8006e0a:	f8d3 e000 	ldr.w	lr, [r3]
 8006e0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e10:	4615      	mov	r5, r2
 8006e12:	1898      	adds	r0, r3, r2
 8006e14:	9a04      	ldr	r2, [sp, #16]
 8006e16:	4614      	mov	r4, r2
 8006e18:	1899      	adds	r1, r3, r2
 8006e1a:	682a      	ldr	r2, [r5, #0]
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	f8d0 b000 	ldr.w	fp, [r0]
 8006e22:	fa92 fc13 	qadd16	ip, r2, r3
 8006e26:	fad2 f213 	qsub16	r2, r2, r3
 8006e2a:	680b      	ldr	r3, [r1, #0]
 8006e2c:	fa9b f313 	qadd16	r3, fp, r3
 8006e30:	fa9c fb23 	shadd16	fp, ip, r3
 8006e34:	fadc f323 	shsub16	r3, ip, r3
 8006e38:	f04f 0c00 	mov.w	ip, #0
 8006e3c:	fa9b fb2c 	shadd16	fp, fp, ip
 8006e40:	f8c5 b000 	str.w	fp, [r5]
 8006e44:	4435      	add	r5, r6
 8006e46:	fb28 fb03 	smuad	fp, r8, r3
 8006e4a:	fb48 f313 	smusdx	r3, r8, r3
 8006e4e:	ea03 030a 	and.w	r3, r3, sl
 8006e52:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8006e56:	f8d0 b000 	ldr.w	fp, [r0]
 8006e5a:	6003      	str	r3, [r0, #0]
 8006e5c:	f8d1 c000 	ldr.w	ip, [r1]
 8006e60:	fadb fc1c 	qsub16	ip, fp, ip
 8006e64:	4430      	add	r0, r6
 8006e66:	faa2 f32c 	shasx	r3, r2, ip
 8006e6a:	fae2 f22c 	shsax	r2, r2, ip
 8006e6e:	fb29 fc02 	smuad	ip, r9, r2
 8006e72:	fb49 f212 	smusdx	r2, r9, r2
 8006e76:	ea02 020a 	and.w	r2, r2, sl
 8006e7a:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8006e7e:	6022      	str	r2, [r4, #0]
 8006e80:	4434      	add	r4, r6
 8006e82:	fb2e f203 	smuad	r2, lr, r3
 8006e86:	fb4e f313 	smusdx	r3, lr, r3
 8006e8a:	ea03 030a 	and.w	r3, r3, sl
 8006e8e:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8006e92:	9a02      	ldr	r2, [sp, #8]
 8006e94:	600b      	str	r3, [r1, #0]
 8006e96:	9b01      	ldr	r3, [sp, #4]
 8006e98:	4417      	add	r7, r2
 8006e9a:	42bb      	cmp	r3, r7
 8006e9c:	4431      	add	r1, r6
 8006e9e:	d8bc      	bhi.n	8006e1a <arm_radix4_butterfly_q15+0x166>
 8006ea0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	9208      	str	r2, [sp, #32]
 8006ea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006eaa:	9a07      	ldr	r2, [sp, #28]
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	440a      	add	r2, r1
 8006eb0:	9207      	str	r2, [sp, #28]
 8006eb2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006eb4:	9a06      	ldr	r2, [sp, #24]
 8006eb6:	440a      	add	r2, r1
 8006eb8:	9206      	str	r2, [sp, #24]
 8006eba:	9a05      	ldr	r2, [sp, #20]
 8006ebc:	3204      	adds	r2, #4
 8006ebe:	9205      	str	r2, [sp, #20]
 8006ec0:	9a04      	ldr	r2, [sp, #16]
 8006ec2:	3204      	adds	r2, #4
 8006ec4:	9204      	str	r2, [sp, #16]
 8006ec6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ec8:	3301      	adds	r3, #1
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	9303      	str	r3, [sp, #12]
 8006ece:	d393      	bcc.n	8006df8 <arm_radix4_butterfly_q15+0x144>
 8006ed0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed4:	2a04      	cmp	r2, #4
 8006ed6:	f63f af6e 	bhi.w	8006db6 <arm_radix4_butterfly_q15+0x102>
 8006eda:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ede:	689d      	ldr	r5, [r3, #8]
 8006ee0:	68de      	ldr	r6, [r3, #12]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	6859      	ldr	r1, [r3, #4]
 8006ee6:	fa92 f015 	qadd16	r0, r2, r5
 8006eea:	3c01      	subs	r4, #1
 8006eec:	fad2 f215 	qsub16	r2, r2, r5
 8006ef0:	f103 0310 	add.w	r3, r3, #16
 8006ef4:	fa91 f516 	qadd16	r5, r1, r6
 8006ef8:	fad1 f116 	qsub16	r1, r1, r6
 8006efc:	fa90 f625 	shadd16	r6, r0, r5
 8006f00:	fad0 f025 	shsub16	r0, r0, r5
 8006f04:	f843 6c10 	str.w	r6, [r3, #-16]
 8006f08:	f843 0c0c 	str.w	r0, [r3, #-12]
 8006f0c:	fae2 f021 	shsax	r0, r2, r1
 8006f10:	faa2 f221 	shasx	r2, r2, r1
 8006f14:	f843 0c08 	str.w	r0, [r3, #-8]
 8006f18:	f843 2c04 	str.w	r2, [r3, #-4]
 8006f1c:	d1df      	bne.n	8006ede <arm_radix4_butterfly_q15+0x22a>
 8006f1e:	b013      	add	sp, #76	@ 0x4c
 8006f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f24:	2400      	movs	r4, #0
 8006f26:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8007004 <arm_radix4_butterfly_q15+0x350>
 8006f2a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006f2c:	4623      	mov	r3, r4
 8006f2e:	4680      	mov	r8, r0
 8006f30:	4691      	mov	r9, r2
 8006f32:	f8d8 0000 	ldr.w	r0, [r8]
 8006f36:	f8dc 2000 	ldr.w	r2, [ip]
 8006f3a:	f8da 1000 	ldr.w	r1, [sl]
 8006f3e:	fa90 f023 	shadd16	r0, r0, r3
 8006f42:	fa91 f123 	shadd16	r1, r1, r3
 8006f46:	fa90 f023 	shadd16	r0, r0, r3
 8006f4a:	fa91 fb23 	shadd16	fp, r1, r3
 8006f4e:	fa92 f223 	shadd16	r2, r2, r3
 8006f52:	6829      	ldr	r1, [r5, #0]
 8006f54:	fa92 f223 	shadd16	r2, r2, r3
 8006f58:	fa91 f123 	shadd16	r1, r1, r3
 8006f5c:	fa90 f612 	qadd16	r6, r0, r2
 8006f60:	fa91 f123 	shadd16	r1, r1, r3
 8006f64:	fa9b f111 	qadd16	r1, fp, r1
 8006f68:	fa96 fb21 	shadd16	fp, r6, r1
 8006f6c:	f848 bb04 	str.w	fp, [r8], #4
 8006f70:	fad6 f611 	qsub16	r6, r6, r1
 8006f74:	fad0 f212 	qsub16	r2, r0, r2
 8006f78:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8006f7c:	fb21 f006 	smuad	r0, r1, r6
 8006f80:	fb41 f116 	smusdx	r1, r1, r6
 8006f84:	ea01 010e 	and.w	r1, r1, lr
 8006f88:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8006f8c:	f8da 0000 	ldr.w	r0, [sl]
 8006f90:	f84a 1b04 	str.w	r1, [sl], #4
 8006f94:	fa90 f023 	shadd16	r0, r0, r3
 8006f98:	682e      	ldr	r6, [r5, #0]
 8006f9a:	fa90 f023 	shadd16	r0, r0, r3
 8006f9e:	fa96 f623 	shadd16	r6, r6, r3
 8006fa2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8006fa6:	fa96 f623 	shadd16	r6, r6, r3
 8006faa:	fad0 f016 	qsub16	r0, r0, r6
 8006fae:	faa2 f610 	qasx	r6, r2, r0
 8006fb2:	fae2 f210 	qsax	r2, r2, r0
 8006fb6:	fb21 fb02 	smuad	fp, r1, r2
 8006fba:	fb41 f212 	smusdx	r2, r1, r2
 8006fbe:	ea02 020e 	and.w	r2, r2, lr
 8006fc2:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8006fc6:	f84c 2b04 	str.w	r2, [ip], #4
 8006fca:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006fce:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006fd2:	fb22 f106 	smuad	r1, r2, r6
 8006fd6:	fb42 f216 	smusdx	r2, r2, r6
 8006fda:	ea02 020e 	and.w	r2, r2, lr
 8006fde:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8006fe2:	f845 2b04 	str.w	r2, [r5], #4
 8006fe6:	9a03      	ldr	r2, [sp, #12]
 8006fe8:	f1b9 0901 	subs.w	r9, r9, #1
 8006fec:	4414      	add	r4, r2
 8006fee:	d1a0      	bne.n	8006f32 <arm_radix4_butterfly_q15+0x27e>
 8006ff0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	2a04      	cmp	r2, #4
 8006ff6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006ffa:	f63f aed9 	bhi.w	8006db0 <arm_radix4_butterfly_q15+0xfc>
 8006ffe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007000:	4614      	mov	r4, r2
 8007002:	e76c      	b.n	8006ede <arm_radix4_butterfly_q15+0x22a>
 8007004:	ffff0000 	.word	0xffff0000

08007008 <arm_radix4_butterfly_inverse_q15>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	b093      	sub	sp, #76	@ 0x4c
 800700e:	f021 0a03 	bic.w	sl, r1, #3
 8007012:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8007016:	9210      	str	r2, [sp, #64]	@ 0x40
 8007018:	2b01      	cmp	r3, #1
 800701a:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800701e:	eb0c 050a 	add.w	r5, ip, sl
 8007022:	9101      	str	r1, [sp, #4]
 8007024:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007026:	9303      	str	r3, [sp, #12]
 8007028:	4482      	add	sl, r0
 800702a:	9211      	str	r2, [sp, #68]	@ 0x44
 800702c:	f040 8124 	bne.w	8007278 <arm_radix4_butterfly_inverse_q15+0x270>
 8007030:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007032:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8007358 <arm_radix4_butterfly_inverse_q15+0x350>
 8007036:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8007038:	f8cd a008 	str.w	sl, [sp, #8]
 800703c:	4693      	mov	fp, r2
 800703e:	4690      	mov	r8, r2
 8007040:	4657      	mov	r7, sl
 8007042:	2300      	movs	r3, #0
 8007044:	4691      	mov	r9, r2
 8007046:	6830      	ldr	r0, [r6, #0]
 8007048:	f8dc 2000 	ldr.w	r2, [ip]
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	fa90 f023 	shadd16	r0, r0, r3
 8007052:	fa91 f123 	shadd16	r1, r1, r3
 8007056:	fa90 f023 	shadd16	r0, r0, r3
 800705a:	fa91 fa23 	shadd16	sl, r1, r3
 800705e:	fa92 f223 	shadd16	r2, r2, r3
 8007062:	6829      	ldr	r1, [r5, #0]
 8007064:	fa92 f223 	shadd16	r2, r2, r3
 8007068:	fa91 f123 	shadd16	r1, r1, r3
 800706c:	fa90 f412 	qadd16	r4, r0, r2
 8007070:	fa91 f123 	shadd16	r1, r1, r3
 8007074:	fa9a f111 	qadd16	r1, sl, r1
 8007078:	fa94 fa21 	shadd16	sl, r4, r1
 800707c:	f846 ab04 	str.w	sl, [r6], #4
 8007080:	fad4 f411 	qsub16	r4, r4, r1
 8007084:	fad0 f212 	qsub16	r2, r0, r2
 8007088:	f85b 1b08 	ldr.w	r1, [fp], #8
 800708c:	fb41 f004 	smusd	r0, r1, r4
 8007090:	fb21 f114 	smuadx	r1, r1, r4
 8007094:	ea01 010e 	and.w	r1, r1, lr
 8007098:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800709c:	6838      	ldr	r0, [r7, #0]
 800709e:	f847 1b04 	str.w	r1, [r7], #4
 80070a2:	fa90 f023 	shadd16	r0, r0, r3
 80070a6:	682c      	ldr	r4, [r5, #0]
 80070a8:	fa90 f023 	shadd16	r0, r0, r3
 80070ac:	fa94 f423 	shadd16	r4, r4, r3
 80070b0:	f859 1b04 	ldr.w	r1, [r9], #4
 80070b4:	fa94 f423 	shadd16	r4, r4, r3
 80070b8:	fad0 f014 	qsub16	r0, r0, r4
 80070bc:	fae2 f410 	qsax	r4, r2, r0
 80070c0:	faa2 f210 	qasx	r2, r2, r0
 80070c4:	fb41 fa02 	smusd	sl, r1, r2
 80070c8:	fb21 f212 	smuadx	r2, r1, r2
 80070cc:	ea02 020e 	and.w	r2, r2, lr
 80070d0:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 80070d4:	f84c 2b04 	str.w	r2, [ip], #4
 80070d8:	f858 2b0c 	ldr.w	r2, [r8], #12
 80070dc:	fb42 f104 	smusd	r1, r2, r4
 80070e0:	fb22 f214 	smuadx	r2, r2, r4
 80070e4:	ea02 020e 	and.w	r2, r2, lr
 80070e8:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 80070ec:	f845 2b04 	str.w	r2, [r5], #4
 80070f0:	9a02      	ldr	r2, [sp, #8]
 80070f2:	42b2      	cmp	r2, r6
 80070f4:	d1a7      	bne.n	8007046 <arm_radix4_butterfly_inverse_q15+0x3e>
 80070f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	2a04      	cmp	r2, #4
 80070fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007100:	f240 8127 	bls.w	8007352 <arm_radix4_butterfly_inverse_q15+0x34a>
 8007104:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8007358 <arm_radix4_butterfly_inverse_q15+0x350>
 8007108:	920e      	str	r2, [sp, #56]	@ 0x38
 800710a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800710c:	9102      	str	r1, [sp, #8]
 800710e:	4608      	mov	r0, r1
 8007110:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007114:	0889      	lsrs	r1, r1, #2
 8007116:	0092      	lsls	r2, r2, #2
 8007118:	0086      	lsls	r6, r0, #2
 800711a:	9801      	ldr	r0, [sp, #4]
 800711c:	920d      	str	r2, [sp, #52]	@ 0x34
 800711e:	008c      	lsls	r4, r1, #2
 8007120:	009a      	lsls	r2, r3, #2
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	4288      	cmp	r0, r1
 8007126:	940a      	str	r4, [sp, #40]	@ 0x28
 8007128:	930b      	str	r3, [sp, #44]	@ 0x2c
 800712a:	4604      	mov	r4, r0
 800712c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800712e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007130:	910e      	str	r1, [sp, #56]	@ 0x38
 8007132:	bf28      	it	cs
 8007134:	460c      	movcs	r4, r1
 8007136:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800713a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800713e:	9308      	str	r3, [sp, #32]
 8007140:	9307      	str	r3, [sp, #28]
 8007142:	2300      	movs	r3, #0
 8007144:	940c      	str	r4, [sp, #48]	@ 0x30
 8007146:	9104      	str	r1, [sp, #16]
 8007148:	9209      	str	r2, [sp, #36]	@ 0x24
 800714a:	9303      	str	r3, [sp, #12]
 800714c:	9b08      	ldr	r3, [sp, #32]
 800714e:	9a05      	ldr	r2, [sp, #20]
 8007150:	f8d3 9000 	ldr.w	r9, [r3]
 8007154:	9b07      	ldr	r3, [sp, #28]
 8007156:	9f03      	ldr	r7, [sp, #12]
 8007158:	f8d3 8000 	ldr.w	r8, [r3]
 800715c:	9b06      	ldr	r3, [sp, #24]
 800715e:	f8d3 e000 	ldr.w	lr, [r3]
 8007162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007164:	4615      	mov	r5, r2
 8007166:	1898      	adds	r0, r3, r2
 8007168:	9a04      	ldr	r2, [sp, #16]
 800716a:	4614      	mov	r4, r2
 800716c:	1899      	adds	r1, r3, r2
 800716e:	682a      	ldr	r2, [r5, #0]
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	f8d0 b000 	ldr.w	fp, [r0]
 8007176:	fa92 fc13 	qadd16	ip, r2, r3
 800717a:	fad2 f213 	qsub16	r2, r2, r3
 800717e:	680b      	ldr	r3, [r1, #0]
 8007180:	fa9b f313 	qadd16	r3, fp, r3
 8007184:	fa9c fb23 	shadd16	fp, ip, r3
 8007188:	fadc f323 	shsub16	r3, ip, r3
 800718c:	f04f 0c00 	mov.w	ip, #0
 8007190:	fa9b fb2c 	shadd16	fp, fp, ip
 8007194:	f8c5 b000 	str.w	fp, [r5]
 8007198:	4435      	add	r5, r6
 800719a:	fb48 fb03 	smusd	fp, r8, r3
 800719e:	fb28 f313 	smuadx	r3, r8, r3
 80071a2:	ea03 030a 	and.w	r3, r3, sl
 80071a6:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80071aa:	f8d0 b000 	ldr.w	fp, [r0]
 80071ae:	6003      	str	r3, [r0, #0]
 80071b0:	f8d1 c000 	ldr.w	ip, [r1]
 80071b4:	fadb fc1c 	qsub16	ip, fp, ip
 80071b8:	4430      	add	r0, r6
 80071ba:	fae2 f32c 	shsax	r3, r2, ip
 80071be:	faa2 f22c 	shasx	r2, r2, ip
 80071c2:	fb49 fc02 	smusd	ip, r9, r2
 80071c6:	fb29 f212 	smuadx	r2, r9, r2
 80071ca:	ea02 020a 	and.w	r2, r2, sl
 80071ce:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 80071d2:	6022      	str	r2, [r4, #0]
 80071d4:	4434      	add	r4, r6
 80071d6:	fb4e f203 	smusd	r2, lr, r3
 80071da:	fb2e f313 	smuadx	r3, lr, r3
 80071de:	ea03 030a 	and.w	r3, r3, sl
 80071e2:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 80071e6:	9a02      	ldr	r2, [sp, #8]
 80071e8:	600b      	str	r3, [r1, #0]
 80071ea:	9b01      	ldr	r3, [sp, #4]
 80071ec:	4417      	add	r7, r2
 80071ee:	42bb      	cmp	r3, r7
 80071f0:	4431      	add	r1, r6
 80071f2:	d8bc      	bhi.n	800716e <arm_radix4_butterfly_inverse_q15+0x166>
 80071f4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80071f8:	440a      	add	r2, r1
 80071fa:	9208      	str	r2, [sp, #32]
 80071fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071fe:	9a07      	ldr	r2, [sp, #28]
 8007200:	9b03      	ldr	r3, [sp, #12]
 8007202:	440a      	add	r2, r1
 8007204:	9207      	str	r2, [sp, #28]
 8007206:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007208:	9a06      	ldr	r2, [sp, #24]
 800720a:	440a      	add	r2, r1
 800720c:	9206      	str	r2, [sp, #24]
 800720e:	9a05      	ldr	r2, [sp, #20]
 8007210:	3204      	adds	r2, #4
 8007212:	9205      	str	r2, [sp, #20]
 8007214:	9a04      	ldr	r2, [sp, #16]
 8007216:	3204      	adds	r2, #4
 8007218:	9204      	str	r2, [sp, #16]
 800721a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800721c:	3301      	adds	r3, #1
 800721e:	4293      	cmp	r3, r2
 8007220:	9303      	str	r3, [sp, #12]
 8007222:	d393      	bcc.n	800714c <arm_radix4_butterfly_inverse_q15+0x144>
 8007224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007228:	2a04      	cmp	r2, #4
 800722a:	f63f af6e 	bhi.w	800710a <arm_radix4_butterfly_inverse_q15+0x102>
 800722e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007232:	689d      	ldr	r5, [r3, #8]
 8007234:	68de      	ldr	r6, [r3, #12]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	6859      	ldr	r1, [r3, #4]
 800723a:	fa92 f015 	qadd16	r0, r2, r5
 800723e:	3c01      	subs	r4, #1
 8007240:	fad2 f215 	qsub16	r2, r2, r5
 8007244:	f103 0310 	add.w	r3, r3, #16
 8007248:	fa91 f516 	qadd16	r5, r1, r6
 800724c:	fad1 f116 	qsub16	r1, r1, r6
 8007250:	fa90 f625 	shadd16	r6, r0, r5
 8007254:	fad0 f025 	shsub16	r0, r0, r5
 8007258:	f843 6c10 	str.w	r6, [r3, #-16]
 800725c:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007260:	faa2 f021 	shasx	r0, r2, r1
 8007264:	fae2 f221 	shsax	r2, r2, r1
 8007268:	f843 0c08 	str.w	r0, [r3, #-8]
 800726c:	f843 2c04 	str.w	r2, [r3, #-4]
 8007270:	d1df      	bne.n	8007232 <arm_radix4_butterfly_inverse_q15+0x22a>
 8007272:	b013      	add	sp, #76	@ 0x4c
 8007274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007278:	2400      	movs	r4, #0
 800727a:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8007358 <arm_radix4_butterfly_inverse_q15+0x350>
 800727e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007280:	4623      	mov	r3, r4
 8007282:	4680      	mov	r8, r0
 8007284:	4691      	mov	r9, r2
 8007286:	f8d8 0000 	ldr.w	r0, [r8]
 800728a:	f8dc 2000 	ldr.w	r2, [ip]
 800728e:	f8da 1000 	ldr.w	r1, [sl]
 8007292:	fa90 f023 	shadd16	r0, r0, r3
 8007296:	fa91 f123 	shadd16	r1, r1, r3
 800729a:	fa90 f023 	shadd16	r0, r0, r3
 800729e:	fa91 fb23 	shadd16	fp, r1, r3
 80072a2:	fa92 f223 	shadd16	r2, r2, r3
 80072a6:	6829      	ldr	r1, [r5, #0]
 80072a8:	fa92 f223 	shadd16	r2, r2, r3
 80072ac:	fa91 f123 	shadd16	r1, r1, r3
 80072b0:	fa90 f612 	qadd16	r6, r0, r2
 80072b4:	fa91 f123 	shadd16	r1, r1, r3
 80072b8:	fa9b f111 	qadd16	r1, fp, r1
 80072bc:	fa96 fb21 	shadd16	fp, r6, r1
 80072c0:	f848 bb04 	str.w	fp, [r8], #4
 80072c4:	fad6 f611 	qsub16	r6, r6, r1
 80072c8:	fad0 f212 	qsub16	r2, r0, r2
 80072cc:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 80072d0:	fb41 f006 	smusd	r0, r1, r6
 80072d4:	fb21 f116 	smuadx	r1, r1, r6
 80072d8:	ea01 010e 	and.w	r1, r1, lr
 80072dc:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 80072e0:	f8da 0000 	ldr.w	r0, [sl]
 80072e4:	f84a 1b04 	str.w	r1, [sl], #4
 80072e8:	fa90 f023 	shadd16	r0, r0, r3
 80072ec:	682e      	ldr	r6, [r5, #0]
 80072ee:	fa90 f023 	shadd16	r0, r0, r3
 80072f2:	fa96 f623 	shadd16	r6, r6, r3
 80072f6:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80072fa:	fa96 f623 	shadd16	r6, r6, r3
 80072fe:	fad0 f016 	qsub16	r0, r0, r6
 8007302:	fae2 f610 	qsax	r6, r2, r0
 8007306:	faa2 f210 	qasx	r2, r2, r0
 800730a:	fb41 fb02 	smusd	fp, r1, r2
 800730e:	fb21 f212 	smuadx	r2, r1, r2
 8007312:	ea02 020e 	and.w	r2, r2, lr
 8007316:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800731a:	f84c 2b04 	str.w	r2, [ip], #4
 800731e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007322:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8007326:	fb42 f106 	smusd	r1, r2, r6
 800732a:	fb22 f216 	smuadx	r2, r2, r6
 800732e:	ea02 020e 	and.w	r2, r2, lr
 8007332:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007336:	f845 2b04 	str.w	r2, [r5], #4
 800733a:	9a03      	ldr	r2, [sp, #12]
 800733c:	f1b9 0901 	subs.w	r9, r9, #1
 8007340:	4414      	add	r4, r2
 8007342:	d1a0      	bne.n	8007286 <arm_radix4_butterfly_inverse_q15+0x27e>
 8007344:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	2a04      	cmp	r2, #4
 800734a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800734e:	f63f aed9 	bhi.w	8007104 <arm_radix4_butterfly_inverse_q15+0xfc>
 8007352:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007354:	4614      	mov	r4, r2
 8007356:	e76c      	b.n	8007232 <arm_radix4_butterfly_inverse_q15+0x22a>
 8007358:	ffff0000 	.word	0xffff0000

0800735c <arm_bitreversal_16>:
 800735c:	b1f1      	cbz	r1, 800739c <arm_bitreversal_16+0x40>
 800735e:	b4f0      	push	{r4, r5, r6, r7}
 8007360:	2400      	movs	r4, #0
 8007362:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8007366:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800736a:	886d      	ldrh	r5, [r5, #2]
 800736c:	08ad      	lsrs	r5, r5, #2
 800736e:	089b      	lsrs	r3, r3, #2
 8007370:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 8007374:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 8007378:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 800737c:	006e      	lsls	r6, r5, #1
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 8007384:	3302      	adds	r3, #2
 8007386:	1cb5      	adds	r5, r6, #2
 8007388:	3402      	adds	r4, #2
 800738a:	b2a4      	uxth	r4, r4
 800738c:	5ac6      	ldrh	r6, [r0, r3]
 800738e:	5b47      	ldrh	r7, [r0, r5]
 8007390:	52c7      	strh	r7, [r0, r3]
 8007392:	42a1      	cmp	r1, r4
 8007394:	5346      	strh	r6, [r0, r5]
 8007396:	d8e4      	bhi.n	8007362 <arm_bitreversal_16+0x6>
 8007398:	bcf0      	pop	{r4, r5, r6, r7}
 800739a:	4770      	bx	lr
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop

080073a0 <malloc>:
 80073a0:	4b02      	ldr	r3, [pc, #8]	@ (80073ac <malloc+0xc>)
 80073a2:	4601      	mov	r1, r0
 80073a4:	6818      	ldr	r0, [r3, #0]
 80073a6:	f000 b82d 	b.w	8007404 <_malloc_r>
 80073aa:	bf00      	nop
 80073ac:	20000418 	.word	0x20000418

080073b0 <free>:
 80073b0:	4b02      	ldr	r3, [pc, #8]	@ (80073bc <free+0xc>)
 80073b2:	4601      	mov	r1, r0
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	f000 bc09 	b.w	8007bcc <_free_r>
 80073ba:	bf00      	nop
 80073bc:	20000418 	.word	0x20000418

080073c0 <sbrk_aligned>:
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	4e0f      	ldr	r6, [pc, #60]	@ (8007400 <sbrk_aligned+0x40>)
 80073c4:	460c      	mov	r4, r1
 80073c6:	6831      	ldr	r1, [r6, #0]
 80073c8:	4605      	mov	r5, r0
 80073ca:	b911      	cbnz	r1, 80073d2 <sbrk_aligned+0x12>
 80073cc:	f000 fba0 	bl	8007b10 <_sbrk_r>
 80073d0:	6030      	str	r0, [r6, #0]
 80073d2:	4621      	mov	r1, r4
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 fb9b 	bl	8007b10 <_sbrk_r>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	d103      	bne.n	80073e6 <sbrk_aligned+0x26>
 80073de:	f04f 34ff 	mov.w	r4, #4294967295
 80073e2:	4620      	mov	r0, r4
 80073e4:	bd70      	pop	{r4, r5, r6, pc}
 80073e6:	1cc4      	adds	r4, r0, #3
 80073e8:	f024 0403 	bic.w	r4, r4, #3
 80073ec:	42a0      	cmp	r0, r4
 80073ee:	d0f8      	beq.n	80073e2 <sbrk_aligned+0x22>
 80073f0:	1a21      	subs	r1, r4, r0
 80073f2:	4628      	mov	r0, r5
 80073f4:	f000 fb8c 	bl	8007b10 <_sbrk_r>
 80073f8:	3001      	adds	r0, #1
 80073fa:	d1f2      	bne.n	80073e2 <sbrk_aligned+0x22>
 80073fc:	e7ef      	b.n	80073de <sbrk_aligned+0x1e>
 80073fe:	bf00      	nop
 8007400:	20002238 	.word	0x20002238

08007404 <_malloc_r>:
 8007404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007408:	1ccd      	adds	r5, r1, #3
 800740a:	f025 0503 	bic.w	r5, r5, #3
 800740e:	3508      	adds	r5, #8
 8007410:	2d0c      	cmp	r5, #12
 8007412:	bf38      	it	cc
 8007414:	250c      	movcc	r5, #12
 8007416:	2d00      	cmp	r5, #0
 8007418:	4606      	mov	r6, r0
 800741a:	db01      	blt.n	8007420 <_malloc_r+0x1c>
 800741c:	42a9      	cmp	r1, r5
 800741e:	d904      	bls.n	800742a <_malloc_r+0x26>
 8007420:	230c      	movs	r3, #12
 8007422:	6033      	str	r3, [r6, #0]
 8007424:	2000      	movs	r0, #0
 8007426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800742a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007500 <_malloc_r+0xfc>
 800742e:	f000 f869 	bl	8007504 <__malloc_lock>
 8007432:	f8d8 3000 	ldr.w	r3, [r8]
 8007436:	461c      	mov	r4, r3
 8007438:	bb44      	cbnz	r4, 800748c <_malloc_r+0x88>
 800743a:	4629      	mov	r1, r5
 800743c:	4630      	mov	r0, r6
 800743e:	f7ff ffbf 	bl	80073c0 <sbrk_aligned>
 8007442:	1c43      	adds	r3, r0, #1
 8007444:	4604      	mov	r4, r0
 8007446:	d158      	bne.n	80074fa <_malloc_r+0xf6>
 8007448:	f8d8 4000 	ldr.w	r4, [r8]
 800744c:	4627      	mov	r7, r4
 800744e:	2f00      	cmp	r7, #0
 8007450:	d143      	bne.n	80074da <_malloc_r+0xd6>
 8007452:	2c00      	cmp	r4, #0
 8007454:	d04b      	beq.n	80074ee <_malloc_r+0xea>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	4639      	mov	r1, r7
 800745a:	4630      	mov	r0, r6
 800745c:	eb04 0903 	add.w	r9, r4, r3
 8007460:	f000 fb56 	bl	8007b10 <_sbrk_r>
 8007464:	4581      	cmp	r9, r0
 8007466:	d142      	bne.n	80074ee <_malloc_r+0xea>
 8007468:	6821      	ldr	r1, [r4, #0]
 800746a:	1a6d      	subs	r5, r5, r1
 800746c:	4629      	mov	r1, r5
 800746e:	4630      	mov	r0, r6
 8007470:	f7ff ffa6 	bl	80073c0 <sbrk_aligned>
 8007474:	3001      	adds	r0, #1
 8007476:	d03a      	beq.n	80074ee <_malloc_r+0xea>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	442b      	add	r3, r5
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	f8d8 3000 	ldr.w	r3, [r8]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	bb62      	cbnz	r2, 80074e0 <_malloc_r+0xdc>
 8007486:	f8c8 7000 	str.w	r7, [r8]
 800748a:	e00f      	b.n	80074ac <_malloc_r+0xa8>
 800748c:	6822      	ldr	r2, [r4, #0]
 800748e:	1b52      	subs	r2, r2, r5
 8007490:	d420      	bmi.n	80074d4 <_malloc_r+0xd0>
 8007492:	2a0b      	cmp	r2, #11
 8007494:	d917      	bls.n	80074c6 <_malloc_r+0xc2>
 8007496:	1961      	adds	r1, r4, r5
 8007498:	42a3      	cmp	r3, r4
 800749a:	6025      	str	r5, [r4, #0]
 800749c:	bf18      	it	ne
 800749e:	6059      	strne	r1, [r3, #4]
 80074a0:	6863      	ldr	r3, [r4, #4]
 80074a2:	bf08      	it	eq
 80074a4:	f8c8 1000 	streq.w	r1, [r8]
 80074a8:	5162      	str	r2, [r4, r5]
 80074aa:	604b      	str	r3, [r1, #4]
 80074ac:	4630      	mov	r0, r6
 80074ae:	f000 f82f 	bl	8007510 <__malloc_unlock>
 80074b2:	f104 000b 	add.w	r0, r4, #11
 80074b6:	1d23      	adds	r3, r4, #4
 80074b8:	f020 0007 	bic.w	r0, r0, #7
 80074bc:	1ac2      	subs	r2, r0, r3
 80074be:	bf1c      	itt	ne
 80074c0:	1a1b      	subne	r3, r3, r0
 80074c2:	50a3      	strne	r3, [r4, r2]
 80074c4:	e7af      	b.n	8007426 <_malloc_r+0x22>
 80074c6:	6862      	ldr	r2, [r4, #4]
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	bf0c      	ite	eq
 80074cc:	f8c8 2000 	streq.w	r2, [r8]
 80074d0:	605a      	strne	r2, [r3, #4]
 80074d2:	e7eb      	b.n	80074ac <_malloc_r+0xa8>
 80074d4:	4623      	mov	r3, r4
 80074d6:	6864      	ldr	r4, [r4, #4]
 80074d8:	e7ae      	b.n	8007438 <_malloc_r+0x34>
 80074da:	463c      	mov	r4, r7
 80074dc:	687f      	ldr	r7, [r7, #4]
 80074de:	e7b6      	b.n	800744e <_malloc_r+0x4a>
 80074e0:	461a      	mov	r2, r3
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	d1fb      	bne.n	80074e0 <_malloc_r+0xdc>
 80074e8:	2300      	movs	r3, #0
 80074ea:	6053      	str	r3, [r2, #4]
 80074ec:	e7de      	b.n	80074ac <_malloc_r+0xa8>
 80074ee:	230c      	movs	r3, #12
 80074f0:	6033      	str	r3, [r6, #0]
 80074f2:	4630      	mov	r0, r6
 80074f4:	f000 f80c 	bl	8007510 <__malloc_unlock>
 80074f8:	e794      	b.n	8007424 <_malloc_r+0x20>
 80074fa:	6005      	str	r5, [r0, #0]
 80074fc:	e7d6      	b.n	80074ac <_malloc_r+0xa8>
 80074fe:	bf00      	nop
 8007500:	2000223c 	.word	0x2000223c

08007504 <__malloc_lock>:
 8007504:	4801      	ldr	r0, [pc, #4]	@ (800750c <__malloc_lock+0x8>)
 8007506:	f000 bb50 	b.w	8007baa <__retarget_lock_acquire_recursive>
 800750a:	bf00      	nop
 800750c:	20002380 	.word	0x20002380

08007510 <__malloc_unlock>:
 8007510:	4801      	ldr	r0, [pc, #4]	@ (8007518 <__malloc_unlock+0x8>)
 8007512:	f000 bb4b 	b.w	8007bac <__retarget_lock_release_recursive>
 8007516:	bf00      	nop
 8007518:	20002380 	.word	0x20002380

0800751c <std>:
 800751c:	2300      	movs	r3, #0
 800751e:	b510      	push	{r4, lr}
 8007520:	4604      	mov	r4, r0
 8007522:	e9c0 3300 	strd	r3, r3, [r0]
 8007526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800752a:	6083      	str	r3, [r0, #8]
 800752c:	8181      	strh	r1, [r0, #12]
 800752e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007530:	81c2      	strh	r2, [r0, #14]
 8007532:	6183      	str	r3, [r0, #24]
 8007534:	4619      	mov	r1, r3
 8007536:	2208      	movs	r2, #8
 8007538:	305c      	adds	r0, #92	@ 0x5c
 800753a:	f000 faad 	bl	8007a98 <memset>
 800753e:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <std+0x58>)
 8007540:	6263      	str	r3, [r4, #36]	@ 0x24
 8007542:	4b0d      	ldr	r3, [pc, #52]	@ (8007578 <std+0x5c>)
 8007544:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007546:	4b0d      	ldr	r3, [pc, #52]	@ (800757c <std+0x60>)
 8007548:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800754a:	4b0d      	ldr	r3, [pc, #52]	@ (8007580 <std+0x64>)
 800754c:	6323      	str	r3, [r4, #48]	@ 0x30
 800754e:	4b0d      	ldr	r3, [pc, #52]	@ (8007584 <std+0x68>)
 8007550:	6224      	str	r4, [r4, #32]
 8007552:	429c      	cmp	r4, r3
 8007554:	d006      	beq.n	8007564 <std+0x48>
 8007556:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800755a:	4294      	cmp	r4, r2
 800755c:	d002      	beq.n	8007564 <std+0x48>
 800755e:	33d0      	adds	r3, #208	@ 0xd0
 8007560:	429c      	cmp	r4, r3
 8007562:	d105      	bne.n	8007570 <std+0x54>
 8007564:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756c:	f000 bb1c 	b.w	8007ba8 <__retarget_lock_init_recursive>
 8007570:	bd10      	pop	{r4, pc}
 8007572:	bf00      	nop
 8007574:	080078e9 	.word	0x080078e9
 8007578:	0800790b 	.word	0x0800790b
 800757c:	08007943 	.word	0x08007943
 8007580:	08007967 	.word	0x08007967
 8007584:	20002240 	.word	0x20002240

08007588 <stdio_exit_handler>:
 8007588:	4a02      	ldr	r2, [pc, #8]	@ (8007594 <stdio_exit_handler+0xc>)
 800758a:	4903      	ldr	r1, [pc, #12]	@ (8007598 <stdio_exit_handler+0x10>)
 800758c:	4803      	ldr	r0, [pc, #12]	@ (800759c <stdio_exit_handler+0x14>)
 800758e:	f000 b869 	b.w	8007664 <_fwalk_sglue>
 8007592:	bf00      	nop
 8007594:	2000040c 	.word	0x2000040c
 8007598:	08008309 	.word	0x08008309
 800759c:	2000041c 	.word	0x2000041c

080075a0 <cleanup_stdio>:
 80075a0:	6841      	ldr	r1, [r0, #4]
 80075a2:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <cleanup_stdio+0x34>)
 80075a4:	4299      	cmp	r1, r3
 80075a6:	b510      	push	{r4, lr}
 80075a8:	4604      	mov	r4, r0
 80075aa:	d001      	beq.n	80075b0 <cleanup_stdio+0x10>
 80075ac:	f000 feac 	bl	8008308 <_fflush_r>
 80075b0:	68a1      	ldr	r1, [r4, #8]
 80075b2:	4b09      	ldr	r3, [pc, #36]	@ (80075d8 <cleanup_stdio+0x38>)
 80075b4:	4299      	cmp	r1, r3
 80075b6:	d002      	beq.n	80075be <cleanup_stdio+0x1e>
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 fea5 	bl	8008308 <_fflush_r>
 80075be:	68e1      	ldr	r1, [r4, #12]
 80075c0:	4b06      	ldr	r3, [pc, #24]	@ (80075dc <cleanup_stdio+0x3c>)
 80075c2:	4299      	cmp	r1, r3
 80075c4:	d004      	beq.n	80075d0 <cleanup_stdio+0x30>
 80075c6:	4620      	mov	r0, r4
 80075c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075cc:	f000 be9c 	b.w	8008308 <_fflush_r>
 80075d0:	bd10      	pop	{r4, pc}
 80075d2:	bf00      	nop
 80075d4:	20002240 	.word	0x20002240
 80075d8:	200022a8 	.word	0x200022a8
 80075dc:	20002310 	.word	0x20002310

080075e0 <global_stdio_init.part.0>:
 80075e0:	b510      	push	{r4, lr}
 80075e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007610 <global_stdio_init.part.0+0x30>)
 80075e4:	4c0b      	ldr	r4, [pc, #44]	@ (8007614 <global_stdio_init.part.0+0x34>)
 80075e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007618 <global_stdio_init.part.0+0x38>)
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	4620      	mov	r0, r4
 80075ec:	2200      	movs	r2, #0
 80075ee:	2104      	movs	r1, #4
 80075f0:	f7ff ff94 	bl	800751c <std>
 80075f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075f8:	2201      	movs	r2, #1
 80075fa:	2109      	movs	r1, #9
 80075fc:	f7ff ff8e 	bl	800751c <std>
 8007600:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007604:	2202      	movs	r2, #2
 8007606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800760a:	2112      	movs	r1, #18
 800760c:	f7ff bf86 	b.w	800751c <std>
 8007610:	20002378 	.word	0x20002378
 8007614:	20002240 	.word	0x20002240
 8007618:	08007589 	.word	0x08007589

0800761c <__sfp_lock_acquire>:
 800761c:	4801      	ldr	r0, [pc, #4]	@ (8007624 <__sfp_lock_acquire+0x8>)
 800761e:	f000 bac4 	b.w	8007baa <__retarget_lock_acquire_recursive>
 8007622:	bf00      	nop
 8007624:	20002381 	.word	0x20002381

08007628 <__sfp_lock_release>:
 8007628:	4801      	ldr	r0, [pc, #4]	@ (8007630 <__sfp_lock_release+0x8>)
 800762a:	f000 babf 	b.w	8007bac <__retarget_lock_release_recursive>
 800762e:	bf00      	nop
 8007630:	20002381 	.word	0x20002381

08007634 <__sinit>:
 8007634:	b510      	push	{r4, lr}
 8007636:	4604      	mov	r4, r0
 8007638:	f7ff fff0 	bl	800761c <__sfp_lock_acquire>
 800763c:	6a23      	ldr	r3, [r4, #32]
 800763e:	b11b      	cbz	r3, 8007648 <__sinit+0x14>
 8007640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007644:	f7ff bff0 	b.w	8007628 <__sfp_lock_release>
 8007648:	4b04      	ldr	r3, [pc, #16]	@ (800765c <__sinit+0x28>)
 800764a:	6223      	str	r3, [r4, #32]
 800764c:	4b04      	ldr	r3, [pc, #16]	@ (8007660 <__sinit+0x2c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1f5      	bne.n	8007640 <__sinit+0xc>
 8007654:	f7ff ffc4 	bl	80075e0 <global_stdio_init.part.0>
 8007658:	e7f2      	b.n	8007640 <__sinit+0xc>
 800765a:	bf00      	nop
 800765c:	080075a1 	.word	0x080075a1
 8007660:	20002378 	.word	0x20002378

08007664 <_fwalk_sglue>:
 8007664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007668:	4607      	mov	r7, r0
 800766a:	4688      	mov	r8, r1
 800766c:	4614      	mov	r4, r2
 800766e:	2600      	movs	r6, #0
 8007670:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007674:	f1b9 0901 	subs.w	r9, r9, #1
 8007678:	d505      	bpl.n	8007686 <_fwalk_sglue+0x22>
 800767a:	6824      	ldr	r4, [r4, #0]
 800767c:	2c00      	cmp	r4, #0
 800767e:	d1f7      	bne.n	8007670 <_fwalk_sglue+0xc>
 8007680:	4630      	mov	r0, r6
 8007682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d907      	bls.n	800769c <_fwalk_sglue+0x38>
 800768c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007690:	3301      	adds	r3, #1
 8007692:	d003      	beq.n	800769c <_fwalk_sglue+0x38>
 8007694:	4629      	mov	r1, r5
 8007696:	4638      	mov	r0, r7
 8007698:	47c0      	blx	r8
 800769a:	4306      	orrs	r6, r0
 800769c:	3568      	adds	r5, #104	@ 0x68
 800769e:	e7e9      	b.n	8007674 <_fwalk_sglue+0x10>

080076a0 <iprintf>:
 80076a0:	b40f      	push	{r0, r1, r2, r3}
 80076a2:	b507      	push	{r0, r1, r2, lr}
 80076a4:	4906      	ldr	r1, [pc, #24]	@ (80076c0 <iprintf+0x20>)
 80076a6:	ab04      	add	r3, sp, #16
 80076a8:	6808      	ldr	r0, [r1, #0]
 80076aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ae:	6881      	ldr	r1, [r0, #8]
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	f000 faff 	bl	8007cb4 <_vfiprintf_r>
 80076b6:	b003      	add	sp, #12
 80076b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076bc:	b004      	add	sp, #16
 80076be:	4770      	bx	lr
 80076c0:	20000418 	.word	0x20000418

080076c4 <_puts_r>:
 80076c4:	6a03      	ldr	r3, [r0, #32]
 80076c6:	b570      	push	{r4, r5, r6, lr}
 80076c8:	6884      	ldr	r4, [r0, #8]
 80076ca:	4605      	mov	r5, r0
 80076cc:	460e      	mov	r6, r1
 80076ce:	b90b      	cbnz	r3, 80076d4 <_puts_r+0x10>
 80076d0:	f7ff ffb0 	bl	8007634 <__sinit>
 80076d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076d6:	07db      	lsls	r3, r3, #31
 80076d8:	d405      	bmi.n	80076e6 <_puts_r+0x22>
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	0598      	lsls	r0, r3, #22
 80076de:	d402      	bmi.n	80076e6 <_puts_r+0x22>
 80076e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076e2:	f000 fa62 	bl	8007baa <__retarget_lock_acquire_recursive>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	0719      	lsls	r1, r3, #28
 80076ea:	d502      	bpl.n	80076f2 <_puts_r+0x2e>
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d135      	bne.n	800775e <_puts_r+0x9a>
 80076f2:	4621      	mov	r1, r4
 80076f4:	4628      	mov	r0, r5
 80076f6:	f000 f979 	bl	80079ec <__swsetup_r>
 80076fa:	b380      	cbz	r0, 800775e <_puts_r+0x9a>
 80076fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007700:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007702:	07da      	lsls	r2, r3, #31
 8007704:	d405      	bmi.n	8007712 <_puts_r+0x4e>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	059b      	lsls	r3, r3, #22
 800770a:	d402      	bmi.n	8007712 <_puts_r+0x4e>
 800770c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800770e:	f000 fa4d 	bl	8007bac <__retarget_lock_release_recursive>
 8007712:	4628      	mov	r0, r5
 8007714:	bd70      	pop	{r4, r5, r6, pc}
 8007716:	2b00      	cmp	r3, #0
 8007718:	da04      	bge.n	8007724 <_puts_r+0x60>
 800771a:	69a2      	ldr	r2, [r4, #24]
 800771c:	429a      	cmp	r2, r3
 800771e:	dc17      	bgt.n	8007750 <_puts_r+0x8c>
 8007720:	290a      	cmp	r1, #10
 8007722:	d015      	beq.n	8007750 <_puts_r+0x8c>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	6022      	str	r2, [r4, #0]
 800772a:	7019      	strb	r1, [r3, #0]
 800772c:	68a3      	ldr	r3, [r4, #8]
 800772e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007732:	3b01      	subs	r3, #1
 8007734:	60a3      	str	r3, [r4, #8]
 8007736:	2900      	cmp	r1, #0
 8007738:	d1ed      	bne.n	8007716 <_puts_r+0x52>
 800773a:	2b00      	cmp	r3, #0
 800773c:	da11      	bge.n	8007762 <_puts_r+0x9e>
 800773e:	4622      	mov	r2, r4
 8007740:	210a      	movs	r1, #10
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f913 	bl	800796e <__swbuf_r>
 8007748:	3001      	adds	r0, #1
 800774a:	d0d7      	beq.n	80076fc <_puts_r+0x38>
 800774c:	250a      	movs	r5, #10
 800774e:	e7d7      	b.n	8007700 <_puts_r+0x3c>
 8007750:	4622      	mov	r2, r4
 8007752:	4628      	mov	r0, r5
 8007754:	f000 f90b 	bl	800796e <__swbuf_r>
 8007758:	3001      	adds	r0, #1
 800775a:	d1e7      	bne.n	800772c <_puts_r+0x68>
 800775c:	e7ce      	b.n	80076fc <_puts_r+0x38>
 800775e:	3e01      	subs	r6, #1
 8007760:	e7e4      	b.n	800772c <_puts_r+0x68>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	6022      	str	r2, [r4, #0]
 8007768:	220a      	movs	r2, #10
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	e7ee      	b.n	800774c <_puts_r+0x88>
	...

08007770 <puts>:
 8007770:	4b02      	ldr	r3, [pc, #8]	@ (800777c <puts+0xc>)
 8007772:	4601      	mov	r1, r0
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	f7ff bfa5 	b.w	80076c4 <_puts_r>
 800777a:	bf00      	nop
 800777c:	20000418 	.word	0x20000418

08007780 <setvbuf>:
 8007780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007784:	461d      	mov	r5, r3
 8007786:	4b57      	ldr	r3, [pc, #348]	@ (80078e4 <setvbuf+0x164>)
 8007788:	681f      	ldr	r7, [r3, #0]
 800778a:	4604      	mov	r4, r0
 800778c:	460e      	mov	r6, r1
 800778e:	4690      	mov	r8, r2
 8007790:	b127      	cbz	r7, 800779c <setvbuf+0x1c>
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	b913      	cbnz	r3, 800779c <setvbuf+0x1c>
 8007796:	4638      	mov	r0, r7
 8007798:	f7ff ff4c 	bl	8007634 <__sinit>
 800779c:	f1b8 0f02 	cmp.w	r8, #2
 80077a0:	d006      	beq.n	80077b0 <setvbuf+0x30>
 80077a2:	f1b8 0f01 	cmp.w	r8, #1
 80077a6:	f200 809a 	bhi.w	80078de <setvbuf+0x15e>
 80077aa:	2d00      	cmp	r5, #0
 80077ac:	f2c0 8097 	blt.w	80078de <setvbuf+0x15e>
 80077b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077b2:	07d9      	lsls	r1, r3, #31
 80077b4:	d405      	bmi.n	80077c2 <setvbuf+0x42>
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	059a      	lsls	r2, r3, #22
 80077ba:	d402      	bmi.n	80077c2 <setvbuf+0x42>
 80077bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077be:	f000 f9f4 	bl	8007baa <__retarget_lock_acquire_recursive>
 80077c2:	4621      	mov	r1, r4
 80077c4:	4638      	mov	r0, r7
 80077c6:	f000 fd9f 	bl	8008308 <_fflush_r>
 80077ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077cc:	b141      	cbz	r1, 80077e0 <setvbuf+0x60>
 80077ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077d2:	4299      	cmp	r1, r3
 80077d4:	d002      	beq.n	80077dc <setvbuf+0x5c>
 80077d6:	4638      	mov	r0, r7
 80077d8:	f000 f9f8 	bl	8007bcc <_free_r>
 80077dc:	2300      	movs	r3, #0
 80077de:	6363      	str	r3, [r4, #52]	@ 0x34
 80077e0:	2300      	movs	r3, #0
 80077e2:	61a3      	str	r3, [r4, #24]
 80077e4:	6063      	str	r3, [r4, #4]
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	061b      	lsls	r3, r3, #24
 80077ea:	d503      	bpl.n	80077f4 <setvbuf+0x74>
 80077ec:	6921      	ldr	r1, [r4, #16]
 80077ee:	4638      	mov	r0, r7
 80077f0:	f000 f9ec 	bl	8007bcc <_free_r>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80077fa:	f023 0303 	bic.w	r3, r3, #3
 80077fe:	f1b8 0f02 	cmp.w	r8, #2
 8007802:	81a3      	strh	r3, [r4, #12]
 8007804:	d061      	beq.n	80078ca <setvbuf+0x14a>
 8007806:	ab01      	add	r3, sp, #4
 8007808:	466a      	mov	r2, sp
 800780a:	4621      	mov	r1, r4
 800780c:	4638      	mov	r0, r7
 800780e:	f000 fda3 	bl	8008358 <__swhatbuf_r>
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	4318      	orrs	r0, r3
 8007816:	81a0      	strh	r0, [r4, #12]
 8007818:	bb2d      	cbnz	r5, 8007866 <setvbuf+0xe6>
 800781a:	9d00      	ldr	r5, [sp, #0]
 800781c:	4628      	mov	r0, r5
 800781e:	f7ff fdbf 	bl	80073a0 <malloc>
 8007822:	4606      	mov	r6, r0
 8007824:	2800      	cmp	r0, #0
 8007826:	d152      	bne.n	80078ce <setvbuf+0x14e>
 8007828:	f8dd 9000 	ldr.w	r9, [sp]
 800782c:	45a9      	cmp	r9, r5
 800782e:	d140      	bne.n	80078b2 <setvbuf+0x132>
 8007830:	f04f 35ff 	mov.w	r5, #4294967295
 8007834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007838:	f043 0202 	orr.w	r2, r3, #2
 800783c:	81a2      	strh	r2, [r4, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	60a2      	str	r2, [r4, #8]
 8007842:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8007846:	6022      	str	r2, [r4, #0]
 8007848:	6122      	str	r2, [r4, #16]
 800784a:	2201      	movs	r2, #1
 800784c:	6162      	str	r2, [r4, #20]
 800784e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007850:	07d6      	lsls	r6, r2, #31
 8007852:	d404      	bmi.n	800785e <setvbuf+0xde>
 8007854:	0598      	lsls	r0, r3, #22
 8007856:	d402      	bmi.n	800785e <setvbuf+0xde>
 8007858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800785a:	f000 f9a7 	bl	8007bac <__retarget_lock_release_recursive>
 800785e:	4628      	mov	r0, r5
 8007860:	b003      	add	sp, #12
 8007862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007866:	2e00      	cmp	r6, #0
 8007868:	d0d8      	beq.n	800781c <setvbuf+0x9c>
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	b913      	cbnz	r3, 8007874 <setvbuf+0xf4>
 800786e:	4638      	mov	r0, r7
 8007870:	f7ff fee0 	bl	8007634 <__sinit>
 8007874:	f1b8 0f01 	cmp.w	r8, #1
 8007878:	bf08      	it	eq
 800787a:	89a3      	ldrheq	r3, [r4, #12]
 800787c:	6026      	str	r6, [r4, #0]
 800787e:	bf04      	itt	eq
 8007880:	f043 0301 	orreq.w	r3, r3, #1
 8007884:	81a3      	strheq	r3, [r4, #12]
 8007886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800788a:	f013 0208 	ands.w	r2, r3, #8
 800788e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007892:	d01e      	beq.n	80078d2 <setvbuf+0x152>
 8007894:	07d9      	lsls	r1, r3, #31
 8007896:	bf41      	itttt	mi
 8007898:	2200      	movmi	r2, #0
 800789a:	426d      	negmi	r5, r5
 800789c:	60a2      	strmi	r2, [r4, #8]
 800789e:	61a5      	strmi	r5, [r4, #24]
 80078a0:	bf58      	it	pl
 80078a2:	60a5      	strpl	r5, [r4, #8]
 80078a4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078a6:	07d2      	lsls	r2, r2, #31
 80078a8:	d401      	bmi.n	80078ae <setvbuf+0x12e>
 80078aa:	059b      	lsls	r3, r3, #22
 80078ac:	d513      	bpl.n	80078d6 <setvbuf+0x156>
 80078ae:	2500      	movs	r5, #0
 80078b0:	e7d5      	b.n	800785e <setvbuf+0xde>
 80078b2:	4648      	mov	r0, r9
 80078b4:	f7ff fd74 	bl	80073a0 <malloc>
 80078b8:	4606      	mov	r6, r0
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d0b8      	beq.n	8007830 <setvbuf+0xb0>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c4:	81a3      	strh	r3, [r4, #12]
 80078c6:	464d      	mov	r5, r9
 80078c8:	e7cf      	b.n	800786a <setvbuf+0xea>
 80078ca:	2500      	movs	r5, #0
 80078cc:	e7b2      	b.n	8007834 <setvbuf+0xb4>
 80078ce:	46a9      	mov	r9, r5
 80078d0:	e7f5      	b.n	80078be <setvbuf+0x13e>
 80078d2:	60a2      	str	r2, [r4, #8]
 80078d4:	e7e6      	b.n	80078a4 <setvbuf+0x124>
 80078d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078d8:	f000 f968 	bl	8007bac <__retarget_lock_release_recursive>
 80078dc:	e7e7      	b.n	80078ae <setvbuf+0x12e>
 80078de:	f04f 35ff 	mov.w	r5, #4294967295
 80078e2:	e7bc      	b.n	800785e <setvbuf+0xde>
 80078e4:	20000418 	.word	0x20000418

080078e8 <__sread>:
 80078e8:	b510      	push	{r4, lr}
 80078ea:	460c      	mov	r4, r1
 80078ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f0:	f000 f8fc 	bl	8007aec <_read_r>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	bfab      	itete	ge
 80078f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078fa:	89a3      	ldrhlt	r3, [r4, #12]
 80078fc:	181b      	addge	r3, r3, r0
 80078fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007902:	bfac      	ite	ge
 8007904:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007906:	81a3      	strhlt	r3, [r4, #12]
 8007908:	bd10      	pop	{r4, pc}

0800790a <__swrite>:
 800790a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800790e:	461f      	mov	r7, r3
 8007910:	898b      	ldrh	r3, [r1, #12]
 8007912:	05db      	lsls	r3, r3, #23
 8007914:	4605      	mov	r5, r0
 8007916:	460c      	mov	r4, r1
 8007918:	4616      	mov	r6, r2
 800791a:	d505      	bpl.n	8007928 <__swrite+0x1e>
 800791c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007920:	2302      	movs	r3, #2
 8007922:	2200      	movs	r2, #0
 8007924:	f000 f8d0 	bl	8007ac8 <_lseek_r>
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800792e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007932:	81a3      	strh	r3, [r4, #12]
 8007934:	4632      	mov	r2, r6
 8007936:	463b      	mov	r3, r7
 8007938:	4628      	mov	r0, r5
 800793a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800793e:	f000 b8f7 	b.w	8007b30 <_write_r>

08007942 <__sseek>:
 8007942:	b510      	push	{r4, lr}
 8007944:	460c      	mov	r4, r1
 8007946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794a:	f000 f8bd 	bl	8007ac8 <_lseek_r>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	bf15      	itete	ne
 8007954:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007956:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800795a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800795e:	81a3      	strheq	r3, [r4, #12]
 8007960:	bf18      	it	ne
 8007962:	81a3      	strhne	r3, [r4, #12]
 8007964:	bd10      	pop	{r4, pc}

08007966 <__sclose>:
 8007966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796a:	f000 b89d 	b.w	8007aa8 <_close_r>

0800796e <__swbuf_r>:
 800796e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007970:	460e      	mov	r6, r1
 8007972:	4614      	mov	r4, r2
 8007974:	4605      	mov	r5, r0
 8007976:	b118      	cbz	r0, 8007980 <__swbuf_r+0x12>
 8007978:	6a03      	ldr	r3, [r0, #32]
 800797a:	b90b      	cbnz	r3, 8007980 <__swbuf_r+0x12>
 800797c:	f7ff fe5a 	bl	8007634 <__sinit>
 8007980:	69a3      	ldr	r3, [r4, #24]
 8007982:	60a3      	str	r3, [r4, #8]
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	071a      	lsls	r2, r3, #28
 8007988:	d501      	bpl.n	800798e <__swbuf_r+0x20>
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	b943      	cbnz	r3, 80079a0 <__swbuf_r+0x32>
 800798e:	4621      	mov	r1, r4
 8007990:	4628      	mov	r0, r5
 8007992:	f000 f82b 	bl	80079ec <__swsetup_r>
 8007996:	b118      	cbz	r0, 80079a0 <__swbuf_r+0x32>
 8007998:	f04f 37ff 	mov.w	r7, #4294967295
 800799c:	4638      	mov	r0, r7
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	6922      	ldr	r2, [r4, #16]
 80079a4:	1a98      	subs	r0, r3, r2
 80079a6:	6963      	ldr	r3, [r4, #20]
 80079a8:	b2f6      	uxtb	r6, r6
 80079aa:	4283      	cmp	r3, r0
 80079ac:	4637      	mov	r7, r6
 80079ae:	dc05      	bgt.n	80079bc <__swbuf_r+0x4e>
 80079b0:	4621      	mov	r1, r4
 80079b2:	4628      	mov	r0, r5
 80079b4:	f000 fca8 	bl	8008308 <_fflush_r>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d1ed      	bne.n	8007998 <__swbuf_r+0x2a>
 80079bc:	68a3      	ldr	r3, [r4, #8]
 80079be:	3b01      	subs	r3, #1
 80079c0:	60a3      	str	r3, [r4, #8]
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	6022      	str	r2, [r4, #0]
 80079c8:	701e      	strb	r6, [r3, #0]
 80079ca:	6962      	ldr	r2, [r4, #20]
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d004      	beq.n	80079dc <__swbuf_r+0x6e>
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	07db      	lsls	r3, r3, #31
 80079d6:	d5e1      	bpl.n	800799c <__swbuf_r+0x2e>
 80079d8:	2e0a      	cmp	r6, #10
 80079da:	d1df      	bne.n	800799c <__swbuf_r+0x2e>
 80079dc:	4621      	mov	r1, r4
 80079de:	4628      	mov	r0, r5
 80079e0:	f000 fc92 	bl	8008308 <_fflush_r>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d0d9      	beq.n	800799c <__swbuf_r+0x2e>
 80079e8:	e7d6      	b.n	8007998 <__swbuf_r+0x2a>
	...

080079ec <__swsetup_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4b29      	ldr	r3, [pc, #164]	@ (8007a94 <__swsetup_r+0xa8>)
 80079f0:	4605      	mov	r5, r0
 80079f2:	6818      	ldr	r0, [r3, #0]
 80079f4:	460c      	mov	r4, r1
 80079f6:	b118      	cbz	r0, 8007a00 <__swsetup_r+0x14>
 80079f8:	6a03      	ldr	r3, [r0, #32]
 80079fa:	b90b      	cbnz	r3, 8007a00 <__swsetup_r+0x14>
 80079fc:	f7ff fe1a 	bl	8007634 <__sinit>
 8007a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a04:	0719      	lsls	r1, r3, #28
 8007a06:	d422      	bmi.n	8007a4e <__swsetup_r+0x62>
 8007a08:	06da      	lsls	r2, r3, #27
 8007a0a:	d407      	bmi.n	8007a1c <__swsetup_r+0x30>
 8007a0c:	2209      	movs	r2, #9
 8007a0e:	602a      	str	r2, [r5, #0]
 8007a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a14:	81a3      	strh	r3, [r4, #12]
 8007a16:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1a:	e033      	b.n	8007a84 <__swsetup_r+0x98>
 8007a1c:	0758      	lsls	r0, r3, #29
 8007a1e:	d512      	bpl.n	8007a46 <__swsetup_r+0x5a>
 8007a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a22:	b141      	cbz	r1, 8007a36 <__swsetup_r+0x4a>
 8007a24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a28:	4299      	cmp	r1, r3
 8007a2a:	d002      	beq.n	8007a32 <__swsetup_r+0x46>
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 f8cd 	bl	8007bcc <_free_r>
 8007a32:	2300      	movs	r3, #0
 8007a34:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a3c:	81a3      	strh	r3, [r4, #12]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	6063      	str	r3, [r4, #4]
 8007a42:	6923      	ldr	r3, [r4, #16]
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	f043 0308 	orr.w	r3, r3, #8
 8007a4c:	81a3      	strh	r3, [r4, #12]
 8007a4e:	6923      	ldr	r3, [r4, #16]
 8007a50:	b94b      	cbnz	r3, 8007a66 <__swsetup_r+0x7a>
 8007a52:	89a3      	ldrh	r3, [r4, #12]
 8007a54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a5c:	d003      	beq.n	8007a66 <__swsetup_r+0x7a>
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4628      	mov	r0, r5
 8007a62:	f000 fc9f 	bl	80083a4 <__smakebuf_r>
 8007a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6a:	f013 0201 	ands.w	r2, r3, #1
 8007a6e:	d00a      	beq.n	8007a86 <__swsetup_r+0x9a>
 8007a70:	2200      	movs	r2, #0
 8007a72:	60a2      	str	r2, [r4, #8]
 8007a74:	6962      	ldr	r2, [r4, #20]
 8007a76:	4252      	negs	r2, r2
 8007a78:	61a2      	str	r2, [r4, #24]
 8007a7a:	6922      	ldr	r2, [r4, #16]
 8007a7c:	b942      	cbnz	r2, 8007a90 <__swsetup_r+0xa4>
 8007a7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a82:	d1c5      	bne.n	8007a10 <__swsetup_r+0x24>
 8007a84:	bd38      	pop	{r3, r4, r5, pc}
 8007a86:	0799      	lsls	r1, r3, #30
 8007a88:	bf58      	it	pl
 8007a8a:	6962      	ldrpl	r2, [r4, #20]
 8007a8c:	60a2      	str	r2, [r4, #8]
 8007a8e:	e7f4      	b.n	8007a7a <__swsetup_r+0x8e>
 8007a90:	2000      	movs	r0, #0
 8007a92:	e7f7      	b.n	8007a84 <__swsetup_r+0x98>
 8007a94:	20000418 	.word	0x20000418

08007a98 <memset>:
 8007a98:	4402      	add	r2, r0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d100      	bne.n	8007aa2 <memset+0xa>
 8007aa0:	4770      	bx	lr
 8007aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8007aa6:	e7f9      	b.n	8007a9c <memset+0x4>

08007aa8 <_close_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d06      	ldr	r5, [pc, #24]	@ (8007ac4 <_close_r+0x1c>)
 8007aac:	2300      	movs	r3, #0
 8007aae:	4604      	mov	r4, r0
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	602b      	str	r3, [r5, #0]
 8007ab4:	f7f9 fafe 	bl	80010b4 <_close>
 8007ab8:	1c43      	adds	r3, r0, #1
 8007aba:	d102      	bne.n	8007ac2 <_close_r+0x1a>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	b103      	cbz	r3, 8007ac2 <_close_r+0x1a>
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	bd38      	pop	{r3, r4, r5, pc}
 8007ac4:	2000237c 	.word	0x2000237c

08007ac8 <_lseek_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4d07      	ldr	r5, [pc, #28]	@ (8007ae8 <_lseek_r+0x20>)
 8007acc:	4604      	mov	r4, r0
 8007ace:	4608      	mov	r0, r1
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	602a      	str	r2, [r5, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f7f9 faf8 	bl	80010cc <_lseek>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_lseek_r+0x1e>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_lseek_r+0x1e>
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	2000237c 	.word	0x2000237c

08007aec <_read_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d07      	ldr	r5, [pc, #28]	@ (8007b0c <_read_r+0x20>)
 8007af0:	4604      	mov	r4, r0
 8007af2:	4608      	mov	r0, r1
 8007af4:	4611      	mov	r1, r2
 8007af6:	2200      	movs	r2, #0
 8007af8:	602a      	str	r2, [r5, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f7f9 faee 	bl	80010dc <_read>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	d102      	bne.n	8007b0a <_read_r+0x1e>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	b103      	cbz	r3, 8007b0a <_read_r+0x1e>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	2000237c 	.word	0x2000237c

08007b10 <_sbrk_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d06      	ldr	r5, [pc, #24]	@ (8007b2c <_sbrk_r+0x1c>)
 8007b14:	2300      	movs	r3, #0
 8007b16:	4604      	mov	r4, r0
 8007b18:	4608      	mov	r0, r1
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	f7fa fd5c 	bl	80025d8 <_sbrk>
 8007b20:	1c43      	adds	r3, r0, #1
 8007b22:	d102      	bne.n	8007b2a <_sbrk_r+0x1a>
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	b103      	cbz	r3, 8007b2a <_sbrk_r+0x1a>
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	2000237c 	.word	0x2000237c

08007b30 <_write_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d07      	ldr	r5, [pc, #28]	@ (8007b50 <_write_r+0x20>)
 8007b34:	4604      	mov	r4, r0
 8007b36:	4608      	mov	r0, r1
 8007b38:	4611      	mov	r1, r2
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	602a      	str	r2, [r5, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f7f9 fa9e 	bl	8001080 <_write>
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d102      	bne.n	8007b4e <_write_r+0x1e>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	b103      	cbz	r3, 8007b4e <_write_r+0x1e>
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	2000237c 	.word	0x2000237c

08007b54 <__errno>:
 8007b54:	4b01      	ldr	r3, [pc, #4]	@ (8007b5c <__errno+0x8>)
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20000418 	.word	0x20000418

08007b60 <__libc_init_array>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	4d0d      	ldr	r5, [pc, #52]	@ (8007b98 <__libc_init_array+0x38>)
 8007b64:	4c0d      	ldr	r4, [pc, #52]	@ (8007b9c <__libc_init_array+0x3c>)
 8007b66:	1b64      	subs	r4, r4, r5
 8007b68:	10a4      	asrs	r4, r4, #2
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	42a6      	cmp	r6, r4
 8007b6e:	d109      	bne.n	8007b84 <__libc_init_array+0x24>
 8007b70:	4d0b      	ldr	r5, [pc, #44]	@ (8007ba0 <__libc_init_array+0x40>)
 8007b72:	4c0c      	ldr	r4, [pc, #48]	@ (8007ba4 <__libc_init_array+0x44>)
 8007b74:	f000 fc74 	bl	8008460 <_init>
 8007b78:	1b64      	subs	r4, r4, r5
 8007b7a:	10a4      	asrs	r4, r4, #2
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	42a6      	cmp	r6, r4
 8007b80:	d105      	bne.n	8007b8e <__libc_init_array+0x2e>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b88:	4798      	blx	r3
 8007b8a:	3601      	adds	r6, #1
 8007b8c:	e7ee      	b.n	8007b6c <__libc_init_array+0xc>
 8007b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b92:	4798      	blx	r3
 8007b94:	3601      	adds	r6, #1
 8007b96:	e7f2      	b.n	8007b7e <__libc_init_array+0x1e>
 8007b98:	0801b24c 	.word	0x0801b24c
 8007b9c:	0801b24c 	.word	0x0801b24c
 8007ba0:	0801b24c 	.word	0x0801b24c
 8007ba4:	0801b250 	.word	0x0801b250

08007ba8 <__retarget_lock_init_recursive>:
 8007ba8:	4770      	bx	lr

08007baa <__retarget_lock_acquire_recursive>:
 8007baa:	4770      	bx	lr

08007bac <__retarget_lock_release_recursive>:
 8007bac:	4770      	bx	lr

08007bae <memcpy>:
 8007bae:	440a      	add	r2, r1
 8007bb0:	4291      	cmp	r1, r2
 8007bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bb6:	d100      	bne.n	8007bba <memcpy+0xc>
 8007bb8:	4770      	bx	lr
 8007bba:	b510      	push	{r4, lr}
 8007bbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bc4:	4291      	cmp	r1, r2
 8007bc6:	d1f9      	bne.n	8007bbc <memcpy+0xe>
 8007bc8:	bd10      	pop	{r4, pc}
	...

08007bcc <_free_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4605      	mov	r5, r0
 8007bd0:	2900      	cmp	r1, #0
 8007bd2:	d041      	beq.n	8007c58 <_free_r+0x8c>
 8007bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bd8:	1f0c      	subs	r4, r1, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	bfb8      	it	lt
 8007bde:	18e4      	addlt	r4, r4, r3
 8007be0:	f7ff fc90 	bl	8007504 <__malloc_lock>
 8007be4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c5c <_free_r+0x90>)
 8007be6:	6813      	ldr	r3, [r2, #0]
 8007be8:	b933      	cbnz	r3, 8007bf8 <_free_r+0x2c>
 8007bea:	6063      	str	r3, [r4, #4]
 8007bec:	6014      	str	r4, [r2, #0]
 8007bee:	4628      	mov	r0, r5
 8007bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bf4:	f7ff bc8c 	b.w	8007510 <__malloc_unlock>
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	d908      	bls.n	8007c0e <_free_r+0x42>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	1821      	adds	r1, r4, r0
 8007c00:	428b      	cmp	r3, r1
 8007c02:	bf01      	itttt	eq
 8007c04:	6819      	ldreq	r1, [r3, #0]
 8007c06:	685b      	ldreq	r3, [r3, #4]
 8007c08:	1809      	addeq	r1, r1, r0
 8007c0a:	6021      	streq	r1, [r4, #0]
 8007c0c:	e7ed      	b.n	8007bea <_free_r+0x1e>
 8007c0e:	461a      	mov	r2, r3
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	b10b      	cbz	r3, 8007c18 <_free_r+0x4c>
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	d9fa      	bls.n	8007c0e <_free_r+0x42>
 8007c18:	6811      	ldr	r1, [r2, #0]
 8007c1a:	1850      	adds	r0, r2, r1
 8007c1c:	42a0      	cmp	r0, r4
 8007c1e:	d10b      	bne.n	8007c38 <_free_r+0x6c>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	4401      	add	r1, r0
 8007c24:	1850      	adds	r0, r2, r1
 8007c26:	4283      	cmp	r3, r0
 8007c28:	6011      	str	r1, [r2, #0]
 8007c2a:	d1e0      	bne.n	8007bee <_free_r+0x22>
 8007c2c:	6818      	ldr	r0, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	6053      	str	r3, [r2, #4]
 8007c32:	4408      	add	r0, r1
 8007c34:	6010      	str	r0, [r2, #0]
 8007c36:	e7da      	b.n	8007bee <_free_r+0x22>
 8007c38:	d902      	bls.n	8007c40 <_free_r+0x74>
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	e7d6      	b.n	8007bee <_free_r+0x22>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	1821      	adds	r1, r4, r0
 8007c44:	428b      	cmp	r3, r1
 8007c46:	bf04      	itt	eq
 8007c48:	6819      	ldreq	r1, [r3, #0]
 8007c4a:	685b      	ldreq	r3, [r3, #4]
 8007c4c:	6063      	str	r3, [r4, #4]
 8007c4e:	bf04      	itt	eq
 8007c50:	1809      	addeq	r1, r1, r0
 8007c52:	6021      	streq	r1, [r4, #0]
 8007c54:	6054      	str	r4, [r2, #4]
 8007c56:	e7ca      	b.n	8007bee <_free_r+0x22>
 8007c58:	bd38      	pop	{r3, r4, r5, pc}
 8007c5a:	bf00      	nop
 8007c5c:	2000223c 	.word	0x2000223c

08007c60 <__sfputc_r>:
 8007c60:	6893      	ldr	r3, [r2, #8]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	b410      	push	{r4}
 8007c68:	6093      	str	r3, [r2, #8]
 8007c6a:	da08      	bge.n	8007c7e <__sfputc_r+0x1e>
 8007c6c:	6994      	ldr	r4, [r2, #24]
 8007c6e:	42a3      	cmp	r3, r4
 8007c70:	db01      	blt.n	8007c76 <__sfputc_r+0x16>
 8007c72:	290a      	cmp	r1, #10
 8007c74:	d103      	bne.n	8007c7e <__sfputc_r+0x1e>
 8007c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c7a:	f7ff be78 	b.w	800796e <__swbuf_r>
 8007c7e:	6813      	ldr	r3, [r2, #0]
 8007c80:	1c58      	adds	r0, r3, #1
 8007c82:	6010      	str	r0, [r2, #0]
 8007c84:	7019      	strb	r1, [r3, #0]
 8007c86:	4608      	mov	r0, r1
 8007c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <__sfputs_r>:
 8007c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c90:	4606      	mov	r6, r0
 8007c92:	460f      	mov	r7, r1
 8007c94:	4614      	mov	r4, r2
 8007c96:	18d5      	adds	r5, r2, r3
 8007c98:	42ac      	cmp	r4, r5
 8007c9a:	d101      	bne.n	8007ca0 <__sfputs_r+0x12>
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	e007      	b.n	8007cb0 <__sfputs_r+0x22>
 8007ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca4:	463a      	mov	r2, r7
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f7ff ffda 	bl	8007c60 <__sfputc_r>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d1f3      	bne.n	8007c98 <__sfputs_r+0xa>
 8007cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cb4 <_vfiprintf_r>:
 8007cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	460d      	mov	r5, r1
 8007cba:	b09d      	sub	sp, #116	@ 0x74
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	4698      	mov	r8, r3
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	b118      	cbz	r0, 8007ccc <_vfiprintf_r+0x18>
 8007cc4:	6a03      	ldr	r3, [r0, #32]
 8007cc6:	b90b      	cbnz	r3, 8007ccc <_vfiprintf_r+0x18>
 8007cc8:	f7ff fcb4 	bl	8007634 <__sinit>
 8007ccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cce:	07d9      	lsls	r1, r3, #31
 8007cd0:	d405      	bmi.n	8007cde <_vfiprintf_r+0x2a>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	059a      	lsls	r2, r3, #22
 8007cd6:	d402      	bmi.n	8007cde <_vfiprintf_r+0x2a>
 8007cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cda:	f7ff ff66 	bl	8007baa <__retarget_lock_acquire_recursive>
 8007cde:	89ab      	ldrh	r3, [r5, #12]
 8007ce0:	071b      	lsls	r3, r3, #28
 8007ce2:	d501      	bpl.n	8007ce8 <_vfiprintf_r+0x34>
 8007ce4:	692b      	ldr	r3, [r5, #16]
 8007ce6:	b99b      	cbnz	r3, 8007d10 <_vfiprintf_r+0x5c>
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4630      	mov	r0, r6
 8007cec:	f7ff fe7e 	bl	80079ec <__swsetup_r>
 8007cf0:	b170      	cbz	r0, 8007d10 <_vfiprintf_r+0x5c>
 8007cf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cf4:	07dc      	lsls	r4, r3, #31
 8007cf6:	d504      	bpl.n	8007d02 <_vfiprintf_r+0x4e>
 8007cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfc:	b01d      	add	sp, #116	@ 0x74
 8007cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d02:	89ab      	ldrh	r3, [r5, #12]
 8007d04:	0598      	lsls	r0, r3, #22
 8007d06:	d4f7      	bmi.n	8007cf8 <_vfiprintf_r+0x44>
 8007d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d0a:	f7ff ff4f 	bl	8007bac <__retarget_lock_release_recursive>
 8007d0e:	e7f3      	b.n	8007cf8 <_vfiprintf_r+0x44>
 8007d10:	2300      	movs	r3, #0
 8007d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d14:	2320      	movs	r3, #32
 8007d16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d1e:	2330      	movs	r3, #48	@ 0x30
 8007d20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ed0 <_vfiprintf_r+0x21c>
 8007d24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d28:	f04f 0901 	mov.w	r9, #1
 8007d2c:	4623      	mov	r3, r4
 8007d2e:	469a      	mov	sl, r3
 8007d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d34:	b10a      	cbz	r2, 8007d3a <_vfiprintf_r+0x86>
 8007d36:	2a25      	cmp	r2, #37	@ 0x25
 8007d38:	d1f9      	bne.n	8007d2e <_vfiprintf_r+0x7a>
 8007d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d3e:	d00b      	beq.n	8007d58 <_vfiprintf_r+0xa4>
 8007d40:	465b      	mov	r3, fp
 8007d42:	4622      	mov	r2, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	4630      	mov	r0, r6
 8007d48:	f7ff ffa1 	bl	8007c8e <__sfputs_r>
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	f000 80a7 	beq.w	8007ea0 <_vfiprintf_r+0x1ec>
 8007d52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d54:	445a      	add	r2, fp
 8007d56:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d58:	f89a 3000 	ldrb.w	r3, [sl]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 809f 	beq.w	8007ea0 <_vfiprintf_r+0x1ec>
 8007d62:	2300      	movs	r3, #0
 8007d64:	f04f 32ff 	mov.w	r2, #4294967295
 8007d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d6c:	f10a 0a01 	add.w	sl, sl, #1
 8007d70:	9304      	str	r3, [sp, #16]
 8007d72:	9307      	str	r3, [sp, #28]
 8007d74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d78:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d7a:	4654      	mov	r4, sl
 8007d7c:	2205      	movs	r2, #5
 8007d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d82:	4853      	ldr	r0, [pc, #332]	@ (8007ed0 <_vfiprintf_r+0x21c>)
 8007d84:	f7f8 fa34 	bl	80001f0 <memchr>
 8007d88:	9a04      	ldr	r2, [sp, #16]
 8007d8a:	b9d8      	cbnz	r0, 8007dc4 <_vfiprintf_r+0x110>
 8007d8c:	06d1      	lsls	r1, r2, #27
 8007d8e:	bf44      	itt	mi
 8007d90:	2320      	movmi	r3, #32
 8007d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d96:	0713      	lsls	r3, r2, #28
 8007d98:	bf44      	itt	mi
 8007d9a:	232b      	movmi	r3, #43	@ 0x2b
 8007d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007da0:	f89a 3000 	ldrb.w	r3, [sl]
 8007da4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007da6:	d015      	beq.n	8007dd4 <_vfiprintf_r+0x120>
 8007da8:	9a07      	ldr	r2, [sp, #28]
 8007daa:	4654      	mov	r4, sl
 8007dac:	2000      	movs	r0, #0
 8007dae:	f04f 0c0a 	mov.w	ip, #10
 8007db2:	4621      	mov	r1, r4
 8007db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007db8:	3b30      	subs	r3, #48	@ 0x30
 8007dba:	2b09      	cmp	r3, #9
 8007dbc:	d94b      	bls.n	8007e56 <_vfiprintf_r+0x1a2>
 8007dbe:	b1b0      	cbz	r0, 8007dee <_vfiprintf_r+0x13a>
 8007dc0:	9207      	str	r2, [sp, #28]
 8007dc2:	e014      	b.n	8007dee <_vfiprintf_r+0x13a>
 8007dc4:	eba0 0308 	sub.w	r3, r0, r8
 8007dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	46a2      	mov	sl, r4
 8007dd2:	e7d2      	b.n	8007d7a <_vfiprintf_r+0xc6>
 8007dd4:	9b03      	ldr	r3, [sp, #12]
 8007dd6:	1d19      	adds	r1, r3, #4
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	9103      	str	r1, [sp, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	bfbb      	ittet	lt
 8007de0:	425b      	neglt	r3, r3
 8007de2:	f042 0202 	orrlt.w	r2, r2, #2
 8007de6:	9307      	strge	r3, [sp, #28]
 8007de8:	9307      	strlt	r3, [sp, #28]
 8007dea:	bfb8      	it	lt
 8007dec:	9204      	strlt	r2, [sp, #16]
 8007dee:	7823      	ldrb	r3, [r4, #0]
 8007df0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007df2:	d10a      	bne.n	8007e0a <_vfiprintf_r+0x156>
 8007df4:	7863      	ldrb	r3, [r4, #1]
 8007df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007df8:	d132      	bne.n	8007e60 <_vfiprintf_r+0x1ac>
 8007dfa:	9b03      	ldr	r3, [sp, #12]
 8007dfc:	1d1a      	adds	r2, r3, #4
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	9203      	str	r2, [sp, #12]
 8007e02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e06:	3402      	adds	r4, #2
 8007e08:	9305      	str	r3, [sp, #20]
 8007e0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ee0 <_vfiprintf_r+0x22c>
 8007e0e:	7821      	ldrb	r1, [r4, #0]
 8007e10:	2203      	movs	r2, #3
 8007e12:	4650      	mov	r0, sl
 8007e14:	f7f8 f9ec 	bl	80001f0 <memchr>
 8007e18:	b138      	cbz	r0, 8007e2a <_vfiprintf_r+0x176>
 8007e1a:	9b04      	ldr	r3, [sp, #16]
 8007e1c:	eba0 000a 	sub.w	r0, r0, sl
 8007e20:	2240      	movs	r2, #64	@ 0x40
 8007e22:	4082      	lsls	r2, r0
 8007e24:	4313      	orrs	r3, r2
 8007e26:	3401      	adds	r4, #1
 8007e28:	9304      	str	r3, [sp, #16]
 8007e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e2e:	4829      	ldr	r0, [pc, #164]	@ (8007ed4 <_vfiprintf_r+0x220>)
 8007e30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e34:	2206      	movs	r2, #6
 8007e36:	f7f8 f9db 	bl	80001f0 <memchr>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d03f      	beq.n	8007ebe <_vfiprintf_r+0x20a>
 8007e3e:	4b26      	ldr	r3, [pc, #152]	@ (8007ed8 <_vfiprintf_r+0x224>)
 8007e40:	bb1b      	cbnz	r3, 8007e8a <_vfiprintf_r+0x1d6>
 8007e42:	9b03      	ldr	r3, [sp, #12]
 8007e44:	3307      	adds	r3, #7
 8007e46:	f023 0307 	bic.w	r3, r3, #7
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	9303      	str	r3, [sp, #12]
 8007e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e50:	443b      	add	r3, r7
 8007e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e54:	e76a      	b.n	8007d2c <_vfiprintf_r+0x78>
 8007e56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	2001      	movs	r0, #1
 8007e5e:	e7a8      	b.n	8007db2 <_vfiprintf_r+0xfe>
 8007e60:	2300      	movs	r3, #0
 8007e62:	3401      	adds	r4, #1
 8007e64:	9305      	str	r3, [sp, #20]
 8007e66:	4619      	mov	r1, r3
 8007e68:	f04f 0c0a 	mov.w	ip, #10
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e72:	3a30      	subs	r2, #48	@ 0x30
 8007e74:	2a09      	cmp	r2, #9
 8007e76:	d903      	bls.n	8007e80 <_vfiprintf_r+0x1cc>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0c6      	beq.n	8007e0a <_vfiprintf_r+0x156>
 8007e7c:	9105      	str	r1, [sp, #20]
 8007e7e:	e7c4      	b.n	8007e0a <_vfiprintf_r+0x156>
 8007e80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e84:	4604      	mov	r4, r0
 8007e86:	2301      	movs	r3, #1
 8007e88:	e7f0      	b.n	8007e6c <_vfiprintf_r+0x1b8>
 8007e8a:	ab03      	add	r3, sp, #12
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	462a      	mov	r2, r5
 8007e90:	4b12      	ldr	r3, [pc, #72]	@ (8007edc <_vfiprintf_r+0x228>)
 8007e92:	a904      	add	r1, sp, #16
 8007e94:	4630      	mov	r0, r6
 8007e96:	f3af 8000 	nop.w
 8007e9a:	4607      	mov	r7, r0
 8007e9c:	1c78      	adds	r0, r7, #1
 8007e9e:	d1d6      	bne.n	8007e4e <_vfiprintf_r+0x19a>
 8007ea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ea2:	07d9      	lsls	r1, r3, #31
 8007ea4:	d405      	bmi.n	8007eb2 <_vfiprintf_r+0x1fe>
 8007ea6:	89ab      	ldrh	r3, [r5, #12]
 8007ea8:	059a      	lsls	r2, r3, #22
 8007eaa:	d402      	bmi.n	8007eb2 <_vfiprintf_r+0x1fe>
 8007eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eae:	f7ff fe7d 	bl	8007bac <__retarget_lock_release_recursive>
 8007eb2:	89ab      	ldrh	r3, [r5, #12]
 8007eb4:	065b      	lsls	r3, r3, #25
 8007eb6:	f53f af1f 	bmi.w	8007cf8 <_vfiprintf_r+0x44>
 8007eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ebc:	e71e      	b.n	8007cfc <_vfiprintf_r+0x48>
 8007ebe:	ab03      	add	r3, sp, #12
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	462a      	mov	r2, r5
 8007ec4:	4b05      	ldr	r3, [pc, #20]	@ (8007edc <_vfiprintf_r+0x228>)
 8007ec6:	a904      	add	r1, sp, #16
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f000 f879 	bl	8007fc0 <_printf_i>
 8007ece:	e7e4      	b.n	8007e9a <_vfiprintf_r+0x1e6>
 8007ed0:	0801b210 	.word	0x0801b210
 8007ed4:	0801b21a 	.word	0x0801b21a
 8007ed8:	00000000 	.word	0x00000000
 8007edc:	08007c8f 	.word	0x08007c8f
 8007ee0:	0801b216 	.word	0x0801b216

08007ee4 <_printf_common>:
 8007ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee8:	4616      	mov	r6, r2
 8007eea:	4698      	mov	r8, r3
 8007eec:	688a      	ldr	r2, [r1, #8]
 8007eee:	690b      	ldr	r3, [r1, #16]
 8007ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	bfb8      	it	lt
 8007ef8:	4613      	movlt	r3, r2
 8007efa:	6033      	str	r3, [r6, #0]
 8007efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f00:	4607      	mov	r7, r0
 8007f02:	460c      	mov	r4, r1
 8007f04:	b10a      	cbz	r2, 8007f0a <_printf_common+0x26>
 8007f06:	3301      	adds	r3, #1
 8007f08:	6033      	str	r3, [r6, #0]
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	0699      	lsls	r1, r3, #26
 8007f0e:	bf42      	ittt	mi
 8007f10:	6833      	ldrmi	r3, [r6, #0]
 8007f12:	3302      	addmi	r3, #2
 8007f14:	6033      	strmi	r3, [r6, #0]
 8007f16:	6825      	ldr	r5, [r4, #0]
 8007f18:	f015 0506 	ands.w	r5, r5, #6
 8007f1c:	d106      	bne.n	8007f2c <_printf_common+0x48>
 8007f1e:	f104 0a19 	add.w	sl, r4, #25
 8007f22:	68e3      	ldr	r3, [r4, #12]
 8007f24:	6832      	ldr	r2, [r6, #0]
 8007f26:	1a9b      	subs	r3, r3, r2
 8007f28:	42ab      	cmp	r3, r5
 8007f2a:	dc26      	bgt.n	8007f7a <_printf_common+0x96>
 8007f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f30:	6822      	ldr	r2, [r4, #0]
 8007f32:	3b00      	subs	r3, #0
 8007f34:	bf18      	it	ne
 8007f36:	2301      	movne	r3, #1
 8007f38:	0692      	lsls	r2, r2, #26
 8007f3a:	d42b      	bmi.n	8007f94 <_printf_common+0xb0>
 8007f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f40:	4641      	mov	r1, r8
 8007f42:	4638      	mov	r0, r7
 8007f44:	47c8      	blx	r9
 8007f46:	3001      	adds	r0, #1
 8007f48:	d01e      	beq.n	8007f88 <_printf_common+0xa4>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	6922      	ldr	r2, [r4, #16]
 8007f4e:	f003 0306 	and.w	r3, r3, #6
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	bf02      	ittt	eq
 8007f56:	68e5      	ldreq	r5, [r4, #12]
 8007f58:	6833      	ldreq	r3, [r6, #0]
 8007f5a:	1aed      	subeq	r5, r5, r3
 8007f5c:	68a3      	ldr	r3, [r4, #8]
 8007f5e:	bf0c      	ite	eq
 8007f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f64:	2500      	movne	r5, #0
 8007f66:	4293      	cmp	r3, r2
 8007f68:	bfc4      	itt	gt
 8007f6a:	1a9b      	subgt	r3, r3, r2
 8007f6c:	18ed      	addgt	r5, r5, r3
 8007f6e:	2600      	movs	r6, #0
 8007f70:	341a      	adds	r4, #26
 8007f72:	42b5      	cmp	r5, r6
 8007f74:	d11a      	bne.n	8007fac <_printf_common+0xc8>
 8007f76:	2000      	movs	r0, #0
 8007f78:	e008      	b.n	8007f8c <_printf_common+0xa8>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4652      	mov	r2, sl
 8007f7e:	4641      	mov	r1, r8
 8007f80:	4638      	mov	r0, r7
 8007f82:	47c8      	blx	r9
 8007f84:	3001      	adds	r0, #1
 8007f86:	d103      	bne.n	8007f90 <_printf_common+0xac>
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f90:	3501      	adds	r5, #1
 8007f92:	e7c6      	b.n	8007f22 <_printf_common+0x3e>
 8007f94:	18e1      	adds	r1, r4, r3
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	2030      	movs	r0, #48	@ 0x30
 8007f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f9e:	4422      	add	r2, r4
 8007fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fa8:	3302      	adds	r3, #2
 8007faa:	e7c7      	b.n	8007f3c <_printf_common+0x58>
 8007fac:	2301      	movs	r3, #1
 8007fae:	4622      	mov	r2, r4
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	47c8      	blx	r9
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d0e6      	beq.n	8007f88 <_printf_common+0xa4>
 8007fba:	3601      	adds	r6, #1
 8007fbc:	e7d9      	b.n	8007f72 <_printf_common+0x8e>
	...

08007fc0 <_printf_i>:
 8007fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc4:	7e0f      	ldrb	r7, [r1, #24]
 8007fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fc8:	2f78      	cmp	r7, #120	@ 0x78
 8007fca:	4691      	mov	r9, r2
 8007fcc:	4680      	mov	r8, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	469a      	mov	sl, r3
 8007fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007fd6:	d807      	bhi.n	8007fe8 <_printf_i+0x28>
 8007fd8:	2f62      	cmp	r7, #98	@ 0x62
 8007fda:	d80a      	bhi.n	8007ff2 <_printf_i+0x32>
 8007fdc:	2f00      	cmp	r7, #0
 8007fde:	f000 80d2 	beq.w	8008186 <_printf_i+0x1c6>
 8007fe2:	2f58      	cmp	r7, #88	@ 0x58
 8007fe4:	f000 80b9 	beq.w	800815a <_printf_i+0x19a>
 8007fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ff0:	e03a      	b.n	8008068 <_printf_i+0xa8>
 8007ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ff6:	2b15      	cmp	r3, #21
 8007ff8:	d8f6      	bhi.n	8007fe8 <_printf_i+0x28>
 8007ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8008000 <_printf_i+0x40>)
 8007ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008000:	08008059 	.word	0x08008059
 8008004:	0800806d 	.word	0x0800806d
 8008008:	08007fe9 	.word	0x08007fe9
 800800c:	08007fe9 	.word	0x08007fe9
 8008010:	08007fe9 	.word	0x08007fe9
 8008014:	08007fe9 	.word	0x08007fe9
 8008018:	0800806d 	.word	0x0800806d
 800801c:	08007fe9 	.word	0x08007fe9
 8008020:	08007fe9 	.word	0x08007fe9
 8008024:	08007fe9 	.word	0x08007fe9
 8008028:	08007fe9 	.word	0x08007fe9
 800802c:	0800816d 	.word	0x0800816d
 8008030:	08008097 	.word	0x08008097
 8008034:	08008127 	.word	0x08008127
 8008038:	08007fe9 	.word	0x08007fe9
 800803c:	08007fe9 	.word	0x08007fe9
 8008040:	0800818f 	.word	0x0800818f
 8008044:	08007fe9 	.word	0x08007fe9
 8008048:	08008097 	.word	0x08008097
 800804c:	08007fe9 	.word	0x08007fe9
 8008050:	08007fe9 	.word	0x08007fe9
 8008054:	0800812f 	.word	0x0800812f
 8008058:	6833      	ldr	r3, [r6, #0]
 800805a:	1d1a      	adds	r2, r3, #4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6032      	str	r2, [r6, #0]
 8008060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008068:	2301      	movs	r3, #1
 800806a:	e09d      	b.n	80081a8 <_printf_i+0x1e8>
 800806c:	6833      	ldr	r3, [r6, #0]
 800806e:	6820      	ldr	r0, [r4, #0]
 8008070:	1d19      	adds	r1, r3, #4
 8008072:	6031      	str	r1, [r6, #0]
 8008074:	0606      	lsls	r6, r0, #24
 8008076:	d501      	bpl.n	800807c <_printf_i+0xbc>
 8008078:	681d      	ldr	r5, [r3, #0]
 800807a:	e003      	b.n	8008084 <_printf_i+0xc4>
 800807c:	0645      	lsls	r5, r0, #25
 800807e:	d5fb      	bpl.n	8008078 <_printf_i+0xb8>
 8008080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008084:	2d00      	cmp	r5, #0
 8008086:	da03      	bge.n	8008090 <_printf_i+0xd0>
 8008088:	232d      	movs	r3, #45	@ 0x2d
 800808a:	426d      	negs	r5, r5
 800808c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008090:	4859      	ldr	r0, [pc, #356]	@ (80081f8 <_printf_i+0x238>)
 8008092:	230a      	movs	r3, #10
 8008094:	e011      	b.n	80080ba <_printf_i+0xfa>
 8008096:	6821      	ldr	r1, [r4, #0]
 8008098:	6833      	ldr	r3, [r6, #0]
 800809a:	0608      	lsls	r0, r1, #24
 800809c:	f853 5b04 	ldr.w	r5, [r3], #4
 80080a0:	d402      	bmi.n	80080a8 <_printf_i+0xe8>
 80080a2:	0649      	lsls	r1, r1, #25
 80080a4:	bf48      	it	mi
 80080a6:	b2ad      	uxthmi	r5, r5
 80080a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80080aa:	4853      	ldr	r0, [pc, #332]	@ (80081f8 <_printf_i+0x238>)
 80080ac:	6033      	str	r3, [r6, #0]
 80080ae:	bf14      	ite	ne
 80080b0:	230a      	movne	r3, #10
 80080b2:	2308      	moveq	r3, #8
 80080b4:	2100      	movs	r1, #0
 80080b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80080ba:	6866      	ldr	r6, [r4, #4]
 80080bc:	60a6      	str	r6, [r4, #8]
 80080be:	2e00      	cmp	r6, #0
 80080c0:	bfa2      	ittt	ge
 80080c2:	6821      	ldrge	r1, [r4, #0]
 80080c4:	f021 0104 	bicge.w	r1, r1, #4
 80080c8:	6021      	strge	r1, [r4, #0]
 80080ca:	b90d      	cbnz	r5, 80080d0 <_printf_i+0x110>
 80080cc:	2e00      	cmp	r6, #0
 80080ce:	d04b      	beq.n	8008168 <_printf_i+0x1a8>
 80080d0:	4616      	mov	r6, r2
 80080d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80080d6:	fb03 5711 	mls	r7, r3, r1, r5
 80080da:	5dc7      	ldrb	r7, [r0, r7]
 80080dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080e0:	462f      	mov	r7, r5
 80080e2:	42bb      	cmp	r3, r7
 80080e4:	460d      	mov	r5, r1
 80080e6:	d9f4      	bls.n	80080d2 <_printf_i+0x112>
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d10b      	bne.n	8008104 <_printf_i+0x144>
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	07df      	lsls	r7, r3, #31
 80080f0:	d508      	bpl.n	8008104 <_printf_i+0x144>
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	6861      	ldr	r1, [r4, #4]
 80080f6:	4299      	cmp	r1, r3
 80080f8:	bfde      	ittt	le
 80080fa:	2330      	movle	r3, #48	@ 0x30
 80080fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008100:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008104:	1b92      	subs	r2, r2, r6
 8008106:	6122      	str	r2, [r4, #16]
 8008108:	f8cd a000 	str.w	sl, [sp]
 800810c:	464b      	mov	r3, r9
 800810e:	aa03      	add	r2, sp, #12
 8008110:	4621      	mov	r1, r4
 8008112:	4640      	mov	r0, r8
 8008114:	f7ff fee6 	bl	8007ee4 <_printf_common>
 8008118:	3001      	adds	r0, #1
 800811a:	d14a      	bne.n	80081b2 <_printf_i+0x1f2>
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
 8008120:	b004      	add	sp, #16
 8008122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	f043 0320 	orr.w	r3, r3, #32
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	4833      	ldr	r0, [pc, #204]	@ (80081fc <_printf_i+0x23c>)
 8008130:	2778      	movs	r7, #120	@ 0x78
 8008132:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	6831      	ldr	r1, [r6, #0]
 800813a:	061f      	lsls	r7, r3, #24
 800813c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008140:	d402      	bmi.n	8008148 <_printf_i+0x188>
 8008142:	065f      	lsls	r7, r3, #25
 8008144:	bf48      	it	mi
 8008146:	b2ad      	uxthmi	r5, r5
 8008148:	6031      	str	r1, [r6, #0]
 800814a:	07d9      	lsls	r1, r3, #31
 800814c:	bf44      	itt	mi
 800814e:	f043 0320 	orrmi.w	r3, r3, #32
 8008152:	6023      	strmi	r3, [r4, #0]
 8008154:	b11d      	cbz	r5, 800815e <_printf_i+0x19e>
 8008156:	2310      	movs	r3, #16
 8008158:	e7ac      	b.n	80080b4 <_printf_i+0xf4>
 800815a:	4827      	ldr	r0, [pc, #156]	@ (80081f8 <_printf_i+0x238>)
 800815c:	e7e9      	b.n	8008132 <_printf_i+0x172>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	f023 0320 	bic.w	r3, r3, #32
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	e7f6      	b.n	8008156 <_printf_i+0x196>
 8008168:	4616      	mov	r6, r2
 800816a:	e7bd      	b.n	80080e8 <_printf_i+0x128>
 800816c:	6833      	ldr	r3, [r6, #0]
 800816e:	6825      	ldr	r5, [r4, #0]
 8008170:	6961      	ldr	r1, [r4, #20]
 8008172:	1d18      	adds	r0, r3, #4
 8008174:	6030      	str	r0, [r6, #0]
 8008176:	062e      	lsls	r6, r5, #24
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	d501      	bpl.n	8008180 <_printf_i+0x1c0>
 800817c:	6019      	str	r1, [r3, #0]
 800817e:	e002      	b.n	8008186 <_printf_i+0x1c6>
 8008180:	0668      	lsls	r0, r5, #25
 8008182:	d5fb      	bpl.n	800817c <_printf_i+0x1bc>
 8008184:	8019      	strh	r1, [r3, #0]
 8008186:	2300      	movs	r3, #0
 8008188:	6123      	str	r3, [r4, #16]
 800818a:	4616      	mov	r6, r2
 800818c:	e7bc      	b.n	8008108 <_printf_i+0x148>
 800818e:	6833      	ldr	r3, [r6, #0]
 8008190:	1d1a      	adds	r2, r3, #4
 8008192:	6032      	str	r2, [r6, #0]
 8008194:	681e      	ldr	r6, [r3, #0]
 8008196:	6862      	ldr	r2, [r4, #4]
 8008198:	2100      	movs	r1, #0
 800819a:	4630      	mov	r0, r6
 800819c:	f7f8 f828 	bl	80001f0 <memchr>
 80081a0:	b108      	cbz	r0, 80081a6 <_printf_i+0x1e6>
 80081a2:	1b80      	subs	r0, r0, r6
 80081a4:	6060      	str	r0, [r4, #4]
 80081a6:	6863      	ldr	r3, [r4, #4]
 80081a8:	6123      	str	r3, [r4, #16]
 80081aa:	2300      	movs	r3, #0
 80081ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081b0:	e7aa      	b.n	8008108 <_printf_i+0x148>
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	4632      	mov	r2, r6
 80081b6:	4649      	mov	r1, r9
 80081b8:	4640      	mov	r0, r8
 80081ba:	47d0      	blx	sl
 80081bc:	3001      	adds	r0, #1
 80081be:	d0ad      	beq.n	800811c <_printf_i+0x15c>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	079b      	lsls	r3, r3, #30
 80081c4:	d413      	bmi.n	80081ee <_printf_i+0x22e>
 80081c6:	68e0      	ldr	r0, [r4, #12]
 80081c8:	9b03      	ldr	r3, [sp, #12]
 80081ca:	4298      	cmp	r0, r3
 80081cc:	bfb8      	it	lt
 80081ce:	4618      	movlt	r0, r3
 80081d0:	e7a6      	b.n	8008120 <_printf_i+0x160>
 80081d2:	2301      	movs	r3, #1
 80081d4:	4632      	mov	r2, r6
 80081d6:	4649      	mov	r1, r9
 80081d8:	4640      	mov	r0, r8
 80081da:	47d0      	blx	sl
 80081dc:	3001      	adds	r0, #1
 80081de:	d09d      	beq.n	800811c <_printf_i+0x15c>
 80081e0:	3501      	adds	r5, #1
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	9903      	ldr	r1, [sp, #12]
 80081e6:	1a5b      	subs	r3, r3, r1
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	dcf2      	bgt.n	80081d2 <_printf_i+0x212>
 80081ec:	e7eb      	b.n	80081c6 <_printf_i+0x206>
 80081ee:	2500      	movs	r5, #0
 80081f0:	f104 0619 	add.w	r6, r4, #25
 80081f4:	e7f5      	b.n	80081e2 <_printf_i+0x222>
 80081f6:	bf00      	nop
 80081f8:	0801b221 	.word	0x0801b221
 80081fc:	0801b232 	.word	0x0801b232

08008200 <__sflush_r>:
 8008200:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008208:	0716      	lsls	r6, r2, #28
 800820a:	4605      	mov	r5, r0
 800820c:	460c      	mov	r4, r1
 800820e:	d454      	bmi.n	80082ba <__sflush_r+0xba>
 8008210:	684b      	ldr	r3, [r1, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	dc02      	bgt.n	800821c <__sflush_r+0x1c>
 8008216:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	dd48      	ble.n	80082ae <__sflush_r+0xae>
 800821c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800821e:	2e00      	cmp	r6, #0
 8008220:	d045      	beq.n	80082ae <__sflush_r+0xae>
 8008222:	2300      	movs	r3, #0
 8008224:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008228:	682f      	ldr	r7, [r5, #0]
 800822a:	6a21      	ldr	r1, [r4, #32]
 800822c:	602b      	str	r3, [r5, #0]
 800822e:	d030      	beq.n	8008292 <__sflush_r+0x92>
 8008230:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	0759      	lsls	r1, r3, #29
 8008236:	d505      	bpl.n	8008244 <__sflush_r+0x44>
 8008238:	6863      	ldr	r3, [r4, #4]
 800823a:	1ad2      	subs	r2, r2, r3
 800823c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800823e:	b10b      	cbz	r3, 8008244 <__sflush_r+0x44>
 8008240:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008242:	1ad2      	subs	r2, r2, r3
 8008244:	2300      	movs	r3, #0
 8008246:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008248:	6a21      	ldr	r1, [r4, #32]
 800824a:	4628      	mov	r0, r5
 800824c:	47b0      	blx	r6
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	d106      	bne.n	8008262 <__sflush_r+0x62>
 8008254:	6829      	ldr	r1, [r5, #0]
 8008256:	291d      	cmp	r1, #29
 8008258:	d82b      	bhi.n	80082b2 <__sflush_r+0xb2>
 800825a:	4a2a      	ldr	r2, [pc, #168]	@ (8008304 <__sflush_r+0x104>)
 800825c:	410a      	asrs	r2, r1
 800825e:	07d6      	lsls	r6, r2, #31
 8008260:	d427      	bmi.n	80082b2 <__sflush_r+0xb2>
 8008262:	2200      	movs	r2, #0
 8008264:	6062      	str	r2, [r4, #4]
 8008266:	04d9      	lsls	r1, r3, #19
 8008268:	6922      	ldr	r2, [r4, #16]
 800826a:	6022      	str	r2, [r4, #0]
 800826c:	d504      	bpl.n	8008278 <__sflush_r+0x78>
 800826e:	1c42      	adds	r2, r0, #1
 8008270:	d101      	bne.n	8008276 <__sflush_r+0x76>
 8008272:	682b      	ldr	r3, [r5, #0]
 8008274:	b903      	cbnz	r3, 8008278 <__sflush_r+0x78>
 8008276:	6560      	str	r0, [r4, #84]	@ 0x54
 8008278:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800827a:	602f      	str	r7, [r5, #0]
 800827c:	b1b9      	cbz	r1, 80082ae <__sflush_r+0xae>
 800827e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008282:	4299      	cmp	r1, r3
 8008284:	d002      	beq.n	800828c <__sflush_r+0x8c>
 8008286:	4628      	mov	r0, r5
 8008288:	f7ff fca0 	bl	8007bcc <_free_r>
 800828c:	2300      	movs	r3, #0
 800828e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008290:	e00d      	b.n	80082ae <__sflush_r+0xae>
 8008292:	2301      	movs	r3, #1
 8008294:	4628      	mov	r0, r5
 8008296:	47b0      	blx	r6
 8008298:	4602      	mov	r2, r0
 800829a:	1c50      	adds	r0, r2, #1
 800829c:	d1c9      	bne.n	8008232 <__sflush_r+0x32>
 800829e:	682b      	ldr	r3, [r5, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d0c6      	beq.n	8008232 <__sflush_r+0x32>
 80082a4:	2b1d      	cmp	r3, #29
 80082a6:	d001      	beq.n	80082ac <__sflush_r+0xac>
 80082a8:	2b16      	cmp	r3, #22
 80082aa:	d11e      	bne.n	80082ea <__sflush_r+0xea>
 80082ac:	602f      	str	r7, [r5, #0]
 80082ae:	2000      	movs	r0, #0
 80082b0:	e022      	b.n	80082f8 <__sflush_r+0xf8>
 80082b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082b6:	b21b      	sxth	r3, r3
 80082b8:	e01b      	b.n	80082f2 <__sflush_r+0xf2>
 80082ba:	690f      	ldr	r7, [r1, #16]
 80082bc:	2f00      	cmp	r7, #0
 80082be:	d0f6      	beq.n	80082ae <__sflush_r+0xae>
 80082c0:	0793      	lsls	r3, r2, #30
 80082c2:	680e      	ldr	r6, [r1, #0]
 80082c4:	bf08      	it	eq
 80082c6:	694b      	ldreq	r3, [r1, #20]
 80082c8:	600f      	str	r7, [r1, #0]
 80082ca:	bf18      	it	ne
 80082cc:	2300      	movne	r3, #0
 80082ce:	eba6 0807 	sub.w	r8, r6, r7
 80082d2:	608b      	str	r3, [r1, #8]
 80082d4:	f1b8 0f00 	cmp.w	r8, #0
 80082d8:	dde9      	ble.n	80082ae <__sflush_r+0xae>
 80082da:	6a21      	ldr	r1, [r4, #32]
 80082dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80082de:	4643      	mov	r3, r8
 80082e0:	463a      	mov	r2, r7
 80082e2:	4628      	mov	r0, r5
 80082e4:	47b0      	blx	r6
 80082e6:	2800      	cmp	r0, #0
 80082e8:	dc08      	bgt.n	80082fc <__sflush_r+0xfc>
 80082ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082fc:	4407      	add	r7, r0
 80082fe:	eba8 0800 	sub.w	r8, r8, r0
 8008302:	e7e7      	b.n	80082d4 <__sflush_r+0xd4>
 8008304:	dfbffffe 	.word	0xdfbffffe

08008308 <_fflush_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	690b      	ldr	r3, [r1, #16]
 800830c:	4605      	mov	r5, r0
 800830e:	460c      	mov	r4, r1
 8008310:	b913      	cbnz	r3, 8008318 <_fflush_r+0x10>
 8008312:	2500      	movs	r5, #0
 8008314:	4628      	mov	r0, r5
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	b118      	cbz	r0, 8008322 <_fflush_r+0x1a>
 800831a:	6a03      	ldr	r3, [r0, #32]
 800831c:	b90b      	cbnz	r3, 8008322 <_fflush_r+0x1a>
 800831e:	f7ff f989 	bl	8007634 <__sinit>
 8008322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0f3      	beq.n	8008312 <_fflush_r+0xa>
 800832a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800832c:	07d0      	lsls	r0, r2, #31
 800832e:	d404      	bmi.n	800833a <_fflush_r+0x32>
 8008330:	0599      	lsls	r1, r3, #22
 8008332:	d402      	bmi.n	800833a <_fflush_r+0x32>
 8008334:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008336:	f7ff fc38 	bl	8007baa <__retarget_lock_acquire_recursive>
 800833a:	4628      	mov	r0, r5
 800833c:	4621      	mov	r1, r4
 800833e:	f7ff ff5f 	bl	8008200 <__sflush_r>
 8008342:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008344:	07da      	lsls	r2, r3, #31
 8008346:	4605      	mov	r5, r0
 8008348:	d4e4      	bmi.n	8008314 <_fflush_r+0xc>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	059b      	lsls	r3, r3, #22
 800834e:	d4e1      	bmi.n	8008314 <_fflush_r+0xc>
 8008350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008352:	f7ff fc2b 	bl	8007bac <__retarget_lock_release_recursive>
 8008356:	e7dd      	b.n	8008314 <_fflush_r+0xc>

08008358 <__swhatbuf_r>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	460c      	mov	r4, r1
 800835c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008360:	2900      	cmp	r1, #0
 8008362:	b096      	sub	sp, #88	@ 0x58
 8008364:	4615      	mov	r5, r2
 8008366:	461e      	mov	r6, r3
 8008368:	da0d      	bge.n	8008386 <__swhatbuf_r+0x2e>
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008370:	f04f 0100 	mov.w	r1, #0
 8008374:	bf14      	ite	ne
 8008376:	2340      	movne	r3, #64	@ 0x40
 8008378:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800837c:	2000      	movs	r0, #0
 800837e:	6031      	str	r1, [r6, #0]
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	b016      	add	sp, #88	@ 0x58
 8008384:	bd70      	pop	{r4, r5, r6, pc}
 8008386:	466a      	mov	r2, sp
 8008388:	f000 f848 	bl	800841c <_fstat_r>
 800838c:	2800      	cmp	r0, #0
 800838e:	dbec      	blt.n	800836a <__swhatbuf_r+0x12>
 8008390:	9901      	ldr	r1, [sp, #4]
 8008392:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008396:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800839a:	4259      	negs	r1, r3
 800839c:	4159      	adcs	r1, r3
 800839e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083a2:	e7eb      	b.n	800837c <__swhatbuf_r+0x24>

080083a4 <__smakebuf_r>:
 80083a4:	898b      	ldrh	r3, [r1, #12]
 80083a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083a8:	079d      	lsls	r5, r3, #30
 80083aa:	4606      	mov	r6, r0
 80083ac:	460c      	mov	r4, r1
 80083ae:	d507      	bpl.n	80083c0 <__smakebuf_r+0x1c>
 80083b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	6123      	str	r3, [r4, #16]
 80083b8:	2301      	movs	r3, #1
 80083ba:	6163      	str	r3, [r4, #20]
 80083bc:	b003      	add	sp, #12
 80083be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083c0:	ab01      	add	r3, sp, #4
 80083c2:	466a      	mov	r2, sp
 80083c4:	f7ff ffc8 	bl	8008358 <__swhatbuf_r>
 80083c8:	9f00      	ldr	r7, [sp, #0]
 80083ca:	4605      	mov	r5, r0
 80083cc:	4639      	mov	r1, r7
 80083ce:	4630      	mov	r0, r6
 80083d0:	f7ff f818 	bl	8007404 <_malloc_r>
 80083d4:	b948      	cbnz	r0, 80083ea <__smakebuf_r+0x46>
 80083d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083da:	059a      	lsls	r2, r3, #22
 80083dc:	d4ee      	bmi.n	80083bc <__smakebuf_r+0x18>
 80083de:	f023 0303 	bic.w	r3, r3, #3
 80083e2:	f043 0302 	orr.w	r3, r3, #2
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	e7e2      	b.n	80083b0 <__smakebuf_r+0xc>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	6020      	str	r0, [r4, #0]
 80083ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083f2:	81a3      	strh	r3, [r4, #12]
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80083fa:	b15b      	cbz	r3, 8008414 <__smakebuf_r+0x70>
 80083fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008400:	4630      	mov	r0, r6
 8008402:	f000 f81d 	bl	8008440 <_isatty_r>
 8008406:	b128      	cbz	r0, 8008414 <__smakebuf_r+0x70>
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	f023 0303 	bic.w	r3, r3, #3
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	81a3      	strh	r3, [r4, #12]
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	431d      	orrs	r5, r3
 8008418:	81a5      	strh	r5, [r4, #12]
 800841a:	e7cf      	b.n	80083bc <__smakebuf_r+0x18>

0800841c <_fstat_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d07      	ldr	r5, [pc, #28]	@ (800843c <_fstat_r+0x20>)
 8008420:	2300      	movs	r3, #0
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	602b      	str	r3, [r5, #0]
 800842a:	f7f8 fe6f 	bl	800110c <_fstat>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d102      	bne.n	8008438 <_fstat_r+0x1c>
 8008432:	682b      	ldr	r3, [r5, #0]
 8008434:	b103      	cbz	r3, 8008438 <_fstat_r+0x1c>
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	bd38      	pop	{r3, r4, r5, pc}
 800843a:	bf00      	nop
 800843c:	2000237c 	.word	0x2000237c

08008440 <_isatty_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d06      	ldr	r5, [pc, #24]	@ (800845c <_isatty_r+0x1c>)
 8008444:	2300      	movs	r3, #0
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	602b      	str	r3, [r5, #0]
 800844c:	f7f8 fe0c 	bl	8001068 <_isatty>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_isatty_r+0x1a>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_isatty_r+0x1a>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	2000237c 	.word	0x2000237c

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr
