
optimization_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012d0c  080083a8  080083a8  000093a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b0b4  0801b0b4  0001d468  2**0
                  CONTENTS
  4 .ARM          00000008  0801b0b4  0801b0b4  0001c0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b0bc  0801b0bc  0001d468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b0bc  0801b0bc  0001c0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b0c0  0801b0c0  0001c0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  0801b0c4  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  20000468  0801b52c  0001d468  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001f84  0801b52c  0001df84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d468  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040781  00000000  00000000  0001d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077ec  00000000  00000000  0005dc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00016c22  00000000  00000000  00065405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001858  00000000  00000000  0007c028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002bb4  00000000  00000000  0007d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030e1c  00000000  00000000  00080434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a09b  00000000  00000000  000b1250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00123885  00000000  00000000  000eb2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0020eb70  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005068  00000000  00000000  0020ec2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00213c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000835f  00000000  00000000  00213cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000011a8  00000000  00000000  0021c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000468 	.word	0x20000468
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008390 	.word	0x08008390

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000046c 	.word	0x2000046c
 80001ec:	08008390 	.word	0x08008390

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000582:	4826      	ldr	r0, [pc, #152]	@ (800061c <MX_ADC1_Init+0x9c>)
 8000584:	4a26      	ldr	r2, [pc, #152]	@ (8000620 <MX_ADC1_Init+0xa0>)
 8000586:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000588:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
  ADC_MultiModeTypeDef multimode = {0};
 800058c:	2300      	movs	r3, #0
{
 800058e:	b08a      	sub	sp, #40	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000590:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	2204      	movs	r2, #4
 8000594:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000598:	2201      	movs	r2, #1
  ADC_MultiModeTypeDef multimode = {0};
 800059a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800059e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80005a2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80005a6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	9309      	str	r3, [sp, #36]	@ 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b0:	8303      	strh	r3, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 80005b2:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005b4:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005bc:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005be:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005c2:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80005c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ca:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ce:	f002 f9d5 	bl	800297c <HAL_ADC_Init>
 80005d2:	b9c0      	cbnz	r0, 8000606 <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d4:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005d6:	4811      	ldr	r0, [pc, #68]	@ (800061c <MX_ADC1_Init+0x9c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d8:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005da:	a901      	add	r1, sp, #4
 80005dc:	f002 feb8 	bl	8003350 <HAL_ADCEx_MultiModeConfigChannel>
 80005e0:	b9c0      	cbnz	r0, 8000614 <MX_ADC1_Init+0x94>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005e2:	4a10      	ldr	r2, [pc, #64]	@ (8000624 <MX_ADC1_Init+0xa4>)
 80005e4:	9204      	str	r2, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e6:	227f      	movs	r2, #127	@ 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005e8:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ea:	2406      	movs	r4, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ec:	9207      	str	r2, [sp, #28]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ee:	480b      	ldr	r0, [pc, #44]	@ (800061c <MX_ADC1_Init+0x9c>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f0:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	a904      	add	r1, sp, #16
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005f4:	e9cd 4305 	strd	r4, r3, [sp, #20]
  sConfig.Offset = 0;
 80005f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fc:	f002 fae8 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 8000600:	b920      	cbnz	r0, 800060c <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000602:	b00a      	add	sp, #40	@ 0x28
 8000604:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000606:	f000 fc03 	bl	8000e10 <Error_Handler>
 800060a:	e7e3      	b.n	80005d4 <MX_ADC1_Init+0x54>
    Error_Handler();
 800060c:	f000 fc00 	bl	8000e10 <Error_Handler>
}
 8000610:	b00a      	add	sp, #40	@ 0x28
 8000612:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000614:	f000 fbfc 	bl	8000e10 <Error_Handler>
 8000618:	e7e3      	b.n	80005e2 <MX_ADC1_Init+0x62>
 800061a:	bf00      	nop
 800061c:	200004cc 	.word	0x200004cc
 8000620:	50040000 	.word	0x50040000
 8000624:	14f00020 	.word	0x14f00020

08000628 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	4604      	mov	r4, r0
 800062c:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000630:	228c      	movs	r2, #140	@ 0x8c
 8000632:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000638:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800063c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063e:	f007 f9c3 	bl	80079c8 <memset>
  if(adcHandle->Instance==ADC1)
 8000642:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <HAL_ADC_MspInit+0xb8>)
 8000644:	6822      	ldr	r2, [r4, #0]
 8000646:	429a      	cmp	r2, r3
 8000648:	d001      	beq.n	800064e <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800064a:	b02a      	add	sp, #168	@ 0xa8
 800064c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800064e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000652:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000656:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000658:	9207      	str	r2, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800065a:	9326      	str	r3, [sp, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065c:	f004 fa48 	bl	8004af0 <HAL_RCCEx_PeriphCLKConfig>
 8000660:	2800      	cmp	r0, #0
 8000662:	d136      	bne.n	80006d2 <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000664:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Instance = DMA1_Channel1;
 8000666:	4d20      	ldr	r5, [pc, #128]	@ (80006e8 <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8000668:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800066a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800066e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000670:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000672:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8000676:	9200      	str	r2, [sp, #0]
 8000678:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800067c:	f042 0201 	orr.w	r2, r2, #1
 8000680:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000684:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800068c:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000692:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000696:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f003 fb07 	bl	8003cb0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80006a2:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006a4:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006a6:	e9c5 2600 	strd	r2, r6, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006aa:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006b4:	e9c5 2305 	strd	r2, r3, [r5, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006b8:	4628      	mov	r0, r5
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ba:	2320      	movs	r3, #32
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006bc:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006c0:	e9c5 3607 	strd	r3, r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c4:	f003 f9f6 	bl	8003ab4 <HAL_DMA_Init>
 80006c8:	b930      	cbnz	r0, 80006d8 <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ca:	6525      	str	r5, [r4, #80]	@ 0x50
 80006cc:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80006ce:	b02a      	add	sp, #168	@ 0xa8
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80006d2:	f000 fb9d 	bl	8000e10 <Error_Handler>
 80006d6:	e7c5      	b.n	8000664 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 80006d8:	f000 fb9a 	bl	8000e10 <Error_Handler>
 80006dc:	e7f5      	b.n	80006ca <HAL_ADC_MspInit+0xa2>
 80006de:	bf00      	nop
 80006e0:	50040000 	.word	0x50040000
 80006e4:	40021000 	.word	0x40021000
 80006e8:	20000484 	.word	0x20000484
 80006ec:	40020008 	.word	0x40020008

080006f0 <send_spectrogram>:
		DEBUG_PRINT("Packet counter overflow.\r\n");
		Error_Handler();
	}
}

static void send_spectrogram() {
 80006f0:	b510      	push	{r4, lr}
 80006f2:	f5ad 6d1b 	sub.w	sp, sp, #2480	@ 0x9b0
	uint8_t packet[PACKET_LENGTH];

	START_CYCLE_COUNT_ENCODE_PACKET();
 80006f6:	f002 f865 	bl	80027c4 <start_cycle_count>
	for (size_t i=0; i<N_MELVECS; i++) {
 80006fa:	491d      	ldr	r1, [pc, #116]	@ (8000770 <send_spectrogram+0x80>)
 80006fc:	ab01      	add	r3, sp, #4
 80006fe:	f50d 7e49 	add.w	lr, sp, #804	@ 0x324
static void send_spectrogram() {
 8000702:	4608      	mov	r0, r1
 8000704:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 8000708:	f930 2f02 	ldrsh.w	r2, [r0, #2]!
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2+1] = mel_vectors[i][j] & 0xFF;
 800070c:	725a      	strb	r2, [r3, #9]
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 800070e:	1212      	asrs	r2, r2, #8
 8000710:	721a      	strb	r2, [r3, #8]
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 8000712:	3302      	adds	r3, #2
 8000714:	4563      	cmp	r3, ip
 8000716:	d1f7      	bne.n	8000708 <send_spectrogram+0x18>
	for (size_t i=0; i<N_MELVECS; i++) {
 8000718:	459e      	cmp	lr, r3
 800071a:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 800071e:	d1f0      	bne.n	8000702 <send_spectrogram+0x12>
	make_packet(packet, PAYLOAD_LENGTH, 0, *packet_cnt);
 8000720:	4c14      	ldr	r4, [pc, #80]	@ (8000774 <send_spectrogram+0x84>)
 8000722:	2200      	movs	r2, #0
 8000724:	6823      	ldr	r3, [r4, #0]
 8000726:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800072a:	a801      	add	r0, sp, #4
 800072c:	f000 fc8e 	bl	800104c <make_packet>
	*packet_cnt += 1;
 8000730:	6823      	ldr	r3, [r4, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	6023      	str	r3, [r4, #0]
	if (*packet_cnt == 0) {
 8000736:	b1a3      	cbz	r3, 8000762 <send_spectrogram+0x72>
	encode_packet(packet, &packet_cnt);
	STOP_CYCLE_COUNT_ENCODE_PACKET("Encode Packet");
 8000738:	480f      	ldr	r0, [pc, #60]	@ (8000778 <send_spectrogram+0x88>)
 800073a:	f002 f863 	bl	8002804 <stop_cycle_count>

	START_CYCLE_COUNT_SEND_PACKET();
	S2LP_Send(packet, PACKET_LENGTH);
 800073e:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8000742:	a801      	add	r0, sp, #4
 8000744:	f000 fe0a 	bl	800135c <S2LP_Send>
	hex_encode(hex_encoded_packet, packet, PACKET_LENGTH);
 8000748:	a8cf      	add	r0, sp, #828	@ 0x33c
 800074a:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800074e:	a901      	add	r1, sp, #4
 8000750:	f002 f874 	bl	800283c <hex_encode>
	DEBUG_PRINT("DF:HEX:%s\r\n", hex_encoded_packet);
 8000754:	a9cf      	add	r1, sp, #828	@ 0x33c
 8000756:	4809      	ldr	r0, [pc, #36]	@ (800077c <send_spectrogram+0x8c>)
 8000758:	f006 ff3a 	bl	80075d0 <iprintf>
	STOP_CYCLE_COUNT_SEND_PACKET("Send Packet");

	print_encoded_packet(packet);
}
 800075c:	f50d 6d1b 	add.w	sp, sp, #2480	@ 0x9b0
 8000760:	bd10      	pop	{r4, pc}
		DEBUG_PRINT("Packet counter overflow.\r\n");
 8000762:	4807      	ldr	r0, [pc, #28]	@ (8000780 <send_spectrogram+0x90>)
 8000764:	f006 ff9c 	bl	80076a0 <puts>
		Error_Handler();
 8000768:	f000 fb52 	bl	8000e10 <Error_Handler>
 800076c:	e7e4      	b.n	8000738 <send_spectrogram+0x48>
 800076e:	bf00      	nop
 8000770:	2000053a 	.word	0x2000053a
 8000774:	20000538 	.word	0x20000538
 8000778:	08008668 	.word	0x08008668
 800077c:	08008678 	.word	0x08008678
 8000780:	0800864c 	.word	0x0800864c

08000784 <StartADCAcq>:
int StartADCAcq(int32_t n_bufs) {
 8000784:	b508      	push	{r3, lr}
	cur_melvec = 0;
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <StartADCAcq+0x20>)
	rem_n_bufs = n_bufs;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <StartADCAcq+0x24>)
	cur_melvec = 0;
 800078a:	2100      	movs	r1, #0
	rem_n_bufs = n_bufs;
 800078c:	6018      	str	r0, [r3, #0]
	cur_melvec = 0;
 800078e:	7011      	strb	r1, [r2, #0]
	if (rem_n_bufs != 0) {
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	b900      	cbnz	r0, 8000796 <StartADCAcq+0x12>
}
 8000794:	bd08      	pop	{r3, pc}
		return HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDoubleBuf, 2*ADC_BUF_SIZE);
 8000796:	4905      	ldr	r1, [pc, #20]	@ (80007ac <StartADCAcq+0x28>)
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <StartADCAcq+0x2c>)
 800079a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800079e:	f002 fcd5 	bl	800314c <HAL_ADC_Start_DMA>
}
 80007a2:	bd08      	pop	{r3, pc}
 80007a4:	2000085c 	.word	0x2000085c
 80007a8:	20000534 	.word	0x20000534
 80007ac:	20000864 	.word	0x20000864
 80007b0:	200004cc 	.word	0x200004cc

080007b4 <IsADCFinished>:
	return (rem_n_bufs == 0);
 80007b4:	4b02      	ldr	r3, [pc, #8]	@ (80007c0 <IsADCFinished+0xc>)
 80007b6:	6818      	ldr	r0, [r3, #0]
}
 80007b8:	fab0 f080 	clz	r0, r0
 80007bc:	0940      	lsrs	r0, r0, #5
 80007be:	4770      	bx	lr
 80007c0:	20000534 	.word	0x20000534

080007c4 <HAL_ADC_ConvCpltCallback>:
		send_spectrogram();
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80007c4:	b570      	push	{r4, r5, r6, lr}
	if (rem_n_bufs != -1) {
 80007c6:	4c1b      	ldr	r4, [pc, #108]	@ (8000834 <HAL_ADC_ConvCpltCallback+0x70>)
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	d002      	beq.n	80007d4 <HAL_ADC_ConvCpltCallback+0x10>
		rem_n_bufs--;
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	6023      	str	r3, [r4, #0]
	if (rem_n_bufs == 0) {
 80007d4:	6826      	ldr	r6, [r4, #0]
 80007d6:	b306      	cbz	r6, 800081a <HAL_ADC_ConvCpltCallback+0x56>
	} else if (ADCDataRdy[1-buf_cplt]) {
 80007d8:	4e17      	ldr	r6, [pc, #92]	@ (8000838 <HAL_ADC_ConvCpltCallback+0x74>)
 80007da:	7833      	ldrb	r3, [r6, #0]
 80007dc:	b9bb      	cbnz	r3, 800080e <HAL_ADC_ConvCpltCallback+0x4a>
 80007de:	4d17      	ldr	r5, [pc, #92]	@ (800083c <HAL_ADC_ConvCpltCallback+0x78>)
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 80007e0:	4817      	ldr	r0, [pc, #92]	@ (8000840 <HAL_ADC_ConvCpltCallback+0x7c>)
	ADCDataRdy[buf_cplt] = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	7073      	strb	r3, [r6, #1]
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 80007e6:	f001 fd93 	bl	8002310 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 80007ea:	782b      	ldrb	r3, [r5, #0]
 80007ec:	4915      	ldr	r1, [pc, #84]	@ (8000844 <HAL_ADC_ConvCpltCallback+0x80>)
 80007ee:	4814      	ldr	r0, [pc, #80]	@ (8000840 <HAL_ADC_ConvCpltCallback+0x7c>)
 80007f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80007f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80007f8:	f001 fd9e 	bl	8002338 <Spectrogram_Compute>
	cur_melvec++;
 80007fc:	782b      	ldrb	r3, [r5, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b2db      	uxtb	r3, r3
	ADCDataRdy[buf_cplt] = 0;
 8000802:	2200      	movs	r2, #0
	cur_melvec++;
 8000804:	702b      	strb	r3, [r5, #0]
	ADCDataRdy[buf_cplt] = 0;
 8000806:	7072      	strb	r2, [r6, #1]
	if (rem_n_bufs == 0) {
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	b173      	cbz	r3, 800082a <HAL_ADC_ConvCpltCallback+0x66>
	ADC_Callback(1);
}
 800080c:	bd70      	pop	{r4, r5, r6, pc}
		DEBUG_PRINT("Error: ADC Data buffer full\r\n");
 800080e:	480e      	ldr	r0, [pc, #56]	@ (8000848 <HAL_ADC_ConvCpltCallback+0x84>)
 8000810:	f006 ff46 	bl	80076a0 <puts>
		Error_Handler();
 8000814:	f000 fafc 	bl	8000e10 <Error_Handler>
 8000818:	e7e1      	b.n	80007de <HAL_ADC_ConvCpltCallback+0x1a>
			cur_melvec = 0;
 800081a:	4d08      	ldr	r5, [pc, #32]	@ (800083c <HAL_ADC_ConvCpltCallback+0x78>)
			send_spectrogram();
 800081c:	f7ff ff68 	bl	80006f0 <send_spectrogram>
			rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 8000820:	2314      	movs	r3, #20
			cur_melvec = 0;
 8000822:	702e      	strb	r6, [r5, #0]
			rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 8000824:	4e04      	ldr	r6, [pc, #16]	@ (8000838 <HAL_ADC_ConvCpltCallback+0x74>)
 8000826:	6023      	str	r3, [r4, #0]
 8000828:	e7da      	b.n	80007e0 <HAL_ADC_ConvCpltCallback+0x1c>
}
 800082a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		send_spectrogram();
 800082e:	f7ff bf5f 	b.w	80006f0 <send_spectrogram>
 8000832:	bf00      	nop
 8000834:	20000534 	.word	0x20000534
 8000838:	20000860 	.word	0x20000860
 800083c:	2000085c 	.word	0x2000085c
 8000840:	20000c64 	.word	0x20000c64
 8000844:	2000053c 	.word	0x2000053c
 8000848:	08008684 	.word	0x08008684

0800084c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800084c:	b570      	push	{r4, r5, r6, lr}
	if (rem_n_bufs != -1) {
 800084e:	4c1b      	ldr	r4, [pc, #108]	@ (80008bc <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	d002      	beq.n	800085c <HAL_ADC_ConvHalfCpltCallback+0x10>
		rem_n_bufs--;
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	3b01      	subs	r3, #1
 800085a:	6023      	str	r3, [r4, #0]
	if (rem_n_bufs == 0) {
 800085c:	6826      	ldr	r6, [r4, #0]
 800085e:	b306      	cbz	r6, 80008a2 <HAL_ADC_ConvHalfCpltCallback+0x56>
	} else if (ADCDataRdy[1-buf_cplt]) {
 8000860:	4e17      	ldr	r6, [pc, #92]	@ (80008c0 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000862:	7873      	ldrb	r3, [r6, #1]
 8000864:	b9bb      	cbnz	r3, 8000896 <HAL_ADC_ConvHalfCpltCallback+0x4a>
 8000866:	4d17      	ldr	r5, [pc, #92]	@ (80008c4 <HAL_ADC_ConvHalfCpltCallback+0x78>)
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 8000868:	4817      	ldr	r0, [pc, #92]	@ (80008c8 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
	ADCDataRdy[buf_cplt] = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	7033      	strb	r3, [r6, #0]
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 800086e:	f001 fd4f 	bl	8002310 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 8000872:	782b      	ldrb	r3, [r5, #0]
 8000874:	4915      	ldr	r1, [pc, #84]	@ (80008cc <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8000876:	4814      	ldr	r0, [pc, #80]	@ (80008c8 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8000878:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800087c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8000880:	f001 fd5a 	bl	8002338 <Spectrogram_Compute>
	cur_melvec++;
 8000884:	782b      	ldrb	r3, [r5, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	b2db      	uxtb	r3, r3
	ADCDataRdy[buf_cplt] = 0;
 800088a:	2200      	movs	r2, #0
	cur_melvec++;
 800088c:	702b      	strb	r3, [r5, #0]
	ADCDataRdy[buf_cplt] = 0;
 800088e:	7032      	strb	r2, [r6, #0]
	if (rem_n_bufs == 0) {
 8000890:	6823      	ldr	r3, [r4, #0]
 8000892:	b173      	cbz	r3, 80008b2 <HAL_ADC_ConvHalfCpltCallback+0x66>
	ADC_Callback(0);
}
 8000894:	bd70      	pop	{r4, r5, r6, pc}
		DEBUG_PRINT("Error: ADC Data buffer full\r\n");
 8000896:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000898:	f006 ff02 	bl	80076a0 <puts>
		Error_Handler();
 800089c:	f000 fab8 	bl	8000e10 <Error_Handler>
 80008a0:	e7e1      	b.n	8000866 <HAL_ADC_ConvHalfCpltCallback+0x1a>
			cur_melvec = 0;
 80008a2:	4d08      	ldr	r5, [pc, #32]	@ (80008c4 <HAL_ADC_ConvHalfCpltCallback+0x78>)
			send_spectrogram();
 80008a4:	f7ff ff24 	bl	80006f0 <send_spectrogram>
			rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 80008a8:	2314      	movs	r3, #20
			cur_melvec = 0;
 80008aa:	702e      	strb	r6, [r5, #0]
			rem_n_bufs = N_MELVECS; // Reset to collect next set of vectors
 80008ac:	4e04      	ldr	r6, [pc, #16]	@ (80008c0 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80008ae:	6023      	str	r3, [r4, #0]
 80008b0:	e7da      	b.n	8000868 <HAL_ADC_ConvHalfCpltCallback+0x1c>
}
 80008b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		send_spectrogram();
 80008b6:	f7ff bf1b 	b.w	80006f0 <send_spectrogram>
 80008ba:	bf00      	nop
 80008bc:	20000534 	.word	0x20000534
 80008c0:	20000860 	.word	0x20000860
 80008c4:	2000085c 	.word	0x2000085c
 80008c8:	20000864 	.word	0x20000864
 80008cc:	2000053c 	.word	0x2000053c
 80008d0:	08008684 	.word	0x08008684
 80008d4:	00000000 	.word	0x00000000

080008d8 <MX_AES_Init>:
/* AES init function */
void MX_AES_Init(void)
{

  /* USER CODE BEGIN AES_Init 0 */
  __HAL_RCC_AES_CLK_ENABLE();
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_AES_Init+0x60>)

  // only possible configuration for CMAC
  //hcryp.Init.OperatingMode = CRYP_ALGOMODE_TAG_GENERATION;

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80008da:	4818      	ldr	r0, [pc, #96]	@ (800093c <MX_AES_Init+0x64>)
  __HAL_RCC_AES_CLK_ENABLE();
 80008dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  hcryp.Instance = AES;
 80008de:	4918      	ldr	r1, [pc, #96]	@ (8000940 <MX_AES_Init+0x68>)
{
 80008e0:	b510      	push	{r4, lr}
  __HAL_RCC_AES_CLK_ENABLE();
 80008e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80008e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 80008e8:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000928 <MX_AES_Init+0x50>
  __HAL_RCC_AES_CLK_ENABLE();
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
  hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
  hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 80008ee:	4a15      	ldr	r2, [pc, #84]	@ (8000944 <MX_AES_Init+0x6c>)
  hcryp.Instance = AES;
 80008f0:	6001      	str	r1, [r0, #0]
{
 80008f2:	b082      	sub	sp, #8
  __HAL_RCC_AES_CLK_ENABLE();
 80008f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 80008f8:	ed80 7b02 	vstr	d7, [r0, #8]
 80008fc:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8000930 <MX_AES_Init+0x58>
  __HAL_RCC_AES_CLK_ENABLE();
 8000900:	9301      	str	r3, [sp, #4]
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_AES_Init+0x70>)
  __HAL_RCC_AES_CLK_ENABLE();
 8000904:	9c01      	ldr	r4, [sp, #4]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8000906:	2100      	movs	r1, #0
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000908:	ed80 7b04 	vstr	d7, [r0, #16]
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 800090c:	e9c0 2308 	strd	r2, r3, [r0, #32]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8000910:	6181      	str	r1, [r0, #24]
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000912:	f002 fe2b 	bl	800356c <HAL_CRYP_Init>
 8000916:	b908      	cbnz	r0, 800091c <MX_AES_Init+0x44>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8000918:	b002      	add	sp, #8
 800091a:	bd10      	pop	{r4, pc}
 800091c:	b002      	add	sp, #8
 800091e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000922:	f000 ba75 	b.w	8000e10 <Error_Handler>
 8000926:	bf00      	nop
 8000928:	00000004 	.word	0x00000004
	...
 8000934:	00000020 	.word	0x00000020
 8000938:	40021000 	.word	0x40021000
 800093c:	20001068 	.word	0x20001068
 8000940:	50060000 	.word	0x50060000
 8000944:	080086b4 	.word	0x080086b4
 8000948:	080086a4 	.word	0x080086a4

0800094c <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <HAL_CRYP_MspInit+0x2c>)
 800094e:	6802      	ldr	r2, [r0, #0]
 8000950:	429a      	cmp	r2, r3
 8000952:	d000      	beq.n	8000956 <HAL_CRYP_MspInit+0xa>
 8000954:	4770      	bx	lr
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8000956:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 800095a:	f5a3 337c 	sub.w	r3, r3, #258048	@ 0x3f000
{
 800095e:	b082      	sub	sp, #8
    __HAL_RCC_AES_CLK_ENABLE();
 8000960:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000962:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000966:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8000972:	b002      	add	sp, #8
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	50060000 	.word	0x50060000

0800097c <HAL_CRYP_MspDeInit>:

void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_CRYP_MspDeInit+0x18>)
 800097e:	6802      	ldr	r2, [r0, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d000      	beq.n	8000986 <HAL_CRYP_MspDeInit+0xa>
    __HAL_RCC_AES_CLK_DISABLE();
  /* USER CODE BEGIN AES_MspDeInit 1 */

  /* USER CODE END AES_MspDeInit 1 */
  }
}
 8000984:	4770      	bx	lr
    __HAL_RCC_AES_CLK_DISABLE();
 8000986:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <HAL_CRYP_MspDeInit+0x1c>)
 8000988:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800098a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800098e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	50060000 	.word	0x50060000
 8000998:	40021000 	.word	0x40021000

0800099c <arm_absmax_q15>:
void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
  /* Load first input value that act as reference value for comparision */                                  \
  out = *pSrc++;                                                                                            \
 80009a0:	4680      	mov	r8, r0
 80009a2:	f938 cb02 	ldrsh.w	ip, [r8], #2
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 80009a6:	f1bc 0f00 	cmp.w	ip, #0
 80009aa:	dc04      	bgt.n	80009b6 <arm_absmax_q15+0x1a>

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80009ac:	2400      	movs	r4, #0
 80009ae:	fad4 f41c 	qsub16	r4, r4, ip
 80009b2:	fa0f fc84 	sxth.w	ip, r4
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 80009b6:	f101 39ff 	add.w	r9, r1, #4294967295
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 80009ba:	ea5f 0a99 	movs.w	sl, r9, lsr #2
 80009be:	d07c      	beq.n	8000aba <arm_absmax_q15+0x11e>
  index = 0U;                                                                                               \
 80009c0:	2400      	movs	r4, #0
 80009c2:	300a      	adds	r0, #10
 80009c4:	ea4f 078a 	mov.w	r7, sl, lsl #2
  outIndex = 0U;                                                                                            \
 80009c8:	4625      	mov	r5, r4
 80009ca:	4626      	mov	r6, r4
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 80009cc:	f930 ec08 	ldrsh.w	lr, [r0, #-8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80009d0:	f1be 0f00 	cmp.w	lr, #0
 80009d4:	dc03      	bgt.n	80009de <arm_absmax_q15+0x42>
 80009d6:	fad6 fe1e 	qsub16	lr, r6, lr
 80009da:	fa0f fe8e 	sxth.w	lr, lr
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 80009de:	45e6      	cmp	lr, ip
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
      outIndex = index + 1U;                                                                                \
 80009e0:	bfc8      	it	gt
 80009e2:	46f4      	movgt	ip, lr
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 80009e4:	f930 ec06 	ldrsh.w	lr, [r0, #-6]
      outIndex = index + 1U;                                                                                \
 80009e8:	bfc8      	it	gt
 80009ea:	1c65      	addgt	r5, r4, #1
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80009ec:	f1be 0f00 	cmp.w	lr, #0
 80009f0:	dc03      	bgt.n	80009fa <arm_absmax_q15+0x5e>
 80009f2:	fad6 fe1e 	qsub16	lr, r6, lr
 80009f6:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                         \
 80009fa:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 2U;                                                                                \
 80009fc:	bfb8      	it	lt
 80009fe:	46f4      	movlt	ip, lr
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8000a00:	f930 ec04 	ldrsh.w	lr, [r0, #-4]
      outIndex = index + 2U;                                                                                \
 8000a04:	bfb8      	it	lt
 8000a06:	1ca5      	addlt	r5, r4, #2
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8000a08:	f1be 0f00 	cmp.w	lr, #0
 8000a0c:	dc03      	bgt.n	8000a16 <arm_absmax_q15+0x7a>
 8000a0e:	fad6 fe1e 	qsub16	lr, r6, lr
 8000a12:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                          \
 8000a16:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 3U;                                                                                \
 8000a18:	bfa8      	it	ge
 8000a1a:	46e6      	movge	lr, ip
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8000a1c:	f930 cc02 	ldrsh.w	ip, [r0, #-2]
      outIndex = index + 3U;                                                                                \
 8000a20:	bfb8      	it	lt
 8000a22:	1ce5      	addlt	r5, r4, #3
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8000a24:	f1bc 0f00 	cmp.w	ip, #0
 8000a28:	dc03      	bgt.n	8000a32 <arm_absmax_q15+0x96>
 8000a2a:	fad6 fc1c 	qsub16	ip, r6, ip
 8000a2e:	fa0f fc8c 	sxth.w	ip, ip
    if (cur_absmax > out)                                                                          \
 8000a32:	45e6      	cmp	lr, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 4U;                                                                                \
 8000a34:	f104 0404 	add.w	r4, r4, #4
    if (cur_absmax > out)                                                                          \
 8000a38:	bfac      	ite	ge
 8000a3a:	46f4      	movge	ip, lr
      outIndex = index + 4U;                                                                                \
 8000a3c:	4625      	movlt	r5, r4
  while (blkCnt > 0U)                                                                                       \
 8000a3e:	42bc      	cmp	r4, r7
 8000a40:	f100 0008 	add.w	r0, r0, #8
 8000a44:	d1c2      	bne.n	80009cc <arm_absmax_q15+0x30>
    cur_absmax = *pSrc++;                                                                                     \
 8000a46:	eb08 08ca 	add.w	r8, r8, sl, lsl #3
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8000a4a:	f019 0403 	ands.w	r4, r9, #3
 8000a4e:	d01f      	beq.n	8000a90 <arm_absmax_q15+0xf4>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8000a50:	f9b8 0000 	ldrsh.w	r0, [r8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8000a54:	2800      	cmp	r0, #0
 8000a56:	dd20      	ble.n	8000a9a <arm_absmax_q15+0xfe>
    if (cur_absmax > out)                                                                         \
 8000a58:	4560      	cmp	r0, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = blockSize - blkCnt;                                                                        \
 8000a5a:	bfc4      	itt	gt
 8000a5c:	4684      	movgt	ip, r0
 8000a5e:	1b0d      	subgt	r5, r1, r4
  while (blkCnt > 0U)                                                                                       \
 8000a60:	1e66      	subs	r6, r4, #1
 8000a62:	d015      	beq.n	8000a90 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 8000a64:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	dd1b      	ble.n	8000aa4 <arm_absmax_q15+0x108>
    if (cur_absmax > out)                                                                         \
 8000a6c:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8000a6e:	bfbc      	itt	lt
 8000a70:	1b8d      	sublt	r5, r1, r6
 8000a72:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 8000a74:	2c02      	cmp	r4, #2
 8000a76:	d00b      	beq.n	8000a90 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 8000a78:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	dc03      	bgt.n	8000a88 <arm_absmax_q15+0xec>
 8000a80:	2000      	movs	r0, #0
 8000a82:	fad0 f111 	qsub16	r1, r0, r1
 8000a86:	b209      	sxth	r1, r1
    if (cur_absmax > out)                                                                         \
 8000a88:	4561      	cmp	r1, ip
 8000a8a:	bfc4      	itt	gt
 8000a8c:	464d      	movgt	r5, r9
 8000a8e:	468c      	movgt	ip, r1
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8000a90:	f8a2 c000 	strh.w	ip, [r2]
  *pIndex = outIndex;
 8000a94:	601d      	str	r5, [r3, #0]
}
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	2600      	movs	r6, #0
 8000a9c:	fad6 f010 	qsub16	r0, r6, r0
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8000aa0:	b200      	sxth	r0, r0
 8000aa2:	e7d9      	b.n	8000a58 <arm_absmax_q15+0xbc>
 8000aa4:	2700      	movs	r7, #0
 8000aa6:	fad7 f010 	qsub16	r0, r7, r0
 8000aaa:	b200      	sxth	r0, r0
    if (cur_absmax > out)                                                                         \
 8000aac:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8000aae:	bfbc      	itt	lt
 8000ab0:	1b8d      	sublt	r5, r1, r6
 8000ab2:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 8000ab4:	2c02      	cmp	r4, #2
 8000ab6:	d1df      	bne.n	8000a78 <arm_absmax_q15+0xdc>
 8000ab8:	e7ea      	b.n	8000a90 <arm_absmax_q15+0xf4>
  outIndex = 0U;                                                                                            \
 8000aba:	4655      	mov	r5, sl
 8000abc:	e7c5      	b.n	8000a4a <arm_absmax_q15+0xae>
 8000abe:	bf00      	nop

08000ac0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <MX_DMA_Init+0x2c>)
{
 8000ac2:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac4:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000ac6:	f041 0101 	orr.w	r1, r1, #1
 8000aca:	6499      	str	r1, [r3, #72]	@ 0x48
 8000acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 8000ace:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000ad0:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000ad6:	200b      	movs	r0, #11
 8000ad8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ada:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000adc:	f002 fcb8 	bl	8003450 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ae0:	200b      	movs	r0, #11

}
 8000ae2:	b003      	add	sp, #12
 8000ae4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ae8:	f002 bcee 	b.w	80034c8 <HAL_NVIC_EnableIRQ>
 8000aec:	40021000 	.word	0x40021000

08000af0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	2400      	movs	r4, #0
{
 8000af6:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000afc:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b00:	4b98      	ldr	r3, [pc, #608]	@ (8000d64 <MX_GPIO_Init+0x274>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8000b06:	4f98      	ldr	r7, [pc, #608]	@ (8000d68 <MX_GPIO_Init+0x278>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8000b08:	f8df a26c 	ldr.w	sl, [pc, #620]	@ 8000d78 <MX_GPIO_Init+0x288>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8000b0c:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 8000d7c <MX_GPIO_Init+0x28c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b10:	f8df 826c 	ldr.w	r8, [pc, #620]	@ 8000d80 <MX_GPIO_Init+0x290>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b14:	4e95      	ldr	r6, [pc, #596]	@ (8000d6c <MX_GPIO_Init+0x27c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	f042 0210 	orr.w	r2, r2, #16
 8000b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b1e:	f002 0210 	and.w	r2, r2, #16
 8000b22:	9200      	str	r2, [sp, #0]
 8000b24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b28:	f042 0204 	orr.w	r2, r2, #4
 8000b2c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b30:	f002 0204 	and.w	r2, r2, #4
 8000b34:	9201      	str	r2, [sp, #4]
 8000b36:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b3a:	f042 0220 	orr.w	r2, r2, #32
 8000b3e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b42:	f002 0220 	and.w	r2, r2, #32
 8000b46:	9202      	str	r2, [sp, #8]
 8000b48:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b50:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b54:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000b58:	9203      	str	r2, [sp, #12]
 8000b5a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b5e:	f042 0201 	orr.w	r2, r2, #1
 8000b62:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b66:	f002 0201 	and.w	r2, r2, #1
 8000b6a:	9204      	str	r2, [sp, #16]
 8000b6c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b70:	f042 0202 	orr.w	r2, r2, #2
 8000b74:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b78:	f002 0202 	and.w	r2, r2, #2
 8000b7c:	9205      	str	r2, [sp, #20]
 8000b7e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b86:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b8a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000b8e:	9206      	str	r2, [sp, #24]
 8000b90:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b94:	f042 0208 	orr.w	r2, r2, #8
 8000b98:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	9307      	str	r3, [sp, #28]
 8000ba2:	9b07      	ldr	r3, [sp, #28]
  HAL_PWREx_EnableVddIO2();
 8000ba4:	f003 fa02 	bl	8003fac <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4611      	mov	r1, r2
 8000bac:	4638      	mov	r0, r7
 8000bae:	f003 f9a3 	bl	8003ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8000bb2:	4650      	mov	r0, sl
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bba:	f003 f99d 	bl	8003ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8000bbe:	4648      	mov	r0, r9
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bc6:	f003 f997 	bl	8003ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bca:	4622      	mov	r2, r4
 8000bcc:	4640      	mov	r0, r8
 8000bce:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000bd2:	f003 f991 	bl	8003ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bd6:	4622      	mov	r2, r4
 8000bd8:	4630      	mov	r0, r6
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	f003 f98c 	bl	8003ef8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be0:	a908      	add	r1, sp, #32
 8000be2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000be4:	f24d 72ff 	movw	r2, #55295	@ 0xd7ff
 8000be8:	2303      	movs	r3, #3
 8000bea:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf0:	f003 f85e 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	a908      	add	r1, sp, #32
 8000bf6:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bfc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c00:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f003 f853 	bl	8003cb0 <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c0a:	a908      	add	r1, sp, #32
 8000c0c:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c0e:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 8000c12:	2303      	movs	r3, #3
 8000c14:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c1a:	f003 f849 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c1e:	2209      	movs	r2, #9
 8000c20:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c22:	a908      	add	r1, sp, #32
 8000c24:	4852      	ldr	r0, [pc, #328]	@ (8000d70 <MX_GPIO_Init+0x280>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 8000c28:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	f04f 0b03 	mov.w	fp, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c32:	f003 f83d 	bl	8003cb0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c36:	a908      	add	r1, sp, #32
 8000c38:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	e9cd 5508 	strd	r5, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f003 f835 	bl	8003cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	4638      	mov	r0, r7
 8000c48:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000c4a:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f003 f82b 	bl	8003cb0 <HAL_GPIO_Init>
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000c5c:	f248 0236 	movw	r2, #32822	@ 0x8036
 8000c60:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000c66:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f003 f820 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000c70:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000c72:	2208      	movs	r2, #8
 8000c74:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000c7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f003 f815 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c86:	f64b 7277 	movw	r2, #49015	@ 0xbf77
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	a908      	add	r1, sp, #32
 8000c8c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f003 f80b 	bl	8003cb0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	4650      	mov	r0, sl
 8000c9c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8000c9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f003 f801 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cae:	f64f 621f 	movw	r2, #65055	@ 0xfe1f
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb2:	a908      	add	r1, sp, #32
 8000cb4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f002 fff7 	bl	8003cb0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	4648      	mov	r0, r9
 8000cc4:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8000cc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cca:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f002 ffed 	bl	8003cb0 <HAL_GPIO_Init>
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	4640      	mov	r0, r8
 8000cd8:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000cda:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000cde:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f002 ffe3 	bl	8003cb0 <HAL_GPIO_Init>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cea:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf2:	4820      	ldr	r0, [pc, #128]	@ (8000d74 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfa:	f002 ffd9 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cfe:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d00:	a908      	add	r1, sp, #32
 8000d02:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d04:	2300      	movs	r3, #0
 8000d06:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f002 ffd0 	bl	8003cb0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d10:	a908      	add	r1, sp, #32
 8000d12:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d14:	2340      	movs	r3, #64	@ 0x40
 8000d16:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f002 ffc7 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d22:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d26:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d32:	230a      	movs	r3, #10
 8000d34:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f002 ffb9 	bl	8003cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d3e:	4622      	mov	r2, r4
 8000d40:	4621      	mov	r1, r4
 8000d42:	2009      	movs	r0, #9
 8000d44:	f002 fb84 	bl	8003450 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d48:	2009      	movs	r0, #9
 8000d4a:	f002 fbbd 	bl	80034c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d4e:	4622      	mov	r2, r4
 8000d50:	4621      	mov	r1, r4
 8000d52:	2028      	movs	r0, #40	@ 0x28
 8000d54:	f002 fb7c 	bl	8003450 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d58:	2028      	movs	r0, #40	@ 0x28
 8000d5a:	f002 fbb5 	bl	80034c8 <HAL_NVIC_EnableIRQ>

}
 8000d5e:	b00f      	add	sp, #60	@ 0x3c
 8000d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000800 	.word	0x48000800
 8000d6c:	48001800 	.word	0x48001800
 8000d70:	48001c00 	.word	0x48001c00
 8000d74:	48000c00 	.word	0x48000c00
 8000d78:	48001400 	.word	0x48001400
 8000d7c:	48001000 	.word	0x48001000
 8000d80:	48000400 	.word	0x48000400

08000d84 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin) {
 8000d84:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8000d88:	d002      	beq.n	8000d90 <HAL_GPIO_EXTI_Callback+0xc>
		btn_press = 1;
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
 8000d8a:	2808      	cmp	r0, #8
 8000d8c:	d004      	beq.n	8000d98 <HAL_GPIO_EXTI_Callback+0x14>
		S2LP_IRQ_Handler();
}
 8000d8e:	4770      	bx	lr
		btn_press = 1;
 8000d90:	4b02      	ldr	r3, [pc, #8]	@ (8000d9c <HAL_GPIO_EXTI_Callback+0x18>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	4770      	bx	lr
		S2LP_IRQ_Handler();
 8000d98:	f001 ba88 	b.w	80022ac <S2LP_IRQ_Handler>
 8000d9c:	200010c8 	.word	0x200010c8

08000da0 <run>:
	}
}

void run(void)
{
	btn_press = 0;
 8000da0:	4c18      	ldr	r4, [pc, #96]	@ (8000e04 <run+0x64>)
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 8000da2:	4e19      	ldr	r6, [pc, #100]	@ (8000e08 <run+0x68>)

	while (1)
	{
	  while (!btn_press) {
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000da4:	4d19      	ldr	r5, [pc, #100]	@ (8000e0c <run+0x6c>)
{
 8000da6:	b580      	push	{r7, lr}
	btn_press = 0;
 8000da8:	2700      	movs	r7, #0
 8000daa:	7027      	strb	r7, [r4, #0]
	  while (!btn_press) {
 8000dac:	7823      	ldrb	r3, [r4, #0]
 8000dae:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8000db2:	b9a3      	cbnz	r3, 8000dde <run+0x3e>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000db4:	2180      	movs	r1, #128	@ 0x80
 8000db6:	2201      	movs	r2, #1
 8000db8:	4628      	mov	r0, r5
 8000dba:	f003 f89d 	bl	8003ef8 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8000dbe:	20c8      	movs	r0, #200	@ 0xc8
 8000dc0:	f001 fdca 	bl	8002958 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000dc4:	4642      	mov	r2, r8
 8000dc6:	4628      	mov	r0, r5
 8000dc8:	2180      	movs	r1, #128	@ 0x80
 8000dca:	f003 f895 	bl	8003ef8 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8000dce:	20c8      	movs	r0, #200	@ 0xc8
 8000dd0:	f001 fdc2 	bl	8002958 <HAL_Delay>
	  while (!btn_press) {
 8000dd4:	7823      	ldrb	r3, [r4, #0]
 8000dd6:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0ea      	beq.n	8000db4 <run+0x14>
	  }
	  btn_press = 0;
 8000dde:	7027      	strb	r7, [r4, #0]
#if (CONTINUOUS_ACQ == 1)
	  while (!btn_press) {
 8000de0:	7823      	ldrb	r3, [r4, #0]
 8000de2:	b96b      	cbnz	r3, 8000e00 <run+0x60>
	if (StartADCAcq(N_MELVECS) != HAL_OK) {
 8000de4:	2014      	movs	r0, #20
 8000de6:	f7ff fccd 	bl	8000784 <StartADCAcq>
 8000dea:	b928      	cbnz	r0, 8000df8 <run+0x58>
	while (!IsADCFinished()) {
 8000dec:	f7ff fce2 	bl	80007b4 <IsADCFinished>
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d1f5      	bne.n	8000de0 <run+0x40>
		__WFI();
 8000df4:	bf30      	wfi
 8000df6:	e7f9      	b.n	8000dec <run+0x4c>
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f006 fc51 	bl	80076a0 <puts>
 8000dfe:	e7f5      	b.n	8000dec <run+0x4c>
		  acquire_and_send_packet();
	  }
	  btn_press = 0;
 8000e00:	7027      	strb	r7, [r4, #0]
	  while (!btn_press) {
 8000e02:	e7d3      	b.n	8000dac <run+0xc>
 8000e04:	200010c8 	.word	0x200010c8
 8000e08:	080086c4 	.word	0x080086c4
 8000e0c:	48000400 	.word	0x48000400

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
 8000e16:	481a      	ldr	r0, [pc, #104]	@ (8000e80 <Error_Handler+0x70>)
 8000e18:	4f1a      	ldr	r7, [pc, #104]	@ (8000e84 <Error_Handler+0x74>)
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000e1a:	4e1b      	ldr	r6, [pc, #108]	@ (8000e88 <Error_Handler+0x78>)
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000e1c:	4d1b      	ldr	r5, [pc, #108]	@ (8000e8c <Error_Handler+0x7c>)
  DEBUG_PRINT("Entering error Handler\r\n");
 8000e1e:	f006 fc3f 	bl	80076a0 <puts>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000e22:	2400      	movs	r4, #0
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	f003 f864 	bl	8003ef8 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	9400      	str	r4, [sp, #0]
 8000e34:	9900      	ldr	r1, [sp, #0]
 8000e36:	fba5 2303 	umull	r2, r3, r5, r3
 8000e3a:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 8000e3e:	ea4f 1293 	mov.w	r2, r3, lsr #6
 8000e42:	d205      	bcs.n	8000e50 <Error_Handler+0x40>
 8000e44:	9b00      	ldr	r3, [sp, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	9b00      	ldr	r3, [sp, #0]
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d3f9      	bcc.n	8000e44 <Error_Handler+0x34>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000e50:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e54:	2200      	movs	r2, #0
 8000e56:	4630      	mov	r0, r6
 8000e58:	f003 f84e 	bl	8003ef8 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	9401      	str	r4, [sp, #4]
 8000e60:	9a01      	ldr	r2, [sp, #4]
 8000e62:	fba5 1303 	umull	r1, r3, r5, r3
 8000e66:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
 8000e6a:	ea4f 1193 	mov.w	r1, r3, lsr #6
 8000e6e:	d2d9      	bcs.n	8000e24 <Error_Handler+0x14>
 8000e70:	9b01      	ldr	r3, [sp, #4]
 8000e72:	3301      	adds	r3, #1
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	9b01      	ldr	r3, [sp, #4]
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d3f9      	bcc.n	8000e70 <Error_Handler+0x60>
 8000e7c:	e7d2      	b.n	8000e24 <Error_Handler+0x14>
 8000e7e:	bf00      	nop
 8000e80:	080086e4 	.word	0x080086e4
 8000e84:	20000400 	.word	0x20000400
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	51eb851f 	.word	0x51eb851f

08000e90 <SystemClock_Config>:
{
 8000e90:	b500      	push	{lr}
 8000e92:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e94:	2244      	movs	r2, #68	@ 0x44
 8000e96:	2100      	movs	r1, #0
 8000e98:	a806      	add	r0, sp, #24
 8000e9a:	f006 fd95 	bl	80079c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9e:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ea0:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000ea8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000eac:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eae:	f003 f83d 	bl	8003f2c <HAL_PWREx_ControlVoltageScaling>
 8000eb2:	b9e0      	cbnz	r0, 8000eee <SystemClock_Config+0x5e>
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000eb4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8000ef8 <SystemClock_Config+0x68>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000eb8:	2210      	movs	r2, #16
 8000eba:	4603      	mov	r3, r0
 8000ebc:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebe:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000ec0:	22b0      	movs	r2, #176	@ 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ec2:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ec4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000ec8:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f003 f917 	bl	80040fc <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b968      	cbnz	r0, 8000eee <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ed8:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000edc:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee2:	f003 fc17 	bl	8004714 <HAL_RCC_ClockConfig>
 8000ee6:	b910      	cbnz	r0, 8000eee <SystemClock_Config+0x5e>
}
 8000ee8:	b019      	add	sp, #100	@ 0x64
 8000eea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000eee:	f7ff ff8f 	bl	8000e10 <Error_Handler>
 8000ef2:	bf00      	nop
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	00000001 	.word	0x00000001
 8000efc:	00000000 	.word	0x00000000

08000f00 <main>:
{
 8000f00:	b508      	push	{r3, lr}
  HAL_Init();
 8000f02:	f001 fd07 	bl	8002914 <HAL_Init>
  SystemClock_Config();
 8000f06:	f7ff ffc3 	bl	8000e90 <SystemClock_Config>
  MX_GPIO_Init();
 8000f0a:	f7ff fdf1 	bl	8000af0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0e:	f7ff fdd7 	bl	8000ac0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f12:	f001 fa99 	bl	8002448 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000f16:	f001 fb89 	bl	800262c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000f1a:	f7ff fb31 	bl	8000580 <MX_ADC1_Init>
  MX_AES_Init();
 8000f1e:	f7ff fcdb 	bl	80008d8 <MX_AES_Init>
	  MX_LPUART1_UART_Init();
 8000f22:	f001 fbdd 	bl	80026e0 <MX_LPUART1_UART_Init>
  RetargetInit(&hlpuart1);
 8000f26:	4814      	ldr	r0, [pc, #80]	@ (8000f78 <main+0x78>)
 8000f28:	f000 f8b8 	bl	800109c <RetargetInit>
  DEBUG_PRINT("Hello world\r\n");
 8000f2c:	4813      	ldr	r0, [pc, #76]	@ (8000f7c <main+0x7c>)
 8000f2e:	f006 fbb7 	bl	80076a0 <puts>
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 8000f32:	4813      	ldr	r0, [pc, #76]	@ (8000f80 <main+0x80>)
 8000f34:	f001 f918 	bl	8002168 <S2LP_Init>
  if (err)  {
 8000f38:	b128      	cbz	r0, 8000f46 <main+0x46>
 8000f3a:	4601      	mov	r1, r0
	  DEBUG_PRINT("[S2LP] Error while initializing: %u\r\n", err);
 8000f3c:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <main+0x84>)
 8000f3e:	f006 fb47 	bl	80075d0 <iprintf>
	  Error_Handler();
 8000f42:	f7ff ff65 	bl	8000e10 <Error_Handler>
	  DEBUG_PRINT("[S2LP] Init OK\r\n");
 8000f46:	4810      	ldr	r0, [pc, #64]	@ (8000f88 <main+0x88>)
 8000f48:	f006 fbaa 	bl	80076a0 <puts>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8000f4c:	480f      	ldr	r0, [pc, #60]	@ (8000f8c <main+0x8c>)
 8000f4e:	217f      	movs	r1, #127	@ 0x7f
 8000f50:	f002 f9b2 	bl	80032b8 <HAL_ADCEx_Calibration_Start>
 8000f54:	b120      	cbz	r0, 8000f60 <main+0x60>
	  DEBUG_PRINT("Error while calibrating the ADC\r\n");
 8000f56:	480e      	ldr	r0, [pc, #56]	@ (8000f90 <main+0x90>)
 8000f58:	f006 fba2 	bl	80076a0 <puts>
	  Error_Handler();
 8000f5c:	f7ff ff58 	bl	8000e10 <Error_Handler>
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <main+0x94>)
 8000f62:	f004 fbad 	bl	80056c0 <HAL_TIM_Base_Start>
 8000f66:	b120      	cbz	r0, 8000f72 <main+0x72>
	  DEBUG_PRINT("Error while enabling timer TIM3\r\n");
 8000f68:	480b      	ldr	r0, [pc, #44]	@ (8000f98 <main+0x98>)
 8000f6a:	f006 fb99 	bl	80076a0 <puts>
	  Error_Handler();
 8000f6e:	f7ff ff4f 	bl	8000e10 <Error_Handler>
  run();
 8000f72:	f7ff ff15 	bl	8000da0 <run>
 8000f76:	bf00      	nop
 8000f78:	20001da8 	.word	0x20001da8
 8000f7c:	080086fc 	.word	0x080086fc
 8000f80:	20001cf0 	.word	0x20001cf0
 8000f84:	0800870c 	.word	0x0800870c
 8000f88:	08008734 	.word	0x08008734
 8000f8c:	200004cc 	.word	0x200004cc
 8000f90:	08008744 	.word	0x08008744
 8000f94:	20001d58 	.word	0x20001d58
 8000f98:	08008768 	.word	0x08008768

08000f9c <tag_cbc_mac_hardware>:
 * @brief Calculate the tag of the packet using the hardware crypto module
 * @param tag : the tag to be calculated
 * @param msg : the message to be tagged
 * @param msg_len : the length of the message
 */
void tag_cbc_mac_hardware(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 8000f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    __ALIGN_BEGIN static uint8_t iv[16] __ALIGN_END = {0};
    // Allocate enough space for all blocks
    __ALIGN_BEGIN static uint8_t *tmp_out = NULL;
    
    // Calculate number of blocks needed (rounded up)
    size_t num_blocks = (msg_len + 15) / 16;
 8000fa0:	f102 070f 	add.w	r7, r2, #15
void tag_cbc_mac_hardware(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	4606      	mov	r6, r0
    size_t total_size = num_blocks * 16;
    
    // Allocate memory for all blocks
    tmp_out = malloc(total_size);
 8000fa8:	f027 000f 	bic.w	r0, r7, #15
void tag_cbc_mac_hardware(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 8000fac:	4615      	mov	r5, r2
 8000fae:	4688      	mov	r8, r1
    tmp_out = malloc(total_size);
 8000fb0:	f006 f98e 	bl	80072d0 <malloc>
 8000fb4:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8001048 <tag_cbc_mac_hardware+0xac>
 8000fb8:	f8c9 0000 	str.w	r0, [r9]
    if (tmp_out == NULL) {
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	d037      	beq.n	8001030 <tag_cbc_mac_hardware+0x94>
        Error_Handler();
        return;
    }
    
    // Step 1: reset the AES peripheral
    if (HAL_CRYP_DeInit(&hcryp) != HAL_OK) {
 8000fc0:	4c1e      	ldr	r4, [pc, #120]	@ (800103c <tag_cbc_mac_hardware+0xa0>)
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f002 fb80 	bl	80036c8 <HAL_CRYP_DeInit>
 8000fc8:	bb70      	cbnz	r0, 8001028 <tag_cbc_mac_hardware+0x8c>
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
    hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
    hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
    hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
    hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
    hcryp.Init.pKey = (uint8_t*)AES_Key;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <tag_cbc_mac_hardware+0xa4>)
 8000fcc:	6223      	str	r3, [r4, #32]
    hcryp.Init.pInitVect = (uint8_t*)iv;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <tag_cbc_mac_hardware+0xa8>)
 8000fd0:	6263      	str	r3, [r4, #36]	@ 0x24
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8000fda:	61a0      	str	r0, [r4, #24]
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2320      	movs	r3, #32

    if (HAL_CRYP_Init(&hcryp) != HAL_OK) {
 8000fe0:	4620      	mov	r0, r4
    hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000fe2:	e9c4 2304 	strd	r2, r3, [r4, #16]
    if (HAL_CRYP_Init(&hcryp) != HAL_OK) {
 8000fe6:	f002 fac1 	bl	800356c <HAL_CRYP_Init>
 8000fea:	b9e8      	cbnz	r0, 8001028 <tag_cbc_mac_hardware+0x8c>
        Error_Handler();
        return;
    }

    // Step 3: Perform CBC encryption with proper padding
    if (HAL_CRYP_AESCBC_Encrypt(&hcryp, (uint8_t *)msg, msg_len, tmp_out, 1000) != HAL_OK) {
 8000fec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	f8d9 3000 	ldr.w	r3, [r9]
 8000ff6:	b2aa      	uxth	r2, r5
 8000ff8:	4641      	mov	r1, r8
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f002 fb80 	bl	8003700 <HAL_CRYP_AESCBC_Encrypt>
 8001000:	b990      	cbnz	r0, 8001028 <tag_cbc_mac_hardware+0x8c>
        Error_Handler();
        return;
    }

    // Step 4: Copy the last block as the MAC
    memcpy(tag, tmp_out + ((num_blocks - 1) * 16), 16);
 8001002:	f8d9 0000 	ldr.w	r0, [r9]
 8001006:	f027 070f 	bic.w	r7, r7, #15
 800100a:	3f10      	subs	r7, #16
 800100c:	19c3      	adds	r3, r0, r7
 800100e:	59c4      	ldr	r4, [r0, r7]
 8001010:	6859      	ldr	r1, [r3, #4]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	60f3      	str	r3, [r6, #12]
 8001018:	6034      	str	r4, [r6, #0]
 800101a:	6071      	str	r1, [r6, #4]
 800101c:	60b2      	str	r2, [r6, #8]
    
    // Clean up
    free(tmp_out);
}
 800101e:	b003      	add	sp, #12
 8001020:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    free(tmp_out);
 8001024:	f006 b95c 	b.w	80072e0 <free>
        free(tmp_out);
 8001028:	f8d9 0000 	ldr.w	r0, [r9]
 800102c:	f006 f958 	bl	80072e0 <free>
}
 8001030:	b003      	add	sp, #12
 8001032:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Error_Handler();
 8001036:	f7ff beeb 	b.w	8000e10 <Error_Handler>
 800103a:	bf00      	nop
 800103c:	20001068 	.word	0x20001068
 8001040:	0800878c 	.word	0x0800878c
 8001044:	200010cc 	.word	0x200010cc
 8001048:	200010dc 	.word	0x200010dc

0800104c <make_packet>:

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 800104c:	b510      	push	{r4, lr}
 800104e:	460c      	mov	r4, r1
 8001050:	4696      	mov	lr, r2
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
    // Initially, the whole packet header is set to 0s
    memset(packet, 0, PACKET_HEADER_LENGTH);
    // So is the tag
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001052:	f104 0208 	add.w	r2, r4, #8
    memset(packet, 0, PACKET_HEADER_LENGTH);
 8001056:	f04f 0c00 	mov.w	ip, #0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 800105a:	f840 c002 	str.w	ip, [r0, r2]
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 800105e:	4601      	mov	r1, r0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001060:	4410      	add	r0, r2
 8001062:	f8c0 c004 	str.w	ip, [r0, #4]
 8001066:	f8c0 c008 	str.w	ip, [r0, #8]
 800106a:	f8c0 c00c 	str.w	ip, [r0, #12]

	// TO DO :  replace the two previous command by properly

	// Set the reserved field to 0
	packet[0] = 0x00;
 800106e:	f881 c000 	strb.w	ip, [r1]
	packet[1] = sender_id;
	// Set the payload_length field
	packet[2] = (payload_len >> 8) & 0xFF;
	packet[3] = payload_len & 0xFF;
	// Set the packet_serial field
	packet[4] = (serial >> 24) & 0xFF;
 8001072:	ea4f 6c13 	mov.w	ip, r3, lsr #24
	packet[5] = (serial >> 16) & 0xFF;
	packet[6] = (serial >> 8) & 0xFF;
	packet[7] = serial & 0xFF;
 8001076:	71cb      	strb	r3, [r1, #7]
	packet[4] = (serial >> 24) & 0xFF;
 8001078:	f881 c004 	strb.w	ip, [r1, #4]
	packet[5] = (serial >> 16) & 0xFF;
 800107c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
	packet[6] = (serial >> 8) & 0xFF;
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	718b      	strb	r3, [r1, #6]
	packet[2] = (payload_len >> 8) & 0xFF;
 8001084:	0a23      	lsrs	r3, r4, #8
	packet[1] = sender_id;
 8001086:	f881 e001 	strb.w	lr, [r1, #1]
	packet[3] = payload_len & 0xFF;
 800108a:	70cc      	strb	r4, [r1, #3]
	packet[5] = (serial >> 16) & 0xFF;
 800108c:	f881 c005 	strb.w	ip, [r1, #5]
	packet[2] = (payload_len >> 8) & 0xFF;
 8001090:	708b      	strb	r3, [r1, #2]
	*/

	// For the tag field, you have to calculate the tag. The function call below is correct but
	// tag_cbc_mac function, calculating the tag, is not implemented.
	#if USE_CRYPTO == USE_HARDWARE_CRYPTO
    	tag_cbc_mac_hardware(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
 8001092:	f7ff ff83 	bl	8000f9c <tag_cbc_mac_hardware>
	#else
		tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
	#endif

    return packet_len;
}
 8001096:	f104 0018 	add.w	r0, r4, #24
 800109a:	bd10      	pop	{r4, pc}

0800109c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800109c:	b430      	push	{r4, r5}
  gHuart = huart;

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <RetargetInit+0x1c>)
  gHuart = huart;
 80010a0:	4906      	ldr	r1, [pc, #24]	@ (80010bc <RetargetInit+0x20>)
  setvbuf(stdout, NULL, _IONBF, 0);
 80010a2:	681d      	ldr	r5, [r3, #0]
void RetargetInit(UART_HandleTypeDef *huart) {
 80010a4:	4604      	mov	r4, r0
  setvbuf(stdout, NULL, _IONBF, 0);
 80010a6:	2300      	movs	r3, #0
  gHuart = huart;
 80010a8:	600c      	str	r4, [r1, #0]
  setvbuf(stdout, NULL, _IONBF, 0);
 80010aa:	68a8      	ldr	r0, [r5, #8]
 80010ac:	2202      	movs	r2, #2
}
 80010ae:	bc30      	pop	{r4, r5}
  setvbuf(stdout, NULL, _IONBF, 0);
 80010b0:	4619      	mov	r1, r3
 80010b2:	f006 bafd 	b.w	80076b0 <setvbuf>
 80010b6:	bf00      	nop
 80010b8:	20000418 	.word	0x20000418
 80010bc:	200010e0 	.word	0x200010e0

080010c0 <_isatty>:

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80010c0:	2802      	cmp	r0, #2
 80010c2:	d801      	bhi.n	80010c8 <_isatty+0x8>
    return 1;
 80010c4:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 80010c6:	4770      	bx	lr
int _isatty(int fd) {
 80010c8:	b508      	push	{r3, lr}
  errno = EBADF;
 80010ca:	f006 fcdb 	bl	8007a84 <__errno>
 80010ce:	2309      	movs	r3, #9
 80010d0:	6003      	str	r3, [r0, #0]
  return 0;
 80010d2:	2000      	movs	r0, #0
}
 80010d4:	bd08      	pop	{r3, pc}
 80010d6:	bf00      	nop

080010d8 <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80010d8:	3801      	subs	r0, #1
 80010da:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 80010dc:	b510      	push	{r4, lr}
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80010de:	d80c      	bhi.n	80010fa <_write+0x22>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80010e0:	4614      	mov	r4, r2
 80010e2:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <_write+0x30>)
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	6810      	ldr	r0, [r2, #0]
 80010ea:	b2a2      	uxth	r2, r4
 80010ec:	f004 fcd6 	bl	8005a9c <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
 80010f0:	2800      	cmp	r0, #0
 80010f2:	bf0c      	ite	eq
 80010f4:	4620      	moveq	r0, r4
 80010f6:	2005      	movne	r0, #5
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 80010f8:	bd10      	pop	{r4, pc}
  errno = EBADF;
 80010fa:	f006 fcc3 	bl	8007a84 <__errno>
 80010fe:	2309      	movs	r3, #9
 8001100:	6003      	str	r3, [r0, #0]
  return -1;
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001106:	bd10      	pop	{r4, pc}
 8001108:	200010e0 	.word	0x200010e0

0800110c <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800110c:	2802      	cmp	r0, #2
 800110e:	d801      	bhi.n	8001114 <_close+0x8>
    return 0;
 8001110:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 8001112:	4770      	bx	lr
int _close(int fd) {
 8001114:	b508      	push	{r3, lr}
  errno = EBADF;
 8001116:	f006 fcb5 	bl	8007a84 <__errno>
 800111a:	2309      	movs	r3, #9
 800111c:	6003      	str	r3, [r0, #0]
  return -1;
 800111e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001122:	bd08      	pop	{r3, pc}

08001124 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001124:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001126:	f006 fcad 	bl	8007a84 <__errno>
 800112a:	2309      	movs	r3, #9
 800112c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	bd08      	pop	{r3, pc}

08001134 <_read>:

int _read(int fd, char* ptr, int len) {
 8001134:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001136:	b958      	cbnz	r0, 8001150 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001138:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <_read+0x2c>)
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	6810      	ldr	r0, [r2, #0]
 8001140:	2201      	movs	r2, #1
 8001142:	f004 fd1b 	bl	8005b7c <HAL_UART_Receive>
    if (hstatus == HAL_OK)
      return 1;
 8001146:	2800      	cmp	r0, #0
 8001148:	bf14      	ite	ne
 800114a:	2005      	movne	r0, #5
 800114c:	2001      	moveq	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 800114e:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001150:	f006 fc98 	bl	8007a84 <__errno>
 8001154:	2309      	movs	r3, #9
 8001156:	6003      	str	r3, [r0, #0]
  return -1;
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
}
 800115c:	bd08      	pop	{r3, pc}
 800115e:	bf00      	nop
 8001160:	200010e0 	.word	0x200010e0

08001164 <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001164:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 8001166:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001168:	d804      	bhi.n	8001174 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 800116a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800116e:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8001170:	2000      	movs	r0, #0
 8001172:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001174:	f006 fc86 	bl	8007a84 <__errno>
 8001178:	2309      	movs	r3, #9
 800117a:	6003      	str	r3, [r0, #0]
}
 800117c:	2000      	movs	r0, #0
 800117e:	bd08      	pop	{r3, pc}

08001180 <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	733b      	strb	r3, [r7, #12]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	737b      	strb	r3, [r7, #13]
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2101      	movs	r1, #1
 800119c:	480f      	ldr	r0, [pc, #60]	@ (80011dc <S2LP_Command+0x5c>)
 800119e:	f002 feab 	bl	8003ef8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <S2LP_Command+0x60>)
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	f107 0208 	add.w	r2, r7, #8
 80011aa:	f107 010c 	add.w	r1, r7, #12
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2302      	movs	r3, #2
 80011b6:	f004 f861 	bl	800527c <HAL_SPI_TransmitReceive>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2101      	movs	r1, #1
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <S2LP_Command+0x5c>)
 80011c4:	f002 fe98 	bl	8003ef8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80011c8:	b662      	cpsie	i
}
 80011ca:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 80011cc:	893a      	ldrh	r2, [r7, #8]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	801a      	strh	r2, [r3, #0]
	return err;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	48000800 	.word	0x48000800
 80011e0:	200010e8 	.word	0x200010e8

080011e4 <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	4603      	mov	r3, r0
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 80011f2:	2301      	movs	r3, #1
 80011f4:	753b      	strb	r3, [r7, #20]
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	757b      	strb	r3, [r7, #21]
 80011fa:	2300      	movs	r3, #0
 80011fc:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 80011fe:	b672      	cpsid	i
}
 8001200:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2101      	movs	r1, #1
 8001206:	4814      	ldr	r0, [pc, #80]	@ (8001258 <S2LP_ReadReg+0x74>)
 8001208:	f002 fe76 	bl	8003ef8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <S2LP_ReadReg+0x78>)
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	f107 0210 	add.w	r2, r7, #16
 8001214:	f107 0114 	add.w	r1, r7, #20
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2303      	movs	r3, #3
 8001220:	f004 f82c 	bl	800527c <HAL_SPI_TransmitReceive>
 8001224:	4603      	mov	r3, r0
 8001226:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2101      	movs	r1, #1
 800122c:	480a      	ldr	r0, [pc, #40]	@ (8001258 <S2LP_ReadReg+0x74>)
 800122e:	f002 fe63 	bl	8003ef8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001232:	b662      	cpsie	i
}
 8001234:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 800123c:	8a3a      	ldrh	r2, [r7, #16]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 8001248:	7cba      	ldrb	r2, [r7, #18]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	701a      	strb	r2, [r3, #0]
	return err;
 800124e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	48000800 	.word	0x48000800
 800125c:	200010e8 	.word	0x200010e8

08001260 <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af02      	add	r7, sp, #8
 8001266:	4603      	mov	r3, r0
 8001268:	603a      	str	r2, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	460b      	mov	r3, r1
 800126e:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 8001270:	2300      	movs	r3, #0
 8001272:	733b      	strb	r3, [r7, #12]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	737b      	strb	r3, [r7, #13]
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2101      	movs	r1, #1
 8001284:	4811      	ldr	r0, [pc, #68]	@ (80012cc <S2LP_WriteReg+0x6c>)
 8001286:	f002 fe37 	bl	8003ef8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <S2LP_WriteReg+0x70>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	f107 0208 	add.w	r2, r7, #8
 8001292:	f107 010c 	add.w	r1, r7, #12
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2303      	movs	r3, #3
 800129e:	f003 ffed 	bl	800527c <HAL_SPI_TransmitReceive>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2101      	movs	r1, #1
 80012aa:	4808      	ldr	r0, [pc, #32]	@ (80012cc <S2LP_WriteReg+0x6c>)
 80012ac:	f002 fe24 	bl	8003ef8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80012b0:	b662      	cpsie	i
}
 80012b2:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 80012ba:	893a      	ldrh	r2, [r7, #8]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	801a      	strh	r2, [r3, #0]
	return err;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	48000800 	.word	0x48000800
 80012d0:	200010e8 	.word	0x200010e8

080012d4 <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b08d      	sub	sp, #52	@ 0x34
 80012d8:	af02      	add	r7, sp, #8
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	460b      	mov	r3, r1
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 80012e6:	23ff      	movs	r3, #255	@ 0xff
 80012e8:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 80012ea:	7afa      	ldrb	r2, [r7, #11]
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	3302      	adds	r3, #2
 80012f2:	68f9      	ldr	r1, [r7, #12]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f006 fbf2 	bl	8007ade <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 80012fa:	b672      	cpsid	i
}
 80012fc:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2101      	movs	r1, #1
 8001302:	4814      	ldr	r0, [pc, #80]	@ (8001354 <S2LP_WriteTxFIFO+0x80>)
 8001304:	f002 fdf8 	bl	8003ef8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <S2LP_WriteTxFIFO+0x84>)
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	b29b      	uxth	r3, r3
 8001310:	3302      	adds	r3, #2
 8001312:	b29b      	uxth	r3, r3
 8001314:	f107 0210 	add.w	r2, r7, #16
 8001318:	f107 011c 	add.w	r1, r7, #28
 800131c:	f04f 34ff 	mov.w	r4, #4294967295
 8001320:	9400      	str	r4, [sp, #0]
 8001322:	f003 ffab 	bl	800527c <HAL_SPI_TransmitReceive>
 8001326:	4603      	mov	r3, r0
 8001328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	2101      	movs	r1, #1
 8001330:	4808      	ldr	r0, [pc, #32]	@ (8001354 <S2LP_WriteTxFIFO+0x80>)
 8001332:	f002 fde1 	bl	8003ef8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001336:	b662      	cpsie	i
}
 8001338:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 8001340:	8a3a      	ldrh	r2, [r7, #16]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	801a      	strh	r2, [r3, #0]
	return err;
 8001346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800134a:	4618      	mov	r0, r3
 800134c:	372c      	adds	r7, #44	@ 0x2c
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	48000800 	.word	0x48000800
 8001358:	200010e8 	.word	0x200010e8

0800135c <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	2072      	movs	r0, #114	@ 0x72
 8001370:	f7ff ff06 	bl	8001180 <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8001374:	7b7b      	ldrb	r3, [r7, #13]
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <S2LP_Send+0x2e>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
 8001380:	4864      	ldr	r0, [pc, #400]	@ (8001514 <S2LP_Send+0x1b8>)
 8001382:	f006 f98d 	bl	80076a0 <puts>
		return HAL_BUSY;
 8001386:	2302      	movs	r3, #2
 8001388:	e0c0      	b.n	800150c <S2LP_Send+0x1b0>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 800138a:	4b63      	ldr	r3, [pc, #396]	@ (8001518 <S2LP_Send+0x1bc>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 8001390:	4b62      	ldr	r3, [pc, #392]	@ (800151c <S2LP_Send+0x1c0>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 8001396:	4b62      	ldr	r3, [pc, #392]	@ (8001520 <S2LP_Send+0x1c4>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	2031      	movs	r0, #49	@ 0x31
 80013aa:	f7ff ff59 	bl	8001260 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2200      	movs	r2, #0
 80013b4:	4619      	mov	r1, r3
 80013b6:	2032      	movs	r0, #50	@ 0x32
 80013b8:	f7ff ff52 	bl	8001260 <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 80013bc:	e00f      	b.n	80013de <S2LP_Send+0x82>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	2066      	movs	r0, #102	@ 0x66
 80013c6:	f7ff fedb 	bl	8001180 <S2LP_Command>
 80013ca:	4603      	mov	r3, r0
 80013cc:	73bb      	strb	r3, [r7, #14]
		if (err) {
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <S2LP_Send+0x82>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
 80013d4:	4853      	ldr	r0, [pc, #332]	@ (8001524 <S2LP_Send+0x1c8>)
 80013d6:	f006 f963 	bl	80076a0 <puts>
			return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e096      	b.n	800150c <S2LP_Send+0x1b0>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 80013de:	7b7b      	ldrb	r3, [r7, #13]
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b18      	cmp	r3, #24
 80013e8:	d1e9      	bne.n	80013be <S2LP_Send+0x62>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	08db      	lsrs	r3, r3, #3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	887a      	ldrh	r2, [r7, #2]
 80013f6:	f002 0207 	and.w	r2, r2, #7
 80013fa:	b292      	uxth	r2, r2
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	bf14      	ite	ne
 8001400:	2201      	movne	r2, #1
 8001402:	2200      	moveq	r2, #0
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	4413      	add	r3, r2
 8001408:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 800140a:	2310      	movs	r3, #16
 800140c:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 800140e:	2300      	movs	r3, #0
 8001410:	827b      	strh	r3, [r7, #18]
 8001412:	e063      	b.n	80014dc <S2LP_Send+0x180>
		if (underflow) {
 8001414:	4b41      	ldr	r3, [pc, #260]	@ (800151c <S2LP_Send+0x1c0>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d02f      	beq.n	800147e <S2LP_Send+0x122>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
 800141e:	4842      	ldr	r0, [pc, #264]	@ (8001528 <S2LP_Send+0x1cc>)
 8001420:	f006 f93e 	bl	80076a0 <puts>
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	461a      	mov	r2, r3
 800142a:	2100      	movs	r1, #0
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fed9 	bl	80011e4 <S2LP_ReadReg>
 8001432:	4603      	mov	r3, r0
 8001434:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <S2LP_Send+0xec>
				S2LP_PrintStatus(&radio_status);
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f879 	bl	8001538 <S2LP_PrintStatus>
 8001446:	e002      	b.n	800144e <S2LP_Send+0xf2>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
 8001448:	4838      	ldr	r0, [pc, #224]	@ (800152c <S2LP_Send+0x1d0>)
 800144a:	f006 f929 	bl	80076a0 <puts>
			}
			return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e05c      	b.n	800150c <S2LP_Send+0x1b0>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d107      	bne.n	8001468 <S2LP_Send+0x10c>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	2060      	movs	r0, #96	@ 0x60
 8001460:	f7ff fe8e 	bl	8001180 <S2LP_Command>
				sending = 1;
 8001464:	2301      	movs	r3, #1
 8001466:	75fb      	strb	r3, [r7, #23]
			}

			__WFI();
 8001468:	bf30      	wfi
			if (fifo_almost_empty) {
 800146a:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <S2LP_Send+0x1c4>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <S2LP_Send+0x122>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 8001474:	230c      	movs	r3, #12
 8001476:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 8001478:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <S2LP_Send+0x1c4>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 800147e:	8abb      	ldrh	r3, [r7, #20]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0e6      	beq.n	8001452 <S2LP_Send+0xf6>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 8001484:	8a7a      	ldrh	r2, [r7, #18]
 8001486:	8a3b      	ldrh	r3, [r7, #16]
 8001488:	3b01      	subs	r3, #1
 800148a:	429a      	cmp	r2, r3
 800148c:	d109      	bne.n	80014a2 <S2LP_Send+0x146>
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	8a3b      	ldrh	r3, [r7, #16]
 8001494:	3b01      	subs	r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	e000      	b.n	80014a4 <S2LP_Send+0x148>
 80014a2:	2308      	movs	r3, #8
 80014a4:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 80014a6:	8a7b      	ldrh	r3, [r7, #18]
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	461a      	mov	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	f107 020c 	add.w	r2, r7, #12
 80014b4:	7bf9      	ldrb	r1, [r7, #15]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff0c 	bl	80012d4 <S2LP_WriteTxFIFO>
 80014bc:	4603      	mov	r3, r0
 80014be:	73bb      	strb	r3, [r7, #14]
		if (err) {
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d004      	beq.n	80014d0 <S2LP_Send+0x174>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
 80014c6:	481a      	ldr	r0, [pc, #104]	@ (8001530 <S2LP_Send+0x1d4>)
 80014c8:	f006 f8ea 	bl	80076a0 <puts>
			return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e01d      	b.n	800150c <S2LP_Send+0x1b0>
		}
		free_chunks--;
 80014d0:	8abb      	ldrh	r3, [r7, #20]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 80014d6:	8a7b      	ldrh	r3, [r7, #18]
 80014d8:	3301      	adds	r3, #1
 80014da:	827b      	strh	r3, [r7, #18]
 80014dc:	8a7a      	ldrh	r2, [r7, #18]
 80014de:	8a3b      	ldrh	r3, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d397      	bcc.n	8001414 <S2LP_Send+0xb8>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d107      	bne.n	80014fa <S2LP_Send+0x19e>
		S2LP_Command(CMD_TX, &radio_status);
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	4619      	mov	r1, r3
 80014f0:	2060      	movs	r0, #96	@ 0x60
 80014f2:	f7ff fe45 	bl	8001180 <S2LP_Command>
	}

	while (!packet_sent) {
 80014f6:	e000      	b.n	80014fa <S2LP_Send+0x19e>
		__WFI(); // wait until packet has been fully transmitted
 80014f8:	bf30      	wfi
	while (!packet_sent) {
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <S2LP_Send+0x1bc>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f9      	beq.n	80014f8 <S2LP_Send+0x19c>
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
 8001504:	480b      	ldr	r0, [pc, #44]	@ (8001534 <S2LP_Send+0x1d8>)
 8001506:	f006 f8cb 	bl	80076a0 <puts>
	return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	080083a8 	.word	0x080083a8
 8001518:	200010e4 	.word	0x200010e4
 800151c:	200010e6 	.word	0x200010e6
 8001520:	200010e5 	.word	0x200010e5
 8001524:	080083cc 	.word	0x080083cc
 8001528:	080083f0 	.word	0x080083f0
 800152c:	08008420 	.word	0x08008420
 8001530:	08008450 	.word	0x08008450
 8001534:	08008474 	.word	0x08008474

08001538 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af02      	add	r7, sp, #8
 800153e:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
 8001540:	486f      	ldr	r0, [pc, #444]	@ (8001700 <S2LP_PrintStatus+0x1c8>)
 8001542:	f006 f8ad 	bl	80076a0 <puts>
	DEBUG_PRINT("  MC_STATE: ");
 8001546:	486f      	ldr	r0, [pc, #444]	@ (8001704 <S2LP_PrintStatus+0x1cc>)
 8001548:	f006 f842 	bl	80075d0 <iprintf>
	switch (status->MC_STATE) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	785b      	ldrb	r3, [r3, #1]
 8001550:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b5c      	cmp	r3, #92	@ 0x5c
 8001558:	f000 808f 	beq.w	800167a <S2LP_PrintStatus+0x142>
 800155c:	2b5c      	cmp	r3, #92	@ 0x5c
 800155e:	f300 8094 	bgt.w	800168a <S2LP_PrintStatus+0x152>
 8001562:	2b30      	cmp	r3, #48	@ 0x30
 8001564:	dc6a      	bgt.n	800163c <S2LP_PrintStatus+0x104>
 8001566:	2b00      	cmp	r3, #0
 8001568:	f2c0 808f 	blt.w	800168a <S2LP_PrintStatus+0x152>
 800156c:	2b30      	cmp	r3, #48	@ 0x30
 800156e:	f200 808c 	bhi.w	800168a <S2LP_PrintStatus+0x152>
 8001572:	a201      	add	r2, pc, #4	@ (adr r2, 8001578 <S2LP_PrintStatus+0x40>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001643 	.word	0x08001643
 800157c:	0800165b 	.word	0x0800165b
 8001580:	0800164b 	.word	0x0800164b
 8001584:	08001653 	.word	0x08001653
 8001588:	0800168b 	.word	0x0800168b
 800158c:	0800168b 	.word	0x0800168b
 8001590:	0800168b 	.word	0x0800168b
 8001594:	0800168b 	.word	0x0800168b
 8001598:	0800168b 	.word	0x0800168b
 800159c:	0800168b 	.word	0x0800168b
 80015a0:	0800168b 	.word	0x0800168b
 80015a4:	0800168b 	.word	0x0800168b
 80015a8:	08001663 	.word	0x08001663
 80015ac:	0800168b 	.word	0x0800168b
 80015b0:	0800168b 	.word	0x0800168b
 80015b4:	0800168b 	.word	0x0800168b
 80015b8:	0800168b 	.word	0x0800168b
 80015bc:	0800168b 	.word	0x0800168b
 80015c0:	0800168b 	.word	0x0800168b
 80015c4:	0800168b 	.word	0x0800168b
 80015c8:	08001673 	.word	0x08001673
 80015cc:	0800168b 	.word	0x0800168b
 80015d0:	0800168b 	.word	0x0800168b
 80015d4:	0800168b 	.word	0x0800168b
 80015d8:	0800168b 	.word	0x0800168b
 80015dc:	0800168b 	.word	0x0800168b
 80015e0:	0800168b 	.word	0x0800168b
 80015e4:	0800168b 	.word	0x0800168b
 80015e8:	0800168b 	.word	0x0800168b
 80015ec:	0800168b 	.word	0x0800168b
 80015f0:	0800168b 	.word	0x0800168b
 80015f4:	0800168b 	.word	0x0800168b
 80015f8:	0800168b 	.word	0x0800168b
 80015fc:	0800168b 	.word	0x0800168b
 8001600:	0800168b 	.word	0x0800168b
 8001604:	0800168b 	.word	0x0800168b
 8001608:	0800168b 	.word	0x0800168b
 800160c:	0800168b 	.word	0x0800168b
 8001610:	0800168b 	.word	0x0800168b
 8001614:	0800168b 	.word	0x0800168b
 8001618:	0800168b 	.word	0x0800168b
 800161c:	0800168b 	.word	0x0800168b
 8001620:	0800168b 	.word	0x0800168b
 8001624:	0800168b 	.word	0x0800168b
 8001628:	0800168b 	.word	0x0800168b
 800162c:	0800168b 	.word	0x0800168b
 8001630:	0800168b 	.word	0x0800168b
 8001634:	0800168b 	.word	0x0800168b
 8001638:	0800166b 	.word	0x0800166b
 800163c:	2b50      	cmp	r3, #80	@ 0x50
 800163e:	d020      	beq.n	8001682 <S2LP_PrintStatus+0x14a>
 8001640:	e023      	b.n	800168a <S2LP_PrintStatus+0x152>
		case (MC_STATE_READY):
			DEBUG_PRINT("READY");
 8001642:	4831      	ldr	r0, [pc, #196]	@ (8001708 <S2LP_PrintStatus+0x1d0>)
 8001644:	f005 ffc4 	bl	80075d0 <iprintf>
			break;
 8001648:	e023      	b.n	8001692 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_STANDBY):
			DEBUG_PRINT("STANDBY");
 800164a:	4830      	ldr	r0, [pc, #192]	@ (800170c <S2LP_PrintStatus+0x1d4>)
 800164c:	f005 ffc0 	bl	80075d0 <iprintf>
			break;
 8001650:	e01f      	b.n	8001692 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP):
			DEBUG_PRINT("SLEEP");
 8001652:	482f      	ldr	r0, [pc, #188]	@ (8001710 <S2LP_PrintStatus+0x1d8>)
 8001654:	f005 ffbc 	bl	80075d0 <iprintf>
			break;
 8001658:	e01b      	b.n	8001692 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP_NOFIFO):
			DEBUG_PRINT("SLEEP");
 800165a:	482d      	ldr	r0, [pc, #180]	@ (8001710 <S2LP_PrintStatus+0x1d8>)
 800165c:	f005 ffb8 	bl	80075d0 <iprintf>
			break;
 8001660:	e017      	b.n	8001692 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCKON):
			DEBUG_PRINT("LOCKON");
 8001662:	482c      	ldr	r0, [pc, #176]	@ (8001714 <S2LP_PrintStatus+0x1dc>)
 8001664:	f005 ffb4 	bl	80075d0 <iprintf>
			break;
 8001668:	e013      	b.n	8001692 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_RX):
			DEBUG_PRINT("RX");
 800166a:	482b      	ldr	r0, [pc, #172]	@ (8001718 <S2LP_PrintStatus+0x1e0>)
 800166c:	f005 ffb0 	bl	80075d0 <iprintf>
			break;
 8001670:	e00f      	b.n	8001692 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCK_ST):
			DEBUG_PRINT("LOCK_ST");
 8001672:	482a      	ldr	r0, [pc, #168]	@ (800171c <S2LP_PrintStatus+0x1e4>)
 8001674:	f005 ffac 	bl	80075d0 <iprintf>
			break;
 8001678:	e00b      	b.n	8001692 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_TX):
			DEBUG_PRINT("TX");
 800167a:	4829      	ldr	r0, [pc, #164]	@ (8001720 <S2LP_PrintStatus+0x1e8>)
 800167c:	f005 ffa8 	bl	80075d0 <iprintf>
			break;
 8001680:	e007      	b.n	8001692 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
 8001682:	4828      	ldr	r0, [pc, #160]	@ (8001724 <S2LP_PrintStatus+0x1ec>)
 8001684:	f005 ffa4 	bl	80075d0 <iprintf>
			break;
 8001688:	e003      	b.n	8001692 <S2LP_PrintStatus+0x15a>
		default:
			DEBUG_PRINT("UNKNOWN");
 800168a:	4827      	ldr	r0, [pc, #156]	@ (8001728 <S2LP_PrintStatus+0x1f0>)
 800168c:	f005 ffa0 	bl	80075d0 <iprintf>
			break;
 8001690:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
 8001692:	4826      	ldr	r0, [pc, #152]	@ (800172c <S2LP_PrintStatus+0x1f4>)
 8001694:	f006 f804 	bl	80076a0 <puts>
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	785b      	ldrb	r3, [r3, #1]
 800169c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	4603      	mov	r3, r0
 80016ca:	4819      	ldr	r0, [pc, #100]	@ (8001730 <S2LP_PrintStatus+0x1f8>)
 80016cc:	f005 ff80 	bl	80075d0 <iprintf>
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	4619      	mov	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	4810      	ldr	r0, [pc, #64]	@ (8001734 <S2LP_PrintStatus+0x1fc>)
 80016f4:	f005 ff6c 	bl	80075d0 <iprintf>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	08008490 	.word	0x08008490
 8001704:	080084a8 	.word	0x080084a8
 8001708:	080084b8 	.word	0x080084b8
 800170c:	080084c0 	.word	0x080084c0
 8001710:	080084c8 	.word	0x080084c8
 8001714:	080084d0 	.word	0x080084d0
 8001718:	080084d8 	.word	0x080084d8
 800171c:	080084dc 	.word	0x080084dc
 8001720:	080084e4 	.word	0x080084e4
 8001724:	080084e8 	.word	0x080084e8
 8001728:	080084f4 	.word	0x080084f4
 800172c:	080084fc 	.word	0x080084fc
 8001730:	08008500 	.word	0x08008500
 8001734:	08008540 	.word	0x08008540

08001738 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 8001738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800173c:	b09e      	sub	sp, #120	@ 0x78
 800173e:	af00      	add	r7, sp, #0
 8001740:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 8001742:	2304      	movs	r3, #4
 8001744:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 8001748:	2301      	movs	r3, #1
 800174a:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 800174e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001750:	17da      	asrs	r2, r3, #31
 8001752:	469a      	mov	sl, r3
 8001754:	4693      	mov	fp, r2
 8001756:	ea4f 396a 	mov.w	r9, sl, asr #13
 800175a:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 800175e:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 8001762:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	17da      	asrs	r2, r3, #31
 800176c:	623b      	str	r3, [r7, #32]
 800176e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001770:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001774:	4603      	mov	r3, r0
 8001776:	fb03 f209 	mul.w	r2, r3, r9
 800177a:	460b      	mov	r3, r1
 800177c:	fb08 f303 	mul.w	r3, r8, r3
 8001780:	4413      	add	r3, r2
 8001782:	4602      	mov	r2, r0
 8001784:	fba8 4502 	umull	r4, r5, r8, r2
 8001788:	442b      	add	r3, r5
 800178a:	461d      	mov	r5, r3
 800178c:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 8001790:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 8001794:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001798:	a374      	add	r3, pc, #464	@ (adr r3, 800196c <S2LP_PLLConf+0x234>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe fd77 	bl	8000290 <__aeabi_uldivmod>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4613      	mov	r3, r2
 80017a8:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 80017aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017ac:	2200      	movs	r2, #0
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	61fa      	str	r2, [r7, #28]
 80017b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001960 <S2LP_PLLConf+0x228>)
 80017b4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80017b8:	462a      	mov	r2, r5
 80017ba:	fb03 f202 	mul.w	r2, r3, r2
 80017be:	2300      	movs	r3, #0
 80017c0:	4621      	mov	r1, r4
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	4a65      	ldr	r2, [pc, #404]	@ (8001960 <S2LP_PLLConf+0x228>)
 80017ca:	4621      	mov	r1, r4
 80017cc:	fba1 1202 	umull	r1, r2, r1, r2
 80017d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80017d2:	460a      	mov	r2, r1
 80017d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80017d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017d8:	4413      	add	r3, r2
 80017da:	637b      	str	r3, [r7, #52]	@ 0x34
 80017dc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80017e0:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 80017e4:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 80017e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017ea:	3301      	adds	r3, #1
 80017ec:	2200      	movs	r2, #0
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	617a      	str	r2, [r7, #20]
 80017f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001960 <S2LP_PLLConf+0x228>)
 80017f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017f8:	462a      	mov	r2, r5
 80017fa:	fb03 f202 	mul.w	r2, r3, r2
 80017fe:	2300      	movs	r3, #0
 8001800:	4621      	mov	r1, r4
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	4a55      	ldr	r2, [pc, #340]	@ (8001960 <S2LP_PLLConf+0x228>)
 800180a:	4621      	mov	r1, r4
 800180c:	fba1 1202 	umull	r1, r2, r1, r2
 8001810:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001812:	460a      	mov	r2, r1
 8001814:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001818:	4413      	add	r3, r2
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800181c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001820:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 8001824:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 8001828:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800182c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001830:	1a84      	subs	r4, r0, r2
 8001832:	60bc      	str	r4, [r7, #8]
 8001834:	eb61 0303 	sbc.w	r3, r1, r3
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800183e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001842:	1a84      	subs	r4, r0, r2
 8001844:	603c      	str	r4, [r7, #0]
 8001846:	eb61 0303 	sbc.w	r3, r1, r3
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001850:	4623      	mov	r3, r4
 8001852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001856:	4602      	mov	r2, r0
 8001858:	4293      	cmp	r3, r2
 800185a:	462b      	mov	r3, r5
 800185c:	460a      	mov	r2, r1
 800185e:	4193      	sbcs	r3, r2
 8001860:	d202      	bcs.n	8001868 <S2LP_PLLConf+0x130>
 8001862:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001864:	3301      	adds	r3, #1
 8001866:	e000      	b.n	800186a <S2LP_PLLConf+0x132>
 8001868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800186a:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 800186c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001870:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 8001878:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800187c:	4a38      	ldr	r2, [pc, #224]	@ (8001960 <S2LP_PLLConf+0x228>)
 800187e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001882:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 8001884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001886:	4a37      	ldr	r2, [pc, #220]	@ (8001964 <S2LP_PLLConf+0x22c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d911      	bls.n	80018b0 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 800188c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800188e:	4a36      	ldr	r2, [pc, #216]	@ (8001968 <S2LP_PLLConf+0x230>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d906      	bls.n	80018a2 <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 8001894:	2302      	movs	r3, #2
 8001896:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80018a0:	e017      	b.n	80018d2 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80018ae:	e010      	b.n	80018d2 <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80018b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001968 <S2LP_PLLConf+0x230>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d906      	bls.n	80018c6 <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 80018b8:	2303      	movs	r3, #3
 80018ba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80018c4:	e005      	b.n	80018d2 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 80018c6:	2302      	movs	r3, #2
 80018c8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 80018d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80018d6:	015b      	lsls	r3, r3, #5
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018dc:	0e1b      	lsrs	r3, r3, #24
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 80018e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 80018ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 80018f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018f8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 80018fc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	b2db      	uxtb	r3, r3
 8001904:	3b30      	subs	r3, #48	@ 0x30
 8001906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 800190a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800190e:	2200      	movs	r2, #0
 8001910:	4619      	mov	r1, r3
 8001912:	2005      	movs	r0, #5
 8001914:	f7ff fca4 	bl	8001260 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 8001918:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	2006      	movs	r0, #6
 8001922:	f7ff fc9d 	bl	8001260 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 8001926:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800192a:	2200      	movs	r2, #0
 800192c:	4619      	mov	r1, r3
 800192e:	2007      	movs	r0, #7
 8001930:	f7ff fc96 	bl	8001260 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 8001934:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001938:	2200      	movs	r2, #0
 800193a:	4619      	mov	r1, r3
 800193c:	2008      	movs	r0, #8
 800193e:	f7ff fc8f 	bl	8001260 <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 8001942:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001946:	2200      	movs	r2, #0
 8001948:	4619      	mov	r1, r3
 800194a:	2065      	movs	r0, #101	@ 0x65
 800194c:	f7ff fc88 	bl	8001260 <S2LP_WriteReg>
}
 8001950:	bf00      	nop
 8001952:	3778      	adds	r7, #120	@ 0x78
 8001954:	46bd      	mov	sp, r7
 8001956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195a:	bf00      	nop
 800195c:	f3af 8000 	nop.w
 8001960:	02faf080 	.word	0x02faf080
 8001964:	d693a3ff 	.word	0xd693a3ff
 8001968:	01c9c380 	.word	0x01c9c380
 800196c:	02faf080 	.word	0x02faf080
 8001970:	00000000 	.word	0x00000000

08001974 <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 8001974:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001978:	b091      	sub	sp, #68	@ 0x44
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	460a      	mov	r2, r1
 8001980:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001982:	4613      	mov	r3, r2
 8001984:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 8001988:	4b3f      	ldr	r3, [pc, #252]	@ (8001a88 <ComputeDatarate+0x114>)
 800198a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 800198c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800198e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a8c <ComputeDatarate+0x118>)
 8001990:	429a      	cmp	r2, r3
 8001992:	d902      	bls.n	800199a <ComputeDatarate+0x26>
    f_dig >>= 1;
 8001994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 800199a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d128      	bne.n	80019f4 <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 80019a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019a4:	2200      	movs	r2, #0
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	61fa      	str	r2, [r7, #28]
 80019aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80019ac:	2200      	movs	r2, #0
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	617a      	str	r2, [r7, #20]
 80019b2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80019b6:	462b      	mov	r3, r5
 80019b8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019bc:	4642      	mov	r2, r8
 80019be:	fb02 f203 	mul.w	r2, r2, r3
 80019c2:	464b      	mov	r3, r9
 80019c4:	4621      	mov	r1, r4
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	4622      	mov	r2, r4
 80019ce:	4641      	mov	r1, r8
 80019d0:	fba2 ab01 	umull	sl, fp, r2, r1
 80019d4:	445b      	add	r3, fp
 80019d6:	469b      	mov	fp, r3
 80019d8:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 80019dc:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 80019e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	000a      	movs	r2, r1
 80019ee:	2300      	movs	r3, #0
 80019f0:	4613      	mov	r3, r2
 80019f2:	e043      	b.n	8001a7c <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 80019f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019f6:	2200      	movs	r2, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	60fa      	str	r2, [r7, #12]
 80019fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80019fe:	2200      	movs	r2, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 8001a0e:	623b      	str	r3, [r7, #32]
 8001a10:	4613      	mov	r3, r2
 8001a12:	f143 0300 	adc.w	r3, r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8001a22:	4652      	mov	r2, sl
 8001a24:	fb02 f203 	mul.w	r2, r2, r3
 8001a28:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8001a2c:	465b      	mov	r3, fp
 8001a2e:	4682      	mov	sl, r0
 8001a30:	468b      	mov	fp, r1
 8001a32:	4651      	mov	r1, sl
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	4652      	mov	r2, sl
 8001a3c:	6a39      	ldr	r1, [r7, #32]
 8001a3e:	fba2 4501 	umull	r4, r5, r2, r1
 8001a42:	442b      	add	r3, r5
 8001a44:	461d      	mov	r5, r3
 8001a46:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 8001a4a:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 8001a4e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001a52:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8001a56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a5a:	f1c1 0420 	rsb	r4, r1, #32
 8001a5e:	f1a1 0020 	sub.w	r0, r1, #32
 8001a62:	fa22 f801 	lsr.w	r8, r2, r1
 8001a66:	fa03 f404 	lsl.w	r4, r3, r4
 8001a6a:	ea48 0804 	orr.w	r8, r8, r4
 8001a6e:	fa23 f000 	lsr.w	r0, r3, r0
 8001a72:	ea48 0800 	orr.w	r8, r8, r0
 8001a76:	fa23 f901 	lsr.w	r9, r3, r1
 8001a7a:	4643      	mov	r3, r8
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3744      	adds	r7, #68	@ 0x44
 8001a80:	46bd      	mov	sp, r7
 8001a82:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a86:	4770      	bx	lr
 8001a88:	02faf080 	.word	0x02faf080
 8001a8c:	01c9c380 	.word	0x01c9c380

08001a90 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 8001a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a94:	b0ae      	sub	sp, #184	@ 0xb8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8001a9c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001aa0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 8001aa4:	4ba5      	ldr	r3, [pc, #660]	@ (8001d3c <SearchDatarateME+0x2ac>)
 8001aa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001aaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001aae:	4ba4      	ldr	r3, [pc, #656]	@ (8001d40 <SearchDatarateME+0x2b0>)
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d904      	bls.n	8001abe <SearchDatarateME+0x2e>
    f_dig >>= 1;
 8001ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001ac4:	e013      	b.n	8001aee <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 8001ac6:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001aca:	4619      	mov	r1, r3
 8001acc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ad0:	f7ff ff50 	bl	8001974 <ComputeDatarate>
 8001ad4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 8001ad8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001adc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d909      	bls.n	8001af8 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8001ae4:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001aee:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d1e7      	bne.n	8001ac6 <SearchDatarateME+0x36>
 8001af6:	e000      	b.n	8001afa <SearchDatarateME+0x6a>
      break;
 8001af8:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8001afa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001afe:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001b02:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 8001b04:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d16b      	bne.n	8001be4 <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 8001b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b10:	2200      	movs	r2, #0
 8001b12:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b14:	667a      	str	r2, [r7, #100]	@ 0x64
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001b20:	000b      	movs	r3, r1
 8001b22:	2200      	movs	r2, #0
 8001b24:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8001b28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b30:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001b32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b36:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001b3a:	f7fe fba9 	bl	8000290 <__aeabi_uldivmod>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	b293      	uxth	r3, r2
 8001b44:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001b48:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 8001b4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b52:	657a      	str	r2, [r7, #84]	@ 0x54
 8001b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b62:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001b66:	462b      	mov	r3, r5
 8001b68:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001b6c:	4642      	mov	r2, r8
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	464b      	mov	r3, r9
 8001b74:	4621      	mov	r1, r4
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	4641      	mov	r1, r8
 8001b80:	fba2 1201 	umull	r1, r2, r2, r1
 8001b84:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001b86:	460a      	mov	r2, r1
 8001b88:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001b8a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001b8c:	4413      	add	r3, r2
 8001b8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b90:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8001b94:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8001b98:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 8001b9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ba4:	647a      	str	r2, [r7, #68]	@ 0x44
 8001ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	17da      	asrs	r2, r3, #31
 8001bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bb4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001bb8:	462b      	mov	r3, r5
 8001bba:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001bbe:	4642      	mov	r2, r8
 8001bc0:	fb02 f203 	mul.w	r2, r2, r3
 8001bc4:	464b      	mov	r3, r9
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	4622      	mov	r2, r4
 8001bd0:	4641      	mov	r1, r8
 8001bd2:	fba2 ab01 	umull	sl, fp, r2, r1
 8001bd6:	445b      	add	r3, fp
 8001bd8:	469b      	mov	fp, r3
 8001bda:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8001bde:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8001be2:	e07d      	b.n	8001ce0 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 8001be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001be8:	2200      	movs	r2, #0
 8001bea:	4698      	mov	r8, r3
 8001bec:	4691      	mov	r9, r2
 8001bee:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001bf2:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8001bf6:	f1a1 0320 	sub.w	r3, r1, #32
 8001bfa:	f1c1 0220 	rsb	r2, r1, #32
 8001bfe:	fa09 f501 	lsl.w	r5, r9, r1
 8001c02:	fa08 f303 	lsl.w	r3, r8, r3
 8001c06:	431d      	orrs	r5, r3
 8001c08:	fa28 f202 	lsr.w	r2, r8, r2
 8001c0c:	4315      	orrs	r5, r2
 8001c0e:	fa08 f401 	lsl.w	r4, r8, r1
 8001c12:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 8001c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001c28:	f7fe fb32 	bl	8000290 <__aeabi_uldivmod>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	b293      	uxth	r3, r2
 8001c32:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001c36:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8001c38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001c4c:	17da      	asrs	r2, r3, #31
 8001c4e:	623b      	str	r3, [r7, #32]
 8001c50:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c52:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001c56:	462b      	mov	r3, r5
 8001c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	fb02 f203 	mul.w	r2, r2, r3
 8001c62:	464b      	mov	r3, r9
 8001c64:	4621      	mov	r1, r4
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	4641      	mov	r1, r8
 8001c70:	fba2 1201 	umull	r1, r2, r2, r1
 8001c74:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c76:	460a      	mov	r2, r1
 8001c78:	673a      	str	r2, [r7, #112]	@ 0x70
 8001c7a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001c7c:	4413      	add	r3, r2
 8001c7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c80:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8001c84:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8001c88:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 8001c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c90:	2200      	movs	r2, #0
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	61fa      	str	r2, [r7, #28]
 8001c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8001ca0:	17da      	asrs	r2, r3, #31
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	617a      	str	r2, [r7, #20]
 8001ca6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001caa:	462b      	mov	r3, r5
 8001cac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	fb02 f203 	mul.w	r2, r2, r3
 8001cb6:	464b      	mov	r3, r9
 8001cb8:	4621      	mov	r1, r4
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4622      	mov	r2, r4
 8001cc2:	4641      	mov	r1, r8
 8001cc4:	fba2 1201 	umull	r1, r2, r2, r1
 8001cc8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001cca:	460a      	mov	r2, r1
 8001ccc:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001cce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001cd0:	4413      	add	r3, r2
 8001cd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001cd4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8001cd8:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 8001cdc:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8001ce0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001ce4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001ce8:	1a84      	subs	r4, r0, r2
 8001cea:	60bc      	str	r4, [r7, #8]
 8001cec:	eb61 0303 	sbc.w	r3, r1, r3
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001cf6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001cfa:	1a84      	subs	r4, r0, r2
 8001cfc:	603c      	str	r4, [r7, #0]
 8001cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d08:	4623      	mov	r3, r4
 8001d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d0e:	4602      	mov	r2, r0
 8001d10:	4293      	cmp	r3, r2
 8001d12:	462b      	mov	r3, r5
 8001d14:	460a      	mov	r2, r1
 8001d16:	4193      	sbcs	r3, r2
 8001d18:	d205      	bcs.n	8001d26 <SearchDatarateME+0x296>
 8001d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	e002      	b.n	8001d2c <SearchDatarateME+0x29c>
 8001d26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001d30:	8013      	strh	r3, [r2, #0]

}
 8001d32:	bf00      	nop
 8001d34:	37b8      	adds	r7, #184	@ 0xb8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d3c:	02faf080 	.word	0x02faf080
 8001d40:	01c9c380 	.word	0x01c9c380

08001d44 <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 8001d44:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d48:	b08c      	sub	sp, #48	@ 0x30
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	461e      	mov	r6, r3
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d54:	460b      	mov	r3, r1
 8001d56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001d60:	4633      	mov	r3, r6
 8001d62:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 8001d66:	4b35      	ldr	r3, [pc, #212]	@ (8001e3c <ComputeFreqDeviation+0xf8>)
 8001d68:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 8001d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d127      	bne.n	8001dc2 <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 8001d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d74:	2200      	movs	r2, #0
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	617a      	str	r2, [r7, #20]
 8001d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	60fa      	str	r2, [r7, #12]
 8001d84:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d88:	462b      	mov	r3, r5
 8001d8a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d8e:	4642      	mov	r2, r8
 8001d90:	fb02 f203 	mul.w	r2, r2, r3
 8001d94:	464b      	mov	r3, r9
 8001d96:	4621      	mov	r1, r4
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4622      	mov	r2, r4
 8001da0:	4641      	mov	r1, r8
 8001da2:	fba2 ab01 	umull	sl, fp, r2, r1
 8001da6:	445b      	add	r3, fp
 8001da8:	469b      	mov	fp, r3
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	ea4f 529a 	mov.w	r2, sl, lsr #22
 8001db6:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 8001dba:	ea4f 539b 	mov.w	r3, fp, lsr #22
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	e036      	b.n	8001e30 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 8001dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001dd2:	17da      	asrs	r2, r3, #31
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	61fa      	str	r2, [r7, #28]
 8001dd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001de2:	4652      	mov	r2, sl
 8001de4:	fb02 f203 	mul.w	r2, r2, r3
 8001de8:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8001dec:	465b      	mov	r3, fp
 8001dee:	4682      	mov	sl, r0
 8001df0:	468b      	mov	fp, r1
 8001df2:	4651      	mov	r1, sl
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	4652      	mov	r2, sl
 8001dfc:	69b9      	ldr	r1, [r7, #24]
 8001dfe:	fba2 4501 	umull	r4, r5, r2, r1
 8001e02:	442b      	add	r3, r5
 8001e04:	461d      	mov	r5, r3
 8001e06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e0a:	f1c3 0317 	rsb	r3, r3, #23
 8001e0e:	f1c3 0120 	rsb	r1, r3, #32
 8001e12:	f1a3 0220 	sub.w	r2, r3, #32
 8001e16:	fa24 f803 	lsr.w	r8, r4, r3
 8001e1a:	fa05 f101 	lsl.w	r1, r5, r1
 8001e1e:	ea48 0801 	orr.w	r8, r8, r1
 8001e22:	fa25 f202 	lsr.w	r2, r5, r2
 8001e26:	ea48 0802 	orr.w	r8, r8, r2
 8001e2a:	fa25 f903 	lsr.w	r9, r5, r3
 8001e2e:	4643      	mov	r3, r8
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3730      	adds	r7, #48	@ 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e3a:	4770      	bx	lr
 8001e3c:	02faf080 	.word	0x02faf080

08001e40 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8001e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e44:	b0a2      	sub	sp, #136	@ 0x88
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8001e4a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e4c:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 8001e4e:	2304      	movs	r3, #4
 8001e50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001e54:	2301      	movs	r3, #1
 8001e56:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001e60:	e012      	b.n	8001e88 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 8001e62:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001e66:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001e6a:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 8001e6e:	20ff      	movs	r0, #255	@ 0xff
 8001e70:	f7ff ff68 	bl	8001d44 <ComputeFreqDeviation>
 8001e74:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 8001e76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001e78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d309      	bcc.n	8001e92 <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001e7e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e82:	3301      	adds	r3, #1
 8001e84:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001e88:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	d1e8      	bne.n	8001e62 <SearchFreqDevME+0x22>
 8001e90:	e000      	b.n	8001e94 <SearchFreqDevME+0x54>
      break;
 8001e92:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 8001e94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e96:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e9a:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 8001e9c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d155      	bne.n	8001f50 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 8001ea4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001eaa:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001eb8:	4629      	mov	r1, r5
 8001eba:	058b      	lsls	r3, r1, #22
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	058a      	lsls	r2, r1, #22
 8001ec6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 8001eca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001ece:	a36e      	add	r3, pc, #440	@ (adr r3, 8002088 <SearchFreqDevME+0x248>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe f9dc 	bl	8000290 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	b2d3      	uxtb	r3, r2
 8001ede:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ee0:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 8001ee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2200      	movs	r2, #0
 8001eea:	633b      	str	r3, [r7, #48]	@ 0x30
 8001eec:	637a      	str	r2, [r7, #52]	@ 0x34
 8001eee:	4b68      	ldr	r3, [pc, #416]	@ (8002090 <SearchFreqDevME+0x250>)
 8001ef0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ef4:	462a      	mov	r2, r5
 8001ef6:	fb03 f202 	mul.w	r2, r3, r2
 8001efa:	2300      	movs	r3, #0
 8001efc:	4621      	mov	r1, r4
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	4a62      	ldr	r2, [pc, #392]	@ (8002090 <SearchFreqDevME+0x250>)
 8001f06:	4621      	mov	r1, r4
 8001f08:	fba1 ab02 	umull	sl, fp, r1, r2
 8001f0c:	445b      	add	r3, fp
 8001f0e:	469b      	mov	fp, r3
 8001f10:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 8001f14:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8001f18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	17da      	asrs	r2, r3, #31
 8001f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f24:	4b5a      	ldr	r3, [pc, #360]	@ (8002090 <SearchFreqDevME+0x250>)
 8001f26:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001f2a:	462a      	mov	r2, r5
 8001f2c:	fb03 f202 	mul.w	r2, r3, r2
 8001f30:	2300      	movs	r3, #0
 8001f32:	4621      	mov	r1, r4
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a55      	ldr	r2, [pc, #340]	@ (8002090 <SearchFreqDevME+0x250>)
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	fba1 8902 	umull	r8, r9, r1, r2
 8001f42:	444b      	add	r3, r9
 8001f44:	4699      	mov	r9, r3
 8001f46:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8001f4a:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8001f4e:	e06d      	b.n	800202c <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8001f50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f52:	2200      	movs	r2, #0
 8001f54:	623b      	str	r3, [r7, #32]
 8001f56:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f58:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f5c:	f1c3 0117 	rsb	r1, r3, #23
 8001f60:	f1a1 0320 	sub.w	r3, r1, #32
 8001f64:	f1c1 0220 	rsb	r2, r1, #32
 8001f68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f6c:	4648      	mov	r0, r9
 8001f6e:	fa00 f501 	lsl.w	r5, r0, r1
 8001f72:	4640      	mov	r0, r8
 8001f74:	fa00 f303 	lsl.w	r3, r0, r3
 8001f78:	431d      	orrs	r5, r3
 8001f7a:	4643      	mov	r3, r8
 8001f7c:	fa23 f202 	lsr.w	r2, r3, r2
 8001f80:	4315      	orrs	r5, r2
 8001f82:	4643      	mov	r3, r8
 8001f84:	408b      	lsls	r3, r1
 8001f86:	461c      	mov	r4, r3
 8001f88:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 8001f8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001f90:	a33d      	add	r3, pc, #244	@ (adr r3, 8002088 <SearchFreqDevME+0x248>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe f97b 	bl	8000290 <__aeabi_uldivmod>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	b2d3      	uxtb	r3, r2
 8001fa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fa2:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 8001fa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001fac:	17da      	asrs	r2, r3, #31
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	61fa      	str	r2, [r7, #28]
 8001fb2:	4b37      	ldr	r3, [pc, #220]	@ (8002090 <SearchFreqDevME+0x250>)
 8001fb4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001fb8:	462a      	mov	r2, r5
 8001fba:	fb03 f202 	mul.w	r2, r3, r2
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a31      	ldr	r2, [pc, #196]	@ (8002090 <SearchFreqDevME+0x250>)
 8001fca:	4621      	mov	r1, r4
 8001fcc:	fba1 1202 	umull	r1, r2, r1, r2
 8001fd0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001fd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fd8:	4413      	add	r3, r2
 8001fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fdc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001fe0:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8001fe4:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8001fe8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8001ff0:	17da      	asrs	r2, r3, #31
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	617a      	str	r2, [r7, #20]
 8001ff6:	4b26      	ldr	r3, [pc, #152]	@ (8002090 <SearchFreqDevME+0x250>)
 8001ff8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ffc:	462a      	mov	r2, r5
 8001ffe:	fb03 f202 	mul.w	r2, r3, r2
 8002002:	2300      	movs	r3, #0
 8002004:	4621      	mov	r1, r4
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	4a20      	ldr	r2, [pc, #128]	@ (8002090 <SearchFreqDevME+0x250>)
 800200e:	4621      	mov	r1, r4
 8002010:	fba1 1202 	umull	r1, r2, r1, r2
 8002014:	647a      	str	r2, [r7, #68]	@ 0x44
 8002016:	460a      	mov	r2, r1
 8002018:	643a      	str	r2, [r7, #64]	@ 0x40
 800201a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800201c:	4413      	add	r3, r2
 800201e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002020:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002024:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8002028:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 800202c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002030:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002034:	1a84      	subs	r4, r0, r2
 8002036:	60bc      	str	r4, [r7, #8]
 8002038:	eb61 0303 	sbc.w	r3, r1, r3
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002042:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002046:	1a84      	subs	r4, r0, r2
 8002048:	603c      	str	r4, [r7, #0]
 800204a:	eb61 0303 	sbc.w	r3, r1, r3
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002054:	4623      	mov	r3, r4
 8002056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800205a:	4602      	mov	r2, r0
 800205c:	4293      	cmp	r3, r2
 800205e:	462b      	mov	r3, r5
 8002060:	460a      	mov	r2, r1
 8002062:	4193      	sbcs	r3, r2
 8002064:	d204      	bcs.n	8002070 <SearchFreqDevME+0x230>
 8002066:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	3301      	adds	r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e001      	b.n	8002074 <SearchFreqDevME+0x234>
 8002070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002076:	7013      	strb	r3, [r2, #0]
}
 8002078:	bf00      	nop
 800207a:	3788      	adds	r7, #136	@ 0x88
 800207c:	46bd      	mov	sp, r7
 800207e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002082:	bf00      	nop
 8002084:	f3af 8000 	nop.w
 8002088:	02faf080 	.word	0x02faf080
 800208c:	00000000 	.word	0x00000000
 8002090:	02faf080 	.word	0x02faf080

08002094 <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 80020a2:	f107 0217 	add.w	r2, r7, #23
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	68b8      	ldr	r0, [r7, #8]
 80020ae:	f7ff fcef 	bl	8001a90 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 80020b2:	f107 0212 	add.w	r2, r7, #18
 80020b6:	f107 0313 	add.w	r3, r7, #19
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff febf 	bl	8001e40 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 80020c2:	8abb      	ldrh	r3, [r7, #20]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2200      	movs	r2, #0
 80020cc:	4619      	mov	r1, r3
 80020ce:	200e      	movs	r0, #14
 80020d0:	f7ff f8c6 	bl	8001260 <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 80020d4:	8abb      	ldrh	r3, [r7, #20]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2200      	movs	r2, #0
 80020da:	4619      	mov	r1, r3
 80020dc:	200f      	movs	r0, #15
 80020de:	f7ff f8bf 	bl	8001260 <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 80020e2:	7dfa      	ldrb	r2, [r7, #23]
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2200      	movs	r2, #0
 80020ec:	4619      	mov	r1, r3
 80020ee:	2010      	movs	r0, #16
 80020f0:	f7ff f8b6 	bl	8001260 <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	2200      	movs	r2, #0
 80020f8:	4619      	mov	r1, r3
 80020fa:	2012      	movs	r0, #18
 80020fc:	f7ff f8b0 	bl	8001260 <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8002100:	7cbb      	ldrb	r3, [r7, #18]
 8002102:	2200      	movs	r2, #0
 8002104:	4619      	mov	r1, r3
 8002106:	2011      	movs	r0, #17
 8002108:	f7ff f8aa 	bl	8001260 <S2LP_WriteReg>
}
 800210c:	bf00      	nop
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b0e      	cmp	r3, #14
 8002120:	dd02      	ble.n	8002128 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	e006      	b.n	8002136 <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f1c3 031d 	rsb	r3, r3, #29
 8002134:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	2062      	movs	r0, #98	@ 0x62
 800213c:	f7ff f890 	bl	8001260 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	2064      	movs	r0, #100	@ 0x64
 8002146:	f7ff f88b 	bl	8001260 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2063      	movs	r0, #99	@ 0x63
 8002150:	f7ff f886 	bl	8001260 <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2200      	movs	r2, #0
 8002158:	4619      	mov	r1, r3
 800215a:	2061      	movs	r0, #97	@ 0x61
 800215c:	f7ff f880 	bl	8001260 <S2LP_WriteReg>
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <S2LP_Init>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 8002170:	4a48      	ldr	r2, [pc, #288]	@ (8002294 <S2LP_Init+0x12c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 8002176:	f002 fb83 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 800217a:	4603      	mov	r3, r0
 800217c:	4a46      	ldr	r2, [pc, #280]	@ (8002298 <S2LP_Init+0x130>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0a9b      	lsrs	r3, r3, #10
 8002184:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002186:	b672      	cpsid	i
}
 8002188:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 800218a:	2200      	movs	r2, #0
 800218c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002190:	4842      	ldr	r0, [pc, #264]	@ (800229c <S2LP_Init+0x134>)
 8002192:	f001 feb1 	bl	8003ef8 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e003      	b.n	80021a4 <S2LP_Init+0x3c>
		asm volatile("nop");
 800219c:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d3f7      	bcc.n	800219c <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 80021ac:	b662      	cpsie	i
}
 80021ae:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 80021b0:	2200      	movs	r2, #0
 80021b2:	2103      	movs	r1, #3
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff f853 	bl	8001260 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 80021ba:	2200      	movs	r2, #0
 80021bc:	21a4      	movs	r1, #164	@ 0xa4
 80021be:	2053      	movs	r0, #83	@ 0x53
 80021c0:	f7ff f84e 	bl	8001260 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 80021c4:	2200      	movs	r2, #0
 80021c6:	2101      	movs	r1, #1
 80021c8:	2052      	movs	r0, #82	@ 0x52
 80021ca:	f7ff f849 	bl	8001260 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2051      	movs	r0, #81	@ 0x51
 80021d4:	f7ff f844 	bl	8001260 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	2050      	movs	r0, #80	@ 0x50
 80021de:	f7ff f83f 	bl	8001260 <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2120      	movs	r1, #32
 80021e6:	203f      	movs	r0, #63	@ 0x3f
 80021e8:	f7ff f83a 	bl	8001260 <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 80021ec:	2200      	movs	r2, #0
 80021ee:	21b7      	movs	r1, #183	@ 0xb7
 80021f0:	2033      	movs	r0, #51	@ 0x33
 80021f2:	f7ff f835 	bl	8001260 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2154      	movs	r1, #84	@ 0x54
 80021fa:	2034      	movs	r0, #52	@ 0x34
 80021fc:	f7ff f830 	bl	8001260 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8002200:	2200      	movs	r2, #0
 8002202:	212a      	movs	r1, #42	@ 0x2a
 8002204:	2035      	movs	r0, #53	@ 0x35
 8002206:	f7ff f82b 	bl	8001260 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 800220a:	2200      	movs	r2, #0
 800220c:	213e      	movs	r1, #62	@ 0x3e
 800220e:	2036      	movs	r0, #54	@ 0x36
 8002210:	f7ff f826 	bl	8001260 <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 8002214:	4822      	ldr	r0, [pc, #136]	@ (80022a0 <S2LP_Init+0x138>)
 8002216:	f7ff fa8f 	bl	8001738 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 800221a:	2000      	movs	r0, #0
 800221c:	f7ff ff7a 	bl	8002114 <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 8002220:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8002224:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff ff33 	bl	8002094 <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 800222e:	2200      	movs	r2, #0
 8002230:	2120      	movs	r1, #32
 8002232:	2030      	movs	r0, #48	@ 0x30
 8002234:	f7ff f814 	bl	8001260 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	202e      	movs	r0, #46	@ 0x2e
 800223e:	f7ff f80f 	bl	8001260 <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 8002242:	f107 020c 	add.w	r2, r7, #12
 8002246:	f107 030b 	add.w	r3, r7, #11
 800224a:	4619      	mov	r1, r3
 800224c:	206c      	movs	r0, #108	@ 0x6c
 800224e:	f7fe ffc9 	bl	80011e4 <S2LP_ReadReg>
 8002252:	4603      	mov	r3, r0
 8002254:	73fb      	strb	r3, [r7, #15]
	if (err) {
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <S2LP_Init+0xf8>
		return err;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	e015      	b.n	800228c <S2LP_Init+0x124>
	} else if (rco_conf != 0x45) {
 8002260:	7afb      	ldrb	r3, [r7, #11]
 8002262:	2b45      	cmp	r3, #69	@ 0x45
 8002264:	d006      	beq.n	8002274 <S2LP_Init+0x10c>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	4619      	mov	r1, r3
 800226a:	480e      	ldr	r0, [pc, #56]	@ (80022a4 <S2LP_Init+0x13c>)
 800226c:	f005 f9b0 	bl	80075d0 <iprintf>
		return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e00b      	b.n	800228c <S2LP_Init+0x124>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 8002274:	7b7b      	ldrb	r3, [r7, #13]
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d004      	beq.n	800228a <S2LP_Init+0x122>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
 8002280:	4809      	ldr	r0, [pc, #36]	@ (80022a8 <S2LP_Init+0x140>)
 8002282:	f005 fa0d 	bl	80076a0 <puts>
		return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <S2LP_Init+0x124>
	}

	return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200010e8 	.word	0x200010e8
 8002298:	1b4e81b5 	.word	0x1b4e81b5
 800229c:	48001400 	.word	0x48001400
 80022a0:	33bca100 	.word	0x33bca100
 80022a4:	080085b8 	.word	0x080085b8
 80022a8:	08008614 	.word	0x08008614

080022ac <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	2200      	movs	r2, #0
 80022b6:	4619      	mov	r1, r3
 80022b8:	20fc      	movs	r0, #252	@ 0xfc
 80022ba:	f7fe ff93 	bl	80011e4 <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 80022be:	1dbb      	adds	r3, r7, #6
 80022c0:	2200      	movs	r2, #0
 80022c2:	4619      	mov	r1, r3
 80022c4:	20fd      	movs	r0, #253	@ 0xfd
 80022c6:	f7fe ff8d 	bl	80011e4 <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 80022d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <S2LP_IRQ_Handler+0x58>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 80022da:	79bb      	ldrb	r3, [r7, #6]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <S2LP_IRQ_Handler+0x5c>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <S2LP_IRQ_Handler+0x60>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200010e5 	.word	0x200010e5
 8002308:	200010e6 	.word	0x200010e6
 800230c:	200010e4 	.word	0x200010e4

08002310 <Spectrogram_Format>:
    }
}

// Convert 12-bit DC ADC samples to Q1.15 fixed point signal and remove DC component
void Spectrogram_Format(q15_t *buf)
{
 8002310:	b510      	push	{r4, lr}

	// /!\ When multiplying/dividing by a power 2, always prefer shifting left/right instead, ARM instructions to do so are more efficient.
	// Here we should shift left by 3.

	START_CYCLE_COUNT_SIGNAL_PROC_OP();
	arm_shift_q15(buf, 3, buf, SAMPLES_PER_MELVEC);
 8002312:	f44f 7300 	mov.w	r3, #512	@ 0x200
{
 8002316:	4604      	mov	r4, r0
	arm_shift_q15(buf, 3, buf, SAMPLES_PER_MELVEC);
 8002318:	2103      	movs	r1, #3
 800231a:	4602      	mov	r2, r0
 800231c:	f004 fa18 	bl	8006750 <arm_shift_q15>

	// Since we use a signed representation, we should now center the value around zero, we can do this by substracting 2**14.
	// Now the value of buf[i] is in [-2**14 , 2**14 - 1]

	START_CYCLE_COUNT_SIGNAL_PROC_OP();
	for(uint16_t i=0; i < SAMPLES_PER_MELVEC; i++) { // Remove DC component
 8002320:	1ea3      	subs	r3, r4, #2
 8002322:	f204 31fe 	addw	r1, r4, #1022	@ 0x3fe
		buf[i] -= (1 << 14);
 8002326:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800232a:	f5a2 4280 	sub.w	r2, r2, #16384	@ 0x4000
	for(uint16_t i=0; i < SAMPLES_PER_MELVEC; i++) { // Remove DC component
 800232e:	4299      	cmp	r1, r3
		buf[i] -= (1 << 14);
 8002330:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0; i < SAMPLES_PER_MELVEC; i++) { // Remove DC component
 8002332:	d1f8      	bne.n	8002326 <Spectrogram_Format+0x16>
	}
	STOP_CYCLE_COUNT_SIGNAL_PROC_OP("Step 0.2 - Remove DC Component");
}
 8002334:	bd10      	pop	{r4, pc}
 8002336:	bf00      	nop

08002338 <Spectrogram_Compute>:

// Compute spectrogram of samples and transform into MEL vectors.
void Spectrogram_Compute(q15_t *samples, q15_t *melvec)
{
 8002338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// STEP 1  : Windowing of input samples
	//           --> Pointwise product
	//           Complexity: O(N)
	//           Number of cycles: <TODO>
	START_CYCLE_COUNT_SIGNAL_PROC_OP();
	arm_mult_q15(samples, hamming_window, buf, SAMPLES_PER_MELVEC);
 800233c:	4a3a      	ldr	r2, [pc, #232]	@ (8002428 <Spectrogram_Compute+0xf0>)
 800233e:	4c3b      	ldr	r4, [pc, #236]	@ (800242c <Spectrogram_Compute+0xf4>)
{
 8002340:	b0aa      	sub	sp, #168	@ 0xa8
	arm_mult_q15(samples, hamming_window, buf, SAMPLES_PER_MELVEC);
 8002342:	f44f 7300 	mov.w	r3, #512	@ 0x200
{
 8002346:	460d      	mov	r5, r1
	arm_mult_q15(samples, hamming_window, buf, SAMPLES_PER_MELVEC);
 8002348:	4939      	ldr	r1, [pc, #228]	@ (8002430 <Spectrogram_Compute+0xf8>)
 800234a:	f004 fa93 	bl	8006874 <arm_mult_q15>

	START_CYCLE_COUNT_FFT();

	// Since the FFT is a recursive algorithm, the values are rescaled in the function to ensure that overflow cannot happen.
	arm_rfft_instance_q15 rfft_inst;
	arm_rfft_init_q15(&rfft_inst, SAMPLES_PER_MELVEC, 0, 1);
 800234e:	2301      	movs	r3, #1
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002356:	a805      	add	r0, sp, #20
 8002358:	f004 f8d4 	bl	8006504 <arm_rfft_init_q15>
	arm_rfft_q15(&rfft_inst, buf, buf_fft);
 800235c:	4a35      	ldr	r2, [pc, #212]	@ (8002434 <Spectrogram_Compute+0xfc>)
 800235e:	4932      	ldr	r1, [pc, #200]	@ (8002428 <Spectrogram_Compute+0xf0>)
 8002360:	a805      	add	r0, sp, #20
 8002362:	f004 f853 	bl	800640c <arm_rfft_q15>
	// STEP 3.1: Find the extremum value (maximum of absolute values)
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	q15_t vmax;
	uint32_t pIndex=0;
 8002366:	2100      	movs	r1, #0

	START_CYCLE_COUNT_SIGNAL_PROC_OP();
	arm_absmax_q15(buf_fft, SAMPLES_PER_MELVEC, &vmax, &pIndex);
 8002368:	4832      	ldr	r0, [pc, #200]	@ (8002434 <Spectrogram_Compute+0xfc>)
	uint32_t pIndex=0;
 800236a:	9101      	str	r1, [sp, #4]
	arm_absmax_q15(buf_fft, SAMPLES_PER_MELVEC, &vmax, &pIndex);
 800236c:	f10d 0202 	add.w	r2, sp, #2
 8002370:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002374:	ab01      	add	r3, sp, #4
 8002376:	f7fe fb11 	bl	800099c <arm_absmax_q15>
	// STEP 3.2: Normalize the vector - Dynamic range increase
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	START_CYCLE_COUNT_SIGNAL_PROC_OP();
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 800237a:	4a2f      	ldr	r2, [pc, #188]	@ (8002438 <Spectrogram_Compute+0x100>)
	{
		buf[i] = (q15_t) (((q31_t) buf_fft[i] << 15) /((q31_t)vmax));
 800237c:	f9bd c002 	ldrsh.w	ip, [sp, #2]
 8002380:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8002384:	4621      	mov	r1, r4
 8002386:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 800238a:	4282      	cmp	r2, r0
		buf[i] = (q15_t) (((q31_t) buf_fft[i] << 15) /((q31_t)vmax));
 800238c:	ea4f 33c3 	mov.w	r3, r3, lsl #15
 8002390:	fb93 f3fc 	sdiv	r3, r3, ip
 8002394:	f821 3f02 	strh.w	r3, [r1, #2]!
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8002398:	d1f5      	bne.n	8002386 <Spectrogram_Compute+0x4e>
	//           --> The output buffer is now two times smaller because (real|imag) --> (mag)
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	START_CYCLE_COUNT_SIGNAL_PROC_OP();
	arm_cmplx_mag_q15(buf, buf, SAMPLES_PER_MELVEC/2);
 800239a:	4923      	ldr	r1, [pc, #140]	@ (8002428 <Spectrogram_Compute+0xf0>)
 800239c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023a0:	4608      	mov	r0, r1
 80023a2:	f004 f92b 	bl	80065fc <arm_cmplx_mag_q15>
	//           Number of cycles: <TODO>

	START_CYCLE_COUNT_SIGNAL_PROC_OP();
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
	{
		buf[i] = (q15_t) ((((q31_t) buf[i]) * ((q31_t) vmax) ) >> 15 );
 80023a6:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80023aa:	4a24      	ldr	r2, [pc, #144]	@ (800243c <Spectrogram_Compute+0x104>)
 80023ac:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 80023b0:	fb13 f301 	smulbb	r3, r3, r1
 80023b4:	13db      	asrs	r3, r3, #15
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 80023b6:	4294      	cmp	r4, r2
		buf[i] = (q15_t) ((((q31_t) buf[i]) * ((q31_t) vmax) ) >> 15 );
 80023b8:	8023      	strh	r3, [r4, #0]
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 80023ba:	d1f7      	bne.n	80023ac <Spectrogram_Compute+0x74>
 80023bc:	1eaf      	subs	r7, r5, #2
 80023be:	f105 0826 	add.w	r8, r5, #38	@ 0x26
 80023c2:	4e1f      	ldr	r6, [pc, #124]	@ (8002440 <Spectrogram_Compute+0x108>)
		q15_t* fft_samples = &fft_array[mel_triangle.idx_offset];
 80023c4:	4d18      	ldr	r5, [pc, #96]	@ (8002428 <Spectrogram_Compute+0xf0>)
        mel_trian_t mel_triangle = mel_triangles[i];
 80023c6:	4631      	mov	r1, r6
 80023c8:	227c      	movs	r2, #124	@ 0x7c
 80023ca:	a80b      	add	r0, sp, #44	@ 0x2c
 80023cc:	f005 fb87 	bl	8007ade <memcpy>
		if (mel_triangle.idx_offset + mel_triangle.triangle_len > fft_len) {
 80023d0:	e9dd 240b 	ldrd	r2, r4, [sp, #44]	@ 0x2c
        arm_dot_prod_q15(fft_samples, mel_triangle.values, mel_triangle.triangle_len, &mel_result);
 80023d4:	eb05 0044 	add.w	r0, r5, r4, lsl #1
		if (mel_triangle.idx_offset + mel_triangle.triangle_len > fft_len) {
 80023d8:	4414      	add	r4, r2
 80023da:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
        arm_dot_prod_q15(fft_samples, mel_triangle.values, mel_triangle.triangle_len, &mel_result);
 80023de:	ab02      	add	r3, sp, #8
 80023e0:	a90d      	add	r1, sp, #52	@ 0x34
		if (mel_triangle.idx_offset + mel_triangle.triangle_len > fft_len) {
 80023e2:	d81b      	bhi.n	800241c <Spectrogram_Compute+0xe4>
        arm_dot_prod_q15(fft_samples, mel_triangle.values, mel_triangle.triangle_len, &mel_result);
 80023e4:	f004 faa4 	bl	8006930 <arm_dot_prod_q15>
		mel_array[i] = clip_q63_to_q15(mel_result);
 80023e8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   */
  __STATIC_FORCEINLINE q15_t clip_q63_to_q15(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 80023ec:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80023f0:	ebb1 7fe2 	cmp.w	r1, r2, asr #31
 80023f4:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
 80023f8:	d008      	beq.n	800240c <Spectrogram_Compute+0xd4>
 80023fa:	f827 3f02 	strh.w	r3, [r7, #2]!
    for (size_t i = 0; i < mel_len; i++) {
 80023fe:	45b8      	cmp	r8, r7
 8002400:	f106 067c 	add.w	r6, r6, #124	@ 0x7c
 8002404:	d1df      	bne.n	80023c6 <Spectrogram_Compute+0x8e>

		arm_mat_mult_fast_q15(&hz2mel_inst, &fftmag_inst, &melvec_inst, buf_tmp);
		STOP_CYCLE_COUNT_MEL("Step 4 - Mel matrix");
	#endif
	
}
 8002406:	b02a      	add	sp, #168	@ 0xa8
 8002408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800240c:	0bd2      	lsrs	r2, r2, #15
 800240e:	f827 2f02 	strh.w	r2, [r7, #2]!
    for (size_t i = 0; i < mel_len; i++) {
 8002412:	45b8      	cmp	r8, r7
 8002414:	f106 067c 	add.w	r6, r6, #124	@ 0x7c
 8002418:	d1d5      	bne.n	80023c6 <Spectrogram_Compute+0x8e>
 800241a:	e7f4      	b.n	8002406 <Spectrogram_Compute+0xce>
			DEBUG_PRINT("Error: Mel triangle is too large for the FFT array\n");
 800241c:	4809      	ldr	r0, [pc, #36]	@ (8002444 <Spectrogram_Compute+0x10c>)
 800241e:	f005 f93f 	bl	80076a0 <puts>
}
 8002422:	b02a      	add	sp, #168	@ 0xa8
 8002424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002428:	200018ec 	.word	0x200018ec
 800242c:	200018ea 	.word	0x200018ea
 8002430:	20000000 	.word	0x20000000
 8002434:	200010ec 	.word	0x200010ec
 8002438:	200010ea 	.word	0x200010ea
 800243c:	20001aea 	.word	0x20001aea
 8002440:	080087d0 	.word	0x080087d0
 8002444:	0800879c 	.word	0x0800879c

08002448 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002448:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800244a:	4810      	ldr	r0, [pc, #64]	@ (800248c <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800244c:	4c10      	ldr	r4, [pc, #64]	@ (8002490 <MX_SPI1_Init+0x48>)
 800244e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002452:	e9c0 4100 	strd	r4, r1, [r0]
 8002456:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800245a:	2300      	movs	r3, #0
 800245c:	2208      	movs	r2, #8
 800245e:	f44f 64e0 	mov.w	r4, #1792	@ 0x700
 8002462:	6181      	str	r1, [r0, #24]
 8002464:	2107      	movs	r1, #7
 8002466:	e9c0 3402 	strd	r3, r4, [r0, #8]
 800246a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800246e:	e9c0 2307 	strd	r2, r3, [r0, #28]
 8002472:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 8002476:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800247a:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800247c:	f002 fe82 	bl	8005184 <HAL_SPI_Init>
 8002480:	b900      	cbnz	r0, 8002484 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002482:	bd10      	pop	{r4, pc}
 8002484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002488:	f7fe bcc2 	b.w	8000e10 <Error_Handler>
 800248c:	20001cf0 	.word	0x20001cf0
 8002490:	40013000 	.word	0x40013000

08002494 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002494:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8002496:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <HAL_SPI_MspInit+0x8c>)
 8002498:	6802      	ldr	r2, [r0, #0]
{
 800249a:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 800249e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80024a4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80024a8:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 80024aa:	d001      	beq.n	80024b0 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024ac:	b00a      	add	sp, #40	@ 0x28
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024b0:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80024bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80024be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024c0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80024c4:	9201      	str	r2, [sp, #4]
 80024c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 80024d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024d2:	f002 0201 	and.w	r2, r2, #1
 80024d6:	9202      	str	r2, [sp, #8]
 80024d8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024dc:	f042 0210 	orr.w	r2, r2, #16
 80024e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80024e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ea:	22c0      	movs	r2, #192	@ 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024f0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024fe:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f001 fbd6 	bl	8003cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002508:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800250a:	4806      	ldr	r0, [pc, #24]	@ (8002524 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800250c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002510:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002518:	f001 fbca 	bl	8003cb0 <HAL_GPIO_Init>
}
 800251c:	b00a      	add	sp, #40	@ 0x28
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	40013000 	.word	0x40013000
 8002524:	48001000 	.word	0x48001000

08002528 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002528:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_MspInit+0x2c>)
 800252a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	661a      	str	r2, [r3, #96]	@ 0x60
 8002532:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8002534:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	f002 0201 	and.w	r2, r2, #1
 800253a:	9200      	str	r2, [sp, #0]
 800253c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002540:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002544:	659a      	str	r2, [r3, #88]	@ 0x58
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002550:	b002      	add	sp, #8
 8002552:	4770      	bx	lr
 8002554:	40021000 	.word	0x40021000

08002558 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <NMI_Handler>
 800255a:	bf00      	nop

0800255c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <HardFault_Handler>
 800255e:	bf00      	nop

08002560 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <MemManage_Handler>
 8002562:	bf00      	nop

08002564 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <BusFault_Handler>
 8002566:	bf00      	nop

08002568 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <UsageFault_Handler>
 800256a:	bf00      	nop

0800256c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop

08002574 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop

08002578 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002578:	f000 b9dc 	b.w	8002934 <HAL_IncTick>

0800257c <EXTI3_IRQHandler>:
  */
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 800257c:	2008      	movs	r0, #8
 800257e:	f001 bcc1 	b.w	8003f04 <HAL_GPIO_EXTI_IRQHandler>
 8002582:	bf00      	nop

08002584 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002584:	4801      	ldr	r0, [pc, #4]	@ (800258c <DMA1_Channel1_IRQHandler+0x8>)
 8002586:	f001 bb45 	b.w	8003c14 <HAL_DMA_IRQHandler>
 800258a:	bf00      	nop
 800258c:	20000484 	.word	0x20000484

08002590 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002590:	4801      	ldr	r0, [pc, #4]	@ (8002598 <TIM3_IRQHandler+0x8>)
 8002592:	f003 b981 	b.w	8005898 <HAL_TIM_IRQHandler>
 8002596:	bf00      	nop
 8002598:	20001d58 	.word	0x20001d58

0800259c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800259c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025a0:	f001 bcb0 	b.w	8003f04 <HAL_GPIO_EXTI_IRQHandler>

080025a4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a4:	490c      	ldr	r1, [pc, #48]	@ (80025d8 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a6:	4a0d      	ldr	r2, [pc, #52]	@ (80025dc <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80025a8:	680b      	ldr	r3, [r1, #0]
{
 80025aa:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025ac:	4c0c      	ldr	r4, [pc, #48]	@ (80025e0 <_sbrk+0x3c>)
 80025ae:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80025b0:	b12b      	cbz	r3, 80025be <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b2:	4418      	add	r0, r3
 80025b4:	4290      	cmp	r0, r2
 80025b6:	d807      	bhi.n	80025c8 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80025b8:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80025be:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <_sbrk+0x40>)
 80025c0:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80025c2:	4418      	add	r0, r3
 80025c4:	4290      	cmp	r0, r2
 80025c6:	d9f7      	bls.n	80025b8 <_sbrk+0x14>
    errno = ENOMEM;
 80025c8:	f005 fa5c 	bl	8007a84 <__errno>
 80025cc:	230c      	movs	r3, #12
 80025ce:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd10      	pop	{r4, pc}
 80025d8:	20001d54 	.word	0x20001d54
 80025dc:	20050000 	.word	0x20050000
 80025e0:	00000400 	.word	0x00000400
 80025e4:	20001f88 	.word	0x20001f88

080025e8 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025e8:	480e      	ldr	r0, [pc, #56]	@ (8002624 <SystemInit+0x3c>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80025ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <SystemInit+0x40>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025ec:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80025f0:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80025f4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 80025f8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025fa:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002602:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 800260a:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800260e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8002612:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8002614:	60d8      	str	r0, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800261c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800261e:	6199      	str	r1, [r3, #24]
}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00
 8002628:	40021000 	.word	0x40021000

0800262c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800262c:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800262e:	481a      	ldr	r0, [pc, #104]	@ (8002698 <MX_TIM3_Init+0x6c>)
 8002630:	4a1a      	ldr	r2, [pc, #104]	@ (800269c <MX_TIM3_Init+0x70>)
 8002632:	6002      	str	r2, [r0, #0]
{
 8002634:	b089      	sub	sp, #36	@ 0x24
  htim3.Init.Prescaler = 23;
 8002636:	2217      	movs	r2, #23
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002638:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 23;
 800263a:	6042      	str	r2, [r0, #4]
 800263c:	22c3      	movs	r2, #195	@ 0xc3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800263e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002642:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002646:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.Prescaler = 23;
 800264a:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800264e:	9303      	str	r3, [sp, #12]
  htim3.Init.Prescaler = 23;
 8002650:	6103      	str	r3, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 195;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002652:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002654:	f002 ff9e 	bl	8005594 <HAL_TIM_Base_Init>
 8002658:	b998      	cbnz	r0, 8002682 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800265e:	480e      	ldr	r0, [pc, #56]	@ (8002698 <MX_TIM3_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002660:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002662:	a904      	add	r1, sp, #16
 8002664:	f003 f864 	bl	8005730 <HAL_TIM_ConfigClockSource>
 8002668:	b998      	cbnz	r0, 8002692 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800266a:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800266e:	480a      	ldr	r0, [pc, #40]	@ (8002698 <MX_TIM3_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002670:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002672:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002674:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002676:	f003 f9bb 	bl	80059f0 <HAL_TIMEx_MasterConfigSynchronization>
 800267a:	b928      	cbnz	r0, 8002688 <MX_TIM3_Init+0x5c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800267c:	b009      	add	sp, #36	@ 0x24
 800267e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002682:	f7fe fbc5 	bl	8000e10 <Error_Handler>
 8002686:	e7e8      	b.n	800265a <MX_TIM3_Init+0x2e>
    Error_Handler();
 8002688:	f7fe fbc2 	bl	8000e10 <Error_Handler>
}
 800268c:	b009      	add	sp, #36	@ 0x24
 800268e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002692:	f7fe fbbd 	bl	8000e10 <Error_Handler>
 8002696:	e7e8      	b.n	800266a <MX_TIM3_Init+0x3e>
 8002698:	20001d58 	.word	0x20001d58
 800269c:	40000400 	.word	0x40000400

080026a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <HAL_TIM_Base_MspInit+0x3c>)
 80026a2:	6802      	ldr	r2, [r0, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d000      	beq.n	80026aa <HAL_TIM_Base_MspInit+0xa>
 80026a8:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026aa:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
{
 80026ae:	b500      	push	{lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026b0:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80026b2:	f041 0102 	orr.w	r1, r1, #2
 80026b6:	6599      	str	r1, [r3, #88]	@ 0x58
 80026b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
{
 80026ba:	b083      	sub	sp, #12

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026bc:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026c4:	201d      	movs	r0, #29
 80026c6:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026c8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026ca:	f000 fec1 	bl	8003450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026ce:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026d0:	b003      	add	sp, #12
 80026d2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026d6:	f000 bef7 	b.w	80034c8 <HAL_NVIC_EnableIRQ>
 80026da:	bf00      	nop
 80026dc:	40000400 	.word	0x40000400

080026e0 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026e0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8002718 <MX_LPUART1_UART_Init+0x38>
{
 80026e4:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 80026e6:	480e      	ldr	r0, [pc, #56]	@ (8002720 <MX_LPUART1_UART_Init+0x40>)
 80026e8:	4c0e      	ldr	r4, [pc, #56]	@ (8002724 <MX_LPUART1_UART_Init+0x44>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 115200;
 80026ec:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80026f0:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = 115200;
 80026f2:	e9c0 4100 	strd	r4, r1, [r0]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026f6:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80026fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80026fe:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8002702:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002704:	f003 fdca 	bl	800629c <HAL_UART_Init>
 8002708:	b900      	cbnz	r0, 800270c <MX_LPUART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800270a:	bd10      	pop	{r4, pc}
 800270c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002710:	f7fe bb7e 	b.w	8000e10 <Error_Handler>
 8002714:	f3af 8000 	nop.w
	...
 8002720:	20001da8 	.word	0x20001da8
 8002724:	40008000 	.word	0x40008000

08002728 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002728:	b510      	push	{r4, lr}
 800272a:	4604      	mov	r4, r0
 800272c:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002730:	228c      	movs	r2, #140	@ 0x8c
 8002732:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002738:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800273c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800273e:	f005 f943 	bl	80079c8 <memset>
  if(uartHandle->Instance==LPUART1)
 8002742:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HAL_UART_MspInit+0x90>)
 8002744:	6822      	ldr	r2, [r4, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d001      	beq.n	800274e <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800274a:	b02a      	add	sp, #168	@ 0xa8
 800274c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800274e:	2220      	movs	r2, #32
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002754:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002756:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002758:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800275a:	f002 f9c9 	bl	8004af0 <HAL_RCCEx_PeriphCLKConfig>
 800275e:	bb20      	cbnz	r0, 80027aa <HAL_UART_MspInit+0x82>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002760:	4b16      	ldr	r3, [pc, #88]	@ (80027bc <HAL_UART_MspInit+0x94>)
 8002762:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	65da      	str	r2, [r3, #92]	@ 0x5c
 800276a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800276c:	f002 0201 	and.w	r2, r2, #1
 8002770:	9200      	str	r2, [sp, #0]
 8002772:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002774:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800277a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800277c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 8002786:	f001 fc11 	bl	8003fac <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800278a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80027b0 <HAL_UART_MspInit+0x88>
 800278e:	2200      	movs	r2, #0
 8002790:	2303      	movs	r3, #3
 8002792:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002796:	480a      	ldr	r0, [pc, #40]	@ (80027c0 <HAL_UART_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002798:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800279a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800279c:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80027a0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027a2:	f001 fa85 	bl	8003cb0 <HAL_GPIO_Init>
}
 80027a6:	b02a      	add	sp, #168	@ 0xa8
 80027a8:	bd10      	pop	{r4, pc}
      Error_Handler();
 80027aa:	f7fe fb31 	bl	8000e10 <Error_Handler>
 80027ae:	e7d7      	b.n	8002760 <HAL_UART_MspInit+0x38>
 80027b0:	00000180 	.word	0x00000180
 80027b4:	00000002 	.word	0x00000002
 80027b8:	40008000 	.word	0x40008000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	48001800 	.word	0x48001800

080027c4 <start_cycle_count>:

#if (PERF_COUNT == 1)

volatile uint8_t counting_cycles = 0;

void start_cycle_count() {
 80027c4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80027ca:	b672      	cpsid	i
	uint32_t prim = __get_PRIMASK();
	__disable_irq();
	if (counting_cycles) {
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <start_cycle_count+0x34>)
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	b95a      	cbnz	r2, 80027ea <start_cycle_count+0x26>
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
		Error_Handler();
	} else {
		counting_cycles = 1;
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
	}
	if (!prim) {
 80027d6:	b904      	cbnz	r4, 80027da <start_cycle_count+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 80027d8:	b662      	cpsie	i
		__enable_irq();
	}
	DWT->CTRL |= 1 ; // enable the counter
 80027da:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <start_cycle_count+0x38>)
 80027dc:	681a      	ldr	r2, [r3, #0]
	DWT->CYCCNT = 0; // reset the counter
 80027de:	2100      	movs	r1, #0
	DWT->CTRL |= 1 ; // enable the counter
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
	DWT->CYCCNT = 0; // reset the counter
 80027e6:	6059      	str	r1, [r3, #4]
}
 80027e8:	bd10      	pop	{r4, pc}
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
 80027ea:	4805      	ldr	r0, [pc, #20]	@ (8002800 <start_cycle_count+0x3c>)
 80027ec:	f004 ff58 	bl	80076a0 <puts>
		Error_Handler();
 80027f0:	f7fe fb0e 	bl	8000e10 <Error_Handler>
 80027f4:	e7ef      	b.n	80027d6 <start_cycle_count+0x12>
 80027f6:	bf00      	nop
 80027f8:	20001e30 	.word	0x20001e30
 80027fc:	e0001000 	.word	0xe0001000
 8002800:	080091c8 	.word	0x080091c8

08002804 <stop_cycle_count>:
void stop_cycle_count(char *s) {
 8002804:	b538      	push	{r3, r4, r5, lr}
	uint32_t res = DWT->CYCCNT;
 8002806:	4909      	ldr	r1, [pc, #36]	@ (800282c <stop_cycle_count+0x28>)
	counting_cycles = 0;
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <stop_cycle_count+0x2c>)
	uint32_t res = DWT->CYCCNT;
 800280a:	684d      	ldr	r5, [r1, #4]
void stop_cycle_count(char *s) {
 800280c:	4604      	mov	r4, r0
	counting_cycles = 0;
 800280e:	2200      	movs	r2, #0
	printf("[PERF] ");
 8002810:	4808      	ldr	r0, [pc, #32]	@ (8002834 <stop_cycle_count+0x30>)
	counting_cycles = 0;
 8002812:	701a      	strb	r2, [r3, #0]
	printf("[PERF] ");
 8002814:	f004 fedc 	bl	80075d0 <iprintf>
	printf(s);
 8002818:	4620      	mov	r0, r4
 800281a:	f004 fed9 	bl	80075d0 <iprintf>
	printf(" %lu cycles.\r\n", res);
 800281e:	4629      	mov	r1, r5
 8002820:	4805      	ldr	r0, [pc, #20]	@ (8002838 <stop_cycle_count+0x34>)
}
 8002822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf(" %lu cycles.\r\n", res);
 8002826:	f004 bed3 	b.w	80075d0 <iprintf>
 800282a:	bf00      	nop
 800282c:	e0001000 	.word	0xe0001000
 8002830:	20001e30 	.word	0x20001e30
 8002834:	080091ec 	.word	0x080091ec
 8002838:	080091f4 	.word	0x080091f4

0800283c <hex_encode>:


// Encode the binary buffer buf of length len in the null-terminated string s
// (which must have length at least 2*len+1).
void hex_encode(char* s, const uint8_t* buf, size_t len) {
    s[2*len] = '\0';
 800283c:	2300      	movs	r3, #0
 800283e:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
 8002842:	ea4f 0c42 	mov.w	ip, r2, lsl #1
    for (size_t i=0; i<len; i++) {
 8002846:	b18a      	cbz	r2, 800286c <hex_encode+0x30>
 8002848:	4a09      	ldr	r2, [pc, #36]	@ (8002870 <hex_encode+0x34>)
 800284a:	3901      	subs	r1, #1
 800284c:	4484      	add	ip, r0
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 800284e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002852:	091b      	lsrs	r3, r3, #4
    for (size_t i=0; i<len; i++) {
 8002854:	3002      	adds	r0, #2
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	f800 3c02 	strb.w	r3, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 800285c:	780b      	ldrb	r3, [r1, #0]
 800285e:	f003 030f 	and.w	r3, r3, #15
    for (size_t i=0; i<len; i++) {
 8002862:	4584      	cmp	ip, r0
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	f800 3c01 	strb.w	r3, [r0, #-1]
    for (size_t i=0; i<len; i++) {
 800286a:	d1f0      	bne.n	800284e <hex_encode+0x12>
    }
}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	08009204 	.word	0x08009204

08002874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002878:	f7ff feb6 	bl	80025e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800287c:	480c      	ldr	r0, [pc, #48]	@ (80028b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800287e:	490d      	ldr	r1, [pc, #52]	@ (80028b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002880:	4a0d      	ldr	r2, [pc, #52]	@ (80028b8 <LoopForever+0xe>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002884:	e002      	b.n	800288c <LoopCopyDataInit>

08002886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288a:	3304      	adds	r3, #4

0800288c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800288c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002890:	d3f9      	bcc.n	8002886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002892:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002894:	4c0a      	ldr	r4, [pc, #40]	@ (80028c0 <LoopForever+0x16>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002898:	e001      	b.n	800289e <LoopFillZerobss>

0800289a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800289c:	3204      	adds	r2, #4

0800289e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a0:	d3fb      	bcc.n	800289a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028a2:	f005 f8f5 	bl	8007a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028a6:	f7fe fb2b 	bl	8000f00 <main>

080028aa <LoopForever>:

LoopForever:
    b LoopForever
 80028aa:	e7fe      	b.n	80028aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80028b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b4:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 80028b8:	0801b0c4 	.word	0x0801b0c4
  ldr r2, =_sbss
 80028bc:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 80028c0:	20001f84 	.word	0x20001f84

080028c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028c4:	e7fe      	b.n	80028c4 <ADC1_2_IRQHandler>
	...

080028c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002908 <HAL_InitTick+0x40>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b90b      	cbnz	r3, 80028d4 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80028d0:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028d4:	490d      	ldr	r1, [pc, #52]	@ (800290c <HAL_InitTick+0x44>)
 80028d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028da:	4605      	mov	r5, r0
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	6808      	ldr	r0, [r1, #0]
 80028e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80028e6:	f000 fdfd 	bl	80034e4 <HAL_SYSTICK_Config>
 80028ea:	4604      	mov	r4, r0
 80028ec:	2800      	cmp	r0, #0
 80028ee:	d1ef      	bne.n	80028d0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f0:	2d0f      	cmp	r5, #15
 80028f2:	d8ed      	bhi.n	80028d0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f4:	4602      	mov	r2, r0
 80028f6:	4629      	mov	r1, r5
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f000 fda8 	bl	8003450 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002900:	4b03      	ldr	r3, [pc, #12]	@ (8002910 <HAL_InitTick+0x48>)
 8002902:	4620      	mov	r0, r4
 8002904:	601d      	str	r5, [r3, #0]
}
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	20000404 	.word	0x20000404
 800290c:	20000400 	.word	0x20000400
 8002910:	20000408 	.word	0x20000408

08002914 <HAL_Init>:
{
 8002914:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002916:	2003      	movs	r0, #3
 8002918:	f000 fd88 	bl	800342c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800291c:	2000      	movs	r0, #0
 800291e:	f7ff ffd3 	bl	80028c8 <HAL_InitTick>
 8002922:	b110      	cbz	r0, 800292a <HAL_Init+0x16>
    status = HAL_ERROR;
 8002924:	2401      	movs	r4, #1
}
 8002926:	4620      	mov	r0, r4
 8002928:	bd10      	pop	{r4, pc}
 800292a:	4604      	mov	r4, r0
    HAL_MspInit();
 800292c:	f7ff fdfc 	bl	8002528 <HAL_MspInit>
}
 8002930:	4620      	mov	r0, r4
 8002932:	bd10      	pop	{r4, pc}

08002934 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002934:	4a03      	ldr	r2, [pc, #12]	@ (8002944 <HAL_IncTick+0x10>)
 8002936:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <HAL_IncTick+0x14>)
 8002938:	6811      	ldr	r1, [r2, #0]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	440b      	add	r3, r1
 800293e:	6013      	str	r3, [r2, #0]
}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20001e34 	.word	0x20001e34
 8002948:	20000404 	.word	0x20000404

0800294c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800294c:	4b01      	ldr	r3, [pc, #4]	@ (8002954 <HAL_GetTick+0x8>)
 800294e:	6818      	ldr	r0, [r3, #0]
}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20001e34 	.word	0x20001e34

08002958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002958:	b538      	push	{r3, r4, r5, lr}
 800295a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff fff6 	bl	800294c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002960:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002962:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002964:	d002      	beq.n	800296c <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8002966:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <HAL_Delay+0x20>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800296c:	f7ff ffee 	bl	800294c <HAL_GetTick>
 8002970:	1b40      	subs	r0, r0, r5
 8002972:	42a0      	cmp	r0, r4
 8002974:	d3fa      	bcc.n	800296c <HAL_Delay+0x14>
  {
  }
}
 8002976:	bd38      	pop	{r3, r4, r5, pc}
 8002978:	20000404 	.word	0x20000404

0800297c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800297c:	b530      	push	{r4, r5, lr}
 800297e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002980:	2300      	movs	r3, #0
 8002982:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002984:	2800      	cmp	r0, #0
 8002986:	f000 809f 	beq.w	8002ac8 <HAL_ADC_Init+0x14c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800298a:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 800298c:	4604      	mov	r4, r0
 800298e:	2d00      	cmp	r5, #0
 8002990:	f000 809f 	beq.w	8002ad2 <HAL_ADC_Init+0x156>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002994:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002996:	6893      	ldr	r3, [r2, #8]
 8002998:	009d      	lsls	r5, r3, #2
 800299a:	d505      	bpl.n	80029a8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800299c:	6893      	ldr	r3, [r2, #8]
 800299e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80029a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029a6:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029a8:	6893      	ldr	r3, [r2, #8]
 80029aa:	00d8      	lsls	r0, r3, #3
 80029ac:	d419      	bmi.n	80029e2 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ae:	4b5b      	ldr	r3, [pc, #364]	@ (8002b1c <HAL_ADC_Init+0x1a0>)
 80029b0:	485b      	ldr	r0, [pc, #364]	@ (8002b20 <HAL_ADC_Init+0x1a4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80029b4:	6891      	ldr	r1, [r2, #8]
 80029b6:	099b      	lsrs	r3, r3, #6
 80029b8:	fba0 0303 	umull	r0, r3, r0, r3
 80029bc:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80029c6:	3301      	adds	r3, #1
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80029ce:	6091      	str	r1, [r2, #8]
 80029d0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80029d2:	9b01      	ldr	r3, [sp, #4]
 80029d4:	b12b      	cbz	r3, 80029e2 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80029d6:	9b01      	ldr	r3, [sp, #4]
 80029d8:	3b01      	subs	r3, #1
 80029da:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80029dc:	9b01      	ldr	r3, [sp, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f9      	bne.n	80029d6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029e2:	6893      	ldr	r3, [r2, #8]
 80029e4:	00d9      	lsls	r1, r3, #3
 80029e6:	d472      	bmi.n	8002ace <HAL_ADC_Init+0x152>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80029ea:	f043 0310 	orr.w	r3, r3, #16
 80029ee:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80029f2:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f4:	4303      	orrs	r3, r0
 80029f6:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029f8:	6893      	ldr	r3, [r2, #8]
 80029fa:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a00:	d15e      	bne.n	8002ac0 <HAL_ADC_Init+0x144>
 8002a02:	06db      	lsls	r3, r3, #27
 8002a04:	d45c      	bmi.n	8002ac0 <HAL_ADC_Init+0x144>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a08:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a12:	6893      	ldr	r3, [r2, #8]
 8002a14:	07dd      	lsls	r5, r3, #31
 8002a16:	d410      	bmi.n	8002a3a <HAL_ADC_Init+0xbe>
 8002a18:	4942      	ldr	r1, [pc, #264]	@ (8002b24 <HAL_ADC_Init+0x1a8>)
 8002a1a:	4b43      	ldr	r3, [pc, #268]	@ (8002b28 <HAL_ADC_Init+0x1ac>)
 8002a1c:	6889      	ldr	r1, [r1, #8]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	4942      	ldr	r1, [pc, #264]	@ (8002b2c <HAL_ADC_Init+0x1b0>)
 8002a24:	6889      	ldr	r1, [r1, #8]
 8002a26:	430b      	orrs	r3, r1
 8002a28:	07d9      	lsls	r1, r3, #31
 8002a2a:	d406      	bmi.n	8002a3a <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a2c:	4940      	ldr	r1, [pc, #256]	@ (8002b30 <HAL_ADC_Init+0x1b4>)
 8002a2e:	6865      	ldr	r5, [r4, #4]
 8002a30:	688b      	ldr	r3, [r1, #8]
 8002a32:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002a36:	432b      	orrs	r3, r5
 8002a38:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8002a3a:	68e5      	ldr	r5, [r4, #12]
 8002a3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a3e:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8002a42:	432b      	orrs	r3, r5
 8002a44:	68a5      	ldr	r5, [r4, #8]
 8002a46:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a48:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a4a:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8002a4c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a54:	d04b      	beq.n	8002aee <HAL_ADC_Init+0x172>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a56:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002a58:	b121      	cbz	r1, 8002a64 <HAL_ADC_Init+0xe8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8002a5a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a5c:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002a60:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a62:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a64:	68d5      	ldr	r5, [r2, #12]
 8002a66:	4933      	ldr	r1, [pc, #204]	@ (8002b34 <HAL_ADC_Init+0x1b8>)
 8002a68:	4029      	ands	r1, r5
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	60d1      	str	r1, [r2, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a6e:	6893      	ldr	r3, [r2, #8]
 8002a70:	071b      	lsls	r3, r3, #28
 8002a72:	d416      	bmi.n	8002aa2 <HAL_ADC_Init+0x126>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a74:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a78:	7e25      	ldrb	r5, [r4, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a7a:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a7c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a7e:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 8002a82:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a84:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8002a88:	f021 0106 	bic.w	r1, r1, #6
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a8c:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a92:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d02e      	beq.n	8002af8 <HAL_ADC_Init+0x17c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a9a:	6913      	ldr	r3, [r2, #16]
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aa2:	6923      	ldr	r3, [r4, #16]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d01a      	beq.n	8002ade <HAL_ADC_Init+0x162>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002aa8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002aaa:	f023 030f 	bic.w	r3, r3, #15
 8002aae:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ab0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002abc:	b003      	add	sp, #12
 8002abe:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002ac2:	f043 0310 	orr.w	r3, r3, #16
 8002ac6:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 8002ac8:	2001      	movs	r0, #1
}
 8002aca:	b003      	add	sp, #12
 8002acc:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ace:	2000      	movs	r0, #0
 8002ad0:	e792      	b.n	80029f8 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8002ad2:	f7fd fda9 	bl	8000628 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad6:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002ad8:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8002adc:	e75a      	b.n	8002994 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ade:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002ae0:	69e3      	ldr	r3, [r4, #28]
 8002ae2:	f021 010f 	bic.w	r1, r1, #15
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aec:	e7e0      	b.n	8002ab0 <HAL_ADC_Init+0x134>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002aee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002af0:	3901      	subs	r1, #1
 8002af2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002af6:	e7ae      	b.n	8002a56 <HAL_ADC_Init+0xda>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002af8:	6911      	ldr	r1, [r2, #16]
 8002afa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002afc:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8002afe:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8002b02:	f021 0104 	bic.w	r1, r1, #4
 8002b06:	432b      	orrs	r3, r5
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002b10:	430b      	orrs	r3, r1
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6113      	str	r3, [r2, #16]
 8002b18:	e7c3      	b.n	8002aa2 <HAL_ADC_Init+0x126>
 8002b1a:	bf00      	nop
 8002b1c:	20000400 	.word	0x20000400
 8002b20:	053e2d63 	.word	0x053e2d63
 8002b24:	50040000 	.word	0x50040000
 8002b28:	50040100 	.word	0x50040100
 8002b2c:	50040200 	.word	0x50040200
 8002b30:	50040300 	.word	0x50040300
 8002b34:	fff0c007 	.word	0xfff0c007

08002b38 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b38:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b3a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002b3c:	f7fd fe86 	bl	800084c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b40:	bd08      	pop	{r3, pc}
 8002b42:	bf00      	nop

08002b44 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop

08002b48 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b48:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b4c:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8002b50:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b54:	d11d      	bne.n	8002b92 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b56:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5c:	659a      	str	r2, [r3, #88]	@ 0x58
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b5e:	680a      	ldr	r2, [r1, #0]
 8002b60:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b64:	68ca      	ldr	r2, [r1, #12]
 8002b66:	d01b      	beq.n	8002ba0 <ADC_DMAConvCplt+0x58>
 8002b68:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8002b6c:	d10d      	bne.n	8002b8a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b6e:	68ca      	ldr	r2, [r1, #12]
 8002b70:	0494      	lsls	r4, r2, #18
 8002b72:	d40a      	bmi.n	8002b8a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b7a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b7e:	04d1      	lsls	r1, r2, #19
 8002b80:	d403      	bmi.n	8002b8a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b82:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fe1a 	bl	80007c4 <HAL_ADC_ConvCpltCallback>
}
 8002b90:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b92:	06d2      	lsls	r2, r2, #27
 8002b94:	d40a      	bmi.n	8002bac <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
 8002b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ba0:	0790      	lsls	r0, r2, #30
 8002ba2:	d5e7      	bpl.n	8002b74 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fe0d 	bl	80007c4 <HAL_ADC_ConvCpltCallback>
 8002baa:	e7f1      	b.n	8002b90 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ffc9 	bl	8002b44 <HAL_ADC_ErrorCallback>
}
 8002bb2:	bd10      	pop	{r4, pc}

08002bb4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8002bb6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bb8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bbe:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bc0:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bc8:	f7ff ffbc 	bl	8002b44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bcc:	bd08      	pop	{r3, pc}
 8002bce:	bf00      	nop

08002bd0 <HAL_ADC_ConfigChannel>:
{
 8002bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8002bd4:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
{
 8002bd8:	b082      	sub	sp, #8
 8002bda:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002bdc:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002bde:	f04f 0000 	mov.w	r0, #0
 8002be2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002be4:	f000 812f 	beq.w	8002e46 <HAL_ADC_ConfigChannel+0x276>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002be8:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8002bea:	2001      	movs	r0, #1
 8002bec:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bf0:	68a2      	ldr	r2, [r4, #8]
 8002bf2:	f012 0c04 	ands.w	ip, r2, #4
 8002bf6:	d155      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0xd4>
    uint32_t config_rank = pConfig->Rank;
 8002bf8:	6848      	ldr	r0, [r1, #4]
    if (pConfig->Rank <= 5U)
 8002bfa:	2805      	cmp	r0, #5
 8002bfc:	f240 8096 	bls.w	8002d2c <HAL_ADC_ConfigChannel+0x15c>
  MODIFY_REG(*preg,
 8002c00:	f000 051f 	and.w	r5, r0, #31
 8002c04:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c08:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8002c0a:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c0e:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8002c12:	ea6f 0e0e 	mvn.w	lr, lr
 8002c16:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c18:	f104 0030 	add.w	r0, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8002c1c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002c20:	40aa      	lsls	r2, r5
 8002c22:	f850 500c 	ldr.w	r5, [r0, ip]
 8002c26:	ea05 050e 	and.w	r5, r5, lr
 8002c2a:	432a      	orrs	r2, r5
 8002c2c:	f840 200c 	str.w	r2, [r0, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c30:	68a2      	ldr	r2, [r4, #8]
 8002c32:	0757      	lsls	r7, r2, #29
 8002c34:	d540      	bpl.n	8002cb8 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c36:	68a2      	ldr	r2, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c38:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c3a:	68a0      	ldr	r0, [r4, #8]
 8002c3c:	07c5      	lsls	r5, r0, #31
 8002c3e:	d412      	bmi.n	8002c66 <HAL_ADC_ConfigChannel+0x96>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c40:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002c42:	48af      	ldr	r0, [pc, #700]	@ (8002f00 <HAL_ADC_ConfigChannel+0x330>)
 8002c44:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8002c48:	f006 0718 	and.w	r7, r6, #24
 8002c4c:	40f8      	lsrs	r0, r7
 8002c4e:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8002c52:	4010      	ands	r0, r2
 8002c54:	ea25 0507 	bic.w	r5, r5, r7
 8002c58:	4328      	orrs	r0, r5
 8002c5a:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c5e:	48a9      	ldr	r0, [pc, #676]	@ (8002f04 <HAL_ADC_ConfigChannel+0x334>)
 8002c60:	4286      	cmp	r6, r0
 8002c62:	f000 80a0 	beq.w	8002da6 <HAL_ADC_ConfigChannel+0x1d6>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c66:	49a8      	ldr	r1, [pc, #672]	@ (8002f08 <HAL_ADC_ConfigChannel+0x338>)
 8002c68:	420a      	tst	r2, r1
 8002c6a:	d019      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c6c:	48a7      	ldr	r0, [pc, #668]	@ (8002f0c <HAL_ADC_ConfigChannel+0x33c>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c6e:	4da8      	ldr	r5, [pc, #672]	@ (8002f10 <HAL_ADC_ConfigChannel+0x340>)
 8002c70:	6881      	ldr	r1, [r0, #8]
 8002c72:	42aa      	cmp	r2, r5
 8002c74:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8002c78:	d06e      	beq.n	8002d58 <HAL_ADC_ConfigChannel+0x188>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c7a:	4da6      	ldr	r5, [pc, #664]	@ (8002f14 <HAL_ADC_ConfigChannel+0x344>)
 8002c7c:	42aa      	cmp	r2, r5
 8002c7e:	f000 80e6 	beq.w	8002e4e <HAL_ADC_ConfigChannel+0x27e>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c82:	4da5      	ldr	r5, [pc, #660]	@ (8002f18 <HAL_ADC_ConfigChannel+0x348>)
 8002c84:	42aa      	cmp	r2, r5
 8002c86:	d10b      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0xd0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c88:	024a      	lsls	r2, r1, #9
 8002c8a:	d409      	bmi.n	8002ca0 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c8c:	4aa3      	ldr	r2, [pc, #652]	@ (8002f1c <HAL_ADC_ConfigChannel+0x34c>)
 8002c8e:	4294      	cmp	r4, r2
 8002c90:	d106      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c92:	6882      	ldr	r2, [r0, #8]
 8002c94:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002c98:	4332      	orrs	r2, r6
 8002c9a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002c9e:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	e003      	b.n	8002cac <HAL_ADC_ConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ca6:	f042 0220 	orr.w	r2, r2, #32
 8002caa:	659a      	str	r2, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8002cb2:	b002      	add	sp, #8
 8002cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cb8:	68a0      	ldr	r0, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cba:	680a      	ldr	r2, [r1, #0]
 8002cbc:	0706      	lsls	r6, r0, #28
 8002cbe:	d4bc      	bmi.n	8002c3a <HAL_ADC_ConfigChannel+0x6a>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002cc0:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8002cc2:	f3c2 5604 	ubfx	r6, r2, #20, #5
 8002cc6:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002cc8:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 8002cca:	40b0      	lsls	r0, r6
 8002ccc:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002cd0:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8002cd4:	ea6f 0000 	mvn.w	r0, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002cd8:	f104 0714 	add.w	r7, r4, #20
 8002cdc:	f000 8107 	beq.w	8002eee <HAL_ADC_ConfigChannel+0x31e>
  MODIFY_REG(*preg,
 8002ce0:	40b5      	lsls	r5, r6
 8002ce2:	58be      	ldr	r6, [r7, r2]
 8002ce4:	4030      	ands	r0, r6
 8002ce6:	4328      	orrs	r0, r5
 8002ce8:	50b8      	str	r0, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002cea:	6962      	ldr	r2, [r4, #20]
 8002cec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cf0:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002cf2:	e9d1 7004 	ldrd	r7, r0, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002cf6:	680a      	ldr	r2, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002cf8:	68e5      	ldr	r5, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cfa:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cfc:	f104 0660 	add.w	r6, r4, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d00:	4694      	mov	ip, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d02:	f000 80cc 	beq.w	8002e9e <HAL_ADC_ConfigChannel+0x2ce>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d06:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8002d0a:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 8002d0c:	f856 c027 	ldr.w	ip, [r6, r7, lsl #2]
 8002d10:	40a8      	lsls	r0, r5
 8002d12:	4d83      	ldr	r5, [pc, #524]	@ (8002f20 <HAL_ADC_ConfigChannel+0x350>)
 8002d14:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002d18:	ea0c 0505 	and.w	r5, ip, r5
 8002d1c:	4315      	orrs	r5, r2
 8002d1e:	4328      	orrs	r0, r5
 8002d20:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8002d24:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d28:	680a      	ldr	r2, [r1, #0]
}
 8002d2a:	e786      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x6a>
      switch (pConfig->Rank)
 8002d2c:	3802      	subs	r0, #2
 8002d2e:	2803      	cmp	r0, #3
 8002d30:	d903      	bls.n	8002d3a <HAL_ADC_ConfigChannel+0x16a>
    if (pConfig->Rank <= 5U)
 8002d32:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 8002d36:	2506      	movs	r5, #6
 8002d38:	e76d      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x46>
 8002d3a:	4a7a      	ldr	r2, [pc, #488]	@ (8002f24 <HAL_ADC_ConfigChannel+0x354>)
 8002d3c:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
  MODIFY_REG(*preg,
 8002d40:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d44:	09aa      	lsrs	r2, r5, #6
  MODIFY_REG(*preg,
 8002d46:	f005 051f 	and.w	r5, r5, #31
 8002d4a:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d4e:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8002d52:	ea6f 0e0e 	mvn.w	lr, lr
 8002d56:	e75e      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x46>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d58:	0208      	lsls	r0, r1, #8
 8002d5a:	d4a1      	bmi.n	8002ca0 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d5c:	4a6f      	ldr	r2, [pc, #444]	@ (8002f1c <HAL_ADC_ConfigChannel+0x34c>)
 8002d5e:	4294      	cmp	r4, r2
 8002d60:	d003      	beq.n	8002d6a <HAL_ADC_ConfigChannel+0x19a>
 8002d62:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8002d66:	4294      	cmp	r4, r2
 8002d68:	d19a      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d6a:	4968      	ldr	r1, [pc, #416]	@ (8002f0c <HAL_ADC_ConfigChannel+0x33c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d6c:	486e      	ldr	r0, [pc, #440]	@ (8002f28 <HAL_ADC_ConfigChannel+0x358>)
 8002d6e:	688a      	ldr	r2, [r1, #8]
 8002d70:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002d74:	4332      	orrs	r2, r6
 8002d76:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002d7a:	608a      	str	r2, [r1, #8]
 8002d7c:	6802      	ldr	r2, [r0, #0]
 8002d7e:	496b      	ldr	r1, [pc, #428]	@ (8002f2c <HAL_ADC_ConfigChannel+0x35c>)
 8002d80:	0992      	lsrs	r2, r2, #6
 8002d82:	fba1 1202 	umull	r1, r2, r1, r2
 8002d86:	0992      	lsrs	r2, r2, #6
 8002d88:	3201      	adds	r2, #1
 8002d8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002d8e:	0092      	lsls	r2, r2, #2
 8002d90:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002d92:	9a01      	ldr	r2, [sp, #4]
 8002d94:	2a00      	cmp	r2, #0
 8002d96:	d083      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0xd0>
            wait_loop_index--;
 8002d98:	9a01      	ldr	r2, [sp, #4]
 8002d9a:	3a01      	subs	r2, #1
 8002d9c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002d9e:	9a01      	ldr	r2, [sp, #4]
 8002da0:	2a00      	cmp	r2, #0
 8002da2:	d1f9      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x1c8>
 8002da4:	e77c      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002da6:	2f00      	cmp	r7, #0
 8002da8:	d065      	beq.n	8002e76 <HAL_ADC_ConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002dae:	2800      	cmp	r0, #0
 8002db0:	f000 80be 	beq.w	8002f30 <HAL_ADC_ConfigChannel+0x360>
  return __builtin_clz(value);
 8002db4:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db8:	3001      	adds	r0, #1
 8002dba:	f000 001f 	and.w	r0, r0, #31
 8002dbe:	2809      	cmp	r0, #9
 8002dc0:	f240 80b6 	bls.w	8002f30 <HAL_ADC_ConfigChannel+0x360>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	f000 814d 	beq.w	8003068 <HAL_ADC_ConfigChannel+0x498>
  return __builtin_clz(value);
 8002dce:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	0680      	lsls	r0, r0, #26
 8002dd6:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8002dde:	2d00      	cmp	r5, #0
 8002de0:	f000 8147 	beq.w	8003072 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002de4:	fab5 f585 	clz	r5, r5
 8002de8:	3501      	adds	r5, #1
 8002dea:	f005 051f 	and.w	r5, r5, #31
 8002dee:	2601      	movs	r6, #1
 8002df0:	fa06 f505 	lsl.w	r5, r6, r5
 8002df4:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002dfa:	2a00      	cmp	r2, #0
 8002dfc:	f000 8137 	beq.w	800306e <HAL_ADC_ConfigChannel+0x49e>
  return __builtin_clz(value);
 8002e00:	fab2 f282 	clz	r2, r2
 8002e04:	1c55      	adds	r5, r2, #1
 8002e06:	f005 051f 	and.w	r5, r5, #31
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	f06f 061d 	mvn.w	r6, #29
 8002e10:	fb12 6205 	smlabb	r2, r2, r5, r6
 8002e14:	0512      	lsls	r2, r2, #20
 8002e16:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e1a:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e1c:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 8002e1e:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e20:	f006 0604 	and.w	r6, r6, #4
 8002e24:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8002e28:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8002e2c:	fa00 f702 	lsl.w	r7, r0, r2
 8002e30:	f04f 0c07 	mov.w	ip, #7
 8002e34:	59a8      	ldr	r0, [r5, r6]
 8002e36:	fa0c f202 	lsl.w	r2, ip, r2
 8002e3a:	ea20 0202 	bic.w	r2, r0, r2
 8002e3e:	433a      	orrs	r2, r7
 8002e40:	51aa      	str	r2, [r5, r6]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e42:	680a      	ldr	r2, [r1, #0]
}
 8002e44:	e70f      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8002e46:	2002      	movs	r0, #2
}
 8002e48:	b002      	add	sp, #8
 8002e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e4e:	01c9      	lsls	r1, r1, #7
 8002e50:	f53f af26 	bmi.w	8002ca0 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e54:	4a31      	ldr	r2, [pc, #196]	@ (8002f1c <HAL_ADC_ConfigChannel+0x34c>)
 8002e56:	4294      	cmp	r4, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_ADC_ConfigChannel+0x294>
 8002e5a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8002e5e:	4294      	cmp	r4, r2
 8002e60:	f47f af1e 	bne.w	8002ca0 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e64:	4929      	ldr	r1, [pc, #164]	@ (8002f0c <HAL_ADC_ConfigChannel+0x33c>)
 8002e66:	688a      	ldr	r2, [r1, #8]
 8002e68:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002e6c:	4332      	orrs	r2, r6
 8002e6e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002e72:	608a      	str	r2, [r1, #8]
}
 8002e74:	e714      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e76:	0e92      	lsrs	r2, r2, #26
 8002e78:	3201      	adds	r2, #1
 8002e7a:	f002 051f 	and.w	r5, r2, #31
 8002e7e:	2001      	movs	r0, #1
 8002e80:	0692      	lsls	r2, r2, #26
 8002e82:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002e86:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e88:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e8a:	ea40 0002 	orr.w	r0, r0, r2
 8002e8e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e92:	d971      	bls.n	8002f78 <HAL_ADC_ConfigChannel+0x3a8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e94:	3a1e      	subs	r2, #30
 8002e96:	0512      	lsls	r2, r2, #20
 8002e98:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002e9c:	e7bd      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x24a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e9e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002ea0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ea2:	f3c2 0512 	ubfx	r5, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ea6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	d166      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x3ac>
 8002eae:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eb2:	4290      	cmp	r0, r2
 8002eb4:	f000 80a8 	beq.w	8003008 <HAL_ADC_ConfigChannel+0x438>
 8002eb8:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8002eba:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ebc:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002ec0:	4290      	cmp	r0, r2
 8002ec2:	f000 808c 	beq.w	8002fde <HAL_ADC_ConfigChannel+0x40e>
 8002ec6:	68b0      	ldr	r0, [r6, #8]
 8002ec8:	68b0      	ldr	r0, [r6, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eca:	f106 0708 	add.w	r7, r6, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ece:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002ed2:	4290      	cmp	r0, r2
 8002ed4:	f000 80aa 	beq.w	800302c <HAL_ADC_ConfigChannel+0x45c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ed8:	68f0      	ldr	r0, [r6, #12]
 8002eda:	68f0      	ldr	r0, [r6, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002edc:	f106 050c 	add.w	r5, r6, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ee0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002ee4:	4282      	cmp	r2, r0
 8002ee6:	f000 80b6 	beq.w	8003056 <HAL_ADC_ConfigChannel+0x486>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002eea:	4662      	mov	r2, ip
 8002eec:	e6a5      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x6a>
  MODIFY_REG(*preg,
 8002eee:	58bd      	ldr	r5, [r7, r2]
 8002ef0:	4028      	ands	r0, r5
 8002ef2:	50b8      	str	r0, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ef4:	6962      	ldr	r2, [r4, #20]
 8002ef6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002efa:	6162      	str	r2, [r4, #20]
}
 8002efc:	e6f9      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x122>
 8002efe:	bf00      	nop
 8002f00:	0007ffff 	.word	0x0007ffff
 8002f04:	407f0000 	.word	0x407f0000
 8002f08:	80080000 	.word	0x80080000
 8002f0c:	50040300 	.word	0x50040300
 8002f10:	c7520000 	.word	0xc7520000
 8002f14:	cb840000 	.word	0xcb840000
 8002f18:	80000001 	.word	0x80000001
 8002f1c:	50040000 	.word	0x50040000
 8002f20:	03fff000 	.word	0x03fff000
 8002f24:	08009218 	.word	0x08009218
 8002f28:	20000400 	.word	0x20000400
 8002f2c:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002f34:	2800      	cmp	r0, #0
 8002f36:	f000 80a0 	beq.w	800307a <HAL_ADC_ConfigChannel+0x4aa>
  return __builtin_clz(value);
 8002f3a:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f3e:	3001      	adds	r0, #1
 8002f40:	0680      	lsls	r0, r0, #26
 8002f42:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8002f4a:	2d00      	cmp	r5, #0
 8002f4c:	f000 8093 	beq.w	8003076 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8002f50:	fab5 f585 	clz	r5, r5
 8002f54:	3501      	adds	r5, #1
 8002f56:	f005 051f 	and.w	r5, r5, #31
 8002f5a:	2601      	movs	r6, #1
 8002f5c:	fa06 f505 	lsl.w	r5, r6, r5
 8002f60:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002f66:	2a00      	cmp	r2, #0
 8002f68:	d07b      	beq.n	8003062 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002f6a:	fab2 f282 	clz	r2, r2
 8002f6e:	3201      	adds	r2, #1
 8002f70:	f002 021f 	and.w	r2, r2, #31
 8002f74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002f78:	0512      	lsls	r2, r2, #20
 8002f7a:	e74e      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x24a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8002f80:	b11d      	cbz	r5, 8002f8a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002f82:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f86:	42a8      	cmp	r0, r5
 8002f88:	d03e      	beq.n	8003008 <HAL_ADC_ConfigChannel+0x438>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f8a:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8002f8c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f8e:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	fa9c f5ac 	rbit	r5, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f96:	f106 0708 	add.w	r7, r6, #8
 8002f9a:	46be      	mov	lr, r7
  if (value == 0U)
 8002f9c:	b11d      	cbz	r5, 8002fa6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002f9e:	fab5 f585 	clz	r5, r5
 8002fa2:	4285      	cmp	r5, r0
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_ADC_ConfigChannel+0x412>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fa6:	68b0      	ldr	r0, [r6, #8]
 8002fa8:	68b0      	ldr	r0, [r6, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002faa:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb2:	f106 050c 	add.w	r5, r6, #12
 8002fb6:	46a8      	mov	r8, r5
  if (value == 0U)
 8002fb8:	f1be 0f00 	cmp.w	lr, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x3f6>
  return __builtin_clz(value);
 8002fbe:	fabe fe8e 	clz	lr, lr
 8002fc2:	4586      	cmp	lr, r0
 8002fc4:	d034      	beq.n	8003030 <HAL_ADC_ConfigChannel+0x460>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fc6:	68f0      	ldr	r0, [r6, #12]
 8002fc8:	68f0      	ldr	r0, [r6, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fca:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 8002fd2:	2e00      	cmp	r6, #0
 8002fd4:	f43f ae31 	beq.w	8002c3a <HAL_ADC_ConfigChannel+0x6a>
  return __builtin_clz(value);
 8002fd8:	fab6 f286 	clz	r2, r6
 8002fdc:	e782      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x314>
 8002fde:	f106 0e08 	add.w	lr, r6, #8
  MODIFY_REG(*preg,
 8002fe2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002fe4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002fe8:	6662      	str	r2, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fea:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fee:	68b2      	ldr	r2, [r6, #8]
 8002ff0:	68b0      	ldr	r0, [r6, #8]
 8002ff2:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ff6:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ff8:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	2d00      	cmp	r5, #0
 8003000:	d1d5      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x3de>
 8003002:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8003006:	e764      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x302>
  MODIFY_REG(*preg,
 8003008:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800300a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800300e:	6622      	str	r2, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003010:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003014:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003016:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003018:	f3cc 0512 	ubfx	r5, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800301c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003020:	4662      	mov	r2, ip
 8003022:	2d00      	cmp	r5, #0
 8003024:	d1b5      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x3c2>
 8003026:	f3cc 6284 	ubfx	r2, ip, #26, #5
 800302a:	e749      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x2f0>
 800302c:	f106 080c 	add.w	r8, r6, #12
  MODIFY_REG(*preg,
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003036:	603a      	str	r2, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003038:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800303c:	68f2      	ldr	r2, [r6, #12]
 800303e:	68f0      	ldr	r0, [r6, #12]
 8003040:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003044:	4645      	mov	r5, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003046:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800304a:	4662      	mov	r2, ip
 800304c:	2e00      	cmp	r6, #0
 800304e:	d1be      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x3fe>
 8003050:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8003054:	e746      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x314>
  MODIFY_REG(*preg,
 8003056:	682a      	ldr	r2, [r5, #0]
 8003058:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800305c:	602a      	str	r2, [r5, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800305e:	680a      	ldr	r2, [r1, #0]
}
 8003060:	e5eb      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x6a>
 8003062:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8003066:	e6d8      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x24a>
 8003068:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800306c:	e6b5      	b.n	8002dda <HAL_ADC_ConfigChannel+0x20a>
 800306e:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <HAL_ADC_ConfigChannel+0x4b0>)
 8003070:	e6d3      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x24a>
 8003072:	2502      	movs	r5, #2
 8003074:	e6be      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x224>
 8003076:	2502      	movs	r5, #2
 8003078:	e772      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x390>
 800307a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800307e:	e762      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x376>
 8003080:	fe500000 	.word	0xfe500000

08003084 <ADC_Enable>:
{
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003088:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800308a:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 800308c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	07d2      	lsls	r2, r2, #31
 8003092:	d42c      	bmi.n	80030ee <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003094:	6899      	ldr	r1, [r3, #8]
 8003096:	4a28      	ldr	r2, [pc, #160]	@ (8003138 <ADC_Enable+0xb4>)
 8003098:	4211      	tst	r1, r2
 800309a:	4604      	mov	r4, r0
 800309c:	d12a      	bne.n	80030f4 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 800309e:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030a0:	4926      	ldr	r1, [pc, #152]	@ (800313c <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 80030a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030a6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030b0:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	d429      	bmi.n	800310a <ADC_Enable+0x86>
    tickstart = HAL_GetTick();
 80030b6:	f7ff fc49 	bl	800294c <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 80030c0:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c2:	d414      	bmi.n	80030ee <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 80030c4:	4e1e      	ldr	r6, [pc, #120]	@ (8003140 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	07d0      	lsls	r0, r2, #31
 80030ca:	d404      	bmi.n	80030d6 <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	4032      	ands	r2, r6
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030d6:	f7ff fc39 	bl	800294c <HAL_GetTick>
 80030da:	1b43      	subs	r3, r0, r5
 80030dc:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030de:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030e0:	d902      	bls.n	80030e8 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	07d1      	lsls	r1, r2, #31
 80030e6:	d505      	bpl.n	80030f4 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	07d2      	lsls	r2, r2, #31
 80030ec:	d5eb      	bpl.n	80030c6 <ADC_Enable+0x42>
  return HAL_OK;
 80030ee:	2000      	movs	r0, #0
}
 80030f0:	b002      	add	sp, #8
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030f6:	f043 0310 	orr.w	r3, r3, #16
 80030fa:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80030fe:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8003106:	b002      	add	sp, #8
 8003108:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800310a:	4b0e      	ldr	r3, [pc, #56]	@ (8003144 <ADC_Enable+0xc0>)
 800310c:	4a0e      	ldr	r2, [pc, #56]	@ (8003148 <ADC_Enable+0xc4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	3301      	adds	r3, #1
 800311a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003122:	9b01      	ldr	r3, [sp, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0c6      	beq.n	80030b6 <ADC_Enable+0x32>
        wait_loop_index--;
 8003128:	9b01      	ldr	r3, [sp, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800312e:	9b01      	ldr	r3, [sp, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f9      	bne.n	8003128 <ADC_Enable+0xa4>
 8003134:	e7bf      	b.n	80030b6 <ADC_Enable+0x32>
 8003136:	bf00      	nop
 8003138:	8000003f 	.word	0x8000003f
 800313c:	50040300 	.word	0x50040300
 8003140:	7fffffc0 	.word	0x7fffffc0
 8003144:	20000400 	.word	0x20000400
 8003148:	053e2d63 	.word	0x053e2d63

0800314c <HAL_ADC_Start_DMA>:
{
 800314c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003150:	4b36      	ldr	r3, [pc, #216]	@ (800322c <HAL_ADC_Start_DMA+0xe0>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003152:	6806      	ldr	r6, [r0, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
{
 8003156:	460d      	mov	r5, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003158:	68b1      	ldr	r1, [r6, #8]
 800315a:	0749      	lsls	r1, r1, #29
 800315c:	d417      	bmi.n	800318e <HAL_ADC_Start_DMA+0x42>
 800315e:	4617      	mov	r7, r2
    __HAL_LOCK(hadc);
 8003160:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8003164:	2a01      	cmp	r2, #1
 8003166:	4604      	mov	r4, r0
 8003168:	d011      	beq.n	800318e <HAL_ADC_Start_DMA+0x42>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800316a:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800316e:	4b30      	ldr	r3, [pc, #192]	@ (8003230 <HAL_ADC_Start_DMA+0xe4>)
    __HAL_LOCK(hadc);
 8003170:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003172:	429e      	cmp	r6, r3
    __HAL_LOCK(hadc);
 8003174:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003178:	d00c      	beq.n	8003194 <HAL_ADC_Start_DMA+0x48>
 800317a:	f240 2121 	movw	r1, #545	@ 0x221
 800317e:	fa21 f108 	lsr.w	r1, r1, r8
 8003182:	4001      	ands	r1, r0
 8003184:	d106      	bne.n	8003194 <HAL_ADC_Start_DMA+0x48>
      __HAL_UNLOCK(hadc);
 8003186:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
}
 800318a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 800318e:	2002      	movs	r0, #2
}
 8003190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8003194:	4620      	mov	r0, r4
 8003196:	f7ff ff75 	bl	8003084 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800319a:	2800      	cmp	r0, #0
 800319c:	d13c      	bne.n	8003218 <HAL_ADC_Start_DMA+0xcc>
        ADC_STATE_CLR_SET(hadc->State,
 800319e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031a0:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80031a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ae:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031b0:	4b20      	ldr	r3, [pc, #128]	@ (8003234 <HAL_ADC_Start_DMA+0xe8>)
 80031b2:	4299      	cmp	r1, r3
 80031b4:	d035      	beq.n	8003222 <HAL_ADC_Start_DMA+0xd6>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80031bc:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031c0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031c2:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031c6:	bf18      	it	ne
 80031c8:	6de3      	ldrne	r3, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031ca:	462a      	mov	r2, r5
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031cc:	bf18      	it	ne
 80031ce:	f023 0306 	bicne.w	r3, r3, #6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031d2:	4d19      	ldr	r5, [pc, #100]	@ (8003238 <HAL_ADC_Start_DMA+0xec>)
          ADC_CLEAR_ERRORCODE(hadc);
 80031d4:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031d6:	62c5      	str	r5, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031d8:	4d18      	ldr	r5, [pc, #96]	@ (800323c <HAL_ADC_Start_DMA+0xf0>)
 80031da:	6305      	str	r5, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031dc:	4d18      	ldr	r5, [pc, #96]	@ (8003240 <HAL_ADC_Start_DMA+0xf4>)
 80031de:	6345      	str	r5, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031e0:	251c      	movs	r5, #28
 80031e2:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 80031e4:	2500      	movs	r5, #0
 80031e6:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031ea:	684d      	ldr	r5, [r1, #4]
 80031ec:	f045 0510 	orr.w	r5, r5, #16
 80031f0:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031f2:	68cd      	ldr	r5, [r1, #12]
 80031f4:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031f8:	463b      	mov	r3, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031fa:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031fc:	3140      	adds	r1, #64	@ 0x40
 80031fe:	f000 fcc5 	bl	8003b8c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003202:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003204:	6893      	ldr	r3, [r2, #8]
 8003206:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800320a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	6093      	str	r3, [r2, #8]
}
 8003214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8003218:	2300      	movs	r3, #0
 800321a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 800321e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003222:	f1b8 0f00 	cmp.w	r8, #0
 8003226:	d1ca      	bne.n	80031be <HAL_ADC_Start_DMA+0x72>
 8003228:	e7c5      	b.n	80031b6 <HAL_ADC_Start_DMA+0x6a>
 800322a:	bf00      	nop
 800322c:	50040300 	.word	0x50040300
 8003230:	50040200 	.word	0x50040200
 8003234:	50040100 	.word	0x50040100
 8003238:	08002b49 	.word	0x08002b49
 800323c:	08002b39 	.word	0x08002b39
 8003240:	08002bb5 	.word	0x08002bb5

08003244 <ADC_Disable>:
{
 8003244:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003246:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	0795      	lsls	r5, r2, #30
 800324c:	d502      	bpl.n	8003254 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800324e:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003250:	2000      	movs	r0, #0
}
 8003252:	bd38      	pop	{r3, r4, r5, pc}
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	07d4      	lsls	r4, r2, #31
 8003258:	d5fa      	bpl.n	8003250 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	f002 020d 	and.w	r2, r2, #13
 8003260:	2a01      	cmp	r2, #1
 8003262:	4604      	mov	r4, r0
 8003264:	d009      	beq.n	800327a <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003266:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003268:	f043 0310 	orr.w	r3, r3, #16
 800326c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003276:	2001      	movs	r0, #1
}
 8003278:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003280:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003284:	2103      	movs	r1, #3
 8003286:	f042 0202 	orr.w	r2, r2, #2
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800328e:	f7ff fb5d 	bl	800294c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8003298:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800329a:	d403      	bmi.n	80032a4 <ADC_Disable+0x60>
 800329c:	e7d8      	b.n	8003250 <ADC_Disable+0xc>
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	07db      	lsls	r3, r3, #31
 80032a2:	d5d5      	bpl.n	8003250 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032a4:	f7ff fb52 	bl	800294c <HAL_GetTick>
 80032a8:	1b40      	subs	r0, r0, r5
 80032aa:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032ac:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032ae:	d9f6      	bls.n	800329e <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	07d2      	lsls	r2, r2, #31
 80032b4:	d5f3      	bpl.n	800329e <ADC_Disable+0x5a>
 80032b6:	e7d6      	b.n	8003266 <ADC_Disable+0x22>

080032b8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80032b8:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032ba:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 80032be:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80032c0:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80032c2:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 80032c4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80032c6:	d03f      	beq.n	8003348 <HAL_ADCEx_Calibration_Start+0x90>
 80032c8:	2301      	movs	r3, #1
 80032ca:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032ce:	4604      	mov	r4, r0
 80032d0:	460d      	mov	r5, r1
 80032d2:	f7ff ffb7 	bl	8003244 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 80032d8:	b9e0      	cbnz	r0, 8003314 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 80032da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032de:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80032e2:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80032e4:	f043 0302 	orr.w	r3, r3, #2
 80032e8:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 80032ea:	6893      	ldr	r3, [r2, #8]
 80032ec:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80032f0:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 80032f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032f8:	430b      	orrs	r3, r1
 80032fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032fe:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003300:	6893      	ldr	r3, [r2, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	db0e      	blt.n	8003324 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003306:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003308:	f023 0303 	bic.w	r3, r3, #3
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003312:	e002      	b.n	800331a <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003314:	f043 0310 	orr.w	r3, r3, #16
 8003318:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800331a:	2300      	movs	r3, #0
 800331c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8003320:	b003      	add	sp, #12
 8003322:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 8003324:	9b01      	ldr	r3, [sp, #4]
 8003326:	3301      	adds	r3, #1
 8003328:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800332a:	9b01      	ldr	r3, [sp, #4]
 800332c:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003330:	d3e6      	bcc.n	8003300 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8003332:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003334:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8003338:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 800333a:	f043 0310 	orr.w	r3, r3, #16
 800333e:	65a3      	str	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8003340:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8003344:	2001      	movs	r0, #1
 8003346:	e7eb      	b.n	8003320 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8003348:	2002      	movs	r0, #2
}
 800334a:	b003      	add	sp, #12
 800334c:	bd30      	pop	{r4, r5, pc}
 800334e:	bf00      	nop

08003350 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003350:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003352:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003356:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8003358:	2a01      	cmp	r2, #1
{
 800335a:	b09a      	sub	sp, #104	@ 0x68
  __HAL_LOCK(hadc);
 800335c:	d044      	beq.n	80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800335e:	4603      	mov	r3, r0

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003360:	4d2e      	ldr	r5, [pc, #184]	@ (800341c <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8003362:	681c      	ldr	r4, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003364:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003366:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003368:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800336a:	9216      	str	r2, [sp, #88]	@ 0x58
  __HAL_LOCK(hadc);
 800336c:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003370:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003372:	d008      	beq.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003374:	6d99      	ldr	r1, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003376:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337a:	f041 0120 	orr.w	r1, r1, #32
 800337e:	6599      	str	r1, [r3, #88]	@ 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003380:	b01a      	add	sp, #104	@ 0x68
 8003382:	bcf0      	pop	{r4, r5, r6, r7}
 8003384:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003386:	4a26      	ldr	r2, [pc, #152]	@ (8003420 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8003388:	6890      	ldr	r0, [r2, #8]
 800338a:	0740      	lsls	r0, r0, #29
 800338c:	d50b      	bpl.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800338e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003390:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003392:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8003396:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003398:	659a      	str	r2, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 80033a0:	b01a      	add	sp, #104	@ 0x68
 80033a2:	bcf0      	pop	{r4, r5, r6, r7}
 80033a4:	4770      	bx	lr
 80033a6:	68a0      	ldr	r0, [r4, #8]
 80033a8:	0747      	lsls	r7, r0, #29
 80033aa:	d4f1      	bmi.n	8003390 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033ac:	b306      	cbz	r6, 80033f0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033ae:	4f1d      	ldr	r7, [pc, #116]	@ (8003424 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 80033b0:	684d      	ldr	r5, [r1, #4]
 80033b2:	68b8      	ldr	r0, [r7, #8]
 80033b4:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80033b8:	4328      	orrs	r0, r5
 80033ba:	f893 5030 	ldrb.w	r5, [r3, #48]	@ 0x30
 80033be:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 80033c2:	60b8      	str	r0, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033c4:	68a0      	ldr	r0, [r4, #8]
 80033c6:	6892      	ldr	r2, [r2, #8]
 80033c8:	4302      	orrs	r2, r0
 80033ca:	4817      	ldr	r0, [pc, #92]	@ (8003428 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 80033cc:	6880      	ldr	r0, [r0, #8]
 80033ce:	4302      	orrs	r2, r0
 80033d0:	07d5      	lsls	r5, r2, #31
 80033d2:	d420      	bmi.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        MODIFY_REG(tmpADC_Common->CCR,
 80033d4:	68b8      	ldr	r0, [r7, #8]
 80033d6:	688a      	ldr	r2, [r1, #8]
 80033d8:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 80033dc:	4332      	orrs	r2, r6
 80033de:	f021 010f 	bic.w	r1, r1, #15
 80033e2:	430a      	orrs	r2, r1
 80033e4:	60ba      	str	r2, [r7, #8]
 80033e6:	e016      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 80033e8:	2002      	movs	r0, #2
}
 80033ea:	b01a      	add	sp, #104	@ 0x68
 80033ec:	bcf0      	pop	{r4, r5, r6, r7}
 80033ee:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033f0:	480c      	ldr	r0, [pc, #48]	@ (8003424 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 80033f2:	6881      	ldr	r1, [r0, #8]
 80033f4:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80033f8:	6081      	str	r1, [r0, #8]
 80033fa:	490b      	ldr	r1, [pc, #44]	@ (8003428 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 80033fc:	68a4      	ldr	r4, [r4, #8]
 80033fe:	6892      	ldr	r2, [r2, #8]
 8003400:	6889      	ldr	r1, [r1, #8]
 8003402:	4322      	orrs	r2, r4
 8003404:	430a      	orrs	r2, r1
 8003406:	07d4      	lsls	r4, r2, #31
 8003408:	d405      	bmi.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800340a:	6882      	ldr	r2, [r0, #8]
 800340c:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003410:	f022 020f 	bic.w	r2, r2, #15
 8003414:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003416:	2000      	movs	r0, #0
 8003418:	e7bf      	b.n	800339a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800341a:	bf00      	nop
 800341c:	50040000 	.word	0x50040000
 8003420:	50040100 	.word	0x50040100
 8003424:	50040300 	.word	0x50040300
 8003428:	50040200 	.word	0x50040200

0800342c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800342c:	4907      	ldr	r1, [pc, #28]	@ (800344c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800342e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003430:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003432:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003436:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800343c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800343e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003446:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_NVIC_SetPriority+0x70>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003458:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800345a:	f1c3 0e07 	rsb	lr, r3, #7
 800345e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003462:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003466:	bf28      	it	cs
 8003468:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346c:	f1bc 0f06 	cmp.w	ip, #6
 8003470:	d91c      	bls.n	80034ac <HAL_NVIC_SetPriority+0x5c>
 8003472:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003476:	f04f 33ff 	mov.w	r3, #4294967295
 800347a:	fa03 f30c 	lsl.w	r3, r3, ip
 800347e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	fa03 f30e 	lsl.w	r3, r3, lr
 800348a:	ea21 0303 	bic.w	r3, r1, r3
 800348e:	fa03 f30c 	lsl.w	r3, r3, ip
 8003492:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003494:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8003496:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003498:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800349a:	db0a      	blt.n	80034b2 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80034a0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80034a4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80034a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80034ac:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ae:	4694      	mov	ip, r2
 80034b0:	e7e7      	b.n	8003482 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b2:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <HAL_NVIC_SetPriority+0x74>)
 80034b4:	f000 000f 	and.w	r0, r0, #15
 80034b8:	4402      	add	r2, r0
 80034ba:	7613      	strb	r3, [r2, #24]
 80034bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80034c0:	e000ed00 	.word	0xe000ed00
 80034c4:	e000ecfc 	.word	0xe000ecfc

080034c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80034c8:	2800      	cmp	r0, #0
 80034ca:	db07      	blt.n	80034dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034cc:	4a04      	ldr	r2, [pc, #16]	@ (80034e0 <HAL_NVIC_EnableIRQ+0x18>)
 80034ce:	0941      	lsrs	r1, r0, #5
 80034d0:	2301      	movs	r3, #1
 80034d2:	f000 001f 	and.w	r0, r0, #31
 80034d6:	4083      	lsls	r3, r0
 80034d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000e100 	.word	0xe000e100

080034e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e4:	3801      	subs	r0, #1
 80034e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80034ea:	d301      	bcc.n	80034f0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ec:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80034ee:	4770      	bx	lr
{
 80034f0:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f6:	4c07      	ldr	r4, [pc, #28]	@ (8003514 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fa:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80034fe:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003502:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003504:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003506:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350e:	6119      	str	r1, [r3, #16]
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <CRYP_SetKey>:
  */
static HAL_StatusTypeDef  CRYP_SetKey(CRYP_HandleTypeDef *hcryp)
{
  uint32_t keyaddr;

  if (hcryp->Init.pKey == NULL)
 8003518:	6a03      	ldr	r3, [r0, #32]
 800351a:	b32b      	cbz	r3, 8003568 <CRYP_SetKey+0x50>
{
 800351c:	b410      	push	{r4}
  }


  keyaddr = (uint32_t)(hcryp->Init.pKey);

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 800351e:	68c4      	ldr	r4, [r0, #12]
  {
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8003520:	6802      	ldr	r2, [r0, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003522:	f5b4 2f80 	cmp.w	r4, #262144	@ 0x40000
  keyaddr = (uint32_t)(hcryp->Init.pKey);
 8003526:	4619      	mov	r1, r3
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003528:	d10e      	bne.n	8003548 <CRYP_SetKey+0x30>
  return __builtin_bswap32(value);
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	ba00      	rev	r0, r0
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 800352e:	63d0      	str	r0, [r2, #60]	@ 0x3c
 8003530:	6858      	ldr	r0, [r3, #4]
 8003532:	ba00      	rev	r0, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR6 = __REV(*(uint32_t*)(keyaddr));
 8003534:	6390      	str	r0, [r2, #56]	@ 0x38
 8003536:	6898      	ldr	r0, [r3, #8]
 8003538:	ba00      	rev	r0, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR5 = __REV(*(uint32_t*)(keyaddr));
 800353a:	6350      	str	r0, [r2, #52]	@ 0x34
 800353c:	68d8      	ldr	r0, [r3, #12]
    keyaddr+=4U;
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4U;
 800353e:	f103 0110 	add.w	r1, r3, #16
 8003542:	ba00      	rev	r0, r0
  }

  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 8003544:	460b      	mov	r3, r1
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
 8003546:	6310      	str	r0, [r2, #48]	@ 0x30
 8003548:	681b      	ldr	r3, [r3, #0]
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4U;
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));

  return HAL_OK;
}
 800354a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800354e:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 8003550:	61d3      	str	r3, [r2, #28]
 8003552:	684b      	ldr	r3, [r1, #4]
 8003554:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR2 = __REV(*(uint32_t*)(keyaddr));
 8003556:	6193      	str	r3, [r2, #24]
 8003558:	688b      	ldr	r3, [r1, #8]
 800355a:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
 800355c:	6153      	str	r3, [r2, #20]
 800355e:	68cb      	ldr	r3, [r1, #12]
 8003560:	ba1b      	rev	r3, r3
  return HAL_OK;
 8003562:	2000      	movs	r0, #0
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));
 8003564:	6113      	str	r3, [r2, #16]
}
 8003566:	4770      	bx	lr
    return HAL_ERROR;
 8003568:	2001      	movs	r0, #1
}
 800356a:	4770      	bx	lr

0800356c <HAL_CRYP_Init>:
  if(hcryp == NULL)
 800356c:	2800      	cmp	r0, #0
 800356e:	f000 80a3 	beq.w	80036b8 <HAL_CRYP_Init+0x14c>
  if (hcryp->Init.OperatingMode != CRYP_ALGOMODE_KEYDERIVATION)
 8003572:	6902      	ldr	r2, [r0, #16]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003574:	2a18      	cmp	r2, #24
{
 8003576:	b570      	push	{r4, r5, r6, lr}
 8003578:	4604      	mov	r4, r0
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 800357a:	d04d      	beq.n	8003618 <HAL_CRYP_Init+0xac>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800357c:	2a08      	cmp	r2, #8
 800357e:	d03e      	beq.n	80035fe <HAL_CRYP_Init+0x92>
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8003580:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8003584:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03e      	beq.n	800360a <HAL_CRYP_Init+0x9e>
  __HAL_CRYP_DISABLE(hcryp);
 800358c:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800358e:	68e1      	ldr	r1, [r4, #12]
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003590:	2302      	movs	r3, #2
 8003592:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003596:	682b      	ldr	r3, [r5, #0]
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800359e:	682b      	ldr	r3, [r5, #0]
 80035a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035a4:	430b      	orrs	r3, r1
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80035a6:	2a08      	cmp	r2, #8
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80035a8:	f04f 010a 	mov.w	r1, #10
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80035ac:	602b      	str	r3, [r5, #0]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80035ae:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80035b2:	d065      	beq.n	8003680 <HAL_CRYP_Init+0x114>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80035b4:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 80035b8:	2e60      	cmp	r6, #96	@ 0x60
 80035ba:	d033      	beq.n	8003624 <HAL_CRYP_Init+0xb8>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80035bc:	6829      	ldr	r1, [r5, #0]
 80035be:	68a3      	ldr	r3, [r4, #8]
 80035c0:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80035c4:	f021 017e 	bic.w	r1, r1, #126	@ 0x7e
 80035c8:	4333      	orrs	r3, r6
 80035ca:	430b      	orrs	r3, r1
 80035cc:	4313      	orrs	r3, r2
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 80035ce:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80035d2:	602b      	str	r3, [r5, #0]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 80035d4:	d060      	beq.n	8003698 <HAL_CRYP_Init+0x12c>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d04c      	beq.n	8003674 <HAL_CRYP_Init+0x108>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 80035da:	2e00      	cmp	r6, #0
 80035dc:	d13a      	bne.n	8003654 <HAL_CRYP_Init+0xe8>
  hcryp->CrypInCount = 0;
 80035de:	2200      	movs	r2, #0
 80035e0:	2300      	movs	r3, #0
 80035e2:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80035e6:	2000      	movs	r0, #0
  hcryp->State = HAL_CRYP_STATE_READY;
 80035e8:	2301      	movs	r3, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80035ea:	65a0      	str	r0, [r4, #88]	@ 0x58
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 80035ec:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hcryp->State = HAL_CRYP_STATE_READY;
 80035f0:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
  __HAL_CRYP_ENABLE(hcryp);
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	602b      	str	r3, [r5, #0]
}
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 80035fe:	6943      	ldr	r3, [r0, #20]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003604:	d1bc      	bne.n	8003580 <HAL_CRYP_Init+0x14>
    return HAL_ERROR;
 8003606:	2001      	movs	r0, #1
}
 8003608:	bd70      	pop	{r4, r5, r6, pc}
    hcryp->Lock = HAL_UNLOCKED;
 800360a:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
    HAL_CRYP_MspInit(hcryp);
 800360e:	4620      	mov	r0, r4
 8003610:	f7fd f99c 	bl	800094c <HAL_CRYP_MspInit>
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003614:	6922      	ldr	r2, [r4, #16]
 8003616:	e7b9      	b.n	800358c <HAL_CRYP_Init+0x20>
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
 8003618:	6943      	ldr	r3, [r0, #20]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 800361a:	f023 0120 	bic.w	r1, r3, #32
 800361e:	2940      	cmp	r1, #64	@ 0x40
 8003620:	d1ee      	bne.n	8003600 <HAL_CRYP_Init+0x94>
 8003622:	e7f0      	b.n	8003606 <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800362a:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800362e:	4313      	orrs	r3, r2
 8003630:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003634:	602b      	str	r3, [r5, #0]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003636:	682b      	ldr	r3, [r5, #0]
 8003638:	69e2      	ldr	r2, [r4, #28]
 800363a:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 800363e:	4313      	orrs	r3, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003640:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003642:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003644:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003648:	b920      	cbnz	r0, 8003654 <HAL_CRYP_Init+0xe8>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 800364a:	4620      	mov	r0, r4
 800364c:	f7ff ff64 	bl	8003518 <CRYP_SetKey>
 8003650:	2800      	cmp	r0, #0
 8003652:	d1d8      	bne.n	8003606 <HAL_CRYP_Init+0x9a>
    hcryp->Instance->IVR0 = 0;
  }
  else
#endif
  {
    if (hcryp->Init.pInitVect == NULL)
 8003654:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0d5      	beq.n	8003606 <HAL_CRYP_Init+0x9a>
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	ba12      	rev	r2, r2
      return HAL_ERROR;
    }

    ivaddr = (uint32_t)(hcryp->Init.pInitVect);

    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 800365e:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	ba12      	rev	r2, r2
    ivaddr+=4U;
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 8003664:	62aa      	str	r2, [r5, #40]	@ 0x28
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	ba12      	rev	r2, r2
    ivaddr+=4U;
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 800366a:	626a      	str	r2, [r5, #36]	@ 0x24
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	ba1b      	rev	r3, r3
    ivaddr+=4U;
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 8003670:	622b      	str	r3, [r5, #32]
 8003672:	e7b4      	b.n	80035de <HAL_CRYP_Init+0x72>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003674:	4620      	mov	r0, r4
 8003676:	f7ff ff4f 	bl	8003518 <CRYP_SetKey>
 800367a:	2800      	cmp	r0, #0
 800367c:	d0ad      	beq.n	80035da <HAL_CRYP_Init+0x6e>
 800367e:	e7c2      	b.n	8003606 <HAL_CRYP_Init+0x9a>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	f023 0318 	bic.w	r3, r3, #24
 8003686:	f043 0308 	orr.w	r3, r3, #8
    if (CRYP_SetKey(hcryp) != HAL_OK)
 800368a:	4620      	mov	r0, r4
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 800368c:	602b      	str	r3, [r5, #0]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 800368e:	f7ff ff43 	bl	8003518 <CRYP_SetKey>
 8003692:	2800      	cmp	r0, #0
 8003694:	d0a3      	beq.n	80035de <HAL_CRYP_Init+0x72>
 8003696:	e7b6      	b.n	8003606 <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	69e2      	ldr	r2, [r4, #28]
 800369c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80036a0:	4313      	orrs	r3, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80036a2:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80036a4:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80036a6:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80036aa:	b138      	cbz	r0, 80036bc <HAL_CRYP_Init+0x150>
    hcryp->Instance->IVR3 = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62eb      	str	r3, [r5, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 80036b0:	62ab      	str	r3, [r5, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 80036b2:	626b      	str	r3, [r5, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 80036b4:	622b      	str	r3, [r5, #32]
 80036b6:	e792      	b.n	80035de <HAL_CRYP_Init+0x72>
    return HAL_ERROR;
 80036b8:	2001      	movs	r0, #1
}
 80036ba:	4770      	bx	lr
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80036bc:	4620      	mov	r0, r4
 80036be:	f7ff ff2b 	bl	8003518 <CRYP_SetKey>
 80036c2:	2800      	cmp	r0, #0
 80036c4:	d19f      	bne.n	8003606 <HAL_CRYP_Init+0x9a>
 80036c6:	e7f1      	b.n	80036ac <HAL_CRYP_Init+0x140>

080036c8 <HAL_CRYP_DeInit>:
  if(hcryp == NULL)
 80036c8:	b1c0      	cbz	r0, 80036fc <HAL_CRYP_DeInit+0x34>
  hcryp->CrypInCount = 0;
 80036ca:	2200      	movs	r2, #0
 80036cc:	2300      	movs	r3, #0
{
 80036ce:	b510      	push	{r4, lr}
  hcryp->CrypInCount = 0;
 80036d0:	e9c0 2310 	strd	r2, r3, [r0, #64]	@ 0x40
  hcryp->State = HAL_CRYP_STATE_BUSY;
 80036d4:	2102      	movs	r1, #2
  __HAL_CRYP_DISABLE(hcryp);
 80036d6:	6802      	ldr	r2, [r0, #0]
  hcryp->State = HAL_CRYP_STATE_BUSY;
 80036d8:	f880 1055 	strb.w	r1, [r0, #85]	@ 0x55
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 80036dc:	2301      	movs	r3, #1
 80036de:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  __HAL_CRYP_DISABLE(hcryp);
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	4604      	mov	r4, r0
 80036ea:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 80036ec:	f7fd f946 	bl	800097c <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 80036f0:	2000      	movs	r0, #0
 80036f2:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  __HAL_UNLOCK(hcryp);
 80036f6:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
}
 80036fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036fc:	2001      	movs	r0, #1
}
 80036fe:	4770      	bx	lr

08003700 <HAL_CRYP_AESCBC_Encrypt>:
{
 8003700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003704:	b083      	sub	sp, #12
 8003706:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  if(hcryp == NULL)
 800370a:	2800      	cmp	r0, #0
 800370c:	d073      	beq.n	80037f6 <HAL_CRYP_AESCBC_Encrypt+0xf6>
  hcryp->CrypInCount = 0;
 800370e:	ed9f 7b7a 	vldr	d7, [pc, #488]	@ 80038f8 <HAL_CRYP_AESCBC_Encrypt+0x1f8>
 8003712:	ed80 7b10 	vstr	d7, [r0, #64]	@ 0x40
 8003716:	4616      	mov	r6, r2
 8003718:	461f      	mov	r7, r3
  __HAL_CRYP_DISABLE(hcryp);
 800371a:	6802      	ldr	r2, [r0, #0]
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 800371c:	2301      	movs	r3, #1
  hcryp->State = HAL_CRYP_STATE_BUSY;
 800371e:	f04f 0902 	mov.w	r9, #2
 8003722:	f880 9055 	strb.w	r9, [r0, #85]	@ 0x55
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 8003726:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  __HAL_CRYP_DISABLE(hcryp);
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	4604      	mov	r4, r0
 8003732:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 8003734:	460d      	mov	r5, r1
 8003736:	f7fd f921 	bl	800097c <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 800373a:	2000      	movs	r0, #0
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 800373c:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 8003900 <HAL_CRYP_AESCBC_Encrypt+0x200>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8003740:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8003744:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
  __HAL_UNLOCK(hcryp);
 8003748:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 800374c:	ed84 7b04 	vstr	d7, [r4, #16]
  hcryp->Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8003750:	61a0      	str	r0, [r4, #24]
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8003752:	2b00      	cmp	r3, #0
 8003754:	d053      	beq.n	80037fe <HAL_CRYP_AESCBC_Encrypt+0xfe>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003756:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 800375a:	f8d4 9000 	ldr.w	r9, [r4]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800375e:	68e2      	ldr	r2, [r4, #12]
  __HAL_CRYP_DISABLE(hcryp);
 8003760:	f8d9 3000 	ldr.w	r3, [r9]
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	f8c9 3000 	str.w	r3, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800376c:	f8d9 3000 	ldr.w	r3, [r9]
 8003770:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c9 3000 	str.w	r3, [r9]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 800377a:	230a      	movs	r3, #10
 800377c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003780:	e9d4 2c05 	ldrd	r2, ip, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8003784:	2a60      	cmp	r2, #96	@ 0x60
 8003786:	d064      	beq.n	8003852 <HAL_CRYP_AESCBC_Encrypt+0x152>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003788:	f8d9 1000 	ldr.w	r1, [r9]
 800378c:	68a3      	ldr	r3, [r4, #8]
 800378e:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8003792:	f021 017e 	bic.w	r1, r1, #126	@ 0x7e
 8003796:	4313      	orrs	r3, r2
 8003798:	430b      	orrs	r3, r1
 800379a:	4303      	orrs	r3, r0
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 800379c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80037a0:	f8c9 3000 	str.w	r3, [r9]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 80037a4:	f000 808f 	beq.w	80038c6 <HAL_CRYP_AESCBC_Encrypt+0x1c6>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80037a8:	f1bc 0f00 	cmp.w	ip, #0
 80037ac:	f000 8083 	beq.w	80038b6 <HAL_CRYP_AESCBC_Encrypt+0x1b6>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 80037b0:	2a00      	cmp	r2, #0
 80037b2:	d16c      	bne.n	800388e <HAL_CRYP_AESCBC_Encrypt+0x18e>
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 80037b4:	463b      	mov	r3, r7
 80037b6:	4632      	mov	r2, r6
  hcryp->CrypInCount = 0;
 80037b8:	2700      	movs	r7, #0
 80037ba:	2600      	movs	r6, #0
 80037bc:	e9c4 6710 	strd	r6, r7, [r4, #64]	@ 0x40
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80037c0:	2000      	movs	r0, #0
 80037c2:	65a0      	str	r0, [r4, #88]	@ 0x58
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 80037c4:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hcryp->State = HAL_CRYP_STATE_READY;
 80037c8:	2001      	movs	r0, #1
 80037ca:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 80037ce:	4620      	mov	r0, r4
  __HAL_CRYP_ENABLE(hcryp);
 80037d0:	f8d9 4000 	ldr.w	r4, [r9]
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 80037d4:	4629      	mov	r1, r5
  __HAL_CRYP_ENABLE(hcryp);
 80037d6:	f044 0401 	orr.w	r4, r4, #1
 80037da:	f8c9 4000 	str.w	r4, [r9]
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 80037de:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
}
 80037e2:	b003      	add	sp, #12
 80037e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 80037e8:	f000 b88e 	b.w	8003908 <HAL_CRYPEx_AES>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7ff fe93 	bl	8003518 <CRYP_SetKey>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d075      	beq.n	80038e2 <HAL_CRYP_AESCBC_Encrypt+0x1e2>
}
 80037f6:	2001      	movs	r0, #1
 80037f8:	b003      	add	sp, #12
 80037fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_CRYP_MspInit(hcryp);
 80037fe:	4620      	mov	r0, r4
 8003800:	f7fd f8a4 	bl	800094c <HAL_CRYP_MspInit>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003804:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003808:	f8d4 9000 	ldr.w	r9, [r4]
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800380c:	6920      	ldr	r0, [r4, #16]
  __HAL_CRYP_DISABLE(hcryp);
 800380e:	f8d9 3000 	ldr.w	r3, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003812:	68e2      	ldr	r2, [r4, #12]
  __HAL_CRYP_DISABLE(hcryp);
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	f8c9 3000 	str.w	r3, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800381c:	f8d9 3000 	ldr.w	r3, [r9]
 8003820:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c9 3000 	str.w	r3, [r9]
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800382a:	2808      	cmp	r0, #8
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 800382c:	f04f 030a 	mov.w	r3, #10
 8003830:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003834:	d1a4      	bne.n	8003780 <HAL_CRYP_AESCBC_Encrypt+0x80>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003836:	f8d9 3000 	ldr.w	r3, [r9]
 800383a:	f023 0318 	bic.w	r3, r3, #24
 800383e:	f043 0308 	orr.w	r3, r3, #8
 8003842:	f8c9 3000 	str.w	r3, [r9]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8003846:	4620      	mov	r0, r4
 8003848:	f7ff fe66 	bl	8003518 <CRYP_SetKey>
 800384c:	2800      	cmp	r0, #0
 800384e:	d0b1      	beq.n	80037b4 <HAL_CRYP_AESCBC_Encrypt+0xb4>
 8003850:	e7d1      	b.n	80037f6 <HAL_CRYP_AESCBC_Encrypt+0xf6>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003852:	f8d9 3000 	ldr.w	r3, [r9]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003856:	69e2      	ldr	r2, [r4, #28]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385c:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8003860:	4303      	orrs	r3, r0
 8003862:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003866:	f8c9 3000 	str.w	r3, [r9]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 800386a:	f8d9 3000 	ldr.w	r3, [r9]
 800386e:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c9 3000 	str.w	r3, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003878:	2303      	movs	r3, #3
 800387a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 800387e:	f1bc 0f00 	cmp.w	ip, #0
 8003882:	d104      	bne.n	800388e <HAL_CRYP_AESCBC_Encrypt+0x18e>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003884:	4620      	mov	r0, r4
 8003886:	f7ff fe47 	bl	8003518 <CRYP_SetKey>
 800388a:	2800      	cmp	r0, #0
 800388c:	d1b3      	bne.n	80037f6 <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.pInitVect == NULL)
 800388e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0b0      	beq.n	80037f6 <HAL_CRYP_AESCBC_Encrypt+0xf6>
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	ba12      	rev	r2, r2
    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 8003898:	f8c9 202c 	str.w	r2, [r9, #44]	@ 0x2c
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	ba12      	rev	r2, r2
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 80038a0:	f8c9 2028 	str.w	r2, [r9, #40]	@ 0x28
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	ba12      	rev	r2, r2
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 80038a8:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	ba1b      	rev	r3, r3
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 80038b0:	f8c9 3020 	str.w	r3, [r9, #32]
 80038b4:	e77e      	b.n	80037b4 <HAL_CRYP_AESCBC_Encrypt+0xb4>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80038b6:	4620      	mov	r0, r4
 80038b8:	9201      	str	r2, [sp, #4]
 80038ba:	f7ff fe2d 	bl	8003518 <CRYP_SetKey>
 80038be:	2800      	cmp	r0, #0
 80038c0:	d199      	bne.n	80037f6 <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 80038c2:	9a01      	ldr	r2, [sp, #4]
 80038c4:	e774      	b.n	80037b0 <HAL_CRYP_AESCBC_Encrypt+0xb0>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80038c6:	f8d9 3000 	ldr.w	r3, [r9]
 80038ca:	69e2      	ldr	r2, [r4, #28]
 80038cc:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c9 3000 	str.w	r3, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80038d6:	2303      	movs	r3, #3
 80038d8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80038dc:	f1bc 0f00 	cmp.w	ip, #0
 80038e0:	d084      	beq.n	80037ec <HAL_CRYP_AESCBC_Encrypt+0xec>
    hcryp->Instance->IVR3 = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 80038e8:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 80038ec:	f8c9 3024 	str.w	r3, [r9, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 80038f0:	f8c9 3020 	str.w	r3, [r9, #32]
 80038f4:	e75e      	b.n	80037b4 <HAL_CRYP_AESCBC_Encrypt+0xb4>
 80038f6:	bf00      	nop
	...
 8003904:	00000020 	.word	0x00000020

08003908 <HAL_CRYPEx_AES>:
  *                     case of key derivation only.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AES(CRYP_HandleTypeDef *hcryp, uint8_t *pInputData, uint16_t Size, uint8_t *pOutputData, uint32_t Timeout)
{
 8003908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800390c:	461c      	mov	r4, r3

  if (hcryp->State == HAL_CRYP_STATE_READY)
 800390e:	f890 3055 	ldrb.w	r3, [r0, #85]	@ 0x55
{
 8003912:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003916:	2b01      	cmp	r3, #1
 8003918:	f040 809b 	bne.w	8003a52 <HAL_CRYPEx_AES+0x14a>
 800391c:	4606      	mov	r6, r0
 800391e:	b2d8      	uxtb	r0, r3
  {
    /* Check parameters setting */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003920:	6933      	ldr	r3, [r6, #16]
 8003922:	2b08      	cmp	r3, #8
 8003924:	d04d      	beq.n	80039c2 <HAL_CRYPEx_AES+0xba>
        return  HAL_ERROR;
      }
    }
    else
    {
      if ((pInputData == NULL) || (pOutputData == NULL) || (Size == 0U))
 8003926:	2900      	cmp	r1, #0
 8003928:	f000 8091 	beq.w	8003a4e <HAL_CRYPEx_AES+0x146>
 800392c:	2c00      	cmp	r4, #0
 800392e:	f000 808e 	beq.w	8003a4e <HAL_CRYPEx_AES+0x146>
 8003932:	4617      	mov	r7, r2
 8003934:	2a00      	cmp	r2, #0
 8003936:	f000 808a 	beq.w	8003a4e <HAL_CRYPEx_AES+0x146>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(hcryp);
 800393a:	f896 3054 	ldrb.w	r3, [r6, #84]	@ 0x54
 800393e:	2b01      	cmp	r3, #1
 8003940:	f000 8087 	beq.w	8003a52 <HAL_CRYPEx_AES+0x14a>

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003944:	2302      	movs	r3, #2
 8003946:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55


  for(index=0U ; (index < Ilength); index += 16U)
  {
    /* Write the Input block in the Data Input register */
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 800394a:	6833      	ldr	r3, [r6, #0]
    __HAL_LOCK(hcryp);
 800394c:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
  for(index=0U ; (index < Ilength); index += 16U)
 8003950:	f101 0510 	add.w	r5, r1, #16
 8003954:	3410      	adds	r4, #16
 8003956:	f04f 0900 	mov.w	r9, #0
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 800395a:	f855 2c10 	ldr.w	r2, [r5, #-16]
 800395e:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003960:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8003964:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 8003966:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800396a:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 800396c:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8003970:	609a      	str	r2, [r3, #8]
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef const * const hcryp, uint32_t Timeout)
{
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003972:	f7fe ffeb 	bl	800294c <HAL_GetTick>
 8003976:	f1b8 3fff 	cmp.w	r8, #4294967295

  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800397a:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 800397c:	4682      	mov	sl, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800397e:	d172      	bne.n	8003a66 <HAL_CRYPEx_AES+0x15e>
 8003980:	6859      	ldr	r1, [r3, #4]
 8003982:	07c9      	lsls	r1, r1, #31
 8003984:	d5fc      	bpl.n	8003980 <HAL_CRYPEx_AES+0x78>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800398c:	601a      	str	r2, [r3, #0]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	f844 2c10 	str.w	r2, [r4, #-16]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	f844 2c0c 	str.w	r2, [r4, #-12]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	f844 2c04 	str.w	r2, [r4, #-4]
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 80039a6:	f896 205c 	ldrb.w	r2, [r6, #92]	@ 0x5c
 80039aa:	2a01      	cmp	r2, #1
 80039ac:	f109 0110 	add.w	r1, r9, #16
 80039b0:	d067      	beq.n	8003a82 <HAL_CRYPEx_AES+0x17a>
  for(index=0U ; (index < Ilength); index += 16U)
 80039b2:	428f      	cmp	r7, r1
 80039b4:	f105 0510 	add.w	r5, r5, #16
 80039b8:	f104 0410 	add.w	r4, r4, #16
 80039bc:	d93b      	bls.n	8003a36 <HAL_CRYPEx_AES+0x12e>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 80039be:	4689      	mov	r9, r1
 80039c0:	e7cb      	b.n	800395a <HAL_CRYPEx_AES+0x52>
      if (pOutputData == NULL)
 80039c2:	2c00      	cmp	r4, #0
 80039c4:	d043      	beq.n	8003a4e <HAL_CRYPEx_AES+0x146>
    __HAL_LOCK(hcryp);
 80039c6:	f896 3054 	ldrb.w	r3, [r6, #84]	@ 0x54
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d041      	beq.n	8003a52 <HAL_CRYPEx_AES+0x14a>
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80039ce:	2302      	movs	r3, #2
    __HAL_LOCK(hcryp);
 80039d0:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80039d4:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55
  tickstart = HAL_GetTick();
 80039d8:	f7fe ffb8 	bl	800294c <HAL_GetTick>
 80039dc:	f1b8 3fff 	cmp.w	r8, #4294967295
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80039e0:	6832      	ldr	r2, [r6, #0]
  tickstart = HAL_GetTick();
 80039e2:	4605      	mov	r5, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80039e4:	d149      	bne.n	8003a7a <HAL_CRYPEx_AES+0x172>
 80039e6:	6853      	ldr	r3, [r2, #4]
 80039e8:	07dd      	lsls	r5, r3, #31
 80039ea:	d5fc      	bpl.n	80039e6 <HAL_CRYPEx_AES+0xde>
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80039ec:	6813      	ldr	r3, [r2, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80039ee:	68f1      	ldr	r1, [r6, #12]
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80039f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80039f4:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80039f8:	6013      	str	r3, [r2, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80039fa:	d110      	bne.n	8003a1e <HAL_CRYPEx_AES+0x116>
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 80039fc:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
    outputaddr+=4U;
 80039fe:	3410      	adds	r4, #16
 8003a00:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8003a02:	f844 3c10 	str.w	r3, [r4, #-16]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR6);
 8003a06:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003a08:	ba1b      	rev	r3, r3
 8003a0a:	f844 3c0c 	str.w	r3, [r4, #-12]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR5);
 8003a0e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003a10:	ba1b      	rev	r3, r3
 8003a12:	f844 3c08 	str.w	r3, [r4, #-8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR4);
 8003a16:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003a18:	ba1b      	rev	r3, r3
 8003a1a:	f844 3c04 	str.w	r3, [r4, #-4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR3);
 8003a1e:	69d3      	ldr	r3, [r2, #28]
 8003a20:	ba1b      	rev	r3, r3
 8003a22:	6023      	str	r3, [r4, #0]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR2);
 8003a24:	6993      	ldr	r3, [r2, #24]
 8003a26:	ba1b      	rev	r3, r3
 8003a28:	6063      	str	r3, [r4, #4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR1);
 8003a2a:	6953      	ldr	r3, [r2, #20]
 8003a2c:	ba1b      	rev	r3, r3
 8003a2e:	60a3      	str	r3, [r4, #8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR0);
 8003a30:	6913      	ldr	r3, [r2, #16]
 8003a32:	ba1b      	rev	r3, r3
 8003a34:	60e3      	str	r3, [r4, #12]
    if (hcryp->State != HAL_CRYP_STATE_SUSPENDED)
 8003a36:	f896 3055 	ldrb.w	r3, [r6, #85]	@ 0x55
 8003a3a:	2b05      	cmp	r3, #5
      hcryp->State = HAL_CRYP_STATE_READY;
 8003a3c:	bf18      	it	ne
 8003a3e:	2301      	movne	r3, #1
    __HAL_UNLOCK(hcryp);
 8003a40:	f04f 0000 	mov.w	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 8003a44:	bf18      	it	ne
 8003a46:	f886 3055 	strbne.w	r3, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 8003a4a:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
}
 8003a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hcryp);
 8003a52:	2002      	movs	r0, #2
}
 8003a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((HAL_GetTick() - tickstart ) > Timeout)
 8003a58:	f7fe ff78 	bl	800294c <HAL_GetTick>
 8003a5c:	eba0 000a 	sub.w	r0, r0, sl
 8003a60:	4580      	cmp	r8, r0
 8003a62:	d31e      	bcc.n	8003aa2 <HAL_CRYPEx_AES+0x19a>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003a64:	6833      	ldr	r3, [r6, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	07d2      	lsls	r2, r2, #31
 8003a6a:	d5f5      	bpl.n	8003a58 <HAL_CRYPEx_AES+0x150>
 8003a6c:	e78b      	b.n	8003986 <HAL_CRYPEx_AES+0x7e>
      if((HAL_GetTick() - tickstart ) > Timeout)
 8003a6e:	f7fe ff6d 	bl	800294c <HAL_GetTick>
 8003a72:	1b43      	subs	r3, r0, r5
 8003a74:	4598      	cmp	r8, r3
 8003a76:	d314      	bcc.n	8003aa2 <HAL_CRYPEx_AES+0x19a>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003a78:	6832      	ldr	r2, [r6, #0]
 8003a7a:	6853      	ldr	r3, [r2, #4]
 8003a7c:	07d8      	lsls	r0, r3, #31
 8003a7e:	d5f6      	bpl.n	8003a6e <HAL_CRYPEx_AES+0x166>
 8003a80:	e7b4      	b.n	80039ec <HAL_CRYPEx_AES+0xe4>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8003a82:	428f      	cmp	r7, r1
 8003a84:	d9d7      	bls.n	8003a36 <HAL_CRYPEx_AES+0x12e>
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8003a86:	f1a7 0310 	sub.w	r3, r7, #16
 8003a8a:	eba3 0309 	sub.w	r3, r3, r9
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8003a8e:	2205      	movs	r2, #5
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8003a90:	6433      	str	r3, [r6, #64]	@ 0x40
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003a92:	2300      	movs	r3, #0
      hcryp->pCrypOutBuffPtr =  (uint8_t *)outputaddr;
 8003a94:	63f4      	str	r4, [r6, #60]	@ 0x3c
      hcryp->pCrypInBuffPtr  =  (uint8_t *)inputaddr;
 8003a96:	63b5      	str	r5, [r6, #56]	@ 0x38
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8003a98:	f886 2055 	strb.w	r2, [r6, #85]	@ 0x55
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003a9c:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
      return HAL_OK;
 8003aa0:	e7c9      	b.n	8003a36 <HAL_CRYPEx_AES+0x12e>
    hcryp->State = HAL_CRYP_STATE_READY;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f886 3054 	strb.w	r3, [r6, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003aae:	2003      	movs	r0, #3
}
 8003ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003ab4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d050      	beq.n	8003b5a <HAL_DMA_Init+0xa6>
{
 8003ab8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003aba:	4a2e      	ldr	r2, [pc, #184]	@ (8003b74 <HAL_DMA_Init+0xc0>)
 8003abc:	6804      	ldr	r4, [r0, #0]
 8003abe:	4294      	cmp	r4, r2
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	d941      	bls.n	8003b48 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ac4:	492c      	ldr	r1, [pc, #176]	@ (8003b78 <HAL_DMA_Init+0xc4>)
 8003ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b7c <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA2;
 8003ac8:	4d2d      	ldr	r5, [pc, #180]	@ (8003b80 <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003aca:	4421      	add	r1, r4
 8003acc:	fba2 2101 	umull	r2, r1, r2, r1
 8003ad0:	0909      	lsrs	r1, r1, #4
 8003ad2:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ada:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ade:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 8003ae0:	6820      	ldr	r0, [r4, #0]
 8003ae2:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp |=  hdma->Init.Direction        |
 8003ae4:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae6:	433a      	orrs	r2, r7
 8003ae8:	695f      	ldr	r7, [r3, #20]
 8003aea:	6459      	str	r1, [r3, #68]	@ 0x44
 8003aec:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aee:	699f      	ldr	r7, [r3, #24]
 8003af0:	433a      	orrs	r2, r7
 8003af2:	69df      	ldr	r7, [r3, #28]
 8003af4:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af6:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003af8:	f420 40ff 	bic.w	r0, r0, #32640	@ 0x7f80
 8003afc:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b00:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 8003b02:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b04:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 8003b08:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b0a:	d014      	beq.n	8003b36 <HAL_DMA_Init+0x82>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b0c:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b0e:	f001 011c 	and.w	r1, r1, #28
 8003b12:	220f      	movs	r2, #15
 8003b14:	408a      	lsls	r2, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b16:	4088      	lsls	r0, r1
    if (DMA1 == hdma->DmaBaseAddress)
 8003b18:	491a      	ldr	r1, [pc, #104]	@ (8003b84 <HAL_DMA_Init+0xd0>)
 8003b1a:	428d      	cmp	r5, r1
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b1c:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8003b20:	d01d      	beq.n	8003b5e <HAL_DMA_Init+0xaa>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b22:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 8003b26:	4022      	ands	r2, r4
 8003b28:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b2c:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 8003b30:	4302      	orrs	r2, r0
 8003b32:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b36:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b38:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3a:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b3c:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8003b40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 8003b44:	bcf0      	pop	{r4, r5, r6, r7}
 8003b46:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b48:	490f      	ldr	r1, [pc, #60]	@ (8003b88 <HAL_DMA_Init+0xd4>)
 8003b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b7c <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA1;
 8003b4c:	4d0d      	ldr	r5, [pc, #52]	@ (8003b84 <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b4e:	4421      	add	r1, r4
 8003b50:	fba2 2101 	umull	r2, r1, r2, r1
 8003b54:	0909      	lsrs	r1, r1, #4
 8003b56:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8003b58:	e7bc      	b.n	8003ad4 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8003b5a:	2001      	movs	r0, #1
}
 8003b5c:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b5e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8003b62:	400a      	ands	r2, r1
 8003b64:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b68:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 8003b6c:	4302      	orrs	r2, r0
 8003b6e:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
 8003b72:	e7e0      	b.n	8003b36 <HAL_DMA_Init+0x82>
 8003b74:	40020407 	.word	0x40020407
 8003b78:	bffdfbf8 	.word	0xbffdfbf8
 8003b7c:	cccccccd 	.word	0xcccccccd
 8003b80:	40020400 	.word	0x40020400
 8003b84:	40020000 	.word	0x40020000
 8003b88:	bffdfff8 	.word	0xbffdfff8

08003b8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b8c:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b8e:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8003b92:	2c01      	cmp	r4, #1
 8003b94:	d00b      	beq.n	8003bae <HAL_DMA_Start_IT+0x22>
 8003b96:	2401      	movs	r4, #1
 8003b98:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b9c:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8003ba0:	2c01      	cmp	r4, #1
 8003ba2:	fa5f fc84 	uxtb.w	ip, r4
 8003ba6:	d005      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8003bae:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8003bb0:	bc70      	pop	{r4, r5, r6}
 8003bb2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bb4:	2502      	movs	r5, #2
 8003bb6:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 8003bba:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bbc:	2500      	movs	r5, #0
 8003bbe:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003bc0:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bc2:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 8003bc4:	f026 0601 	bic.w	r6, r6, #1
 8003bc8:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bca:	f005 051c 	and.w	r5, r5, #28
 8003bce:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8003bd0:	fa0c f505 	lsl.w	r5, ip, r5
 8003bd4:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bd6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bd8:	6883      	ldr	r3, [r0, #8]
 8003bda:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8003bdc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bde:	bf0b      	itete	eq
 8003be0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003be2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003be4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003be6:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8003be8:	b153      	cbz	r3, 8003c00 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	f043 030e 	orr.w	r3, r3, #14
 8003bf0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003bf8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003bfa:	6023      	str	r3, [r4, #0]
}
 8003bfc:	bc70      	pop	{r4, r5, r6}
 8003bfe:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	f023 0304 	bic.w	r3, r3, #4
 8003c06:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	f043 030a 	orr.w	r3, r3, #10
 8003c0e:	6023      	str	r3, [r4, #0]
 8003c10:	e7ef      	b.n	8003bf2 <HAL_DMA_Start_IT+0x66>
 8003c12:	bf00      	nop

08003c14 <HAL_DMA_IRQHandler>:
{
 8003c14:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c16:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c18:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003c1a:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c1c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003c1e:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c20:	f003 031c 	and.w	r3, r3, #28
 8003c24:	2204      	movs	r2, #4
 8003c26:	409a      	lsls	r2, r3
 8003c28:	420a      	tst	r2, r1
 8003c2a:	d00e      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x36>
 8003c2c:	f014 0f04 	tst.w	r4, #4
 8003c30:	d00b      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c32:	682b      	ldr	r3, [r5, #0]
 8003c34:	069b      	lsls	r3, r3, #26
 8003c36:	d403      	bmi.n	8003c40 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	f023 0304 	bic.w	r3, r3, #4
 8003c3e:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8003c40:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c42:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003c44:	b1cb      	cbz	r3, 8003c7a <HAL_DMA_IRQHandler+0x66>
}
 8003c46:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003c48:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	420a      	tst	r2, r1
 8003c50:	d015      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x6a>
 8003c52:	f014 0f02 	tst.w	r4, #2
 8003c56:	d012      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	0699      	lsls	r1, r3, #26
 8003c5c:	d406      	bmi.n	8003c6c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c5e:	682b      	ldr	r3, [r5, #0]
 8003c60:	f023 030a 	bic.w	r3, r3, #10
 8003c64:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8003c6c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c6e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8003c70:	2100      	movs	r1, #0
 8003c72:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <HAL_DMA_IRQHandler+0x32>
}
 8003c7a:	bc70      	pop	{r4, r5, r6}
 8003c7c:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c7e:	2208      	movs	r2, #8
 8003c80:	409a      	lsls	r2, r3
 8003c82:	420a      	tst	r2, r1
 8003c84:	d0f9      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x66>
 8003c86:	0722      	lsls	r2, r4, #28
 8003c88:	d5f7      	bpl.n	8003c7a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c8a:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8003c8c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c8e:	f022 020e 	bic.w	r2, r2, #14
 8003c92:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c94:	2201      	movs	r2, #1
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8003c9a:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c9c:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c9e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003ca0:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8003ca4:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8003ca8:	2900      	cmp	r1, #0
 8003caa:	d0e6      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x66>
}
 8003cac:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003cae:	4708      	bx	r1

08003cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb4:	680c      	ldr	r4, [r1, #0]
{
 8003cb6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb8:	2c00      	cmp	r4, #0
 8003cba:	f000 8094 	beq.w	8003de6 <HAL_GPIO_Init+0x136>
  uint32_t position = 0x00u;
 8003cbe:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cc0:	f04f 0b01 	mov.w	fp, #1
 8003cc4:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8003cc8:	ea1e 0a04 	ands.w	sl, lr, r4
 8003ccc:	f000 8086 	beq.w	8003ddc <HAL_GPIO_Init+0x12c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cd0:	684d      	ldr	r5, [r1, #4]
 8003cd2:	f005 0203 	and.w	r2, r5, #3
 8003cd6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cda:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cdc:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ce0:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce4:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ce8:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cec:	d97e      	bls.n	8003dec <HAL_GPIO_Init+0x13c>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cee:	2a03      	cmp	r2, #3
 8003cf0:	f040 80ba 	bne.w	8003e68 <HAL_GPIO_Init+0x1b8>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cf4:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8003cf8:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cfc:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d00:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d02:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003d06:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d08:	d068      	beq.n	8003ddc <HAL_GPIO_Init+0x12c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d0a:	4f72      	ldr	r7, [pc, #456]	@ (8003ed4 <HAL_GPIO_Init+0x224>)
 8003d0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	663a      	str	r2, [r7, #96]	@ 0x60
 8003d14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d16:	f002 0201 	and.w	r2, r2, #1
 8003d1a:	9203      	str	r2, [sp, #12]
 8003d1c:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d1e:	f023 0203 	bic.w	r2, r3, #3
 8003d22:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003d26:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d2a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d2e:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d30:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003d34:	260f      	movs	r6, #15
 8003d36:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d3a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d3e:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d42:	d027      	beq.n	8003d94 <HAL_GPIO_Init+0xe4>
 8003d44:	4e64      	ldr	r6, [pc, #400]	@ (8003ed8 <HAL_GPIO_Init+0x228>)
 8003d46:	42b0      	cmp	r0, r6
 8003d48:	f000 80a1 	beq.w	8003e8e <HAL_GPIO_Init+0x1de>
 8003d4c:	4e63      	ldr	r6, [pc, #396]	@ (8003edc <HAL_GPIO_Init+0x22c>)
 8003d4e:	42b0      	cmp	r0, r6
 8003d50:	f000 80a4 	beq.w	8003e9c <HAL_GPIO_Init+0x1ec>
 8003d54:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8003ee4 <HAL_GPIO_Init+0x234>
 8003d58:	4570      	cmp	r0, lr
 8003d5a:	f000 8091 	beq.w	8003e80 <HAL_GPIO_Init+0x1d0>
 8003d5e:	f8df e188 	ldr.w	lr, [pc, #392]	@ 8003ee8 <HAL_GPIO_Init+0x238>
 8003d62:	4570      	cmp	r0, lr
 8003d64:	f000 80a8 	beq.w	8003eb8 <HAL_GPIO_Init+0x208>
 8003d68:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8003eec <HAL_GPIO_Init+0x23c>
 8003d6c:	4570      	cmp	r0, lr
 8003d6e:	f000 80aa 	beq.w	8003ec6 <HAL_GPIO_Init+0x216>
 8003d72:	f8df e17c 	ldr.w	lr, [pc, #380]	@ 8003ef0 <HAL_GPIO_Init+0x240>
 8003d76:	4570      	cmp	r0, lr
 8003d78:	f000 8097 	beq.w	8003eaa <HAL_GPIO_Init+0x1fa>
 8003d7c:	f8df e174 	ldr.w	lr, [pc, #372]	@ 8003ef4 <HAL_GPIO_Init+0x244>
 8003d80:	4570      	cmp	r0, lr
 8003d82:	bf0c      	ite	eq
 8003d84:	f04f 0e07 	moveq.w	lr, #7
 8003d88:	f04f 0e08 	movne.w	lr, #8
 8003d8c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003d90:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d94:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d96:	4a52      	ldr	r2, [pc, #328]	@ (8003ee0 <HAL_GPIO_Init+0x230>)
 8003d98:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d9a:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8003d9c:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003da0:	4e4f      	ldr	r6, [pc, #316]	@ (8003ee0 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8003da2:	bf54      	ite	pl
 8003da4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003da6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8003daa:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8003dac:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dae:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003db0:	4e4b      	ldr	r6, [pc, #300]	@ (8003ee0 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8003db2:	bf54      	ite	pl
 8003db4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003db6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8003dba:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dbc:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dbe:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003dc0:	4e47      	ldr	r6, [pc, #284]	@ (8003ee0 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8003dc2:	bf54      	ite	pl
 8003dc4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003dc6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8003dca:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 8003dcc:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dce:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8003dd0:	4d43      	ldr	r5, [pc, #268]	@ (8003ee0 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8003dd2:	bf54      	ite	pl
 8003dd4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003dd6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8003dda:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8003ddc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dde:	fa34 f203 	lsrs.w	r2, r4, r3
 8003de2:	f47f af6f 	bne.w	8003cc4 <HAL_GPIO_Init+0x14>
  }
}
 8003de6:	b005      	add	sp, #20
 8003de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003dec:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003df0:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003df2:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003df6:	fa06 f80c 	lsl.w	r8, r6, ip
 8003dfa:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003dfe:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8003e02:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e06:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e08:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e0c:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8003e10:	fa0e fe03 	lsl.w	lr, lr, r3
 8003e14:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8003e18:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8003e1c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e20:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e24:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e28:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e2c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003e2e:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e32:	f47f af5f 	bne.w	8003cf4 <HAL_GPIO_Init+0x44>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e36:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8003e38:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e3c:	f003 0e07 	and.w	lr, r3, #7
 8003e40:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003e44:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e48:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 8003e4c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e50:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e52:	260f      	movs	r6, #15
 8003e54:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e58:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e5a:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e5e:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 8003e62:	f8c8 e020 	str.w	lr, [r8, #32]
 8003e66:	e745      	b.n	8003cf4 <HAL_GPIO_Init+0x44>
        temp = GPIOx->PUPDR;
 8003e68:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e6c:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e6e:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e72:	fa06 fe0c 	lsl.w	lr, r6, ip
 8003e76:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8003e7a:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7e:	e739      	b.n	8003cf4 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e80:	f04f 0e03 	mov.w	lr, #3
 8003e84:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003e88:	ea47 070c 	orr.w	r7, r7, ip
 8003e8c:	e782      	b.n	8003d94 <HAL_GPIO_Init+0xe4>
 8003e8e:	f04f 0e01 	mov.w	lr, #1
 8003e92:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003e96:	ea47 070c 	orr.w	r7, r7, ip
 8003e9a:	e77b      	b.n	8003d94 <HAL_GPIO_Init+0xe4>
 8003e9c:	f04f 0e02 	mov.w	lr, #2
 8003ea0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003ea4:	ea47 070c 	orr.w	r7, r7, ip
 8003ea8:	e774      	b.n	8003d94 <HAL_GPIO_Init+0xe4>
 8003eaa:	f04f 0e06 	mov.w	lr, #6
 8003eae:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003eb2:	ea47 070c 	orr.w	r7, r7, ip
 8003eb6:	e76d      	b.n	8003d94 <HAL_GPIO_Init+0xe4>
 8003eb8:	f04f 0e04 	mov.w	lr, #4
 8003ebc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003ec0:	ea47 070c 	orr.w	r7, r7, ip
 8003ec4:	e766      	b.n	8003d94 <HAL_GPIO_Init+0xe4>
 8003ec6:	f04f 0e05 	mov.w	lr, #5
 8003eca:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003ece:	ea47 070c 	orr.w	r7, r7, ip
 8003ed2:	e75f      	b.n	8003d94 <HAL_GPIO_Init+0xe4>
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	48000400 	.word	0x48000400
 8003edc:	48000800 	.word	0x48000800
 8003ee0:	40010400 	.word	0x40010400
 8003ee4:	48000c00 	.word	0x48000c00
 8003ee8:	48001000 	.word	0x48001000
 8003eec:	48001400 	.word	0x48001400
 8003ef0:	48001800 	.word	0x48001800
 8003ef4:	48001c00 	.word	0x48001c00

08003ef8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ef8:	b10a      	cbz	r2, 8003efe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003efa:	6181      	str	r1, [r0, #24]
 8003efc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003efe:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop

08003f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f04:	4a04      	ldr	r2, [pc, #16]	@ (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003f06:	6951      	ldr	r1, [r2, #20]
 8003f08:	4201      	tst	r1, r0
 8003f0a:	d100      	bne.n	8003f0e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003f0c:	4770      	bx	lr
{
 8003f0e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f10:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f12:	f7fc ff37 	bl	8000d84 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f16:	bd08      	pop	{r3, pc}
 8003f18:	40010400 	.word	0x40010400

08003f1c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f1c:	4b02      	ldr	r3, [pc, #8]	@ (8003f28 <HAL_PWREx_GetVoltageRange+0xc>)
 8003f1e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003f20:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40007000 	.word	0x40007000

08003f2c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f2c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8003f30:	d00e      	beq.n	8003f50 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f32:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f34:	6813      	ldr	r3, [r2, #0]
 8003f36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3e:	d005      	beq.n	8003f4c <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f40:	6813      	ldr	r3, [r2, #0]
 8003f42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f50:	4913      	ldr	r1, [pc, #76]	@ (8003fa0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f52:	680b      	ldr	r3, [r1, #0]
 8003f54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f5c:	d0f6      	beq.n	8003f4c <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f5e:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f60:	4a10      	ldr	r2, [pc, #64]	@ (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f6a:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003f70:	2032      	movs	r0, #50	@ 0x32
 8003f72:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f76:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f7e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f80:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f84:	d506      	bpl.n	8003f94 <HAL_PWREx_ControlVoltageScaling+0x68>
 8003f86:	e000      	b.n	8003f8a <HAL_PWREx_ControlVoltageScaling+0x5e>
 8003f88:	b123      	cbz	r3, 8003f94 <HAL_PWREx_ControlVoltageScaling+0x68>
 8003f8a:	694a      	ldr	r2, [r1, #20]
 8003f8c:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8003f8e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f92:	d4f9      	bmi.n	8003f88 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f94:	4b02      	ldr	r3, [pc, #8]	@ (8003fa0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	055b      	lsls	r3, r3, #21
 8003f9a:	d5d7      	bpl.n	8003f4c <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8003f9c:	2003      	movs	r0, #3
}
 8003f9e:	4770      	bx	lr
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	20000400 	.word	0x20000400
 8003fa8:	431bde83 	.word	0x431bde83

08003fac <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003fac:	4a02      	ldr	r2, [pc, #8]	@ (8003fb8 <HAL_PWREx_EnableVddIO2+0xc>)
 8003fae:	6853      	ldr	r3, [r2, #4]
 8003fb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fb4:	6053      	str	r3, [r2, #4]
}
 8003fb6:	4770      	bx	lr
 8003fb8:	40007000 	.word	0x40007000

08003fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fbc:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fbe:	4d20      	ldr	r5, [pc, #128]	@ (8004040 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8003fc0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003fc2:	00db      	lsls	r3, r3, #3
{
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fc8:	d51a      	bpl.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fca:	f7ff ffa7 	bl	8003f1c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fce:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8003fd2:	d027      	beq.n	8004024 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fd4:	2c80      	cmp	r4, #128	@ 0x80
 8003fd6:	d82c      	bhi.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fd8:	d02f      	beq.n	800403a <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fda:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8003fde:	fab4 f484 	clz	r4, r4
 8003fe2:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fe4:	4917      	ldr	r1, [pc, #92]	@ (8004044 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003fe6:	680b      	ldr	r3, [r1, #0]
 8003fe8:	f023 0307 	bic.w	r3, r3, #7
 8003fec:	4323      	orrs	r3, r4
 8003fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ff0:	6808      	ldr	r0, [r1, #0]
 8003ff2:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003ff6:	1b00      	subs	r0, r0, r4
 8003ff8:	bf18      	it	ne
 8003ffa:	2001      	movne	r0, #1
 8003ffc:	b003      	add	sp, #12
 8003ffe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004000:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004006:	65ab      	str	r3, [r5, #88]	@ 0x58
 8004008:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800400a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8004012:	f7ff ff83 	bl	8003f1c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8004016:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004018:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 800401c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004020:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004022:	d1d7      	bne.n	8003fd4 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8004024:	2c80      	cmp	r4, #128	@ 0x80
 8004026:	d906      	bls.n	8004036 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004028:	2ca1      	cmp	r4, #161	@ 0xa1
 800402a:	bf34      	ite	cc
 800402c:	2401      	movcc	r4, #1
 800402e:	2402      	movcs	r4, #2
 8004030:	e7d8      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8004032:	2403      	movs	r4, #3
 8004034:	e7d6      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004036:	2400      	movs	r4, #0
 8004038:	e7d4      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 800403a:	2402      	movs	r4, #2
 800403c:	e7d2      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x28>
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000
 8004044:	40022000 	.word	0x40022000

08004048 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004048:	4a28      	ldr	r2, [pc, #160]	@ (80040ec <HAL_RCC_GetSysClockFreq+0xa4>)
 800404a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800404c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800404e:	f013 030c 	ands.w	r3, r3, #12
 8004052:	d005      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0x18>
 8004054:	2b0c      	cmp	r3, #12
 8004056:	d035      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004058:	2b04      	cmp	r3, #4
 800405a:	d141      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 800405c:	4824      	ldr	r0, [pc, #144]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800405e:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004060:	4a22      	ldr	r2, [pc, #136]	@ (80040ec <HAL_RCC_GetSysClockFreq+0xa4>)
 8004062:	6811      	ldr	r1, [r2, #0]
 8004064:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004066:	bf54      	ite	pl
 8004068:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800406c:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 800406e:	4921      	ldr	r1, [pc, #132]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004070:	bf54      	ite	pl
 8004072:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004076:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800407a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800407e:	b303      	cbz	r3, 80040c2 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004080:	2b0c      	cmp	r3, #12
 8004082:	d11d      	bne.n	80040c0 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004084:	4b19      	ldr	r3, [pc, #100]	@ (80040ec <HAL_RCC_GetSysClockFreq+0xa4>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800408c:	2b02      	cmp	r3, #2
 800408e:	d025      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x94>
 8004090:	4a19      	ldr	r2, [pc, #100]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004092:	2b03      	cmp	r3, #3
 8004094:	bf08      	it	eq
 8004096:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004098:	4b14      	ldr	r3, [pc, #80]	@ (80040ec <HAL_RCC_GetSysClockFreq+0xa4>)
 800409a:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800409c:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040a4:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a8:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ac:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ae:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040b2:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040b4:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040b6:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 80040ba:	fbb2 f0f3 	udiv	r0, r2, r3
 80040be:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040c0:	2000      	movs	r0, #0
}
 80040c2:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c4:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040c8:	2a01      	cmp	r2, #1
 80040ca:	d0c9      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040cc:	4b07      	ldr	r3, [pc, #28]	@ (80040ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80040d4:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040d6:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 80040da:	d1d9      	bne.n	8004090 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 80040dc:	4804      	ldr	r0, [pc, #16]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0xa8>)
 80040de:	e7db      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	4805      	ldr	r0, [pc, #20]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040e4:	bf18      	it	ne
 80040e6:	2000      	movne	r0, #0
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
 80040f0:	00f42400 	.word	0x00f42400
 80040f4:	08009180 	.word	0x08009180
 80040f8:	007a1200 	.word	0x007a1200

080040fc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80040fc:	2800      	cmp	r0, #0
 80040fe:	f000 822f 	beq.w	8004560 <HAL_RCC_OscConfig+0x464>
{
 8004102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004106:	4a93      	ldr	r2, [pc, #588]	@ (8004354 <HAL_RCC_OscConfig+0x258>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004108:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800410a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800410c:	68d6      	ldr	r6, [r2, #12]
 800410e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004110:	06d8      	lsls	r0, r3, #27
{
 8004112:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004114:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004118:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800411c:	d52e      	bpl.n	800417c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800411e:	2d00      	cmp	r5, #0
 8004120:	f000 8121 	beq.w	8004366 <HAL_RCC_OscConfig+0x26a>
 8004124:	2d0c      	cmp	r5, #12
 8004126:	f000 811b 	beq.w	8004360 <HAL_RCC_OscConfig+0x264>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800412a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 800412c:	4f89      	ldr	r7, [pc, #548]	@ (8004354 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8191 	beq.w	8004456 <HAL_RCC_OscConfig+0x35a>
        __HAL_RCC_MSI_ENABLE();
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800413c:	f7fe fc06 	bl	800294c <HAL_GetTick>
 8004140:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004142:	e006      	b.n	8004152 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004144:	f7fe fc02 	bl	800294c <HAL_GetTick>
 8004148:	eba0 0008 	sub.w	r0, r0, r8
 800414c:	2802      	cmp	r0, #2
 800414e:	f200 8192 	bhi.w	8004476 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	079b      	lsls	r3, r3, #30
 8004156:	d5f5      	bpl.n	8004144 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f043 0308 	orr.w	r3, r3, #8
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6a22      	ldr	r2, [r4, #32]
 8004164:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004168:	4313      	orrs	r3, r2
 800416a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69e2      	ldr	r2, [r4, #28]
 8004170:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004174:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004178:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	07d9      	lsls	r1, r3, #31
 800417e:	f100 80bf 	bmi.w	8004300 <HAL_RCC_OscConfig+0x204>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004182:	0799      	lsls	r1, r3, #30
 8004184:	d523      	bpl.n	80041ce <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004186:	2d04      	cmp	r5, #4
 8004188:	f000 8155 	beq.w	8004436 <HAL_RCC_OscConfig+0x33a>
 800418c:	2d0c      	cmp	r5, #12
 800418e:	f000 814f 	beq.w	8004430 <HAL_RCC_OscConfig+0x334>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004192:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004194:	4e6f      	ldr	r6, [pc, #444]	@ (8004354 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8188 	beq.w	80044ac <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_HSI_ENABLE();
 800419c:	6833      	ldr	r3, [r6, #0]
 800419e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80041a4:	f7fe fbd2 	bl	800294c <HAL_GetTick>
 80041a8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041aa:	e005      	b.n	80041b8 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ac:	f7fe fbce 	bl	800294c <HAL_GetTick>
 80041b0:	1bc0      	subs	r0, r0, r7
 80041b2:	2802      	cmp	r0, #2
 80041b4:	f200 815f 	bhi.w	8004476 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b8:	6833      	ldr	r3, [r6, #0]
 80041ba:	055b      	lsls	r3, r3, #21
 80041bc:	d5f6      	bpl.n	80041ac <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041be:	6873      	ldr	r3, [r6, #4]
 80041c0:	6922      	ldr	r2, [r4, #16]
 80041c2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80041c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80041ca:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	0719      	lsls	r1, r3, #28
 80041d0:	d519      	bpl.n	8004206 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041d2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80041d4:	4e5f      	ldr	r6, [pc, #380]	@ (8004354 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8116 	beq.w	8004408 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_LSI_ENABLE();
 80041dc:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80041e8:	f7fe fbb0 	bl	800294c <HAL_GetTick>
 80041ec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ee:	e005      	b.n	80041fc <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f0:	f7fe fbac 	bl	800294c <HAL_GetTick>
 80041f4:	1bc0      	subs	r0, r0, r7
 80041f6:	2802      	cmp	r0, #2
 80041f8:	f200 813d 	bhi.w	8004476 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041fc:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004200:	079a      	lsls	r2, r3, #30
 8004202:	d5f5      	bpl.n	80041f0 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	075f      	lsls	r7, r3, #29
 8004208:	d53f      	bpl.n	800428a <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800420a:	4b52      	ldr	r3, [pc, #328]	@ (8004354 <HAL_RCC_OscConfig+0x258>)
 800420c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800420e:	00d6      	lsls	r6, r2, #3
 8004210:	f100 814a 	bmi.w	80044a8 <HAL_RCC_OscConfig+0x3ac>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004214:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004216:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800421a:	659a      	str	r2, [r3, #88]	@ 0x58
 800421c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004226:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004228:	4f4b      	ldr	r7, [pc, #300]	@ (8004358 <HAL_RCC_OscConfig+0x25c>)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	05d8      	lsls	r0, r3, #23
 800422e:	f140 8199 	bpl.w	8004564 <HAL_RCC_OscConfig+0x468>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004232:	68a3      	ldr	r3, [r4, #8]
 8004234:	2b01      	cmp	r3, #1
 8004236:	f000 814b 	beq.w	80044d0 <HAL_RCC_OscConfig+0x3d4>
 800423a:	2b05      	cmp	r3, #5
 800423c:	f000 81bd 	beq.w	80045ba <HAL_RCC_OscConfig+0x4be>
 8004240:	4f44      	ldr	r7, [pc, #272]	@ (8004354 <HAL_RCC_OscConfig+0x258>)
 8004242:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800424e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004252:	f022 0204 	bic.w	r2, r2, #4
 8004256:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800425a:	2b00      	cmp	r3, #0
 800425c:	f040 813f 	bne.w	80044de <HAL_RCC_OscConfig+0x3e2>
      tickstart = HAL_GetTick();
 8004260:	f7fe fb74 	bl	800294c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004268:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800426a:	e006      	b.n	800427a <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fe fb6e 	bl	800294c <HAL_GetTick>
 8004270:	eba0 0008 	sub.w	r0, r0, r8
 8004274:	4548      	cmp	r0, r9
 8004276:	f200 80fe 	bhi.w	8004476 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800427a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800427e:	079b      	lsls	r3, r3, #30
 8004280:	d4f4      	bmi.n	800426c <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8004282:	2e00      	cmp	r6, #0
 8004284:	f040 8180 	bne.w	8004588 <HAL_RCC_OscConfig+0x48c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	069e      	lsls	r6, r3, #26
 800428c:	d518      	bpl.n	80042c0 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800428e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8004290:	4e30      	ldr	r6, [pc, #192]	@ (8004354 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8150 	beq.w	8004538 <HAL_RCC_OscConfig+0x43c>
      __HAL_RCC_HSI48_ENABLE();
 8004298:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80042a4:	f7fe fb52 	bl	800294c <HAL_GetTick>
 80042a8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042aa:	e005      	b.n	80042b8 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ac:	f7fe fb4e 	bl	800294c <HAL_GetTick>
 80042b0:	1bc0      	subs	r0, r0, r7
 80042b2:	2802      	cmp	r0, #2
 80042b4:	f200 80df 	bhi.w	8004476 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042b8:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80042bc:	0798      	lsls	r0, r3, #30
 80042be:	d5f5      	bpl.n	80042ac <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80042c2:	b1db      	cbz	r3, 80042fc <HAL_RCC_OscConfig+0x200>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	f000 8186 	beq.w	80045d6 <HAL_RCC_OscConfig+0x4da>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042ca:	2d0c      	cmp	r5, #12
 80042cc:	f000 808c 	beq.w	80043e8 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_PLL_DISABLE();
 80042d0:	4c20      	ldr	r4, [pc, #128]	@ (8004354 <HAL_RCC_OscConfig+0x258>)
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042da:	f7fe fb37 	bl	800294c <HAL_GetTick>
 80042de:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e0:	e005      	b.n	80042ee <HAL_RCC_OscConfig+0x1f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e2:	f7fe fb33 	bl	800294c <HAL_GetTick>
 80042e6:	1b40      	subs	r0, r0, r5
 80042e8:	2802      	cmp	r0, #2
 80042ea:	f200 80c4 	bhi.w	8004476 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	d4f6      	bmi.n	80042e2 <HAL_RCC_OscConfig+0x1e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042f4:	68e2      	ldr	r2, [r4, #12]
 80042f6:	4b19      	ldr	r3, [pc, #100]	@ (800435c <HAL_RCC_OscConfig+0x260>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 80042fc:	2000      	movs	r0, #0
 80042fe:	e074      	b.n	80043ea <HAL_RCC_OscConfig+0x2ee>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004300:	2d08      	cmp	r5, #8
 8004302:	d077      	beq.n	80043f4 <HAL_RCC_OscConfig+0x2f8>
 8004304:	2d0c      	cmp	r5, #12
 8004306:	d073      	beq.n	80043f0 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004308:	6863      	ldr	r3, [r4, #4]
 800430a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430e:	f000 80b6 	beq.w	800447e <HAL_RCC_OscConfig+0x382>
 8004312:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004316:	f000 8143 	beq.w	80045a0 <HAL_RCC_OscConfig+0x4a4>
 800431a:	4f0e      	ldr	r7, [pc, #56]	@ (8004354 <HAL_RCC_OscConfig+0x258>)
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004322:	603a      	str	r2, [r7, #0]
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800432a:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800432c:	2b00      	cmp	r3, #0
 800432e:	f040 80ab 	bne.w	8004488 <HAL_RCC_OscConfig+0x38c>
        tickstart = HAL_GetTick();
 8004332:	f7fe fb0b 	bl	800294c <HAL_GetTick>
 8004336:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004338:	e006      	b.n	8004348 <HAL_RCC_OscConfig+0x24c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433a:	f7fe fb07 	bl	800294c <HAL_GetTick>
 800433e:	eba0 0008 	sub.w	r0, r0, r8
 8004342:	2864      	cmp	r0, #100	@ 0x64
 8004344:	f200 8097 	bhi.w	8004476 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	0398      	lsls	r0, r3, #14
 800434c:	d4f5      	bmi.n	800433a <HAL_RCC_OscConfig+0x23e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	e717      	b.n	8004182 <HAL_RCC_OscConfig+0x86>
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000
 8004358:	40007000 	.word	0x40007000
 800435c:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004360:	2e01      	cmp	r6, #1
 8004362:	f47f aee2 	bne.w	800412a <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004366:	4ba9      	ldr	r3, [pc, #676]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	0799      	lsls	r1, r3, #30
 800436c:	d439      	bmi.n	80043e2 <HAL_RCC_OscConfig+0x2e6>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800436e:	4ba7      	ldr	r3, [pc, #668]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 8004370:	6a20      	ldr	r0, [r4, #32]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	0712      	lsls	r2, r2, #28
 8004376:	bf56      	itet	pl
 8004378:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 800437c:	681b      	ldrmi	r3, [r3, #0]
 800437e:	091b      	lsrpl	r3, r3, #4
 8004380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004384:	4298      	cmp	r0, r3
 8004386:	f200 80bf 	bhi.w	8004508 <HAL_RCC_OscConfig+0x40c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800438a:	4ba0      	ldr	r3, [pc, #640]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	f042 0208 	orr.w	r2, r2, #8
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800439a:	4302      	orrs	r2, r0
 800439c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	69e1      	ldr	r1, [r4, #28]
 80043a2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80043a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80043aa:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ac:	2d00      	cmp	r5, #0
 80043ae:	f000 80f1 	beq.w	8004594 <HAL_RCC_OscConfig+0x498>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043b2:	f7ff fe49 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 80043b6:	4b95      	ldr	r3, [pc, #596]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 80043b8:	4a95      	ldr	r2, [pc, #596]	@ (8004610 <HAL_RCC_OscConfig+0x514>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043c0:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 80043c2:	4a94      	ldr	r2, [pc, #592]	@ (8004614 <HAL_RCC_OscConfig+0x518>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 80043cc:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ce:	4a92      	ldr	r2, [pc, #584]	@ (8004618 <HAL_RCC_OscConfig+0x51c>)
 80043d0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80043d2:	f7fe fa79 	bl	80028c8 <HAL_InitTick>
        if(status != HAL_OK)
 80043d6:	b940      	cbnz	r0, 80043ea <HAL_RCC_OscConfig+0x2ee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	07d9      	lsls	r1, r3, #31
 80043dc:	f57f aed1 	bpl.w	8004182 <HAL_RCC_OscConfig+0x86>
 80043e0:	e78e      	b.n	8004300 <HAL_RCC_OscConfig+0x204>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043e2:	69a3      	ldr	r3, [r4, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1c2      	bne.n	800436e <HAL_RCC_OscConfig+0x272>
    return HAL_ERROR;
 80043e8:	2001      	movs	r0, #1
}
 80043ea:	b003      	add	sp, #12
 80043ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043f0:	2e03      	cmp	r6, #3
 80043f2:	d189      	bne.n	8004308 <HAL_RCC_OscConfig+0x20c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f4:	4a85      	ldr	r2, [pc, #532]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	0392      	lsls	r2, r2, #14
 80043fa:	f57f aec2 	bpl.w	8004182 <HAL_RCC_OscConfig+0x86>
 80043fe:	6862      	ldr	r2, [r4, #4]
 8004400:	2a00      	cmp	r2, #0
 8004402:	f47f aebe 	bne.w	8004182 <HAL_RCC_OscConfig+0x86>
 8004406:	e7ef      	b.n	80043e8 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_DISABLE();
 8004408:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800440c:	f023 0301 	bic.w	r3, r3, #1
 8004410:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004414:	f7fe fa9a 	bl	800294c <HAL_GetTick>
 8004418:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800441a:	e004      	b.n	8004426 <HAL_RCC_OscConfig+0x32a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441c:	f7fe fa96 	bl	800294c <HAL_GetTick>
 8004420:	1bc0      	subs	r0, r0, r7
 8004422:	2802      	cmp	r0, #2
 8004424:	d827      	bhi.n	8004476 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004426:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800442a:	079b      	lsls	r3, r3, #30
 800442c:	d4f6      	bmi.n	800441c <HAL_RCC_OscConfig+0x320>
 800442e:	e6e9      	b.n	8004204 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004430:	2e02      	cmp	r6, #2
 8004432:	f47f aeae 	bne.w	8004192 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004436:	4a75      	ldr	r2, [pc, #468]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	0552      	lsls	r2, r2, #21
 800443c:	d502      	bpl.n	8004444 <HAL_RCC_OscConfig+0x348>
 800443e:	68e2      	ldr	r2, [r4, #12]
 8004440:	2a00      	cmp	r2, #0
 8004442:	d0d1      	beq.n	80043e8 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	4971      	ldr	r1, [pc, #452]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 8004446:	6920      	ldr	r0, [r4, #16]
 8004448:	684a      	ldr	r2, [r1, #4]
 800444a:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 800444e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8004452:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004454:	e6bb      	b.n	80041ce <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800445e:	f7fe fa75 	bl	800294c <HAL_GetTick>
 8004462:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	0798      	lsls	r0, r3, #30
 8004468:	d5b6      	bpl.n	80043d8 <HAL_RCC_OscConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800446a:	f7fe fa6f 	bl	800294c <HAL_GetTick>
 800446e:	eba0 0008 	sub.w	r0, r0, r8
 8004472:	2802      	cmp	r0, #2
 8004474:	d9f6      	bls.n	8004464 <HAL_RCC_OscConfig+0x368>
            return HAL_TIMEOUT;
 8004476:	2003      	movs	r0, #3
}
 8004478:	b003      	add	sp, #12
 800447a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800447e:	4a63      	ldr	r2, [pc, #396]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 8004480:	6813      	ldr	r3, [r2, #0]
 8004482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004486:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004488:	f7fe fa60 	bl	800294c <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800448c:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800460c <HAL_RCC_OscConfig+0x510>
        tickstart = HAL_GetTick();
 8004490:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004492:	e004      	b.n	800449e <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004494:	f7fe fa5a 	bl	800294c <HAL_GetTick>
 8004498:	1bc0      	subs	r0, r0, r7
 800449a:	2864      	cmp	r0, #100	@ 0x64
 800449c:	d8eb      	bhi.n	8004476 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800449e:	f8d8 3000 	ldr.w	r3, [r8]
 80044a2:	039b      	lsls	r3, r3, #14
 80044a4:	d5f6      	bpl.n	8004494 <HAL_RCC_OscConfig+0x398>
 80044a6:	e752      	b.n	800434e <HAL_RCC_OscConfig+0x252>
    FlagStatus       pwrclkchanged = RESET;
 80044a8:	2600      	movs	r6, #0
 80044aa:	e6bd      	b.n	8004228 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80044ac:	6833      	ldr	r3, [r6, #0]
 80044ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044b2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80044b4:	f7fe fa4a 	bl	800294c <HAL_GetTick>
 80044b8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044ba:	e004      	b.n	80044c6 <HAL_RCC_OscConfig+0x3ca>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044bc:	f7fe fa46 	bl	800294c <HAL_GetTick>
 80044c0:	1bc0      	subs	r0, r0, r7
 80044c2:	2802      	cmp	r0, #2
 80044c4:	d8d7      	bhi.n	8004476 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c6:	6833      	ldr	r3, [r6, #0]
 80044c8:	0558      	lsls	r0, r3, #21
 80044ca:	d4f7      	bmi.n	80044bc <HAL_RCC_OscConfig+0x3c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	e67e      	b.n	80041ce <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d0:	4a4e      	ldr	r2, [pc, #312]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 80044d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80044de:	f7fe fa35 	bl	800294c <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e2:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 800460c <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 80044e6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ec:	e004      	b.n	80044f8 <HAL_RCC_OscConfig+0x3fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ee:	f7fe fa2d 	bl	800294c <HAL_GetTick>
 80044f2:	1bc0      	subs	r0, r0, r7
 80044f4:	4548      	cmp	r0, r9
 80044f6:	d8be      	bhi.n	8004476 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f8:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 80044fc:	079a      	lsls	r2, r3, #30
 80044fe:	d5f6      	bpl.n	80044ee <HAL_RCC_OscConfig+0x3f2>
    if(pwrclkchanged == SET)
 8004500:	2e00      	cmp	r6, #0
 8004502:	f43f aec1 	beq.w	8004288 <HAL_RCC_OscConfig+0x18c>
 8004506:	e03f      	b.n	8004588 <HAL_RCC_OscConfig+0x48c>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004508:	f7ff fd58 	bl	8003fbc <RCC_SetFlashLatencyFromMSIRange>
 800450c:	2800      	cmp	r0, #0
 800450e:	f47f af6b 	bne.w	80043e8 <HAL_RCC_OscConfig+0x2ec>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004512:	4b3e      	ldr	r3, [pc, #248]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	f042 0208 	orr.w	r2, r2, #8
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	6a21      	ldr	r1, [r4, #32]
 8004520:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	69e1      	ldr	r1, [r4, #28]
 800452c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004530:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	e73c      	b.n	80043b2 <HAL_RCC_OscConfig+0x2b6>
      __HAL_RCC_HSI48_DISABLE();
 8004538:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004544:	f7fe fa02 	bl	800294c <HAL_GetTick>
 8004548:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800454a:	e004      	b.n	8004556 <HAL_RCC_OscConfig+0x45a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800454c:	f7fe f9fe 	bl	800294c <HAL_GetTick>
 8004550:	1bc0      	subs	r0, r0, r7
 8004552:	2802      	cmp	r0, #2
 8004554:	d88f      	bhi.n	8004476 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004556:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800455a:	0799      	lsls	r1, r3, #30
 800455c:	d4f6      	bmi.n	800454c <HAL_RCC_OscConfig+0x450>
 800455e:	e6af      	b.n	80042c0 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 8004560:	2001      	movs	r0, #1
}
 8004562:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800456c:	f7fe f9ee 	bl	800294c <HAL_GetTick>
 8004570:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	05d9      	lsls	r1, r3, #23
 8004576:	f53f ae5c 	bmi.w	8004232 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457a:	f7fe f9e7 	bl	800294c <HAL_GetTick>
 800457e:	eba0 0008 	sub.w	r0, r0, r8
 8004582:	2802      	cmp	r0, #2
 8004584:	d9f5      	bls.n	8004572 <HAL_RCC_OscConfig+0x476>
 8004586:	e776      	b.n	8004476 <HAL_RCC_OscConfig+0x37a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004588:	4a20      	ldr	r2, [pc, #128]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 800458a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800458c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004590:	6593      	str	r3, [r2, #88]	@ 0x58
 8004592:	e679      	b.n	8004288 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004594:	f7ff fd12 	bl	8003fbc <RCC_SetFlashLatencyFromMSIRange>
 8004598:	2800      	cmp	r0, #0
 800459a:	f43f af0a 	beq.w	80043b2 <HAL_RCC_OscConfig+0x2b6>
 800459e:	e723      	b.n	80043e8 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045a4:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80045b6:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045b8:	e766      	b.n	8004488 <HAL_RCC_OscConfig+0x38c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ba:	4b14      	ldr	r3, [pc, #80]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 80045bc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80045c0:	f042 0204 	orr.w	r2, r2, #4
 80045c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80045c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80045cc:	f042 0201 	orr.w	r2, r2, #1
 80045d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d4:	e783      	b.n	80044de <HAL_RCC_OscConfig+0x3e2>
      pll_config = RCC->PLLCFGR;
 80045d6:	4e0d      	ldr	r6, [pc, #52]	@ (800460c <HAL_RCC_OscConfig+0x510>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 80045da:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045dc:	f003 0103 	and.w	r1, r3, #3
 80045e0:	4291      	cmp	r1, r2
 80045e2:	d055      	beq.n	8004690 <HAL_RCC_OscConfig+0x594>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045e4:	2d0c      	cmp	r5, #12
 80045e6:	f43f aeff 	beq.w	80043e8 <HAL_RCC_OscConfig+0x2ec>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045ea:	4d08      	ldr	r5, [pc, #32]	@ (800460c <HAL_RCC_OscConfig+0x510>)
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	f53f aefa 	bmi.w	80043e8 <HAL_RCC_OscConfig+0x2ec>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	f53f aef6 	bmi.w	80043e8 <HAL_RCC_OscConfig+0x2ec>
            __HAL_RCC_PLL_DISABLE();
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004602:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8004604:	f7fe f9a2 	bl	800294c <HAL_GetTick>
 8004608:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800460a:	e00d      	b.n	8004628 <HAL_RCC_OscConfig+0x52c>
 800460c:	40021000 	.word	0x40021000
 8004610:	080091b8 	.word	0x080091b8
 8004614:	20000408 	.word	0x20000408
 8004618:	20000400 	.word	0x20000400
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7fe f996 	bl	800294c <HAL_GetTick>
 8004620:	1b80      	subs	r0, r0, r6
 8004622:	2802      	cmp	r0, #2
 8004624:	f63f af27 	bhi.w	8004476 <HAL_RCC_OscConfig+0x37a>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	019f      	lsls	r7, r3, #6
 800462c:	d4f6      	bmi.n	800461c <HAL_RCC_OscConfig+0x520>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800462e:	68e9      	ldr	r1, [r5, #12]
 8004630:	4b36      	ldr	r3, [pc, #216]	@ (800470c <HAL_RCC_OscConfig+0x610>)
 8004632:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004634:	6b20      	ldr	r0, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004636:	4e36      	ldr	r6, [pc, #216]	@ (8004710 <HAL_RCC_OscConfig+0x614>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004638:	400b      	ands	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 8004640:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004644:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004648:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 800464c:	3801      	subs	r0, #1
 800464e:	0849      	lsrs	r1, r1, #1
 8004650:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004654:	3901      	subs	r1, #1
 8004656:	0852      	lsrs	r2, r2, #1
 8004658:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800465c:	3a01      	subs	r2, #1
 800465e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004662:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8004664:	682b      	ldr	r3, [r5, #0]
 8004666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800466a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800466c:	68eb      	ldr	r3, [r5, #12]
 800466e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004672:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8004674:	f7fe f96a 	bl	800294c <HAL_GetTick>
 8004678:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800467a:	e005      	b.n	8004688 <HAL_RCC_OscConfig+0x58c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467c:	f7fe f966 	bl	800294c <HAL_GetTick>
 8004680:	1b00      	subs	r0, r0, r4
 8004682:	2802      	cmp	r0, #2
 8004684:	f63f aef7 	bhi.w	8004476 <HAL_RCC_OscConfig+0x37a>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004688:	6833      	ldr	r3, [r6, #0]
 800468a:	0198      	lsls	r0, r3, #6
 800468c:	d5f6      	bpl.n	800467c <HAL_RCC_OscConfig+0x580>
 800468e:	e635      	b.n	80042fc <HAL_RCC_OscConfig+0x200>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004690:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004692:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004696:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004698:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800469c:	d1a2      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800469e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046a4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80046a8:	d19c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046aa:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80046ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046b0:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80046b4:	d196      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80046b8:	0852      	lsrs	r2, r2, #1
 80046ba:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80046be:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046c0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80046c4:	d18e      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046c6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80046c8:	0852      	lsrs	r2, r2, #1
 80046ca:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80046ce:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80046d4:	d186      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4e8>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d6:	6833      	ldr	r3, [r6, #0]
 80046d8:	0199      	lsls	r1, r3, #6
 80046da:	f53f ae0f 	bmi.w	80042fc <HAL_RCC_OscConfig+0x200>
          __HAL_RCC_PLL_ENABLE();
 80046de:	6833      	ldr	r3, [r6, #0]
 80046e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046e4:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046e6:	68f3      	ldr	r3, [r6, #12]
 80046e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ec:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 80046ee:	f7fe f92d 	bl	800294c <HAL_GetTick>
 80046f2:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f4:	e005      	b.n	8004702 <HAL_RCC_OscConfig+0x606>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f6:	f7fe f929 	bl	800294c <HAL_GetTick>
 80046fa:	1b03      	subs	r3, r0, r4
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	f63f aeba 	bhi.w	8004476 <HAL_RCC_OscConfig+0x37a>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004702:	6833      	ldr	r3, [r6, #0]
 8004704:	019a      	lsls	r2, r3, #6
 8004706:	d5f6      	bpl.n	80046f6 <HAL_RCC_OscConfig+0x5fa>
 8004708:	e5f8      	b.n	80042fc <HAL_RCC_OscConfig+0x200>
 800470a:	bf00      	nop
 800470c:	019d808c 	.word	0x019d808c
 8004710:	40021000 	.word	0x40021000

08004714 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004714:	2800      	cmp	r0, #0
 8004716:	f000 80a0 	beq.w	800485a <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800471a:	4a54      	ldr	r2, [pc, #336]	@ (800486c <HAL_RCC_ClockConfig+0x158>)
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	428b      	cmp	r3, r1
{
 8004724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004728:	460d      	mov	r5, r1
 800472a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	d20c      	bcs.n	8004748 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	f023 0307 	bic.w	r3, r3, #7
 8004734:	430b      	orrs	r3, r1
 8004736:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004738:	6813      	ldr	r3, [r2, #0]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	428b      	cmp	r3, r1
 8004740:	d002      	beq.n	8004748 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004742:	2001      	movs	r0, #1
}
 8004744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474c:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004750:	d570      	bpl.n	8004834 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004752:	4e47      	ldr	r6, [pc, #284]	@ (8004870 <HAL_RCC_ClockConfig+0x15c>)
 8004754:	68a0      	ldr	r0, [r4, #8]
 8004756:	68b1      	ldr	r1, [r6, #8]
 8004758:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 800475c:	4288      	cmp	r0, r1
 800475e:	d904      	bls.n	800476a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004760:	68b1      	ldr	r1, [r6, #8]
 8004762:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 8004766:	4301      	orrs	r1, r0
 8004768:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800476a:	b332      	cbz	r2, 80047ba <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800476c:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476e:	4b40      	ldr	r3, [pc, #256]	@ (8004870 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004770:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004772:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004774:	d065      	beq.n	8004842 <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004776:	2a02      	cmp	r2, #2
 8004778:	d06c      	beq.n	8004854 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800477a:	2a00      	cmp	r2, #0
 800477c:	d171      	bne.n	8004862 <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800477e:	079e      	lsls	r6, r3, #30
 8004780:	d5df      	bpl.n	8004742 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004782:	4e3b      	ldr	r6, [pc, #236]	@ (8004870 <HAL_RCC_ClockConfig+0x15c>)
 8004784:	68b3      	ldr	r3, [r6, #8]
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	4313      	orrs	r3, r2
 800478c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800478e:	f7fe f8dd 	bl	800294c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004792:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004796:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004798:	e004      	b.n	80047a4 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479a:	f7fe f8d7 	bl	800294c <HAL_GetTick>
 800479e:	1bc0      	subs	r0, r0, r7
 80047a0:	4540      	cmp	r0, r8
 80047a2:	d85c      	bhi.n	800485e <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a4:	68b3      	ldr	r3, [r6, #8]
 80047a6:	6862      	ldr	r2, [r4, #4]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047b0:	d1f3      	bne.n	800479a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	0799      	lsls	r1, r3, #30
 80047b6:	d506      	bpl.n	80047c6 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047b8:	68a0      	ldr	r0, [r4, #8]
 80047ba:	492d      	ldr	r1, [pc, #180]	@ (8004870 <HAL_RCC_ClockConfig+0x15c>)
 80047bc:	688a      	ldr	r2, [r1, #8]
 80047be:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80047c2:	4282      	cmp	r2, r0
 80047c4:	d840      	bhi.n	8004848 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047c6:	4929      	ldr	r1, [pc, #164]	@ (800486c <HAL_RCC_ClockConfig+0x158>)
 80047c8:	680a      	ldr	r2, [r1, #0]
 80047ca:	f002 0207 	and.w	r2, r2, #7
 80047ce:	42aa      	cmp	r2, r5
 80047d0:	d909      	bls.n	80047e6 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	680a      	ldr	r2, [r1, #0]
 80047d4:	f022 0207 	bic.w	r2, r2, #7
 80047d8:	432a      	orrs	r2, r5
 80047da:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047dc:	680a      	ldr	r2, [r1, #0]
 80047de:	f002 0207 	and.w	r2, r2, #7
 80047e2:	42aa      	cmp	r2, r5
 80047e4:	d1ad      	bne.n	8004742 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e6:	075a      	lsls	r2, r3, #29
 80047e8:	d506      	bpl.n	80047f8 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ea:	4921      	ldr	r1, [pc, #132]	@ (8004870 <HAL_RCC_ClockConfig+0x15c>)
 80047ec:	68e0      	ldr	r0, [r4, #12]
 80047ee:	688a      	ldr	r2, [r1, #8]
 80047f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047f4:	4302      	orrs	r2, r0
 80047f6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	071b      	lsls	r3, r3, #28
 80047fa:	d507      	bpl.n	800480c <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004870 <HAL_RCC_ClockConfig+0x15c>)
 80047fe:	6921      	ldr	r1, [r4, #16]
 8004800:	6893      	ldr	r3, [r2, #8]
 8004802:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004806:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800480a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800480c:	f7ff fc1c 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8004810:	4a17      	ldr	r2, [pc, #92]	@ (8004870 <HAL_RCC_ClockConfig+0x15c>)
 8004812:	4c18      	ldr	r4, [pc, #96]	@ (8004874 <HAL_RCC_ClockConfig+0x160>)
 8004814:	6892      	ldr	r2, [r2, #8]
 8004816:	4918      	ldr	r1, [pc, #96]	@ (8004878 <HAL_RCC_ClockConfig+0x164>)
 8004818:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800481c:	4603      	mov	r3, r0
 800481e:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8004820:	4816      	ldr	r0, [pc, #88]	@ (800487c <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004822:	f002 021f 	and.w	r2, r2, #31
 8004826:	40d3      	lsrs	r3, r2
}
 8004828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800482c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800482e:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8004830:	f7fe b84a 	b.w	80028c8 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004834:	2a00      	cmp	r2, #0
 8004836:	d0c6      	beq.n	80047c6 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004838:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483a:	4b0d      	ldr	r3, [pc, #52]	@ (8004870 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800483c:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004840:	d199      	bne.n	8004776 <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004842:	019b      	lsls	r3, r3, #6
 8004844:	d49d      	bmi.n	8004782 <HAL_RCC_ClockConfig+0x6e>
 8004846:	e77c      	b.n	8004742 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004848:	688a      	ldr	r2, [r1, #8]
 800484a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800484e:	4302      	orrs	r2, r0
 8004850:	608a      	str	r2, [r1, #8]
 8004852:	e7b8      	b.n	80047c6 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004854:	039f      	lsls	r7, r3, #14
 8004856:	d494      	bmi.n	8004782 <HAL_RCC_ClockConfig+0x6e>
 8004858:	e773      	b.n	8004742 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800485a:	2001      	movs	r0, #1
}
 800485c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800485e:	2003      	movs	r0, #3
 8004860:	e770      	b.n	8004744 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004862:	0558      	lsls	r0, r3, #21
 8004864:	f57f af6d 	bpl.w	8004742 <HAL_RCC_ClockConfig+0x2e>
 8004868:	e78b      	b.n	8004782 <HAL_RCC_ClockConfig+0x6e>
 800486a:	bf00      	nop
 800486c:	40022000 	.word	0x40022000
 8004870:	40021000 	.word	0x40021000
 8004874:	080091b8 	.word	0x080091b8
 8004878:	20000400 	.word	0x20000400
 800487c:	20000408 	.word	0x20000408

08004880 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8004880:	4b01      	ldr	r3, [pc, #4]	@ (8004888 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000400 	.word	0x20000400

0800488c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800488c:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 800488e:	4a06      	ldr	r2, [pc, #24]	@ (80048a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004890:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004892:	4906      	ldr	r1, [pc, #24]	@ (80048ac <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004894:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004898:	6808      	ldr	r0, [r1, #0]
 800489a:	5cd3      	ldrb	r3, [r2, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
}
 80048a0:	40d8      	lsrs	r0, r3
 80048a2:	4770      	bx	lr
 80048a4:	40021000 	.word	0x40021000
 80048a8:	080091b0 	.word	0x080091b0
 80048ac:	20000400 	.word	0x20000400

080048b0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048b0:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80048b2:	4a06      	ldr	r2, [pc, #24]	@ (80048cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80048b4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80048b6:	4906      	ldr	r1, [pc, #24]	@ (80048d0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048b8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80048bc:	6808      	ldr	r0, [r1, #0]
 80048be:	5cd3      	ldrb	r3, [r2, r3]
 80048c0:	f003 031f 	and.w	r3, r3, #31
}
 80048c4:	40d8      	lsrs	r0, r3
 80048c6:	4770      	bx	lr
 80048c8:	40021000 	.word	0x40021000
 80048cc:	080091b0 	.word	0x080091b0
 80048d0:	20000400 	.word	0x20000400

080048d4 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048d4:	4a45      	ldr	r2, [pc, #276]	@ (80049ec <RCCEx_PLLSAI1_Config+0x118>)
{
 80048d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048d8:	68d6      	ldr	r6, [r2, #12]
{
 80048da:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048dc:	07b1      	lsls	r1, r6, #30
{
 80048de:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048e0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048e2:	d006      	beq.n	80048f2 <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048e4:	68d1      	ldr	r1, [r2, #12]
 80048e6:	f001 0103 	and.w	r1, r1, #3
 80048ea:	4281      	cmp	r1, r0
 80048ec:	d04b      	beq.n	8004986 <RCCEx_PLLSAI1_Config+0xb2>
 80048ee:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80048f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80048f2:	2802      	cmp	r0, #2
 80048f4:	d058      	beq.n	80049a8 <RCCEx_PLLSAI1_Config+0xd4>
 80048f6:	2803      	cmp	r0, #3
 80048f8:	d04f      	beq.n	800499a <RCCEx_PLLSAI1_Config+0xc6>
 80048fa:	2801      	cmp	r0, #1
 80048fc:	d1f7      	bne.n	80048ee <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	0793      	lsls	r3, r2, #30
 8004902:	d5f5      	bpl.n	80048f0 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004904:	4939      	ldr	r1, [pc, #228]	@ (80049ec <RCCEx_PLLSAI1_Config+0x118>)
 8004906:	68ca      	ldr	r2, [r1, #12]
 8004908:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800490c:	ea42 0300 	orr.w	r3, r2, r0
 8004910:	6862      	ldr	r2, [r4, #4]
 8004912:	3a01      	subs	r2, #1
 8004914:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004918:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 800491a:	4e34      	ldr	r6, [pc, #208]	@ (80049ec <RCCEx_PLLSAI1_Config+0x118>)
 800491c:	6833      	ldr	r3, [r6, #0]
 800491e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004922:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004924:	f7fe f812 	bl	800294c <HAL_GetTick>
 8004928:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800492a:	e004      	b.n	8004936 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800492c:	f7fe f80e 	bl	800294c <HAL_GetTick>
 8004930:	1bc3      	subs	r3, r0, r7
 8004932:	2b02      	cmp	r3, #2
 8004934:	d83c      	bhi.n	80049b0 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004936:	6833      	ldr	r3, [r6, #0]
 8004938:	011a      	lsls	r2, r3, #4
 800493a:	d4f7      	bmi.n	800492c <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800493c:	68a3      	ldr	r3, [r4, #8]
 800493e:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8004940:	2d00      	cmp	r5, #0
 8004942:	d137      	bne.n	80049b4 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004944:	6932      	ldr	r2, [r6, #16]
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 800494c:	ea41 63c3 	orr.w	r3, r1, r3, lsl #27
 8004950:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8004954:	4313      	orrs	r3, r2
 8004956:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004958:	4d24      	ldr	r5, [pc, #144]	@ (80049ec <RCCEx_PLLSAI1_Config+0x118>)
 800495a:	682b      	ldr	r3, [r5, #0]
 800495c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004960:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004962:	f7fd fff3 	bl	800294c <HAL_GetTick>
 8004966:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004968:	e004      	b.n	8004974 <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800496a:	f7fd ffef 	bl	800294c <HAL_GetTick>
 800496e:	1b80      	subs	r0, r0, r6
 8004970:	2802      	cmp	r0, #2
 8004972:	d81d      	bhi.n	80049b0 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	d5f7      	bpl.n	800496a <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800497a:	692b      	ldr	r3, [r5, #16]
 800497c:	69a2      	ldr	r2, [r4, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	2000      	movs	r0, #0
 8004982:	612b      	str	r3, [r5, #16]
}
 8004984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004986:	2900      	cmp	r1, #0
 8004988:	d0b1      	beq.n	80048ee <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800498a:	68d3      	ldr	r3, [r2, #12]
       ||
 800498c:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800498e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004992:	3301      	adds	r3, #1
       ||
 8004994:	4293      	cmp	r3, r2
 8004996:	d1aa      	bne.n	80048ee <RCCEx_PLLSAI1_Config+0x1a>
 8004998:	e7bf      	b.n	800491a <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800499a:	6811      	ldr	r1, [r2, #0]
 800499c:	038e      	lsls	r6, r1, #14
 800499e:	d4b1      	bmi.n	8004904 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049a0:	6812      	ldr	r2, [r2, #0]
 80049a2:	0351      	lsls	r1, r2, #13
 80049a4:	d5a3      	bpl.n	80048ee <RCCEx_PLLSAI1_Config+0x1a>
 80049a6:	e7ad      	b.n	8004904 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	0557      	lsls	r7, r2, #21
 80049ac:	d59f      	bpl.n	80048ee <RCCEx_PLLSAI1_Config+0x1a>
 80049ae:	e7a9      	b.n	8004904 <RCCEx_PLLSAI1_Config+0x30>
 80049b0:	2003      	movs	r0, #3
}
 80049b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 80049b4:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049b6:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 80049b8:	d00b      	beq.n	80049d2 <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049ba:	6962      	ldr	r2, [r4, #20]
 80049bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049c0:	0852      	lsrs	r2, r2, #1
 80049c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049c6:	3a01      	subs	r2, #1
 80049c8:	430b      	orrs	r3, r1
 80049ca:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80049ce:	6133      	str	r3, [r6, #16]
 80049d0:	e7c2      	b.n	8004958 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049d2:	6922      	ldr	r2, [r4, #16]
 80049d4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80049d8:	0852      	lsrs	r2, r2, #1
 80049da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049de:	3a01      	subs	r2, #1
 80049e0:	430b      	orrs	r3, r1
 80049e2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80049e6:	6133      	str	r3, [r6, #16]
 80049e8:	e7b6      	b.n	8004958 <RCCEx_PLLSAI1_Config+0x84>
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000

080049f0 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049f0:	4a3e      	ldr	r2, [pc, #248]	@ (8004aec <RCCEx_PLLSAI2_Config+0xfc>)
{
 80049f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049f4:	68d6      	ldr	r6, [r2, #12]
{
 80049f6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049f8:	07b1      	lsls	r1, r6, #30
{
 80049fa:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049fc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049fe:	d006      	beq.n	8004a0e <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a00:	68d1      	ldr	r1, [r2, #12]
 8004a02:	f001 0103 	and.w	r1, r1, #3
 8004a06:	4281      	cmp	r1, r0
 8004a08:	d04b      	beq.n	8004aa2 <RCCEx_PLLSAI2_Config+0xb2>
 8004a0a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8004a0e:	2802      	cmp	r0, #2
 8004a10:	d058      	beq.n	8004ac4 <RCCEx_PLLSAI2_Config+0xd4>
 8004a12:	2803      	cmp	r0, #3
 8004a14:	d04f      	beq.n	8004ab6 <RCCEx_PLLSAI2_Config+0xc6>
 8004a16:	2801      	cmp	r0, #1
 8004a18:	d1f7      	bne.n	8004a0a <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	0793      	lsls	r3, r2, #30
 8004a1e:	d5f5      	bpl.n	8004a0c <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a20:	4932      	ldr	r1, [pc, #200]	@ (8004aec <RCCEx_PLLSAI2_Config+0xfc>)
 8004a22:	68ca      	ldr	r2, [r1, #12]
 8004a24:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8004a28:	ea42 0300 	orr.w	r3, r2, r0
 8004a2c:	6862      	ldr	r2, [r4, #4]
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004a34:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a36:	4e2d      	ldr	r6, [pc, #180]	@ (8004aec <RCCEx_PLLSAI2_Config+0xfc>)
 8004a38:	6833      	ldr	r3, [r6, #0]
 8004a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a3e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004a40:	f7fd ff84 	bl	800294c <HAL_GetTick>
 8004a44:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a46:	e004      	b.n	8004a52 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a48:	f7fd ff80 	bl	800294c <HAL_GetTick>
 8004a4c:	1bc3      	subs	r3, r0, r7
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d83c      	bhi.n	8004acc <RCCEx_PLLSAI2_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a52:	6833      	ldr	r3, [r6, #0]
 8004a54:	009a      	lsls	r2, r3, #2
 8004a56:	d4f7      	bmi.n	8004a48 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a58:	68a3      	ldr	r3, [r4, #8]
 8004a5a:	021b      	lsls	r3, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8004a5c:	2d00      	cmp	r5, #0
 8004a5e:	d137      	bne.n	8004ad0 <RCCEx_PLLSAI2_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a60:	6972      	ldr	r2, [r6, #20]
 8004a62:	68e1      	ldr	r1, [r4, #12]
 8004a64:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 8004a68:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8004a6c:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8004a70:	4313      	orrs	r3, r2
 8004a72:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a74:	4d1d      	ldr	r5, [pc, #116]	@ (8004aec <RCCEx_PLLSAI2_Config+0xfc>)
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a7c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004a7e:	f7fd ff65 	bl	800294c <HAL_GetTick>
 8004a82:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a84:	e004      	b.n	8004a90 <RCCEx_PLLSAI2_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a86:	f7fd ff61 	bl	800294c <HAL_GetTick>
 8004a8a:	1b80      	subs	r0, r0, r6
 8004a8c:	2802      	cmp	r0, #2
 8004a8e:	d81d      	bhi.n	8004acc <RCCEx_PLLSAI2_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	d5f7      	bpl.n	8004a86 <RCCEx_PLLSAI2_Config+0x96>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a96:	696b      	ldr	r3, [r5, #20]
 8004a98:	6962      	ldr	r2, [r4, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	616b      	str	r3, [r5, #20]
}
 8004aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004aa2:	2900      	cmp	r1, #0
 8004aa4:	d0b1      	beq.n	8004a0a <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004aa6:	68d3      	ldr	r3, [r2, #12]
       ||
 8004aa8:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004aaa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004aae:	3301      	adds	r3, #1
       ||
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d1aa      	bne.n	8004a0a <RCCEx_PLLSAI2_Config+0x1a>
 8004ab4:	e7bf      	b.n	8004a36 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ab6:	6811      	ldr	r1, [r2, #0]
 8004ab8:	038e      	lsls	r6, r1, #14
 8004aba:	d4b1      	bmi.n	8004a20 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	0351      	lsls	r1, r2, #13
 8004ac0:	d5a3      	bpl.n	8004a0a <RCCEx_PLLSAI2_Config+0x1a>
 8004ac2:	e7ad      	b.n	8004a20 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	0557      	lsls	r7, r2, #21
 8004ac8:	d59f      	bpl.n	8004a0a <RCCEx_PLLSAI2_Config+0x1a>
 8004aca:	e7a9      	b.n	8004a20 <RCCEx_PLLSAI2_Config+0x30>
 8004acc:	2003      	movs	r0, #3
}
 8004ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ad0:	6972      	ldr	r2, [r6, #20]
 8004ad2:	6921      	ldr	r1, [r4, #16]
 8004ad4:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8004ad8:	0849      	lsrs	r1, r1, #1
 8004ada:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8004ade:	3901      	subs	r1, #1
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8004ae6:	6172      	str	r2, [r6, #20]
 8004ae8:	e7c4      	b.n	8004a74 <RCCEx_PLLSAI2_Config+0x84>
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000

08004af0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004af4:	6803      	ldr	r3, [r0, #0]
 8004af6:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 8004afa:	b083      	sub	sp, #12
 8004afc:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004afe:	d016      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b00:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004b02:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8004b06:	f000 81e8 	beq.w	8004eda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004b0a:	f200 8123 	bhi.w	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004b0e:	2900      	cmp	r1, #0
 8004b10:	f000 81b7 	beq.w	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004b14:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8004b18:	f040 81d1 	bne.w	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	3020      	adds	r0, #32
 8004b20:	f7ff ff66 	bl	80049f0 <RCCEx_PLLSAI2_Config>
 8004b24:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b26:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004b28:	2e00      	cmp	r6, #0
 8004b2a:	f000 81e3 	beq.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x404>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b2e:	04d8      	lsls	r0, r3, #19
 8004b30:	f140 8121 	bpl.w	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004b34:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8004b36:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8004b3a:	f000 81d4 	beq.w	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004b3e:	f200 817f 	bhi.w	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004b42:	2900      	cmp	r1, #0
 8004b44:	f000 81a6 	beq.w	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004b48:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004b4c:	f040 81b9 	bne.w	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b50:	2100      	movs	r1, #0
 8004b52:	f104 0020 	add.w	r0, r4, #32
 8004b56:	f7ff ff4b 	bl	80049f0 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b5a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b5c:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8004b5e:	2f00      	cmp	r7, #0
 8004b60:	f040 8175 	bne.w	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b64:	49b4      	ldr	r1, [pc, #720]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004b66:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8004b68:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004b6c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004b70:	4302      	orrs	r2, r0
 8004b72:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b76:	0399      	lsls	r1, r3, #14
 8004b78:	f100 8101 	bmi.w	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b7c:	07d9      	lsls	r1, r3, #31
 8004b7e:	d508      	bpl.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b80:	49ad      	ldr	r1, [pc, #692]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004b82:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004b84:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004b88:	f022 0203 	bic.w	r2, r2, #3
 8004b8c:	4302      	orrs	r2, r0
 8004b8e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b92:	079a      	lsls	r2, r3, #30
 8004b94:	d508      	bpl.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b96:	49a8      	ldr	r1, [pc, #672]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004b98:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004b9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004b9e:	f022 020c 	bic.w	r2, r2, #12
 8004ba2:	4302      	orrs	r2, r0
 8004ba4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ba8:	075f      	lsls	r7, r3, #29
 8004baa:	d508      	bpl.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bac:	49a2      	ldr	r1, [pc, #648]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004bae:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004bb0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004bb4:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8004bb8:	4302      	orrs	r2, r0
 8004bba:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bbe:	071d      	lsls	r5, r3, #28
 8004bc0:	d508      	bpl.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bc2:	499d      	ldr	r1, [pc, #628]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004bc4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004bc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004bca:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004bce:	4302      	orrs	r2, r0
 8004bd0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bd4:	06d8      	lsls	r0, r3, #27
 8004bd6:	d508      	bpl.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bd8:	4997      	ldr	r1, [pc, #604]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004bda:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004bdc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004be0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004be4:	4302      	orrs	r2, r0
 8004be6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bea:	0699      	lsls	r1, r3, #26
 8004bec:	d508      	bpl.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bee:	4992      	ldr	r1, [pc, #584]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004bf0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004bf2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004bf6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004bfa:	4302      	orrs	r2, r0
 8004bfc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c00:	059a      	lsls	r2, r3, #22
 8004c02:	d508      	bpl.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c04:	498c      	ldr	r1, [pc, #560]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c06:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004c08:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c0c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004c10:	4302      	orrs	r2, r0
 8004c12:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c16:	055f      	lsls	r7, r3, #21
 8004c18:	d508      	bpl.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c1a:	4987      	ldr	r1, [pc, #540]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c1c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8004c1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c22:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004c26:	4302      	orrs	r2, r0
 8004c28:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c2c:	065d      	lsls	r5, r3, #25
 8004c2e:	d508      	bpl.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c30:	4981      	ldr	r1, [pc, #516]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c32:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004c34:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c38:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004c3c:	4302      	orrs	r2, r0
 8004c3e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c42:	0618      	lsls	r0, r3, #24
 8004c44:	d508      	bpl.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c46:	497c      	ldr	r1, [pc, #496]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c48:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004c4a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c4e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004c52:	4302      	orrs	r2, r0
 8004c54:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c58:	05d9      	lsls	r1, r3, #23
 8004c5a:	d508      	bpl.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c5c:	4976      	ldr	r1, [pc, #472]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c60:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c64:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004c68:	4302      	orrs	r2, r0
 8004c6a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c6e:	02da      	lsls	r2, r3, #11
 8004c70:	d508      	bpl.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c72:	4971      	ldr	r1, [pc, #452]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c74:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004c76:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 8004c7a:	f022 0203 	bic.w	r2, r2, #3
 8004c7e:	4302      	orrs	r2, r0
 8004c80:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c84:	049f      	lsls	r7, r3, #18
 8004c86:	d510      	bpl.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c88:	496b      	ldr	r1, [pc, #428]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c8a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004c8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004c90:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004c94:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c96:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c9a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c9e:	f000 8104 	beq.w	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ca2:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004ca6:	f000 8132 	beq.w	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004caa:	031d      	lsls	r5, r3, #12
 8004cac:	d510      	bpl.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cae:	4962      	ldr	r1, [pc, #392]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004cb0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004cb2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004cb6:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004cba:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cbc:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cc0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cc4:	f000 80f6 	beq.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cc8:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004ccc:	f000 8129 	beq.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x432>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cd0:	0358      	lsls	r0, r3, #13
 8004cd2:	d510      	bpl.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cd4:	4958      	ldr	r1, [pc, #352]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004cd6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8004cd8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004cdc:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004ce0:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ce2:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ce6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cea:	f000 80d9 	beq.w	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cee:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004cf2:	f000 8120 	beq.w	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x446>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cf6:	0459      	lsls	r1, r3, #17
 8004cf8:	d510      	bpl.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cfa:	484f      	ldr	r0, [pc, #316]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004cfc:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004cfe:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8004d02:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d06:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d08:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d0c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d10:	f000 80d9 	beq.w	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d14:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004d18:	f000 80ee 	beq.w	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d1c:	041a      	lsls	r2, r3, #16
 8004d1e:	d509      	bpl.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d20:	4945      	ldr	r1, [pc, #276]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d22:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8004d26:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d2a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8004d2e:	4302      	orrs	r2, r0
 8004d30:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d34:	03db      	lsls	r3, r3, #15
 8004d36:	d509      	bpl.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d38:	4a3f      	ldr	r2, [pc, #252]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d3a:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8004d3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004d42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d46:	430b      	orrs	r3, r1
 8004d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	b003      	add	sp, #12
 8004d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d54:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8004d58:	f040 80b1 	bne.w	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d5c:	4836      	ldr	r0, [pc, #216]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d5e:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8004d62:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004d66:	430a      	orrs	r2, r1
 8004d68:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d6c:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d6e:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d72:	f53f aedf 	bmi.w	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004d76:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d78:	0399      	lsls	r1, r3, #14
 8004d7a:	f57f aeff 	bpl.w	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d82:	00d2      	lsls	r2, r2, #3
 8004d84:	d565      	bpl.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x362>
    FlagStatus       pwrclkchanged = RESET;
 8004d86:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d8a:	4d2c      	ldr	r5, [pc, #176]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d92:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004d94:	f7fd fdda 	bl	800294c <HAL_GetTick>
 8004d98:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d9a:	e005      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9c:	f7fd fdd6 	bl	800294c <HAL_GetTick>
 8004da0:	eba0 0309 	sub.w	r3, r0, r9
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d860      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	05db      	lsls	r3, r3, #23
 8004dac:	d5f6      	bpl.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    if(ret == HAL_OK)
 8004dae:	2f00      	cmp	r7, #0
 8004db0:	f040 80cb 	bne.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x45a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004db4:	4d20      	ldr	r5, [pc, #128]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004db6:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dba:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dbe:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004dc2:	d026      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d024      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x322>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dc8:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dcc:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd4:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd8:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004de4:	07cf      	lsls	r7, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004de6:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 8004dea:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dee:	d510      	bpl.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x322>
        tickstart = HAL_GetTick();
 8004df0:	f7fd fdac 	bl	800294c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df4:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004df8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfa:	e004      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x316>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fd fda6 	bl	800294c <HAL_GetTick>
 8004e00:	1bc0      	subs	r0, r0, r7
 8004e02:	4548      	cmp	r0, r9
 8004e04:	d831      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x37a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e06:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004e0a:	0798      	lsls	r0, r3, #30
 8004e0c:	d5f6      	bpl.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x30c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e0e:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8004e12:	4909      	ldr	r1, [pc, #36]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004e14:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8004e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e22:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8004e24:	f1b8 0f00 	cmp.w	r8, #0
 8004e28:	f43f aea8 	beq.w	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2c:	4902      	ldr	r1, [pc, #8]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004e2e:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004e30:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004e34:	658a      	str	r2, [r1, #88]	@ 0x58
 8004e36:	e6a1      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40007000 	.word	0x40007000
    switch(PeriphClkInit->Sai2ClockSelection)
 8004e40:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004e44:	d13d      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004e46:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 8004e48:	2f00      	cmp	r7, #0
 8004e4a:	f43f ae8b 	beq.w	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e4e:	463e      	mov	r6, r7
 8004e50:	e792      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004e54:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004e58:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e64:	f04f 0801 	mov.w	r8, #1
 8004e68:	e78f      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = HAL_TIMEOUT;
 8004e6a:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e6c:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8004e6e:	f1b8 0f00 	cmp.w	r8, #0
 8004e72:	f43f ae83 	beq.w	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	4936      	ldr	r1, [pc, #216]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004e78:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004e7a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004e7e:	658a      	str	r2, [r1, #88]	@ 0x58
 8004e80:	e67c      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e82:	3004      	adds	r0, #4
 8004e84:	f7ff fd26 	bl	80048d4 <RCCEx_PLLSAI1_Config>
 8004e88:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e8a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004e8c:	2e00      	cmp	r6, #0
 8004e8e:	f47f ae4e 	bne.w	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8004e92:	e02f      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x404>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e94:	1d20      	adds	r0, r4, #4
 8004e96:	f7ff fd1d 	bl	80048d4 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e9a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e9c:	4607      	mov	r7, r0
      break;
 8004e9e:	e65e      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ea0:	68ca      	ldr	r2, [r1, #12]
 8004ea2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004ea6:	60ca      	str	r2, [r1, #12]
 8004ea8:	e725      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eaa:	68ca      	ldr	r2, [r1, #12]
 8004eac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004eb0:	60ca      	str	r2, [r1, #12]
 8004eb2:	e6fa      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb4:	68ca      	ldr	r2, [r1, #12]
 8004eb6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004eba:	60ca      	str	r2, [r1, #12]
 8004ebc:	e708      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ebe:	2601      	movs	r6, #1
 8004ec0:	e635      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004ec2:	2601      	movs	r6, #1
 8004ec4:	e757      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ec6:	2102      	movs	r1, #2
 8004ec8:	1d20      	adds	r0, r4, #4
 8004eca:	f7ff fd03 	bl	80048d4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ece:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	f43f af23 	beq.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	e720      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eda:	481d      	ldr	r0, [pc, #116]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004edc:	68c2      	ldr	r2, [r0, #12]
 8004ede:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ee2:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8004ee4:	e73a      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ee6:	491a      	ldr	r1, [pc, #104]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004ee8:	68ca      	ldr	r2, [r1, #12]
 8004eea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004eee:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ef0:	4637      	mov	r7, r6
 8004ef2:	e7a9      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ef4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004ef6:	e731      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ef8:	2102      	movs	r1, #2
 8004efa:	f104 0020 	add.w	r0, r4, #32
 8004efe:	f7ff fd77 	bl	80049f0 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f02:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f04:	2800      	cmp	r0, #0
 8004f06:	f43f af09 	beq.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	e706      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f0e:	2101      	movs	r1, #1
 8004f10:	1d20      	adds	r0, r4, #4
 8004f12:	f7ff fcdf 	bl	80048d4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f16:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f43f aec6 	beq.w	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f1e:	4606      	mov	r6, r0
 8004f20:	e6c3      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f22:	2101      	movs	r1, #1
 8004f24:	1d20      	adds	r0, r4, #4
 8004f26:	f7ff fcd5 	bl	80048d4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f2a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	f43f aecf 	beq.w	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f32:	4606      	mov	r6, r0
 8004f34:	e6cc      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f36:	2101      	movs	r1, #1
 8004f38:	1d20      	adds	r0, r4, #4
 8004f3a:	f7ff fccb 	bl	80048d4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f3e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f40:	2800      	cmp	r0, #0
 8004f42:	f43f aed8 	beq.w	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f46:	4606      	mov	r6, r0
 8004f48:	e6d5      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004f4a:	463e      	mov	r6, r7
 8004f4c:	e78e      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000

08004f54 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f58:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f5a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004f5c:	460e      	mov	r6, r1
 8004f5e:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8004f60:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004f64:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f66:	f7fd fcf1 	bl	800294c <HAL_GetTick>
 8004f6a:	4437      	add	r7, r6
 8004f6c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8004f6e:	f7fd fced 	bl	800294c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f72:	4b32      	ldr	r3, [pc, #200]	@ (800503c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f74:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f7c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004f80:	0d1b      	lsrs	r3, r3, #20
 8004f82:	fb07 f303 	mul.w	r3, r7, r3
 8004f86:	3601      	adds	r6, #1
 8004f88:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f8a:	d111      	bne.n	8004fb0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 8004f8c:	68a3      	ldr	r3, [r4, #8]
 8004f8e:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8004f92:	d009      	beq.n	8004fa8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f94:	7b23      	ldrb	r3, [r4, #12]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fa0:	68a3      	ldr	r3, [r4, #8]
 8004fa2:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8004fa6:	d1f5      	bne.n	8004f94 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 8004fa8:	2000      	movs	r0, #0
}
 8004faa:	b002      	add	sp, #8
 8004fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fb0:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	e013      	b.n	8004fde <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      tmpreg8 = *ptmpreg8;
 8004fb6:	7b23      	ldrb	r3, [r4, #12]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8004fbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fc2:	f7fd fcc3 	bl	800294c <HAL_GetTick>
 8004fc6:	eba0 0008 	sub.w	r0, r0, r8
 8004fca:	42b8      	cmp	r0, r7
 8004fcc:	d20c      	bcs.n	8004fe8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 8004fce:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004fd0:	9b01      	ldr	r3, [sp, #4]
 8004fd2:	3b01      	subs	r3, #1
        tmp_timeout = 0U;
 8004fd4:	2a00      	cmp	r2, #0
      count--;
 8004fd6:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fd8:	682b      	ldr	r3, [r5, #0]
        tmp_timeout = 0U;
 8004fda:	bf08      	it	eq
 8004fdc:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8004fe4:	d1e7      	bne.n	8004fb6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
 8004fe6:	e7df      	b.n	8004fa8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe8:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fec:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fee:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ff2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ff6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff8:	d013      	beq.n	8005022 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ffa:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8004ffc:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005000:	d107      	bne.n	8005012 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005010:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005012:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8005014:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005016:	f885 205d 	strb.w	r2, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800501a:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800501e:	2003      	movs	r0, #3
 8005020:	e7c3      	b.n	8004faa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005022:	68aa      	ldr	r2, [r5, #8]
 8005024:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005028:	d002      	beq.n	8005030 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800502a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800502e:	d1e4      	bne.n	8004ffa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e7df      	b.n	8004ffa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 800503a:	bf00      	nop
 800503c:	20000400 	.word	0x20000400

08005040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8005046:	2300      	movs	r3, #0
{
 8005048:	460e      	mov	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 800504a:	f88d 3007 	strb.w	r3, [sp, #7]
 800504e:	eb01 0902 	add.w	r9, r1, r2
{
 8005052:	4617      	mov	r7, r2
 8005054:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005056:	f7fd fc79 	bl	800294c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800505a:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8005180 <SPI_EndRxTxTransaction+0x140>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800505e:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 8005062:	f7fd fc73 	bl	800294c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005066:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 800506a:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800506c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005070:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005074:	0d1b      	lsrs	r3, r3, #20
 8005076:	fb0a f303 	mul.w	r3, sl, r3
 800507a:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800507c:	1c73      	adds	r3, r6, #1
 800507e:	bf18      	it	ne
 8005080:	4683      	movne	fp, r0
 8005082:	d130      	bne.n	80050e6 <SPI_EndRxTxTransaction+0xa6>
 8005084:	68a3      	ldr	r3, [r4, #8]
 8005086:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800508a:	d1fb      	bne.n	8005084 <SPI_EndRxTxTransaction+0x44>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800508c:	f7fd fc5e 	bl	800294c <HAL_GetTick>
 8005090:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8005094:	f7fd fc5a 	bl	800294c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005098:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800509c:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800509e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80050a2:	fb09 f303 	mul.w	r3, r9, r3
 80050a6:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 80050a8:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050aa:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ac:	d130      	bne.n	8005110 <SPI_EndRxTxTransaction+0xd0>
 80050ae:	68a3      	ldr	r3, [r4, #8]
 80050b0:	061a      	lsls	r2, r3, #24
 80050b2:	d4fc      	bmi.n	80050ae <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050b4:	463a      	mov	r2, r7
 80050b6:	4631      	mov	r1, r6
 80050b8:	4628      	mov	r0, r5
 80050ba:	f7ff ff4b 	bl	8004f54 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80050be:	bb58      	cbnz	r0, 8005118 <SPI_EndRxTxTransaction+0xd8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80050c0:	b005      	add	sp, #20
 80050c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050c6:	f7fd fc41 	bl	800294c <HAL_GetTick>
 80050ca:	eba0 000b 	sub.w	r0, r0, fp
 80050ce:	4582      	cmp	sl, r0
 80050d0:	d92a      	bls.n	8005128 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 80050d2:	9a02      	ldr	r2, [sp, #8]
      count--;
 80050d4:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80050d6:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 80050d8:	2a00      	cmp	r2, #0
      count--;
 80050da:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80050de:	bf08      	it	eq
 80050e0:	f04f 0a00 	moveq.w	sl, #0
      count--;
 80050e4:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 80050ec:	d1eb      	bne.n	80050c6 <SPI_EndRxTxTransaction+0x86>
 80050ee:	e7cd      	b.n	800508c <SPI_EndRxTxTransaction+0x4c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050f0:	f7fd fc2c 	bl	800294c <HAL_GetTick>
 80050f4:	eba0 0008 	sub.w	r0, r0, r8
 80050f8:	4581      	cmp	r9, r0
 80050fa:	d915      	bls.n	8005128 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 80050fc:	9a03      	ldr	r2, [sp, #12]
      count--;
 80050fe:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005100:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8005102:	2a00      	cmp	r2, #0
      count--;
 8005104:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005108:	bf08      	it	eq
 800510a:	f04f 0900 	moveq.w	r9, #0
      count--;
 800510e:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005110:	68a3      	ldr	r3, [r4, #8]
 8005112:	061b      	lsls	r3, r3, #24
 8005114:	d4ec      	bmi.n	80050f0 <SPI_EndRxTxTransaction+0xb0>
 8005116:	e7cd      	b.n	80050b4 <SPI_EndRxTxTransaction+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005118:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800511a:	f043 0320 	orr.w	r3, r3, #32
 800511e:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005120:	2003      	movs	r0, #3
}
 8005122:	b005      	add	sp, #20
 8005124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005128:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800512c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800512e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005132:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005136:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005138:	d016      	beq.n	8005168 <SPI_EndRxTxTransaction+0x128>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800513a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800513c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005140:	d107      	bne.n	8005152 <SPI_EndRxTxTransaction+0x112>
          SPI_RESET_CRC(hspi);
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005150:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005152:	2301      	movs	r3, #1
 8005154:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005158:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 800515a:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515c:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 8005160:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005164:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005166:	e7db      	b.n	8005120 <SPI_EndRxTxTransaction+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005168:	68aa      	ldr	r2, [r5, #8]
 800516a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800516e:	d002      	beq.n	8005176 <SPI_EndRxTxTransaction+0x136>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005170:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005174:	d1e1      	bne.n	800513a <SPI_EndRxTxTransaction+0xfa>
          __HAL_SPI_DISABLE(hspi);
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e7dc      	b.n	800513a <SPI_EndRxTxTransaction+0xfa>
 8005180:	20000400 	.word	0x20000400

08005184 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005184:	2800      	cmp	r0, #0
 8005186:	d074      	beq.n	8005272 <HAL_SPI_Init+0xee>
{
 8005188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800518e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8005190:	2800      	cmp	r0, #0
 8005192:	d053      	beq.n	800523c <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005194:	2300      	movs	r3, #0
 8005196:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800519a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800519e:	2200      	movs	r2, #0
 80051a0:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80051a2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d057      	beq.n	800525a <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 80051aa:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051ac:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80051ae:	2302      	movs	r3, #2
 80051b0:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80051b4:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051b6:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80051ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051be:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051c0:	d842      	bhi.n	8005248 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051c2:	d151      	bne.n	8005268 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051c4:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051c6:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051ca:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 80051ce:	6862      	ldr	r2, [r4, #4]
 80051d0:	68a3      	ldr	r3, [r4, #8]
 80051d2:	69a6      	ldr	r6, [r4, #24]
 80051d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051d8:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 80051dc:	431a      	orrs	r2, r3
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	4313      	orrs	r3, r2
 80051e6:	6962      	ldr	r2, [r4, #20]
 80051e8:	f002 0201 	and.w	r2, r2, #1
 80051ec:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051f0:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051fc:	69e3      	ldr	r3, [r4, #28]
 80051fe:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 8005202:	6a23      	ldr	r3, [r4, #32]
 8005204:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 8005208:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 800520c:	4313      	orrs	r3, r2
 800520e:	ea43 0308 	orr.w	r3, r3, r8
 8005212:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005214:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005216:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005218:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800521c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800521e:	f000 0010 	and.w	r0, r0, #16
 8005222:	ea4e 0306 	orr.w	r3, lr, r6
 8005226:	4303      	orrs	r3, r0
 8005228:	ea43 030c 	orr.w	r3, r3, ip
 800522c:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800522e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005230:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005232:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005234:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8005238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005242:	d0aa      	beq.n	800519a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005244:	61e0      	str	r0, [r4, #28]
 8005246:	e7a8      	b.n	800519a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005248:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 800524c:	d113      	bne.n	8005276 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800524e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005250:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005254:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8005258:	e7b9      	b.n	80051ce <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 800525a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800525c:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005260:	f7fd f918 	bl	8002494 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005264:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005266:	e7a0      	b.n	80051aa <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005268:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800526c:	2500      	movs	r5, #0
 800526e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8005270:	e7ad      	b.n	80051ce <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8005272:	2001      	movs	r0, #1
}
 8005274:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005276:	f04f 0c00 	mov.w	ip, #0
 800527a:	e7f7      	b.n	800526c <HAL_SPI_Init+0xe8>

0800527c <HAL_SPI_TransmitReceive>:
{
 800527c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005280:	4604      	mov	r4, r0
 8005282:	4691      	mov	r9, r2
 8005284:	461f      	mov	r7, r3
 8005286:	9e08      	ldr	r6, [sp, #32]
 8005288:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 800528a:	f7fd fb5f 	bl	800294c <HAL_GetTick>
  tmp_state           = hspi->State;
 800528e:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8005292:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005294:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005296:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005298:	d00b      	beq.n	80052b2 <HAL_SPI_TransmitReceive+0x36>
 800529a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800529e:	f040 808d 	bne.w	80053bc <HAL_SPI_TransmitReceive+0x140>
 80052a2:	b2d9      	uxtb	r1, r3
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80052a4:	68a3      	ldr	r3, [r4, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 8088 	bne.w	80053bc <HAL_SPI_TransmitReceive+0x140>
 80052ac:	2904      	cmp	r1, #4
 80052ae:	f040 8085 	bne.w	80053bc <HAL_SPI_TransmitReceive+0x140>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052b2:	f1b8 0f00 	cmp.w	r8, #0
 80052b6:	f000 8146 	beq.w	8005546 <HAL_SPI_TransmitReceive+0x2ca>
 80052ba:	f1b9 0f00 	cmp.w	r9, #0
 80052be:	f000 8142 	beq.w	8005546 <HAL_SPI_TransmitReceive+0x2ca>
 80052c2:	2f00      	cmp	r7, #0
 80052c4:	f000 813f 	beq.w	8005546 <HAL_SPI_TransmitReceive+0x2ca>
  __HAL_LOCK(hspi);
 80052c8:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d075      	beq.n	80053bc <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052d0:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052d4:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  __HAL_LOCK(hspi);
 80052d8:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052da:	2b04      	cmp	r3, #4
  __HAL_LOCK(hspi);
 80052dc:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80052e0:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 80052e2:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052e6:	bf1c      	itt	ne
 80052e8:	2305      	movne	r3, #5
 80052ea:	f884 305d 	strbne.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ee:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80052f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052f4:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80052f6:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 80052fa:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052fe:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005300:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005304:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005306:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005308:	d95b      	bls.n	80053c2 <HAL_SPI_TransmitReceive+0x146>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800530a:	6859      	ldr	r1, [r3, #4]
 800530c:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8005310:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	0648      	lsls	r0, r1, #25
 8005316:	d403      	bmi.n	8005320 <HAL_SPI_TransmitReceive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8005318:	6819      	ldr	r1, [r3, #0]
 800531a:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800531e:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005320:	2a00      	cmp	r2, #0
 8005322:	f000 80dc 	beq.w	80054de <HAL_SPI_TransmitReceive+0x262>
 8005326:	2f01      	cmp	r7, #1
 8005328:	f000 80d9 	beq.w	80054de <HAL_SPI_TransmitReceive+0x262>
 800532c:	1c73      	adds	r3, r6, #1
        txallowed = 1U;
 800532e:	f04f 0701 	mov.w	r7, #1
 8005332:	d028      	beq.n	8005386 <HAL_SPI_TransmitReceive+0x10a>
 8005334:	e0bc      	b.n	80054b0 <HAL_SPI_TransmitReceive+0x234>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	6893      	ldr	r3, [r2, #8]
 800533a:	0798      	lsls	r0, r3, #30
 800533c:	d50d      	bpl.n	800535a <HAL_SPI_TransmitReceive+0xde>
 800533e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005340:	b29b      	uxth	r3, r3
 8005342:	b153      	cbz	r3, 800535a <HAL_SPI_TransmitReceive+0xde>
 8005344:	b147      	cbz	r7, 8005358 <HAL_SPI_TransmitReceive+0xdc>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005346:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005348:	f833 1b02 	ldrh.w	r1, [r3], #2
 800534c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800534e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005350:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005352:	3b01      	subs	r3, #1
 8005354:	b29b      	uxth	r3, r3
 8005356:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005358:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800535a:	6893      	ldr	r3, [r2, #8]
 800535c:	f013 0301 	ands.w	r3, r3, #1
 8005360:	d00f      	beq.n	8005382 <HAL_SPI_TransmitReceive+0x106>
 8005362:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005366:	b289      	uxth	r1, r1
 8005368:	b159      	cbz	r1, 8005382 <HAL_SPI_TransmitReceive+0x106>
        txallowed = 1U;
 800536a:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800536c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800536e:	68d2      	ldr	r2, [r2, #12]
 8005370:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005374:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005376:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800537a:	3b01      	subs	r3, #1
 800537c:	b29b      	uxth	r3, r3
 800537e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005382:	f7fd fae3 	bl	800294c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005386:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1d3      	bne.n	8005336 <HAL_SPI_TransmitReceive+0xba>
 800538e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1ce      	bne.n	8005336 <HAL_SPI_TransmitReceive+0xba>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005398:	462a      	mov	r2, r5
 800539a:	4631      	mov	r1, r6
 800539c:	4620      	mov	r0, r4
 800539e:	f7ff fe4f 	bl	8005040 <SPI_EndRxTxTransaction>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	f040 80ca 	bne.w	800553c <HAL_SPI_TransmitReceive+0x2c0>
  hspi->State = HAL_SPI_STATE_READY;
 80053a8:	2301      	movs	r3, #1
 80053aa:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053ae:	6e23      	ldr	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 80053b0:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053b4:	1e18      	subs	r0, r3, #0
 80053b6:	bf18      	it	ne
 80053b8:	2001      	movne	r0, #1
 80053ba:	e000      	b.n	80053be <HAL_SPI_TransmitReceive+0x142>
    return HAL_BUSY;
 80053bc:	2002      	movs	r0, #2
}
 80053be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80053c2:	2f01      	cmp	r7, #1
 80053c4:	f000 80d9 	beq.w	800557a <HAL_SPI_TransmitReceive+0x2fe>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053c8:	6859      	ldr	r1, [r3, #4]
 80053ca:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80053ce:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053d0:	6819      	ldr	r1, [r3, #0]
 80053d2:	0649      	lsls	r1, r1, #25
 80053d4:	d403      	bmi.n	80053de <HAL_SPI_TransmitReceive+0x162>
    __HAL_SPI_ENABLE(hspi);
 80053d6:	6819      	ldr	r1, [r3, #0]
 80053d8:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80053dc:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053de:	b96a      	cbnz	r2, 80053fc <HAL_SPI_TransmitReceive+0x180>
      if (hspi->TxXferCount > 1U)
 80053e0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80053e2:	b292      	uxth	r2, r2
 80053e4:	2a01      	cmp	r2, #1
 80053e6:	f240 80b0 	bls.w	800554a <HAL_SPI_TransmitReceive+0x2ce>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053ea:	4642      	mov	r2, r8
 80053ec:	f832 1b02 	ldrh.w	r1, [r2], #2
 80053f0:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount -= 2U;
 80053f2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f4:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80053f6:	3b02      	subs	r3, #2
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80053fc:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053fe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005400:	b29b      	uxth	r3, r3
 8005402:	b923      	cbnz	r3, 800540e <HAL_SPI_TransmitReceive+0x192>
 8005404:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0c4      	beq.n	8005398 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	6893      	ldr	r3, [r2, #8]
 8005412:	0799      	lsls	r1, r3, #30
 8005414:	d505      	bpl.n	8005422 <HAL_SPI_TransmitReceive+0x1a6>
 8005416:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005418:	b29b      	uxth	r3, r3
 800541a:	b113      	cbz	r3, 8005422 <HAL_SPI_TransmitReceive+0x1a6>
 800541c:	2f00      	cmp	r7, #0
 800541e:	d174      	bne.n	800550a <HAL_SPI_TransmitReceive+0x28e>
        txallowed = 0U;
 8005420:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005422:	6893      	ldr	r3, [r2, #8]
 8005424:	f013 0301 	ands.w	r3, r3, #1
 8005428:	d019      	beq.n	800545e <HAL_SPI_TransmitReceive+0x1e2>
 800542a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800542e:	b289      	uxth	r1, r1
 8005430:	b1a9      	cbz	r1, 800545e <HAL_SPI_TransmitReceive+0x1e2>
        if (hspi->RxXferCount > 1U)
 8005432:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005436:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8005438:	b280      	uxth	r0, r0
 800543a:	2801      	cmp	r0, #1
 800543c:	d959      	bls.n	80054f2 <HAL_SPI_TransmitReceive+0x276>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800543e:	68d0      	ldr	r0, [r2, #12]
 8005440:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005444:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005446:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800544a:	3902      	subs	r1, #2
 800544c:	b289      	uxth	r1, r1
 800544e:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005452:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005456:	b289      	uxth	r1, r1
 8005458:	2901      	cmp	r1, #1
 800545a:	d93b      	bls.n	80054d4 <HAL_SPI_TransmitReceive+0x258>
        txallowed = 1U;
 800545c:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800545e:	f7fd fa75 	bl	800294c <HAL_GetTick>
 8005462:	1b40      	subs	r0, r0, r5
 8005464:	42b0      	cmp	r0, r6
 8005466:	d3ca      	bcc.n	80053fe <HAL_SPI_TransmitReceive+0x182>
 8005468:	1c73      	adds	r3, r6, #1
 800546a:	d0c8      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x182>
        hspi->State = HAL_SPI_STATE_READY;
 800546c:	2301      	movs	r3, #1
 800546e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005472:	2300      	movs	r3, #0
 8005474:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005478:	2003      	movs	r0, #3
}
 800547a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800547e:	b147      	cbz	r7, 8005492 <HAL_SPI_TransmitReceive+0x216>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005480:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005482:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005486:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005488:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800548a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800548c:	3b01      	subs	r3, #1
 800548e:	b29b      	uxth	r3, r3
 8005490:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8005492:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005494:	6893      	ldr	r3, [r2, #8]
 8005496:	f013 0301 	ands.w	r3, r3, #1
 800549a:	d004      	beq.n	80054a6 <HAL_SPI_TransmitReceive+0x22a>
 800549c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 80054a0:	b289      	uxth	r1, r1
 80054a2:	2900      	cmp	r1, #0
 80054a4:	d15c      	bne.n	8005560 <HAL_SPI_TransmitReceive+0x2e4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054a6:	f7fd fa51 	bl	800294c <HAL_GetTick>
 80054aa:	1b40      	subs	r0, r0, r5
 80054ac:	42b0      	cmp	r0, r6
 80054ae:	d2dd      	bcs.n	800546c <HAL_SPI_TransmitReceive+0x1f0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054b0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	b92b      	cbnz	r3, 80054c2 <HAL_SPI_TransmitReceive+0x246>
 80054b6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f43f af6b 	beq.w	8005398 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	6893      	ldr	r3, [r2, #8]
 80054c6:	0799      	lsls	r1, r3, #30
 80054c8:	d5e4      	bpl.n	8005494 <HAL_SPI_TransmitReceive+0x218>
 80054ca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0e0      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x218>
 80054d2:	e7d4      	b.n	800547e <HAL_SPI_TransmitReceive+0x202>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054d4:	6851      	ldr	r1, [r2, #4]
 80054d6:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 80054da:	6051      	str	r1, [r2, #4]
 80054dc:	e7be      	b.n	800545c <HAL_SPI_TransmitReceive+0x1e0>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054de:	4642      	mov	r2, r8
 80054e0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80054e4:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 80054e6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e8:	63a2      	str	r2, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80054f0:	e71c      	b.n	800532c <HAL_SPI_TransmitReceive+0xb0>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054f2:	7b12      	ldrb	r2, [r2, #12]
 80054f4:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 80054f6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80054f8:	3201      	adds	r2, #1
 80054fa:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 80054fc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8005500:	3a01      	subs	r2, #1
 8005502:	b292      	uxth	r2, r2
 8005504:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8005508:	e7a8      	b.n	800545c <HAL_SPI_TransmitReceive+0x1e0>
        if (hspi->TxXferCount > 1U)
 800550a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800550c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800550e:	b289      	uxth	r1, r1
 8005510:	2901      	cmp	r1, #1
 8005512:	d908      	bls.n	8005526 <HAL_SPI_TransmitReceive+0x2aa>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005514:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005518:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800551a:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800551c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800551e:	3b02      	subs	r3, #2
 8005520:	b29b      	uxth	r3, r3
 8005522:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005524:	e77c      	b.n	8005420 <HAL_SPI_TransmitReceive+0x1a4>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800552a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800552c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800552e:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8005530:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8005532:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8005534:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005536:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	e771      	b.n	8005420 <HAL_SPI_TransmitReceive+0x1a4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800553c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hspi);
 800553e:	2300      	movs	r3, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005540:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005542:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8005546:	2001      	movs	r0, #1
 8005548:	e739      	b.n	80053be <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800554a:	f898 2000 	ldrb.w	r2, [r8]
 800554e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8005550:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 8005552:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005554:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8005556:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8005558:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800555a:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800555c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800555e:	e74d      	b.n	80053fc <HAL_SPI_TransmitReceive+0x180>
        txallowed = 1U;
 8005560:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005562:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005564:	68d2      	ldr	r2, [r2, #12]
 8005566:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800556a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800556c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005570:	3b01      	subs	r3, #1
 8005572:	b29b      	uxth	r3, r3
 8005574:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8005578:	e795      	b.n	80054a6 <HAL_SPI_TransmitReceive+0x22a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005580:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	0650      	lsls	r0, r2, #25
 8005586:	f53f af2b 	bmi.w	80053e0 <HAL_SPI_TransmitReceive+0x164>
    __HAL_SPI_ENABLE(hspi);
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005590:	601a      	str	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005592:	e725      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x164>

08005594 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005594:	2800      	cmp	r0, #0
 8005596:	f000 808c 	beq.w	80056b2 <HAL_TIM_Base_Init+0x11e>
{
 800559a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80055a0:	4604      	mov	r4, r0
 80055a2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d078      	beq.n	800569c <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055aa:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055ac:	4942      	ldr	r1, [pc, #264]	@ (80056b8 <HAL_TIM_Base_Init+0x124>)
  htim->State = HAL_TIM_STATE_BUSY;
 80055ae:	2202      	movs	r2, #2
 80055b0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b4:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 80055b6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b8:	d05c      	beq.n	8005674 <HAL_TIM_Base_Init+0xe0>
 80055ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055be:	d024      	beq.n	800560a <HAL_TIM_Base_Init+0x76>
 80055c0:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 80055c4:	428b      	cmp	r3, r1
 80055c6:	d020      	beq.n	800560a <HAL_TIM_Base_Init+0x76>
 80055c8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055cc:	428b      	cmp	r3, r1
 80055ce:	d01c      	beq.n	800560a <HAL_TIM_Base_Init+0x76>
 80055d0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055d4:	428b      	cmp	r3, r1
 80055d6:	d018      	beq.n	800560a <HAL_TIM_Base_Init+0x76>
 80055d8:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 80055dc:	428b      	cmp	r3, r1
 80055de:	d049      	beq.n	8005674 <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e0:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 80055e4:	428b      	cmp	r3, r1
 80055e6:	d05e      	beq.n	80056a6 <HAL_TIM_Base_Init+0x112>
 80055e8:	4934      	ldr	r1, [pc, #208]	@ (80056bc <HAL_TIM_Base_Init+0x128>)
 80055ea:	428b      	cmp	r3, r1
 80055ec:	d05b      	beq.n	80056a6 <HAL_TIM_Base_Init+0x112>
 80055ee:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055f2:	428b      	cmp	r3, r1
 80055f4:	d057      	beq.n	80056a6 <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f6:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055fa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005600:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005602:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005604:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005606:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005608:	e010      	b.n	800562c <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 800560a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800560c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800560e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005612:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005614:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005618:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561a:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800561c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005620:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005622:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005624:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005626:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005628:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800562a:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800562c:	2201      	movs	r2, #1
 800562e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	07d2      	lsls	r2, r2, #31
 8005634:	d503      	bpl.n	800563e <HAL_TIM_Base_Init+0xaa>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563e:	2301      	movs	r3, #1
 8005640:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005644:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005648:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800564c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005650:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005660:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005664:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005668:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800566c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005670:	2000      	movs	r0, #0
}
 8005672:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005674:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005676:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005678:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800567c:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800567e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005682:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005684:	69a1      	ldr	r1, [r4, #24]
 8005686:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800568a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800568c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800568e:	68e2      	ldr	r2, [r4, #12]
 8005690:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005692:	6862      	ldr	r2, [r4, #4]
 8005694:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005696:	6962      	ldr	r2, [r4, #20]
 8005698:	631a      	str	r2, [r3, #48]	@ 0x30
 800569a:	e7c7      	b.n	800562c <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 800569c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80056a0:	f7fc fffe 	bl	80026a0 <HAL_TIM_Base_MspInit>
 80056a4:	e781      	b.n	80055aa <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056a6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ae:	4302      	orrs	r2, r0
 80056b0:	e7e9      	b.n	8005686 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 80056b2:	2001      	movs	r0, #1
}
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40014400 	.word	0x40014400

080056c0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80056c0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d123      	bne.n	8005710 <HAL_TIM_Base_Start+0x50>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c8:	6803      	ldr	r3, [r0, #0]
 80056ca:	4a17      	ldr	r2, [pc, #92]	@ (8005728 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ce:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d4:	d01e      	beq.n	8005714 <HAL_TIM_Base_Start+0x54>
 80056d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056da:	d01b      	beq.n	8005714 <HAL_TIM_Base_Start+0x54>
 80056dc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d017      	beq.n	8005714 <HAL_TIM_Base_Start+0x54>
 80056e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d013      	beq.n	8005714 <HAL_TIM_Base_Start+0x54>
 80056ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00f      	beq.n	8005714 <HAL_TIM_Base_Start+0x54>
 80056f4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00b      	beq.n	8005714 <HAL_TIM_Base_Start+0x54>
 80056fc:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800570c:	2000      	movs	r0, #0
 800570e:	4770      	bx	lr
    return HAL_ERROR;
 8005710:	2001      	movs	r0, #1
}
 8005712:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005714:	6899      	ldr	r1, [r3, #8]
 8005716:	4a05      	ldr	r2, [pc, #20]	@ (800572c <HAL_TIM_Base_Start+0x6c>)
 8005718:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571a:	2a06      	cmp	r2, #6
 800571c:	d0f6      	beq.n	800570c <HAL_TIM_Base_Start+0x4c>
 800571e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005722:	d1ef      	bne.n	8005704 <HAL_TIM_Base_Start+0x44>
  return HAL_OK;
 8005724:	2000      	movs	r0, #0
 8005726:	4770      	bx	lr
 8005728:	40012c00 	.word	0x40012c00
 800572c:	00010007 	.word	0x00010007

08005730 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005730:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d06f      	beq.n	8005818 <HAL_TIM_ConfigClockSource+0xe8>
 8005738:	4602      	mov	r2, r0
{
 800573a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800573e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8005744:	2001      	movs	r0, #1
 8005746:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800574a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800574c:	4b4c      	ldr	r3, [pc, #304]	@ (8005880 <HAL_TIM_ConfigClockSource+0x150>)
 800574e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005750:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005752:	680b      	ldr	r3, [r1, #0]
 8005754:	2b60      	cmp	r3, #96	@ 0x60
 8005756:	d061      	beq.n	800581c <HAL_TIM_ConfigClockSource+0xec>
 8005758:	d824      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x74>
 800575a:	2b40      	cmp	r3, #64	@ 0x40
 800575c:	d077      	beq.n	800584e <HAL_TIM_ConfigClockSource+0x11e>
 800575e:	d94a      	bls.n	80057f6 <HAL_TIM_ConfigClockSource+0xc6>
 8005760:	2b50      	cmp	r3, #80	@ 0x50
 8005762:	d117      	bne.n	8005794 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8005764:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005766:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005768:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800576a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800576e:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005770:	6a23      	ldr	r3, [r4, #32]
 8005772:	f023 0301 	bic.w	r3, r3, #1
 8005776:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005778:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800577a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800577e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005782:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005784:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005786:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800578c:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005790:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005792:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005794:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005796:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005798:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800579c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80057a0:	bc30      	pop	{r4, r5}
 80057a2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80057a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a8:	d0f3      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x62>
 80057aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ae:	d110      	bne.n	80057d2 <HAL_TIM_ConfigClockSource+0xa2>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057b0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80057b4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057b6:	432b      	orrs	r3, r5
 80057b8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ba:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80057c2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057c6:	68a3      	ldr	r3, [r4, #8]
 80057c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057cc:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	2000      	movs	r0, #0
 80057d0:	e7e0      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80057d2:	2b70      	cmp	r3, #112	@ 0x70
 80057d4:	d1de      	bne.n	8005794 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057d6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80057da:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057dc:	432b      	orrs	r3, r5
 80057de:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e0:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057e4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80057e8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80057ea:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80057ec:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ee:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80057f2:	60a3      	str	r3, [r4, #8]
      break;
 80057f4:	e7cd      	b.n	8005792 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d002      	beq.n	8005800 <HAL_TIM_ConfigClockSource+0xd0>
 80057fa:	d909      	bls.n	8005810 <HAL_TIM_ConfigClockSource+0xe0>
 80057fc:	2b30      	cmp	r3, #48	@ 0x30
 80057fe:	d1c9      	bne.n	8005794 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8005800:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005802:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005806:	430b      	orrs	r3, r1
 8005808:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800580c:	60a3      	str	r3, [r4, #8]
}
 800580e:	e7c0      	b.n	8005792 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8005810:	f033 0110 	bics.w	r1, r3, #16
 8005814:	d1be      	bne.n	8005794 <HAL_TIM_ConfigClockSource+0x64>
 8005816:	e7f3      	b.n	8005800 <HAL_TIM_ConfigClockSource+0xd0>
  __HAL_LOCK(htim);
 8005818:	2002      	movs	r0, #2
}
 800581a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800581c:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800581e:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005820:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005822:	6a21      	ldr	r1, [r4, #32]
 8005824:	f021 0110 	bic.w	r1, r1, #16
 8005828:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582a:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800582c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005830:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8005834:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005838:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800583c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800583e:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005840:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005846:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800584a:	60a3      	str	r3, [r4, #8]
}
 800584c:	e7a1      	b.n	8005792 <HAL_TIM_ConfigClockSource+0x62>
                               sClockSourceConfig->ClockPolarity,
 800584e:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005850:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8005852:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005854:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005858:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585a:	6a23      	ldr	r3, [r4, #32]
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005862:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005864:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005868:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800586c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800586e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005870:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005876:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800587a:	60a3      	str	r3, [r4, #8]
}
 800587c:	e789      	b.n	8005792 <HAL_TIM_ConfigClockSource+0x62>
 800587e:	bf00      	nop
 8005880:	fffe0088 	.word	0xfffe0088

08005884 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop

08005888 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop

0800588c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop

08005890 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop

08005894 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop

08005898 <HAL_TIM_IRQHandler>:
{
 8005898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 800589a:	6803      	ldr	r3, [r0, #0]
 800589c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800589e:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058a0:	07a1      	lsls	r1, r4, #30
{
 80058a2:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058a4:	d501      	bpl.n	80058aa <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058a6:	07b2      	lsls	r2, r6, #30
 80058a8:	d457      	bmi.n	800595a <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058aa:	0767      	lsls	r7, r4, #29
 80058ac:	d501      	bpl.n	80058b2 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058ae:	0770      	lsls	r0, r6, #29
 80058b0:	d440      	bmi.n	8005934 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058b2:	0721      	lsls	r1, r4, #28
 80058b4:	d501      	bpl.n	80058ba <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058b6:	0732      	lsls	r2, r6, #28
 80058b8:	d42a      	bmi.n	8005910 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058ba:	06e7      	lsls	r7, r4, #27
 80058bc:	d501      	bpl.n	80058c2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058be:	06f0      	lsls	r0, r6, #27
 80058c0:	d413      	bmi.n	80058ea <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058c2:	07e1      	lsls	r1, r4, #31
 80058c4:	d501      	bpl.n	80058ca <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058c6:	07f2      	lsls	r2, r6, #31
 80058c8:	d465      	bmi.n	8005996 <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058ca:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058ce:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058d2:	d052      	beq.n	800597a <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058d4:	0633      	lsls	r3, r6, #24
 80058d6:	d466      	bmi.n	80059a6 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058d8:	0660      	lsls	r0, r4, #25
 80058da:	d501      	bpl.n	80058e0 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058dc:	0671      	lsls	r1, r6, #25
 80058de:	d473      	bmi.n	80059c8 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058e0:	06a2      	lsls	r2, r4, #26
 80058e2:	d501      	bpl.n	80058e8 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058e4:	06b3      	lsls	r3, r6, #26
 80058e6:	d44d      	bmi.n	8005984 <HAL_TIM_IRQHandler+0xec>
}
 80058e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058ea:	682b      	ldr	r3, [r5, #0]
 80058ec:	f06f 0210 	mvn.w	r2, #16
 80058f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058f2:	2208      	movs	r2, #8
 80058f4:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80058fc:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058fe:	d174      	bne.n	80059ea <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005900:	f7ff ffc2 	bl	8005888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	4628      	mov	r0, r5
 8005906:	f7ff ffc3 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	2300      	movs	r3, #0
 800590c:	772b      	strb	r3, [r5, #28]
 800590e:	e7d8      	b.n	80058c2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	f06f 0208 	mvn.w	r2, #8
 8005916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005918:	2204      	movs	r2, #4
 800591a:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005920:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005922:	d15f      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005924:	f7ff ffb0 	bl	8005888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	4628      	mov	r0, r5
 800592a:	f7ff ffb1 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	2300      	movs	r3, #0
 8005930:	772b      	strb	r3, [r5, #28]
 8005932:	e7c2      	b.n	80058ba <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	f06f 0204 	mvn.w	r2, #4
 800593a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800593c:	2202      	movs	r2, #2
 800593e:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005948:	d149      	bne.n	80059de <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	f7ff ff9d 	bl	8005888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594e:	4628      	mov	r0, r5
 8005950:	f7ff ff9e 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005954:	2300      	movs	r3, #0
 8005956:	772b      	strb	r3, [r5, #28]
 8005958:	e7ab      	b.n	80058b2 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800595a:	f06f 0202 	mvn.w	r2, #2
 800595e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005960:	2201      	movs	r2, #1
 8005962:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	079b      	lsls	r3, r3, #30
 8005968:	d136      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800596a:	f7ff ff8d 	bl	8005888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596e:	4628      	mov	r0, r5
 8005970:	f7ff ff8e 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005974:	2300      	movs	r3, #0
 8005976:	772b      	strb	r3, [r5, #28]
 8005978:	e797      	b.n	80058aa <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800597a:	2f00      	cmp	r7, #0
 800597c:	d0ac      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800597e:	0637      	lsls	r7, r6, #24
 8005980:	d41a      	bmi.n	80059b8 <HAL_TIM_IRQHandler+0x120>
 8005982:	e7a9      	b.n	80058d8 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	f06f 0220 	mvn.w	r2, #32
 800598a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800598c:	4628      	mov	r0, r5
}
 800598e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005992:	f000 b87d 	b.w	8005a90 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005996:	682b      	ldr	r3, [r5, #0]
 8005998:	f06f 0201 	mvn.w	r2, #1
 800599c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800599e:	4628      	mov	r0, r5
 80059a0:	f7ff ff70 	bl	8005884 <HAL_TIM_PeriodElapsedCallback>
 80059a4:	e791      	b.n	80058ca <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059a6:	682b      	ldr	r3, [r5, #0]
 80059a8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 f870 	bl	8005a94 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059b4:	2f00      	cmp	r7, #0
 80059b6:	d08f      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 f869 	bl	8005a98 <HAL_TIMEx_Break2Callback>
 80059c6:	e787      	b.n	80058d8 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7ff ff5f 	bl	8005894 <HAL_TIM_TriggerCallback>
 80059d6:	e783      	b.n	80058e0 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 80059d8:	f7ff ff58 	bl	800588c <HAL_TIM_IC_CaptureCallback>
 80059dc:	e7ca      	b.n	8005974 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	f7ff ff55 	bl	800588c <HAL_TIM_IC_CaptureCallback>
 80059e2:	e7b7      	b.n	8005954 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 80059e4:	f7ff ff52 	bl	800588c <HAL_TIM_IC_CaptureCallback>
 80059e8:	e7a1      	b.n	800592e <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 80059ea:	f7ff ff4f 	bl	800588c <HAL_TIM_IC_CaptureCallback>
 80059ee:	e78c      	b.n	800590a <HAL_TIM_IRQHandler+0x72>

080059f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80059f4:	2a01      	cmp	r2, #1
 80059f6:	d044      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059f8:	6802      	ldr	r2, [r0, #0]
{
 80059fa:	b470      	push	{r4, r5, r6}
 80059fc:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059fe:	4e22      	ldr	r6, [pc, #136]	@ (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	2002      	movs	r0, #2
 8005a02:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a06:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 8005a08:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a0a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005a0c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a0e:	d026      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005a10:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8005a14:	42b2      	cmp	r2, r6
 8005a16:	d02b      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a18:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a1c:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a1e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005a22:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a24:	d00e      	beq.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005a26:	4819      	ldr	r0, [pc, #100]	@ (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8005a28:	4282      	cmp	r2, r0
 8005a2a:	d00b      	beq.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005a2c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005a30:	4282      	cmp	r2, r0
 8005a32:	d007      	beq.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005a34:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005a38:	4282      	cmp	r2, r0
 8005a3a:	d003      	beq.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005a3c:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8005a40:	4282      	cmp	r2, r0
 8005a42:	d104      	bne.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a44:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a46:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a4a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a4c:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005a4e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005a56:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005a5a:	bc70      	pop	{r4, r5, r6}
 8005a5c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a5e:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a60:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a64:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a66:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a6a:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8005a6c:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6e:	e7e9      	b.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a70:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a72:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a76:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a78:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a7c:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 8005a7e:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a80:	e7e0      	b.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 8005a82:	2002      	movs	r0, #2
}
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	40000400 	.word	0x40000400

08005a90 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop

08005a94 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop

08005a98 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop

08005a9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa0:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8005aa4:	2820      	cmp	r0, #32
 8005aa6:	d14f      	bne.n	8005b48 <HAL_UART_Transmit+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa8:	4688      	mov	r8, r1
 8005aaa:	b109      	cbz	r1, 8005ab0 <HAL_UART_Transmit+0x14>
 8005aac:	4617      	mov	r7, r2
 8005aae:	b912      	cbnz	r2, 8005ab6 <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 8005ab0:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ab6:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005abc:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abe:	f8c4 9084 	str.w	r9, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ac2:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8005ac4:	f7fc ff42 	bl	800294c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac8:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005aca:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8005ad2:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 8005ad6:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad8:	d045      	beq.n	8005b66 <HAL_UART_Transmit+0xca>
    while (huart->TxXferCount > 0U)
 8005ada:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ade:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8005ae0:	b292      	uxth	r2, r2
 8005ae2:	b1aa      	cbz	r2, 8005b10 <HAL_UART_Transmit+0x74>
 8005ae4:	1c68      	adds	r0, r5, #1
 8005ae6:	d124      	bne.n	8005b32 <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae8:	69da      	ldr	r2, [r3, #28]
 8005aea:	0612      	lsls	r2, r2, #24
 8005aec:	d5fc      	bpl.n	8005ae8 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8005aee:	f1b8 0f00 	cmp.w	r8, #0
 8005af2:	d024      	beq.n	8005b3e <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005af4:	f818 2b01 	ldrb.w	r2, [r8], #1
 8005af8:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 8005afa:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8005afe:	3a01      	subs	r2, #1
 8005b00:	b292      	uxth	r2, r2
 8005b02:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b06:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8005b0a:	b292      	uxth	r2, r2
 8005b0c:	2a00      	cmp	r2, #0
 8005b0e:	d1e9      	bne.n	8005ae4 <HAL_UART_Transmit+0x48>
 8005b10:	1c69      	adds	r1, r5, #1
 8005b12:	d124      	bne.n	8005b5e <HAL_UART_Transmit+0xc2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b14:	69da      	ldr	r2, [r3, #28]
 8005b16:	0652      	lsls	r2, r2, #25
 8005b18:	d5fc      	bpl.n	8005b14 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
 8005b1a:	2320      	movs	r3, #32
 8005b1c:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8005b1e:	2000      	movs	r0, #0
 8005b20:	e7c7      	b.n	8005ab2 <HAL_UART_Transmit+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b22:	f7fc ff13 	bl	800294c <HAL_GetTick>
 8005b26:	1b80      	subs	r0, r0, r6
 8005b28:	4285      	cmp	r5, r0
 8005b2a:	d322      	bcc.n	8005b72 <HAL_UART_Transmit+0xd6>
 8005b2c:	b30d      	cbz	r5, 8005b72 <HAL_UART_Transmit+0xd6>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	0617      	lsls	r7, r2, #24
 8005b36:	d5f4      	bpl.n	8005b22 <HAL_UART_Transmit+0x86>
      if (pdata8bits == NULL)
 8005b38:	f1b8 0f00 	cmp.w	r8, #0
 8005b3c:	d1da      	bne.n	8005af4 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b3e:	f839 2b02 	ldrh.w	r2, [r9], #2
 8005b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b46:	e7d7      	b.n	8005af8 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 8005b48:	2002      	movs	r0, #2
}
 8005b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4e:	f7fc fefd 	bl	800294c <HAL_GetTick>
 8005b52:	1b83      	subs	r3, r0, r6
 8005b54:	429d      	cmp	r5, r3
 8005b56:	d30c      	bcc.n	8005b72 <HAL_UART_Transmit+0xd6>
 8005b58:	b15d      	cbz	r5, 8005b72 <HAL_UART_Transmit+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	065b      	lsls	r3, r3, #25
 8005b62:	d5f4      	bpl.n	8005b4e <HAL_UART_Transmit+0xb2>
 8005b64:	e7d9      	b.n	8005b1a <HAL_UART_Transmit+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1b6      	bne.n	8005ada <HAL_UART_Transmit+0x3e>
 8005b6c:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8005b6e:	4698      	mov	r8, r3
 8005b70:	e7b3      	b.n	8005ada <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8005b72:	2320      	movs	r3, #32
 8005b74:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8005b76:	2003      	movs	r0, #3
}
 8005b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005b7c <HAL_UART_Receive>:
{
 8005b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b80:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b82:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8005b86:	2820      	cmp	r0, #32
 8005b88:	d148      	bne.n	8005c1c <HAL_UART_Receive+0xa0>
    if ((pData == NULL) || (Size == 0U))
 8005b8a:	4689      	mov	r9, r1
 8005b8c:	b109      	cbz	r1, 8005b92 <HAL_UART_Receive+0x16>
 8005b8e:	4616      	mov	r6, r2
 8005b90:	b912      	cbnz	r2, 8005b98 <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 8005b92:	2001      	movs	r0, #1
}
 8005b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b98:	f04f 0800 	mov.w	r8, #0
 8005b9c:	461d      	mov	r5, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b9e:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba0:	f8c4 8084 	str.w	r8, [r4, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ba4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba8:	f8c4 8060 	str.w	r8, [r4, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8005bac:	f7fc fece 	bl	800294c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8005bb0:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8005bb2:	f8a4 6058 	strh.w	r6, [r4, #88]	@ 0x58
    UART_MASK_COMPUTATION(huart);
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->RxXferCount = Size;
 8005bba:	f8a4 605a 	strh.w	r6, [r4, #90]	@ 0x5a
    tickstart = HAL_GetTick();
 8005bbe:	4607      	mov	r7, r0
    UART_MASK_COMPUTATION(huart);
 8005bc0:	d06c      	beq.n	8005c9c <HAL_UART_Receive+0x120>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f040 8081 	bne.w	8005cca <HAL_UART_Receive+0x14e>
    uhMask = huart->Mask;
 8005bc8:	4698      	mov	r8, r3
    UART_MASK_COMPUTATION(huart);
 8005bca:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	bf0c      	ite	eq
 8005bd0:	26ff      	moveq	r6, #255	@ 0xff
 8005bd2:	267f      	movne	r6, #127	@ 0x7f
    while (huart->RxXferCount > 0U)
 8005bd4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8005bd8:	f8a4 605c 	strh.w	r6, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	b1bb      	cbz	r3, 8005c10 <HAL_UART_Receive+0x94>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	1c6a      	adds	r2, r5, #1
 8005be4:	d11d      	bne.n	8005c22 <HAL_UART_Receive+0xa6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	0690      	lsls	r0, r2, #26
 8005bea:	d5fc      	bpl.n	8005be6 <HAL_UART_Receive+0x6a>
      if (pdata8bits == NULL)
 8005bec:	f1b9 0f00 	cmp.w	r9, #0
 8005bf0:	d05b      	beq.n	8005caa <HAL_UART_Receive+0x12e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005bf2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005bf4:	4033      	ands	r3, r6
 8005bf6:	f809 3b01 	strb.w	r3, [r9], #1
      huart->RxXferCount--;
 8005bfa:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005c06:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e7      	bne.n	8005be0 <HAL_UART_Receive+0x64>
    huart->RxState = HAL_UART_STATE_READY;
 8005c10:	2320      	movs	r3, #32
 8005c12:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8005c16:	2000      	movs	r0, #0
}
 8005c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8005c1c:	2002      	movs	r0, #2
}
 8005c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	0691      	lsls	r1, r2, #26
 8005c26:	d4e1      	bmi.n	8005bec <HAL_UART_Receive+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c28:	f7fc fe90 	bl	800294c <HAL_GetTick>
 8005c2c:	1bc0      	subs	r0, r0, r7
 8005c2e:	4285      	cmp	r5, r0
 8005c30:	d32e      	bcc.n	8005c90 <HAL_UART_Receive+0x114>
 8005c32:	b36d      	cbz	r5, 8005c90 <HAL_UART_Receive+0x114>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	0750      	lsls	r0, r2, #29
 8005c3a:	d5f2      	bpl.n	8005c22 <HAL_UART_Receive+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	0711      	lsls	r1, r2, #28
 8005c40:	d459      	bmi.n	8005cf6 <HAL_UART_Receive+0x17a>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	0512      	lsls	r2, r2, #20
 8005c46:	d5ec      	bpl.n	8005c22 <HAL_UART_Receive+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c4c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	e853 2f00 	ldrex	r2, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c52:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	e843 2100 	strex	r1, r2, [r3]
 8005c5a:	2900      	cmp	r1, #0
 8005c5c:	d1f7      	bne.n	8005c4e <HAL_UART_Receive+0xd2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	f103 0208 	add.w	r2, r3, #8
 8005c62:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	f103 0008 	add.w	r0, r3, #8
 8005c6e:	e840 2100 	strex	r1, r2, [r0]
 8005c72:	2900      	cmp	r1, #0
 8005c74:	d1f3      	bne.n	8005c5e <HAL_UART_Receive+0xe2>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c76:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005c78:	2a01      	cmp	r2, #1
 8005c7a:	d02d      	beq.n	8005cd8 <HAL_UART_Receive+0x15c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c84:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c86:	6623      	str	r3, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8005c88:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c8c:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c90:	2320      	movs	r3, #32
 8005c92:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8005c96:	2003      	movs	r0, #3
}
 8005c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	b9cb      	cbnz	r3, 8005cd4 <HAL_UART_Receive+0x158>
 8005ca0:	46c8      	mov	r8, r9
    uhMask = huart->Mask;
 8005ca2:	f240 16ff 	movw	r6, #511	@ 0x1ff
      pdata8bits  = NULL;
 8005ca6:	4699      	mov	r9, r3
 8005ca8:	e794      	b.n	8005bd4 <HAL_UART_Receive+0x58>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005caa:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8005cac:	4032      	ands	r2, r6
 8005cae:	f828 2b02 	strh.w	r2, [r8], #2
      huart->RxXferCount--;
 8005cb2:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8005cb6:	3a01      	subs	r2, #1
 8005cb8:	b292      	uxth	r2, r2
 8005cba:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005cbe:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8005cc2:	b292      	uxth	r2, r2
 8005cc4:	2a00      	cmp	r2, #0
 8005cc6:	d18c      	bne.n	8005be2 <HAL_UART_Receive+0x66>
 8005cc8:	e7a2      	b.n	8005c10 <HAL_UART_Receive+0x94>
    UART_MASK_COMPUTATION(huart);
 8005cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cce:	d00c      	beq.n	8005cea <HAL_UART_Receive+0x16e>
    uhMask = huart->Mask;
 8005cd0:	4646      	mov	r6, r8
 8005cd2:	e77f      	b.n	8005bd4 <HAL_UART_Receive+0x58>
 8005cd4:	26ff      	movs	r6, #255	@ 0xff
 8005cd6:	e77d      	b.n	8005bd4 <HAL_UART_Receive+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cdc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	e843 2100 	strex	r1, r2, [r3]
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	d1f7      	bne.n	8005cd8 <HAL_UART_Receive+0x15c>
 8005ce8:	e7c8      	b.n	8005c7c <HAL_UART_Receive+0x100>
    UART_MASK_COMPUTATION(huart);
 8005cea:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bf14      	ite	ne
 8005cf0:	263f      	movne	r6, #63	@ 0x3f
 8005cf2:	267f      	moveq	r6, #127	@ 0x7f
 8005cf4:	e76e      	b.n	8005bd4 <HAL_UART_Receive+0x58>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfe:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	e843 2100 	strex	r1, r2, [r3]
 8005d06:	2900      	cmp	r1, #0
 8005d08:	d1f7      	bne.n	8005cfa <HAL_UART_Receive+0x17e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	f103 0208 	add.w	r2, r3, #8
 8005d0e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d12:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	f103 0008 	add.w	r0, r3, #8
 8005d1a:	e840 2100 	strex	r1, r2, [r0]
 8005d1e:	2900      	cmp	r1, #0
 8005d20:	d1f3      	bne.n	8005d0a <HAL_UART_Receive+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d22:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005d24:	2a01      	cmp	r2, #1
 8005d26:	d00b      	beq.n	8005d40 <HAL_UART_Receive+0x1c4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d28:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005d2a:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d2c:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8005d32:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d34:	6623      	str	r3, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8005d36:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d3a:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8005d3e:	e7a7      	b.n	8005c90 <HAL_UART_Receive+0x114>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d44:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	e843 2100 	strex	r1, r2, [r3]
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	d1f7      	bne.n	8005d40 <HAL_UART_Receive+0x1c4>
 8005d50:	e7ea      	b.n	8005d28 <HAL_UART_Receive+0x1ac>
 8005d52:	bf00      	nop

08005d54 <UART_SetConfig>:
{
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d58:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d5a:	6882      	ldr	r2, [r0, #8]
 8005d5c:	6900      	ldr	r0, [r0, #16]
 8005d5e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d60:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d62:	4302      	orrs	r2, r0
 8005d64:	430a      	orrs	r2, r1
 8005d66:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d68:	4981      	ldr	r1, [pc, #516]	@ (8005f70 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d6a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d6c:	4029      	ands	r1, r5
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	68e1      	ldr	r1, [r4, #12]
 8005d76:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005d7a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d7c:	497d      	ldr	r1, [pc, #500]	@ (8005f74 <UART_SetConfig+0x220>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d7e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d80:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d82:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d84:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d86:	d03f      	beq.n	8005e08 <UART_SetConfig+0xb4>
    tmpreg |= huart->Init.OneBitSampling;
 8005d88:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d8a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8005d8e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d90:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d92:	4979      	ldr	r1, [pc, #484]	@ (8005f78 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d94:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d96:	428b      	cmp	r3, r1
 8005d98:	d115      	bne.n	8005dc6 <UART_SetConfig+0x72>
 8005d9a:	4b78      	ldr	r3, [pc, #480]	@ (8005f7c <UART_SetConfig+0x228>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	f000 808d 	beq.w	8005ec4 <UART_SetConfig+0x170>
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d077      	beq.n	8005e9e <UART_SetConfig+0x14a>
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d06d      	beq.n	8005e8e <UART_SetConfig+0x13a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005db6:	f000 80cf 	beq.w	8005f58 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dba:	f7fe fd79 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d172      	bne.n	8005ea8 <UART_SetConfig+0x154>
        pclk = (uint32_t) HSI_VALUE;
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	e01c      	b.n	8005e00 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dc6:	4a6e      	ldr	r2, [pc, #440]	@ (8005f80 <UART_SetConfig+0x22c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d10f      	bne.n	8005dec <UART_SetConfig+0x98>
 8005dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8005f7c <UART_SetConfig+0x228>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd2:	f003 030c 	and.w	r3, r3, #12
 8005dd6:	2b0c      	cmp	r3, #12
 8005dd8:	d811      	bhi.n	8005dfe <UART_SetConfig+0xaa>
 8005dda:	e8df f003 	tbb	[pc, r3]
 8005dde:	1082      	.short	0x1082
 8005de0:	10581010 	.word	0x10581010
 8005de4:	10731010 	.word	0x10731010
 8005de8:	1010      	.short	0x1010
 8005dea:	60          	.byte	0x60
 8005deb:	00          	.byte	0x00
 8005dec:	4a65      	ldr	r2, [pc, #404]	@ (8005f84 <UART_SetConfig+0x230>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d07d      	beq.n	8005eee <UART_SetConfig+0x19a>
 8005df2:	4a65      	ldr	r2, [pc, #404]	@ (8005f88 <UART_SetConfig+0x234>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d03f      	beq.n	8005e78 <UART_SetConfig+0x124>
 8005df8:	4a64      	ldr	r2, [pc, #400]	@ (8005f8c <UART_SetConfig+0x238>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d067      	beq.n	8005ece <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 8005dfe:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e08:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e0c:	485b      	ldr	r0, [pc, #364]	@ (8005f7c <UART_SetConfig+0x228>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e12:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8005e16:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e1e:	d07e      	beq.n	8005f1e <UART_SetConfig+0x1ca>
 8005e20:	d807      	bhi.n	8005e32 <UART_SetConfig+0xde>
 8005e22:	b323      	cbz	r3, 8005e6e <UART_SetConfig+0x11a>
 8005e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e28:	d1e9      	bne.n	8005dfe <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e2a:	f7fe f90d 	bl	8004048 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005e2e:	b928      	cbnz	r0, 8005e3c <UART_SetConfig+0xe8>
 8005e30:	e7c7      	b.n	8005dc2 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e36:	d1e2      	bne.n	8005dfe <UART_SetConfig+0xaa>
        pclk = (uint32_t) LSE_VALUE;
 8005e38:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e3c:	6862      	ldr	r2, [r4, #4]
 8005e3e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005e42:	4283      	cmp	r3, r0
 8005e44:	d8db      	bhi.n	8005dfe <UART_SetConfig+0xaa>
 8005e46:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005e4a:	d8d8      	bhi.n	8005dfe <UART_SetConfig+0xaa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e4c:	0851      	lsrs	r1, r2, #1
 8005e4e:	2300      	movs	r3, #0
 8005e50:	468c      	mov	ip, r1
 8005e52:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8005e56:	4619      	mov	r1, r3
 8005e58:	fbe0 c105 	umlal	ip, r1, r0, r5
 8005e5c:	4660      	mov	r0, ip
 8005e5e:	f7fa fa17 	bl	8000290 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e62:	4b4b      	ldr	r3, [pc, #300]	@ (8005f90 <UART_SetConfig+0x23c>)
 8005e64:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d8c8      	bhi.n	8005dfe <UART_SetConfig+0xaa>
 8005e6c:	e027      	b.n	8005ebe <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e6e:	f7fe fd0d 	bl	800488c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d1e2      	bne.n	8005e3c <UART_SetConfig+0xe8>
 8005e76:	e7a4      	b.n	8005dc2 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e78:	4b40      	ldr	r3, [pc, #256]	@ (8005f7c <UART_SetConfig+0x228>)
 8005e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e82:	2b80      	cmp	r3, #128	@ 0x80
 8005e84:	d01e      	beq.n	8005ec4 <UART_SetConfig+0x170>
 8005e86:	d83f      	bhi.n	8005f08 <UART_SetConfig+0x1b4>
 8005e88:	b35b      	cbz	r3, 8005ee2 <UART_SetConfig+0x18e>
 8005e8a:	2b40      	cmp	r3, #64	@ 0x40
 8005e8c:	d1b7      	bne.n	8005dfe <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e8e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005e92:	d069      	beq.n	8005f68 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e94:	f7fe f8d8 	bl	8004048 <HAL_RCC_GetSysClockFreq>
        break;
 8005e98:	e791      	b.n	8005dbe <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e9a:	2b30      	cmp	r3, #48	@ 0x30
 8005e9c:	d1af      	bne.n	8005dfe <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e9e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005ea2:	d05e      	beq.n	8005f62 <UART_SetConfig+0x20e>
        pclk = (uint32_t) LSE_VALUE;
 8005ea4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ea8:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eaa:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eae:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005eb2:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb6:	f1a0 0310 	sub.w	r3, r0, #16
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d89f      	bhi.n	8005dfe <UART_SetConfig+0xaa>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	60d8      	str	r0, [r3, #12]
 8005ec2:	e77e      	b.n	8005dc2 <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ec4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005ec8:	d049      	beq.n	8005f5e <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 8005eca:	4832      	ldr	r0, [pc, #200]	@ (8005f94 <UART_SetConfig+0x240>)
 8005ecc:	e7ec      	b.n	8005ea8 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ece:	4b2b      	ldr	r3, [pc, #172]	@ (8005f7c <UART_SetConfig+0x228>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005edc:	d0f2      	beq.n	8005ec4 <UART_SetConfig+0x170>
 8005ede:	d81a      	bhi.n	8005f16 <UART_SetConfig+0x1c2>
 8005ee0:	b9ab      	cbnz	r3, 8005f0e <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ee2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005ee6:	d01c      	beq.n	8005f22 <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee8:	f7fe fcd0 	bl	800488c <HAL_RCC_GetPCLK1Freq>
        break;
 8005eec:	e767      	b.n	8005dbe <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eee:	4b23      	ldr	r3, [pc, #140]	@ (8005f7c <UART_SetConfig+0x228>)
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d0e3      	beq.n	8005ec4 <UART_SetConfig+0x170>
 8005efc:	d8cd      	bhi.n	8005e9a <UART_SetConfig+0x146>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0ef      	beq.n	8005ee2 <UART_SetConfig+0x18e>
 8005f02:	2b10      	cmp	r3, #16
 8005f04:	d0c3      	beq.n	8005e8e <UART_SetConfig+0x13a>
 8005f06:	e77a      	b.n	8005dfe <UART_SetConfig+0xaa>
 8005f08:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f0a:	d0c8      	beq.n	8005e9e <UART_SetConfig+0x14a>
 8005f0c:	e777      	b.n	8005dfe <UART_SetConfig+0xaa>
 8005f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f12:	d0bc      	beq.n	8005e8e <UART_SetConfig+0x13a>
 8005f14:	e773      	b.n	8005dfe <UART_SetConfig+0xaa>
 8005f16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f1a:	d0c0      	beq.n	8005e9e <UART_SetConfig+0x14a>
 8005f1c:	e76f      	b.n	8005dfe <UART_SetConfig+0xaa>
        pclk = (uint32_t) HSI_VALUE;
 8005f1e:	481d      	ldr	r0, [pc, #116]	@ (8005f94 <UART_SetConfig+0x240>)
 8005f20:	e78c      	b.n	8005e3c <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f22:	f7fe fcb3 	bl	800488c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005f26:	2800      	cmp	r0, #0
 8005f28:	f43f af4b 	beq.w	8005dc2 <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f2c:	0040      	lsls	r0, r0, #1
 8005f2e:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f30:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f34:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005f38:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f3c:	f1a3 0110 	sub.w	r1, r3, #16
 8005f40:	4291      	cmp	r1, r2
 8005f42:	f63f af5c 	bhi.w	8005dfe <UART_SetConfig+0xaa>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f46:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8005f4a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f4c:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f4e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60cb      	str	r3, [r1, #12]
 8005f56:	e734      	b.n	8005dc2 <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f58:	f7fe fcaa 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
        break;
 8005f5c:	e7e3      	b.n	8005f26 <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5e:	480e      	ldr	r0, [pc, #56]	@ (8005f98 <UART_SetConfig+0x244>)
 8005f60:	e7e5      	b.n	8005f2e <UART_SetConfig+0x1da>
 8005f62:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005f66:	e7e2      	b.n	8005f2e <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetSysClockFreq();
 8005f68:	f7fe f86e 	bl	8004048 <HAL_RCC_GetSysClockFreq>
        break;
 8005f6c:	e7db      	b.n	8005f26 <UART_SetConfig+0x1d2>
 8005f6e:	bf00      	nop
 8005f70:	efff69f3 	.word	0xefff69f3
 8005f74:	40008000 	.word	0x40008000
 8005f78:	40013800 	.word	0x40013800
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	40004400 	.word	0x40004400
 8005f84:	40004800 	.word	0x40004800
 8005f88:	40004c00 	.word	0x40004c00
 8005f8c:	40005000 	.word	0x40005000
 8005f90:	000ffcff 	.word	0x000ffcff
 8005f94:	00f42400 	.word	0x00f42400
 8005f98:	01e84800 	.word	0x01e84800

08005f9c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f9c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005f9e:	071a      	lsls	r2, r3, #28
{
 8005fa0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fa2:	d506      	bpl.n	8005fb2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fa4:	6801      	ldr	r1, [r0, #0]
 8005fa6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005fa8:	684a      	ldr	r2, [r1, #4]
 8005faa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fae:	4322      	orrs	r2, r4
 8005fb0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fb2:	07dc      	lsls	r4, r3, #31
 8005fb4:	d506      	bpl.n	8005fc4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fb6:	6801      	ldr	r1, [r0, #0]
 8005fb8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8005fba:	684a      	ldr	r2, [r1, #4]
 8005fbc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005fc0:	4322      	orrs	r2, r4
 8005fc2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fc4:	0799      	lsls	r1, r3, #30
 8005fc6:	d506      	bpl.n	8005fd6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fc8:	6801      	ldr	r1, [r0, #0]
 8005fca:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005fcc:	684a      	ldr	r2, [r1, #4]
 8005fce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005fd2:	4322      	orrs	r2, r4
 8005fd4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fd6:	075a      	lsls	r2, r3, #29
 8005fd8:	d506      	bpl.n	8005fe8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fda:	6801      	ldr	r1, [r0, #0]
 8005fdc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005fde:	684a      	ldr	r2, [r1, #4]
 8005fe0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005fe4:	4322      	orrs	r2, r4
 8005fe6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe8:	06dc      	lsls	r4, r3, #27
 8005fea:	d506      	bpl.n	8005ffa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fec:	6801      	ldr	r1, [r0, #0]
 8005fee:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005ff0:	688a      	ldr	r2, [r1, #8]
 8005ff2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ff6:	4322      	orrs	r2, r4
 8005ff8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ffa:	0699      	lsls	r1, r3, #26
 8005ffc:	d506      	bpl.n	800600c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ffe:	6801      	ldr	r1, [r0, #0]
 8006000:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006002:	688a      	ldr	r2, [r1, #8]
 8006004:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006008:	4322      	orrs	r2, r4
 800600a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800600c:	065a      	lsls	r2, r3, #25
 800600e:	d509      	bpl.n	8006024 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006010:	6801      	ldr	r1, [r0, #0]
 8006012:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006014:	684a      	ldr	r2, [r1, #4]
 8006016:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800601a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800601c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006020:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006022:	d00b      	beq.n	800603c <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006024:	061b      	lsls	r3, r3, #24
 8006026:	d506      	bpl.n	8006036 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006028:	6802      	ldr	r2, [r0, #0]
 800602a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800602c:	6853      	ldr	r3, [r2, #4]
 800602e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006032:	430b      	orrs	r3, r1
 8006034:	6053      	str	r3, [r2, #4]
}
 8006036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800603a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800603c:	684a      	ldr	r2, [r1, #4]
 800603e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006040:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006044:	4322      	orrs	r2, r4
 8006046:	604a      	str	r2, [r1, #4]
 8006048:	e7ec      	b.n	8006024 <UART_AdvFeatureConfig+0x88>
 800604a:	bf00      	nop

0800604c <UART_CheckIdleState>:
{
 800604c:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604e:	2300      	movs	r3, #0
{
 8006050:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006052:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8006056:	f7fc fc79 	bl	800294c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	6813      	ldr	r3, [r2, #0]
 800605e:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8006060:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006062:	d40e      	bmi.n	8006082 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006064:	6813      	ldr	r3, [r2, #0]
 8006066:	0759      	lsls	r1, r3, #29
 8006068:	d42f      	bmi.n	80060ca <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800606c:	2220      	movs	r2, #32
 800606e:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 8006070:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8006072:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006076:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006078:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 800607a:	2300      	movs	r3, #0
 800607c:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8006080:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006082:	69d3      	ldr	r3, [r2, #28]
 8006084:	0298      	lsls	r0, r3, #10
 8006086:	d4ed      	bmi.n	8006064 <UART_CheckIdleState+0x18>
 8006088:	e00c      	b.n	80060a4 <UART_CheckIdleState+0x58>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800608a:	6819      	ldr	r1, [r3, #0]
 800608c:	0749      	lsls	r1, r1, #29
 800608e:	461a      	mov	r2, r3
 8006090:	d505      	bpl.n	800609e <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006092:	69d9      	ldr	r1, [r3, #28]
 8006094:	0708      	lsls	r0, r1, #28
 8006096:	d449      	bmi.n	800612c <UART_CheckIdleState+0xe0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006098:	69d9      	ldr	r1, [r3, #28]
 800609a:	0509      	lsls	r1, r1, #20
 800609c:	d474      	bmi.n	8006188 <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	0298      	lsls	r0, r3, #10
 80060a2:	d4df      	bmi.n	8006064 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a4:	f7fc fc52 	bl	800294c <HAL_GetTick>
 80060a8:	1b43      	subs	r3, r0, r5
 80060aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060ae:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b0:	d3eb      	bcc.n	800608a <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80060b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	e843 2100 	strex	r1, r2, [r3]
 80060be:	2900      	cmp	r1, #0
 80060c0:	d1f7      	bne.n	80060b2 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 80060c2:	2320      	movs	r3, #32
 80060c4:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80060c6:	2003      	movs	r0, #3
 80060c8:	e7d7      	b.n	800607a <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ca:	69d3      	ldr	r3, [r2, #28]
 80060cc:	025b      	lsls	r3, r3, #9
 80060ce:	d4cc      	bmi.n	800606a <UART_CheckIdleState+0x1e>
 80060d0:	e00d      	b.n	80060ee <UART_CheckIdleState+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	0750      	lsls	r0, r2, #29
 80060d6:	d507      	bpl.n	80060e8 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060d8:	69da      	ldr	r2, [r3, #28]
 80060da:	0711      	lsls	r1, r2, #28
 80060dc:	f100 8082 	bmi.w	80061e4 <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	0512      	lsls	r2, r2, #20
 80060e4:	f100 80ac 	bmi.w	8006240 <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	025b      	lsls	r3, r3, #9
 80060ec:	d4bd      	bmi.n	800606a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ee:	f7fc fc2d 	bl	800294c <HAL_GetTick>
 80060f2:	1b43      	subs	r3, r0, r5
 80060f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	d3ea      	bcc.n	80060d2 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006100:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	e843 2100 	strex	r1, r2, [r3]
 8006108:	2900      	cmp	r1, #0
 800610a:	d1f7      	bne.n	80060fc <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	f103 0208 	add.w	r2, r3, #8
 8006110:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006114:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	f103 0008 	add.w	r0, r3, #8
 800611c:	e840 2100 	strex	r1, r2, [r0]
 8006120:	2900      	cmp	r1, #0
 8006122:	d1f3      	bne.n	800610c <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8006124:	2320      	movs	r3, #32
 8006126:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 800612a:	e7cc      	b.n	80060c6 <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800612c:	2208      	movs	r2, #8
 800612e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006134:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	e843 2100 	strex	r1, r2, [r3]
 800613c:	2900      	cmp	r1, #0
 800613e:	d1f7      	bne.n	8006130 <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	f103 0208 	add.w	r2, r3, #8
 8006144:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006148:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	f103 0008 	add.w	r0, r3, #8
 8006150:	e840 2100 	strex	r1, r2, [r0]
 8006154:	2900      	cmp	r1, #0
 8006156:	d1f3      	bne.n	8006140 <UART_CheckIdleState+0xf4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006158:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800615a:	2a01      	cmp	r2, #1
 800615c:	d00b      	beq.n	8006176 <UART_CheckIdleState+0x12a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006160:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006162:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006164:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006168:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616a:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 800616c:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006170:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8006174:	e79d      	b.n	80060b2 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	e843 2100 	strex	r1, r2, [r3]
 8006182:	2900      	cmp	r1, #0
 8006184:	d1f7      	bne.n	8006176 <UART_CheckIdleState+0x12a>
 8006186:	e7ea      	b.n	800615e <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006188:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800618c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006192:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	e843 2100 	strex	r1, r2, [r3]
 800619a:	2900      	cmp	r1, #0
 800619c:	d1f7      	bne.n	800618e <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	f103 0208 	add.w	r2, r3, #8
 80061a2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	f103 0008 	add.w	r0, r3, #8
 80061ae:	e840 2100 	strex	r1, r2, [r0]
 80061b2:	2900      	cmp	r1, #0
 80061b4:	d1f3      	bne.n	800619e <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80061b8:	2a01      	cmp	r2, #1
 80061ba:	d00a      	beq.n	80061d2 <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061bc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80061be:	2120      	movs	r1, #32
 80061c0:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80061c4:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80061c8:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061cc:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80061d0:	e76f      	b.n	80060b2 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	e843 2100 	strex	r1, r2, [r3]
 80061de:	2900      	cmp	r1, #0
 80061e0:	d1f7      	bne.n	80061d2 <UART_CheckIdleState+0x186>
 80061e2:	e7eb      	b.n	80061bc <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061e4:	2208      	movs	r2, #8
 80061e6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ec:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	e843 2100 	strex	r1, r2, [r3]
 80061f4:	2900      	cmp	r1, #0
 80061f6:	d1f7      	bne.n	80061e8 <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	f103 0208 	add.w	r2, r3, #8
 80061fc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006200:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	f103 0008 	add.w	r0, r3, #8
 8006208:	e840 2100 	strex	r1, r2, [r0]
 800620c:	2900      	cmp	r1, #0
 800620e:	d1f3      	bne.n	80061f8 <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006210:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006212:	2a01      	cmp	r2, #1
 8006214:	d00b      	beq.n	800622e <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006216:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006218:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800621a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800621c:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006220:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006222:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006224:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006228:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 800622c:	e766      	b.n	80060fc <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006232:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	e843 2100 	strex	r1, r2, [r3]
 800623a:	2900      	cmp	r1, #0
 800623c:	d1f7      	bne.n	800622e <UART_CheckIdleState+0x1e2>
 800623e:	e7ea      	b.n	8006216 <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006240:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006244:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800624a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	e843 2100 	strex	r1, r2, [r3]
 8006252:	2900      	cmp	r1, #0
 8006254:	d1f7      	bne.n	8006246 <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	f103 0208 	add.w	r2, r3, #8
 800625a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	f103 0008 	add.w	r0, r3, #8
 8006266:	e840 2100 	strex	r1, r2, [r0]
 800626a:	2900      	cmp	r1, #0
 800626c:	d1f3      	bne.n	8006256 <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800626e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006270:	2a01      	cmp	r2, #1
 8006272:	d00a      	beq.n	800628a <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006274:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006276:	2120      	movs	r1, #32
 8006278:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 800627c:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627e:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006280:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006284:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006288:	e738      	b.n	80060fc <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	e843 2100 	strex	r1, r2, [r3]
 8006296:	2900      	cmp	r1, #0
 8006298:	d1f7      	bne.n	800628a <UART_CheckIdleState+0x23e>
 800629a:	e7eb      	b.n	8006274 <UART_CheckIdleState+0x228>

0800629c <HAL_UART_Init>:
  if (huart == NULL)
 800629c:	b370      	cbz	r0, 80062fc <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800629e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 80062a0:	b510      	push	{r4, lr}
 80062a2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80062a4:	b32b      	cbz	r3, 80062f2 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 80062a6:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062a8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 80062aa:	2324      	movs	r3, #36	@ 0x24
 80062ac:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062b6:	b9c1      	cbnz	r1, 80062ea <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062b8:	4620      	mov	r0, r4
 80062ba:	f7ff fd4b 	bl	8005d54 <UART_SetConfig>
 80062be:	2801      	cmp	r0, #1
 80062c0:	d011      	beq.n	80062e6 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062d2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80062da:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80062dc:	601a      	str	r2, [r3, #0]
}
 80062de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80062e2:	f7ff beb3 	b.w	800604c <UART_CheckIdleState>
}
 80062e6:	2001      	movs	r0, #1
 80062e8:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80062ea:	4620      	mov	r0, r4
 80062ec:	f7ff fe56 	bl	8005f9c <UART_AdvFeatureConfig>
 80062f0:	e7e2      	b.n	80062b8 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 80062f2:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 80062f6:	f7fc fa17 	bl	8002728 <HAL_UART_MspInit>
 80062fa:	e7d4      	b.n	80062a6 <HAL_UART_Init+0xa>
}
 80062fc:	2001      	movs	r0, #1
 80062fe:	4770      	bx	lr

08006300 <arm_split_rfft_q15>:
 8006300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006304:	b083      	sub	sp, #12
 8006306:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 800630a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800630c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800630e:	3d01      	subs	r5, #1
 8006310:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 8006314:	00ac      	lsls	r4, r5, #2
 8006316:	9401      	str	r4, [sp, #4]
 8006318:	1e4c      	subs	r4, r1, #1
 800631a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800631e:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8006322:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8006326:	d02d      	beq.n	8006384 <arm_split_rfft_q15+0x84>
 8006328:	2f01      	cmp	r7, #1
 800632a:	f1a6 0c04 	sub.w	ip, r6, #4
 800632e:	f100 0604 	add.w	r6, r0, #4
 8006332:	d13e      	bne.n	80063b2 <arm_split_rfft_q15+0xb2>
 8006334:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8006336:	f1ac 0104 	sub.w	r1, ip, #4
 800633a:	f107 0808 	add.w	r8, r7, #8
 800633e:	f856 7b04 	ldr.w	r7, [r6], #4
 8006342:	f852 9b04 	ldr.w	r9, [r2], #4
 8006346:	fb47 fc09 	smusd	ip, r7, r9
 800634a:	f855 e904 	ldr.w	lr, [r5], #-4
 800634e:	f853 ab04 	ldr.w	sl, [r3], #4
 8006352:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8006356:	fb4e fe1a 	smusdx	lr, lr, sl
 800635a:	fb27 e719 	smladx	r7, r7, r9, lr
 800635e:	143f      	asrs	r7, r7, #16
 8006360:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8006364:	f1c7 0e00 	rsb	lr, r7, #0
 8006368:	3c01      	subs	r4, #1
 800636a:	f828 7c02 	strh.w	r7, [r8, #-2]
 800636e:	f828 cc04 	strh.w	ip, [r8, #-4]
 8006372:	f1a1 0104 	sub.w	r1, r1, #4
 8006376:	f8a1 e00a 	strh.w	lr, [r1, #10]
 800637a:	f8a1 c008 	strh.w	ip, [r1, #8]
 800637e:	f108 0804 	add.w	r8, r8, #4
 8006382:	d1dc      	bne.n	800633e <arm_split_rfft_q15+0x3e>
 8006384:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8006388:	f9b0 3000 	ldrsh.w	r3, [r0]
 800638c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800638e:	9a01      	ldr	r2, [sp, #4]
 8006390:	1a5b      	subs	r3, r3, r1
 8006392:	4422      	add	r2, r4
 8006394:	2100      	movs	r1, #0
 8006396:	105b      	asrs	r3, r3, #1
 8006398:	8093      	strh	r3, [r2, #4]
 800639a:	80d1      	strh	r1, [r2, #6]
 800639c:	f9b0 3000 	ldrsh.w	r3, [r0]
 80063a0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80063a4:	8061      	strh	r1, [r4, #2]
 80063a6:	4413      	add	r3, r2
 80063a8:	105b      	asrs	r3, r3, #1
 80063aa:	8023      	strh	r3, [r4, #0]
 80063ac:	b003      	add	sp, #12
 80063ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b2:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80063b6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80063b8:	f1ac 0104 	sub.w	r1, ip, #4
 80063bc:	f107 0808 	add.w	r8, r7, #8
 80063c0:	f856 7b04 	ldr.w	r7, [r6], #4
 80063c4:	f8d2 9000 	ldr.w	r9, [r2]
 80063c8:	fb47 fc09 	smusd	ip, r7, r9
 80063cc:	f855 e904 	ldr.w	lr, [r5], #-4
 80063d0:	f8d3 a000 	ldr.w	sl, [r3]
 80063d4:	fb2e cc0a 	smlad	ip, lr, sl, ip
 80063d8:	fb4e fe1a 	smusdx	lr, lr, sl
 80063dc:	fb27 e719 	smladx	r7, r7, r9, lr
 80063e0:	143f      	asrs	r7, r7, #16
 80063e2:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 80063e6:	f1c7 0e00 	rsb	lr, r7, #0
 80063ea:	3c01      	subs	r4, #1
 80063ec:	f828 7c02 	strh.w	r7, [r8, #-2]
 80063f0:	f828 cc04 	strh.w	ip, [r8, #-4]
 80063f4:	445b      	add	r3, fp
 80063f6:	f8a1 e006 	strh.w	lr, [r1, #6]
 80063fa:	f8a1 c004 	strh.w	ip, [r1, #4]
 80063fe:	445a      	add	r2, fp
 8006400:	f108 0804 	add.w	r8, r8, #4
 8006404:	f1a1 0104 	sub.w	r1, r1, #4
 8006408:	d1da      	bne.n	80063c0 <arm_split_rfft_q15+0xc0>
 800640a:	e7bb      	b.n	8006384 <arm_split_rfft_q15+0x84>

0800640c <arm_rfft_q15>:
 800640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006410:	f890 e004 	ldrb.w	lr, [r0, #4]
 8006414:	6806      	ldr	r6, [r0, #0]
 8006416:	f1be 0f01 	cmp.w	lr, #1
 800641a:	4604      	mov	r4, r0
 800641c:	b083      	sub	sp, #12
 800641e:	6940      	ldr	r0, [r0, #20]
 8006420:	4615      	mov	r5, r2
 8006422:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006426:	460f      	mov	r7, r1
 8006428:	d00f      	beq.n	800644a <arm_rfft_q15+0x3e>
 800642a:	7963      	ldrb	r3, [r4, #5]
 800642c:	4672      	mov	r2, lr
 800642e:	f000 fb7b 	bl	8006b28 <arm_cfft_q15>
 8006432:	68a3      	ldr	r3, [r4, #8]
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	9500      	str	r5, [sp, #0]
 8006438:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 800643c:	4631      	mov	r1, r6
 800643e:	4638      	mov	r0, r7
 8006440:	f7ff ff5e 	bl	8006300 <arm_split_rfft_q15>
 8006444:	b003      	add	sp, #12
 8006446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644a:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 800644e:	68a2      	ldr	r2, [r4, #8]
 8006450:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 8006454:	b30e      	cbz	r6, 800649a <arm_rfft_q15+0x8e>
 8006456:	2a01      	cmp	r2, #1
 8006458:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800645c:	d132      	bne.n	80064c4 <arm_rfft_q15+0xb8>
 800645e:	46a9      	mov	r9, r5
 8006460:	f85c 8904 	ldr.w	r8, [ip], #-4
 8006464:	f851 2b04 	ldr.w	r2, [r1], #4
 8006468:	fb48 fa02 	smusd	sl, r8, r2
 800646c:	f857 bb04 	ldr.w	fp, [r7], #4
 8006470:	f853 eb04 	ldr.w	lr, [r3], #4
 8006474:	fb2b aa0e 	smlad	sl, fp, lr, sl
 8006478:	fb28 f812 	smuadx	r8, r8, r2
 800647c:	f1c8 0200 	rsb	r2, r8, #0
 8006480:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 8006484:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8006488:	0412      	lsls	r2, r2, #16
 800648a:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 800648e:	3e01      	subs	r6, #1
 8006490:	f849 2b04 	str.w	r2, [r9], #4
 8006494:	d1e4      	bne.n	8006460 <arm_rfft_q15+0x54>
 8006496:	f894 e004 	ldrb.w	lr, [r4, #4]
 800649a:	7963      	ldrb	r3, [r4, #5]
 800649c:	4672      	mov	r2, lr
 800649e:	4629      	mov	r1, r5
 80064a0:	f000 fb42 	bl	8006b28 <arm_cfft_q15>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0cc      	beq.n	8006444 <arm_rfft_q15+0x38>
 80064aa:	3d02      	subs	r5, #2
 80064ac:	2100      	movs	r1, #0
 80064ae:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	802b      	strh	r3, [r5, #0]
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	3101      	adds	r1, #1
 80064ba:	428b      	cmp	r3, r1
 80064bc:	d8f7      	bhi.n	80064ae <arm_rfft_q15+0xa2>
 80064be:	b003      	add	sp, #12
 80064c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c4:	ee07 0a90 	vmov	s15, r0
 80064c8:	46a8      	mov	r8, r5
 80064ca:	f85c e904 	ldr.w	lr, [ip], #-4
 80064ce:	6808      	ldr	r0, [r1, #0]
 80064d0:	fb4e f900 	smusd	r9, lr, r0
 80064d4:	f857 ab04 	ldr.w	sl, [r7], #4
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	fb2a 9902 	smlad	r9, sl, r2, r9
 80064de:	fb2e fe10 	smuadx	lr, lr, r0
 80064e2:	f1ce 0e00 	rsb	lr, lr, #0
 80064e6:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 80064ea:	0c12      	lsrs	r2, r2, #16
 80064ec:	0412      	lsls	r2, r2, #16
 80064ee:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 80064f2:	3e01      	subs	r6, #1
 80064f4:	f848 2b04 	str.w	r2, [r8], #4
 80064f8:	4459      	add	r1, fp
 80064fa:	445b      	add	r3, fp
 80064fc:	d1e5      	bne.n	80064ca <arm_rfft_q15+0xbe>
 80064fe:	ee17 0a90 	vmov	r0, s15
 8006502:	e7c8      	b.n	8006496 <arm_rfft_q15+0x8a>

08006504 <arm_rfft_init_q15>:
 8006504:	b430      	push	{r4, r5}
 8006506:	b289      	uxth	r1, r1
 8006508:	4d31      	ldr	r5, [pc, #196]	@ (80065d0 <arm_rfft_init_q15+0xcc>)
 800650a:	4c32      	ldr	r4, [pc, #200]	@ (80065d4 <arm_rfft_init_q15+0xd0>)
 800650c:	6001      	str	r1, [r0, #0]
 800650e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006512:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8006516:	7102      	strb	r2, [r0, #4]
 8006518:	7143      	strb	r3, [r0, #5]
 800651a:	d053      	beq.n	80065c4 <arm_rfft_init_q15+0xc0>
 800651c:	d91a      	bls.n	8006554 <arm_rfft_init_q15+0x50>
 800651e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006522:	d033      	beq.n	800658c <arm_rfft_init_q15+0x88>
 8006524:	d909      	bls.n	800653a <arm_rfft_init_q15+0x36>
 8006526:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800652a:	d12b      	bne.n	8006584 <arm_rfft_init_q15+0x80>
 800652c:	4b2a      	ldr	r3, [pc, #168]	@ (80065d8 <arm_rfft_init_q15+0xd4>)
 800652e:	6143      	str	r3, [r0, #20]
 8006530:	2201      	movs	r2, #1
 8006532:	6082      	str	r2, [r0, #8]
 8006534:	2000      	movs	r0, #0
 8006536:	bc30      	pop	{r4, r5}
 8006538:	4770      	bx	lr
 800653a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800653e:	d02c      	beq.n	800659a <arm_rfft_init_q15+0x96>
 8006540:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006544:	d11e      	bne.n	8006584 <arm_rfft_init_q15+0x80>
 8006546:	4b25      	ldr	r3, [pc, #148]	@ (80065dc <arm_rfft_init_q15+0xd8>)
 8006548:	6143      	str	r3, [r0, #20]
 800654a:	2204      	movs	r2, #4
 800654c:	6082      	str	r2, [r0, #8]
 800654e:	bc30      	pop	{r4, r5}
 8006550:	2000      	movs	r0, #0
 8006552:	4770      	bx	lr
 8006554:	2980      	cmp	r1, #128	@ 0x80
 8006556:	d027      	beq.n	80065a8 <arm_rfft_init_q15+0xa4>
 8006558:	d909      	bls.n	800656e <arm_rfft_init_q15+0x6a>
 800655a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800655e:	d111      	bne.n	8006584 <arm_rfft_init_q15+0x80>
 8006560:	4b1f      	ldr	r3, [pc, #124]	@ (80065e0 <arm_rfft_init_q15+0xdc>)
 8006562:	6143      	str	r3, [r0, #20]
 8006564:	2220      	movs	r2, #32
 8006566:	6082      	str	r2, [r0, #8]
 8006568:	bc30      	pop	{r4, r5}
 800656a:	2000      	movs	r0, #0
 800656c:	4770      	bx	lr
 800656e:	2920      	cmp	r1, #32
 8006570:	d021      	beq.n	80065b6 <arm_rfft_init_q15+0xb2>
 8006572:	2940      	cmp	r1, #64	@ 0x40
 8006574:	d106      	bne.n	8006584 <arm_rfft_init_q15+0x80>
 8006576:	4b1b      	ldr	r3, [pc, #108]	@ (80065e4 <arm_rfft_init_q15+0xe0>)
 8006578:	6143      	str	r3, [r0, #20]
 800657a:	2280      	movs	r2, #128	@ 0x80
 800657c:	6082      	str	r2, [r0, #8]
 800657e:	bc30      	pop	{r4, r5}
 8006580:	2000      	movs	r0, #0
 8006582:	4770      	bx	lr
 8006584:	f04f 30ff 	mov.w	r0, #4294967295
 8006588:	bc30      	pop	{r4, r5}
 800658a:	4770      	bx	lr
 800658c:	4b16      	ldr	r3, [pc, #88]	@ (80065e8 <arm_rfft_init_q15+0xe4>)
 800658e:	6143      	str	r3, [r0, #20]
 8006590:	2202      	movs	r2, #2
 8006592:	6082      	str	r2, [r0, #8]
 8006594:	bc30      	pop	{r4, r5}
 8006596:	2000      	movs	r0, #0
 8006598:	4770      	bx	lr
 800659a:	4b14      	ldr	r3, [pc, #80]	@ (80065ec <arm_rfft_init_q15+0xe8>)
 800659c:	6143      	str	r3, [r0, #20]
 800659e:	2208      	movs	r2, #8
 80065a0:	6082      	str	r2, [r0, #8]
 80065a2:	bc30      	pop	{r4, r5}
 80065a4:	2000      	movs	r0, #0
 80065a6:	4770      	bx	lr
 80065a8:	4b11      	ldr	r3, [pc, #68]	@ (80065f0 <arm_rfft_init_q15+0xec>)
 80065aa:	6143      	str	r3, [r0, #20]
 80065ac:	2240      	movs	r2, #64	@ 0x40
 80065ae:	6082      	str	r2, [r0, #8]
 80065b0:	bc30      	pop	{r4, r5}
 80065b2:	2000      	movs	r0, #0
 80065b4:	4770      	bx	lr
 80065b6:	4b0f      	ldr	r3, [pc, #60]	@ (80065f4 <arm_rfft_init_q15+0xf0>)
 80065b8:	6143      	str	r3, [r0, #20]
 80065ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065be:	6082      	str	r2, [r0, #8]
 80065c0:	2000      	movs	r0, #0
 80065c2:	e7b8      	b.n	8006536 <arm_rfft_init_q15+0x32>
 80065c4:	4b0c      	ldr	r3, [pc, #48]	@ (80065f8 <arm_rfft_init_q15+0xf4>)
 80065c6:	6143      	str	r3, [r0, #20]
 80065c8:	2210      	movs	r2, #16
 80065ca:	6082      	str	r2, [r0, #8]
 80065cc:	2000      	movs	r0, #0
 80065ce:	e7b2      	b.n	8006536 <arm_rfft_init_q15+0x32>
 80065d0:	0800d0b0 	.word	0x0800d0b0
 80065d4:	080110b0 	.word	0x080110b0
 80065d8:	08009288 	.word	0x08009288
 80065dc:	08009228 	.word	0x08009228
 80065e0:	08009238 	.word	0x08009238
 80065e4:	08009278 	.word	0x08009278
 80065e8:	08009258 	.word	0x08009258
 80065ec:	08009298 	.word	0x08009298
 80065f0:	080092a8 	.word	0x080092a8
 80065f4:	08009248 	.word	0x08009248
 80065f8:	08009268 	.word	0x08009268

080065fc <arm_cmplx_mag_q15>:
 80065fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	ea5f 0992 	movs.w	r9, r2, lsr #2
 8006604:	4617      	mov	r7, r2
 8006606:	4680      	mov	r8, r0
 8006608:	460e      	mov	r6, r1
 800660a:	d029      	beq.n	8006660 <arm_cmplx_mag_q15+0x64>
 800660c:	4605      	mov	r5, r0
 800660e:	46ca      	mov	sl, r9
 8006610:	460c      	mov	r4, r1
 8006612:	6828      	ldr	r0, [r5, #0]
 8006614:	fb20 f000 	smuad	r0, r0, r0
 8006618:	4621      	mov	r1, r4
 800661a:	1440      	asrs	r0, r0, #17
 800661c:	f000 f832 	bl	8006684 <arm_sqrt_q15>
 8006620:	6868      	ldr	r0, [r5, #4]
 8006622:	fb20 f000 	smuad	r0, r0, r0
 8006626:	1ca1      	adds	r1, r4, #2
 8006628:	1440      	asrs	r0, r0, #17
 800662a:	f000 f82b 	bl	8006684 <arm_sqrt_q15>
 800662e:	68a8      	ldr	r0, [r5, #8]
 8006630:	fb20 f000 	smuad	r0, r0, r0
 8006634:	1d21      	adds	r1, r4, #4
 8006636:	1440      	asrs	r0, r0, #17
 8006638:	f000 f824 	bl	8006684 <arm_sqrt_q15>
 800663c:	3510      	adds	r5, #16
 800663e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8006642:	fb23 f303 	smuad	r3, r3, r3
 8006646:	1da1      	adds	r1, r4, #6
 8006648:	1458      	asrs	r0, r3, #17
 800664a:	f000 f81b 	bl	8006684 <arm_sqrt_q15>
 800664e:	f1ba 0a01 	subs.w	sl, sl, #1
 8006652:	f104 0408 	add.w	r4, r4, #8
 8006656:	d1dc      	bne.n	8006612 <arm_cmplx_mag_q15+0x16>
 8006658:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
 800665c:	eb08 1809 	add.w	r8, r8, r9, lsl #4
 8006660:	f017 0703 	ands.w	r7, r7, #3
 8006664:	d00c      	beq.n	8006680 <arm_cmplx_mag_q15+0x84>
 8006666:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 800666a:	f858 0b04 	ldr.w	r0, [r8], #4
 800666e:	fb20 f000 	smuad	r0, r0, r0
 8006672:	4631      	mov	r1, r6
 8006674:	1440      	asrs	r0, r0, #17
 8006676:	3602      	adds	r6, #2
 8006678:	f000 f804 	bl	8006684 <arm_sqrt_q15>
 800667c:	42be      	cmp	r6, r7
 800667e:	d1f4      	bne.n	800666a <arm_cmplx_mag_q15+0x6e>
 8006680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006684 <arm_sqrt_q15>:
 8006684:	2800      	cmp	r0, #0
 8006686:	dd5c      	ble.n	8006742 <arm_sqrt_q15+0xbe>
 8006688:	fab0 f280 	clz	r2, r0
 800668c:	3a11      	subs	r2, #17
 800668e:	b470      	push	{r4, r5, r6}
 8006690:	b294      	uxth	r4, r2
 8006692:	f012 0201 	ands.w	r2, r2, #1
 8006696:	bf1a      	itte	ne
 8006698:	f104 33ff 	addne.w	r3, r4, #4294967295
 800669c:	4098      	lslne	r0, r3
 800669e:	40a0      	lsleq	r0, r4
 80066a0:	b200      	sxth	r0, r0
 80066a2:	ee07 0a90 	vmov	s15, r0
 80066a6:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 80066aa:	4b28      	ldr	r3, [pc, #160]	@ (800674c <arm_sqrt_q15+0xc8>)
 80066ac:	ee17 5a90 	vmov	r5, s15
 80066b0:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 80066b4:	ee07 3a90 	vmov	s15, r3
 80066b8:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 80066bc:	1046      	asrs	r6, r0, #1
 80066be:	ee17 3a90 	vmov	r3, s15
 80066c2:	b21b      	sxth	r3, r3
 80066c4:	fb03 f503 	mul.w	r5, r3, r3
 80066c8:	13ed      	asrs	r5, r5, #15
 80066ca:	fb15 f506 	smulbb	r5, r5, r6
 80066ce:	13ed      	asrs	r5, r5, #15
 80066d0:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 80066d4:	fb03 f305 	mul.w	r3, r3, r5
 80066d8:	f343 334f 	sbfx	r3, r3, #13, #16
 80066dc:	f023 0303 	bic.w	r3, r3, #3
 80066e0:	fb03 f503 	mul.w	r5, r3, r3
 80066e4:	13ed      	asrs	r5, r5, #15
 80066e6:	fb15 f506 	smulbb	r5, r5, r6
 80066ea:	13ed      	asrs	r5, r5, #15
 80066ec:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 80066f0:	fb03 f305 	mul.w	r3, r3, r5
 80066f4:	f343 334f 	sbfx	r3, r3, #13, #16
 80066f8:	f023 0303 	bic.w	r3, r3, #3
 80066fc:	fb03 f503 	mul.w	r5, r3, r3
 8006700:	13ed      	asrs	r5, r5, #15
 8006702:	fb15 f506 	smulbb	r5, r5, r6
 8006706:	13ed      	asrs	r5, r5, #15
 8006708:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 800670c:	fb03 f305 	mul.w	r3, r3, r5
 8006710:	13db      	asrs	r3, r3, #15
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	fb13 f300 	smulbb	r3, r3, r0
 8006718:	f343 338f 	sbfx	r3, r3, #14, #16
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	b13a      	cbz	r2, 8006732 <arm_sqrt_q15+0xae>
 8006722:	3c01      	subs	r4, #1
 8006724:	1064      	asrs	r4, r4, #1
 8006726:	4123      	asrs	r3, r4
 8006728:	b21b      	sxth	r3, r3
 800672a:	2000      	movs	r0, #0
 800672c:	bc70      	pop	{r4, r5, r6}
 800672e:	800b      	strh	r3, [r1, #0]
 8006730:	4770      	bx	lr
 8006732:	f344 044e 	sbfx	r4, r4, #1, #15
 8006736:	4123      	asrs	r3, r4
 8006738:	b21b      	sxth	r3, r3
 800673a:	2000      	movs	r0, #0
 800673c:	bc70      	pop	{r4, r5, r6}
 800673e:	800b      	strh	r3, [r1, #0]
 8006740:	4770      	bx	lr
 8006742:	2300      	movs	r3, #0
 8006744:	800b      	strh	r3, [r1, #0]
 8006746:	f04f 30ff 	mov.w	r0, #4294967295
 800674a:	4770      	bx	lr
 800674c:	5f3759df 	.word	0x5f3759df

08006750 <arm_shift_q15>:
 8006750:	2900      	cmp	r1, #0
 8006752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800675a:	db4a      	blt.n	80067f2 <arm_shift_q15+0xa2>
 800675c:	f1bc 0f00 	cmp.w	ip, #0
 8006760:	d02b      	beq.n	80067ba <arm_shift_q15+0x6a>
 8006762:	f100 0508 	add.w	r5, r0, #8
 8006766:	4616      	mov	r6, r2
 8006768:	4667      	mov	r7, ip
 800676a:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 800676e:	408c      	lsls	r4, r1
 8006770:	f304 040f 	ssat	r4, #16, r4
 8006774:	f935 ec06 	ldrsh.w	lr, [r5, #-6]
 8006778:	fa0e fe01 	lsl.w	lr, lr, r1
 800677c:	f30e 0e0f 	ssat	lr, #16, lr
 8006780:	b2a4      	uxth	r4, r4
 8006782:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8006786:	6034      	str	r4, [r6, #0]
 8006788:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 800678c:	408c      	lsls	r4, r1
 800678e:	f304 040f 	ssat	r4, #16, r4
 8006792:	f935 ec02 	ldrsh.w	lr, [r5, #-2]
 8006796:	fa0e fe01 	lsl.w	lr, lr, r1
 800679a:	f30e 0e0f 	ssat	lr, #16, lr
 800679e:	b2a4      	uxth	r4, r4
 80067a0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80067a4:	3f01      	subs	r7, #1
 80067a6:	6074      	str	r4, [r6, #4]
 80067a8:	f105 0508 	add.w	r5, r5, #8
 80067ac:	f106 0608 	add.w	r6, r6, #8
 80067b0:	d1db      	bne.n	800676a <arm_shift_q15+0x1a>
 80067b2:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80067b6:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 80067ba:	f013 0303 	ands.w	r3, r3, #3
 80067be:	d016      	beq.n	80067ee <arm_shift_q15+0x9e>
 80067c0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80067c4:	408c      	lsls	r4, r1
 80067c6:	f304 040f 	ssat	r4, #16, r4
 80067ca:	3b01      	subs	r3, #1
 80067cc:	8014      	strh	r4, [r2, #0]
 80067ce:	d00e      	beq.n	80067ee <arm_shift_q15+0x9e>
 80067d0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80067d4:	408c      	lsls	r4, r1
 80067d6:	f304 040f 	ssat	r4, #16, r4
 80067da:	2b01      	cmp	r3, #1
 80067dc:	8054      	strh	r4, [r2, #2]
 80067de:	d006      	beq.n	80067ee <arm_shift_q15+0x9e>
 80067e0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80067e4:	fa03 f101 	lsl.w	r1, r3, r1
 80067e8:	f301 010f 	ssat	r1, #16, r1
 80067ec:	8091      	strh	r1, [r2, #4]
 80067ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f2:	f1bc 0f00 	cmp.w	ip, #0
 80067f6:	d025      	beq.n	8006844 <arm_shift_q15+0xf4>
 80067f8:	424f      	negs	r7, r1
 80067fa:	f100 0508 	add.w	r5, r0, #8
 80067fe:	4616      	mov	r6, r2
 8006800:	46e6      	mov	lr, ip
 8006802:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 8006806:	f935 8c06 	ldrsh.w	r8, [r5, #-6]
 800680a:	413c      	asrs	r4, r7
 800680c:	fa48 f807 	asr.w	r8, r8, r7
 8006810:	b2a4      	uxth	r4, r4
 8006812:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8006816:	6034      	str	r4, [r6, #0]
 8006818:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 800681c:	f935 8c02 	ldrsh.w	r8, [r5, #-2]
 8006820:	413c      	asrs	r4, r7
 8006822:	b2a4      	uxth	r4, r4
 8006824:	fa48 f807 	asr.w	r8, r8, r7
 8006828:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800682c:	f1be 0e01 	subs.w	lr, lr, #1
 8006830:	6074      	str	r4, [r6, #4]
 8006832:	f105 0508 	add.w	r5, r5, #8
 8006836:	f106 0608 	add.w	r6, r6, #8
 800683a:	d1e2      	bne.n	8006802 <arm_shift_q15+0xb2>
 800683c:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8006840:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8006844:	f013 0303 	ands.w	r3, r3, #3
 8006848:	d0d1      	beq.n	80067ee <arm_shift_q15+0x9e>
 800684a:	f9b0 4000 	ldrsh.w	r4, [r0]
 800684e:	4249      	negs	r1, r1
 8006850:	410c      	asrs	r4, r1
 8006852:	3b01      	subs	r3, #1
 8006854:	8014      	strh	r4, [r2, #0]
 8006856:	d0ca      	beq.n	80067ee <arm_shift_q15+0x9e>
 8006858:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800685c:	2b01      	cmp	r3, #1
 800685e:	fa44 f401 	asr.w	r4, r4, r1
 8006862:	8054      	strh	r4, [r2, #2]
 8006864:	d0c3      	beq.n	80067ee <arm_shift_q15+0x9e>
 8006866:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800686a:	fa43 f101 	asr.w	r1, r3, r1
 800686e:	8091      	strh	r1, [r2, #4]
 8006870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006874 <arm_mult_q15>:
 8006874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006878:	ea5f 0893 	movs.w	r8, r3, lsr #2
 800687c:	d037      	beq.n	80068ee <arm_mult_q15+0x7a>
 800687e:	4694      	mov	ip, r2
 8006880:	460f      	mov	r7, r1
 8006882:	4606      	mov	r6, r0
 8006884:	46c6      	mov	lr, r8
 8006886:	f8d6 a000 	ldr.w	sl, [r6]
 800688a:	683d      	ldr	r5, [r7, #0]
 800688c:	6874      	ldr	r4, [r6, #4]
 800688e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8006892:	fb15 f93a 	smultt	r9, r5, sl
 8006896:	ea4f 39e9 	mov.w	r9, r9, asr #15
 800689a:	3608      	adds	r6, #8
 800689c:	3708      	adds	r7, #8
 800689e:	f309 090f 	ssat	r9, #16, r9
 80068a2:	fb1a fa05 	smulbb	sl, sl, r5
 80068a6:	ea4f 3aea 	mov.w	sl, sl, asr #15
 80068aa:	f30a 0a0f 	ssat	sl, #16, sl
 80068ae:	fb1b f534 	smultt	r5, fp, r4
 80068b2:	13ed      	asrs	r5, r5, #15
 80068b4:	f305 050f 	ssat	r5, #16, r5
 80068b8:	fb14 f40b 	smulbb	r4, r4, fp
 80068bc:	13e4      	asrs	r4, r4, #15
 80068be:	f304 040f 	ssat	r4, #16, r4
 80068c2:	fa1f fa8a 	uxth.w	sl, sl
 80068c6:	b2a4      	uxth	r4, r4
 80068c8:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 80068cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80068d0:	f1be 0e01 	subs.w	lr, lr, #1
 80068d4:	f8cc 9000 	str.w	r9, [ip]
 80068d8:	f8cc 4004 	str.w	r4, [ip, #4]
 80068dc:	f10c 0c08 	add.w	ip, ip, #8
 80068e0:	d1d1      	bne.n	8006886 <arm_mult_q15+0x12>
 80068e2:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 80068e6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80068ea:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80068ee:	f013 0303 	ands.w	r3, r3, #3
 80068f2:	d01b      	beq.n	800692c <arm_mult_q15+0xb8>
 80068f4:	880c      	ldrh	r4, [r1, #0]
 80068f6:	8805      	ldrh	r5, [r0, #0]
 80068f8:	fb14 f405 	smulbb	r4, r4, r5
 80068fc:	13e4      	asrs	r4, r4, #15
 80068fe:	f304 040f 	ssat	r4, #16, r4
 8006902:	3b01      	subs	r3, #1
 8006904:	8014      	strh	r4, [r2, #0]
 8006906:	d011      	beq.n	800692c <arm_mult_q15+0xb8>
 8006908:	884c      	ldrh	r4, [r1, #2]
 800690a:	8845      	ldrh	r5, [r0, #2]
 800690c:	fb14 f405 	smulbb	r4, r4, r5
 8006910:	13e4      	asrs	r4, r4, #15
 8006912:	f304 040f 	ssat	r4, #16, r4
 8006916:	2b01      	cmp	r3, #1
 8006918:	8054      	strh	r4, [r2, #2]
 800691a:	d007      	beq.n	800692c <arm_mult_q15+0xb8>
 800691c:	8883      	ldrh	r3, [r0, #4]
 800691e:	8889      	ldrh	r1, [r1, #4]
 8006920:	fb13 f301 	smulbb	r3, r3, r1
 8006924:	13db      	asrs	r3, r3, #15
 8006926:	f303 030f 	ssat	r3, #16, r3
 800692a:	8093      	strh	r3, [r2, #4]
 800692c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006930 <arm_dot_prod_q15>:
 8006930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006934:	ea5f 0992 	movs.w	r9, r2, lsr #2
 8006938:	d036      	beq.n	80069a8 <arm_dot_prod_q15+0x78>
 800693a:	468e      	mov	lr, r1
 800693c:	4684      	mov	ip, r0
 800693e:	46c8      	mov	r8, r9
 8006940:	2600      	movs	r6, #0
 8006942:	2700      	movs	r7, #0
 8006944:	f8dc a000 	ldr.w	sl, [ip]
 8006948:	f8de b000 	ldr.w	fp, [lr]
 800694c:	4635      	mov	r5, r6
 800694e:	463c      	mov	r4, r7
 8006950:	fbca 54cb 	smlald	r5, r4, sl, fp
 8006954:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006958:	f8de 7004 	ldr.w	r7, [lr, #4]
 800695c:	f10c 0c08 	add.w	ip, ip, #8
 8006960:	f10e 0e08 	add.w	lr, lr, #8
 8006964:	fbc6 54c7 	smlald	r5, r4, r6, r7
 8006968:	f1b8 0801 	subs.w	r8, r8, #1
 800696c:	462e      	mov	r6, r5
 800696e:	4627      	mov	r7, r4
 8006970:	d1e8      	bne.n	8006944 <arm_dot_prod_q15+0x14>
 8006972:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8006976:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 800697a:	f012 0203 	ands.w	r2, r2, #3
 800697e:	d00f      	beq.n	80069a0 <arm_dot_prod_q15+0x70>
 8006980:	880d      	ldrh	r5, [r1, #0]
 8006982:	8804      	ldrh	r4, [r0, #0]
 8006984:	3a01      	subs	r2, #1
 8006986:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 800698a:	d009      	beq.n	80069a0 <arm_dot_prod_q15+0x70>
 800698c:	884d      	ldrh	r5, [r1, #2]
 800698e:	8844      	ldrh	r4, [r0, #2]
 8006990:	2a01      	cmp	r2, #1
 8006992:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 8006996:	d003      	beq.n	80069a0 <arm_dot_prod_q15+0x70>
 8006998:	8880      	ldrh	r0, [r0, #4]
 800699a:	888a      	ldrh	r2, [r1, #4]
 800699c:	fbc0 6782 	smlalbb	r6, r7, r0, r2
 80069a0:	e9c3 6700 	strd	r6, r7, [r3]
 80069a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a8:	2600      	movs	r6, #0
 80069aa:	2700      	movs	r7, #0
 80069ac:	e7e5      	b.n	800697a <arm_dot_prod_q15+0x4a>
 80069ae:	bf00      	nop

080069b0 <arm_cfft_radix4by2_q15>:
 80069b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b4:	084d      	lsrs	r5, r1, #1
 80069b6:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80069ba:	4616      	mov	r6, r2
 80069bc:	d047      	beq.n	8006a4e <arm_cfft_radix4by2_q15+0x9e>
 80069be:	4604      	mov	r4, r0
 80069c0:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8006a68 <arm_cfft_radix4by2_q15+0xb8>
 80069c4:	4696      	mov	lr, r2
 80069c6:	4638      	mov	r0, r7
 80069c8:	4621      	mov	r1, r4
 80069ca:	462a      	mov	r2, r5
 80069cc:	f04f 0c00 	mov.w	ip, #0
 80069d0:	680b      	ldr	r3, [r1, #0]
 80069d2:	f8d0 a000 	ldr.w	sl, [r0]
 80069d6:	fa93 f32c 	shadd16	r3, r3, ip
 80069da:	fa9a fa2c 	shadd16	sl, sl, ip
 80069de:	fa93 f92a 	shadd16	r9, r3, sl
 80069e2:	fad3 fa1a 	qsub16	sl, r3, sl
 80069e6:	f85e 3b04 	ldr.w	r3, [lr], #4
 80069ea:	f841 9b04 	str.w	r9, [r1], #4
 80069ee:	fb23 f90a 	smuad	r9, r3, sl
 80069f2:	fb43 f31a 	smusdx	r3, r3, sl
 80069f6:	ea03 0308 	and.w	r3, r3, r8
 80069fa:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 80069fe:	3a01      	subs	r2, #1
 8006a00:	f840 3b04 	str.w	r3, [r0], #4
 8006a04:	d1e4      	bne.n	80069d0 <arm_cfft_radix4by2_q15+0x20>
 8006a06:	4629      	mov	r1, r5
 8006a08:	2302      	movs	r3, #2
 8006a0a:	4632      	mov	r2, r6
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 f8e9 	bl	8006be4 <arm_radix4_butterfly_q15>
 8006a12:	4638      	mov	r0, r7
 8006a14:	4629      	mov	r1, r5
 8006a16:	4632      	mov	r2, r6
 8006a18:	2302      	movs	r3, #2
 8006a1a:	f000 f8e3 	bl	8006be4 <arm_radix4_butterfly_q15>
 8006a1e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8006a22:	4620      	mov	r0, r4
 8006a24:	f9b0 6000 	ldrsh.w	r6, [r0]
 8006a28:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8006a2c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8006a30:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8006a34:	0076      	lsls	r6, r6, #1
 8006a36:	0064      	lsls	r4, r4, #1
 8006a38:	0052      	lsls	r2, r2, #1
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	8006      	strh	r6, [r0, #0]
 8006a3e:	8044      	strh	r4, [r0, #2]
 8006a40:	8082      	strh	r2, [r0, #4]
 8006a42:	80c3      	strh	r3, [r0, #6]
 8006a44:	3008      	adds	r0, #8
 8006a46:	4285      	cmp	r5, r0
 8006a48:	d1ec      	bne.n	8006a24 <arm_cfft_radix4by2_q15+0x74>
 8006a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4e:	4629      	mov	r1, r5
 8006a50:	2302      	movs	r3, #2
 8006a52:	f000 f8c7 	bl	8006be4 <arm_radix4_butterfly_q15>
 8006a56:	4632      	mov	r2, r6
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a62:	f000 b8bf 	b.w	8006be4 <arm_radix4_butterfly_q15>
 8006a66:	bf00      	nop
 8006a68:	ffff0000 	.word	0xffff0000

08006a6c <arm_cfft_radix4by2_inverse_q15>:
 8006a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a70:	084d      	lsrs	r5, r1, #1
 8006a72:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8006a76:	4616      	mov	r6, r2
 8006a78:	d047      	beq.n	8006b0a <arm_cfft_radix4by2_inverse_q15+0x9e>
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8006b24 <arm_cfft_radix4by2_inverse_q15+0xb8>
 8006a80:	4696      	mov	lr, r2
 8006a82:	4638      	mov	r0, r7
 8006a84:	4621      	mov	r1, r4
 8006a86:	462a      	mov	r2, r5
 8006a88:	f04f 0c00 	mov.w	ip, #0
 8006a8c:	680b      	ldr	r3, [r1, #0]
 8006a8e:	f8d0 a000 	ldr.w	sl, [r0]
 8006a92:	fa93 f32c 	shadd16	r3, r3, ip
 8006a96:	fa9a fa2c 	shadd16	sl, sl, ip
 8006a9a:	fa93 f92a 	shadd16	r9, r3, sl
 8006a9e:	fad3 fa1a 	qsub16	sl, r3, sl
 8006aa2:	f85e 3b04 	ldr.w	r3, [lr], #4
 8006aa6:	f841 9b04 	str.w	r9, [r1], #4
 8006aaa:	fb43 f90a 	smusd	r9, r3, sl
 8006aae:	fb23 f31a 	smuadx	r3, r3, sl
 8006ab2:	ea03 0308 	and.w	r3, r3, r8
 8006ab6:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8006aba:	3a01      	subs	r2, #1
 8006abc:	f840 3b04 	str.w	r3, [r0], #4
 8006ac0:	d1e4      	bne.n	8006a8c <arm_cfft_radix4by2_inverse_q15+0x20>
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	4632      	mov	r2, r6
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 fa35 	bl	8006f38 <arm_radix4_butterfly_inverse_q15>
 8006ace:	4638      	mov	r0, r7
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	4632      	mov	r2, r6
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	f000 fa2f 	bl	8006f38 <arm_radix4_butterfly_inverse_q15>
 8006ada:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f9b0 6000 	ldrsh.w	r6, [r0]
 8006ae4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8006ae8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8006aec:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8006af0:	0076      	lsls	r6, r6, #1
 8006af2:	0064      	lsls	r4, r4, #1
 8006af4:	0052      	lsls	r2, r2, #1
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	8006      	strh	r6, [r0, #0]
 8006afa:	8044      	strh	r4, [r0, #2]
 8006afc:	8082      	strh	r2, [r0, #4]
 8006afe:	80c3      	strh	r3, [r0, #6]
 8006b00:	3008      	adds	r0, #8
 8006b02:	4285      	cmp	r5, r0
 8006b04:	d1ec      	bne.n	8006ae0 <arm_cfft_radix4by2_inverse_q15+0x74>
 8006b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	f000 fa13 	bl	8006f38 <arm_radix4_butterfly_inverse_q15>
 8006b12:	4632      	mov	r2, r6
 8006b14:	4629      	mov	r1, r5
 8006b16:	4638      	mov	r0, r7
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1e:	f000 ba0b 	b.w	8006f38 <arm_radix4_butterfly_inverse_q15>
 8006b22:	bf00      	nop
 8006b24:	ffff0000 	.word	0xffff0000

08006b28 <arm_cfft_q15>:
 8006b28:	b5e0      	push	{r5, r6, r7, lr}
 8006b2a:	2a01      	cmp	r2, #1
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	4605      	mov	r5, r0
 8006b30:	8801      	ldrh	r1, [r0, #0]
 8006b32:	461e      	mov	r6, r3
 8006b34:	d02f      	beq.n	8006b96 <arm_cfft_q15+0x6e>
 8006b36:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006b3a:	d026      	beq.n	8006b8a <arm_cfft_q15+0x62>
 8006b3c:	d908      	bls.n	8006b50 <arm_cfft_q15+0x28>
 8006b3e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006b42:	d017      	beq.n	8006b74 <arm_cfft_q15+0x4c>
 8006b44:	d91b      	bls.n	8006b7e <arm_cfft_q15+0x56>
 8006b46:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006b4a:	d01e      	beq.n	8006b8a <arm_cfft_q15+0x62>
 8006b4c:	b93e      	cbnz	r6, 8006b5e <arm_cfft_q15+0x36>
 8006b4e:	bde0      	pop	{r5, r6, r7, pc}
 8006b50:	2940      	cmp	r1, #64	@ 0x40
 8006b52:	d01a      	beq.n	8006b8a <arm_cfft_q15+0x62>
 8006b54:	d90a      	bls.n	8006b6c <arm_cfft_q15+0x44>
 8006b56:	2980      	cmp	r1, #128	@ 0x80
 8006b58:	d00c      	beq.n	8006b74 <arm_cfft_q15+0x4c>
 8006b5a:	2e00      	cmp	r6, #0
 8006b5c:	d0f7      	beq.n	8006b4e <arm_cfft_q15+0x26>
 8006b5e:	68aa      	ldr	r2, [r5, #8]
 8006b60:	89a9      	ldrh	r1, [r5, #12]
 8006b62:	4638      	mov	r0, r7
 8006b64:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8006b68:	f000 bb90 	b.w	800728c <arm_bitreversal_16>
 8006b6c:	2910      	cmp	r1, #16
 8006b6e:	d00c      	beq.n	8006b8a <arm_cfft_q15+0x62>
 8006b70:	2920      	cmp	r1, #32
 8006b72:	d1eb      	bne.n	8006b4c <arm_cfft_q15+0x24>
 8006b74:	686a      	ldr	r2, [r5, #4]
 8006b76:	4638      	mov	r0, r7
 8006b78:	f7ff ff1a 	bl	80069b0 <arm_cfft_radix4by2_q15>
 8006b7c:	e7e6      	b.n	8006b4c <arm_cfft_q15+0x24>
 8006b7e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006b82:	d0f7      	beq.n	8006b74 <arm_cfft_q15+0x4c>
 8006b84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006b88:	d1e0      	bne.n	8006b4c <arm_cfft_q15+0x24>
 8006b8a:	686a      	ldr	r2, [r5, #4]
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	4638      	mov	r0, r7
 8006b90:	f000 f828 	bl	8006be4 <arm_radix4_butterfly_q15>
 8006b94:	e7da      	b.n	8006b4c <arm_cfft_q15+0x24>
 8006b96:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006b9a:	d01d      	beq.n	8006bd8 <arm_cfft_q15+0xb0>
 8006b9c:	d907      	bls.n	8006bae <arm_cfft_q15+0x86>
 8006b9e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006ba2:	d00e      	beq.n	8006bc2 <arm_cfft_q15+0x9a>
 8006ba4:	d912      	bls.n	8006bcc <arm_cfft_q15+0xa4>
 8006ba6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006baa:	d1cf      	bne.n	8006b4c <arm_cfft_q15+0x24>
 8006bac:	e014      	b.n	8006bd8 <arm_cfft_q15+0xb0>
 8006bae:	2940      	cmp	r1, #64	@ 0x40
 8006bb0:	d012      	beq.n	8006bd8 <arm_cfft_q15+0xb0>
 8006bb2:	d902      	bls.n	8006bba <arm_cfft_q15+0x92>
 8006bb4:	2980      	cmp	r1, #128	@ 0x80
 8006bb6:	d004      	beq.n	8006bc2 <arm_cfft_q15+0x9a>
 8006bb8:	e7c8      	b.n	8006b4c <arm_cfft_q15+0x24>
 8006bba:	2910      	cmp	r1, #16
 8006bbc:	d00c      	beq.n	8006bd8 <arm_cfft_q15+0xb0>
 8006bbe:	2920      	cmp	r1, #32
 8006bc0:	d1c4      	bne.n	8006b4c <arm_cfft_q15+0x24>
 8006bc2:	686a      	ldr	r2, [r5, #4]
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f7ff ff51 	bl	8006a6c <arm_cfft_radix4by2_inverse_q15>
 8006bca:	e7bf      	b.n	8006b4c <arm_cfft_q15+0x24>
 8006bcc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006bd0:	d0f7      	beq.n	8006bc2 <arm_cfft_q15+0x9a>
 8006bd2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006bd6:	d1b9      	bne.n	8006b4c <arm_cfft_q15+0x24>
 8006bd8:	686a      	ldr	r2, [r5, #4]
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4638      	mov	r0, r7
 8006bde:	f000 f9ab 	bl	8006f38 <arm_radix4_butterfly_inverse_q15>
 8006be2:	e7b3      	b.n	8006b4c <arm_cfft_q15+0x24>

08006be4 <arm_radix4_butterfly_q15>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	b093      	sub	sp, #76	@ 0x4c
 8006bea:	f021 0a03 	bic.w	sl, r1, #3
 8006bee:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8006bf2:	9210      	str	r2, [sp, #64]	@ 0x40
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8006bfa:	eb0c 050a 	add.w	r5, ip, sl
 8006bfe:	9101      	str	r1, [sp, #4]
 8006c00:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006c02:	9303      	str	r3, [sp, #12]
 8006c04:	4482      	add	sl, r0
 8006c06:	9211      	str	r2, [sp, #68]	@ 0x44
 8006c08:	f040 8124 	bne.w	8006e54 <arm_radix4_butterfly_q15+0x270>
 8006c0c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006c0e:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8006f34 <arm_radix4_butterfly_q15+0x350>
 8006c12:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8006c14:	f8cd a008 	str.w	sl, [sp, #8]
 8006c18:	4693      	mov	fp, r2
 8006c1a:	4690      	mov	r8, r2
 8006c1c:	4657      	mov	r7, sl
 8006c1e:	2300      	movs	r3, #0
 8006c20:	4691      	mov	r9, r2
 8006c22:	6830      	ldr	r0, [r6, #0]
 8006c24:	f8dc 2000 	ldr.w	r2, [ip]
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	fa90 f023 	shadd16	r0, r0, r3
 8006c2e:	fa91 f123 	shadd16	r1, r1, r3
 8006c32:	fa90 f023 	shadd16	r0, r0, r3
 8006c36:	fa91 fa23 	shadd16	sl, r1, r3
 8006c3a:	fa92 f223 	shadd16	r2, r2, r3
 8006c3e:	6829      	ldr	r1, [r5, #0]
 8006c40:	fa92 f223 	shadd16	r2, r2, r3
 8006c44:	fa91 f123 	shadd16	r1, r1, r3
 8006c48:	fa90 f412 	qadd16	r4, r0, r2
 8006c4c:	fa91 f123 	shadd16	r1, r1, r3
 8006c50:	fa9a f111 	qadd16	r1, sl, r1
 8006c54:	fa94 fa21 	shadd16	sl, r4, r1
 8006c58:	f846 ab04 	str.w	sl, [r6], #4
 8006c5c:	fad4 f411 	qsub16	r4, r4, r1
 8006c60:	fad0 f212 	qsub16	r2, r0, r2
 8006c64:	f85b 1b08 	ldr.w	r1, [fp], #8
 8006c68:	fb21 f004 	smuad	r0, r1, r4
 8006c6c:	fb41 f114 	smusdx	r1, r1, r4
 8006c70:	ea01 010e 	and.w	r1, r1, lr
 8006c74:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8006c78:	6838      	ldr	r0, [r7, #0]
 8006c7a:	f847 1b04 	str.w	r1, [r7], #4
 8006c7e:	fa90 f023 	shadd16	r0, r0, r3
 8006c82:	682c      	ldr	r4, [r5, #0]
 8006c84:	fa90 f023 	shadd16	r0, r0, r3
 8006c88:	fa94 f423 	shadd16	r4, r4, r3
 8006c8c:	f859 1b04 	ldr.w	r1, [r9], #4
 8006c90:	fa94 f423 	shadd16	r4, r4, r3
 8006c94:	fad0 f014 	qsub16	r0, r0, r4
 8006c98:	faa2 f410 	qasx	r4, r2, r0
 8006c9c:	fae2 f210 	qsax	r2, r2, r0
 8006ca0:	fb21 fa02 	smuad	sl, r1, r2
 8006ca4:	fb41 f212 	smusdx	r2, r1, r2
 8006ca8:	ea02 020e 	and.w	r2, r2, lr
 8006cac:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8006cb0:	f84c 2b04 	str.w	r2, [ip], #4
 8006cb4:	f858 2b0c 	ldr.w	r2, [r8], #12
 8006cb8:	fb22 f104 	smuad	r1, r2, r4
 8006cbc:	fb42 f214 	smusdx	r2, r2, r4
 8006cc0:	ea02 020e 	and.w	r2, r2, lr
 8006cc4:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8006cc8:	f845 2b04 	str.w	r2, [r5], #4
 8006ccc:	9a02      	ldr	r2, [sp, #8]
 8006cce:	42b2      	cmp	r2, r6
 8006cd0:	d1a7      	bne.n	8006c22 <arm_radix4_butterfly_q15+0x3e>
 8006cd2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	2a04      	cmp	r2, #4
 8006cd8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006cdc:	f240 8127 	bls.w	8006f2e <arm_radix4_butterfly_q15+0x34a>
 8006ce0:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8006f34 <arm_radix4_butterfly_q15+0x350>
 8006ce4:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ce6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006ce8:	9102      	str	r1, [sp, #8]
 8006cea:	4608      	mov	r0, r1
 8006cec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006cf0:	0889      	lsrs	r1, r1, #2
 8006cf2:	0092      	lsls	r2, r2, #2
 8006cf4:	0086      	lsls	r6, r0, #2
 8006cf6:	9801      	ldr	r0, [sp, #4]
 8006cf8:	920d      	str	r2, [sp, #52]	@ 0x34
 8006cfa:	008c      	lsls	r4, r1, #2
 8006cfc:	009a      	lsls	r2, r3, #2
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4288      	cmp	r0, r1
 8006d02:	940a      	str	r4, [sp, #40]	@ 0x28
 8006d04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d06:	4604      	mov	r4, r0
 8006d08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d0a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8006d0c:	910e      	str	r1, [sp, #56]	@ 0x38
 8006d0e:	bf28      	it	cs
 8006d10:	460c      	movcs	r4, r1
 8006d12:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8006d16:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8006d1a:	9308      	str	r3, [sp, #32]
 8006d1c:	9307      	str	r3, [sp, #28]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	940c      	str	r4, [sp, #48]	@ 0x30
 8006d22:	9104      	str	r1, [sp, #16]
 8006d24:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d26:	9303      	str	r3, [sp, #12]
 8006d28:	9b08      	ldr	r3, [sp, #32]
 8006d2a:	9a05      	ldr	r2, [sp, #20]
 8006d2c:	f8d3 9000 	ldr.w	r9, [r3]
 8006d30:	9b07      	ldr	r3, [sp, #28]
 8006d32:	9f03      	ldr	r7, [sp, #12]
 8006d34:	f8d3 8000 	ldr.w	r8, [r3]
 8006d38:	9b06      	ldr	r3, [sp, #24]
 8006d3a:	f8d3 e000 	ldr.w	lr, [r3]
 8006d3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d40:	4615      	mov	r5, r2
 8006d42:	1898      	adds	r0, r3, r2
 8006d44:	9a04      	ldr	r2, [sp, #16]
 8006d46:	4614      	mov	r4, r2
 8006d48:	1899      	adds	r1, r3, r2
 8006d4a:	682a      	ldr	r2, [r5, #0]
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	f8d0 b000 	ldr.w	fp, [r0]
 8006d52:	fa92 fc13 	qadd16	ip, r2, r3
 8006d56:	fad2 f213 	qsub16	r2, r2, r3
 8006d5a:	680b      	ldr	r3, [r1, #0]
 8006d5c:	fa9b f313 	qadd16	r3, fp, r3
 8006d60:	fa9c fb23 	shadd16	fp, ip, r3
 8006d64:	fadc f323 	shsub16	r3, ip, r3
 8006d68:	f04f 0c00 	mov.w	ip, #0
 8006d6c:	fa9b fb2c 	shadd16	fp, fp, ip
 8006d70:	f8c5 b000 	str.w	fp, [r5]
 8006d74:	4435      	add	r5, r6
 8006d76:	fb28 fb03 	smuad	fp, r8, r3
 8006d7a:	fb48 f313 	smusdx	r3, r8, r3
 8006d7e:	ea03 030a 	and.w	r3, r3, sl
 8006d82:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8006d86:	f8d0 b000 	ldr.w	fp, [r0]
 8006d8a:	6003      	str	r3, [r0, #0]
 8006d8c:	f8d1 c000 	ldr.w	ip, [r1]
 8006d90:	fadb fc1c 	qsub16	ip, fp, ip
 8006d94:	4430      	add	r0, r6
 8006d96:	faa2 f32c 	shasx	r3, r2, ip
 8006d9a:	fae2 f22c 	shsax	r2, r2, ip
 8006d9e:	fb29 fc02 	smuad	ip, r9, r2
 8006da2:	fb49 f212 	smusdx	r2, r9, r2
 8006da6:	ea02 020a 	and.w	r2, r2, sl
 8006daa:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8006dae:	6022      	str	r2, [r4, #0]
 8006db0:	4434      	add	r4, r6
 8006db2:	fb2e f203 	smuad	r2, lr, r3
 8006db6:	fb4e f313 	smusdx	r3, lr, r3
 8006dba:	ea03 030a 	and.w	r3, r3, sl
 8006dbe:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8006dc2:	9a02      	ldr	r2, [sp, #8]
 8006dc4:	600b      	str	r3, [r1, #0]
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	4417      	add	r7, r2
 8006dca:	42bb      	cmp	r3, r7
 8006dcc:	4431      	add	r1, r6
 8006dce:	d8bc      	bhi.n	8006d4a <arm_radix4_butterfly_q15+0x166>
 8006dd0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	9208      	str	r2, [sp, #32]
 8006dd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006dda:	9a07      	ldr	r2, [sp, #28]
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	440a      	add	r2, r1
 8006de0:	9207      	str	r2, [sp, #28]
 8006de2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006de4:	9a06      	ldr	r2, [sp, #24]
 8006de6:	440a      	add	r2, r1
 8006de8:	9206      	str	r2, [sp, #24]
 8006dea:	9a05      	ldr	r2, [sp, #20]
 8006dec:	3204      	adds	r2, #4
 8006dee:	9205      	str	r2, [sp, #20]
 8006df0:	9a04      	ldr	r2, [sp, #16]
 8006df2:	3204      	adds	r2, #4
 8006df4:	9204      	str	r2, [sp, #16]
 8006df6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006df8:	3301      	adds	r3, #1
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	9303      	str	r3, [sp, #12]
 8006dfe:	d393      	bcc.n	8006d28 <arm_radix4_butterfly_q15+0x144>
 8006e00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e04:	2a04      	cmp	r2, #4
 8006e06:	f63f af6e 	bhi.w	8006ce6 <arm_radix4_butterfly_q15+0x102>
 8006e0a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e0e:	689d      	ldr	r5, [r3, #8]
 8006e10:	68de      	ldr	r6, [r3, #12]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	6859      	ldr	r1, [r3, #4]
 8006e16:	fa92 f015 	qadd16	r0, r2, r5
 8006e1a:	3c01      	subs	r4, #1
 8006e1c:	fad2 f215 	qsub16	r2, r2, r5
 8006e20:	f103 0310 	add.w	r3, r3, #16
 8006e24:	fa91 f516 	qadd16	r5, r1, r6
 8006e28:	fad1 f116 	qsub16	r1, r1, r6
 8006e2c:	fa90 f625 	shadd16	r6, r0, r5
 8006e30:	fad0 f025 	shsub16	r0, r0, r5
 8006e34:	f843 6c10 	str.w	r6, [r3, #-16]
 8006e38:	f843 0c0c 	str.w	r0, [r3, #-12]
 8006e3c:	fae2 f021 	shsax	r0, r2, r1
 8006e40:	faa2 f221 	shasx	r2, r2, r1
 8006e44:	f843 0c08 	str.w	r0, [r3, #-8]
 8006e48:	f843 2c04 	str.w	r2, [r3, #-4]
 8006e4c:	d1df      	bne.n	8006e0e <arm_radix4_butterfly_q15+0x22a>
 8006e4e:	b013      	add	sp, #76	@ 0x4c
 8006e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e54:	2400      	movs	r4, #0
 8006e56:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8006f34 <arm_radix4_butterfly_q15+0x350>
 8006e5a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	4680      	mov	r8, r0
 8006e60:	4691      	mov	r9, r2
 8006e62:	f8d8 0000 	ldr.w	r0, [r8]
 8006e66:	f8dc 2000 	ldr.w	r2, [ip]
 8006e6a:	f8da 1000 	ldr.w	r1, [sl]
 8006e6e:	fa90 f023 	shadd16	r0, r0, r3
 8006e72:	fa91 f123 	shadd16	r1, r1, r3
 8006e76:	fa90 f023 	shadd16	r0, r0, r3
 8006e7a:	fa91 fb23 	shadd16	fp, r1, r3
 8006e7e:	fa92 f223 	shadd16	r2, r2, r3
 8006e82:	6829      	ldr	r1, [r5, #0]
 8006e84:	fa92 f223 	shadd16	r2, r2, r3
 8006e88:	fa91 f123 	shadd16	r1, r1, r3
 8006e8c:	fa90 f612 	qadd16	r6, r0, r2
 8006e90:	fa91 f123 	shadd16	r1, r1, r3
 8006e94:	fa9b f111 	qadd16	r1, fp, r1
 8006e98:	fa96 fb21 	shadd16	fp, r6, r1
 8006e9c:	f848 bb04 	str.w	fp, [r8], #4
 8006ea0:	fad6 f611 	qsub16	r6, r6, r1
 8006ea4:	fad0 f212 	qsub16	r2, r0, r2
 8006ea8:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8006eac:	fb21 f006 	smuad	r0, r1, r6
 8006eb0:	fb41 f116 	smusdx	r1, r1, r6
 8006eb4:	ea01 010e 	and.w	r1, r1, lr
 8006eb8:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8006ebc:	f8da 0000 	ldr.w	r0, [sl]
 8006ec0:	f84a 1b04 	str.w	r1, [sl], #4
 8006ec4:	fa90 f023 	shadd16	r0, r0, r3
 8006ec8:	682e      	ldr	r6, [r5, #0]
 8006eca:	fa90 f023 	shadd16	r0, r0, r3
 8006ece:	fa96 f623 	shadd16	r6, r6, r3
 8006ed2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8006ed6:	fa96 f623 	shadd16	r6, r6, r3
 8006eda:	fad0 f016 	qsub16	r0, r0, r6
 8006ede:	faa2 f610 	qasx	r6, r2, r0
 8006ee2:	fae2 f210 	qsax	r2, r2, r0
 8006ee6:	fb21 fb02 	smuad	fp, r1, r2
 8006eea:	fb41 f212 	smusdx	r2, r1, r2
 8006eee:	ea02 020e 	and.w	r2, r2, lr
 8006ef2:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8006ef6:	f84c 2b04 	str.w	r2, [ip], #4
 8006efa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006efe:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006f02:	fb22 f106 	smuad	r1, r2, r6
 8006f06:	fb42 f216 	smusdx	r2, r2, r6
 8006f0a:	ea02 020e 	and.w	r2, r2, lr
 8006f0e:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8006f12:	f845 2b04 	str.w	r2, [r5], #4
 8006f16:	9a03      	ldr	r2, [sp, #12]
 8006f18:	f1b9 0901 	subs.w	r9, r9, #1
 8006f1c:	4414      	add	r4, r2
 8006f1e:	d1a0      	bne.n	8006e62 <arm_radix4_butterfly_q15+0x27e>
 8006f20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f22:	9b03      	ldr	r3, [sp, #12]
 8006f24:	2a04      	cmp	r2, #4
 8006f26:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006f2a:	f63f aed9 	bhi.w	8006ce0 <arm_radix4_butterfly_q15+0xfc>
 8006f2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f30:	4614      	mov	r4, r2
 8006f32:	e76c      	b.n	8006e0e <arm_radix4_butterfly_q15+0x22a>
 8006f34:	ffff0000 	.word	0xffff0000

08006f38 <arm_radix4_butterfly_inverse_q15>:
 8006f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	b093      	sub	sp, #76	@ 0x4c
 8006f3e:	f021 0a03 	bic.w	sl, r1, #3
 8006f42:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8006f46:	9210      	str	r2, [sp, #64]	@ 0x40
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8006f4e:	eb0c 050a 	add.w	r5, ip, sl
 8006f52:	9101      	str	r1, [sp, #4]
 8006f54:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006f56:	9303      	str	r3, [sp, #12]
 8006f58:	4482      	add	sl, r0
 8006f5a:	9211      	str	r2, [sp, #68]	@ 0x44
 8006f5c:	f040 8124 	bne.w	80071a8 <arm_radix4_butterfly_inverse_q15+0x270>
 8006f60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006f62:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8007288 <arm_radix4_butterfly_inverse_q15+0x350>
 8006f66:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8006f68:	f8cd a008 	str.w	sl, [sp, #8]
 8006f6c:	4693      	mov	fp, r2
 8006f6e:	4690      	mov	r8, r2
 8006f70:	4657      	mov	r7, sl
 8006f72:	2300      	movs	r3, #0
 8006f74:	4691      	mov	r9, r2
 8006f76:	6830      	ldr	r0, [r6, #0]
 8006f78:	f8dc 2000 	ldr.w	r2, [ip]
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	fa90 f023 	shadd16	r0, r0, r3
 8006f82:	fa91 f123 	shadd16	r1, r1, r3
 8006f86:	fa90 f023 	shadd16	r0, r0, r3
 8006f8a:	fa91 fa23 	shadd16	sl, r1, r3
 8006f8e:	fa92 f223 	shadd16	r2, r2, r3
 8006f92:	6829      	ldr	r1, [r5, #0]
 8006f94:	fa92 f223 	shadd16	r2, r2, r3
 8006f98:	fa91 f123 	shadd16	r1, r1, r3
 8006f9c:	fa90 f412 	qadd16	r4, r0, r2
 8006fa0:	fa91 f123 	shadd16	r1, r1, r3
 8006fa4:	fa9a f111 	qadd16	r1, sl, r1
 8006fa8:	fa94 fa21 	shadd16	sl, r4, r1
 8006fac:	f846 ab04 	str.w	sl, [r6], #4
 8006fb0:	fad4 f411 	qsub16	r4, r4, r1
 8006fb4:	fad0 f212 	qsub16	r2, r0, r2
 8006fb8:	f85b 1b08 	ldr.w	r1, [fp], #8
 8006fbc:	fb41 f004 	smusd	r0, r1, r4
 8006fc0:	fb21 f114 	smuadx	r1, r1, r4
 8006fc4:	ea01 010e 	and.w	r1, r1, lr
 8006fc8:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8006fcc:	6838      	ldr	r0, [r7, #0]
 8006fce:	f847 1b04 	str.w	r1, [r7], #4
 8006fd2:	fa90 f023 	shadd16	r0, r0, r3
 8006fd6:	682c      	ldr	r4, [r5, #0]
 8006fd8:	fa90 f023 	shadd16	r0, r0, r3
 8006fdc:	fa94 f423 	shadd16	r4, r4, r3
 8006fe0:	f859 1b04 	ldr.w	r1, [r9], #4
 8006fe4:	fa94 f423 	shadd16	r4, r4, r3
 8006fe8:	fad0 f014 	qsub16	r0, r0, r4
 8006fec:	fae2 f410 	qsax	r4, r2, r0
 8006ff0:	faa2 f210 	qasx	r2, r2, r0
 8006ff4:	fb41 fa02 	smusd	sl, r1, r2
 8006ff8:	fb21 f212 	smuadx	r2, r1, r2
 8006ffc:	ea02 020e 	and.w	r2, r2, lr
 8007000:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8007004:	f84c 2b04 	str.w	r2, [ip], #4
 8007008:	f858 2b0c 	ldr.w	r2, [r8], #12
 800700c:	fb42 f104 	smusd	r1, r2, r4
 8007010:	fb22 f214 	smuadx	r2, r2, r4
 8007014:	ea02 020e 	and.w	r2, r2, lr
 8007018:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800701c:	f845 2b04 	str.w	r2, [r5], #4
 8007020:	9a02      	ldr	r2, [sp, #8]
 8007022:	42b2      	cmp	r2, r6
 8007024:	d1a7      	bne.n	8006f76 <arm_radix4_butterfly_inverse_q15+0x3e>
 8007026:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	2a04      	cmp	r2, #4
 800702c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007030:	f240 8127 	bls.w	8007282 <arm_radix4_butterfly_inverse_q15+0x34a>
 8007034:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8007288 <arm_radix4_butterfly_inverse_q15+0x350>
 8007038:	920e      	str	r2, [sp, #56]	@ 0x38
 800703a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800703c:	9102      	str	r1, [sp, #8]
 800703e:	4608      	mov	r0, r1
 8007040:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007044:	0889      	lsrs	r1, r1, #2
 8007046:	0092      	lsls	r2, r2, #2
 8007048:	0086      	lsls	r6, r0, #2
 800704a:	9801      	ldr	r0, [sp, #4]
 800704c:	920d      	str	r2, [sp, #52]	@ 0x34
 800704e:	008c      	lsls	r4, r1, #2
 8007050:	009a      	lsls	r2, r3, #2
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	4288      	cmp	r0, r1
 8007056:	940a      	str	r4, [sp, #40]	@ 0x28
 8007058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800705a:	4604      	mov	r4, r0
 800705c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800705e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007060:	910e      	str	r1, [sp, #56]	@ 0x38
 8007062:	bf28      	it	cs
 8007064:	460c      	movcs	r4, r1
 8007066:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800706a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800706e:	9308      	str	r3, [sp, #32]
 8007070:	9307      	str	r3, [sp, #28]
 8007072:	2300      	movs	r3, #0
 8007074:	940c      	str	r4, [sp, #48]	@ 0x30
 8007076:	9104      	str	r1, [sp, #16]
 8007078:	9209      	str	r2, [sp, #36]	@ 0x24
 800707a:	9303      	str	r3, [sp, #12]
 800707c:	9b08      	ldr	r3, [sp, #32]
 800707e:	9a05      	ldr	r2, [sp, #20]
 8007080:	f8d3 9000 	ldr.w	r9, [r3]
 8007084:	9b07      	ldr	r3, [sp, #28]
 8007086:	9f03      	ldr	r7, [sp, #12]
 8007088:	f8d3 8000 	ldr.w	r8, [r3]
 800708c:	9b06      	ldr	r3, [sp, #24]
 800708e:	f8d3 e000 	ldr.w	lr, [r3]
 8007092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007094:	4615      	mov	r5, r2
 8007096:	1898      	adds	r0, r3, r2
 8007098:	9a04      	ldr	r2, [sp, #16]
 800709a:	4614      	mov	r4, r2
 800709c:	1899      	adds	r1, r3, r2
 800709e:	682a      	ldr	r2, [r5, #0]
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	f8d0 b000 	ldr.w	fp, [r0]
 80070a6:	fa92 fc13 	qadd16	ip, r2, r3
 80070aa:	fad2 f213 	qsub16	r2, r2, r3
 80070ae:	680b      	ldr	r3, [r1, #0]
 80070b0:	fa9b f313 	qadd16	r3, fp, r3
 80070b4:	fa9c fb23 	shadd16	fp, ip, r3
 80070b8:	fadc f323 	shsub16	r3, ip, r3
 80070bc:	f04f 0c00 	mov.w	ip, #0
 80070c0:	fa9b fb2c 	shadd16	fp, fp, ip
 80070c4:	f8c5 b000 	str.w	fp, [r5]
 80070c8:	4435      	add	r5, r6
 80070ca:	fb48 fb03 	smusd	fp, r8, r3
 80070ce:	fb28 f313 	smuadx	r3, r8, r3
 80070d2:	ea03 030a 	and.w	r3, r3, sl
 80070d6:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80070da:	f8d0 b000 	ldr.w	fp, [r0]
 80070de:	6003      	str	r3, [r0, #0]
 80070e0:	f8d1 c000 	ldr.w	ip, [r1]
 80070e4:	fadb fc1c 	qsub16	ip, fp, ip
 80070e8:	4430      	add	r0, r6
 80070ea:	fae2 f32c 	shsax	r3, r2, ip
 80070ee:	faa2 f22c 	shasx	r2, r2, ip
 80070f2:	fb49 fc02 	smusd	ip, r9, r2
 80070f6:	fb29 f212 	smuadx	r2, r9, r2
 80070fa:	ea02 020a 	and.w	r2, r2, sl
 80070fe:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8007102:	6022      	str	r2, [r4, #0]
 8007104:	4434      	add	r4, r6
 8007106:	fb4e f203 	smusd	r2, lr, r3
 800710a:	fb2e f313 	smuadx	r3, lr, r3
 800710e:	ea03 030a 	and.w	r3, r3, sl
 8007112:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007116:	9a02      	ldr	r2, [sp, #8]
 8007118:	600b      	str	r3, [r1, #0]
 800711a:	9b01      	ldr	r3, [sp, #4]
 800711c:	4417      	add	r7, r2
 800711e:	42bb      	cmp	r3, r7
 8007120:	4431      	add	r1, r6
 8007122:	d8bc      	bhi.n	800709e <arm_radix4_butterfly_inverse_q15+0x166>
 8007124:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8007128:	440a      	add	r2, r1
 800712a:	9208      	str	r2, [sp, #32]
 800712c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800712e:	9a07      	ldr	r2, [sp, #28]
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	440a      	add	r2, r1
 8007134:	9207      	str	r2, [sp, #28]
 8007136:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007138:	9a06      	ldr	r2, [sp, #24]
 800713a:	440a      	add	r2, r1
 800713c:	9206      	str	r2, [sp, #24]
 800713e:	9a05      	ldr	r2, [sp, #20]
 8007140:	3204      	adds	r2, #4
 8007142:	9205      	str	r2, [sp, #20]
 8007144:	9a04      	ldr	r2, [sp, #16]
 8007146:	3204      	adds	r2, #4
 8007148:	9204      	str	r2, [sp, #16]
 800714a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800714c:	3301      	adds	r3, #1
 800714e:	4293      	cmp	r3, r2
 8007150:	9303      	str	r3, [sp, #12]
 8007152:	d393      	bcc.n	800707c <arm_radix4_butterfly_inverse_q15+0x144>
 8007154:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007158:	2a04      	cmp	r2, #4
 800715a:	f63f af6e 	bhi.w	800703a <arm_radix4_butterfly_inverse_q15+0x102>
 800715e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007162:	689d      	ldr	r5, [r3, #8]
 8007164:	68de      	ldr	r6, [r3, #12]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	6859      	ldr	r1, [r3, #4]
 800716a:	fa92 f015 	qadd16	r0, r2, r5
 800716e:	3c01      	subs	r4, #1
 8007170:	fad2 f215 	qsub16	r2, r2, r5
 8007174:	f103 0310 	add.w	r3, r3, #16
 8007178:	fa91 f516 	qadd16	r5, r1, r6
 800717c:	fad1 f116 	qsub16	r1, r1, r6
 8007180:	fa90 f625 	shadd16	r6, r0, r5
 8007184:	fad0 f025 	shsub16	r0, r0, r5
 8007188:	f843 6c10 	str.w	r6, [r3, #-16]
 800718c:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007190:	faa2 f021 	shasx	r0, r2, r1
 8007194:	fae2 f221 	shsax	r2, r2, r1
 8007198:	f843 0c08 	str.w	r0, [r3, #-8]
 800719c:	f843 2c04 	str.w	r2, [r3, #-4]
 80071a0:	d1df      	bne.n	8007162 <arm_radix4_butterfly_inverse_q15+0x22a>
 80071a2:	b013      	add	sp, #76	@ 0x4c
 80071a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a8:	2400      	movs	r4, #0
 80071aa:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8007288 <arm_radix4_butterfly_inverse_q15+0x350>
 80071ae:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80071b0:	4623      	mov	r3, r4
 80071b2:	4680      	mov	r8, r0
 80071b4:	4691      	mov	r9, r2
 80071b6:	f8d8 0000 	ldr.w	r0, [r8]
 80071ba:	f8dc 2000 	ldr.w	r2, [ip]
 80071be:	f8da 1000 	ldr.w	r1, [sl]
 80071c2:	fa90 f023 	shadd16	r0, r0, r3
 80071c6:	fa91 f123 	shadd16	r1, r1, r3
 80071ca:	fa90 f023 	shadd16	r0, r0, r3
 80071ce:	fa91 fb23 	shadd16	fp, r1, r3
 80071d2:	fa92 f223 	shadd16	r2, r2, r3
 80071d6:	6829      	ldr	r1, [r5, #0]
 80071d8:	fa92 f223 	shadd16	r2, r2, r3
 80071dc:	fa91 f123 	shadd16	r1, r1, r3
 80071e0:	fa90 f612 	qadd16	r6, r0, r2
 80071e4:	fa91 f123 	shadd16	r1, r1, r3
 80071e8:	fa9b f111 	qadd16	r1, fp, r1
 80071ec:	fa96 fb21 	shadd16	fp, r6, r1
 80071f0:	f848 bb04 	str.w	fp, [r8], #4
 80071f4:	fad6 f611 	qsub16	r6, r6, r1
 80071f8:	fad0 f212 	qsub16	r2, r0, r2
 80071fc:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8007200:	fb41 f006 	smusd	r0, r1, r6
 8007204:	fb21 f116 	smuadx	r1, r1, r6
 8007208:	ea01 010e 	and.w	r1, r1, lr
 800720c:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007210:	f8da 0000 	ldr.w	r0, [sl]
 8007214:	f84a 1b04 	str.w	r1, [sl], #4
 8007218:	fa90 f023 	shadd16	r0, r0, r3
 800721c:	682e      	ldr	r6, [r5, #0]
 800721e:	fa90 f023 	shadd16	r0, r0, r3
 8007222:	fa96 f623 	shadd16	r6, r6, r3
 8007226:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800722a:	fa96 f623 	shadd16	r6, r6, r3
 800722e:	fad0 f016 	qsub16	r0, r0, r6
 8007232:	fae2 f610 	qsax	r6, r2, r0
 8007236:	faa2 f210 	qasx	r2, r2, r0
 800723a:	fb41 fb02 	smusd	fp, r1, r2
 800723e:	fb21 f212 	smuadx	r2, r1, r2
 8007242:	ea02 020e 	and.w	r2, r2, lr
 8007246:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800724a:	f84c 2b04 	str.w	r2, [ip], #4
 800724e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007252:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8007256:	fb42 f106 	smusd	r1, r2, r6
 800725a:	fb22 f216 	smuadx	r2, r2, r6
 800725e:	ea02 020e 	and.w	r2, r2, lr
 8007262:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007266:	f845 2b04 	str.w	r2, [r5], #4
 800726a:	9a03      	ldr	r2, [sp, #12]
 800726c:	f1b9 0901 	subs.w	r9, r9, #1
 8007270:	4414      	add	r4, r2
 8007272:	d1a0      	bne.n	80071b6 <arm_radix4_butterfly_inverse_q15+0x27e>
 8007274:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007276:	9b03      	ldr	r3, [sp, #12]
 8007278:	2a04      	cmp	r2, #4
 800727a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800727e:	f63f aed9 	bhi.w	8007034 <arm_radix4_butterfly_inverse_q15+0xfc>
 8007282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007284:	4614      	mov	r4, r2
 8007286:	e76c      	b.n	8007162 <arm_radix4_butterfly_inverse_q15+0x22a>
 8007288:	ffff0000 	.word	0xffff0000

0800728c <arm_bitreversal_16>:
 800728c:	b1f1      	cbz	r1, 80072cc <arm_bitreversal_16+0x40>
 800728e:	b4f0      	push	{r4, r5, r6, r7}
 8007290:	2400      	movs	r4, #0
 8007292:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8007296:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800729a:	886d      	ldrh	r5, [r5, #2]
 800729c:	08ad      	lsrs	r5, r5, #2
 800729e:	089b      	lsrs	r3, r3, #2
 80072a0:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 80072a4:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 80072a8:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 80072ac:	006e      	lsls	r6, r5, #1
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 80072b4:	3302      	adds	r3, #2
 80072b6:	1cb5      	adds	r5, r6, #2
 80072b8:	3402      	adds	r4, #2
 80072ba:	b2a4      	uxth	r4, r4
 80072bc:	5ac6      	ldrh	r6, [r0, r3]
 80072be:	5b47      	ldrh	r7, [r0, r5]
 80072c0:	52c7      	strh	r7, [r0, r3]
 80072c2:	42a1      	cmp	r1, r4
 80072c4:	5346      	strh	r6, [r0, r5]
 80072c6:	d8e4      	bhi.n	8007292 <arm_bitreversal_16+0x6>
 80072c8:	bcf0      	pop	{r4, r5, r6, r7}
 80072ca:	4770      	bx	lr
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop

080072d0 <malloc>:
 80072d0:	4b02      	ldr	r3, [pc, #8]	@ (80072dc <malloc+0xc>)
 80072d2:	4601      	mov	r1, r0
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	f000 b82d 	b.w	8007334 <_malloc_r>
 80072da:	bf00      	nop
 80072dc:	20000418 	.word	0x20000418

080072e0 <free>:
 80072e0:	4b02      	ldr	r3, [pc, #8]	@ (80072ec <free+0xc>)
 80072e2:	4601      	mov	r1, r0
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	f000 bc09 	b.w	8007afc <_free_r>
 80072ea:	bf00      	nop
 80072ec:	20000418 	.word	0x20000418

080072f0 <sbrk_aligned>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	4e0f      	ldr	r6, [pc, #60]	@ (8007330 <sbrk_aligned+0x40>)
 80072f4:	460c      	mov	r4, r1
 80072f6:	6831      	ldr	r1, [r6, #0]
 80072f8:	4605      	mov	r5, r0
 80072fa:	b911      	cbnz	r1, 8007302 <sbrk_aligned+0x12>
 80072fc:	f000 fba0 	bl	8007a40 <_sbrk_r>
 8007300:	6030      	str	r0, [r6, #0]
 8007302:	4621      	mov	r1, r4
 8007304:	4628      	mov	r0, r5
 8007306:	f000 fb9b 	bl	8007a40 <_sbrk_r>
 800730a:	1c43      	adds	r3, r0, #1
 800730c:	d103      	bne.n	8007316 <sbrk_aligned+0x26>
 800730e:	f04f 34ff 	mov.w	r4, #4294967295
 8007312:	4620      	mov	r0, r4
 8007314:	bd70      	pop	{r4, r5, r6, pc}
 8007316:	1cc4      	adds	r4, r0, #3
 8007318:	f024 0403 	bic.w	r4, r4, #3
 800731c:	42a0      	cmp	r0, r4
 800731e:	d0f8      	beq.n	8007312 <sbrk_aligned+0x22>
 8007320:	1a21      	subs	r1, r4, r0
 8007322:	4628      	mov	r0, r5
 8007324:	f000 fb8c 	bl	8007a40 <_sbrk_r>
 8007328:	3001      	adds	r0, #1
 800732a:	d1f2      	bne.n	8007312 <sbrk_aligned+0x22>
 800732c:	e7ef      	b.n	800730e <sbrk_aligned+0x1e>
 800732e:	bf00      	nop
 8007330:	20001e38 	.word	0x20001e38

08007334 <_malloc_r>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	1ccd      	adds	r5, r1, #3
 800733a:	f025 0503 	bic.w	r5, r5, #3
 800733e:	3508      	adds	r5, #8
 8007340:	2d0c      	cmp	r5, #12
 8007342:	bf38      	it	cc
 8007344:	250c      	movcc	r5, #12
 8007346:	2d00      	cmp	r5, #0
 8007348:	4606      	mov	r6, r0
 800734a:	db01      	blt.n	8007350 <_malloc_r+0x1c>
 800734c:	42a9      	cmp	r1, r5
 800734e:	d904      	bls.n	800735a <_malloc_r+0x26>
 8007350:	230c      	movs	r3, #12
 8007352:	6033      	str	r3, [r6, #0]
 8007354:	2000      	movs	r0, #0
 8007356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800735a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007430 <_malloc_r+0xfc>
 800735e:	f000 f869 	bl	8007434 <__malloc_lock>
 8007362:	f8d8 3000 	ldr.w	r3, [r8]
 8007366:	461c      	mov	r4, r3
 8007368:	bb44      	cbnz	r4, 80073bc <_malloc_r+0x88>
 800736a:	4629      	mov	r1, r5
 800736c:	4630      	mov	r0, r6
 800736e:	f7ff ffbf 	bl	80072f0 <sbrk_aligned>
 8007372:	1c43      	adds	r3, r0, #1
 8007374:	4604      	mov	r4, r0
 8007376:	d158      	bne.n	800742a <_malloc_r+0xf6>
 8007378:	f8d8 4000 	ldr.w	r4, [r8]
 800737c:	4627      	mov	r7, r4
 800737e:	2f00      	cmp	r7, #0
 8007380:	d143      	bne.n	800740a <_malloc_r+0xd6>
 8007382:	2c00      	cmp	r4, #0
 8007384:	d04b      	beq.n	800741e <_malloc_r+0xea>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	4639      	mov	r1, r7
 800738a:	4630      	mov	r0, r6
 800738c:	eb04 0903 	add.w	r9, r4, r3
 8007390:	f000 fb56 	bl	8007a40 <_sbrk_r>
 8007394:	4581      	cmp	r9, r0
 8007396:	d142      	bne.n	800741e <_malloc_r+0xea>
 8007398:	6821      	ldr	r1, [r4, #0]
 800739a:	1a6d      	subs	r5, r5, r1
 800739c:	4629      	mov	r1, r5
 800739e:	4630      	mov	r0, r6
 80073a0:	f7ff ffa6 	bl	80072f0 <sbrk_aligned>
 80073a4:	3001      	adds	r0, #1
 80073a6:	d03a      	beq.n	800741e <_malloc_r+0xea>
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	442b      	add	r3, r5
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	f8d8 3000 	ldr.w	r3, [r8]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	bb62      	cbnz	r2, 8007410 <_malloc_r+0xdc>
 80073b6:	f8c8 7000 	str.w	r7, [r8]
 80073ba:	e00f      	b.n	80073dc <_malloc_r+0xa8>
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	1b52      	subs	r2, r2, r5
 80073c0:	d420      	bmi.n	8007404 <_malloc_r+0xd0>
 80073c2:	2a0b      	cmp	r2, #11
 80073c4:	d917      	bls.n	80073f6 <_malloc_r+0xc2>
 80073c6:	1961      	adds	r1, r4, r5
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	6025      	str	r5, [r4, #0]
 80073cc:	bf18      	it	ne
 80073ce:	6059      	strne	r1, [r3, #4]
 80073d0:	6863      	ldr	r3, [r4, #4]
 80073d2:	bf08      	it	eq
 80073d4:	f8c8 1000 	streq.w	r1, [r8]
 80073d8:	5162      	str	r2, [r4, r5]
 80073da:	604b      	str	r3, [r1, #4]
 80073dc:	4630      	mov	r0, r6
 80073de:	f000 f82f 	bl	8007440 <__malloc_unlock>
 80073e2:	f104 000b 	add.w	r0, r4, #11
 80073e6:	1d23      	adds	r3, r4, #4
 80073e8:	f020 0007 	bic.w	r0, r0, #7
 80073ec:	1ac2      	subs	r2, r0, r3
 80073ee:	bf1c      	itt	ne
 80073f0:	1a1b      	subne	r3, r3, r0
 80073f2:	50a3      	strne	r3, [r4, r2]
 80073f4:	e7af      	b.n	8007356 <_malloc_r+0x22>
 80073f6:	6862      	ldr	r2, [r4, #4]
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	bf0c      	ite	eq
 80073fc:	f8c8 2000 	streq.w	r2, [r8]
 8007400:	605a      	strne	r2, [r3, #4]
 8007402:	e7eb      	b.n	80073dc <_malloc_r+0xa8>
 8007404:	4623      	mov	r3, r4
 8007406:	6864      	ldr	r4, [r4, #4]
 8007408:	e7ae      	b.n	8007368 <_malloc_r+0x34>
 800740a:	463c      	mov	r4, r7
 800740c:	687f      	ldr	r7, [r7, #4]
 800740e:	e7b6      	b.n	800737e <_malloc_r+0x4a>
 8007410:	461a      	mov	r2, r3
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	42a3      	cmp	r3, r4
 8007416:	d1fb      	bne.n	8007410 <_malloc_r+0xdc>
 8007418:	2300      	movs	r3, #0
 800741a:	6053      	str	r3, [r2, #4]
 800741c:	e7de      	b.n	80073dc <_malloc_r+0xa8>
 800741e:	230c      	movs	r3, #12
 8007420:	6033      	str	r3, [r6, #0]
 8007422:	4630      	mov	r0, r6
 8007424:	f000 f80c 	bl	8007440 <__malloc_unlock>
 8007428:	e794      	b.n	8007354 <_malloc_r+0x20>
 800742a:	6005      	str	r5, [r0, #0]
 800742c:	e7d6      	b.n	80073dc <_malloc_r+0xa8>
 800742e:	bf00      	nop
 8007430:	20001e3c 	.word	0x20001e3c

08007434 <__malloc_lock>:
 8007434:	4801      	ldr	r0, [pc, #4]	@ (800743c <__malloc_lock+0x8>)
 8007436:	f000 bb50 	b.w	8007ada <__retarget_lock_acquire_recursive>
 800743a:	bf00      	nop
 800743c:	20001f80 	.word	0x20001f80

08007440 <__malloc_unlock>:
 8007440:	4801      	ldr	r0, [pc, #4]	@ (8007448 <__malloc_unlock+0x8>)
 8007442:	f000 bb4b 	b.w	8007adc <__retarget_lock_release_recursive>
 8007446:	bf00      	nop
 8007448:	20001f80 	.word	0x20001f80

0800744c <std>:
 800744c:	2300      	movs	r3, #0
 800744e:	b510      	push	{r4, lr}
 8007450:	4604      	mov	r4, r0
 8007452:	e9c0 3300 	strd	r3, r3, [r0]
 8007456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800745a:	6083      	str	r3, [r0, #8]
 800745c:	8181      	strh	r1, [r0, #12]
 800745e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007460:	81c2      	strh	r2, [r0, #14]
 8007462:	6183      	str	r3, [r0, #24]
 8007464:	4619      	mov	r1, r3
 8007466:	2208      	movs	r2, #8
 8007468:	305c      	adds	r0, #92	@ 0x5c
 800746a:	f000 faad 	bl	80079c8 <memset>
 800746e:	4b0d      	ldr	r3, [pc, #52]	@ (80074a4 <std+0x58>)
 8007470:	6263      	str	r3, [r4, #36]	@ 0x24
 8007472:	4b0d      	ldr	r3, [pc, #52]	@ (80074a8 <std+0x5c>)
 8007474:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007476:	4b0d      	ldr	r3, [pc, #52]	@ (80074ac <std+0x60>)
 8007478:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800747a:	4b0d      	ldr	r3, [pc, #52]	@ (80074b0 <std+0x64>)
 800747c:	6323      	str	r3, [r4, #48]	@ 0x30
 800747e:	4b0d      	ldr	r3, [pc, #52]	@ (80074b4 <std+0x68>)
 8007480:	6224      	str	r4, [r4, #32]
 8007482:	429c      	cmp	r4, r3
 8007484:	d006      	beq.n	8007494 <std+0x48>
 8007486:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800748a:	4294      	cmp	r4, r2
 800748c:	d002      	beq.n	8007494 <std+0x48>
 800748e:	33d0      	adds	r3, #208	@ 0xd0
 8007490:	429c      	cmp	r4, r3
 8007492:	d105      	bne.n	80074a0 <std+0x54>
 8007494:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800749c:	f000 bb1c 	b.w	8007ad8 <__retarget_lock_init_recursive>
 80074a0:	bd10      	pop	{r4, pc}
 80074a2:	bf00      	nop
 80074a4:	08007819 	.word	0x08007819
 80074a8:	0800783b 	.word	0x0800783b
 80074ac:	08007873 	.word	0x08007873
 80074b0:	08007897 	.word	0x08007897
 80074b4:	20001e40 	.word	0x20001e40

080074b8 <stdio_exit_handler>:
 80074b8:	4a02      	ldr	r2, [pc, #8]	@ (80074c4 <stdio_exit_handler+0xc>)
 80074ba:	4903      	ldr	r1, [pc, #12]	@ (80074c8 <stdio_exit_handler+0x10>)
 80074bc:	4803      	ldr	r0, [pc, #12]	@ (80074cc <stdio_exit_handler+0x14>)
 80074be:	f000 b869 	b.w	8007594 <_fwalk_sglue>
 80074c2:	bf00      	nop
 80074c4:	2000040c 	.word	0x2000040c
 80074c8:	08008239 	.word	0x08008239
 80074cc:	2000041c 	.word	0x2000041c

080074d0 <cleanup_stdio>:
 80074d0:	6841      	ldr	r1, [r0, #4]
 80074d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007504 <cleanup_stdio+0x34>)
 80074d4:	4299      	cmp	r1, r3
 80074d6:	b510      	push	{r4, lr}
 80074d8:	4604      	mov	r4, r0
 80074da:	d001      	beq.n	80074e0 <cleanup_stdio+0x10>
 80074dc:	f000 feac 	bl	8008238 <_fflush_r>
 80074e0:	68a1      	ldr	r1, [r4, #8]
 80074e2:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <cleanup_stdio+0x38>)
 80074e4:	4299      	cmp	r1, r3
 80074e6:	d002      	beq.n	80074ee <cleanup_stdio+0x1e>
 80074e8:	4620      	mov	r0, r4
 80074ea:	f000 fea5 	bl	8008238 <_fflush_r>
 80074ee:	68e1      	ldr	r1, [r4, #12]
 80074f0:	4b06      	ldr	r3, [pc, #24]	@ (800750c <cleanup_stdio+0x3c>)
 80074f2:	4299      	cmp	r1, r3
 80074f4:	d004      	beq.n	8007500 <cleanup_stdio+0x30>
 80074f6:	4620      	mov	r0, r4
 80074f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074fc:	f000 be9c 	b.w	8008238 <_fflush_r>
 8007500:	bd10      	pop	{r4, pc}
 8007502:	bf00      	nop
 8007504:	20001e40 	.word	0x20001e40
 8007508:	20001ea8 	.word	0x20001ea8
 800750c:	20001f10 	.word	0x20001f10

08007510 <global_stdio_init.part.0>:
 8007510:	b510      	push	{r4, lr}
 8007512:	4b0b      	ldr	r3, [pc, #44]	@ (8007540 <global_stdio_init.part.0+0x30>)
 8007514:	4c0b      	ldr	r4, [pc, #44]	@ (8007544 <global_stdio_init.part.0+0x34>)
 8007516:	4a0c      	ldr	r2, [pc, #48]	@ (8007548 <global_stdio_init.part.0+0x38>)
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	4620      	mov	r0, r4
 800751c:	2200      	movs	r2, #0
 800751e:	2104      	movs	r1, #4
 8007520:	f7ff ff94 	bl	800744c <std>
 8007524:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007528:	2201      	movs	r2, #1
 800752a:	2109      	movs	r1, #9
 800752c:	f7ff ff8e 	bl	800744c <std>
 8007530:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007534:	2202      	movs	r2, #2
 8007536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800753a:	2112      	movs	r1, #18
 800753c:	f7ff bf86 	b.w	800744c <std>
 8007540:	20001f78 	.word	0x20001f78
 8007544:	20001e40 	.word	0x20001e40
 8007548:	080074b9 	.word	0x080074b9

0800754c <__sfp_lock_acquire>:
 800754c:	4801      	ldr	r0, [pc, #4]	@ (8007554 <__sfp_lock_acquire+0x8>)
 800754e:	f000 bac4 	b.w	8007ada <__retarget_lock_acquire_recursive>
 8007552:	bf00      	nop
 8007554:	20001f81 	.word	0x20001f81

08007558 <__sfp_lock_release>:
 8007558:	4801      	ldr	r0, [pc, #4]	@ (8007560 <__sfp_lock_release+0x8>)
 800755a:	f000 babf 	b.w	8007adc <__retarget_lock_release_recursive>
 800755e:	bf00      	nop
 8007560:	20001f81 	.word	0x20001f81

08007564 <__sinit>:
 8007564:	b510      	push	{r4, lr}
 8007566:	4604      	mov	r4, r0
 8007568:	f7ff fff0 	bl	800754c <__sfp_lock_acquire>
 800756c:	6a23      	ldr	r3, [r4, #32]
 800756e:	b11b      	cbz	r3, 8007578 <__sinit+0x14>
 8007570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007574:	f7ff bff0 	b.w	8007558 <__sfp_lock_release>
 8007578:	4b04      	ldr	r3, [pc, #16]	@ (800758c <__sinit+0x28>)
 800757a:	6223      	str	r3, [r4, #32]
 800757c:	4b04      	ldr	r3, [pc, #16]	@ (8007590 <__sinit+0x2c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1f5      	bne.n	8007570 <__sinit+0xc>
 8007584:	f7ff ffc4 	bl	8007510 <global_stdio_init.part.0>
 8007588:	e7f2      	b.n	8007570 <__sinit+0xc>
 800758a:	bf00      	nop
 800758c:	080074d1 	.word	0x080074d1
 8007590:	20001f78 	.word	0x20001f78

08007594 <_fwalk_sglue>:
 8007594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007598:	4607      	mov	r7, r0
 800759a:	4688      	mov	r8, r1
 800759c:	4614      	mov	r4, r2
 800759e:	2600      	movs	r6, #0
 80075a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075a4:	f1b9 0901 	subs.w	r9, r9, #1
 80075a8:	d505      	bpl.n	80075b6 <_fwalk_sglue+0x22>
 80075aa:	6824      	ldr	r4, [r4, #0]
 80075ac:	2c00      	cmp	r4, #0
 80075ae:	d1f7      	bne.n	80075a0 <_fwalk_sglue+0xc>
 80075b0:	4630      	mov	r0, r6
 80075b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075b6:	89ab      	ldrh	r3, [r5, #12]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d907      	bls.n	80075cc <_fwalk_sglue+0x38>
 80075bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075c0:	3301      	adds	r3, #1
 80075c2:	d003      	beq.n	80075cc <_fwalk_sglue+0x38>
 80075c4:	4629      	mov	r1, r5
 80075c6:	4638      	mov	r0, r7
 80075c8:	47c0      	blx	r8
 80075ca:	4306      	orrs	r6, r0
 80075cc:	3568      	adds	r5, #104	@ 0x68
 80075ce:	e7e9      	b.n	80075a4 <_fwalk_sglue+0x10>

080075d0 <iprintf>:
 80075d0:	b40f      	push	{r0, r1, r2, r3}
 80075d2:	b507      	push	{r0, r1, r2, lr}
 80075d4:	4906      	ldr	r1, [pc, #24]	@ (80075f0 <iprintf+0x20>)
 80075d6:	ab04      	add	r3, sp, #16
 80075d8:	6808      	ldr	r0, [r1, #0]
 80075da:	f853 2b04 	ldr.w	r2, [r3], #4
 80075de:	6881      	ldr	r1, [r0, #8]
 80075e0:	9301      	str	r3, [sp, #4]
 80075e2:	f000 faff 	bl	8007be4 <_vfiprintf_r>
 80075e6:	b003      	add	sp, #12
 80075e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075ec:	b004      	add	sp, #16
 80075ee:	4770      	bx	lr
 80075f0:	20000418 	.word	0x20000418

080075f4 <_puts_r>:
 80075f4:	6a03      	ldr	r3, [r0, #32]
 80075f6:	b570      	push	{r4, r5, r6, lr}
 80075f8:	6884      	ldr	r4, [r0, #8]
 80075fa:	4605      	mov	r5, r0
 80075fc:	460e      	mov	r6, r1
 80075fe:	b90b      	cbnz	r3, 8007604 <_puts_r+0x10>
 8007600:	f7ff ffb0 	bl	8007564 <__sinit>
 8007604:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007606:	07db      	lsls	r3, r3, #31
 8007608:	d405      	bmi.n	8007616 <_puts_r+0x22>
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	0598      	lsls	r0, r3, #22
 800760e:	d402      	bmi.n	8007616 <_puts_r+0x22>
 8007610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007612:	f000 fa62 	bl	8007ada <__retarget_lock_acquire_recursive>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	0719      	lsls	r1, r3, #28
 800761a:	d502      	bpl.n	8007622 <_puts_r+0x2e>
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d135      	bne.n	800768e <_puts_r+0x9a>
 8007622:	4621      	mov	r1, r4
 8007624:	4628      	mov	r0, r5
 8007626:	f000 f979 	bl	800791c <__swsetup_r>
 800762a:	b380      	cbz	r0, 800768e <_puts_r+0x9a>
 800762c:	f04f 35ff 	mov.w	r5, #4294967295
 8007630:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007632:	07da      	lsls	r2, r3, #31
 8007634:	d405      	bmi.n	8007642 <_puts_r+0x4e>
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	059b      	lsls	r3, r3, #22
 800763a:	d402      	bmi.n	8007642 <_puts_r+0x4e>
 800763c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800763e:	f000 fa4d 	bl	8007adc <__retarget_lock_release_recursive>
 8007642:	4628      	mov	r0, r5
 8007644:	bd70      	pop	{r4, r5, r6, pc}
 8007646:	2b00      	cmp	r3, #0
 8007648:	da04      	bge.n	8007654 <_puts_r+0x60>
 800764a:	69a2      	ldr	r2, [r4, #24]
 800764c:	429a      	cmp	r2, r3
 800764e:	dc17      	bgt.n	8007680 <_puts_r+0x8c>
 8007650:	290a      	cmp	r1, #10
 8007652:	d015      	beq.n	8007680 <_puts_r+0x8c>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	6022      	str	r2, [r4, #0]
 800765a:	7019      	strb	r1, [r3, #0]
 800765c:	68a3      	ldr	r3, [r4, #8]
 800765e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007662:	3b01      	subs	r3, #1
 8007664:	60a3      	str	r3, [r4, #8]
 8007666:	2900      	cmp	r1, #0
 8007668:	d1ed      	bne.n	8007646 <_puts_r+0x52>
 800766a:	2b00      	cmp	r3, #0
 800766c:	da11      	bge.n	8007692 <_puts_r+0x9e>
 800766e:	4622      	mov	r2, r4
 8007670:	210a      	movs	r1, #10
 8007672:	4628      	mov	r0, r5
 8007674:	f000 f913 	bl	800789e <__swbuf_r>
 8007678:	3001      	adds	r0, #1
 800767a:	d0d7      	beq.n	800762c <_puts_r+0x38>
 800767c:	250a      	movs	r5, #10
 800767e:	e7d7      	b.n	8007630 <_puts_r+0x3c>
 8007680:	4622      	mov	r2, r4
 8007682:	4628      	mov	r0, r5
 8007684:	f000 f90b 	bl	800789e <__swbuf_r>
 8007688:	3001      	adds	r0, #1
 800768a:	d1e7      	bne.n	800765c <_puts_r+0x68>
 800768c:	e7ce      	b.n	800762c <_puts_r+0x38>
 800768e:	3e01      	subs	r6, #1
 8007690:	e7e4      	b.n	800765c <_puts_r+0x68>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	6022      	str	r2, [r4, #0]
 8007698:	220a      	movs	r2, #10
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	e7ee      	b.n	800767c <_puts_r+0x88>
	...

080076a0 <puts>:
 80076a0:	4b02      	ldr	r3, [pc, #8]	@ (80076ac <puts+0xc>)
 80076a2:	4601      	mov	r1, r0
 80076a4:	6818      	ldr	r0, [r3, #0]
 80076a6:	f7ff bfa5 	b.w	80075f4 <_puts_r>
 80076aa:	bf00      	nop
 80076ac:	20000418 	.word	0x20000418

080076b0 <setvbuf>:
 80076b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076b4:	461d      	mov	r5, r3
 80076b6:	4b57      	ldr	r3, [pc, #348]	@ (8007814 <setvbuf+0x164>)
 80076b8:	681f      	ldr	r7, [r3, #0]
 80076ba:	4604      	mov	r4, r0
 80076bc:	460e      	mov	r6, r1
 80076be:	4690      	mov	r8, r2
 80076c0:	b127      	cbz	r7, 80076cc <setvbuf+0x1c>
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	b913      	cbnz	r3, 80076cc <setvbuf+0x1c>
 80076c6:	4638      	mov	r0, r7
 80076c8:	f7ff ff4c 	bl	8007564 <__sinit>
 80076cc:	f1b8 0f02 	cmp.w	r8, #2
 80076d0:	d006      	beq.n	80076e0 <setvbuf+0x30>
 80076d2:	f1b8 0f01 	cmp.w	r8, #1
 80076d6:	f200 809a 	bhi.w	800780e <setvbuf+0x15e>
 80076da:	2d00      	cmp	r5, #0
 80076dc:	f2c0 8097 	blt.w	800780e <setvbuf+0x15e>
 80076e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076e2:	07d9      	lsls	r1, r3, #31
 80076e4:	d405      	bmi.n	80076f2 <setvbuf+0x42>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	059a      	lsls	r2, r3, #22
 80076ea:	d402      	bmi.n	80076f2 <setvbuf+0x42>
 80076ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ee:	f000 f9f4 	bl	8007ada <__retarget_lock_acquire_recursive>
 80076f2:	4621      	mov	r1, r4
 80076f4:	4638      	mov	r0, r7
 80076f6:	f000 fd9f 	bl	8008238 <_fflush_r>
 80076fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076fc:	b141      	cbz	r1, 8007710 <setvbuf+0x60>
 80076fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007702:	4299      	cmp	r1, r3
 8007704:	d002      	beq.n	800770c <setvbuf+0x5c>
 8007706:	4638      	mov	r0, r7
 8007708:	f000 f9f8 	bl	8007afc <_free_r>
 800770c:	2300      	movs	r3, #0
 800770e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007710:	2300      	movs	r3, #0
 8007712:	61a3      	str	r3, [r4, #24]
 8007714:	6063      	str	r3, [r4, #4]
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	061b      	lsls	r3, r3, #24
 800771a:	d503      	bpl.n	8007724 <setvbuf+0x74>
 800771c:	6921      	ldr	r1, [r4, #16]
 800771e:	4638      	mov	r0, r7
 8007720:	f000 f9ec 	bl	8007afc <_free_r>
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800772a:	f023 0303 	bic.w	r3, r3, #3
 800772e:	f1b8 0f02 	cmp.w	r8, #2
 8007732:	81a3      	strh	r3, [r4, #12]
 8007734:	d061      	beq.n	80077fa <setvbuf+0x14a>
 8007736:	ab01      	add	r3, sp, #4
 8007738:	466a      	mov	r2, sp
 800773a:	4621      	mov	r1, r4
 800773c:	4638      	mov	r0, r7
 800773e:	f000 fda3 	bl	8008288 <__swhatbuf_r>
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	4318      	orrs	r0, r3
 8007746:	81a0      	strh	r0, [r4, #12]
 8007748:	bb2d      	cbnz	r5, 8007796 <setvbuf+0xe6>
 800774a:	9d00      	ldr	r5, [sp, #0]
 800774c:	4628      	mov	r0, r5
 800774e:	f7ff fdbf 	bl	80072d0 <malloc>
 8007752:	4606      	mov	r6, r0
 8007754:	2800      	cmp	r0, #0
 8007756:	d152      	bne.n	80077fe <setvbuf+0x14e>
 8007758:	f8dd 9000 	ldr.w	r9, [sp]
 800775c:	45a9      	cmp	r9, r5
 800775e:	d140      	bne.n	80077e2 <setvbuf+0x132>
 8007760:	f04f 35ff 	mov.w	r5, #4294967295
 8007764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007768:	f043 0202 	orr.w	r2, r3, #2
 800776c:	81a2      	strh	r2, [r4, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	60a2      	str	r2, [r4, #8]
 8007772:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8007776:	6022      	str	r2, [r4, #0]
 8007778:	6122      	str	r2, [r4, #16]
 800777a:	2201      	movs	r2, #1
 800777c:	6162      	str	r2, [r4, #20]
 800777e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007780:	07d6      	lsls	r6, r2, #31
 8007782:	d404      	bmi.n	800778e <setvbuf+0xde>
 8007784:	0598      	lsls	r0, r3, #22
 8007786:	d402      	bmi.n	800778e <setvbuf+0xde>
 8007788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800778a:	f000 f9a7 	bl	8007adc <__retarget_lock_release_recursive>
 800778e:	4628      	mov	r0, r5
 8007790:	b003      	add	sp, #12
 8007792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007796:	2e00      	cmp	r6, #0
 8007798:	d0d8      	beq.n	800774c <setvbuf+0x9c>
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	b913      	cbnz	r3, 80077a4 <setvbuf+0xf4>
 800779e:	4638      	mov	r0, r7
 80077a0:	f7ff fee0 	bl	8007564 <__sinit>
 80077a4:	f1b8 0f01 	cmp.w	r8, #1
 80077a8:	bf08      	it	eq
 80077aa:	89a3      	ldrheq	r3, [r4, #12]
 80077ac:	6026      	str	r6, [r4, #0]
 80077ae:	bf04      	itt	eq
 80077b0:	f043 0301 	orreq.w	r3, r3, #1
 80077b4:	81a3      	strheq	r3, [r4, #12]
 80077b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ba:	f013 0208 	ands.w	r2, r3, #8
 80077be:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80077c2:	d01e      	beq.n	8007802 <setvbuf+0x152>
 80077c4:	07d9      	lsls	r1, r3, #31
 80077c6:	bf41      	itttt	mi
 80077c8:	2200      	movmi	r2, #0
 80077ca:	426d      	negmi	r5, r5
 80077cc:	60a2      	strmi	r2, [r4, #8]
 80077ce:	61a5      	strmi	r5, [r4, #24]
 80077d0:	bf58      	it	pl
 80077d2:	60a5      	strpl	r5, [r4, #8]
 80077d4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077d6:	07d2      	lsls	r2, r2, #31
 80077d8:	d401      	bmi.n	80077de <setvbuf+0x12e>
 80077da:	059b      	lsls	r3, r3, #22
 80077dc:	d513      	bpl.n	8007806 <setvbuf+0x156>
 80077de:	2500      	movs	r5, #0
 80077e0:	e7d5      	b.n	800778e <setvbuf+0xde>
 80077e2:	4648      	mov	r0, r9
 80077e4:	f7ff fd74 	bl	80072d0 <malloc>
 80077e8:	4606      	mov	r6, r0
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d0b8      	beq.n	8007760 <setvbuf+0xb0>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f4:	81a3      	strh	r3, [r4, #12]
 80077f6:	464d      	mov	r5, r9
 80077f8:	e7cf      	b.n	800779a <setvbuf+0xea>
 80077fa:	2500      	movs	r5, #0
 80077fc:	e7b2      	b.n	8007764 <setvbuf+0xb4>
 80077fe:	46a9      	mov	r9, r5
 8007800:	e7f5      	b.n	80077ee <setvbuf+0x13e>
 8007802:	60a2      	str	r2, [r4, #8]
 8007804:	e7e6      	b.n	80077d4 <setvbuf+0x124>
 8007806:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007808:	f000 f968 	bl	8007adc <__retarget_lock_release_recursive>
 800780c:	e7e7      	b.n	80077de <setvbuf+0x12e>
 800780e:	f04f 35ff 	mov.w	r5, #4294967295
 8007812:	e7bc      	b.n	800778e <setvbuf+0xde>
 8007814:	20000418 	.word	0x20000418

08007818 <__sread>:
 8007818:	b510      	push	{r4, lr}
 800781a:	460c      	mov	r4, r1
 800781c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007820:	f000 f8fc 	bl	8007a1c <_read_r>
 8007824:	2800      	cmp	r0, #0
 8007826:	bfab      	itete	ge
 8007828:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800782a:	89a3      	ldrhlt	r3, [r4, #12]
 800782c:	181b      	addge	r3, r3, r0
 800782e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007832:	bfac      	ite	ge
 8007834:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007836:	81a3      	strhlt	r3, [r4, #12]
 8007838:	bd10      	pop	{r4, pc}

0800783a <__swrite>:
 800783a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800783e:	461f      	mov	r7, r3
 8007840:	898b      	ldrh	r3, [r1, #12]
 8007842:	05db      	lsls	r3, r3, #23
 8007844:	4605      	mov	r5, r0
 8007846:	460c      	mov	r4, r1
 8007848:	4616      	mov	r6, r2
 800784a:	d505      	bpl.n	8007858 <__swrite+0x1e>
 800784c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007850:	2302      	movs	r3, #2
 8007852:	2200      	movs	r2, #0
 8007854:	f000 f8d0 	bl	80079f8 <_lseek_r>
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800785e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	4632      	mov	r2, r6
 8007866:	463b      	mov	r3, r7
 8007868:	4628      	mov	r0, r5
 800786a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800786e:	f000 b8f7 	b.w	8007a60 <_write_r>

08007872 <__sseek>:
 8007872:	b510      	push	{r4, lr}
 8007874:	460c      	mov	r4, r1
 8007876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787a:	f000 f8bd 	bl	80079f8 <_lseek_r>
 800787e:	1c43      	adds	r3, r0, #1
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	bf15      	itete	ne
 8007884:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007886:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800788a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800788e:	81a3      	strheq	r3, [r4, #12]
 8007890:	bf18      	it	ne
 8007892:	81a3      	strhne	r3, [r4, #12]
 8007894:	bd10      	pop	{r4, pc}

08007896 <__sclose>:
 8007896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789a:	f000 b89d 	b.w	80079d8 <_close_r>

0800789e <__swbuf_r>:
 800789e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a0:	460e      	mov	r6, r1
 80078a2:	4614      	mov	r4, r2
 80078a4:	4605      	mov	r5, r0
 80078a6:	b118      	cbz	r0, 80078b0 <__swbuf_r+0x12>
 80078a8:	6a03      	ldr	r3, [r0, #32]
 80078aa:	b90b      	cbnz	r3, 80078b0 <__swbuf_r+0x12>
 80078ac:	f7ff fe5a 	bl	8007564 <__sinit>
 80078b0:	69a3      	ldr	r3, [r4, #24]
 80078b2:	60a3      	str	r3, [r4, #8]
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	071a      	lsls	r2, r3, #28
 80078b8:	d501      	bpl.n	80078be <__swbuf_r+0x20>
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	b943      	cbnz	r3, 80078d0 <__swbuf_r+0x32>
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 f82b 	bl	800791c <__swsetup_r>
 80078c6:	b118      	cbz	r0, 80078d0 <__swbuf_r+0x32>
 80078c8:	f04f 37ff 	mov.w	r7, #4294967295
 80078cc:	4638      	mov	r0, r7
 80078ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	6922      	ldr	r2, [r4, #16]
 80078d4:	1a98      	subs	r0, r3, r2
 80078d6:	6963      	ldr	r3, [r4, #20]
 80078d8:	b2f6      	uxtb	r6, r6
 80078da:	4283      	cmp	r3, r0
 80078dc:	4637      	mov	r7, r6
 80078de:	dc05      	bgt.n	80078ec <__swbuf_r+0x4e>
 80078e0:	4621      	mov	r1, r4
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 fca8 	bl	8008238 <_fflush_r>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d1ed      	bne.n	80078c8 <__swbuf_r+0x2a>
 80078ec:	68a3      	ldr	r3, [r4, #8]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	60a3      	str	r3, [r4, #8]
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	6022      	str	r2, [r4, #0]
 80078f8:	701e      	strb	r6, [r3, #0]
 80078fa:	6962      	ldr	r2, [r4, #20]
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	429a      	cmp	r2, r3
 8007900:	d004      	beq.n	800790c <__swbuf_r+0x6e>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	07db      	lsls	r3, r3, #31
 8007906:	d5e1      	bpl.n	80078cc <__swbuf_r+0x2e>
 8007908:	2e0a      	cmp	r6, #10
 800790a:	d1df      	bne.n	80078cc <__swbuf_r+0x2e>
 800790c:	4621      	mov	r1, r4
 800790e:	4628      	mov	r0, r5
 8007910:	f000 fc92 	bl	8008238 <_fflush_r>
 8007914:	2800      	cmp	r0, #0
 8007916:	d0d9      	beq.n	80078cc <__swbuf_r+0x2e>
 8007918:	e7d6      	b.n	80078c8 <__swbuf_r+0x2a>
	...

0800791c <__swsetup_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4b29      	ldr	r3, [pc, #164]	@ (80079c4 <__swsetup_r+0xa8>)
 8007920:	4605      	mov	r5, r0
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	460c      	mov	r4, r1
 8007926:	b118      	cbz	r0, 8007930 <__swsetup_r+0x14>
 8007928:	6a03      	ldr	r3, [r0, #32]
 800792a:	b90b      	cbnz	r3, 8007930 <__swsetup_r+0x14>
 800792c:	f7ff fe1a 	bl	8007564 <__sinit>
 8007930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007934:	0719      	lsls	r1, r3, #28
 8007936:	d422      	bmi.n	800797e <__swsetup_r+0x62>
 8007938:	06da      	lsls	r2, r3, #27
 800793a:	d407      	bmi.n	800794c <__swsetup_r+0x30>
 800793c:	2209      	movs	r2, #9
 800793e:	602a      	str	r2, [r5, #0]
 8007940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007944:	81a3      	strh	r3, [r4, #12]
 8007946:	f04f 30ff 	mov.w	r0, #4294967295
 800794a:	e033      	b.n	80079b4 <__swsetup_r+0x98>
 800794c:	0758      	lsls	r0, r3, #29
 800794e:	d512      	bpl.n	8007976 <__swsetup_r+0x5a>
 8007950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007952:	b141      	cbz	r1, 8007966 <__swsetup_r+0x4a>
 8007954:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007958:	4299      	cmp	r1, r3
 800795a:	d002      	beq.n	8007962 <__swsetup_r+0x46>
 800795c:	4628      	mov	r0, r5
 800795e:	f000 f8cd 	bl	8007afc <_free_r>
 8007962:	2300      	movs	r3, #0
 8007964:	6363      	str	r3, [r4, #52]	@ 0x34
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	2300      	movs	r3, #0
 8007970:	6063      	str	r3, [r4, #4]
 8007972:	6923      	ldr	r3, [r4, #16]
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	f043 0308 	orr.w	r3, r3, #8
 800797c:	81a3      	strh	r3, [r4, #12]
 800797e:	6923      	ldr	r3, [r4, #16]
 8007980:	b94b      	cbnz	r3, 8007996 <__swsetup_r+0x7a>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800798c:	d003      	beq.n	8007996 <__swsetup_r+0x7a>
 800798e:	4621      	mov	r1, r4
 8007990:	4628      	mov	r0, r5
 8007992:	f000 fc9f 	bl	80082d4 <__smakebuf_r>
 8007996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800799a:	f013 0201 	ands.w	r2, r3, #1
 800799e:	d00a      	beq.n	80079b6 <__swsetup_r+0x9a>
 80079a0:	2200      	movs	r2, #0
 80079a2:	60a2      	str	r2, [r4, #8]
 80079a4:	6962      	ldr	r2, [r4, #20]
 80079a6:	4252      	negs	r2, r2
 80079a8:	61a2      	str	r2, [r4, #24]
 80079aa:	6922      	ldr	r2, [r4, #16]
 80079ac:	b942      	cbnz	r2, 80079c0 <__swsetup_r+0xa4>
 80079ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80079b2:	d1c5      	bne.n	8007940 <__swsetup_r+0x24>
 80079b4:	bd38      	pop	{r3, r4, r5, pc}
 80079b6:	0799      	lsls	r1, r3, #30
 80079b8:	bf58      	it	pl
 80079ba:	6962      	ldrpl	r2, [r4, #20]
 80079bc:	60a2      	str	r2, [r4, #8]
 80079be:	e7f4      	b.n	80079aa <__swsetup_r+0x8e>
 80079c0:	2000      	movs	r0, #0
 80079c2:	e7f7      	b.n	80079b4 <__swsetup_r+0x98>
 80079c4:	20000418 	.word	0x20000418

080079c8 <memset>:
 80079c8:	4402      	add	r2, r0
 80079ca:	4603      	mov	r3, r0
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d100      	bne.n	80079d2 <memset+0xa>
 80079d0:	4770      	bx	lr
 80079d2:	f803 1b01 	strb.w	r1, [r3], #1
 80079d6:	e7f9      	b.n	80079cc <memset+0x4>

080079d8 <_close_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4d06      	ldr	r5, [pc, #24]	@ (80079f4 <_close_r+0x1c>)
 80079dc:	2300      	movs	r3, #0
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	602b      	str	r3, [r5, #0]
 80079e4:	f7f9 fb92 	bl	800110c <_close>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_close_r+0x1a>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_close_r+0x1a>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	20001f7c 	.word	0x20001f7c

080079f8 <_lseek_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d07      	ldr	r5, [pc, #28]	@ (8007a18 <_lseek_r+0x20>)
 80079fc:	4604      	mov	r4, r0
 80079fe:	4608      	mov	r0, r1
 8007a00:	4611      	mov	r1, r2
 8007a02:	2200      	movs	r2, #0
 8007a04:	602a      	str	r2, [r5, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f7f9 fb8c 	bl	8001124 <_lseek>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_lseek_r+0x1e>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_lseek_r+0x1e>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	20001f7c 	.word	0x20001f7c

08007a1c <_read_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4d07      	ldr	r5, [pc, #28]	@ (8007a3c <_read_r+0x20>)
 8007a20:	4604      	mov	r4, r0
 8007a22:	4608      	mov	r0, r1
 8007a24:	4611      	mov	r1, r2
 8007a26:	2200      	movs	r2, #0
 8007a28:	602a      	str	r2, [r5, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f7f9 fb82 	bl	8001134 <_read>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_read_r+0x1e>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_read_r+0x1e>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	20001f7c 	.word	0x20001f7c

08007a40 <_sbrk_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d06      	ldr	r5, [pc, #24]	@ (8007a5c <_sbrk_r+0x1c>)
 8007a44:	2300      	movs	r3, #0
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f7fa fdaa 	bl	80025a4 <_sbrk>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_sbrk_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_sbrk_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	20001f7c 	.word	0x20001f7c

08007a60 <_write_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d07      	ldr	r5, [pc, #28]	@ (8007a80 <_write_r+0x20>)
 8007a64:	4604      	mov	r4, r0
 8007a66:	4608      	mov	r0, r1
 8007a68:	4611      	mov	r1, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	602a      	str	r2, [r5, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f7f9 fb32 	bl	80010d8 <_write>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d102      	bne.n	8007a7e <_write_r+0x1e>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	b103      	cbz	r3, 8007a7e <_write_r+0x1e>
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	bd38      	pop	{r3, r4, r5, pc}
 8007a80:	20001f7c 	.word	0x20001f7c

08007a84 <__errno>:
 8007a84:	4b01      	ldr	r3, [pc, #4]	@ (8007a8c <__errno+0x8>)
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	20000418 	.word	0x20000418

08007a90 <__libc_init_array>:
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	4d0d      	ldr	r5, [pc, #52]	@ (8007ac8 <__libc_init_array+0x38>)
 8007a94:	4c0d      	ldr	r4, [pc, #52]	@ (8007acc <__libc_init_array+0x3c>)
 8007a96:	1b64      	subs	r4, r4, r5
 8007a98:	10a4      	asrs	r4, r4, #2
 8007a9a:	2600      	movs	r6, #0
 8007a9c:	42a6      	cmp	r6, r4
 8007a9e:	d109      	bne.n	8007ab4 <__libc_init_array+0x24>
 8007aa0:	4d0b      	ldr	r5, [pc, #44]	@ (8007ad0 <__libc_init_array+0x40>)
 8007aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8007ad4 <__libc_init_array+0x44>)
 8007aa4:	f000 fc74 	bl	8008390 <_init>
 8007aa8:	1b64      	subs	r4, r4, r5
 8007aaa:	10a4      	asrs	r4, r4, #2
 8007aac:	2600      	movs	r6, #0
 8007aae:	42a6      	cmp	r6, r4
 8007ab0:	d105      	bne.n	8007abe <__libc_init_array+0x2e>
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
 8007ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab8:	4798      	blx	r3
 8007aba:	3601      	adds	r6, #1
 8007abc:	e7ee      	b.n	8007a9c <__libc_init_array+0xc>
 8007abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac2:	4798      	blx	r3
 8007ac4:	3601      	adds	r6, #1
 8007ac6:	e7f2      	b.n	8007aae <__libc_init_array+0x1e>
 8007ac8:	0801b0bc 	.word	0x0801b0bc
 8007acc:	0801b0bc 	.word	0x0801b0bc
 8007ad0:	0801b0bc 	.word	0x0801b0bc
 8007ad4:	0801b0c0 	.word	0x0801b0c0

08007ad8 <__retarget_lock_init_recursive>:
 8007ad8:	4770      	bx	lr

08007ada <__retarget_lock_acquire_recursive>:
 8007ada:	4770      	bx	lr

08007adc <__retarget_lock_release_recursive>:
 8007adc:	4770      	bx	lr

08007ade <memcpy>:
 8007ade:	440a      	add	r2, r1
 8007ae0:	4291      	cmp	r1, r2
 8007ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ae6:	d100      	bne.n	8007aea <memcpy+0xc>
 8007ae8:	4770      	bx	lr
 8007aea:	b510      	push	{r4, lr}
 8007aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007af4:	4291      	cmp	r1, r2
 8007af6:	d1f9      	bne.n	8007aec <memcpy+0xe>
 8007af8:	bd10      	pop	{r4, pc}
	...

08007afc <_free_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4605      	mov	r5, r0
 8007b00:	2900      	cmp	r1, #0
 8007b02:	d041      	beq.n	8007b88 <_free_r+0x8c>
 8007b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b08:	1f0c      	subs	r4, r1, #4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bfb8      	it	lt
 8007b0e:	18e4      	addlt	r4, r4, r3
 8007b10:	f7ff fc90 	bl	8007434 <__malloc_lock>
 8007b14:	4a1d      	ldr	r2, [pc, #116]	@ (8007b8c <_free_r+0x90>)
 8007b16:	6813      	ldr	r3, [r2, #0]
 8007b18:	b933      	cbnz	r3, 8007b28 <_free_r+0x2c>
 8007b1a:	6063      	str	r3, [r4, #4]
 8007b1c:	6014      	str	r4, [r2, #0]
 8007b1e:	4628      	mov	r0, r5
 8007b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b24:	f7ff bc8c 	b.w	8007440 <__malloc_unlock>
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	d908      	bls.n	8007b3e <_free_r+0x42>
 8007b2c:	6820      	ldr	r0, [r4, #0]
 8007b2e:	1821      	adds	r1, r4, r0
 8007b30:	428b      	cmp	r3, r1
 8007b32:	bf01      	itttt	eq
 8007b34:	6819      	ldreq	r1, [r3, #0]
 8007b36:	685b      	ldreq	r3, [r3, #4]
 8007b38:	1809      	addeq	r1, r1, r0
 8007b3a:	6021      	streq	r1, [r4, #0]
 8007b3c:	e7ed      	b.n	8007b1a <_free_r+0x1e>
 8007b3e:	461a      	mov	r2, r3
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	b10b      	cbz	r3, 8007b48 <_free_r+0x4c>
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	d9fa      	bls.n	8007b3e <_free_r+0x42>
 8007b48:	6811      	ldr	r1, [r2, #0]
 8007b4a:	1850      	adds	r0, r2, r1
 8007b4c:	42a0      	cmp	r0, r4
 8007b4e:	d10b      	bne.n	8007b68 <_free_r+0x6c>
 8007b50:	6820      	ldr	r0, [r4, #0]
 8007b52:	4401      	add	r1, r0
 8007b54:	1850      	adds	r0, r2, r1
 8007b56:	4283      	cmp	r3, r0
 8007b58:	6011      	str	r1, [r2, #0]
 8007b5a:	d1e0      	bne.n	8007b1e <_free_r+0x22>
 8007b5c:	6818      	ldr	r0, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	6053      	str	r3, [r2, #4]
 8007b62:	4408      	add	r0, r1
 8007b64:	6010      	str	r0, [r2, #0]
 8007b66:	e7da      	b.n	8007b1e <_free_r+0x22>
 8007b68:	d902      	bls.n	8007b70 <_free_r+0x74>
 8007b6a:	230c      	movs	r3, #12
 8007b6c:	602b      	str	r3, [r5, #0]
 8007b6e:	e7d6      	b.n	8007b1e <_free_r+0x22>
 8007b70:	6820      	ldr	r0, [r4, #0]
 8007b72:	1821      	adds	r1, r4, r0
 8007b74:	428b      	cmp	r3, r1
 8007b76:	bf04      	itt	eq
 8007b78:	6819      	ldreq	r1, [r3, #0]
 8007b7a:	685b      	ldreq	r3, [r3, #4]
 8007b7c:	6063      	str	r3, [r4, #4]
 8007b7e:	bf04      	itt	eq
 8007b80:	1809      	addeq	r1, r1, r0
 8007b82:	6021      	streq	r1, [r4, #0]
 8007b84:	6054      	str	r4, [r2, #4]
 8007b86:	e7ca      	b.n	8007b1e <_free_r+0x22>
 8007b88:	bd38      	pop	{r3, r4, r5, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20001e3c 	.word	0x20001e3c

08007b90 <__sfputc_r>:
 8007b90:	6893      	ldr	r3, [r2, #8]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	b410      	push	{r4}
 8007b98:	6093      	str	r3, [r2, #8]
 8007b9a:	da08      	bge.n	8007bae <__sfputc_r+0x1e>
 8007b9c:	6994      	ldr	r4, [r2, #24]
 8007b9e:	42a3      	cmp	r3, r4
 8007ba0:	db01      	blt.n	8007ba6 <__sfputc_r+0x16>
 8007ba2:	290a      	cmp	r1, #10
 8007ba4:	d103      	bne.n	8007bae <__sfputc_r+0x1e>
 8007ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007baa:	f7ff be78 	b.w	800789e <__swbuf_r>
 8007bae:	6813      	ldr	r3, [r2, #0]
 8007bb0:	1c58      	adds	r0, r3, #1
 8007bb2:	6010      	str	r0, [r2, #0]
 8007bb4:	7019      	strb	r1, [r3, #0]
 8007bb6:	4608      	mov	r0, r1
 8007bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <__sfputs_r>:
 8007bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	460f      	mov	r7, r1
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	18d5      	adds	r5, r2, r3
 8007bc8:	42ac      	cmp	r4, r5
 8007bca:	d101      	bne.n	8007bd0 <__sfputs_r+0x12>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	e007      	b.n	8007be0 <__sfputs_r+0x22>
 8007bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd4:	463a      	mov	r2, r7
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff ffda 	bl	8007b90 <__sfputc_r>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d1f3      	bne.n	8007bc8 <__sfputs_r+0xa>
 8007be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007be4 <_vfiprintf_r>:
 8007be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be8:	460d      	mov	r5, r1
 8007bea:	b09d      	sub	sp, #116	@ 0x74
 8007bec:	4614      	mov	r4, r2
 8007bee:	4698      	mov	r8, r3
 8007bf0:	4606      	mov	r6, r0
 8007bf2:	b118      	cbz	r0, 8007bfc <_vfiprintf_r+0x18>
 8007bf4:	6a03      	ldr	r3, [r0, #32]
 8007bf6:	b90b      	cbnz	r3, 8007bfc <_vfiprintf_r+0x18>
 8007bf8:	f7ff fcb4 	bl	8007564 <__sinit>
 8007bfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bfe:	07d9      	lsls	r1, r3, #31
 8007c00:	d405      	bmi.n	8007c0e <_vfiprintf_r+0x2a>
 8007c02:	89ab      	ldrh	r3, [r5, #12]
 8007c04:	059a      	lsls	r2, r3, #22
 8007c06:	d402      	bmi.n	8007c0e <_vfiprintf_r+0x2a>
 8007c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c0a:	f7ff ff66 	bl	8007ada <__retarget_lock_acquire_recursive>
 8007c0e:	89ab      	ldrh	r3, [r5, #12]
 8007c10:	071b      	lsls	r3, r3, #28
 8007c12:	d501      	bpl.n	8007c18 <_vfiprintf_r+0x34>
 8007c14:	692b      	ldr	r3, [r5, #16]
 8007c16:	b99b      	cbnz	r3, 8007c40 <_vfiprintf_r+0x5c>
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7ff fe7e 	bl	800791c <__swsetup_r>
 8007c20:	b170      	cbz	r0, 8007c40 <_vfiprintf_r+0x5c>
 8007c22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c24:	07dc      	lsls	r4, r3, #31
 8007c26:	d504      	bpl.n	8007c32 <_vfiprintf_r+0x4e>
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	b01d      	add	sp, #116	@ 0x74
 8007c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c32:	89ab      	ldrh	r3, [r5, #12]
 8007c34:	0598      	lsls	r0, r3, #22
 8007c36:	d4f7      	bmi.n	8007c28 <_vfiprintf_r+0x44>
 8007c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c3a:	f7ff ff4f 	bl	8007adc <__retarget_lock_release_recursive>
 8007c3e:	e7f3      	b.n	8007c28 <_vfiprintf_r+0x44>
 8007c40:	2300      	movs	r3, #0
 8007c42:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c44:	2320      	movs	r3, #32
 8007c46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c4e:	2330      	movs	r3, #48	@ 0x30
 8007c50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e00 <_vfiprintf_r+0x21c>
 8007c54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c58:	f04f 0901 	mov.w	r9, #1
 8007c5c:	4623      	mov	r3, r4
 8007c5e:	469a      	mov	sl, r3
 8007c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c64:	b10a      	cbz	r2, 8007c6a <_vfiprintf_r+0x86>
 8007c66:	2a25      	cmp	r2, #37	@ 0x25
 8007c68:	d1f9      	bne.n	8007c5e <_vfiprintf_r+0x7a>
 8007c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c6e:	d00b      	beq.n	8007c88 <_vfiprintf_r+0xa4>
 8007c70:	465b      	mov	r3, fp
 8007c72:	4622      	mov	r2, r4
 8007c74:	4629      	mov	r1, r5
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7ff ffa1 	bl	8007bbe <__sfputs_r>
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	f000 80a7 	beq.w	8007dd0 <_vfiprintf_r+0x1ec>
 8007c82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c84:	445a      	add	r2, fp
 8007c86:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c88:	f89a 3000 	ldrb.w	r3, [sl]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 809f 	beq.w	8007dd0 <_vfiprintf_r+0x1ec>
 8007c92:	2300      	movs	r3, #0
 8007c94:	f04f 32ff 	mov.w	r2, #4294967295
 8007c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c9c:	f10a 0a01 	add.w	sl, sl, #1
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	9307      	str	r3, [sp, #28]
 8007ca4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ca8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007caa:	4654      	mov	r4, sl
 8007cac:	2205      	movs	r2, #5
 8007cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb2:	4853      	ldr	r0, [pc, #332]	@ (8007e00 <_vfiprintf_r+0x21c>)
 8007cb4:	f7f8 fa9c 	bl	80001f0 <memchr>
 8007cb8:	9a04      	ldr	r2, [sp, #16]
 8007cba:	b9d8      	cbnz	r0, 8007cf4 <_vfiprintf_r+0x110>
 8007cbc:	06d1      	lsls	r1, r2, #27
 8007cbe:	bf44      	itt	mi
 8007cc0:	2320      	movmi	r3, #32
 8007cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cc6:	0713      	lsls	r3, r2, #28
 8007cc8:	bf44      	itt	mi
 8007cca:	232b      	movmi	r3, #43	@ 0x2b
 8007ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cd6:	d015      	beq.n	8007d04 <_vfiprintf_r+0x120>
 8007cd8:	9a07      	ldr	r2, [sp, #28]
 8007cda:	4654      	mov	r4, sl
 8007cdc:	2000      	movs	r0, #0
 8007cde:	f04f 0c0a 	mov.w	ip, #10
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ce8:	3b30      	subs	r3, #48	@ 0x30
 8007cea:	2b09      	cmp	r3, #9
 8007cec:	d94b      	bls.n	8007d86 <_vfiprintf_r+0x1a2>
 8007cee:	b1b0      	cbz	r0, 8007d1e <_vfiprintf_r+0x13a>
 8007cf0:	9207      	str	r2, [sp, #28]
 8007cf2:	e014      	b.n	8007d1e <_vfiprintf_r+0x13a>
 8007cf4:	eba0 0308 	sub.w	r3, r0, r8
 8007cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	9304      	str	r3, [sp, #16]
 8007d00:	46a2      	mov	sl, r4
 8007d02:	e7d2      	b.n	8007caa <_vfiprintf_r+0xc6>
 8007d04:	9b03      	ldr	r3, [sp, #12]
 8007d06:	1d19      	adds	r1, r3, #4
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	9103      	str	r1, [sp, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	bfbb      	ittet	lt
 8007d10:	425b      	neglt	r3, r3
 8007d12:	f042 0202 	orrlt.w	r2, r2, #2
 8007d16:	9307      	strge	r3, [sp, #28]
 8007d18:	9307      	strlt	r3, [sp, #28]
 8007d1a:	bfb8      	it	lt
 8007d1c:	9204      	strlt	r2, [sp, #16]
 8007d1e:	7823      	ldrb	r3, [r4, #0]
 8007d20:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d22:	d10a      	bne.n	8007d3a <_vfiprintf_r+0x156>
 8007d24:	7863      	ldrb	r3, [r4, #1]
 8007d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d28:	d132      	bne.n	8007d90 <_vfiprintf_r+0x1ac>
 8007d2a:	9b03      	ldr	r3, [sp, #12]
 8007d2c:	1d1a      	adds	r2, r3, #4
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	9203      	str	r2, [sp, #12]
 8007d32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d36:	3402      	adds	r4, #2
 8007d38:	9305      	str	r3, [sp, #20]
 8007d3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e10 <_vfiprintf_r+0x22c>
 8007d3e:	7821      	ldrb	r1, [r4, #0]
 8007d40:	2203      	movs	r2, #3
 8007d42:	4650      	mov	r0, sl
 8007d44:	f7f8 fa54 	bl	80001f0 <memchr>
 8007d48:	b138      	cbz	r0, 8007d5a <_vfiprintf_r+0x176>
 8007d4a:	9b04      	ldr	r3, [sp, #16]
 8007d4c:	eba0 000a 	sub.w	r0, r0, sl
 8007d50:	2240      	movs	r2, #64	@ 0x40
 8007d52:	4082      	lsls	r2, r0
 8007d54:	4313      	orrs	r3, r2
 8007d56:	3401      	adds	r4, #1
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d5e:	4829      	ldr	r0, [pc, #164]	@ (8007e04 <_vfiprintf_r+0x220>)
 8007d60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d64:	2206      	movs	r2, #6
 8007d66:	f7f8 fa43 	bl	80001f0 <memchr>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d03f      	beq.n	8007dee <_vfiprintf_r+0x20a>
 8007d6e:	4b26      	ldr	r3, [pc, #152]	@ (8007e08 <_vfiprintf_r+0x224>)
 8007d70:	bb1b      	cbnz	r3, 8007dba <_vfiprintf_r+0x1d6>
 8007d72:	9b03      	ldr	r3, [sp, #12]
 8007d74:	3307      	adds	r3, #7
 8007d76:	f023 0307 	bic.w	r3, r3, #7
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	9303      	str	r3, [sp, #12]
 8007d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d80:	443b      	add	r3, r7
 8007d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d84:	e76a      	b.n	8007c5c <_vfiprintf_r+0x78>
 8007d86:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	2001      	movs	r0, #1
 8007d8e:	e7a8      	b.n	8007ce2 <_vfiprintf_r+0xfe>
 8007d90:	2300      	movs	r3, #0
 8007d92:	3401      	adds	r4, #1
 8007d94:	9305      	str	r3, [sp, #20]
 8007d96:	4619      	mov	r1, r3
 8007d98:	f04f 0c0a 	mov.w	ip, #10
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007da2:	3a30      	subs	r2, #48	@ 0x30
 8007da4:	2a09      	cmp	r2, #9
 8007da6:	d903      	bls.n	8007db0 <_vfiprintf_r+0x1cc>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0c6      	beq.n	8007d3a <_vfiprintf_r+0x156>
 8007dac:	9105      	str	r1, [sp, #20]
 8007dae:	e7c4      	b.n	8007d3a <_vfiprintf_r+0x156>
 8007db0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db4:	4604      	mov	r4, r0
 8007db6:	2301      	movs	r3, #1
 8007db8:	e7f0      	b.n	8007d9c <_vfiprintf_r+0x1b8>
 8007dba:	ab03      	add	r3, sp, #12
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	462a      	mov	r2, r5
 8007dc0:	4b12      	ldr	r3, [pc, #72]	@ (8007e0c <_vfiprintf_r+0x228>)
 8007dc2:	a904      	add	r1, sp, #16
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f3af 8000 	nop.w
 8007dca:	4607      	mov	r7, r0
 8007dcc:	1c78      	adds	r0, r7, #1
 8007dce:	d1d6      	bne.n	8007d7e <_vfiprintf_r+0x19a>
 8007dd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dd2:	07d9      	lsls	r1, r3, #31
 8007dd4:	d405      	bmi.n	8007de2 <_vfiprintf_r+0x1fe>
 8007dd6:	89ab      	ldrh	r3, [r5, #12]
 8007dd8:	059a      	lsls	r2, r3, #22
 8007dda:	d402      	bmi.n	8007de2 <_vfiprintf_r+0x1fe>
 8007ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dde:	f7ff fe7d 	bl	8007adc <__retarget_lock_release_recursive>
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	065b      	lsls	r3, r3, #25
 8007de6:	f53f af1f 	bmi.w	8007c28 <_vfiprintf_r+0x44>
 8007dea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dec:	e71e      	b.n	8007c2c <_vfiprintf_r+0x48>
 8007dee:	ab03      	add	r3, sp, #12
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	462a      	mov	r2, r5
 8007df4:	4b05      	ldr	r3, [pc, #20]	@ (8007e0c <_vfiprintf_r+0x228>)
 8007df6:	a904      	add	r1, sp, #16
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f000 f879 	bl	8007ef0 <_printf_i>
 8007dfe:	e7e4      	b.n	8007dca <_vfiprintf_r+0x1e6>
 8007e00:	0801b080 	.word	0x0801b080
 8007e04:	0801b08a 	.word	0x0801b08a
 8007e08:	00000000 	.word	0x00000000
 8007e0c:	08007bbf 	.word	0x08007bbf
 8007e10:	0801b086 	.word	0x0801b086

08007e14 <_printf_common>:
 8007e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e18:	4616      	mov	r6, r2
 8007e1a:	4698      	mov	r8, r3
 8007e1c:	688a      	ldr	r2, [r1, #8]
 8007e1e:	690b      	ldr	r3, [r1, #16]
 8007e20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e24:	4293      	cmp	r3, r2
 8007e26:	bfb8      	it	lt
 8007e28:	4613      	movlt	r3, r2
 8007e2a:	6033      	str	r3, [r6, #0]
 8007e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e30:	4607      	mov	r7, r0
 8007e32:	460c      	mov	r4, r1
 8007e34:	b10a      	cbz	r2, 8007e3a <_printf_common+0x26>
 8007e36:	3301      	adds	r3, #1
 8007e38:	6033      	str	r3, [r6, #0]
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	0699      	lsls	r1, r3, #26
 8007e3e:	bf42      	ittt	mi
 8007e40:	6833      	ldrmi	r3, [r6, #0]
 8007e42:	3302      	addmi	r3, #2
 8007e44:	6033      	strmi	r3, [r6, #0]
 8007e46:	6825      	ldr	r5, [r4, #0]
 8007e48:	f015 0506 	ands.w	r5, r5, #6
 8007e4c:	d106      	bne.n	8007e5c <_printf_common+0x48>
 8007e4e:	f104 0a19 	add.w	sl, r4, #25
 8007e52:	68e3      	ldr	r3, [r4, #12]
 8007e54:	6832      	ldr	r2, [r6, #0]
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	42ab      	cmp	r3, r5
 8007e5a:	dc26      	bgt.n	8007eaa <_printf_common+0x96>
 8007e5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e60:	6822      	ldr	r2, [r4, #0]
 8007e62:	3b00      	subs	r3, #0
 8007e64:	bf18      	it	ne
 8007e66:	2301      	movne	r3, #1
 8007e68:	0692      	lsls	r2, r2, #26
 8007e6a:	d42b      	bmi.n	8007ec4 <_printf_common+0xb0>
 8007e6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e70:	4641      	mov	r1, r8
 8007e72:	4638      	mov	r0, r7
 8007e74:	47c8      	blx	r9
 8007e76:	3001      	adds	r0, #1
 8007e78:	d01e      	beq.n	8007eb8 <_printf_common+0xa4>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	6922      	ldr	r2, [r4, #16]
 8007e7e:	f003 0306 	and.w	r3, r3, #6
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	bf02      	ittt	eq
 8007e86:	68e5      	ldreq	r5, [r4, #12]
 8007e88:	6833      	ldreq	r3, [r6, #0]
 8007e8a:	1aed      	subeq	r5, r5, r3
 8007e8c:	68a3      	ldr	r3, [r4, #8]
 8007e8e:	bf0c      	ite	eq
 8007e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e94:	2500      	movne	r5, #0
 8007e96:	4293      	cmp	r3, r2
 8007e98:	bfc4      	itt	gt
 8007e9a:	1a9b      	subgt	r3, r3, r2
 8007e9c:	18ed      	addgt	r5, r5, r3
 8007e9e:	2600      	movs	r6, #0
 8007ea0:	341a      	adds	r4, #26
 8007ea2:	42b5      	cmp	r5, r6
 8007ea4:	d11a      	bne.n	8007edc <_printf_common+0xc8>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	e008      	b.n	8007ebc <_printf_common+0xa8>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4652      	mov	r2, sl
 8007eae:	4641      	mov	r1, r8
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	47c8      	blx	r9
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d103      	bne.n	8007ec0 <_printf_common+0xac>
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec0:	3501      	adds	r5, #1
 8007ec2:	e7c6      	b.n	8007e52 <_printf_common+0x3e>
 8007ec4:	18e1      	adds	r1, r4, r3
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	2030      	movs	r0, #48	@ 0x30
 8007eca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ece:	4422      	add	r2, r4
 8007ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ed8:	3302      	adds	r3, #2
 8007eda:	e7c7      	b.n	8007e6c <_printf_common+0x58>
 8007edc:	2301      	movs	r3, #1
 8007ede:	4622      	mov	r2, r4
 8007ee0:	4641      	mov	r1, r8
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	47c8      	blx	r9
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d0e6      	beq.n	8007eb8 <_printf_common+0xa4>
 8007eea:	3601      	adds	r6, #1
 8007eec:	e7d9      	b.n	8007ea2 <_printf_common+0x8e>
	...

08007ef0 <_printf_i>:
 8007ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef4:	7e0f      	ldrb	r7, [r1, #24]
 8007ef6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ef8:	2f78      	cmp	r7, #120	@ 0x78
 8007efa:	4691      	mov	r9, r2
 8007efc:	4680      	mov	r8, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	469a      	mov	sl, r3
 8007f02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f06:	d807      	bhi.n	8007f18 <_printf_i+0x28>
 8007f08:	2f62      	cmp	r7, #98	@ 0x62
 8007f0a:	d80a      	bhi.n	8007f22 <_printf_i+0x32>
 8007f0c:	2f00      	cmp	r7, #0
 8007f0e:	f000 80d2 	beq.w	80080b6 <_printf_i+0x1c6>
 8007f12:	2f58      	cmp	r7, #88	@ 0x58
 8007f14:	f000 80b9 	beq.w	800808a <_printf_i+0x19a>
 8007f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f20:	e03a      	b.n	8007f98 <_printf_i+0xa8>
 8007f22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f26:	2b15      	cmp	r3, #21
 8007f28:	d8f6      	bhi.n	8007f18 <_printf_i+0x28>
 8007f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8007f30 <_printf_i+0x40>)
 8007f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f30:	08007f89 	.word	0x08007f89
 8007f34:	08007f9d 	.word	0x08007f9d
 8007f38:	08007f19 	.word	0x08007f19
 8007f3c:	08007f19 	.word	0x08007f19
 8007f40:	08007f19 	.word	0x08007f19
 8007f44:	08007f19 	.word	0x08007f19
 8007f48:	08007f9d 	.word	0x08007f9d
 8007f4c:	08007f19 	.word	0x08007f19
 8007f50:	08007f19 	.word	0x08007f19
 8007f54:	08007f19 	.word	0x08007f19
 8007f58:	08007f19 	.word	0x08007f19
 8007f5c:	0800809d 	.word	0x0800809d
 8007f60:	08007fc7 	.word	0x08007fc7
 8007f64:	08008057 	.word	0x08008057
 8007f68:	08007f19 	.word	0x08007f19
 8007f6c:	08007f19 	.word	0x08007f19
 8007f70:	080080bf 	.word	0x080080bf
 8007f74:	08007f19 	.word	0x08007f19
 8007f78:	08007fc7 	.word	0x08007fc7
 8007f7c:	08007f19 	.word	0x08007f19
 8007f80:	08007f19 	.word	0x08007f19
 8007f84:	0800805f 	.word	0x0800805f
 8007f88:	6833      	ldr	r3, [r6, #0]
 8007f8a:	1d1a      	adds	r2, r3, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6032      	str	r2, [r6, #0]
 8007f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e09d      	b.n	80080d8 <_printf_i+0x1e8>
 8007f9c:	6833      	ldr	r3, [r6, #0]
 8007f9e:	6820      	ldr	r0, [r4, #0]
 8007fa0:	1d19      	adds	r1, r3, #4
 8007fa2:	6031      	str	r1, [r6, #0]
 8007fa4:	0606      	lsls	r6, r0, #24
 8007fa6:	d501      	bpl.n	8007fac <_printf_i+0xbc>
 8007fa8:	681d      	ldr	r5, [r3, #0]
 8007faa:	e003      	b.n	8007fb4 <_printf_i+0xc4>
 8007fac:	0645      	lsls	r5, r0, #25
 8007fae:	d5fb      	bpl.n	8007fa8 <_printf_i+0xb8>
 8007fb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fb4:	2d00      	cmp	r5, #0
 8007fb6:	da03      	bge.n	8007fc0 <_printf_i+0xd0>
 8007fb8:	232d      	movs	r3, #45	@ 0x2d
 8007fba:	426d      	negs	r5, r5
 8007fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fc0:	4859      	ldr	r0, [pc, #356]	@ (8008128 <_printf_i+0x238>)
 8007fc2:	230a      	movs	r3, #10
 8007fc4:	e011      	b.n	8007fea <_printf_i+0xfa>
 8007fc6:	6821      	ldr	r1, [r4, #0]
 8007fc8:	6833      	ldr	r3, [r6, #0]
 8007fca:	0608      	lsls	r0, r1, #24
 8007fcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fd0:	d402      	bmi.n	8007fd8 <_printf_i+0xe8>
 8007fd2:	0649      	lsls	r1, r1, #25
 8007fd4:	bf48      	it	mi
 8007fd6:	b2ad      	uxthmi	r5, r5
 8007fd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fda:	4853      	ldr	r0, [pc, #332]	@ (8008128 <_printf_i+0x238>)
 8007fdc:	6033      	str	r3, [r6, #0]
 8007fde:	bf14      	ite	ne
 8007fe0:	230a      	movne	r3, #10
 8007fe2:	2308      	moveq	r3, #8
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fea:	6866      	ldr	r6, [r4, #4]
 8007fec:	60a6      	str	r6, [r4, #8]
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	bfa2      	ittt	ge
 8007ff2:	6821      	ldrge	r1, [r4, #0]
 8007ff4:	f021 0104 	bicge.w	r1, r1, #4
 8007ff8:	6021      	strge	r1, [r4, #0]
 8007ffa:	b90d      	cbnz	r5, 8008000 <_printf_i+0x110>
 8007ffc:	2e00      	cmp	r6, #0
 8007ffe:	d04b      	beq.n	8008098 <_printf_i+0x1a8>
 8008000:	4616      	mov	r6, r2
 8008002:	fbb5 f1f3 	udiv	r1, r5, r3
 8008006:	fb03 5711 	mls	r7, r3, r1, r5
 800800a:	5dc7      	ldrb	r7, [r0, r7]
 800800c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008010:	462f      	mov	r7, r5
 8008012:	42bb      	cmp	r3, r7
 8008014:	460d      	mov	r5, r1
 8008016:	d9f4      	bls.n	8008002 <_printf_i+0x112>
 8008018:	2b08      	cmp	r3, #8
 800801a:	d10b      	bne.n	8008034 <_printf_i+0x144>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	07df      	lsls	r7, r3, #31
 8008020:	d508      	bpl.n	8008034 <_printf_i+0x144>
 8008022:	6923      	ldr	r3, [r4, #16]
 8008024:	6861      	ldr	r1, [r4, #4]
 8008026:	4299      	cmp	r1, r3
 8008028:	bfde      	ittt	le
 800802a:	2330      	movle	r3, #48	@ 0x30
 800802c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008030:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008034:	1b92      	subs	r2, r2, r6
 8008036:	6122      	str	r2, [r4, #16]
 8008038:	f8cd a000 	str.w	sl, [sp]
 800803c:	464b      	mov	r3, r9
 800803e:	aa03      	add	r2, sp, #12
 8008040:	4621      	mov	r1, r4
 8008042:	4640      	mov	r0, r8
 8008044:	f7ff fee6 	bl	8007e14 <_printf_common>
 8008048:	3001      	adds	r0, #1
 800804a:	d14a      	bne.n	80080e2 <_printf_i+0x1f2>
 800804c:	f04f 30ff 	mov.w	r0, #4294967295
 8008050:	b004      	add	sp, #16
 8008052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	f043 0320 	orr.w	r3, r3, #32
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	4833      	ldr	r0, [pc, #204]	@ (800812c <_printf_i+0x23c>)
 8008060:	2778      	movs	r7, #120	@ 0x78
 8008062:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	6831      	ldr	r1, [r6, #0]
 800806a:	061f      	lsls	r7, r3, #24
 800806c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008070:	d402      	bmi.n	8008078 <_printf_i+0x188>
 8008072:	065f      	lsls	r7, r3, #25
 8008074:	bf48      	it	mi
 8008076:	b2ad      	uxthmi	r5, r5
 8008078:	6031      	str	r1, [r6, #0]
 800807a:	07d9      	lsls	r1, r3, #31
 800807c:	bf44      	itt	mi
 800807e:	f043 0320 	orrmi.w	r3, r3, #32
 8008082:	6023      	strmi	r3, [r4, #0]
 8008084:	b11d      	cbz	r5, 800808e <_printf_i+0x19e>
 8008086:	2310      	movs	r3, #16
 8008088:	e7ac      	b.n	8007fe4 <_printf_i+0xf4>
 800808a:	4827      	ldr	r0, [pc, #156]	@ (8008128 <_printf_i+0x238>)
 800808c:	e7e9      	b.n	8008062 <_printf_i+0x172>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	f023 0320 	bic.w	r3, r3, #32
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	e7f6      	b.n	8008086 <_printf_i+0x196>
 8008098:	4616      	mov	r6, r2
 800809a:	e7bd      	b.n	8008018 <_printf_i+0x128>
 800809c:	6833      	ldr	r3, [r6, #0]
 800809e:	6825      	ldr	r5, [r4, #0]
 80080a0:	6961      	ldr	r1, [r4, #20]
 80080a2:	1d18      	adds	r0, r3, #4
 80080a4:	6030      	str	r0, [r6, #0]
 80080a6:	062e      	lsls	r6, r5, #24
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	d501      	bpl.n	80080b0 <_printf_i+0x1c0>
 80080ac:	6019      	str	r1, [r3, #0]
 80080ae:	e002      	b.n	80080b6 <_printf_i+0x1c6>
 80080b0:	0668      	lsls	r0, r5, #25
 80080b2:	d5fb      	bpl.n	80080ac <_printf_i+0x1bc>
 80080b4:	8019      	strh	r1, [r3, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	6123      	str	r3, [r4, #16]
 80080ba:	4616      	mov	r6, r2
 80080bc:	e7bc      	b.n	8008038 <_printf_i+0x148>
 80080be:	6833      	ldr	r3, [r6, #0]
 80080c0:	1d1a      	adds	r2, r3, #4
 80080c2:	6032      	str	r2, [r6, #0]
 80080c4:	681e      	ldr	r6, [r3, #0]
 80080c6:	6862      	ldr	r2, [r4, #4]
 80080c8:	2100      	movs	r1, #0
 80080ca:	4630      	mov	r0, r6
 80080cc:	f7f8 f890 	bl	80001f0 <memchr>
 80080d0:	b108      	cbz	r0, 80080d6 <_printf_i+0x1e6>
 80080d2:	1b80      	subs	r0, r0, r6
 80080d4:	6060      	str	r0, [r4, #4]
 80080d6:	6863      	ldr	r3, [r4, #4]
 80080d8:	6123      	str	r3, [r4, #16]
 80080da:	2300      	movs	r3, #0
 80080dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080e0:	e7aa      	b.n	8008038 <_printf_i+0x148>
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	4632      	mov	r2, r6
 80080e6:	4649      	mov	r1, r9
 80080e8:	4640      	mov	r0, r8
 80080ea:	47d0      	blx	sl
 80080ec:	3001      	adds	r0, #1
 80080ee:	d0ad      	beq.n	800804c <_printf_i+0x15c>
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	079b      	lsls	r3, r3, #30
 80080f4:	d413      	bmi.n	800811e <_printf_i+0x22e>
 80080f6:	68e0      	ldr	r0, [r4, #12]
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	4298      	cmp	r0, r3
 80080fc:	bfb8      	it	lt
 80080fe:	4618      	movlt	r0, r3
 8008100:	e7a6      	b.n	8008050 <_printf_i+0x160>
 8008102:	2301      	movs	r3, #1
 8008104:	4632      	mov	r2, r6
 8008106:	4649      	mov	r1, r9
 8008108:	4640      	mov	r0, r8
 800810a:	47d0      	blx	sl
 800810c:	3001      	adds	r0, #1
 800810e:	d09d      	beq.n	800804c <_printf_i+0x15c>
 8008110:	3501      	adds	r5, #1
 8008112:	68e3      	ldr	r3, [r4, #12]
 8008114:	9903      	ldr	r1, [sp, #12]
 8008116:	1a5b      	subs	r3, r3, r1
 8008118:	42ab      	cmp	r3, r5
 800811a:	dcf2      	bgt.n	8008102 <_printf_i+0x212>
 800811c:	e7eb      	b.n	80080f6 <_printf_i+0x206>
 800811e:	2500      	movs	r5, #0
 8008120:	f104 0619 	add.w	r6, r4, #25
 8008124:	e7f5      	b.n	8008112 <_printf_i+0x222>
 8008126:	bf00      	nop
 8008128:	0801b091 	.word	0x0801b091
 800812c:	0801b0a2 	.word	0x0801b0a2

08008130 <__sflush_r>:
 8008130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008138:	0716      	lsls	r6, r2, #28
 800813a:	4605      	mov	r5, r0
 800813c:	460c      	mov	r4, r1
 800813e:	d454      	bmi.n	80081ea <__sflush_r+0xba>
 8008140:	684b      	ldr	r3, [r1, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	dc02      	bgt.n	800814c <__sflush_r+0x1c>
 8008146:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008148:	2b00      	cmp	r3, #0
 800814a:	dd48      	ble.n	80081de <__sflush_r+0xae>
 800814c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800814e:	2e00      	cmp	r6, #0
 8008150:	d045      	beq.n	80081de <__sflush_r+0xae>
 8008152:	2300      	movs	r3, #0
 8008154:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008158:	682f      	ldr	r7, [r5, #0]
 800815a:	6a21      	ldr	r1, [r4, #32]
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	d030      	beq.n	80081c2 <__sflush_r+0x92>
 8008160:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	0759      	lsls	r1, r3, #29
 8008166:	d505      	bpl.n	8008174 <__sflush_r+0x44>
 8008168:	6863      	ldr	r3, [r4, #4]
 800816a:	1ad2      	subs	r2, r2, r3
 800816c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800816e:	b10b      	cbz	r3, 8008174 <__sflush_r+0x44>
 8008170:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008172:	1ad2      	subs	r2, r2, r3
 8008174:	2300      	movs	r3, #0
 8008176:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008178:	6a21      	ldr	r1, [r4, #32]
 800817a:	4628      	mov	r0, r5
 800817c:	47b0      	blx	r6
 800817e:	1c43      	adds	r3, r0, #1
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	d106      	bne.n	8008192 <__sflush_r+0x62>
 8008184:	6829      	ldr	r1, [r5, #0]
 8008186:	291d      	cmp	r1, #29
 8008188:	d82b      	bhi.n	80081e2 <__sflush_r+0xb2>
 800818a:	4a2a      	ldr	r2, [pc, #168]	@ (8008234 <__sflush_r+0x104>)
 800818c:	410a      	asrs	r2, r1
 800818e:	07d6      	lsls	r6, r2, #31
 8008190:	d427      	bmi.n	80081e2 <__sflush_r+0xb2>
 8008192:	2200      	movs	r2, #0
 8008194:	6062      	str	r2, [r4, #4]
 8008196:	04d9      	lsls	r1, r3, #19
 8008198:	6922      	ldr	r2, [r4, #16]
 800819a:	6022      	str	r2, [r4, #0]
 800819c:	d504      	bpl.n	80081a8 <__sflush_r+0x78>
 800819e:	1c42      	adds	r2, r0, #1
 80081a0:	d101      	bne.n	80081a6 <__sflush_r+0x76>
 80081a2:	682b      	ldr	r3, [r5, #0]
 80081a4:	b903      	cbnz	r3, 80081a8 <__sflush_r+0x78>
 80081a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80081a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081aa:	602f      	str	r7, [r5, #0]
 80081ac:	b1b9      	cbz	r1, 80081de <__sflush_r+0xae>
 80081ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081b2:	4299      	cmp	r1, r3
 80081b4:	d002      	beq.n	80081bc <__sflush_r+0x8c>
 80081b6:	4628      	mov	r0, r5
 80081b8:	f7ff fca0 	bl	8007afc <_free_r>
 80081bc:	2300      	movs	r3, #0
 80081be:	6363      	str	r3, [r4, #52]	@ 0x34
 80081c0:	e00d      	b.n	80081de <__sflush_r+0xae>
 80081c2:	2301      	movs	r3, #1
 80081c4:	4628      	mov	r0, r5
 80081c6:	47b0      	blx	r6
 80081c8:	4602      	mov	r2, r0
 80081ca:	1c50      	adds	r0, r2, #1
 80081cc:	d1c9      	bne.n	8008162 <__sflush_r+0x32>
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d0c6      	beq.n	8008162 <__sflush_r+0x32>
 80081d4:	2b1d      	cmp	r3, #29
 80081d6:	d001      	beq.n	80081dc <__sflush_r+0xac>
 80081d8:	2b16      	cmp	r3, #22
 80081da:	d11e      	bne.n	800821a <__sflush_r+0xea>
 80081dc:	602f      	str	r7, [r5, #0]
 80081de:	2000      	movs	r0, #0
 80081e0:	e022      	b.n	8008228 <__sflush_r+0xf8>
 80081e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081e6:	b21b      	sxth	r3, r3
 80081e8:	e01b      	b.n	8008222 <__sflush_r+0xf2>
 80081ea:	690f      	ldr	r7, [r1, #16]
 80081ec:	2f00      	cmp	r7, #0
 80081ee:	d0f6      	beq.n	80081de <__sflush_r+0xae>
 80081f0:	0793      	lsls	r3, r2, #30
 80081f2:	680e      	ldr	r6, [r1, #0]
 80081f4:	bf08      	it	eq
 80081f6:	694b      	ldreq	r3, [r1, #20]
 80081f8:	600f      	str	r7, [r1, #0]
 80081fa:	bf18      	it	ne
 80081fc:	2300      	movne	r3, #0
 80081fe:	eba6 0807 	sub.w	r8, r6, r7
 8008202:	608b      	str	r3, [r1, #8]
 8008204:	f1b8 0f00 	cmp.w	r8, #0
 8008208:	dde9      	ble.n	80081de <__sflush_r+0xae>
 800820a:	6a21      	ldr	r1, [r4, #32]
 800820c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800820e:	4643      	mov	r3, r8
 8008210:	463a      	mov	r2, r7
 8008212:	4628      	mov	r0, r5
 8008214:	47b0      	blx	r6
 8008216:	2800      	cmp	r0, #0
 8008218:	dc08      	bgt.n	800822c <__sflush_r+0xfc>
 800821a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800821e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800822c:	4407      	add	r7, r0
 800822e:	eba8 0800 	sub.w	r8, r8, r0
 8008232:	e7e7      	b.n	8008204 <__sflush_r+0xd4>
 8008234:	dfbffffe 	.word	0xdfbffffe

08008238 <_fflush_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	690b      	ldr	r3, [r1, #16]
 800823c:	4605      	mov	r5, r0
 800823e:	460c      	mov	r4, r1
 8008240:	b913      	cbnz	r3, 8008248 <_fflush_r+0x10>
 8008242:	2500      	movs	r5, #0
 8008244:	4628      	mov	r0, r5
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	b118      	cbz	r0, 8008252 <_fflush_r+0x1a>
 800824a:	6a03      	ldr	r3, [r0, #32]
 800824c:	b90b      	cbnz	r3, 8008252 <_fflush_r+0x1a>
 800824e:	f7ff f989 	bl	8007564 <__sinit>
 8008252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0f3      	beq.n	8008242 <_fflush_r+0xa>
 800825a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800825c:	07d0      	lsls	r0, r2, #31
 800825e:	d404      	bmi.n	800826a <_fflush_r+0x32>
 8008260:	0599      	lsls	r1, r3, #22
 8008262:	d402      	bmi.n	800826a <_fflush_r+0x32>
 8008264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008266:	f7ff fc38 	bl	8007ada <__retarget_lock_acquire_recursive>
 800826a:	4628      	mov	r0, r5
 800826c:	4621      	mov	r1, r4
 800826e:	f7ff ff5f 	bl	8008130 <__sflush_r>
 8008272:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008274:	07da      	lsls	r2, r3, #31
 8008276:	4605      	mov	r5, r0
 8008278:	d4e4      	bmi.n	8008244 <_fflush_r+0xc>
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	059b      	lsls	r3, r3, #22
 800827e:	d4e1      	bmi.n	8008244 <_fflush_r+0xc>
 8008280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008282:	f7ff fc2b 	bl	8007adc <__retarget_lock_release_recursive>
 8008286:	e7dd      	b.n	8008244 <_fflush_r+0xc>

08008288 <__swhatbuf_r>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	460c      	mov	r4, r1
 800828c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008290:	2900      	cmp	r1, #0
 8008292:	b096      	sub	sp, #88	@ 0x58
 8008294:	4615      	mov	r5, r2
 8008296:	461e      	mov	r6, r3
 8008298:	da0d      	bge.n	80082b6 <__swhatbuf_r+0x2e>
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082a0:	f04f 0100 	mov.w	r1, #0
 80082a4:	bf14      	ite	ne
 80082a6:	2340      	movne	r3, #64	@ 0x40
 80082a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082ac:	2000      	movs	r0, #0
 80082ae:	6031      	str	r1, [r6, #0]
 80082b0:	602b      	str	r3, [r5, #0]
 80082b2:	b016      	add	sp, #88	@ 0x58
 80082b4:	bd70      	pop	{r4, r5, r6, pc}
 80082b6:	466a      	mov	r2, sp
 80082b8:	f000 f848 	bl	800834c <_fstat_r>
 80082bc:	2800      	cmp	r0, #0
 80082be:	dbec      	blt.n	800829a <__swhatbuf_r+0x12>
 80082c0:	9901      	ldr	r1, [sp, #4]
 80082c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082ca:	4259      	negs	r1, r3
 80082cc:	4159      	adcs	r1, r3
 80082ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082d2:	e7eb      	b.n	80082ac <__swhatbuf_r+0x24>

080082d4 <__smakebuf_r>:
 80082d4:	898b      	ldrh	r3, [r1, #12]
 80082d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082d8:	079d      	lsls	r5, r3, #30
 80082da:	4606      	mov	r6, r0
 80082dc:	460c      	mov	r4, r1
 80082de:	d507      	bpl.n	80082f0 <__smakebuf_r+0x1c>
 80082e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	6123      	str	r3, [r4, #16]
 80082e8:	2301      	movs	r3, #1
 80082ea:	6163      	str	r3, [r4, #20]
 80082ec:	b003      	add	sp, #12
 80082ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f0:	ab01      	add	r3, sp, #4
 80082f2:	466a      	mov	r2, sp
 80082f4:	f7ff ffc8 	bl	8008288 <__swhatbuf_r>
 80082f8:	9f00      	ldr	r7, [sp, #0]
 80082fa:	4605      	mov	r5, r0
 80082fc:	4639      	mov	r1, r7
 80082fe:	4630      	mov	r0, r6
 8008300:	f7ff f818 	bl	8007334 <_malloc_r>
 8008304:	b948      	cbnz	r0, 800831a <__smakebuf_r+0x46>
 8008306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830a:	059a      	lsls	r2, r3, #22
 800830c:	d4ee      	bmi.n	80082ec <__smakebuf_r+0x18>
 800830e:	f023 0303 	bic.w	r3, r3, #3
 8008312:	f043 0302 	orr.w	r3, r3, #2
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	e7e2      	b.n	80082e0 <__smakebuf_r+0xc>
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	6020      	str	r0, [r4, #0]
 800831e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008322:	81a3      	strh	r3, [r4, #12]
 8008324:	9b01      	ldr	r3, [sp, #4]
 8008326:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800832a:	b15b      	cbz	r3, 8008344 <__smakebuf_r+0x70>
 800832c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008330:	4630      	mov	r0, r6
 8008332:	f000 f81d 	bl	8008370 <_isatty_r>
 8008336:	b128      	cbz	r0, 8008344 <__smakebuf_r+0x70>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	f023 0303 	bic.w	r3, r3, #3
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	431d      	orrs	r5, r3
 8008348:	81a5      	strh	r5, [r4, #12]
 800834a:	e7cf      	b.n	80082ec <__smakebuf_r+0x18>

0800834c <_fstat_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d07      	ldr	r5, [pc, #28]	@ (800836c <_fstat_r+0x20>)
 8008350:	2300      	movs	r3, #0
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	f7f8 ff03 	bl	8001164 <_fstat>
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	d102      	bne.n	8008368 <_fstat_r+0x1c>
 8008362:	682b      	ldr	r3, [r5, #0]
 8008364:	b103      	cbz	r3, 8008368 <_fstat_r+0x1c>
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	bd38      	pop	{r3, r4, r5, pc}
 800836a:	bf00      	nop
 800836c:	20001f7c 	.word	0x20001f7c

08008370 <_isatty_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d06      	ldr	r5, [pc, #24]	@ (800838c <_isatty_r+0x1c>)
 8008374:	2300      	movs	r3, #0
 8008376:	4604      	mov	r4, r0
 8008378:	4608      	mov	r0, r1
 800837a:	602b      	str	r3, [r5, #0]
 800837c:	f7f8 fea0 	bl	80010c0 <_isatty>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d102      	bne.n	800838a <_isatty_r+0x1a>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	b103      	cbz	r3, 800838a <_isatty_r+0x1a>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	20001f7c 	.word	0x20001f7c

08008390 <_init>:
 8008390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008392:	bf00      	nop
 8008394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008396:	bc08      	pop	{r3}
 8008398:	469e      	mov	lr, r3
 800839a:	4770      	bx	lr

0800839c <_fini>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	bf00      	nop
 80083a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a2:	bc08      	pop	{r3}
 80083a4:	469e      	mov	lr, r3
 80083a6:	4770      	bx	lr
