
reoptimization_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012cfc  08009460  08009460  0000a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c15c  0801c15c  0001e468  2**0
                  CONTENTS
  4 .ARM          00000008  0801c15c  0801c15c  0001d15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c164  0801c164  0001e468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c164  0801c164  0001d164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c168  0801c168  0001d168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  0801c16c  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f704  20000468  0801c5d4  0001e468  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000fb6c  0801c5d4  0001eb6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e468  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ddd6  00000000  00000000  0001e498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070d5  00000000  00000000  0005c26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001b30f  00000000  00000000  00063343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a0  00000000  00000000  0007e658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00005ed9  00000000  00000000  0007fef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030d94  00000000  00000000  00085dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00049adf  00000000  00000000  000b6b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012383a  00000000  00000000  00100644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  00223e7e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005170  00000000  00000000  00223f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  002290ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000715e  00000000  00000000  00229113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000010f8  00000000  00000000  00230271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000468 	.word	0x20000468
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009448 	.word	0x08009448

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000046c 	.word	0x2000046c
 80001ec:	08009448 	.word	0x08009448

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000582:	4827      	ldr	r0, [pc, #156]	@ (8000620 <MX_ADC1_Init+0xa0>)
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <MX_ADC1_Init+0xa4>)
 8000586:	6002      	str	r2, [r0, #0]
{
 8000588:	b08a      	sub	sp, #40	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800058a:	f44f 11a0 	mov.w	r1, #1310720	@ 0x140000
  ADC_MultiModeTypeDef multimode = {0};
 800058e:	2300      	movs	r3, #0
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000590:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000592:	6041      	str	r1, [r0, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000594:	2404      	movs	r4, #4
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000596:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 800059a:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
  ADC_MultiModeTypeDef multimode = {0};
 800059e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80005a6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80005aa:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b2:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005b6:	e9c0 1c0a 	strd	r1, ip, [r0, #40]	@ 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	9309      	str	r3, [sp, #36]	@ 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005bc:	8303      	strh	r3, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 80005be:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c0:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c4:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c8:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ca:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ce:	f002 fc0f 	bl	8002df0 <HAL_ADC_Init>
 80005d2:	b9d0      	cbnz	r0, 800060a <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d4:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005d6:	4812      	ldr	r0, [pc, #72]	@ (8000620 <MX_ADC1_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d8:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005da:	a901      	add	r1, sp, #4
 80005dc:	f003 fa14 	bl	8003a08 <HAL_ADCEx_MultiModeConfigChannel>
 80005e0:	b9d0      	cbnz	r0, 8000618 <MX_ADC1_Init+0x98>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005e2:	f04f 0e00 	mov.w	lr, #0
  sConfig.Channel = ADC_CHANNEL_5;
 80005e6:	4a10      	ldr	r2, [pc, #64]	@ (8000628 <MX_ADC1_Init+0xa8>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e8:	480d      	ldr	r0, [pc, #52]	@ (8000620 <MX_ADC1_Init+0xa0>)
  sConfig.Channel = ADC_CHANNEL_5;
 80005ea:	9204      	str	r2, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ec:	2406      	movs	r4, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ee:	237f      	movs	r3, #127	@ 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f0:	f04f 0c04 	mov.w	ip, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	a904      	add	r1, sp, #16
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005f6:	e9cd 4e05 	strd	r4, lr, [sp, #20]
  sConfig.Offset = 0;
 80005fa:	e9cd ce08 	strd	ip, lr, [sp, #32]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005fe:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	f002 fd48 	bl	8003094 <HAL_ADC_ConfigChannel>
 8000604:	b920      	cbnz	r0, 8000610 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000606:	b00a      	add	sp, #40	@ 0x28
 8000608:	bd10      	pop	{r4, pc}
    Error_Handler();
 800060a:	f000 fb43 	bl	8000c94 <Error_Handler>
 800060e:	e7e1      	b.n	80005d4 <MX_ADC1_Init+0x54>
    Error_Handler();
 8000610:	f000 fb40 	bl	8000c94 <Error_Handler>
}
 8000614:	b00a      	add	sp, #40	@ 0x28
 8000616:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000618:	f000 fb3c 	bl	8000c94 <Error_Handler>
 800061c:	e7e1      	b.n	80005e2 <MX_ADC1_Init+0x62>
 800061e:	bf00      	nop
 8000620:	200004cc 	.word	0x200004cc
 8000624:	50040000 	.word	0x50040000
 8000628:	14f00020 	.word	0x14f00020

0800062c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	4604      	mov	r4, r0
 8000630:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	228c      	movs	r2, #140	@ 0x8c
 8000636:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800063c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000640:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000642:	f008 fa1d 	bl	8008a80 <memset>
  if(adcHandle->Instance==ADC1)
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <HAL_ADC_MspInit+0xb8>)
 8000648:	6822      	ldr	r2, [r4, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	d001      	beq.n	8000652 <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800064e:	b02a      	add	sp, #168	@ 0xa8
 8000650:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000652:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000656:	f04f 5540 	mov.w	r5, #805306368	@ 0x30000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065a:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800065c:	9107      	str	r1, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800065e:	9526      	str	r5, [sp, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000660:	f004 fe9a 	bl	8005398 <HAL_RCCEx_PeriphCLKConfig>
 8000664:	2800      	cmp	r0, #0
 8000666:	d136      	bne.n	80006d6 <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000668:	481f      	ldr	r0, [pc, #124]	@ (80006e8 <HAL_ADC_MspInit+0xbc>)
 800066a:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
 800066c:	f446 5300 	orr.w	r3, r6, #8192	@ 0x2000
 8000670:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8000672:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8000674:	f402 5500 	and.w	r5, r2, #8192	@ 0x2000
 8000678:	9500      	str	r5, [sp, #0]
 800067a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 800067e:	4d1b      	ldr	r5, [pc, #108]	@ (80006ec <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	f046 0301 	orr.w	r3, r6, #1
 8000684:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8000686:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8000688:	f000 0201 	and.w	r2, r0, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	9201      	str	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000692:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000698:	2303      	movs	r3, #3
 800069a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f003 fe77 	bl	8004394 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80006a6:	4912      	ldr	r1, [pc, #72]	@ (80006f0 <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80006ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006b0:	e9c5 1600 	strd	r1, r6, [r5]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006b4:	e9c5 0205 	strd	r0, r2, [r5, #20]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006b8:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ba:	2120      	movs	r1, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006bc:	4628      	mov	r0, r5
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006be:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006c2:	e9c5 1607 	strd	r1, r6, [r5, #28]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006c6:	612b      	str	r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c8:	f003 fd64 	bl	8004194 <HAL_DMA_Init>
 80006cc:	b930      	cbnz	r0, 80006dc <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ce:	6525      	str	r5, [r4, #80]	@ 0x50
 80006d0:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80006d2:	b02a      	add	sp, #168	@ 0xa8
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80006d6:	f000 fadd 	bl	8000c94 <Error_Handler>
 80006da:	e7c5      	b.n	8000668 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 80006dc:	f000 fada 	bl	8000c94 <Error_Handler>
 80006e0:	e7f5      	b.n	80006ce <HAL_ADC_MspInit+0xa2>
 80006e2:	bf00      	nop
 80006e4:	50040000 	.word	0x50040000
 80006e8:	40021000 	.word	0x40021000
 80006ec:	20000484 	.word	0x20000484
 80006f0:	40020008 	.word	0x40020008

080006f4 <send_spectrogram>:
	}
}
#endif

// Function to create and send the packet
static void send_spectrogram() {
 80006f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006f8:	4b4c      	ldr	r3, [pc, #304]	@ (800082c <send_spectrogram+0x138>)
 80006fa:	f5ad 6d1b 	sub.w	sp, sp, #2480	@ 0x9b0
    uint8_t *ptr = packet + PACKET_HEADER_LENGTH;
 80006fe:	aa03      	add	r2, sp, #12
 8000700:	afcb      	add	r7, sp, #812	@ 0x32c
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 8000702:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8000706:	f9b3 a000 	ldrsh.w	sl, [r3]
 800070a:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800070e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8000712:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 8000716:	f9b3 e00e 	ldrsh.w	lr, [r3, #14]
 800071a:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800071e:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
 8000722:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 8000726:	f9b3 801e 	ldrsh.w	r8, [r3, #30]
 800072a:	b2b6      	uxth	r6, r6
 800072c:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8000730:	ba36      	rev	r6, r6
 8000732:	fa1f fa85 	uxth.w	sl, r5
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 8000736:	f842 6b28 	str.w	r6, [r2], #40
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 800073a:	ea4a 4509 	orr.w	r5, sl, r9, lsl #16
 800073e:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8000742:	f9b3 a00c 	ldrsh.w	sl, [r3, #12]
 8000746:	fa1f fe8e 	uxth.w	lr, lr
 800074a:	b2a4      	uxth	r4, r4
 800074c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000750:	ea4e 460a 	orr.w	r6, lr, sl, lsl #16
 8000754:	fa96 fa86 	rev.w	sl, r6
 8000758:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 800075c:	f9b3 e010 	ldrsh.w	lr, [r3, #16]
 8000760:	b280      	uxth	r0, r0
 8000762:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000766:	f9b3 6018 	ldrsh.w	r6, [r3, #24]
 800076a:	fa1f fc8c 	uxth.w	ip, ip
 800076e:	b289      	uxth	r1, r1
 8000770:	fa95 f985 	rev.w	r9, r5
 8000774:	ea4c 450e 	orr.w	r5, ip, lr, lsl #16
 8000778:	ea41 4c06 	orr.w	ip, r1, r6, lsl #16
 800077c:	f9b3 e026 	ldrsh.w	lr, [r3, #38]	@ 0x26
 8000780:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 8000784:	f842 9c24 	str.w	r9, [r2, #-36]
 8000788:	fa9c f68c 	rev.w	r6, ip
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 800078c:	f9b3 c022 	ldrsh.w	ip, [r3, #34]	@ 0x22
 8000790:	f9b3 9020 	ldrsh.w	r9, [r3, #32]
 8000794:	fa1f f888 	uxth.w	r8, r8
 8000798:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
 800079c:	fa1f f18c 	uxth.w	r1, ip
 80007a0:	fa1f fc8e 	uxth.w	ip, lr
 80007a4:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	@ 0x24
 80007a8:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80007ac:	ea4c 490e 	orr.w	r9, ip, lr, lsl #16
 80007b0:	ba24      	rev	r4, r4
            *ptr++ = pair & 0xFF;                // Second value low byte
 80007b2:	ba2d      	rev	r5, r5
 80007b4:	ba00      	rev	r0, r0
 80007b6:	fa98 f888 	rev.w	r8, r8
 80007ba:	ba09      	rev	r1, r1
 80007bc:	fa99 fc89 	rev.w	ip, r9
    for (size_t i=0; i<MEL_NUM_VEC; i++) {
 80007c0:	42ba      	cmp	r2, r7
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 80007c2:	e942 4a08 	strd	r4, sl, [r2, #-32]
 80007c6:	e942 5006 	strd	r5, r0, [r2, #-24]
 80007ca:	e942 6804 	strd	r6, r8, [r2, #-16]
 80007ce:	e942 1c02 	strd	r1, ip, [r2, #-8]
    for (size_t i=0; i<MEL_NUM_VEC; i++) {
 80007d2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80007d6:	d194      	bne.n	8000702 <send_spectrogram+0xe>
	make_packet(packet, PAYLOAD_LENGTH, SENDER_ID, *packet_cnt);
 80007d8:	4f15      	ldr	r7, [pc, #84]	@ (8000830 <send_spectrogram+0x13c>)
 80007da:	2201      	movs	r2, #1
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80007e2:	a801      	add	r0, sp, #4
 80007e4:	f000 fbce 	bl	8000f84 <make_packet>
	*packet_cnt += 1;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	603b      	str	r3, [r7, #0]
	if (*packet_cnt == 0) {
 80007ee:	b1b3      	cbz	r3, 800081e <send_spectrogram+0x12a>
	// Encode the packet
	encode_packet(packet, &packet_cnt);

	// Wakup, send, and standby of the S2LP
	#if (NO_S2LP_SLEEP == 0)
		S2LP_WakeUp();
 80007f0:	f001 fcaa 	bl	8002148 <S2LP_WakeUp>
	#endif
	S2LP_Send(packet, PACKET_LENGTH);
 80007f4:	f44f 714e 	mov.w	r1, #824	@ 0x338
 80007f8:	a801      	add	r0, sp, #4
 80007fa:	f000 fd75 	bl	80012e8 <S2LP_Send>
	// Wait for the transmission to finish
	#if (NO_S2LP_SLEEP == 0)
		S2LP_Standby();
 80007fe:	f001 fc7b 	bl	80020f8 <S2LP_Standby>
		hex_encode(hex_encoded_packet, packet, PACKET_LENGTH);
 8000802:	a8cf      	add	r0, sp, #828	@ 0x33c
 8000804:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8000808:	a901      	add	r1, sp, #4
 800080a:	f002 f9b7 	bl	8002b7c <hex_encode>
		DEBUG_PRINT("DF:HEX:%s\r\n", hex_encoded_packet);
 800080e:	a9cf      	add	r1, sp, #828	@ 0x33c
 8000810:	4808      	ldr	r0, [pc, #32]	@ (8000834 <send_spectrogram+0x140>)
 8000812:	f007 ff39 	bl	8008688 <iprintf>
	#endif

	// Print the encoded packet
	print_encoded_packet(packet);
}
 8000816:	f50d 6d1b 	add.w	sp, sp, #2480	@ 0x9b0
 800081a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		DEBUG_PRINT("Packet counter overflow.\r\n");
 800081e:	4806      	ldr	r0, [pc, #24]	@ (8000838 <send_spectrogram+0x144>)
 8000820:	f007 ff9a 	bl	8008758 <puts>
		Error_Handler();
 8000824:	f000 fa36 	bl	8000c94 <Error_Handler>
 8000828:	e7e2      	b.n	80007f0 <send_spectrogram+0xfc>
 800082a:	bf00      	nop
 800082c:	2000053c 	.word	0x2000053c
 8000830:	20000534 	.word	0x20000534
 8000834:	08009730 	.word	0x08009730
 8000838:	08009714 	.word	0x08009714

0800083c <StartADCAcq>:
int StartADCAcq() {
 800083c:	b538      	push	{r3, r4, r5, lr}
	buffer_ready = 0;
 800083e:	4808      	ldr	r0, [pc, #32]	@ (8000860 <StartADCAcq+0x24>)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 8000840:	4d08      	ldr	r5, [pc, #32]	@ (8000864 <StartADCAcq+0x28>)
	packet_cnt = 0;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <StartADCAcq+0x2c>)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 8000844:	4909      	ldr	r1, [pc, #36]	@ (800086c <StartADCAcq+0x30>)
	buffer_ready = 0;
 8000846:	2400      	movs	r4, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 8000848:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
	buffer_ready = 0;
 800084c:	7004      	strb	r4, [r0, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 800084e:	4628      	mov	r0, r5
	packet_cnt = 0;
 8000850:	601c      	str	r4, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 8000852:	f002 ffd5 	bl	8003800 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 8000856:	4628      	mov	r0, r5
 8000858:	f002 ff30 	bl	80036bc <HAL_ADC_Start_IT>
}
 800085c:	4620      	mov	r0, r4
 800085e:	bd38      	pop	{r3, r4, r5, pc}
 8000860:	20000538 	.word	0x20000538
 8000864:	200004cc 	.word	0x200004cc
 8000868:	20000534 	.word	0x20000534
 800086c:	2000585c 	.word	0x2000585c

08000870 <ProcessADCData>:
	
    return 1; // Default to 1 (threshold reached)
}

// Function to process the ADC data
void ProcessADCData() {
 8000870:	b508      	push	{r3, lr}
	// Check if the buffer is ready
	if (buffer_ready) {
 8000872:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <ProcessADCData+0x20>)
 8000874:	781a      	ldrb	r2, [r3, #0]
 8000876:	b902      	cbnz	r2, 800087a <ProcessADCData+0xa>
		}

		// Send the spectrogram
		send_spectrogram();
	}
}
 8000878:	bd08      	pop	{r3, pc}
		buffer_ready = 0;
 800087a:	2200      	movs	r2, #0
		Full_spectrogram_compute((q15_t*) ADCWorkingBuf, MELWorkingBuf);
 800087c:	4905      	ldr	r1, [pc, #20]	@ (8000894 <ProcessADCData+0x24>)
 800087e:	4806      	ldr	r0, [pc, #24]	@ (8000898 <ProcessADCData+0x28>)
		buffer_ready = 0;
 8000880:	701a      	strb	r2, [r3, #0]
		Full_spectrogram_compute((q15_t*) ADCWorkingBuf, MELWorkingBuf);
 8000882:	f001 fe9b 	bl	80025bc <Full_spectrogram_compute>
}
 8000886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_spectrogram();
 800088a:	f7ff bf33 	b.w	80006f4 <send_spectrogram>
 800088e:	bf00      	nop
 8000890:	20000538 	.word	0x20000538
 8000894:	2000053c 	.word	0x2000053c
 8000898:	2000085c 	.word	0x2000085c

0800089c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 800089c:	b510      	push	{r4, lr}
    if (buffer_ready) return; // Prevent overwrite if still processing
 800089e:	4c06      	ldr	r4, [pc, #24]	@ (80008b8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80008a0:	7823      	ldrb	r3, [r4, #0]
 80008a2:	b93b      	cbnz	r3, 80008b4 <HAL_ADC_ConvHalfCpltCallback+0x18>

    memcpy(ADCWorkingBuf, &ADCDoubleBuf[0], ADC_BUF_SIZE * sizeof(uint16_t));
 80008a4:	4905      	ldr	r1, [pc, #20]	@ (80008bc <HAL_ADC_ConvHalfCpltCallback+0x20>)
 80008a6:	4806      	ldr	r0, [pc, #24]	@ (80008c0 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80008a8:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80008ac:	f008 f973 	bl	8008b96 <memcpy>
    buffer_ready = 1;
 80008b0:	2001      	movs	r0, #1
 80008b2:	7020      	strb	r0, [r4, #0]
    current_proc_buf = 0;
}
 80008b4:	bd10      	pop	{r4, pc}
 80008b6:	bf00      	nop
 80008b8:	20000538 	.word	0x20000538
 80008bc:	2000585c 	.word	0x2000585c
 80008c0:	2000085c 	.word	0x2000085c

080008c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80008c4:	b510      	push	{r4, lr}
    if (buffer_ready) return;
 80008c6:	4c06      	ldr	r4, [pc, #24]	@ (80008e0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80008c8:	7823      	ldrb	r3, [r4, #0]
 80008ca:	b93b      	cbnz	r3, 80008dc <HAL_ADC_ConvCpltCallback+0x18>

    memcpy(ADCWorkingBuf, &ADCDoubleBuf[ADC_BUF_SIZE], ADC_BUF_SIZE * sizeof(uint16_t));
 80008cc:	4905      	ldr	r1, [pc, #20]	@ (80008e4 <HAL_ADC_ConvCpltCallback+0x20>)
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <HAL_ADC_ConvCpltCallback+0x24>)
 80008d0:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80008d4:	f008 f95f 	bl	8008b96 <memcpy>
    buffer_ready = 1;
 80008d8:	2001      	movs	r0, #1
 80008da:	7020      	strb	r0, [r4, #0]
    current_proc_buf = 1;
 80008dc:	bd10      	pop	{r4, pc}
 80008de:	bf00      	nop
 80008e0:	20000538 	.word	0x20000538
 80008e4:	2000a85c 	.word	0x2000a85c
 80008e8:	2000085c 	.word	0x2000085c
 80008ec:	00000000 	.word	0x00000000

080008f0 <MX_AES_Init>:
/* AES init function */
void MX_AES_Init(void)
{

  /* USER CODE BEGIN AES_Init 0 */
  __HAL_RCC_AES_CLK_ENABLE();
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_AES_Init+0x60>)

  // only possible configuration for CMAC
  //hcryp.Init.OperatingMode = CRYP_ALGOMODE_TAG_GENERATION;

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80008f2:	4818      	ldr	r0, [pc, #96]	@ (8000954 <MX_AES_Init+0x64>)
  __HAL_RCC_AES_CLK_ENABLE();
 80008f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  hcryp.Instance = AES;
 80008f6:	4918      	ldr	r1, [pc, #96]	@ (8000958 <MX_AES_Init+0x68>)
{
 80008f8:	b510      	push	{r4, lr}
  __HAL_RCC_AES_CLK_ENABLE();
 80008fa:	f442 3480 	orr.w	r4, r2, #65536	@ 0x10000
 80008fe:	64dc      	str	r4, [r3, #76]	@ 0x4c
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  hcryp.Instance = AES;
 8000902:	6001      	str	r1, [r0, #0]
{
 8000904:	b082      	sub	sp, #8
  __HAL_RCC_AES_CLK_ENABLE();
 8000906:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 800090a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8000940 <MX_AES_Init+0x50>
 800090e:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8000948 <MX_AES_Init+0x58>
  __HAL_RCC_AES_CLK_ENABLE();
 8000912:	9201      	str	r2, [sp, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
  hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
  hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 8000914:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_AES_Init+0x6c>)
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 8000916:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <MX_AES_Init+0x70>)
  __HAL_RCC_AES_CLK_ENABLE();
 8000918:	9c01      	ldr	r4, [sp, #4]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 800091a:	2100      	movs	r1, #0
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 800091c:	ed80 7b02 	vstr	d7, [r0, #8]
 8000920:	ed80 0b04 	vstr	d0, [r0, #16]
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 8000924:	e9c0 2308 	strd	r2, r3, [r0, #32]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8000928:	6181      	str	r1, [r0, #24]
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 800092a:	f003 f97b 	bl	8003c24 <HAL_CRYP_Init>
 800092e:	b908      	cbnz	r0, 8000934 <MX_AES_Init+0x44>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8000930:	b002      	add	sp, #8
 8000932:	bd10      	pop	{r4, pc}
 8000934:	b002      	add	sp, #8
 8000936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800093a:	f000 b9ab 	b.w	8000c94 <Error_Handler>
 800093e:	bf00      	nop
 8000940:	00000004 	.word	0x00000004
	...
 800094c:	00000020 	.word	0x00000020
 8000950:	40021000 	.word	0x40021000
 8000954:	2000f860 	.word	0x2000f860
 8000958:	50060000 	.word	0x50060000
 800095c:	0800973c 	.word	0x0800973c
 8000960:	0800974c 	.word	0x0800974c

08000964 <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <HAL_CRYP_MspInit+0x2c>)
 8000966:	6802      	ldr	r2, [r0, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	d000      	beq.n	800096e <HAL_CRYP_MspInit+0xa>
 800096c:	4770      	bx	lr
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 800096e:	f103 4070 	add.w	r0, r3, #4026531840	@ 0xf0000000
 8000972:	f5a0 317c 	sub.w	r1, r0, #258048	@ 0x3f000
{
 8000976:	b082      	sub	sp, #8
    __HAL_RCC_AES_CLK_ENABLE();
 8000978:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800097a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800097e:	64ca      	str	r2, [r1, #76]	@ 0x4c
 8000980:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 8000982:	f400 3180 	and.w	r1, r0, #65536	@ 0x10000
 8000986:	9101      	str	r1, [sp, #4]
 8000988:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 800098a:	b002      	add	sp, #8
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	50060000 	.word	0x50060000

08000994 <HAL_CRYP_MspDeInit>:

void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_CRYP_MspDeInit+0x18>)
 8000996:	6802      	ldr	r2, [r0, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	d000      	beq.n	800099e <HAL_CRYP_MspDeInit+0xa>
    __HAL_RCC_AES_CLK_DISABLE();
  /* USER CODE BEGIN AES_MspDeInit 1 */

  /* USER CODE END AES_MspDeInit 1 */
  }
}
 800099c:	4770      	bx	lr
    __HAL_RCC_AES_CLK_DISABLE();
 800099e:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <HAL_CRYP_MspDeInit+0x1c>)
 80009a0:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80009a2:	f421 3380 	bic.w	r3, r1, #65536	@ 0x10000
 80009a6:	64c3      	str	r3, [r0, #76]	@ 0x4c
}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	50060000 	.word	0x50060000
 80009b0:	40021000 	.word	0x40021000

080009b4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_DMA_Init+0x2c>)
{
 80009b6:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b8:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80009ba:	f041 0101 	orr.w	r1, r1, #1
 80009be:	6499      	str	r1, [r3, #72]	@ 0x48
 80009c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 80009c2:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80009c4:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c6:	400b      	ands	r3, r1
 80009c8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80009ca:	200b      	movs	r0, #11
 80009cc:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80009d0:	f003 f89a 	bl	8003b08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009d4:	200b      	movs	r0, #11

}
 80009d6:	b003      	add	sp, #12
 80009d8:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009dc:	f003 b8d0 	b.w	8003b80 <HAL_NVIC_EnableIRQ>
 80009e0:	40021000 	.word	0x40021000

080009e4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80009e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	2400      	movs	r4, #0
{
 80009ea:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80009f0:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f4:	4b98      	ldr	r3, [pc, #608]	@ (8000c58 <MX_GPIO_Init+0x274>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80009fa:	4f98      	ldr	r7, [pc, #608]	@ (8000c5c <MX_GPIO_Init+0x278>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 80009fc:	f8df a26c 	ldr.w	sl, [pc, #620]	@ 8000c6c <MX_GPIO_Init+0x288>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8000a00:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 8000c70 <MX_GPIO_Init+0x28c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a04:	f8df 826c 	ldr.w	r8, [pc, #620]	@ 8000c74 <MX_GPIO_Init+0x290>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a08:	f042 0010 	orr.w	r0, r2, #16
 8000a0c:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8000a0e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000a10:	f001 0510 	and.w	r5, r1, #16
 8000a14:	9500      	str	r5, [sp, #0]
 8000a16:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a18:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8000a1a:	f046 0204 	orr.w	r2, r6, #4
 8000a1e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a20:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000a22:	f000 0104 	and.w	r1, r0, #4
 8000a26:	9101      	str	r1, [sp, #4]
 8000a28:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2a:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000a2c:	f045 0620 	orr.w	r6, r5, #32
 8000a30:	64de      	str	r6, [r3, #76]	@ 0x4c
 8000a32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a34:	f002 0020 	and.w	r0, r2, #32
 8000a38:	9002      	str	r0, [sp, #8]
 8000a3a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000a3e:	f041 0580 	orr.w	r5, r1, #128	@ 0x80
 8000a42:	64dd      	str	r5, [r3, #76]	@ 0x4c
 8000a44:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8000a46:	f006 0280 	and.w	r2, r6, #128	@ 0x80
 8000a4a:	9203      	str	r2, [sp, #12]
 8000a4c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000a50:	f040 0101 	orr.w	r1, r0, #1
 8000a54:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8000a56:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000a58:	f005 0601 	and.w	r6, r5, #1
 8000a5c:	9604      	str	r6, [sp, #16]
 8000a5e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a62:	f042 0002 	orr.w	r0, r2, #2
 8000a66:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8000a68:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000a6a:	f001 0502 	and.w	r5, r1, #2
 8000a6e:	9505      	str	r5, [sp, #20]
 8000a70:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a72:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8000a74:	f046 0240 	orr.w	r2, r6, #64	@ 0x40
 8000a78:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a7a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000a7c:	f000 0140 	and.w	r1, r0, #64	@ 0x40
 8000a80:	9106      	str	r1, [sp, #24]
 8000a82:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a84:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000a86:	f045 0608 	orr.w	r6, r5, #8
 8000a8a:	64de      	str	r6, [r3, #76]	@ 0x4c
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a8e:	4e74      	ldr	r6, [pc, #464]	@ (8000c60 <MX_GPIO_Init+0x27c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a90:	f003 0208 	and.w	r2, r3, #8
 8000a94:	9207      	str	r2, [sp, #28]
 8000a96:	9b07      	ldr	r3, [sp, #28]
  HAL_PWREx_EnableVddIO2();
 8000a98:	f003 fe56 	bl	8004748 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4638      	mov	r0, r7
 8000aa2:	f003 fd93 	bl	80045cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8000aa6:	4650      	mov	r0, sl
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aae:	f003 fd8d 	bl	80045cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8000ab2:	4648      	mov	r0, r9
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000aba:	f003 fd87 	bl	80045cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000abe:	4622      	mov	r2, r4
 8000ac0:	4640      	mov	r0, r8
 8000ac2:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000ac6:	f003 fd81 	bl	80045cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aca:	4622      	mov	r2, r4
 8000acc:	4630      	mov	r0, r6
 8000ace:	2140      	movs	r1, #64	@ 0x40
 8000ad0:	f003 fd7c 	bl	80045cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad4:	a908      	add	r1, sp, #32
 8000ad6:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ad8:	f24d 72ff 	movw	r2, #55295	@ 0xd7ff
 8000adc:	2303      	movs	r3, #3
 8000ade:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae4:	f003 fc56 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	a908      	add	r1, sp, #32
 8000aea:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin;
 8000aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000af4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f003 fc4b 	bl	8004394 <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000afe:	a908      	add	r1, sp, #32
 8000b00:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b02:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 8000b06:	2303      	movs	r3, #3
 8000b08:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b0e:	f003 fc41 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b12:	2209      	movs	r2, #9
 8000b14:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b16:	a908      	add	r1, sp, #32
 8000b18:	4852      	ldr	r0, [pc, #328]	@ (8000c64 <MX_GPIO_Init+0x280>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 8000b1c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	f04f 0b03 	mov.w	fp, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b26:	f003 fc35 	bl	8004394 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	a908      	add	r1, sp, #32
 8000b2c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	e9cd 5508 	strd	r5, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f003 fc2d 	bl	8004394 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000b3e:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8000b42:	2303      	movs	r3, #3
 8000b44:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f003 fc23 	bl	8004394 <HAL_GPIO_Init>
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000b50:	f248 0236 	movw	r2, #32822	@ 0x8036
 8000b54:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000b5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f003 fc18 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000b64:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000b66:	2208      	movs	r2, #8
 8000b68:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000b70:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f003 fc0d 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000b7a:	f64b 7277 	movw	r2, #49015	@ 0xbf77
 8000b7e:	2303      	movs	r3, #3
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	a908      	add	r1, sp, #32
 8000b82:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000b84:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8000b8a:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f003 fc01 	bl	8004394 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000b92:	4650      	mov	r0, sl
 8000b94:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8000b9a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f003 fbf9 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ba2:	f64f 621f 	movw	r2, #65055	@ 0xfe1f
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba6:	a908      	add	r1, sp, #32
 8000ba8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000baa:	2303      	movs	r3, #3
 8000bac:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb2:	f003 fbef 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8000bb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000bba:	4648      	mov	r0, r9
 8000bbc:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8000bbe:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f003 fbe5 	bl	8004394 <HAL_GPIO_Init>
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	4640      	mov	r0, r8
 8000bcc:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000bce:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000bd6:	9208      	str	r2, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f003 fbdb 	bl	8004394 <HAL_GPIO_Init>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000be0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000be4:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be6:	4820      	ldr	r0, [pc, #128]	@ (8000c68 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000bea:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bee:	f003 fbd1 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	a908      	add	r1, sp, #32
 8000bf8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bfa:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f003 fbc8 	bl	8004394 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c04:	a908      	add	r1, sp, #32
 8000c06:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c08:	2640      	movs	r6, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c10:	9608      	str	r6, [sp, #32]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c12:	f44f 55e8 	mov.w	r5, #7424	@ 0x1d00
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f003 fbbd 	bl	8004394 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c1c:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	a908      	add	r1, sp, #32
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c24:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c2a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	9709      	str	r7, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f003 fbb1 	bl	8004394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000c32:	4622      	mov	r2, r4
 8000c34:	4621      	mov	r1, r4
 8000c36:	2009      	movs	r0, #9
 8000c38:	f002 ff66 	bl	8003b08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c3c:	2009      	movs	r0, #9
 8000c3e:	f002 ff9f 	bl	8003b80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c42:	4622      	mov	r2, r4
 8000c44:	4621      	mov	r1, r4
 8000c46:	2028      	movs	r0, #40	@ 0x28
 8000c48:	f002 ff5e 	bl	8003b08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c4c:	2028      	movs	r0, #40	@ 0x28
 8000c4e:	f002 ff97 	bl	8003b80 <HAL_NVIC_EnableIRQ>

}
 8000c52:	b00f      	add	sp, #60	@ 0x3c
 8000c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48000800 	.word	0x48000800
 8000c60:	48001800 	.word	0x48001800
 8000c64:	48001c00 	.word	0x48001c00
 8000c68:	48000c00 	.word	0x48000c00
 8000c6c:	48001400 	.word	0x48001400
 8000c70:	48001000 	.word	0x48001000
 8000c74:	48000400 	.word	0x48000400

08000c78 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin) {
 8000c78:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8000c7c:	d002      	beq.n	8000c84 <HAL_GPIO_EXTI_Callback+0xc>
		btn_press = 1;
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
 8000c7e:	2808      	cmp	r0, #8
 8000c80:	d004      	beq.n	8000c8c <HAL_GPIO_EXTI_Callback+0x14>
		S2LP_IRQ_Handler();
}
 8000c82:	4770      	bx	lr
		btn_press = 1;
 8000c84:	4b02      	ldr	r3, [pc, #8]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0x18>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	4770      	bx	lr
		S2LP_IRQ_Handler();
 8000c8c:	f001 bb3e 	b.w	800230c <S2LP_IRQ_Handler>
 8000c90:	2000f8c0 	.word	0x2000f8c0

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
 8000c9a:	4844      	ldr	r0, [pc, #272]	@ (8000dac <Error_Handler+0x118>)
 8000c9c:	4f44      	ldr	r7, [pc, #272]	@ (8000db0 <Error_Handler+0x11c>)
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000c9e:	4e45      	ldr	r6, [pc, #276]	@ (8000db4 <Error_Handler+0x120>)
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000ca0:	4d45      	ldr	r5, [pc, #276]	@ (8000db8 <Error_Handler+0x124>)
  DEBUG_PRINT("Entering error Handler\r\n");
 8000ca2:	f007 fd59 	bl	8008758 <puts>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000ca6:	2400      	movs	r4, #0
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cae:	4630      	mov	r0, r6
 8000cb0:	f003 fc8c 	bl	80045cc <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	9400      	str	r4, [sp, #0]
 8000cb8:	9900      	ldr	r1, [sp, #0]
 8000cba:	fba5 3002 	umull	r3, r0, r5, r2
 8000cbe:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
 8000cc2:	ea4f 1390 	mov.w	r3, r0, lsr #6
 8000cc6:	d22f      	bcs.n	8000d28 <Error_Handler+0x94>
 8000cc8:	9a00      	ldr	r2, [sp, #0]
 8000cca:	3201      	adds	r2, #1
 8000ccc:	9200      	str	r2, [sp, #0]
 8000cce:	9900      	ldr	r1, [sp, #0]
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d229      	bcs.n	8000d28 <Error_Handler+0x94>
 8000cd4:	9800      	ldr	r0, [sp, #0]
 8000cd6:	3001      	adds	r0, #1
 8000cd8:	9000      	str	r0, [sp, #0]
 8000cda:	9a00      	ldr	r2, [sp, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d223      	bcs.n	8000d28 <Error_Handler+0x94>
 8000ce0:	9900      	ldr	r1, [sp, #0]
 8000ce2:	3101      	adds	r1, #1
 8000ce4:	9100      	str	r1, [sp, #0]
 8000ce6:	9800      	ldr	r0, [sp, #0]
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	d21d      	bcs.n	8000d28 <Error_Handler+0x94>
 8000cec:	9a00      	ldr	r2, [sp, #0]
 8000cee:	3201      	adds	r2, #1
 8000cf0:	9200      	str	r2, [sp, #0]
 8000cf2:	9900      	ldr	r1, [sp, #0]
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	d217      	bcs.n	8000d28 <Error_Handler+0x94>
 8000cf8:	9800      	ldr	r0, [sp, #0]
 8000cfa:	3001      	adds	r0, #1
 8000cfc:	9000      	str	r0, [sp, #0]
 8000cfe:	9a00      	ldr	r2, [sp, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d211      	bcs.n	8000d28 <Error_Handler+0x94>
 8000d04:	9900      	ldr	r1, [sp, #0]
 8000d06:	3101      	adds	r1, #1
 8000d08:	9100      	str	r1, [sp, #0]
 8000d0a:	9800      	ldr	r0, [sp, #0]
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	d20b      	bcs.n	8000d28 <Error_Handler+0x94>
 8000d10:	9a00      	ldr	r2, [sp, #0]
 8000d12:	3201      	adds	r2, #1
 8000d14:	9200      	str	r2, [sp, #0]
 8000d16:	9900      	ldr	r1, [sp, #0]
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d205      	bcs.n	8000d28 <Error_Handler+0x94>
 8000d1c:	9800      	ldr	r0, [sp, #0]
 8000d1e:	3001      	adds	r0, #1
 8000d20:	9000      	str	r0, [sp, #0]
 8000d22:	9a00      	ldr	r2, [sp, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d3cf      	bcc.n	8000cc8 <Error_Handler+0x34>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000d28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4630      	mov	r0, r6
 8000d30:	f003 fc4c 	bl	80045cc <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	9401      	str	r4, [sp, #4]
 8000d38:	9801      	ldr	r0, [sp, #4]
 8000d3a:	fba5 1203 	umull	r1, r2, r5, r3
 8000d3e:	ebb0 1f92 	cmp.w	r0, r2, lsr #6
 8000d42:	ea4f 1192 	mov.w	r1, r2, lsr #6
 8000d46:	d2af      	bcs.n	8000ca8 <Error_Handler+0x14>
 8000d48:	9b01      	ldr	r3, [sp, #4]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	9801      	ldr	r0, [sp, #4]
 8000d50:	4288      	cmp	r0, r1
 8000d52:	d2a9      	bcs.n	8000ca8 <Error_Handler+0x14>
 8000d54:	9a01      	ldr	r2, [sp, #4]
 8000d56:	3201      	adds	r2, #1
 8000d58:	9201      	str	r2, [sp, #4]
 8000d5a:	9b01      	ldr	r3, [sp, #4]
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d2a3      	bcs.n	8000ca8 <Error_Handler+0x14>
 8000d60:	9801      	ldr	r0, [sp, #4]
 8000d62:	3001      	adds	r0, #1
 8000d64:	9001      	str	r0, [sp, #4]
 8000d66:	9a01      	ldr	r2, [sp, #4]
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	d29d      	bcs.n	8000ca8 <Error_Handler+0x14>
 8000d6c:	9b01      	ldr	r3, [sp, #4]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	9801      	ldr	r0, [sp, #4]
 8000d74:	4288      	cmp	r0, r1
 8000d76:	d297      	bcs.n	8000ca8 <Error_Handler+0x14>
 8000d78:	9a01      	ldr	r2, [sp, #4]
 8000d7a:	3201      	adds	r2, #1
 8000d7c:	9201      	str	r2, [sp, #4]
 8000d7e:	9b01      	ldr	r3, [sp, #4]
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d291      	bcs.n	8000ca8 <Error_Handler+0x14>
 8000d84:	9801      	ldr	r0, [sp, #4]
 8000d86:	3001      	adds	r0, #1
 8000d88:	9001      	str	r0, [sp, #4]
 8000d8a:	9a01      	ldr	r2, [sp, #4]
 8000d8c:	428a      	cmp	r2, r1
 8000d8e:	d28b      	bcs.n	8000ca8 <Error_Handler+0x14>
 8000d90:	9b01      	ldr	r3, [sp, #4]
 8000d92:	3301      	adds	r3, #1
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	9801      	ldr	r0, [sp, #4]
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	d285      	bcs.n	8000ca8 <Error_Handler+0x14>
 8000d9c:	9a01      	ldr	r2, [sp, #4]
 8000d9e:	3201      	adds	r2, #1
 8000da0:	9201      	str	r2, [sp, #4]
 8000da2:	9b01      	ldr	r3, [sp, #4]
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d3cf      	bcc.n	8000d48 <Error_Handler+0xb4>
 8000da8:	e77e      	b.n	8000ca8 <Error_Handler+0x14>
 8000daa:	bf00      	nop
 8000dac:	0800975c 	.word	0x0800975c
 8000db0:	20000400 	.word	0x20000400
 8000db4:	48000400 	.word	0x48000400
 8000db8:	51eb851f 	.word	0x51eb851f

08000dbc <run>:
{
 8000dbc:	b508      	push	{r3, lr}
	btn_press = 0;
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000e6c <run+0xb0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
    int s2lp_Check = S2LP_Standby();
 8000dc4:	f001 f998 	bl	80020f8 <S2LP_Standby>
    if (s2lp_Check != HAL_OK) {
 8000dc8:	b128      	cbz	r0, 8000dd6 <run+0x1a>
      DEBUG_PRINT("[S2LP] Error while putting the S2LP to sleep: %d\r\n", s2lp_Check);
 8000dca:	4601      	mov	r1, r0
 8000dcc:	4828      	ldr	r0, [pc, #160]	@ (8000e70 <run+0xb4>)
 8000dce:	f007 fc5b 	bl	8008688 <iprintf>
      Error_Handler();
 8000dd2:	f7ff ff5f 	bl	8000c94 <Error_Handler>
      if (StartADCAcq() != HAL_OK) {
 8000dd6:	f7ff fd31 	bl	800083c <StartADCAcq>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d140      	bne.n	8000e60 <run+0xa4>
        ProcessADCData();
 8000dde:	f7ff fd47 	bl	8000870 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000de2:	2101      	movs	r1, #1
 8000de4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000de8:	f003 fc02 	bl	80045f0 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000dec:	bf30      	wfi
        ProcessADCData();
 8000dee:	f7ff fd3f 	bl	8000870 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000df2:	2101      	movs	r1, #1
 8000df4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000df8:	f003 fbfa 	bl	80045f0 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000dfc:	bf30      	wfi
        ProcessADCData();
 8000dfe:	f7ff fd37 	bl	8000870 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000e02:	2101      	movs	r1, #1
 8000e04:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e08:	f003 fbf2 	bl	80045f0 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000e0c:	bf30      	wfi
        ProcessADCData();
 8000e0e:	f7ff fd2f 	bl	8000870 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000e12:	2101      	movs	r1, #1
 8000e14:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e18:	f003 fbea 	bl	80045f0 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000e1c:	bf30      	wfi
        ProcessADCData();
 8000e1e:	f7ff fd27 	bl	8000870 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000e22:	2101      	movs	r1, #1
 8000e24:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e28:	f003 fbe2 	bl	80045f0 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000e2c:	bf30      	wfi
        ProcessADCData();
 8000e2e:	f7ff fd1f 	bl	8000870 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000e32:	2101      	movs	r1, #1
 8000e34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e38:	f003 fbda 	bl	80045f0 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000e3c:	bf30      	wfi
        ProcessADCData();
 8000e3e:	f7ff fd17 	bl	8000870 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000e42:	2101      	movs	r1, #1
 8000e44:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e48:	f003 fbd2 	bl	80045f0 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000e4c:	bf30      	wfi
        ProcessADCData();
 8000e4e:	f7ff fd0f 	bl	8000870 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000e52:	2101      	movs	r1, #1
 8000e54:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e58:	f003 fbca 	bl	80045f0 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000e5c:	bf30      	wfi
      while (1) {
 8000e5e:	e7be      	b.n	8000dde <run+0x22>
        DEBUG_PRINT("Error while starting the ADC acquisition\r\n");
 8000e60:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <run+0xb8>)
 8000e62:	f007 fc79 	bl	8008758 <puts>
        Error_Handler();
 8000e66:	f7ff ff15 	bl	8000c94 <Error_Handler>
 8000e6a:	bf00      	nop
 8000e6c:	2000f8c0 	.word	0x2000f8c0
 8000e70:	08009774 	.word	0x08009774
 8000e74:	080097a8 	.word	0x080097a8

08000e78 <SystemClock_Config>:
{
 8000e78:	b500      	push	{lr}
 8000e7a:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7c:	2244      	movs	r2, #68	@ 0x44
 8000e7e:	2100      	movs	r1, #0
 8000e80:	a806      	add	r0, sp, #24
 8000e82:	f007 fdfd 	bl	8008a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e86:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e88:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000e90:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000e94:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e96:	f003 fbd5 	bl	8004644 <HAL_PWREx_ControlVoltageScaling>
 8000e9a:	b9e8      	cbnz	r0, 8000ed8 <SystemClock_Config+0x60>
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e9c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8000ee0 <SystemClock_Config+0x68>
 8000ea0:	4601      	mov	r1, r0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000ea2:	23b0      	movs	r3, #176	@ 0xb0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ea4:	2210      	movs	r2, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000ea8:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000eaa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000eae:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eb0:	9110      	str	r1, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb2:	f003 fd69 	bl	8004988 <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b970      	cbnz	r0, 8000ed8 <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eba:	f04f 0c0f 	mov.w	ip, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ec2:	e9cd c301 	strd	ip, r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ec6:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eca:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ecc:	f004 f872 	bl	8004fb4 <HAL_RCC_ClockConfig>
 8000ed0:	b910      	cbnz	r0, 8000ed8 <SystemClock_Config+0x60>
}
 8000ed2:	b019      	add	sp, #100	@ 0x64
 8000ed4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ed8:	f7ff fedc 	bl	8000c94 <Error_Handler>
 8000edc:	f3af 8000 	nop.w
 8000ee0:	00000001 	.word	0x00000001
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <main>:
{
 8000ee8:	b508      	push	{r3, lr}
  HAL_Init();
 8000eea:	f001 ff29 	bl	8002d40 <HAL_Init>
  SystemClock_Config();
 8000eee:	f7ff ffc3 	bl	8000e78 <SystemClock_Config>
  MX_GPIO_Init();
 8000ef2:	f7ff fd77 	bl	80009e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f7ff fd5d 	bl	80009b4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000efa:	f001 fc3d 	bl	8002778 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000efe:	f001 fd2f 	bl	8002960 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000f02:	f7ff fb3d 	bl	8000580 <MX_ADC1_Init>
  MX_AES_Init();
 8000f06:	f7ff fcf3 	bl	80008f0 <MX_AES_Init>
	  MX_LPUART1_UART_Init();
 8000f0a:	f001 fd89 	bl	8002a20 <MX_LPUART1_UART_Init>
  RetargetInit(&hlpuart1);
 8000f0e:	4814      	ldr	r0, [pc, #80]	@ (8000f60 <main+0x78>)
 8000f10:	f000 f88a 	bl	8001028 <RetargetInit>
  DEBUG_PRINT("Hello world\r\n");
 8000f14:	4813      	ldr	r0, [pc, #76]	@ (8000f64 <main+0x7c>)
 8000f16:	f007 fc1f 	bl	8008758 <puts>
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 8000f1a:	4813      	ldr	r0, [pc, #76]	@ (8000f68 <main+0x80>)
 8000f1c:	f001 f954 	bl	80021c8 <S2LP_Init>
  if (err)  {
 8000f20:	b128      	cbz	r0, 8000f2e <main+0x46>
 8000f22:	4601      	mov	r1, r0
	  DEBUG_PRINT("[S2LP] Error while initializing: %u\r\n", err);
 8000f24:	4811      	ldr	r0, [pc, #68]	@ (8000f6c <main+0x84>)
 8000f26:	f007 fbaf 	bl	8008688 <iprintf>
	  Error_Handler();
 8000f2a:	f7ff feb3 	bl	8000c94 <Error_Handler>
	  DEBUG_PRINT("[S2LP] Init OK\r\n");
 8000f2e:	4810      	ldr	r0, [pc, #64]	@ (8000f70 <main+0x88>)
 8000f30:	f007 fc12 	bl	8008758 <puts>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8000f34:	480f      	ldr	r0, [pc, #60]	@ (8000f74 <main+0x8c>)
 8000f36:	217f      	movs	r1, #127	@ 0x7f
 8000f38:	f002 fd1a 	bl	8003970 <HAL_ADCEx_Calibration_Start>
 8000f3c:	b120      	cbz	r0, 8000f48 <main+0x60>
	  DEBUG_PRINT("Error while calibrating the ADC\r\n");
 8000f3e:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <main+0x90>)
 8000f40:	f007 fc0a 	bl	8008758 <puts>
	  Error_Handler();
 8000f44:	f7ff fea6 	bl	8000c94 <Error_Handler>
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <main+0x94>)
 8000f4a:	f005 f8b7 	bl	80060bc <HAL_TIM_Base_Start>
 8000f4e:	b120      	cbz	r0, 8000f5a <main+0x72>
	  DEBUG_PRINT("Error while enabling timer TIM3\r\n");
 8000f50:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <main+0x98>)
 8000f52:	f007 fc01 	bl	8008758 <puts>
	  Error_Handler();
 8000f56:	f7ff fe9d 	bl	8000c94 <Error_Handler>
    run();
 8000f5a:	f7ff ff2f 	bl	8000dbc <run>
 8000f5e:	bf00      	nop
 8000f60:	2000f990 	.word	0x2000f990
 8000f64:	080097d4 	.word	0x080097d4
 8000f68:	2000f8d8 	.word	0x2000f8d8
 8000f6c:	080097e4 	.word	0x080097e4
 8000f70:	0800980c 	.word	0x0800980c
 8000f74:	200004cc 	.word	0x200004cc
 8000f78:	0800981c 	.word	0x0800981c
 8000f7c:	2000f940 	.word	0x2000f940
 8000f80:	08009840 	.word	0x08009840

08000f84 <make_packet>:
    // Clean up
    free(tmp_out);
}

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8000f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
    // So is the tag
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8000f88:	f101 0708 	add.w	r7, r1, #8
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8000f8c:	4604      	mov	r4, r0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8000f8e:	19c6      	adds	r6, r0, r7
 8000f90:	2000      	movs	r0, #0
 8000f92:	51e0      	str	r0, [r4, r7]
    size_t num_blocks = (msg_len + 15) / 16;
 8000f94:	f101 0517 	add.w	r5, r1, #23
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8000f98:	6070      	str	r0, [r6, #4]
 8000f9a:	60b0      	str	r0, [r6, #8]
 8000f9c:	60f0      	str	r0, [r6, #12]
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
 8000f9e:	f101 0818 	add.w	r8, r1, #24

	// Set the reserved field to 0
	packet[0] = 0x00;
 8000fa2:	7020      	strb	r0, [r4, #0]
	// Set the emitter_id field
	packet[1] = sender_id;
 8000fa4:	7062      	strb	r2, [r4, #1]
	// Set the payload_length field
	packet[2] = (payload_len >> 8) & 0xFF;
	packet[3] = payload_len & 0xFF;
	// Set the packet_serial field
	packet[4] = (serial >> 24) & 0xFF;
	packet[5] = (serial >> 16) & 0xFF;
 8000fa6:	0c18      	lsrs	r0, r3, #16
	packet[2] = (payload_len >> 8) & 0xFF;
 8000fa8:	0a0a      	lsrs	r2, r1, #8
	packet[3] = payload_len & 0xFF;
 8000faa:	70e1      	strb	r1, [r4, #3]
	packet[6] = (serial >> 8) & 0xFF;
	packet[7] = serial & 0xFF;
 8000fac:	71e3      	strb	r3, [r4, #7]
	packet[4] = (serial >> 24) & 0xFF;
 8000fae:	0e19      	lsrs	r1, r3, #24
	packet[6] = (serial >> 8) & 0xFF;
 8000fb0:	0a1b      	lsrs	r3, r3, #8
	packet[5] = (serial >> 16) & 0xFF;
 8000fb2:	7160      	strb	r0, [r4, #5]
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8000fb4:	b083      	sub	sp, #12
	packet[2] = (payload_len >> 8) & 0xFF;
 8000fb6:	70a2      	strb	r2, [r4, #2]
	packet[4] = (serial >> 24) & 0xFF;
 8000fb8:	7121      	strb	r1, [r4, #4]
	packet[6] = (serial >> 8) & 0xFF;
 8000fba:	71a3      	strb	r3, [r4, #6]
    tmp_out = malloc(total_size);
 8000fbc:	f025 000f 	bic.w	r0, r5, #15
 8000fc0:	f007 f9e2 	bl	8008388 <malloc>
 8000fc4:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 8001024 <make_packet+0xa0>
 8000fc8:	f8c9 0000 	str.w	r0, [r9]
    if (tmp_out == NULL) {
 8000fcc:	b310      	cbz	r0, 8001014 <make_packet+0x90>
    if (HAL_CRYP_AESCBC_Encrypt(&hcryp, (uint8_t *)msg, msg_len, tmp_out, 1000) != HAL_OK) {
 8000fce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	9200      	str	r2, [sp, #0]
 8000fd6:	4812      	ldr	r0, [pc, #72]	@ (8001020 <make_packet+0x9c>)
 8000fd8:	b2ba      	uxth	r2, r7
 8000fda:	4621      	mov	r1, r4
 8000fdc:	f002 fed4 	bl	8003d88 <HAL_CRYP_AESCBC_Encrypt>
 8000fe0:	b9a0      	cbnz	r0, 800100c <make_packet+0x88>
    memcpy(tag, tmp_out + ((num_blocks - 1) * 16), 16);
 8000fe2:	f8d9 0000 	ldr.w	r0, [r9]
 8000fe6:	f025 0c0f 	bic.w	ip, r5, #15
 8000fea:	f1ac 0510 	sub.w	r5, ip, #16
 8000fee:	1943      	adds	r3, r0, r5
 8000ff0:	5945      	ldr	r5, [r0, r5]
 8000ff2:	6859      	ldr	r1, [r3, #4]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	51e5      	str	r5, [r4, r7]
 8000ffa:	6071      	str	r1, [r6, #4]
 8000ffc:	60b2      	str	r2, [r6, #8]
 8000ffe:	60f3      	str	r3, [r6, #12]
    free(tmp_out);
 8001000:	f007 f9ca 	bl	8008398 <free>
	#else
		tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
	#endif

    return packet_len;
}
 8001004:	4640      	mov	r0, r8
 8001006:	b003      	add	sp, #12
 8001008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        free(tmp_out);
 800100c:	f8d9 0000 	ldr.w	r0, [r9]
 8001010:	f007 f9c2 	bl	8008398 <free>
        Error_Handler();
 8001014:	f7ff fe3e 	bl	8000c94 <Error_Handler>
}
 8001018:	4640      	mov	r0, r8
 800101a:	b003      	add	sp, #12
 800101c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001020:	2000f860 	.word	0x2000f860
 8001024:	2000f8c4 	.word	0x2000f8c4

08001028 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001028:	b430      	push	{r4, r5}
  gHuart = huart;

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <RetargetInit+0x1c>)
  gHuart = huart;
 800102c:	4906      	ldr	r1, [pc, #24]	@ (8001048 <RetargetInit+0x20>)
  setvbuf(stdout, NULL, _IONBF, 0);
 800102e:	681d      	ldr	r5, [r3, #0]
void RetargetInit(UART_HandleTypeDef *huart) {
 8001030:	4604      	mov	r4, r0
  setvbuf(stdout, NULL, _IONBF, 0);
 8001032:	2300      	movs	r3, #0
  gHuart = huart;
 8001034:	600c      	str	r4, [r1, #0]
  setvbuf(stdout, NULL, _IONBF, 0);
 8001036:	68a8      	ldr	r0, [r5, #8]
 8001038:	2202      	movs	r2, #2
}
 800103a:	bc30      	pop	{r4, r5}
  setvbuf(stdout, NULL, _IONBF, 0);
 800103c:	4619      	mov	r1, r3
 800103e:	f007 bb93 	b.w	8008768 <setvbuf>
 8001042:	bf00      	nop
 8001044:	20000418 	.word	0x20000418
 8001048:	2000f8c8 	.word	0x2000f8c8

0800104c <_isatty>:

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800104c:	2802      	cmp	r0, #2
 800104e:	d801      	bhi.n	8001054 <_isatty+0x8>
    return 1;
 8001050:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 8001052:	4770      	bx	lr
int _isatty(int fd) {
 8001054:	b508      	push	{r3, lr}
  errno = EBADF;
 8001056:	f007 fd71 	bl	8008b3c <__errno>
 800105a:	2309      	movs	r3, #9
 800105c:	6003      	str	r3, [r0, #0]
  return 0;
 800105e:	2000      	movs	r0, #0
}
 8001060:	bd08      	pop	{r3, pc}
 8001062:	bf00      	nop

08001064 <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001064:	3801      	subs	r0, #1
 8001066:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 8001068:	b510      	push	{r4, lr}
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800106a:	d80c      	bhi.n	8001086 <_write+0x22>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800106c:	4614      	mov	r4, r2
 800106e:	4a09      	ldr	r2, [pc, #36]	@ (8001094 <_write+0x30>)
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	6810      	ldr	r0, [r2, #0]
 8001076:	b2a2      	uxth	r2, r4
 8001078:	f005 fa0e 	bl	8006498 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
 800107c:	2800      	cmp	r0, #0
 800107e:	bf0c      	ite	eq
 8001080:	4620      	moveq	r0, r4
 8001082:	2005      	movne	r0, #5
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8001084:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8001086:	f007 fd59 	bl	8008b3c <__errno>
 800108a:	2309      	movs	r3, #9
 800108c:	6003      	str	r3, [r0, #0]
  return -1;
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001092:	bd10      	pop	{r4, pc}
 8001094:	2000f8c8 	.word	0x2000f8c8

08001098 <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001098:	2802      	cmp	r0, #2
 800109a:	d801      	bhi.n	80010a0 <_close+0x8>
    return 0;
 800109c:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 800109e:	4770      	bx	lr
int _close(int fd) {
 80010a0:	b508      	push	{r3, lr}
  errno = EBADF;
 80010a2:	f007 fd4b 	bl	8008b3c <__errno>
 80010a6:	2309      	movs	r3, #9
 80010a8:	6003      	str	r3, [r0, #0]
  return -1;
 80010aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80010ae:	bd08      	pop	{r3, pc}

080010b0 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80010b0:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80010b2:	f007 fd43 	bl	8008b3c <__errno>
 80010b6:	2309      	movs	r3, #9
 80010b8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80010ba:	f04f 30ff 	mov.w	r0, #4294967295
 80010be:	bd08      	pop	{r3, pc}

080010c0 <_read>:

int _read(int fd, char* ptr, int len) {
 80010c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80010c2:	b958      	cbnz	r0, 80010dc <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80010c4:	4a09      	ldr	r2, [pc, #36]	@ (80010ec <_read+0x2c>)
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	6810      	ldr	r0, [r2, #0]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f005 fa81 	bl	80065d4 <HAL_UART_Receive>
    if (hstatus == HAL_OK)
      return 1;
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf14      	ite	ne
 80010d6:	2005      	movne	r0, #5
 80010d8:	2001      	moveq	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 80010da:	bd08      	pop	{r3, pc}
  errno = EBADF;
 80010dc:	f007 fd2e 	bl	8008b3c <__errno>
 80010e0:	2309      	movs	r3, #9
 80010e2:	6003      	str	r3, [r0, #0]
  return -1;
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80010e8:	bd08      	pop	{r3, pc}
 80010ea:	bf00      	nop
 80010ec:	2000f8c8 	.word	0x2000f8c8

080010f0 <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80010f0:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 80010f2:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80010f4:	d804      	bhi.n	8001100 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 80010f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010fa:	6048      	str	r0, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 80010fc:	2000      	movs	r0, #0
 80010fe:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001100:	f007 fd1c 	bl	8008b3c <__errno>
 8001104:	2309      	movs	r3, #9
 8001106:	6003      	str	r3, [r0, #0]
}
 8001108:	2000      	movs	r0, #0
 800110a:	bd08      	pop	{r3, pc}

0800110c <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	733b      	strb	r3, [r7, #12]
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	737b      	strb	r3, [r7, #13]
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2101      	movs	r1, #1
 8001128:	480f      	ldr	r0, [pc, #60]	@ (8001168 <S2LP_Command+0x5c>)
 800112a:	f003 fa4f 	bl	80045cc <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 800112e:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <S2LP_Command+0x60>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	f107 0208 	add.w	r2, r7, #8
 8001136:	f107 010c 	add.w	r1, r7, #12
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2302      	movs	r3, #2
 8001142:	f004 fd71 	bl	8005c28 <HAL_SPI_TransmitReceive>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2101      	movs	r1, #1
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <S2LP_Command+0x5c>)
 8001150:	f003 fa3c 	bl	80045cc <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001154:	b662      	cpsie	i
}
 8001156:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 8001158:	893a      	ldrh	r2, [r7, #8]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	801a      	strh	r2, [r3, #0]
	return err;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	48000800 	.word	0x48000800
 800116c:	2000f8d0 	.word	0x2000f8d0

08001170 <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af02      	add	r7, sp, #8
 8001176:	4603      	mov	r3, r0
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 800117e:	2301      	movs	r3, #1
 8001180:	753b      	strb	r3, [r7, #20]
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	757b      	strb	r3, [r7, #21]
 8001186:	2300      	movs	r3, #0
 8001188:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 800118a:	b672      	cpsid	i
}
 800118c:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2101      	movs	r1, #1
 8001192:	4814      	ldr	r0, [pc, #80]	@ (80011e4 <S2LP_ReadReg+0x74>)
 8001194:	f003 fa1a 	bl	80045cc <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <S2LP_ReadReg+0x78>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0114 	add.w	r1, r7, #20
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2303      	movs	r3, #3
 80011ac:	f004 fd3c 	bl	8005c28 <HAL_SPI_TransmitReceive>
 80011b0:	4603      	mov	r3, r0
 80011b2:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2101      	movs	r1, #1
 80011b8:	480a      	ldr	r0, [pc, #40]	@ (80011e4 <S2LP_ReadReg+0x74>)
 80011ba:	f003 fa07 	bl	80045cc <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80011be:	b662      	cpsie	i
}
 80011c0:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 80011c8:	8a3a      	ldrh	r2, [r7, #16]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 80011d4:	7cba      	ldrb	r2, [r7, #18]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	701a      	strb	r2, [r3, #0]
	return err;
 80011da:	7dfb      	ldrb	r3, [r7, #23]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	48000800 	.word	0x48000800
 80011e8:	2000f8d0 	.word	0x2000f8d0

080011ec <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	4603      	mov	r3, r0
 80011f4:	603a      	str	r2, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	460b      	mov	r3, r1
 80011fa:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 80011fc:	2300      	movs	r3, #0
 80011fe:	733b      	strb	r3, [r7, #12]
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	737b      	strb	r3, [r7, #13]
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2101      	movs	r1, #1
 8001210:	4811      	ldr	r0, [pc, #68]	@ (8001258 <S2LP_WriteReg+0x6c>)
 8001212:	f003 f9db 	bl	80045cc <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <S2LP_WriteReg+0x70>)
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	f107 0208 	add.w	r2, r7, #8
 800121e:	f107 010c 	add.w	r1, r7, #12
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2303      	movs	r3, #3
 800122a:	f004 fcfd 	bl	8005c28 <HAL_SPI_TransmitReceive>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2101      	movs	r1, #1
 8001236:	4808      	ldr	r0, [pc, #32]	@ (8001258 <S2LP_WriteReg+0x6c>)
 8001238:	f003 f9c8 	bl	80045cc <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800123c:	b662      	cpsie	i
}
 800123e:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 8001246:	893a      	ldrh	r2, [r7, #8]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	801a      	strh	r2, [r3, #0]
	return err;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	48000800 	.word	0x48000800
 800125c:	2000f8d0 	.word	0x2000f8d0

08001260 <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b08d      	sub	sp, #52	@ 0x34
 8001264:	af02      	add	r7, sp, #8
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	460b      	mov	r3, r1
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 8001272:	23ff      	movs	r3, #255	@ 0xff
 8001274:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 8001276:	7afa      	ldrb	r2, [r7, #11]
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	3302      	adds	r3, #2
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	4618      	mov	r0, r3
 8001282:	f007 fc88 	bl	8008b96 <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 8001286:	b672      	cpsid	i
}
 8001288:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2101      	movs	r1, #1
 800128e:	4814      	ldr	r0, [pc, #80]	@ (80012e0 <S2LP_WriteTxFIFO+0x80>)
 8001290:	f003 f99c 	bl	80045cc <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <S2LP_WriteTxFIFO+0x84>)
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	7afb      	ldrb	r3, [r7, #11]
 800129a:	b29b      	uxth	r3, r3
 800129c:	3302      	adds	r3, #2
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f107 0210 	add.w	r2, r7, #16
 80012a4:	f107 011c 	add.w	r1, r7, #28
 80012a8:	f04f 34ff 	mov.w	r4, #4294967295
 80012ac:	9400      	str	r4, [sp, #0]
 80012ae:	f004 fcbb 	bl	8005c28 <HAL_SPI_TransmitReceive>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2101      	movs	r1, #1
 80012bc:	4808      	ldr	r0, [pc, #32]	@ (80012e0 <S2LP_WriteTxFIFO+0x80>)
 80012be:	f003 f985 	bl	80045cc <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80012c2:	b662      	cpsie	i
}
 80012c4:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 80012cc:	8a3a      	ldrh	r2, [r7, #16]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	801a      	strh	r2, [r3, #0]
	return err;
 80012d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	372c      	adds	r7, #44	@ 0x2c
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	48000800 	.word	0x48000800
 80012e4:	2000f8d0 	.word	0x2000f8d0

080012e8 <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	2072      	movs	r0, #114	@ 0x72
 80012fc:	f7ff ff06 	bl	800110c <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8001300:	7b7b      	ldrb	r3, [r7, #13]
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <S2LP_Send+0x2e>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
 800130c:	4864      	ldr	r0, [pc, #400]	@ (80014a0 <S2LP_Send+0x1b8>)
 800130e:	f007 fa23 	bl	8008758 <puts>
		return HAL_BUSY;
 8001312:	2302      	movs	r3, #2
 8001314:	e0c0      	b.n	8001498 <S2LP_Send+0x1b0>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 8001316:	4b63      	ldr	r3, [pc, #396]	@ (80014a4 <S2LP_Send+0x1bc>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 800131c:	4b62      	ldr	r3, [pc, #392]	@ (80014a8 <S2LP_Send+0x1c0>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 8001322:	4b62      	ldr	r3, [pc, #392]	@ (80014ac <S2LP_Send+0x1c4>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b29b      	uxth	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	2031      	movs	r0, #49	@ 0x31
 8001336:	f7ff ff59 	bl	80011ec <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	2032      	movs	r0, #50	@ 0x32
 8001344:	f7ff ff52 	bl	80011ec <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001348:	e00f      	b.n	800136a <S2LP_Send+0x82>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	4619      	mov	r1, r3
 8001350:	2066      	movs	r0, #102	@ 0x66
 8001352:	f7ff fedb 	bl	800110c <S2LP_Command>
 8001356:	4603      	mov	r3, r0
 8001358:	73bb      	strb	r3, [r7, #14]
		if (err) {
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d004      	beq.n	800136a <S2LP_Send+0x82>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
 8001360:	4853      	ldr	r0, [pc, #332]	@ (80014b0 <S2LP_Send+0x1c8>)
 8001362:	f007 f9f9 	bl	8008758 <puts>
			return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e096      	b.n	8001498 <S2LP_Send+0x1b0>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 800136a:	7b7b      	ldrb	r3, [r7, #13]
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b18      	cmp	r3, #24
 8001374:	d1e9      	bne.n	800134a <S2LP_Send+0x62>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	b29b      	uxth	r3, r3
 8001380:	887a      	ldrh	r2, [r7, #2]
 8001382:	f002 0207 	and.w	r2, r2, #7
 8001386:	b292      	uxth	r2, r2
 8001388:	2a00      	cmp	r2, #0
 800138a:	bf14      	ite	ne
 800138c:	2201      	movne	r2, #1
 800138e:	2200      	moveq	r2, #0
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	4413      	add	r3, r2
 8001394:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 8001396:	2310      	movs	r3, #16
 8001398:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	827b      	strh	r3, [r7, #18]
 800139e:	e063      	b.n	8001468 <S2LP_Send+0x180>
		if (underflow) {
 80013a0:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <S2LP_Send+0x1c0>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d02f      	beq.n	800140a <S2LP_Send+0x122>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
 80013aa:	4842      	ldr	r0, [pc, #264]	@ (80014b4 <S2LP_Send+0x1cc>)
 80013ac:	f007 f9d4 	bl	8008758 <puts>
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	461a      	mov	r2, r3
 80013b6:	2100      	movs	r1, #0
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff fed9 	bl	8001170 <S2LP_ReadReg>
 80013be:	4603      	mov	r3, r0
 80013c0:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 80013c2:	7bbb      	ldrb	r3, [r7, #14]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <S2LP_Send+0xec>
				S2LP_PrintStatus(&radio_status);
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f879 	bl	80014c4 <S2LP_PrintStatus>
 80013d2:	e002      	b.n	80013da <S2LP_Send+0xf2>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
 80013d4:	4838      	ldr	r0, [pc, #224]	@ (80014b8 <S2LP_Send+0x1d0>)
 80013d6:	f007 f9bf 	bl	8008758 <puts>
			}
			return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e05c      	b.n	8001498 <S2LP_Send+0x1b0>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d107      	bne.n	80013f4 <S2LP_Send+0x10c>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	2060      	movs	r0, #96	@ 0x60
 80013ec:	f7ff fe8e 	bl	800110c <S2LP_Command>
				sending = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	75fb      	strb	r3, [r7, #23]
			}

			__WFI();
 80013f4:	bf30      	wfi
			if (fifo_almost_empty) {
 80013f6:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <S2LP_Send+0x1c4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <S2LP_Send+0x122>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 8001400:	230c      	movs	r3, #12
 8001402:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 8001404:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <S2LP_Send+0x1c4>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 800140a:	8abb      	ldrh	r3, [r7, #20]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0e6      	beq.n	80013de <S2LP_Send+0xf6>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 8001410:	8a7a      	ldrh	r2, [r7, #18]
 8001412:	8a3b      	ldrh	r3, [r7, #16]
 8001414:	3b01      	subs	r3, #1
 8001416:	429a      	cmp	r2, r3
 8001418:	d109      	bne.n	800142e <S2LP_Send+0x146>
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	8a3b      	ldrh	r3, [r7, #16]
 8001420:	3b01      	subs	r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	e000      	b.n	8001430 <S2LP_Send+0x148>
 800142e:	2308      	movs	r3, #8
 8001430:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 8001432:	8a7b      	ldrh	r3, [r7, #18]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	461a      	mov	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	f107 020c 	add.w	r2, r7, #12
 8001440:	7bf9      	ldrb	r1, [r7, #15]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff0c 	bl	8001260 <S2LP_WriteTxFIFO>
 8001448:	4603      	mov	r3, r0
 800144a:	73bb      	strb	r3, [r7, #14]
		if (err) {
 800144c:	7bbb      	ldrb	r3, [r7, #14]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d004      	beq.n	800145c <S2LP_Send+0x174>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
 8001452:	481a      	ldr	r0, [pc, #104]	@ (80014bc <S2LP_Send+0x1d4>)
 8001454:	f007 f980 	bl	8008758 <puts>
			return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e01d      	b.n	8001498 <S2LP_Send+0x1b0>
		}
		free_chunks--;
 800145c:	8abb      	ldrh	r3, [r7, #20]
 800145e:	3b01      	subs	r3, #1
 8001460:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 8001462:	8a7b      	ldrh	r3, [r7, #18]
 8001464:	3301      	adds	r3, #1
 8001466:	827b      	strh	r3, [r7, #18]
 8001468:	8a7a      	ldrh	r2, [r7, #18]
 800146a:	8a3b      	ldrh	r3, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d397      	bcc.n	80013a0 <S2LP_Send+0xb8>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d107      	bne.n	8001486 <S2LP_Send+0x19e>
		S2LP_Command(CMD_TX, &radio_status);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	2060      	movs	r0, #96	@ 0x60
 800147e:	f7ff fe45 	bl	800110c <S2LP_Command>
	}

	while (!packet_sent) {
 8001482:	e000      	b.n	8001486 <S2LP_Send+0x19e>
		__WFI(); // wait until packet has been fully transmitted
 8001484:	bf30      	wfi
	while (!packet_sent) {
 8001486:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <S2LP_Send+0x1bc>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f9      	beq.n	8001484 <S2LP_Send+0x19c>
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
 8001490:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <S2LP_Send+0x1d8>)
 8001492:	f007 f961 	bl	8008758 <puts>
	return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	08009460 	.word	0x08009460
 80014a4:	2000f8cc 	.word	0x2000f8cc
 80014a8:	2000f8ce 	.word	0x2000f8ce
 80014ac:	2000f8cd 	.word	0x2000f8cd
 80014b0:	08009484 	.word	0x08009484
 80014b4:	080094a8 	.word	0x080094a8
 80014b8:	080094d8 	.word	0x080094d8
 80014bc:	08009508 	.word	0x08009508
 80014c0:	0800952c 	.word	0x0800952c

080014c4 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
 80014cc:	486f      	ldr	r0, [pc, #444]	@ (800168c <S2LP_PrintStatus+0x1c8>)
 80014ce:	f007 f943 	bl	8008758 <puts>
	DEBUG_PRINT("  MC_STATE: ");
 80014d2:	486f      	ldr	r0, [pc, #444]	@ (8001690 <S2LP_PrintStatus+0x1cc>)
 80014d4:	f007 f8d8 	bl	8008688 <iprintf>
	switch (status->MC_STATE) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b5c      	cmp	r3, #92	@ 0x5c
 80014e4:	f000 808f 	beq.w	8001606 <S2LP_PrintStatus+0x142>
 80014e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80014ea:	f300 8094 	bgt.w	8001616 <S2LP_PrintStatus+0x152>
 80014ee:	2b30      	cmp	r3, #48	@ 0x30
 80014f0:	dc6a      	bgt.n	80015c8 <S2LP_PrintStatus+0x104>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f2c0 808f 	blt.w	8001616 <S2LP_PrintStatus+0x152>
 80014f8:	2b30      	cmp	r3, #48	@ 0x30
 80014fa:	f200 808c 	bhi.w	8001616 <S2LP_PrintStatus+0x152>
 80014fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001504 <S2LP_PrintStatus+0x40>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	080015cf 	.word	0x080015cf
 8001508:	080015e7 	.word	0x080015e7
 800150c:	080015d7 	.word	0x080015d7
 8001510:	080015df 	.word	0x080015df
 8001514:	08001617 	.word	0x08001617
 8001518:	08001617 	.word	0x08001617
 800151c:	08001617 	.word	0x08001617
 8001520:	08001617 	.word	0x08001617
 8001524:	08001617 	.word	0x08001617
 8001528:	08001617 	.word	0x08001617
 800152c:	08001617 	.word	0x08001617
 8001530:	08001617 	.word	0x08001617
 8001534:	080015ef 	.word	0x080015ef
 8001538:	08001617 	.word	0x08001617
 800153c:	08001617 	.word	0x08001617
 8001540:	08001617 	.word	0x08001617
 8001544:	08001617 	.word	0x08001617
 8001548:	08001617 	.word	0x08001617
 800154c:	08001617 	.word	0x08001617
 8001550:	08001617 	.word	0x08001617
 8001554:	080015ff 	.word	0x080015ff
 8001558:	08001617 	.word	0x08001617
 800155c:	08001617 	.word	0x08001617
 8001560:	08001617 	.word	0x08001617
 8001564:	08001617 	.word	0x08001617
 8001568:	08001617 	.word	0x08001617
 800156c:	08001617 	.word	0x08001617
 8001570:	08001617 	.word	0x08001617
 8001574:	08001617 	.word	0x08001617
 8001578:	08001617 	.word	0x08001617
 800157c:	08001617 	.word	0x08001617
 8001580:	08001617 	.word	0x08001617
 8001584:	08001617 	.word	0x08001617
 8001588:	08001617 	.word	0x08001617
 800158c:	08001617 	.word	0x08001617
 8001590:	08001617 	.word	0x08001617
 8001594:	08001617 	.word	0x08001617
 8001598:	08001617 	.word	0x08001617
 800159c:	08001617 	.word	0x08001617
 80015a0:	08001617 	.word	0x08001617
 80015a4:	08001617 	.word	0x08001617
 80015a8:	08001617 	.word	0x08001617
 80015ac:	08001617 	.word	0x08001617
 80015b0:	08001617 	.word	0x08001617
 80015b4:	08001617 	.word	0x08001617
 80015b8:	08001617 	.word	0x08001617
 80015bc:	08001617 	.word	0x08001617
 80015c0:	08001617 	.word	0x08001617
 80015c4:	080015f7 	.word	0x080015f7
 80015c8:	2b50      	cmp	r3, #80	@ 0x50
 80015ca:	d020      	beq.n	800160e <S2LP_PrintStatus+0x14a>
 80015cc:	e023      	b.n	8001616 <S2LP_PrintStatus+0x152>
		case (MC_STATE_READY):
			DEBUG_PRINT("READY");
 80015ce:	4831      	ldr	r0, [pc, #196]	@ (8001694 <S2LP_PrintStatus+0x1d0>)
 80015d0:	f007 f85a 	bl	8008688 <iprintf>
			break;
 80015d4:	e023      	b.n	800161e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_STANDBY):
			DEBUG_PRINT("STANDBY");
 80015d6:	4830      	ldr	r0, [pc, #192]	@ (8001698 <S2LP_PrintStatus+0x1d4>)
 80015d8:	f007 f856 	bl	8008688 <iprintf>
			break;
 80015dc:	e01f      	b.n	800161e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP):
			DEBUG_PRINT("SLEEP");
 80015de:	482f      	ldr	r0, [pc, #188]	@ (800169c <S2LP_PrintStatus+0x1d8>)
 80015e0:	f007 f852 	bl	8008688 <iprintf>
			break;
 80015e4:	e01b      	b.n	800161e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP_NOFIFO):
			DEBUG_PRINT("SLEEP");
 80015e6:	482d      	ldr	r0, [pc, #180]	@ (800169c <S2LP_PrintStatus+0x1d8>)
 80015e8:	f007 f84e 	bl	8008688 <iprintf>
			break;
 80015ec:	e017      	b.n	800161e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCKON):
			DEBUG_PRINT("LOCKON");
 80015ee:	482c      	ldr	r0, [pc, #176]	@ (80016a0 <S2LP_PrintStatus+0x1dc>)
 80015f0:	f007 f84a 	bl	8008688 <iprintf>
			break;
 80015f4:	e013      	b.n	800161e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_RX):
			DEBUG_PRINT("RX");
 80015f6:	482b      	ldr	r0, [pc, #172]	@ (80016a4 <S2LP_PrintStatus+0x1e0>)
 80015f8:	f007 f846 	bl	8008688 <iprintf>
			break;
 80015fc:	e00f      	b.n	800161e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCK_ST):
			DEBUG_PRINT("LOCK_ST");
 80015fe:	482a      	ldr	r0, [pc, #168]	@ (80016a8 <S2LP_PrintStatus+0x1e4>)
 8001600:	f007 f842 	bl	8008688 <iprintf>
			break;
 8001604:	e00b      	b.n	800161e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_TX):
			DEBUG_PRINT("TX");
 8001606:	4829      	ldr	r0, [pc, #164]	@ (80016ac <S2LP_PrintStatus+0x1e8>)
 8001608:	f007 f83e 	bl	8008688 <iprintf>
			break;
 800160c:	e007      	b.n	800161e <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
 800160e:	4828      	ldr	r0, [pc, #160]	@ (80016b0 <S2LP_PrintStatus+0x1ec>)
 8001610:	f007 f83a 	bl	8008688 <iprintf>
			break;
 8001614:	e003      	b.n	800161e <S2LP_PrintStatus+0x15a>
		default:
			DEBUG_PRINT("UNKNOWN");
 8001616:	4827      	ldr	r0, [pc, #156]	@ (80016b4 <S2LP_PrintStatus+0x1f0>)
 8001618:	f007 f836 	bl	8008688 <iprintf>
			break;
 800161c:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
 800161e:	4826      	ldr	r0, [pc, #152]	@ (80016b8 <S2LP_PrintStatus+0x1f4>)
 8001620:	f007 f89a 	bl	8008758 <puts>
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	785b      	ldrb	r3, [r3, #1]
 8001628:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4619      	mov	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001638:	b2db      	uxtb	r3, r3
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	4603      	mov	r3, r0
 8001656:	4819      	ldr	r0, [pc, #100]	@ (80016bc <S2LP_PrintStatus+0x1f8>)
 8001658:	f007 f816 	bl	8008688 <iprintf>
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4619      	mov	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4810      	ldr	r0, [pc, #64]	@ (80016c0 <S2LP_PrintStatus+0x1fc>)
 8001680:	f007 f802 	bl	8008688 <iprintf>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	08009548 	.word	0x08009548
 8001690:	08009560 	.word	0x08009560
 8001694:	08009570 	.word	0x08009570
 8001698:	08009578 	.word	0x08009578
 800169c:	08009580 	.word	0x08009580
 80016a0:	08009588 	.word	0x08009588
 80016a4:	08009590 	.word	0x08009590
 80016a8:	08009594 	.word	0x08009594
 80016ac:	0800959c 	.word	0x0800959c
 80016b0:	080095a0 	.word	0x080095a0
 80016b4:	080095ac 	.word	0x080095ac
 80016b8:	080095b4 	.word	0x080095b4
 80016bc:	080095b8 	.word	0x080095b8
 80016c0:	080095f8 	.word	0x080095f8
 80016c4:	00000000 	.word	0x00000000

080016c8 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 80016c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016cc:	b09e      	sub	sp, #120	@ 0x78
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 80016d2:	2304      	movs	r3, #4
 80016d4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 80016d8:	2301      	movs	r3, #1
 80016da:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 80016de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e0:	17da      	asrs	r2, r3, #31
 80016e2:	469a      	mov	sl, r3
 80016e4:	4693      	mov	fp, r2
 80016e6:	ea4f 396a 	mov.w	r9, sl, asr #13
 80016ea:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 80016ee:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80016f2:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	17da      	asrs	r2, r3, #31
 80016fc:	623b      	str	r3, [r7, #32]
 80016fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8001700:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001704:	4603      	mov	r3, r0
 8001706:	fb03 f209 	mul.w	r2, r3, r9
 800170a:	460b      	mov	r3, r1
 800170c:	fb08 f303 	mul.w	r3, r8, r3
 8001710:	4413      	add	r3, r2
 8001712:	4602      	mov	r2, r0
 8001714:	fba8 4502 	umull	r4, r5, r8, r2
 8001718:	442b      	add	r3, r5
 800171a:	461d      	mov	r5, r3
 800171c:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 8001720:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 8001724:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001728:	a374      	add	r3, pc, #464	@ (adr r3, 80018fc <S2LP_PLLConf+0x234>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe fdaf 	bl	8000290 <__aeabi_uldivmod>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4613      	mov	r3, r2
 8001738:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 800173a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800173c:	2200      	movs	r2, #0
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	61fa      	str	r2, [r7, #28]
 8001742:	4b6b      	ldr	r3, [pc, #428]	@ (80018f0 <S2LP_PLLConf+0x228>)
 8001744:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001748:	462a      	mov	r2, r5
 800174a:	fb03 f202 	mul.w	r2, r3, r2
 800174e:	2300      	movs	r3, #0
 8001750:	4621      	mov	r1, r4
 8001752:	fb01 f303 	mul.w	r3, r1, r3
 8001756:	4413      	add	r3, r2
 8001758:	4a65      	ldr	r2, [pc, #404]	@ (80018f0 <S2LP_PLLConf+0x228>)
 800175a:	4621      	mov	r1, r4
 800175c:	fba1 1202 	umull	r1, r2, r1, r2
 8001760:	637a      	str	r2, [r7, #52]	@ 0x34
 8001762:	460a      	mov	r2, r1
 8001764:	633a      	str	r2, [r7, #48]	@ 0x30
 8001766:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001768:	4413      	add	r3, r2
 800176a:	637b      	str	r3, [r7, #52]	@ 0x34
 800176c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001770:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 8001774:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8001778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800177a:	3301      	adds	r3, #1
 800177c:	2200      	movs	r2, #0
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	617a      	str	r2, [r7, #20]
 8001782:	4b5b      	ldr	r3, [pc, #364]	@ (80018f0 <S2LP_PLLConf+0x228>)
 8001784:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001788:	462a      	mov	r2, r5
 800178a:	fb03 f202 	mul.w	r2, r3, r2
 800178e:	2300      	movs	r3, #0
 8001790:	4621      	mov	r1, r4
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	4a55      	ldr	r2, [pc, #340]	@ (80018f0 <S2LP_PLLConf+0x228>)
 800179a:	4621      	mov	r1, r4
 800179c:	fba1 1202 	umull	r1, r2, r1, r2
 80017a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017a2:	460a      	mov	r2, r1
 80017a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017a8:	4413      	add	r3, r2
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ac:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80017b0:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 80017b4:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 80017b8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80017bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80017c0:	1a84      	subs	r4, r0, r2
 80017c2:	60bc      	str	r4, [r7, #8]
 80017c4:	eb61 0303 	sbc.w	r3, r1, r3
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80017ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017d2:	1a84      	subs	r4, r0, r2
 80017d4:	603c      	str	r4, [r7, #0]
 80017d6:	eb61 0303 	sbc.w	r3, r1, r3
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017e0:	4623      	mov	r3, r4
 80017e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017e6:	4602      	mov	r2, r0
 80017e8:	4293      	cmp	r3, r2
 80017ea:	462b      	mov	r3, r5
 80017ec:	460a      	mov	r2, r1
 80017ee:	4193      	sbcs	r3, r2
 80017f0:	d202      	bcs.n	80017f8 <S2LP_PLLConf+0x130>
 80017f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017f4:	3301      	adds	r3, #1
 80017f6:	e000      	b.n	80017fa <S2LP_PLLConf+0x132>
 80017f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017fa:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 80017fc:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001800:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 8001808:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800180c:	4a38      	ldr	r2, [pc, #224]	@ (80018f0 <S2LP_PLLConf+0x228>)
 800180e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001812:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 8001814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001816:	4a37      	ldr	r2, [pc, #220]	@ (80018f4 <S2LP_PLLConf+0x22c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d911      	bls.n	8001840 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 800181c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800181e:	4a36      	ldr	r2, [pc, #216]	@ (80018f8 <S2LP_PLLConf+0x230>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d906      	bls.n	8001832 <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 8001824:	2302      	movs	r3, #2
 8001826:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001830:	e017      	b.n	8001862 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 8001832:	2301      	movs	r3, #1
 8001834:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8001838:	2301      	movs	r3, #1
 800183a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800183e:	e010      	b.n	8001862 <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001842:	4a2d      	ldr	r2, [pc, #180]	@ (80018f8 <S2LP_PLLConf+0x230>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d906      	bls.n	8001856 <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 8001848:	2303      	movs	r3, #3
 800184a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001854:	e005      	b.n	8001862 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 8001856:	2302      	movs	r3, #2
 8001858:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 800185c:	2301      	movs	r3, #1
 800185e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 8001862:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001866:	015b      	lsls	r3, r3, #5
 8001868:	b2da      	uxtb	r2, r3
 800186a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800186c:	0e1b      	lsrs	r3, r3, #24
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 8001876:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001878:	0c1b      	lsrs	r3, r3, #16
 800187a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 800187e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 8001886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001888:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 800188c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	b2db      	uxtb	r3, r3
 8001894:	3b30      	subs	r3, #48	@ 0x30
 8001896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 800189a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	2005      	movs	r0, #5
 80018a4:	f7ff fca2 	bl	80011ec <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 80018a8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80018ac:	2200      	movs	r2, #0
 80018ae:	4619      	mov	r1, r3
 80018b0:	2006      	movs	r0, #6
 80018b2:	f7ff fc9b 	bl	80011ec <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 80018b6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80018ba:	2200      	movs	r2, #0
 80018bc:	4619      	mov	r1, r3
 80018be:	2007      	movs	r0, #7
 80018c0:	f7ff fc94 	bl	80011ec <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 80018c4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	2008      	movs	r0, #8
 80018ce:	f7ff fc8d 	bl	80011ec <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 80018d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	2065      	movs	r0, #101	@ 0x65
 80018dc:	f7ff fc86 	bl	80011ec <S2LP_WriteReg>
}
 80018e0:	bf00      	nop
 80018e2:	3778      	adds	r7, #120	@ 0x78
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ea:	bf00      	nop
 80018ec:	f3af 8000 	nop.w
 80018f0:	02faf080 	.word	0x02faf080
 80018f4:	d693a3ff 	.word	0xd693a3ff
 80018f8:	01c9c380 	.word	0x01c9c380
 80018fc:	02faf080 	.word	0x02faf080
 8001900:	00000000 	.word	0x00000000

08001904 <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 8001904:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001908:	b091      	sub	sp, #68	@ 0x44
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	460a      	mov	r2, r1
 8001910:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001912:	4613      	mov	r3, r2
 8001914:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 8001918:	4b3f      	ldr	r3, [pc, #252]	@ (8001a18 <ComputeDatarate+0x114>)
 800191a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 800191c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800191e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a1c <ComputeDatarate+0x118>)
 8001920:	429a      	cmp	r2, r3
 8001922:	d902      	bls.n	800192a <ComputeDatarate+0x26>
    f_dig >>= 1;
 8001924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 800192a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800192e:	2b00      	cmp	r3, #0
 8001930:	d128      	bne.n	8001984 <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 8001932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001934:	2200      	movs	r2, #0
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	61fa      	str	r2, [r7, #28]
 800193a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800193c:	2200      	movs	r2, #0
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	617a      	str	r2, [r7, #20]
 8001942:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001946:	462b      	mov	r3, r5
 8001948:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800194c:	4642      	mov	r2, r8
 800194e:	fb02 f203 	mul.w	r2, r2, r3
 8001952:	464b      	mov	r3, r9
 8001954:	4621      	mov	r1, r4
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	4622      	mov	r2, r4
 800195e:	4641      	mov	r1, r8
 8001960:	fba2 ab01 	umull	sl, fp, r2, r1
 8001964:	445b      	add	r3, fp
 8001966:	469b      	mov	fp, r3
 8001968:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 800196c:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 8001970:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	000a      	movs	r2, r1
 800197e:	2300      	movs	r3, #0
 8001980:	4613      	mov	r3, r2
 8001982:	e043      	b.n	8001a0c <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 8001984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001986:	2200      	movs	r2, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	60fa      	str	r2, [r7, #12]
 800198c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800198e:	2200      	movs	r2, #0
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001998:	460b      	mov	r3, r1
 800199a:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 800199e:	623b      	str	r3, [r7, #32]
 80019a0:	4613      	mov	r3, r2
 80019a2:	f143 0300 	adc.w	r3, r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019ac:	460b      	mov	r3, r1
 80019ae:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80019b2:	4652      	mov	r2, sl
 80019b4:	fb02 f203 	mul.w	r2, r2, r3
 80019b8:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80019bc:	465b      	mov	r3, fp
 80019be:	4682      	mov	sl, r0
 80019c0:	468b      	mov	fp, r1
 80019c2:	4651      	mov	r1, sl
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	4652      	mov	r2, sl
 80019cc:	6a39      	ldr	r1, [r7, #32]
 80019ce:	fba2 4501 	umull	r4, r5, r2, r1
 80019d2:	442b      	add	r3, r5
 80019d4:	461d      	mov	r5, r3
 80019d6:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 80019da:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 80019de:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019e2:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 80019e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80019ea:	f1c1 0420 	rsb	r4, r1, #32
 80019ee:	f1a1 0020 	sub.w	r0, r1, #32
 80019f2:	fa22 f801 	lsr.w	r8, r2, r1
 80019f6:	fa03 f404 	lsl.w	r4, r3, r4
 80019fa:	ea48 0804 	orr.w	r8, r8, r4
 80019fe:	fa23 f000 	lsr.w	r0, r3, r0
 8001a02:	ea48 0800 	orr.w	r8, r8, r0
 8001a06:	fa23 f901 	lsr.w	r9, r3, r1
 8001a0a:	4643      	mov	r3, r8
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3744      	adds	r7, #68	@ 0x44
 8001a10:	46bd      	mov	sp, r7
 8001a12:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a16:	4770      	bx	lr
 8001a18:	02faf080 	.word	0x02faf080
 8001a1c:	01c9c380 	.word	0x01c9c380

08001a20 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 8001a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a24:	b0ae      	sub	sp, #184	@ 0xb8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8001a2c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001a30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 8001a34:	4ba5      	ldr	r3, [pc, #660]	@ (8001ccc <SearchDatarateME+0x2ac>)
 8001a36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a3e:	4ba4      	ldr	r3, [pc, #656]	@ (8001cd0 <SearchDatarateME+0x2b0>)
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d904      	bls.n	8001a4e <SearchDatarateME+0x2e>
    f_dig >>= 1;
 8001a44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001a54:	e013      	b.n	8001a7e <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 8001a56:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a60:	f7ff ff50 	bl	8001904 <ComputeDatarate>
 8001a64:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 8001a68:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001a6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d909      	bls.n	8001a88 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8001a74:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001a7e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d1e7      	bne.n	8001a56 <SearchDatarateME+0x36>
 8001a86:	e000      	b.n	8001a8a <SearchDatarateME+0x6a>
      break;
 8001a88:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8001a8a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001a8e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001a92:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 8001a94:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d16b      	bne.n	8001b74 <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 8001a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001aa4:	667a      	str	r2, [r7, #100]	@ 0x64
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001ab0:	000b      	movs	r3, r1
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8001ab8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001abc:	2200      	movs	r2, #0
 8001abe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ac0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ac2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ac6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001aca:	f7fe fbe1 	bl	8000290 <__aeabi_uldivmod>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	b293      	uxth	r3, r2
 8001ad4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001ad8:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 8001ada:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ae2:	657a      	str	r2, [r7, #84]	@ 0x54
 8001ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2200      	movs	r2, #0
 8001aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001af0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001af2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001af6:	462b      	mov	r3, r5
 8001af8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001afc:	4642      	mov	r2, r8
 8001afe:	fb02 f203 	mul.w	r2, r2, r3
 8001b02:	464b      	mov	r3, r9
 8001b04:	4621      	mov	r1, r4
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4622      	mov	r2, r4
 8001b0e:	4641      	mov	r1, r8
 8001b10:	fba2 1201 	umull	r1, r2, r2, r1
 8001b14:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001b16:	460a      	mov	r2, r1
 8001b18:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001b1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001b1c:	4413      	add	r3, r2
 8001b1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b20:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8001b24:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8001b28:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 8001b2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b30:	2200      	movs	r2, #0
 8001b32:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b34:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	17da      	asrs	r2, r3, #31
 8001b40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b42:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b44:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001b48:	462b      	mov	r3, r5
 8001b4a:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001b4e:	4642      	mov	r2, r8
 8001b50:	fb02 f203 	mul.w	r2, r2, r3
 8001b54:	464b      	mov	r3, r9
 8001b56:	4621      	mov	r1, r4
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4622      	mov	r2, r4
 8001b60:	4641      	mov	r1, r8
 8001b62:	fba2 ab01 	umull	sl, fp, r2, r1
 8001b66:	445b      	add	r3, fp
 8001b68:	469b      	mov	fp, r3
 8001b6a:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8001b6e:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8001b72:	e07d      	b.n	8001c70 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 8001b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4698      	mov	r8, r3
 8001b7c:	4691      	mov	r9, r2
 8001b7e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001b82:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8001b86:	f1a1 0320 	sub.w	r3, r1, #32
 8001b8a:	f1c1 0220 	rsb	r2, r1, #32
 8001b8e:	fa09 f501 	lsl.w	r5, r9, r1
 8001b92:	fa08 f303 	lsl.w	r3, r8, r3
 8001b96:	431d      	orrs	r5, r3
 8001b98:	fa28 f202 	lsr.w	r2, r8, r2
 8001b9c:	4315      	orrs	r5, r2
 8001b9e:	fa08 f401 	lsl.w	r4, r8, r1
 8001ba2:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 8001ba6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001baa:	2200      	movs	r2, #0
 8001bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bae:	637a      	str	r2, [r7, #52]	@ 0x34
 8001bb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001bb8:	f7fe fb6a 	bl	8000290 <__aeabi_uldivmod>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	b293      	uxth	r3, r2
 8001bc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001bc6:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8001bc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001bdc:	17da      	asrs	r2, r3, #31
 8001bde:	623b      	str	r3, [r7, #32]
 8001be0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001be2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001be6:	462b      	mov	r3, r5
 8001be8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bec:	4642      	mov	r2, r8
 8001bee:	fb02 f203 	mul.w	r2, r2, r3
 8001bf2:	464b      	mov	r3, r9
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	4641      	mov	r1, r8
 8001c00:	fba2 1201 	umull	r1, r2, r2, r1
 8001c04:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c06:	460a      	mov	r2, r1
 8001c08:	673a      	str	r2, [r7, #112]	@ 0x70
 8001c0a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001c0c:	4413      	add	r3, r2
 8001c0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c10:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8001c14:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8001c18:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 8001c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c20:	2200      	movs	r2, #0
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	61fa      	str	r2, [r7, #28]
 8001c26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8001c30:	17da      	asrs	r2, r3, #31
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	617a      	str	r2, [r7, #20]
 8001c36:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001c3a:	462b      	mov	r3, r5
 8001c3c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c40:	4642      	mov	r2, r8
 8001c42:	fb02 f203 	mul.w	r2, r2, r3
 8001c46:	464b      	mov	r3, r9
 8001c48:	4621      	mov	r1, r4
 8001c4a:	fb01 f303 	mul.w	r3, r1, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	4622      	mov	r2, r4
 8001c52:	4641      	mov	r1, r8
 8001c54:	fba2 1201 	umull	r1, r2, r2, r1
 8001c58:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001c5a:	460a      	mov	r2, r1
 8001c5c:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001c5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001c60:	4413      	add	r3, r2
 8001c62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c64:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8001c68:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 8001c6c:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8001c70:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001c74:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001c78:	1a84      	subs	r4, r0, r2
 8001c7a:	60bc      	str	r4, [r7, #8]
 8001c7c:	eb61 0303 	sbc.w	r3, r1, r3
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001c86:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001c8a:	1a84      	subs	r4, r0, r2
 8001c8c:	603c      	str	r4, [r7, #0]
 8001c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c98:	4623      	mov	r3, r4
 8001c9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	462b      	mov	r3, r5
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	4193      	sbcs	r3, r2
 8001ca8:	d205      	bcs.n	8001cb6 <SearchDatarateME+0x296>
 8001caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	e002      	b.n	8001cbc <SearchDatarateME+0x29c>
 8001cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001cc0:	8013      	strh	r3, [r2, #0]

}
 8001cc2:	bf00      	nop
 8001cc4:	37b8      	adds	r7, #184	@ 0xb8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ccc:	02faf080 	.word	0x02faf080
 8001cd0:	01c9c380 	.word	0x01c9c380

08001cd4 <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 8001cd4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001cd8:	b08c      	sub	sp, #48	@ 0x30
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	461e      	mov	r6, r3
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001cea:	4613      	mov	r3, r2
 8001cec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001cf0:	4633      	mov	r3, r6
 8001cf2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 8001cf6:	4b35      	ldr	r3, [pc, #212]	@ (8001dcc <ComputeFreqDeviation+0xf8>)
 8001cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 8001cfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d127      	bne.n	8001d52 <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 8001d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d04:	2200      	movs	r2, #0
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	617a      	str	r2, [r7, #20]
 8001d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	60fa      	str	r2, [r7, #12]
 8001d14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d18:	462b      	mov	r3, r5
 8001d1a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d1e:	4642      	mov	r2, r8
 8001d20:	fb02 f203 	mul.w	r2, r2, r3
 8001d24:	464b      	mov	r3, r9
 8001d26:	4621      	mov	r1, r4
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4622      	mov	r2, r4
 8001d30:	4641      	mov	r1, r8
 8001d32:	fba2 ab01 	umull	sl, fp, r2, r1
 8001d36:	445b      	add	r3, fp
 8001d38:	469b      	mov	fp, r3
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	ea4f 529a 	mov.w	r2, sl, lsr #22
 8001d46:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 8001d4a:	ea4f 539b 	mov.w	r3, fp, lsr #22
 8001d4e:	4613      	mov	r3, r2
 8001d50:	e036      	b.n	8001dc0 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 8001d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d54:	2200      	movs	r2, #0
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d5e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d62:	17da      	asrs	r2, r3, #31
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	61fa      	str	r2, [r7, #28]
 8001d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d72:	4652      	mov	r2, sl
 8001d74:	fb02 f203 	mul.w	r2, r2, r3
 8001d78:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8001d7c:	465b      	mov	r3, fp
 8001d7e:	4682      	mov	sl, r0
 8001d80:	468b      	mov	fp, r1
 8001d82:	4651      	mov	r1, sl
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	4652      	mov	r2, sl
 8001d8c:	69b9      	ldr	r1, [r7, #24]
 8001d8e:	fba2 4501 	umull	r4, r5, r2, r1
 8001d92:	442b      	add	r3, r5
 8001d94:	461d      	mov	r5, r3
 8001d96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d9a:	f1c3 0317 	rsb	r3, r3, #23
 8001d9e:	f1c3 0120 	rsb	r1, r3, #32
 8001da2:	f1a3 0220 	sub.w	r2, r3, #32
 8001da6:	fa24 f803 	lsr.w	r8, r4, r3
 8001daa:	fa05 f101 	lsl.w	r1, r5, r1
 8001dae:	ea48 0801 	orr.w	r8, r8, r1
 8001db2:	fa25 f202 	lsr.w	r2, r5, r2
 8001db6:	ea48 0802 	orr.w	r8, r8, r2
 8001dba:	fa25 f903 	lsr.w	r9, r5, r3
 8001dbe:	4643      	mov	r3, r8
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3730      	adds	r7, #48	@ 0x30
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dca:	4770      	bx	lr
 8001dcc:	02faf080 	.word	0x02faf080

08001dd0 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8001dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dd4:	b0a2      	sub	sp, #136	@ 0x88
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8001dda:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001ddc:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 8001dde:	2304      	movs	r3, #4
 8001de0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001de4:	2301      	movs	r3, #1
 8001de6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001df0:	e012      	b.n	8001e18 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 8001df2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001df6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001dfa:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 8001dfe:	20ff      	movs	r0, #255	@ 0xff
 8001e00:	f7ff ff68 	bl	8001cd4 <ComputeFreqDeviation>
 8001e04:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 8001e06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001e08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d309      	bcc.n	8001e22 <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001e0e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e12:	3301      	adds	r3, #1
 8001e14:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001e18:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e1c:	2b0c      	cmp	r3, #12
 8001e1e:	d1e8      	bne.n	8001df2 <SearchFreqDevME+0x22>
 8001e20:	e000      	b.n	8001e24 <SearchFreqDevME+0x54>
      break;
 8001e22:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 8001e24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e26:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e2a:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 8001e2c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d155      	bne.n	8001ee0 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 8001e34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e36:	2200      	movs	r2, #0
 8001e38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001e48:	4629      	mov	r1, r5
 8001e4a:	058b      	lsls	r3, r1, #22
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 8001e52:	4621      	mov	r1, r4
 8001e54:	058a      	lsls	r2, r1, #22
 8001e56:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 8001e5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001e5e:	a36e      	add	r3, pc, #440	@ (adr r3, 8002018 <SearchFreqDevME+0x248>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fa14 	bl	8000290 <__aeabi_uldivmod>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	b2d3      	uxtb	r3, r2
 8001e6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e70:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 8001e72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2200      	movs	r2, #0
 8001e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e7c:	637a      	str	r2, [r7, #52]	@ 0x34
 8001e7e:	4b68      	ldr	r3, [pc, #416]	@ (8002020 <SearchFreqDevME+0x250>)
 8001e80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e84:	462a      	mov	r2, r5
 8001e86:	fb03 f202 	mul.w	r2, r3, r2
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	4a62      	ldr	r2, [pc, #392]	@ (8002020 <SearchFreqDevME+0x250>)
 8001e96:	4621      	mov	r1, r4
 8001e98:	fba1 ab02 	umull	sl, fp, r1, r2
 8001e9c:	445b      	add	r3, fp
 8001e9e:	469b      	mov	fp, r3
 8001ea0:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 8001ea4:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8001ea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	17da      	asrs	r2, r3, #31
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001eb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002020 <SearchFreqDevME+0x250>)
 8001eb6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001eba:	462a      	mov	r2, r5
 8001ebc:	fb03 f202 	mul.w	r2, r3, r2
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a55      	ldr	r2, [pc, #340]	@ (8002020 <SearchFreqDevME+0x250>)
 8001ecc:	4621      	mov	r1, r4
 8001ece:	fba1 8902 	umull	r8, r9, r1, r2
 8001ed2:	444b      	add	r3, r9
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8001eda:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8001ede:	e06d      	b.n	8001fbc <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8001ee0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ee8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001eec:	f1c3 0117 	rsb	r1, r3, #23
 8001ef0:	f1a1 0320 	sub.w	r3, r1, #32
 8001ef4:	f1c1 0220 	rsb	r2, r1, #32
 8001ef8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001efc:	4648      	mov	r0, r9
 8001efe:	fa00 f501 	lsl.w	r5, r0, r1
 8001f02:	4640      	mov	r0, r8
 8001f04:	fa00 f303 	lsl.w	r3, r0, r3
 8001f08:	431d      	orrs	r5, r3
 8001f0a:	4643      	mov	r3, r8
 8001f0c:	fa23 f202 	lsr.w	r2, r3, r2
 8001f10:	4315      	orrs	r5, r2
 8001f12:	4643      	mov	r3, r8
 8001f14:	408b      	lsls	r3, r1
 8001f16:	461c      	mov	r4, r3
 8001f18:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 8001f1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001f20:	a33d      	add	r3, pc, #244	@ (adr r3, 8002018 <SearchFreqDevME+0x248>)
 8001f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f26:	f7fe f9b3 	bl	8000290 <__aeabi_uldivmod>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	b2d3      	uxtb	r3, r2
 8001f30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f32:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 8001f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f3c:	17da      	asrs	r2, r3, #31
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	61fa      	str	r2, [r7, #28]
 8001f42:	4b37      	ldr	r3, [pc, #220]	@ (8002020 <SearchFreqDevME+0x250>)
 8001f44:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f48:	462a      	mov	r2, r5
 8001f4a:	fb03 f202 	mul.w	r2, r3, r2
 8001f4e:	2300      	movs	r3, #0
 8001f50:	4621      	mov	r1, r4
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	4a31      	ldr	r2, [pc, #196]	@ (8002020 <SearchFreqDevME+0x250>)
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	fba1 1202 	umull	r1, r2, r1, r2
 8001f60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f62:	460a      	mov	r2, r1
 8001f64:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001f66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f68:	4413      	add	r3, r2
 8001f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f6c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001f70:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8001f74:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8001f78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8001f80:	17da      	asrs	r2, r3, #31
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	617a      	str	r2, [r7, #20]
 8001f86:	4b26      	ldr	r3, [pc, #152]	@ (8002020 <SearchFreqDevME+0x250>)
 8001f88:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f8c:	462a      	mov	r2, r5
 8001f8e:	fb03 f202 	mul.w	r2, r3, r2
 8001f92:	2300      	movs	r3, #0
 8001f94:	4621      	mov	r1, r4
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a20      	ldr	r2, [pc, #128]	@ (8002020 <SearchFreqDevME+0x250>)
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	fba1 1202 	umull	r1, r2, r1, r2
 8001fa4:	647a      	str	r2, [r7, #68]	@ 0x44
 8001fa6:	460a      	mov	r2, r1
 8001fa8:	643a      	str	r2, [r7, #64]	@ 0x40
 8001faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fac:	4413      	add	r3, r2
 8001fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fb0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001fb4:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8001fb8:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8001fbc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001fc0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001fc4:	1a84      	subs	r4, r0, r2
 8001fc6:	60bc      	str	r4, [r7, #8]
 8001fc8:	eb61 0303 	sbc.w	r3, r1, r3
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001fd2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001fd6:	1a84      	subs	r4, r0, r2
 8001fd8:	603c      	str	r4, [r7, #0]
 8001fda:	eb61 0303 	sbc.w	r3, r1, r3
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fea:	4602      	mov	r2, r0
 8001fec:	4293      	cmp	r3, r2
 8001fee:	462b      	mov	r3, r5
 8001ff0:	460a      	mov	r2, r1
 8001ff2:	4193      	sbcs	r3, r2
 8001ff4:	d204      	bcs.n	8002000 <SearchFreqDevME+0x230>
 8001ff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e001      	b.n	8002004 <SearchFreqDevME+0x234>
 8002000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002006:	7013      	strb	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	3788      	adds	r7, #136	@ 0x88
 800200c:	46bd      	mov	sp, r7
 800200e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002012:	bf00      	nop
 8002014:	f3af 8000 	nop.w
 8002018:	02faf080 	.word	0x02faf080
 800201c:	00000000 	.word	0x00000000
 8002020:	02faf080 	.word	0x02faf080

08002024 <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 8002032:	f107 0217 	add.w	r2, r7, #23
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	68b8      	ldr	r0, [r7, #8]
 800203e:	f7ff fcef 	bl	8001a20 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 8002042:	f107 0212 	add.w	r2, r7, #18
 8002046:	f107 0313 	add.w	r3, r7, #19
 800204a:	4619      	mov	r1, r3
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff febf 	bl	8001dd0 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 8002052:	8abb      	ldrh	r3, [r7, #20]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	b29b      	uxth	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2200      	movs	r2, #0
 800205c:	4619      	mov	r1, r3
 800205e:	200e      	movs	r0, #14
 8002060:	f7ff f8c4 	bl	80011ec <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 8002064:	8abb      	ldrh	r3, [r7, #20]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2200      	movs	r2, #0
 800206a:	4619      	mov	r1, r3
 800206c:	200f      	movs	r0, #15
 800206e:	f7ff f8bd 	bl	80011ec <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 8002072:	7dfa      	ldrb	r2, [r7, #23]
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	4313      	orrs	r3, r2
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2200      	movs	r2, #0
 800207c:	4619      	mov	r1, r3
 800207e:	2010      	movs	r0, #16
 8002080:	f7ff f8b4 	bl	80011ec <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	2200      	movs	r2, #0
 8002088:	4619      	mov	r1, r3
 800208a:	2012      	movs	r0, #18
 800208c:	f7ff f8ae 	bl	80011ec <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8002090:	7cbb      	ldrb	r3, [r7, #18]
 8002092:	2200      	movs	r2, #0
 8002094:	4619      	mov	r1, r3
 8002096:	2011      	movs	r0, #17
 8002098:	f7ff f8a8 	bl	80011ec <S2LP_WriteReg>
}
 800209c:	bf00      	nop
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b0e      	cmp	r3, #14
 80020b0:	dd02      	ble.n	80020b8 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	e006      	b.n	80020c6 <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f1c3 031d 	rsb	r3, r3, #29
 80020c4:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	2062      	movs	r0, #98	@ 0x62
 80020cc:	f7ff f88e 	bl	80011ec <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	2064      	movs	r0, #100	@ 0x64
 80020d6:	f7ff f889 	bl	80011ec <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	2063      	movs	r0, #99	@ 0x63
 80020e0:	f7ff f884 	bl	80011ec <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	2061      	movs	r0, #97	@ 0x61
 80020ec:	f7ff f87e 	bl	80011ec <S2LP_WriteReg>
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <S2LP_Standby>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Standby(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
	S2LPStatus radio_status;
	HAL_StatusTypeDef err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	461a      	mov	r2, r3
 8002102:	2100      	movs	r1, #0
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff f833 	bl	8001170 <S2LP_ReadReg>
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]

	while (radio_status.MC_STATE != MC_STATE_STANDBY) {
 800210e:	e00e      	b.n	800212e <S2LP_Standby+0x36>
		err = S2LP_Command(CMD_STANDBY, &radio_status);
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	4619      	mov	r1, r3
 8002114:	2063      	movs	r0, #99	@ 0x63
 8002116:	f7fe fff9 	bl	800110c <S2LP_Command>
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
		if (err) {
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <S2LP_Standby+0x36>
			DEBUG_PRINT("[S2LP] Error: cannot enter sleep mode\r\n");
 8002124:	4807      	ldr	r0, [pc, #28]	@ (8002144 <S2LP_Standby+0x4c>)
 8002126:	f006 fb17 	bl	8008758 <puts>
			return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e006      	b.n	800213c <S2LP_Standby+0x44>
	while (radio_status.MC_STATE != MC_STATE_STANDBY) {
 800212e:	797b      	ldrb	r3, [r7, #5]
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b04      	cmp	r3, #4
 8002138:	d1ea      	bne.n	8002110 <S2LP_Standby+0x18>
		}
	}

	return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	08009620 	.word	0x08009620

08002148 <S2LP_WakeUp>:

HAL_StatusTypeDef S2LP_WakeUp(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
	S2LPStatus radio_status;
	HAL_StatusTypeDef err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 800214e:	463b      	mov	r3, r7
 8002150:	461a      	mov	r2, r3
 8002152:	2100      	movs	r1, #0
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff f80b 	bl	8001170 <S2LP_ReadReg>
 800215a:	4603      	mov	r3, r0
 800215c:	70fb      	strb	r3, [r7, #3]

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 800215e:	463b      	mov	r3, r7
 8002160:	4619      	mov	r1, r3
 8002162:	2072      	movs	r0, #114	@ 0x72
 8002164:	f7fe ffd2 	bl	800110c <S2LP_Command>

	// Ensure the radio is in READY mode before trying to lock for Tx
	uint32_t ready_timeout = 100000;
 8002168:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <S2LP_WakeUp+0x78>)
 800216a:	607b      	str	r3, [r7, #4]
	while (radio_status.MC_STATE != MC_STATE_READY && ready_timeout--) {
 800216c:	e007      	b.n	800217e <S2LP_WakeUp+0x36>
		S2LP_Command(CMD_READY, &radio_status);
 800216e:	463b      	mov	r3, r7
 8002170:	4619      	mov	r1, r3
 8002172:	2062      	movs	r0, #98	@ 0x62
 8002174:	f7fe ffca 	bl	800110c <S2LP_Command>
		HAL_Delay(1);
 8002178:	2001      	movs	r0, #1
 800217a:	f000 fe03 	bl	8002d84 <HAL_Delay>
	while (radio_status.MC_STATE != MC_STATE_READY && ready_timeout--) {
 800217e:	787b      	ldrb	r3, [r7, #1]
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <S2LP_WakeUp+0x4c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	1e5a      	subs	r2, r3, #1
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ec      	bne.n	800216e <S2LP_WakeUp+0x26>
	}
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d009      	beq.n	80021b4 <S2LP_WakeUp+0x6c>
		DEBUG_PRINT("[S2LP] Error: radio did not become READY, state: 0x%X\r\n", radio_status.MC_STATE);
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4619      	mov	r1, r3
 80021aa:	4806      	ldr	r0, [pc, #24]	@ (80021c4 <S2LP_WakeUp+0x7c>)
 80021ac:	f006 fa6c 	bl	8008688 <iprintf>
		return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
 80021b2:	e000      	b.n	80021b6 <S2LP_WakeUp+0x6e>
	}

	return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	000186a0 	.word	0x000186a0
 80021c4:	08009648 	.word	0x08009648

080021c8 <S2LP_Init>:

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 80021d0:	4a48      	ldr	r2, [pc, #288]	@ (80022f4 <S2LP_Init+0x12c>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 80021d6:	f002 ffa3 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 80021da:	4603      	mov	r3, r0
 80021dc:	4a46      	ldr	r2, [pc, #280]	@ (80022f8 <S2LP_Init+0x130>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0a9b      	lsrs	r3, r3, #10
 80021e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80021e6:	b672      	cpsid	i
}
 80021e8:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 80021ea:	2200      	movs	r2, #0
 80021ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021f0:	4842      	ldr	r0, [pc, #264]	@ (80022fc <S2LP_Init+0x134>)
 80021f2:	f002 f9eb 	bl	80045cc <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e003      	b.n	8002204 <S2LP_Init+0x3c>
		asm volatile("nop");
 80021fc:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	429a      	cmp	r2, r3
 800220a:	d3f7      	bcc.n	80021fc <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 800220c:	b662      	cpsie	i
}
 800220e:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 8002210:	2200      	movs	r2, #0
 8002212:	2103      	movs	r1, #3
 8002214:	2000      	movs	r0, #0
 8002216:	f7fe ffe9 	bl	80011ec <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 800221a:	2200      	movs	r2, #0
 800221c:	21a4      	movs	r1, #164	@ 0xa4
 800221e:	2053      	movs	r0, #83	@ 0x53
 8002220:	f7fe ffe4 	bl	80011ec <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 8002224:	2200      	movs	r2, #0
 8002226:	2101      	movs	r1, #1
 8002228:	2052      	movs	r0, #82	@ 0x52
 800222a:	f7fe ffdf 	bl	80011ec <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2051      	movs	r0, #81	@ 0x51
 8002234:	f7fe ffda 	bl	80011ec <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	2050      	movs	r0, #80	@ 0x50
 800223e:	f7fe ffd5 	bl	80011ec <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 8002242:	2200      	movs	r2, #0
 8002244:	2120      	movs	r1, #32
 8002246:	203f      	movs	r0, #63	@ 0x3f
 8002248:	f7fe ffd0 	bl	80011ec <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 800224c:	2200      	movs	r2, #0
 800224e:	21b7      	movs	r1, #183	@ 0xb7
 8002250:	2033      	movs	r0, #51	@ 0x33
 8002252:	f7fe ffcb 	bl	80011ec <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 8002256:	2200      	movs	r2, #0
 8002258:	2154      	movs	r1, #84	@ 0x54
 800225a:	2034      	movs	r0, #52	@ 0x34
 800225c:	f7fe ffc6 	bl	80011ec <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8002260:	2200      	movs	r2, #0
 8002262:	212a      	movs	r1, #42	@ 0x2a
 8002264:	2035      	movs	r0, #53	@ 0x35
 8002266:	f7fe ffc1 	bl	80011ec <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 800226a:	2200      	movs	r2, #0
 800226c:	213e      	movs	r1, #62	@ 0x3e
 800226e:	2036      	movs	r0, #54	@ 0x36
 8002270:	f7fe ffbc 	bl	80011ec <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 8002274:	4822      	ldr	r0, [pc, #136]	@ (8002300 <S2LP_Init+0x138>)
 8002276:	f7ff fa27 	bl	80016c8 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 800227a:	2000      	movs	r0, #0
 800227c:	f7ff ff12 	bl	80020a4 <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 8002280:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8002284:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002288:	2000      	movs	r0, #0
 800228a:	f7ff fecb 	bl	8002024 <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 800228e:	2200      	movs	r2, #0
 8002290:	2120      	movs	r1, #32
 8002292:	2030      	movs	r0, #48	@ 0x30
 8002294:	f7fe ffaa 	bl	80011ec <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	202e      	movs	r0, #46	@ 0x2e
 800229e:	f7fe ffa5 	bl	80011ec <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 80022a2:	f107 020c 	add.w	r2, r7, #12
 80022a6:	f107 030b 	add.w	r3, r7, #11
 80022aa:	4619      	mov	r1, r3
 80022ac:	206c      	movs	r0, #108	@ 0x6c
 80022ae:	f7fe ff5f 	bl	8001170 <S2LP_ReadReg>
 80022b2:	4603      	mov	r3, r0
 80022b4:	73fb      	strb	r3, [r7, #15]
	if (err) {
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <S2LP_Init+0xf8>
		return err;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	e015      	b.n	80022ec <S2LP_Init+0x124>
	} else if (rco_conf != 0x45) {
 80022c0:	7afb      	ldrb	r3, [r7, #11]
 80022c2:	2b45      	cmp	r3, #69	@ 0x45
 80022c4:	d006      	beq.n	80022d4 <S2LP_Init+0x10c>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
 80022c6:	7afb      	ldrb	r3, [r7, #11]
 80022c8:	4619      	mov	r1, r3
 80022ca:	480e      	ldr	r0, [pc, #56]	@ (8002304 <S2LP_Init+0x13c>)
 80022cc:	f006 f9dc 	bl	8008688 <iprintf>
		return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e00b      	b.n	80022ec <S2LP_Init+0x124>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 80022d4:	7b7b      	ldrb	r3, [r7, #13]
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d004      	beq.n	80022ea <S2LP_Init+0x122>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
 80022e0:	4809      	ldr	r0, [pc, #36]	@ (8002308 <S2LP_Init+0x140>)
 80022e2:	f006 fa39 	bl	8008758 <puts>
		return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <S2LP_Init+0x124>
	}

	return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000f8d0 	.word	0x2000f8d0
 80022f8:	1b4e81b5 	.word	0x1b4e81b5
 80022fc:	48001400 	.word	0x48001400
 8002300:	33bca100 	.word	0x33bca100
 8002304:	08009680 	.word	0x08009680
 8002308:	080096dc 	.word	0x080096dc

0800230c <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	2200      	movs	r2, #0
 8002316:	4619      	mov	r1, r3
 8002318:	20fc      	movs	r0, #252	@ 0xfc
 800231a:	f7fe ff29 	bl	8001170 <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 800231e:	1dbb      	adds	r3, r7, #6
 8002320:	2200      	movs	r2, #0
 8002322:	4619      	mov	r1, r3
 8002324:	20fd      	movs	r0, #253	@ 0xfd
 8002326:	f7fe ff23 	bl	8001170 <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <S2LP_IRQ_Handler+0x58>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 800233a:	79bb      	ldrb	r3, [r7, #6]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 8002344:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <S2LP_IRQ_Handler+0x5c>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 800234a:	79bb      	ldrb	r3, [r7, #6]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 8002354:	4b05      	ldr	r3, [pc, #20]	@ (800236c <S2LP_IRQ_Handler+0x60>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	2000f8cd 	.word	0x2000f8cd
 8002368:	2000f8ce 	.word	0x2000f8ce
 800236c:	2000f8cc 	.word	0x2000f8cc

08002370 <step23_batch_fft>:

// Step 2 & 3 : Compute the full spectrogram and take the absolute value
// This function takes in a buffer of MEL_NUM_VEC * SAMPLES_NUM, and outputs the mel vectors in mel_vectors.
// The function computes the FFT of each vector in the buffer, and then computes the complex magnitude of each FFT.
void step23_batch_fft(q15_t *buffer)
{
 8002370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002374:	f500 459f 	add.w	r5, r0, #20352	@ 0x4f80
 8002378:	f6ad 0d18 	subw	sp, sp, #2072	@ 0x818
 800237c:	1e84      	subs	r4, r0, #2
 800237e:	357e      	adds	r5, #126	@ 0x7e
	q15_t fft_buffer[SAMPLES_NUM*2];
	// 2.1 : Compute each FFT of size SAMPLES_NUM
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
		// Compute the FFT of each vector in the buffer
		arm_rfft_instance_q15 rfft_inst;
		arm_rfft_init_q15(&rfft_inst, SAMPLES_NUM, 0, 1);
 8002380:	2301      	movs	r3, #1
		arm_rfft_q15(&rfft_inst, &buffer[i*SAMPLES_NUM], fft_buffer);
 8002382:	f104 0802 	add.w	r8, r4, #2
		arm_rfft_init_q15(&rfft_inst, SAMPLES_NUM, 0, 1);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800238c:	4668      	mov	r0, sp
 800238e:	f005 fa51 	bl	8007834 <arm_rfft_init_q15>
		arm_rfft_q15(&rfft_inst, &buffer[i*SAMPLES_NUM], fft_buffer);
 8002392:	4641      	mov	r1, r8
 8002394:	aa06      	add	r2, sp, #24
 8002396:	4668      	mov	r0, sp
 8002398:	f005 f9d0 	bl	800773c <arm_rfft_q15>
			real = real > 0 ? real : -real; // abs(real)
 800239c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80023a0:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
			real = real > 0 ? real : -real; // abs(real)
 80023a4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80023a8:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
			real = real > 0 ? real : -real; // abs(real)
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	bfb8      	it	lt
 80023b0:	4252      	neglt	r2, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80023b2:	2800      	cmp	r0, #0
 80023b4:	bfb8      	it	lt
 80023b6:	4240      	neglt	r0, r0
			real = real > 0 ? real : -real; // abs(real)
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bfb8      	it	lt
 80023bc:	425b      	neglt	r3, r3
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80023be:	2900      	cmp	r1, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80023c0:	b216      	sxth	r6, r2
 80023c2:	fa0f f880 	sxth.w	r8, r0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80023c6:	bfb8      	it	lt
 80023c8:	4249      	neglt	r1, r1
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	4546      	cmp	r6, r8
 80023ce:	b208      	sxth	r0, r1
 80023d0:	bfb8      	it	lt
 80023d2:	4646      	movlt	r6, r8
 80023d4:	4282      	cmp	r2, r0
 80023d6:	bfb8      	it	lt
 80023d8:	4602      	movlt	r2, r0
 80023da:	8066      	strh	r6, [r4, #2]
 80023dc:	f60d 0718 	addw	r7, sp, #2072	@ 0x818
 80023e0:	1d26      	adds	r6, r4, #4
 80023e2:	80a2      	strh	r2, [r4, #4]
	for (int i = 0; i < SAMPLES_NUM; i++)
 80023e4:	ab08      	add	r3, sp, #32
			real = real > 0 ? real : -real; // abs(real)
 80023e6:	f9b3 e000 	ldrsh.w	lr, [r3]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80023ea:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
			real = real > 0 ? real : -real; // abs(real)
 80023ee:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80023f2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
			real = real > 0 ? real : -real; // abs(real)
 80023f6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80023fa:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
			real = real > 0 ? real : -real; // abs(real)
 80023fe:	f1be 0f00 	cmp.w	lr, #0
 8002402:	bfb8      	it	lt
 8002404:	f1ce 0e00 	rsblt	lr, lr, #0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002408:	2900      	cmp	r1, #0
 800240a:	bfb8      	it	lt
 800240c:	4249      	neglt	r1, r1
			real = real > 0 ? real : -real; // abs(real)
 800240e:	f1bc 0f00 	cmp.w	ip, #0
 8002412:	bfb8      	it	lt
 8002414:	f1cc 0c00 	rsblt	ip, ip, #0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002418:	2a00      	cmp	r2, #0
 800241a:	bfb8      	it	lt
 800241c:	4252      	neglt	r2, r2
			real = real > 0 ? real : -real; // abs(real)
 800241e:	2800      	cmp	r0, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002420:	fa0f fe8e 	sxth.w	lr, lr
 8002424:	b209      	sxth	r1, r1
			real = real > 0 ? real : -real; // abs(real)
 8002426:	bfb8      	it	lt
 8002428:	4240      	neglt	r0, r0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800242a:	f1b8 0f00 	cmp.w	r8, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 800242e:	fa0f fc8c 	sxth.w	ip, ip
 8002432:	b212      	sxth	r2, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002434:	bfb8      	it	lt
 8002436:	f1c8 0800 	rsblt	r8, r8, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 800243a:	458e      	cmp	lr, r1
 800243c:	bfb8      	it	lt
 800243e:	468e      	movlt	lr, r1
			real = real > 0 ? real : -real; // abs(real)
 8002440:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002444:	f8a6 e002 	strh.w	lr, [r6, #2]
 8002448:	4594      	cmp	ip, r2
 800244a:	bfb8      	it	lt
 800244c:	4694      	movlt	ip, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800244e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002452:	f8a6 c004 	strh.w	ip, [r6, #4]
			real = real > 0 ? real : -real; // abs(real)
 8002456:	2900      	cmp	r1, #0
 8002458:	bfb8      	it	lt
 800245a:	4249      	neglt	r1, r1
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800245c:	2a00      	cmp	r2, #0
 800245e:	bfb8      	it	lt
 8002460:	4252      	neglt	r2, r2
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002462:	b209      	sxth	r1, r1
 8002464:	b212      	sxth	r2, r2
 8002466:	b200      	sxth	r0, r0
 8002468:	fa0f f888 	sxth.w	r8, r8
 800246c:	4291      	cmp	r1, r2
 800246e:	bfb8      	it	lt
 8002470:	4611      	movlt	r1, r2
 8002472:	4540      	cmp	r0, r8
			real = real > 0 ? real : -real; // abs(real)
 8002474:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002478:	8131      	strh	r1, [r6, #8]
 800247a:	bfb8      	it	lt
 800247c:	4640      	movlt	r0, r8
 800247e:	80f0      	strh	r0, [r6, #6]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002480:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
			real = real > 0 ? real : -real; // abs(real)
 8002484:	2a00      	cmp	r2, #0
 8002486:	bfb8      	it	lt
 8002488:	4252      	neglt	r2, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800248a:	2800      	cmp	r0, #0
 800248c:	bfb8      	it	lt
 800248e:	4240      	neglt	r0, r0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002490:	fa0f f882 	sxth.w	r8, r2
 8002494:	fa0f fc80 	sxth.w	ip, r0
 8002498:	45e0      	cmp	r8, ip
	for (int i = 0; i < SAMPLES_NUM; i++)
 800249a:	f103 0314 	add.w	r3, r3, #20
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 800249e:	bfb8      	it	lt
 80024a0:	46e0      	movlt	r8, ip
	for (int i = 0; i < SAMPLES_NUM; i++)
 80024a2:	429f      	cmp	r7, r3
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80024a4:	f826 8f0a 	strh.w	r8, [r6, #10]!
	for (int i = 0; i < SAMPLES_NUM; i++)
 80024a8:	d19d      	bne.n	80023e6 <step23_batch_fft+0x76>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80024aa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80024ae:	42a5      	cmp	r5, r4
 80024b0:	f47f af66 	bne.w	8002380 <step23_batch_fft+0x10>

		// 2.2 : Compute the complex magnitude of each FFT
		step3_approximate_magnitude(fft_buffer, &buffer[i*SAMPLES_NUM]);
	}
}
 80024b4:	f60d 0d18 	addw	sp, sp, #2072	@ 0x818
 80024b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024bc <step4_mel_filter_apply>:

// Step 4 : Compute the mel vectors of each FFT (parallel processing)
// This function takes in a buffer of MEL_NUM_VEC * SAMPLES_NUM, and outputs the mel vectors in mel_vectors.
void step4_mel_filter_apply(q15_t *buffer, q15_t mel_vectors[MEL_NUM_VEC][MEL_VEC_LENGTH])
{
 80024bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c0:	f101 0b28 	add.w	fp, r1, #40	@ 0x28
 80024c4:	b08b      	sub	sp, #44	@ 0x2c
 80024c6:	460d      	mov	r5, r1
 80024c8:	465f      	mov	r7, fp
 80024ca:	4606      	mov	r6, r0
 80024cc:	f501 7352 	add.w	r3, r1, #840	@ 0x348
   */
  __STATIC_FORCEINLINE q15_t clip_q63_to_q15(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 80024d0:	f647 7aff 	movw	sl, #32767	@ 0x7fff
	// 4.1 : Compute the mel vectors of each FFT (parallel processing)
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
		mel_filter_apply(&buffer[i*SAMPLES_NUM], &mel_vectors[i][0], SAMPLES_NUM/2, MEL_VEC_LENGTH);
 80024d4:	e9cd 3b00 	strd	r3, fp, [sp]
 80024d8:	4c37      	ldr	r4, [pc, #220]	@ (80025b8 <step4_mel_filter_apply+0xfc>)
		q15_t* fft_samples_1 = &fft_array[mel_triangles[i+1].idx_offset];
 80024da:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
		q15_t* fft_samples_2 = &fft_array[mel_triangles[i+2].idx_offset];
 80024dc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
		q15_t* fft_samples_3 = &fft_array[mel_triangles[i+3].idx_offset];
 80024e0:	f8d4 1170 	ldr.w	r1, [r4, #368]	@ 0x170
		q15_t* fft_samples_0 = &fft_array[mel_triangles[i].idx_offset];
 80024e4:	f854 0c04 	ldr.w	r0, [r4, #-4]
		q15_t* fft_samples_1 = &fft_array[mel_triangles[i+1].idx_offset];
 80024e8:	eb06 0b42 	add.w	fp, r6, r2, lsl #1
		q15_t* fft_samples_2 = &fft_array[mel_triangles[i+2].idx_offset];
 80024ec:	eb06 0843 	add.w	r8, r6, r3, lsl #1
		arm_dot_prod_q15(fft_samples_0, mel_values_0, mel_triangles[i].triangle_len, &mel_result_0);
 80024f0:	f854 2c08 	ldr.w	r2, [r4, #-8]
 80024f4:	eb06 0040 	add.w	r0, r6, r0, lsl #1
		q15_t* fft_samples_3 = &fft_array[mel_triangles[i+3].idx_offset];
 80024f8:	eb06 0941 	add.w	r9, r6, r1, lsl #1
		arm_dot_prod_q15(fft_samples_0, mel_values_0, mel_triangles[i].triangle_len, &mel_result_0);
 80024fc:	ab02      	add	r3, sp, #8
 80024fe:	4621      	mov	r1, r4
 8002500:	f005 fa72 	bl	80079e8 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_1, mel_values_1, mel_triangles[i+1].triangle_len, &mel_result_1);
 8002504:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8002506:	ab04      	add	r3, sp, #16
 8002508:	4658      	mov	r0, fp
 800250a:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
 800250e:	f005 fa6b 	bl	80079e8 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_2, mel_values_2, mel_triangles[i+2].triangle_len, &mel_result_2);
 8002512:	f8d4 20f0 	ldr.w	r2, [r4, #240]	@ 0xf0
 8002516:	ab06      	add	r3, sp, #24
 8002518:	4640      	mov	r0, r8
 800251a:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800251e:	f005 fa63 	bl	80079e8 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_3, mel_values_3, mel_triangles[i+3].triangle_len, &mel_result_3);
 8002522:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
 8002526:	ab08      	add	r3, sp, #32
 8002528:	4648      	mov	r0, r9
 800252a:	f504 71ba 	add.w	r1, r4, #372	@ 0x174
 800252e:	f005 fa5b 	bl	80079e8 <arm_dot_prod_q15>
		mel_array[i]   = clip_q63_to_q15(mel_result_0);
 8002532:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
		mel_array[i+1] = clip_q63_to_q15(mel_result_1);
 8002536:	9905      	ldr	r1, [sp, #20]
 8002538:	9804      	ldr	r0, [sp, #16]
 800253a:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 800253e:	bf0c      	ite	eq
 8002540:	f342 33cf 	sbfxeq	r3, r2, #15, #16
 8002544:	ea8a 73e3 	eorne.w	r3, sl, r3, asr #31
 8002548:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800254c:	bf0c      	ite	eq
 800254e:	f340 31cf 	sbfxeq	r1, r0, #15, #16
 8002552:	ea8a 71e1 	eorne.w	r1, sl, r1, asr #31
		mel_array[i+2] = clip_q63_to_q15(mel_result_2);
 8002556:	9a06      	ldr	r2, [sp, #24]
		mel_array[i]   = clip_q63_to_q15(mel_result_0);
 8002558:	802b      	strh	r3, [r5, #0]
		mel_array[i+2] = clip_q63_to_q15(mel_result_2);
 800255a:	9b07      	ldr	r3, [sp, #28]
		mel_array[i+3] = clip_q63_to_q15(mel_result_3);
 800255c:	9808      	ldr	r0, [sp, #32]
		mel_array[i+1] = clip_q63_to_q15(mel_result_1);
 800255e:	8069      	strh	r1, [r5, #2]
		mel_array[i+3] = clip_q63_to_q15(mel_result_3);
 8002560:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002562:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 8002566:	bf14      	ite	ne
 8002568:	ea8a 73e3 	eorne.w	r3, sl, r3, asr #31
 800256c:	f342 33cf 	sbfxeq	r3, r2, #15, #16
 8002570:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
		mel_array[i+2] = clip_q63_to_q15(mel_result_2);
 8002574:	80ab      	strh	r3, [r5, #4]
 8002576:	d013      	beq.n	80025a0 <step4_mel_filter_apply+0xe4>
 8002578:	ea8a 7ce1 	eor.w	ip, sl, r1, asr #31
		mel_array[i+3] = clip_q63_to_q15(mel_result_3);
 800257c:	f8a5 c006 	strh.w	ip, [r5, #6]
	for (size_t i = 0; i < mel_len; i += 4) {
 8002580:	3508      	adds	r5, #8
 8002582:	42bd      	cmp	r5, r7
 8002584:	f504 74f8 	add.w	r4, r4, #496	@ 0x1f0
 8002588:	d1a7      	bne.n	80024da <step4_mel_filter_apply+0x1e>
 800258a:	e9dd 3e00 	ldrd	r3, lr, [sp]
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800258e:	3728      	adds	r7, #40	@ 0x28
 8002590:	42bb      	cmp	r3, r7
 8002592:	4675      	mov	r5, lr
 8002594:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002598:	d00a      	beq.n	80025b0 <step4_mel_filter_apply+0xf4>
 800259a:	f10e 0b28 	add.w	fp, lr, #40	@ 0x28
 800259e:	e799      	b.n	80024d4 <step4_mel_filter_apply+0x18>
 80025a0:	0bc2      	lsrs	r2, r0, #15
 80025a2:	80ea      	strh	r2, [r5, #6]
	for (size_t i = 0; i < mel_len; i += 4) {
 80025a4:	3508      	adds	r5, #8
 80025a6:	42af      	cmp	r7, r5
 80025a8:	f504 74f8 	add.w	r4, r4, #496	@ 0x1f0
 80025ac:	d195      	bne.n	80024da <step4_mel_filter_apply+0x1e>
 80025ae:	e7ec      	b.n	800258a <step4_mel_filter_apply+0xce>
	}
}
 80025b0:	b00b      	add	sp, #44	@ 0x2c
 80025b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025b6:	bf00      	nop
 80025b8:	08009880 	.word	0x08009880

080025bc <Full_spectrogram_compute>:

void Full_spectrogram_compute(q15_t* buffer, q15_t mel_vectors[MEL_NUM_VEC][MEL_VEC_LENGTH])
{
 80025bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025c0:	4605      	mov	r5, r0
 80025c2:	460e      	mov	r6, r1
	//    3. Compute the complex magnitude
	//    4. Compute the mel vectors

	// This function takes in a buffer of MEL_NUM_VEC * SAMPLES_NUM, and outputs the mel vectors in mel_vectors.

	start_cycle_count();
 80025c4:	f000 fa9e 	bl	8002b04 <start_cycle_count>
	for (int i = 0; i < SAMPLES_NUM*MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80025c8:	f505 409f 	add.w	r0, r5, #20352	@ 0x4f80
 80025cc:	1eab      	subs	r3, r5, #2
 80025ce:	462c      	mov	r4, r5
 80025d0:	307e      	adds	r0, #126	@ 0x7e
		buffer[i] = ((q15_t)buffer[i]<<3) - ((q15_t)(1<<14));
 80025d2:	885a      	ldrh	r2, [r3, #2]
 80025d4:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 80025d8:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 80025dc:	00d1      	lsls	r1, r2, #3
 80025de:	889a      	ldrh	r2, [r3, #4]
 80025e0:	f5a1 4780 	sub.w	r7, r1, #16384	@ 0x4000
 80025e4:	00d1      	lsls	r1, r2, #3
 80025e6:	805f      	strh	r7, [r3, #2]
 80025e8:	f5a1 4780 	sub.w	r7, r1, #16384	@ 0x4000
 80025ec:	89da      	ldrh	r2, [r3, #14]
 80025ee:	8999      	ldrh	r1, [r3, #12]
 80025f0:	809f      	strh	r7, [r3, #4]
 80025f2:	88df      	ldrh	r7, [r3, #6]
 80025f4:	ea4f 08ce 	mov.w	r8, lr, lsl #3
 80025f8:	00c9      	lsls	r1, r1, #3
 80025fa:	00d2      	lsls	r2, r2, #3
 80025fc:	00ff      	lsls	r7, r7, #3
 80025fe:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8002602:	f5a7 4780 	sub.w	r7, r7, #16384	@ 0x4000
 8002606:	f5a8 4e80 	sub.w	lr, r8, #16384	@ 0x4000
 800260a:	f5a9 4c80 	sub.w	ip, r9, #16384	@ 0x4000
 800260e:	f5a1 4880 	sub.w	r8, r1, #16384	@ 0x4000
 8002612:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8002616:	80df      	strh	r7, [r3, #6]
 8002618:	81d9      	strh	r1, [r3, #14]
 800261a:	f8a3 e008 	strh.w	lr, [r3, #8]
 800261e:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8002622:	f8a3 800c 	strh.w	r8, [r3, #12]
 8002626:	f833 2f10 	ldrh.w	r2, [r3, #16]!
 800262a:	00d7      	lsls	r7, r2, #3
 800262c:	f5a7 4180 	sub.w	r1, r7, #16384	@ 0x4000
	for (int i = 0; i < SAMPLES_NUM*MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002630:	4298      	cmp	r0, r3
		buffer[i] = ((q15_t)buffer[i]<<3) - ((q15_t)(1<<14));
 8002632:	8019      	strh	r1, [r3, #0]
	for (int i = 0; i < SAMPLES_NUM*MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002634:	d1cd      	bne.n	80025d2 <Full_spectrogram_compute+0x16>
 8002636:	2004      	movs	r0, #4
 8002638:	2801      	cmp	r0, #1
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 800263a:	4f4d      	ldr	r7, [pc, #308]	@ (8002770 <Full_spectrogram_compute+0x1b4>)
 800263c:	f505 49a0 	add.w	r9, r5, #20480	@ 0x5000
 8002640:	d03a      	beq.n	80026b8 <Full_spectrogram_compute+0xfc>
 8002642:	2802      	cmp	r0, #2
 8002644:	d02f      	beq.n	80026a6 <Full_spectrogram_compute+0xea>
 8002646:	2803      	cmp	r0, #3
 8002648:	d024      	beq.n	8002694 <Full_spectrogram_compute+0xd8>
 800264a:	b9d0      	cbnz	r0, 8002682 <Full_spectrogram_compute+0xc6>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800264c:	f505 6480 	add.w	r4, r5, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002650:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002654:	462a      	mov	r2, r5
 8002656:	4639      	mov	r1, r7
 8002658:	4628      	mov	r0, r5
 800265a:	f005 f967 	bl	800792c <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800265e:	f505 6800 	add.w	r8, r5, #2048	@ 0x800
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002662:	4622      	mov	r2, r4
 8002664:	4620      	mov	r0, r4
 8002666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800266a:	4639      	mov	r1, r7
 800266c:	f005 f95e 	bl	800792c <arm_mult_q15>
 8002670:	4642      	mov	r2, r8
 8002672:	4640      	mov	r0, r8
 8002674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002678:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800267a:	f508 6480 	add.w	r4, r8, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 800267e:	f005 f955 	bl	800792c <arm_mult_q15>
 8002682:	4622      	mov	r2, r4
 8002684:	4620      	mov	r0, r4
 8002686:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800268a:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800268c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002690:	f005 f94c 	bl	800792c <arm_mult_q15>
 8002694:	4622      	mov	r2, r4
 8002696:	4620      	mov	r0, r4
 8002698:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800269c:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800269e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80026a2:	f005 f943 	bl	800792c <arm_mult_q15>
 80026a6:	4622      	mov	r2, r4
 80026a8:	4620      	mov	r0, r4
 80026aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026ae:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80026b0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80026b4:	f005 f93a 	bl	800792c <arm_mult_q15>
 80026b8:	4622      	mov	r2, r4
 80026ba:	4620      	mov	r0, r4
 80026bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80026c0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80026c4:	4639      	mov	r1, r7
 80026c6:	f005 f931 	bl	800792c <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80026ca:	45a1      	cmp	r9, r4
 80026cc:	d043      	beq.n	8002756 <Full_spectrogram_compute+0x19a>
 80026ce:	f504 6880 	add.w	r8, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80026d2:	4622      	mov	r2, r4
 80026d4:	4620      	mov	r0, r4
 80026d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026da:	4639      	mov	r1, r7
 80026dc:	f005 f926 	bl	800792c <arm_mult_q15>
 80026e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026e4:	4642      	mov	r2, r8
 80026e6:	4639      	mov	r1, r7
 80026e8:	4640      	mov	r0, r8
 80026ea:	f005 f91f 	bl	800792c <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80026ee:	f504 6200 	add.w	r2, r4, #2048	@ 0x800
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80026f2:	4610      	mov	r0, r2
 80026f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026f8:	4639      	mov	r1, r7
 80026fa:	f005 f917 	bl	800792c <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80026fe:	f504 6240 	add.w	r2, r4, #3072	@ 0xc00
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002702:	4610      	mov	r0, r2
 8002704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002708:	4639      	mov	r1, r7
 800270a:	f005 f90f 	bl	800792c <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800270e:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002712:	4610      	mov	r0, r2
 8002714:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002718:	4639      	mov	r1, r7
 800271a:	f005 f907 	bl	800792c <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800271e:	f504 52a0 	add.w	r2, r4, #5120	@ 0x1400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002722:	4610      	mov	r0, r2
 8002724:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002728:	4639      	mov	r1, r7
 800272a:	f005 f8ff 	bl	800792c <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800272e:	f504 52c0 	add.w	r2, r4, #6144	@ 0x1800
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002732:	4610      	mov	r0, r2
 8002734:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002738:	4639      	mov	r1, r7
 800273a:	f005 f8f7 	bl	800792c <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800273e:	f504 52e0 	add.w	r2, r4, #7168	@ 0x1c00
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002742:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002746:	4639      	mov	r1, r7
 8002748:	4610      	mov	r0, r2
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800274a:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 800274e:	f005 f8ed 	bl	800792c <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002752:	45a1      	cmp	r9, r4
 8002754:	d1bb      	bne.n	80026ce <Full_spectrogram_compute+0x112>

	// 1   : Format the signal (expand to 16-bit, remove DC, windowing)
	step1_123_batch_pre_process(buffer);

	// 2 & 3 : Compute each FFT of size SAMPLES_NUM and take the absolute value
	step23_batch_fft(buffer);
 8002756:	4628      	mov	r0, r5
 8002758:	f7ff fe0a 	bl	8002370 <step23_batch_fft>

	// 4   : Compute the mel vectors of each FFT (parallel processing)
	step4_mel_filter_apply(buffer, mel_vectors);
 800275c:	4628      	mov	r0, r5
 800275e:	4631      	mov	r1, r6
 8002760:	f7ff feac 	bl	80024bc <step4_mel_filter_apply>

	stop_cycle_count("Spectrogram compute");
 8002764:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	stop_cycle_count("Spectrogram compute");
 8002768:	4802      	ldr	r0, [pc, #8]	@ (8002774 <Full_spectrogram_compute+0x1b8>)
 800276a:	f000 b9eb 	b.w	8002b44 <stop_cycle_count>
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000
 8002774:	08009864 	.word	0x08009864

08002778 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002778:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800277a:	4811      	ldr	r0, [pc, #68]	@ (80027c0 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800277c:	4c11      	ldr	r4, [pc, #68]	@ (80027c4 <MX_SPI1_Init+0x4c>)
 800277e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002782:	2300      	movs	r3, #0
 8002784:	2208      	movs	r2, #8
 8002786:	e9c0 4100 	strd	r4, r1, [r0]
 800278a:	f44f 6ce0 	mov.w	ip, #1792	@ 0x700
 800278e:	f44f 7400 	mov.w	r4, #512	@ 0x200
 8002792:	f04f 0e07 	mov.w	lr, #7
 8002796:	e9c0 3c02 	strd	r3, ip, [r0, #8]
 800279a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800279e:	e9c0 2307 	strd	r2, r3, [r0, #28]
 80027a2:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 80027a6:	e9c0 e30b 	strd	lr, r3, [r0, #44]	@ 0x2c
 80027aa:	6184      	str	r4, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027ac:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027ae:	f003 f9bf 	bl	8005b30 <HAL_SPI_Init>
 80027b2:	b900      	cbnz	r0, 80027b6 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027b4:	bd10      	pop	{r4, pc}
 80027b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80027ba:	f7fe ba6b 	b.w	8000c94 <Error_Handler>
 80027be:	bf00      	nop
 80027c0:	2000f8d8 	.word	0x2000f8d8
 80027c4:	40013000 	.word	0x40013000

080027c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027c8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80027ca:	4b22      	ldr	r3, [pc, #136]	@ (8002854 <HAL_SPI_MspInit+0x8c>)
 80027cc:	6802      	ldr	r2, [r0, #0]
{
 80027ce:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 80027d2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80027d8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80027dc:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 80027de:	d001      	beq.n	80027e4 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027e0:	b00a      	add	sp, #40	@ 0x28
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027e4:	f503 4060 	add.w	r0, r3, #57344	@ 0xe000
 80027e8:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 80027ea:	f441 5580 	orr.w	r5, r1, #4096	@ 0x1000
 80027ee:	6605      	str	r5, [r0, #96]	@ 0x60
 80027f0:	6e06      	ldr	r6, [r0, #96]	@ 0x60
 80027f2:	f406 5380 	and.w	r3, r6, #4096	@ 0x1000
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80027fc:	f042 0101 	orr.w	r1, r2, #1
 8002800:	64c1      	str	r1, [r0, #76]	@ 0x4c
 8002802:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8002804:	f005 0601 	and.w	r6, r5, #1
 8002808:	9602      	str	r6, [sp, #8]
 800280a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800280c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800280e:	f043 0210 	orr.w	r2, r3, #16
 8002812:	64c2      	str	r2, [r0, #76]	@ 0x4c
 8002814:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8002816:	f000 0110 	and.w	r1, r0, #16
 800281a:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2603      	movs	r6, #3
 800281e:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002820:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002822:	22c0      	movs	r2, #192	@ 0xc0
 8002824:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800282a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282e:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002832:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	f001 fdae 	bl	8004394 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800283e:	4806      	ldr	r0, [pc, #24]	@ (8002858 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002840:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002842:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800284a:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800284c:	f001 fda2 	bl	8004394 <HAL_GPIO_Init>
}
 8002850:	b00a      	add	sp, #40	@ 0x28
 8002852:	bd70      	pop	{r4, r5, r6, pc}
 8002854:	40013000 	.word	0x40013000
 8002858:	48001000 	.word	0x48001000

0800285c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <HAL_MspInit+0x2c>)
 800285e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002860:	f042 0001 	orr.w	r0, r2, #1
 8002864:	6618      	str	r0, [r3, #96]	@ 0x60
 8002866:	6e19      	ldr	r1, [r3, #96]	@ 0x60
{
 8002868:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	f001 0201 	and.w	r2, r1, #1
 800286e:	9200      	str	r2, [sp, #0]
 8002870:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002874:	f040 5180 	orr.w	r1, r0, #268435456	@ 0x10000000
 8002878:	6599      	str	r1, [r3, #88]	@ 0x58
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002880:	9201      	str	r2, [sp, #4]
 8002882:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002884:	b002      	add	sp, #8
 8002886:	4770      	bx	lr
 8002888:	40021000 	.word	0x40021000

0800288c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800288c:	e7fe      	b.n	800288c <NMI_Handler>
 800288e:	bf00      	nop

08002890 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <HardFault_Handler>
 8002892:	bf00      	nop

08002894 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002894:	e7fe      	b.n	8002894 <MemManage_Handler>
 8002896:	bf00      	nop

08002898 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <BusFault_Handler>
 800289a:	bf00      	nop

0800289c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289c:	e7fe      	b.n	800289c <UsageFault_Handler>
 800289e:	bf00      	nop

080028a0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop

080028a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop

080028a8 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop

080028ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ac:	f000 ba58 	b.w	8002d60 <HAL_IncTick>

080028b0 <EXTI3_IRQHandler>:
  */
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 80028b0:	2008      	movs	r0, #8
 80028b2:	f001 be91 	b.w	80045d8 <HAL_GPIO_EXTI_IRQHandler>
 80028b6:	bf00      	nop

080028b8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028b8:	4801      	ldr	r0, [pc, #4]	@ (80028c0 <DMA1_Channel1_IRQHandler+0x8>)
 80028ba:	f001 bd1d 	b.w	80042f8 <HAL_DMA_IRQHandler>
 80028be:	bf00      	nop
 80028c0:	20000484 	.word	0x20000484

080028c4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028c4:	4801      	ldr	r0, [pc, #4]	@ (80028cc <TIM3_IRQHandler+0x8>)
 80028c6:	f003 bce5 	b.w	8006294 <HAL_TIM_IRQHandler>
 80028ca:	bf00      	nop
 80028cc:	2000f940 	.word	0x2000f940

080028d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80028d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028d4:	f001 be80 	b.w	80045d8 <HAL_GPIO_EXTI_IRQHandler>

080028d8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d8:	490c      	ldr	r1, [pc, #48]	@ (800290c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028da:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80028dc:	680b      	ldr	r3, [r1, #0]
{
 80028de:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e0:	4c0c      	ldr	r4, [pc, #48]	@ (8002914 <_sbrk+0x3c>)
 80028e2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80028e4:	b12b      	cbz	r3, 80028f2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e6:	4418      	add	r0, r3
 80028e8:	4290      	cmp	r0, r2
 80028ea:	d807      	bhi.n	80028fc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80028ec:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80028f2:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <_sbrk+0x40>)
 80028f4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80028f6:	4418      	add	r0, r3
 80028f8:	4290      	cmp	r0, r2
 80028fa:	d9f7      	bls.n	80028ec <_sbrk+0x14>
    errno = ENOMEM;
 80028fc:	f006 f91e 	bl	8008b3c <__errno>
 8002900:	210c      	movs	r1, #12
    return (void *)-1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
    errno = ENOMEM;
 8002906:	6001      	str	r1, [r0, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd10      	pop	{r4, pc}
 800290c:	2000f93c 	.word	0x2000f93c
 8002910:	20050000 	.word	0x20050000
 8002914:	00000400 	.word	0x00000400
 8002918:	2000fb70 	.word	0x2000fb70

0800291c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800291c:	480e      	ldr	r0, [pc, #56]	@ (8002958 <SystemInit+0x3c>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800291e:	4b0f      	ldr	r3, [pc, #60]	@ (800295c <SystemInit+0x40>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002920:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8002924:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8002928:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 800292c:	6818      	ldr	r0, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800292e:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8002930:	f040 0201 	orr.w	r2, r0, #1
 8002934:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002936:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f022 5ca8 	bic.w	ip, r2, #352321536	@ 0x15000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800293e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8002942:	f42c 2210 	bic.w	r2, ip, #589824	@ 0x90000
 8002946:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8002948:	60d8      	str	r0, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	f420 2280 	bic.w	r2, r0, #262144	@ 0x40000
 8002950:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002952:	6199      	str	r1, [r3, #24]
}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed00 	.word	0xe000ed00
 800295c:	40021000 	.word	0x40021000

08002960 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002960:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002962:	481b      	ldr	r0, [pc, #108]	@ (80029d0 <MX_TIM3_Init+0x70>)
 8002964:	4a1b      	ldr	r2, [pc, #108]	@ (80029d4 <MX_TIM3_Init+0x74>)
 8002966:	6002      	str	r2, [r0, #0]
{
 8002968:	b089      	sub	sp, #36	@ 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800296a:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 23;
 800296c:	2117      	movs	r1, #23
 800296e:	f04f 0cc3 	mov.w	ip, #195	@ 0xc3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002972:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002976:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.Prescaler = 23;
 800297e:	e9c0 3c02 	strd	r3, ip, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002982:	9303      	str	r3, [sp, #12]
  htim3.Init.Prescaler = 23;
 8002984:	6041      	str	r1, [r0, #4]
 8002986:	6103      	str	r3, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 195;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002988:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800298a:	f003 fb01 	bl	8005f90 <HAL_TIM_Base_Init>
 800298e:	b998      	cbnz	r0, 80029b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002994:	480e      	ldr	r0, [pc, #56]	@ (80029d0 <MX_TIM3_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002996:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002998:	a904      	add	r1, sp, #16
 800299a:	f003 fbc7 	bl	800612c <HAL_TIM_ConfigClockSource>
 800299e:	b998      	cbnz	r0, 80029c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029a0:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029a4:	480a      	ldr	r0, [pc, #40]	@ (80029d0 <MX_TIM3_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029a6:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029a8:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029aa:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029ac:	f003 fd1e 	bl	80063ec <HAL_TIMEx_MasterConfigSynchronization>
 80029b0:	b928      	cbnz	r0, 80029be <MX_TIM3_Init+0x5e>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029b2:	b009      	add	sp, #36	@ 0x24
 80029b4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80029b8:	f7fe f96c 	bl	8000c94 <Error_Handler>
 80029bc:	e7e8      	b.n	8002990 <MX_TIM3_Init+0x30>
    Error_Handler();
 80029be:	f7fe f969 	bl	8000c94 <Error_Handler>
}
 80029c2:	b009      	add	sp, #36	@ 0x24
 80029c4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80029c8:	f7fe f964 	bl	8000c94 <Error_Handler>
 80029cc:	e7e8      	b.n	80029a0 <MX_TIM3_Init+0x40>
 80029ce:	bf00      	nop
 80029d0:	2000f940 	.word	0x2000f940
 80029d4:	40000400 	.word	0x40000400

080029d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 80029d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <HAL_TIM_Base_MspInit+0x40>)
 80029da:	6802      	ldr	r2, [r0, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d000      	beq.n	80029e2 <HAL_TIM_Base_MspInit+0xa>
 80029e0:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e2:	f503 3c03 	add.w	ip, r3, #134144	@ 0x20c00
{
 80029e6:	b500      	push	{lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e8:	f8dc 1058 	ldr.w	r1, [ip, #88]	@ 0x58
 80029ec:	f041 0302 	orr.w	r3, r1, #2
 80029f0:	f8cc 3058 	str.w	r3, [ip, #88]	@ 0x58
 80029f4:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
{
 80029f8:	b083      	sub	sp, #12

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a02:	201d      	movs	r0, #29
 8002a04:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a06:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a08:	f001 f87e 	bl	8003b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a0c:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a0e:	b003      	add	sp, #12
 8002a10:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a14:	f001 b8b4 	b.w	8003b80 <HAL_NVIC_EnableIRQ>
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	00000000 	.word	0x00000000

08002a20 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a20:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8002a58 <MX_LPUART1_UART_Init+0x38>
{
 8002a24:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 8002a26:	480e      	ldr	r0, [pc, #56]	@ (8002a60 <MX_LPUART1_UART_Init+0x40>)
 8002a28:	4c0e      	ldr	r4, [pc, #56]	@ (8002a64 <MX_LPUART1_UART_Init+0x44>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2a:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 115200;
 8002a2c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002a30:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = 115200;
 8002a32:	e9c0 4100 	strd	r4, r1, [r0]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a36:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002a3a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002a3e:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8002a42:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002a44:	f004 fdc2 	bl	80075cc <HAL_UART_Init>
 8002a48:	b900      	cbnz	r0, 8002a4c <MX_LPUART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002a4a:	bd10      	pop	{r4, pc}
 8002a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002a50:	f7fe b920 	b.w	8000c94 <Error_Handler>
 8002a54:	f3af 8000 	nop.w
	...
 8002a60:	2000f990 	.word	0x2000f990
 8002a64:	40008000 	.word	0x40008000

08002a68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a70:	228c      	movs	r2, #140	@ 0x8c
 8002a72:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002a78:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002a7c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a7e:	f005 ffff 	bl	8008a80 <memset>
  if(uartHandle->Instance==LPUART1)
 8002a82:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <HAL_UART_MspInit+0x90>)
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d001      	beq.n	8002a8e <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002a8a:	b02a      	add	sp, #168	@ 0xa8
 8002a8c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002a8e:	2120      	movs	r1, #32
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002a90:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a94:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002a96:	9107      	str	r1, [sp, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002a98:	941a      	str	r4, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9a:	f002 fc7d 	bl	8005398 <HAL_RCCEx_PeriphCLKConfig>
 8002a9e:	bb20      	cbnz	r0, 8002aea <HAL_UART_MspInit+0x82>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002aa0:	4816      	ldr	r0, [pc, #88]	@ (8002afc <HAL_UART_MspInit+0x94>)
 8002aa2:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	65c2      	str	r2, [r0, #92]	@ 0x5c
 8002aaa:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8002aac:	f001 0401 	and.w	r4, r1, #1
 8002ab0:	9400      	str	r4, [sp, #0]
 8002ab2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ab4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002ab6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002aba:	64c2      	str	r2, [r0, #76]	@ 0x4c
 8002abc:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8002abe:	f000 0140 	and.w	r1, r0, #64	@ 0x40
 8002ac2:	9101      	str	r1, [sp, #4]
 8002ac4:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 8002ac6:	f001 fe3f 	bl	8004748 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002aca:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8002af0 <HAL_UART_MspInit+0x88>
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ad2:	480b      	ldr	r0, [pc, #44]	@ (8002b00 <HAL_UART_MspInit+0x98>)
 8002ad4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ad6:	2408      	movs	r4, #8
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002ad8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002adc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ae0:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ae2:	f001 fc57 	bl	8004394 <HAL_GPIO_Init>
}
 8002ae6:	b02a      	add	sp, #168	@ 0xa8
 8002ae8:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002aea:	f7fe f8d3 	bl	8000c94 <Error_Handler>
 8002aee:	e7d7      	b.n	8002aa0 <HAL_UART_MspInit+0x38>
 8002af0:	00000180 	.word	0x00000180
 8002af4:	00000002 	.word	0x00000002
 8002af8:	40008000 	.word	0x40008000
 8002afc:	40021000 	.word	0x40021000
 8002b00:	48001800 	.word	0x48001800

08002b04 <start_cycle_count>:

#if (NO_PERF == 0)

volatile uint8_t counting_cycles = 0;

void start_cycle_count() {
 8002b04:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b06:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002b0a:	b672      	cpsid	i
	uint32_t prim = __get_PRIMASK();
	__disable_irq();
	if (counting_cycles) {
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <start_cycle_count+0x34>)
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	b95a      	cbnz	r2, 8002b2a <start_cycle_count+0x26>
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
		Error_Handler();
	} else {
		counting_cycles = 1;
 8002b12:	2001      	movs	r0, #1
 8002b14:	7018      	strb	r0, [r3, #0]
	}
	if (!prim) {
 8002b16:	b904      	cbnz	r4, 8002b1a <start_cycle_count+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b18:	b662      	cpsie	i
		__enable_irq();
	}
	DWT->CTRL |= 1 ; // enable the counter
 8002b1a:	4c08      	ldr	r4, [pc, #32]	@ (8002b3c <start_cycle_count+0x38>)
 8002b1c:	6823      	ldr	r3, [r4, #0]
	DWT->CYCCNT = 0; // reset the counter
 8002b1e:	2100      	movs	r1, #0
	DWT->CTRL |= 1 ; // enable the counter
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	6022      	str	r2, [r4, #0]
	DWT->CYCCNT = 0; // reset the counter
 8002b26:	6061      	str	r1, [r4, #4]
}
 8002b28:	bd10      	pop	{r4, pc}
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
 8002b2a:	4805      	ldr	r0, [pc, #20]	@ (8002b40 <start_cycle_count+0x3c>)
 8002b2c:	f005 fe14 	bl	8008758 <puts>
		Error_Handler();
 8002b30:	f7fe f8b0 	bl	8000c94 <Error_Handler>
 8002b34:	e7ef      	b.n	8002b16 <start_cycle_count+0x12>
 8002b36:	bf00      	nop
 8002b38:	2000fa18 	.word	0x2000fa18
 8002b3c:	e0001000 	.word	0xe0001000
 8002b40:	0800a270 	.word	0x0800a270

08002b44 <stop_cycle_count>:
void stop_cycle_count(char *s) {
 8002b44:	b538      	push	{r3, r4, r5, lr}
	uint32_t res = DWT->CYCCNT;
 8002b46:	4909      	ldr	r1, [pc, #36]	@ (8002b6c <stop_cycle_count+0x28>)
	counting_cycles = 0;
 8002b48:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <stop_cycle_count+0x2c>)
	uint32_t res = DWT->CYCCNT;
 8002b4a:	684d      	ldr	r5, [r1, #4]
void stop_cycle_count(char *s) {
 8002b4c:	4604      	mov	r4, r0
	counting_cycles = 0;
 8002b4e:	2200      	movs	r2, #0
	printf("[PERF] ");
 8002b50:	4808      	ldr	r0, [pc, #32]	@ (8002b74 <stop_cycle_count+0x30>)
	counting_cycles = 0;
 8002b52:	701a      	strb	r2, [r3, #0]
	printf("[PERF] ");
 8002b54:	f005 fd98 	bl	8008688 <iprintf>
	printf(s);
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f005 fd95 	bl	8008688 <iprintf>
	printf(" %lu cycles.\r\n", res);
 8002b5e:	4629      	mov	r1, r5
 8002b60:	4805      	ldr	r0, [pc, #20]	@ (8002b78 <stop_cycle_count+0x34>)
}
 8002b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf(" %lu cycles.\r\n", res);
 8002b66:	f005 bd8f 	b.w	8008688 <iprintf>
 8002b6a:	bf00      	nop
 8002b6c:	e0001000 	.word	0xe0001000
 8002b70:	2000fa18 	.word	0x2000fa18
 8002b74:	0800a294 	.word	0x0800a294
 8002b78:	0800a29c 	.word	0x0800a29c

08002b7c <hex_encode>:


// Encode the binary buffer buf of length len in the null-terminated string s
// (which must have length at least 2*len+1).
void hex_encode(char* s, const uint8_t* buf, size_t len) {
    s[2*len] = '\0';
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
    for (size_t i=0; i<len; i++) {
 8002b82:	2a00      	cmp	r2, #0
 8002b84:	f000 8088 	beq.w	8002c98 <hex_encode+0x11c>
 8002b88:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8002b8c:	f1ac 0202 	sub.w	r2, ip, #2
void hex_encode(char* s, const uint8_t* buf, size_t len) {
 8002b90:	b500      	push	{lr}
 8002b92:	eb00 0e0c 	add.w	lr, r0, ip
 8002b96:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8002b9a:	f10c 0c01 	add.w	ip, ip, #1
 8002b9e:	f01c 0c03 	ands.w	ip, ip, #3
 8002ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8002c9c <hex_encode+0x120>)
 8002ba4:	f101 33ff 	add.w	r3, r1, #4294967295
 8002ba8:	d031      	beq.n	8002c0e <hex_encode+0x92>
 8002baa:	f1bc 0f01 	cmp.w	ip, #1
 8002bae:	d01e      	beq.n	8002bee <hex_encode+0x72>
 8002bb0:	f1bc 0f02 	cmp.w	ip, #2
 8002bb4:	d00d      	beq.n	8002bd2 <hex_encode+0x56>
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	7809      	ldrb	r1, [r1, #0]
 8002bba:	0909      	lsrs	r1, r1, #4
    for (size_t i=0; i<len; i++) {
 8002bbc:	3002      	adds	r0, #2
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002bbe:	5c51      	ldrb	r1, [r2, r1]
 8002bc0:	f800 1c02 	strb.w	r1, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002bc4:	f893 c000 	ldrb.w	ip, [r3]
 8002bc8:	f00c 010f 	and.w	r1, ip, #15
 8002bcc:	5c51      	ldrb	r1, [r2, r1]
 8002bce:	f800 1c01 	strb.w	r1, [r0, #-1]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002bd2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002bd6:	0909      	lsrs	r1, r1, #4
    for (size_t i=0; i<len; i++) {
 8002bd8:	3002      	adds	r0, #2
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002bda:	5c51      	ldrb	r1, [r2, r1]
 8002bdc:	f800 1c02 	strb.w	r1, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002be0:	f893 c000 	ldrb.w	ip, [r3]
 8002be4:	f00c 010f 	and.w	r1, ip, #15
 8002be8:	5c51      	ldrb	r1, [r2, r1]
 8002bea:	f800 1c01 	strb.w	r1, [r0, #-1]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002bee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002bf2:	0909      	lsrs	r1, r1, #4
    for (size_t i=0; i<len; i++) {
 8002bf4:	3002      	adds	r0, #2
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002bf6:	5c51      	ldrb	r1, [r2, r1]
 8002bf8:	f800 1c02 	strb.w	r1, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002bfc:	f893 c000 	ldrb.w	ip, [r3]
 8002c00:	f00c 010f 	and.w	r1, ip, #15
 8002c04:	5c51      	ldrb	r1, [r2, r1]
 8002c06:	f800 1c01 	strb.w	r1, [r0, #-1]
    for (size_t i=0; i<len; i++) {
 8002c0a:	4586      	cmp	lr, r0
 8002c0c:	d042      	beq.n	8002c94 <hex_encode+0x118>
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002c0e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8002c12:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    for (size_t i=0; i<len; i++) {
 8002c16:	1c81      	adds	r1, r0, #2
 8002c18:	3008      	adds	r0, #8
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002c1a:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002c1e:	f800 cc08 	strb.w	ip, [r0, #-8]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002c22:	f893 c001 	ldrb.w	ip, [r3, #1]
 8002c26:	f00c 0c0f 	and.w	ip, ip, #15
    for (size_t i=0; i<len; i++) {
 8002c2a:	4586      	cmp	lr, r0
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002c2c:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002c30:	f800 cc07 	strb.w	ip, [r0, #-7]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002c34:	f893 c002 	ldrb.w	ip, [r3, #2]
 8002c38:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8002c3c:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002c40:	f800 cc06 	strb.w	ip, [r0, #-6]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002c44:	f893 c002 	ldrb.w	ip, [r3, #2]
 8002c48:	f00c 0c0f 	and.w	ip, ip, #15
 8002c4c:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002c50:	f881 c001 	strb.w	ip, [r1, #1]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002c54:	f893 c003 	ldrb.w	ip, [r3, #3]
 8002c58:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8002c5c:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002c60:	f881 c002 	strb.w	ip, [r1, #2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002c64:	f893 c003 	ldrb.w	ip, [r3, #3]
 8002c68:	f00c 0c0f 	and.w	ip, ip, #15
 8002c6c:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002c70:	f881 c003 	strb.w	ip, [r1, #3]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002c74:	f813 1f04 	ldrb.w	r1, [r3, #4]!
 8002c78:	ea4f 1111 	mov.w	r1, r1, lsr #4
 8002c7c:	f812 c001 	ldrb.w	ip, [r2, r1]
 8002c80:	f800 cc02 	strb.w	ip, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002c84:	7819      	ldrb	r1, [r3, #0]
 8002c86:	f001 0c0f 	and.w	ip, r1, #15
 8002c8a:	f812 100c 	ldrb.w	r1, [r2, ip]
 8002c8e:	f800 1c01 	strb.w	r1, [r0, #-1]
    for (size_t i=0; i<len; i++) {
 8002c92:	d1bc      	bne.n	8002c0e <hex_encode+0x92>
    }
}
 8002c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	0800a2ac 	.word	0x0800a2ac

08002ca0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ca4:	f7ff fe3a 	bl	800291c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca8:	480c      	ldr	r0, [pc, #48]	@ (8002cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8002caa:	490d      	ldr	r1, [pc, #52]	@ (8002ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce4 <LoopForever+0xe>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb0:	e002      	b.n	8002cb8 <LoopCopyDataInit>

08002cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb6:	3304      	adds	r3, #4

08002cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cbc:	d3f9      	bcc.n	8002cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8002cec <LoopForever+0x16>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc4:	e001      	b.n	8002cca <LoopFillZerobss>

08002cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc8:	3204      	adds	r2, #4

08002cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ccc:	d3fb      	bcc.n	8002cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cce:	f005 ff3b 	bl	8008b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cd2:	f7fe f909 	bl	8000ee8 <main>

08002cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002cd6:	e7fe      	b.n	8002cd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cd8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce0:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8002ce4:	0801c16c 	.word	0x0801c16c
  ldr r2, =_sbss
 8002ce8:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 8002cec:	2000fb6c 	.word	0x2000fb6c

08002cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cf0:	e7fe      	b.n	8002cf0 <ADC1_2_IRQHandler>
	...

08002cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <HAL_InitTick+0x40>)
 8002cf8:	781c      	ldrb	r4, [r3, #0]
 8002cfa:	b90c      	cbnz	r4, 8002d00 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cfc:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d00:	490d      	ldr	r1, [pc, #52]	@ (8002d38 <HAL_InitTick+0x44>)
 8002d02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d06:	4605      	mov	r5, r0
 8002d08:	fbb2 fcf4 	udiv	ip, r2, r4
 8002d0c:	6808      	ldr	r0, [r1, #0]
 8002d0e:	fbb0 f0fc 	udiv	r0, r0, ip
 8002d12:	f000 ff43 	bl	8003b9c <HAL_SYSTICK_Config>
 8002d16:	4604      	mov	r4, r0
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d1ef      	bne.n	8002cfc <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1c:	2d0f      	cmp	r5, #15
 8002d1e:	d8ed      	bhi.n	8002cfc <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d20:	4602      	mov	r2, r0
 8002d22:	4629      	mov	r1, r5
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	f000 feee 	bl	8003b08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	@ (8002d3c <HAL_InitTick+0x48>)
 8002d2e:	4620      	mov	r0, r4
 8002d30:	601d      	str	r5, [r3, #0]
}
 8002d32:	bd38      	pop	{r3, r4, r5, pc}
 8002d34:	20000404 	.word	0x20000404
 8002d38:	20000400 	.word	0x20000400
 8002d3c:	20000408 	.word	0x20000408

08002d40 <HAL_Init>:
{
 8002d40:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d42:	2003      	movs	r0, #3
 8002d44:	f000 fece 	bl	8003ae4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7ff ffd3 	bl	8002cf4 <HAL_InitTick>
 8002d4e:	b110      	cbz	r0, 8002d56 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002d50:	2401      	movs	r4, #1
}
 8002d52:	4620      	mov	r0, r4
 8002d54:	bd10      	pop	{r4, pc}
 8002d56:	4604      	mov	r4, r0
    HAL_MspInit();
 8002d58:	f7ff fd80 	bl	800285c <HAL_MspInit>
}
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	bd10      	pop	{r4, pc}

08002d60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002d60:	4a03      	ldr	r2, [pc, #12]	@ (8002d70 <HAL_IncTick+0x10>)
 8002d62:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <HAL_IncTick+0x14>)
 8002d64:	6811      	ldr	r1, [r2, #0]
 8002d66:	7818      	ldrb	r0, [r3, #0]
 8002d68:	4408      	add	r0, r1
 8002d6a:	6010      	str	r0, [r2, #0]
}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	2000fa1c 	.word	0x2000fa1c
 8002d74:	20000404 	.word	0x20000404

08002d78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d78:	4b01      	ldr	r3, [pc, #4]	@ (8002d80 <HAL_GetTick+0x8>)
 8002d7a:	6818      	ldr	r0, [r3, #0]
}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	2000fa1c 	.word	0x2000fa1c

08002d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d84:	b538      	push	{r3, r4, r5, lr}
 8002d86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff fff6 	bl	8002d78 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d8c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002d8e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002d90:	d002      	beq.n	8002d98 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8002d92:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <HAL_Delay+0x68>)
 8002d94:	7818      	ldrb	r0, [r3, #0]
 8002d96:	4404      	add	r4, r0
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d98:	f7ff ffee 	bl	8002d78 <HAL_GetTick>
 8002d9c:	1b41      	subs	r1, r0, r5
 8002d9e:	42a1      	cmp	r1, r4
 8002da0:	d222      	bcs.n	8002de8 <HAL_Delay+0x64>
 8002da2:	f7ff ffe9 	bl	8002d78 <HAL_GetTick>
 8002da6:	1b42      	subs	r2, r0, r5
 8002da8:	42a2      	cmp	r2, r4
 8002daa:	d21d      	bcs.n	8002de8 <HAL_Delay+0x64>
 8002dac:	f7ff ffe4 	bl	8002d78 <HAL_GetTick>
 8002db0:	1b43      	subs	r3, r0, r5
 8002db2:	42a3      	cmp	r3, r4
 8002db4:	d218      	bcs.n	8002de8 <HAL_Delay+0x64>
 8002db6:	f7ff ffdf 	bl	8002d78 <HAL_GetTick>
 8002dba:	1b40      	subs	r0, r0, r5
 8002dbc:	42a0      	cmp	r0, r4
 8002dbe:	d213      	bcs.n	8002de8 <HAL_Delay+0x64>
 8002dc0:	f7ff ffda 	bl	8002d78 <HAL_GetTick>
 8002dc4:	1b41      	subs	r1, r0, r5
 8002dc6:	42a1      	cmp	r1, r4
 8002dc8:	d20e      	bcs.n	8002de8 <HAL_Delay+0x64>
 8002dca:	f7ff ffd5 	bl	8002d78 <HAL_GetTick>
 8002dce:	1b42      	subs	r2, r0, r5
 8002dd0:	42a2      	cmp	r2, r4
 8002dd2:	d209      	bcs.n	8002de8 <HAL_Delay+0x64>
 8002dd4:	f7ff ffd0 	bl	8002d78 <HAL_GetTick>
 8002dd8:	1b43      	subs	r3, r0, r5
 8002dda:	42a3      	cmp	r3, r4
 8002ddc:	d204      	bcs.n	8002de8 <HAL_Delay+0x64>
 8002dde:	f7ff ffcb 	bl	8002d78 <HAL_GetTick>
 8002de2:	1b40      	subs	r0, r0, r5
 8002de4:	42a0      	cmp	r0, r4
 8002de6:	d3d7      	bcc.n	8002d98 <HAL_Delay+0x14>
  {
  }
}
 8002de8:	bd38      	pop	{r3, r4, r5, pc}
 8002dea:	bf00      	nop
 8002dec:	20000404 	.word	0x20000404

08002df0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002df0:	b530      	push	{r4, r5, lr}
 8002df2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d062      	beq.n	8002ec2 <HAL_ADC_Init+0xd2>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dfc:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8002dfe:	4604      	mov	r4, r0
 8002e00:	2d00      	cmp	r5, #0
 8002e02:	f000 80c8 	beq.w	8002f96 <HAL_ADC_Init+0x1a6>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e06:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	d505      	bpl.n	8002e1a <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e0e:	6898      	ldr	r0, [r3, #8]
 8002e10:	f020 4120 	bic.w	r1, r0, #2684354560	@ 0xa0000000
 8002e14:	f021 053f 	bic.w	r5, r1, #63	@ 0x3f
 8002e18:	609d      	str	r5, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	00d5      	lsls	r5, r2, #3
 8002e1e:	d43d      	bmi.n	8002e9c <HAL_ADC_Init+0xac>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e20:	496f      	ldr	r1, [pc, #444]	@ (8002fe0 <HAL_ADC_Init+0x1f0>)
 8002e22:	4870      	ldr	r0, [pc, #448]	@ (8002fe4 <HAL_ADC_Init+0x1f4>)
 8002e24:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CR,
 8002e26:	6899      	ldr	r1, [r3, #8]
 8002e28:	09aa      	lsrs	r2, r5, #6
 8002e2a:	fba0 0502 	umull	r0, r5, r0, r2
 8002e2e:	09aa      	lsrs	r2, r5, #6
 8002e30:	f021 4010 	bic.w	r0, r1, #2415919104	@ 0x90000000
 8002e34:	f020 0c3f 	bic.w	ip, r0, #63	@ 0x3f
 8002e38:	3201      	adds	r2, #1
 8002e3a:	f04c 5180 	orr.w	r1, ip, #268435456	@ 0x10000000
 8002e3e:	0055      	lsls	r5, r2, #1
 8002e40:	6099      	str	r1, [r3, #8]
 8002e42:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e44:	9801      	ldr	r0, [sp, #4]
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d028      	beq.n	8002e9c <HAL_ADC_Init+0xac>
    {
      wait_loop_index--;
 8002e4a:	9a01      	ldr	r2, [sp, #4]
 8002e4c:	1e51      	subs	r1, r2, #1
 8002e4e:	9101      	str	r1, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e50:	9d01      	ldr	r5, [sp, #4]
 8002e52:	b31d      	cbz	r5, 8002e9c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002e54:	9801      	ldr	r0, [sp, #4]
 8002e56:	1e42      	subs	r2, r0, #1
 8002e58:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e5a:	9901      	ldr	r1, [sp, #4]
 8002e5c:	b1f1      	cbz	r1, 8002e9c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002e5e:	9d01      	ldr	r5, [sp, #4]
 8002e60:	1e68      	subs	r0, r5, #1
 8002e62:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e64:	9a01      	ldr	r2, [sp, #4]
 8002e66:	b1ca      	cbz	r2, 8002e9c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002e68:	9901      	ldr	r1, [sp, #4]
 8002e6a:	1e4d      	subs	r5, r1, #1
 8002e6c:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e6e:	9801      	ldr	r0, [sp, #4]
 8002e70:	b1a0      	cbz	r0, 8002e9c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002e72:	9a01      	ldr	r2, [sp, #4]
 8002e74:	1e51      	subs	r1, r2, #1
 8002e76:	9101      	str	r1, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e78:	9d01      	ldr	r5, [sp, #4]
 8002e7a:	b17d      	cbz	r5, 8002e9c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002e7c:	9801      	ldr	r0, [sp, #4]
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e82:	9901      	ldr	r1, [sp, #4]
 8002e84:	b151      	cbz	r1, 8002e9c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002e86:	9d01      	ldr	r5, [sp, #4]
 8002e88:	1e68      	subs	r0, r5, #1
 8002e8a:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e8c:	9a01      	ldr	r2, [sp, #4]
 8002e8e:	b12a      	cbz	r2, 8002e9c <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002e90:	9901      	ldr	r1, [sp, #4]
 8002e92:	1e4d      	subs	r5, r1, #1
 8002e94:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e96:	9801      	ldr	r0, [sp, #4]
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d1d6      	bne.n	8002e4a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	00d0      	lsls	r0, r2, #3
 8002ea0:	d412      	bmi.n	8002ec8 <HAL_ADC_Init+0xd8>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002ea4:	f041 0510 	orr.w	r5, r1, #16
 8002ea8:	65a5      	str	r5, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eaa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eac:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eae:	4302      	orrs	r2, r0
 8002eb0:	65e2      	str	r2, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eb2:	6899      	ldr	r1, [r3, #8]
 8002eb4:	0749      	lsls	r1, r1, #29
 8002eb6:	d50c      	bpl.n	8002ed2 <HAL_ADC_Init+0xe2>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ebc:	f040 0210 	orr.w	r2, r0, #16
 8002ec0:	65a2      	str	r2, [r4, #88]	@ 0x58
    return HAL_ERROR;
 8002ec2:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002ec4:	b003      	add	sp, #12
 8002ec6:	bd30      	pop	{r4, r5, pc}
 8002ec8:	6899      	ldr	r1, [r3, #8]
 8002eca:	0749      	lsls	r1, r1, #29
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ecc:	f04f 0000 	mov.w	r0, #0
 8002ed0:	d4f2      	bmi.n	8002eb8 <HAL_ADC_Init+0xc8>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ed2:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8002ed4:	06ea      	lsls	r2, r5, #27
 8002ed6:	d4f0      	bmi.n	8002eba <HAL_ADC_Init+0xca>
    ADC_STATE_CLR_SET(hadc->State,
 8002ed8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002eda:	f422 7181 	bic.w	r1, r2, #258	@ 0x102
 8002ede:	f041 0502 	orr.w	r5, r1, #2
 8002ee2:	65a5      	str	r5, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	07d5      	lsls	r5, r2, #31
 8002ee8:	d410      	bmi.n	8002f0c <HAL_ADC_Init+0x11c>
 8002eea:	4d3f      	ldr	r5, [pc, #252]	@ (8002fe8 <HAL_ADC_Init+0x1f8>)
 8002eec:	493f      	ldr	r1, [pc, #252]	@ (8002fec <HAL_ADC_Init+0x1fc>)
 8002eee:	6889      	ldr	r1, [r1, #8]
 8002ef0:	68aa      	ldr	r2, [r5, #8]
 8002ef2:	4d3f      	ldr	r5, [pc, #252]	@ (8002ff0 <HAL_ADC_Init+0x200>)
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	68a9      	ldr	r1, [r5, #8]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	07d1      	lsls	r1, r2, #31
 8002efc:	d406      	bmi.n	8002f0c <HAL_ADC_Init+0x11c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002efe:	493d      	ldr	r1, [pc, #244]	@ (8002ff4 <HAL_ADC_Init+0x204>)
 8002f00:	6865      	ldr	r5, [r4, #4]
 8002f02:	688a      	ldr	r2, [r1, #8]
 8002f04:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8002f08:	432a      	orrs	r2, r5
 8002f0a:	608a      	str	r2, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 8002f0c:	68e5      	ldr	r5, [r4, #12]
 8002f0e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f10:	f894 1020 	ldrb.w	r1, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f14:	f894 c019 	ldrb.w	ip, [r4, #25]
                 hadc->Init.DataAlign                                                   |
 8002f18:	432a      	orrs	r2, r5
 8002f1a:	68a5      	ldr	r5, [r4, #8]
 8002f1c:	432a      	orrs	r2, r5
 8002f1e:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f22:	2901      	cmp	r1, #1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f28:	d043      	beq.n	8002fb2 <HAL_ADC_Init+0x1c2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f2a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002f2c:	b121      	cbz	r1, 8002f38 <HAL_ADC_Init+0x148>
                   | hadc->Init.ExternalTrigConvEdge
 8002f2e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f30:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002f34:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f36:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f38:	68dd      	ldr	r5, [r3, #12]
 8002f3a:	492f      	ldr	r1, [pc, #188]	@ (8002ff8 <HAL_ADC_Init+0x208>)
 8002f3c:	4029      	ands	r1, r5
 8002f3e:	4311      	orrs	r1, r2
 8002f40:	60d9      	str	r1, [r3, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	0712      	lsls	r2, r2, #28
 8002f46:	d417      	bmi.n	8002f78 <HAL_ADC_Init+0x188>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f48:	68d9      	ldr	r1, [r3, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f4a:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f4e:	f894 c018 	ldrb.w	ip, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f52:	f421 4580 	bic.w	r5, r1, #16384	@ 0x4000
 8002f56:	f025 0106 	bic.w	r1, r5, #6
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f5a:	0055      	lsls	r5, r2, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f5c:	ea45 328c 	orr.w	r2, r5, ip, lsl #14
 8002f60:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 8002f62:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f64:	430a      	orrs	r2, r1
 8002f66:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002f68:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8002f6c:	2901      	cmp	r1, #1
 8002f6e:	d025      	beq.n	8002fbc <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	f022 0501 	bic.w	r5, r2, #1
 8002f76:	611d      	str	r5, [r3, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f78:	6921      	ldr	r1, [r4, #16]
 8002f7a:	2901      	cmp	r1, #1
 8002f7c:	d011      	beq.n	8002fa2 <HAL_ADC_Init+0x1b2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f7e:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 8002f80:	f025 020f 	bic.w	r2, r5, #15
 8002f84:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f88:	f023 0503 	bic.w	r5, r3, #3
 8002f8c:	f045 0101 	orr.w	r1, r5, #1
 8002f90:	65a1      	str	r1, [r4, #88]	@ 0x58
}
 8002f92:	b003      	add	sp, #12
 8002f94:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002f96:	f7fd fb49 	bl	800062c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002f9a:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002f9c:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8002fa0:	e731      	b.n	8002e06 <HAL_ADC_Init+0x16>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fa2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fa4:	69e5      	ldr	r5, [r4, #28]
 8002fa6:	f021 010f 	bic.w	r1, r1, #15
 8002faa:	1e6a      	subs	r2, r5, #1
 8002fac:	430a      	orrs	r2, r1
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fb0:	e7e9      	b.n	8002f86 <HAL_ADC_Init+0x196>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fb2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002fb4:	1e4d      	subs	r5, r1, #1
 8002fb6:	ea42 4245 	orr.w	r2, r2, r5, lsl #17
 8002fba:	e7b6      	b.n	8002f2a <HAL_ADC_Init+0x13a>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fbc:	6919      	ldr	r1, [r3, #16]
 8002fbe:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002fc0:	f421 65ff 	bic.w	r5, r1, #2040	@ 0x7f8
 8002fc4:	f025 0104 	bic.w	r1, r5, #4
 8002fc8:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8002fca:	432a      	orrs	r2, r5
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002fd0:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	432a      	orrs	r2, r5
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	611a      	str	r2, [r3, #16]
 8002fdc:	e7cc      	b.n	8002f78 <HAL_ADC_Init+0x188>
 8002fde:	bf00      	nop
 8002fe0:	20000400 	.word	0x20000400
 8002fe4:	053e2d63 	.word	0x053e2d63
 8002fe8:	50040100 	.word	0x50040100
 8002fec:	50040000 	.word	0x50040000
 8002ff0:	50040200 	.word	0x50040200
 8002ff4:	50040300 	.word	0x50040300
 8002ff8:	fff0c007 	.word	0xfff0c007

08002ffc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ffe:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003000:	f7fd fc4c 	bl	800089c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003004:	bd08      	pop	{r3, pc}
 8003006:	bf00      	nop

08003008 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800300c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800300e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003010:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8003014:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003016:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003018:	d11d      	bne.n	8003056 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800301a:	6818      	ldr	r0, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800301c:	f444 7200 	orr.w	r2, r4, #512	@ 0x200
 8003020:	659a      	str	r2, [r3, #88]	@ 0x58
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003022:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003024:	68c1      	ldr	r1, [r0, #12]
 8003026:	f014 0f08 	tst.w	r4, #8
 800302a:	d01b      	beq.n	8003064 <ADC_DMAConvCplt+0x58>
 800302c:	f411 6f40 	tst.w	r1, #3072	@ 0xc00
 8003030:	d10d      	bne.n	800304e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003032:	68c0      	ldr	r0, [r0, #12]
 8003034:	0484      	lsls	r4, r0, #18
 8003036:	d40a      	bmi.n	800304e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003038:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800303a:	f422 7480 	bic.w	r4, r2, #256	@ 0x100
 800303e:	659c      	str	r4, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003040:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8003042:	04c9      	lsls	r1, r1, #19
 8003044:	d403      	bmi.n	800304e <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003046:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003048:	f040 0201 	orr.w	r2, r0, #1
 800304c:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd fc38 	bl	80008c4 <HAL_ADC_ConvCpltCallback>
}
 8003054:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003056:	06e2      	lsls	r2, r4, #27
 8003058:	d40a      	bmi.n	8003070 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800305a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
}
 800305c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003060:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8003062:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003064:	0788      	lsls	r0, r1, #30
 8003066:	d5e7      	bpl.n	8003038 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fc2b 	bl	80008c4 <HAL_ADC_ConvCpltCallback>
 800306e:	e7f1      	b.n	8003054 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ffc9 	bl	8003008 <HAL_ADC_ErrorCallback>
}
 8003076:	bd10      	pop	{r4, pc}

08003078 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003078:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 800307a:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800307c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800307e:	f043 0140 	orr.w	r1, r3, #64	@ 0x40
 8003082:	6581      	str	r1, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003084:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8003086:	f042 0304 	orr.w	r3, r2, #4
 800308a:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800308c:	f7ff ffbc 	bl	8003008 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003090:	bd08      	pop	{r3, pc}
 8003092:	bf00      	nop

08003094 <HAL_ADC_ConfigChannel>:
{
 8003094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8003098:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
{
 800309c:	b082      	sub	sp, #8
 800309e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80030a0:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80030a8:	f000 8162 	beq.w	8003370 <HAL_ADC_ConfigChannel+0x2dc>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ac:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 80030ae:	2001      	movs	r0, #1
 80030b0:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030b4:	68a5      	ldr	r5, [r4, #8]
 80030b6:	f015 0604 	ands.w	r6, r5, #4
 80030ba:	d154      	bne.n	8003166 <HAL_ADC_ConfigChannel+0xd2>
    uint32_t config_rank = pConfig->Rank;
 80030bc:	684f      	ldr	r7, [r1, #4]
    if (pConfig->Rank <= 5U)
 80030be:	2f05      	cmp	r7, #5
 80030c0:	f240 8097 	bls.w	80031f2 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 80030c4:	f007 051f 	and.w	r5, r7, #31
 80030c8:	201f      	movs	r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030ca:	09ba      	lsrs	r2, r7, #6
  MODIFY_REG(*preg,
 80030cc:	fa00 f705 	lsl.w	r7, r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030d0:	f002 060c 	and.w	r6, r2, #12
  MODIFY_REG(*preg,
 80030d4:	ea6f 0e07 	mvn.w	lr, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030d8:	f104 0830 	add.w	r8, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 80030dc:	680a      	ldr	r2, [r1, #0]
 80030de:	f858 0006 	ldr.w	r0, [r8, r6]
 80030e2:	f3c2 6784 	ubfx	r7, r2, #26, #5
 80030e6:	40af      	lsls	r7, r5
 80030e8:	ea00 050e 	and.w	r5, r0, lr
 80030ec:	432f      	orrs	r7, r5
 80030ee:	f848 7006 	str.w	r7, [r8, r6]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030f2:	68a6      	ldr	r6, [r4, #8]
 80030f4:	0777      	lsls	r7, r6, #29
 80030f6:	d540      	bpl.n	800317a <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030f8:	68a2      	ldr	r2, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030fa:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030fc:	68a6      	ldr	r6, [r4, #8]
 80030fe:	07f5      	lsls	r5, r6, #31
 8003100:	d412      	bmi.n	8003128 <HAL_ADC_ConfigChannel+0x94>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003102:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003104:	48b0      	ldr	r0, [pc, #704]	@ (80033c8 <HAL_ADC_ConfigChannel+0x334>)
 8003106:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 800310a:	f006 0718 	and.w	r7, r6, #24
 800310e:	40f8      	lsrs	r0, r7
 8003110:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8003114:	4010      	ands	r0, r2
 8003116:	ea25 0507 	bic.w	r5, r5, r7
 800311a:	4328      	orrs	r0, r5
 800311c:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003120:	48aa      	ldr	r0, [pc, #680]	@ (80033cc <HAL_ADC_ConfigChannel+0x338>)
 8003122:	4286      	cmp	r6, r0
 8003124:	f000 80d2 	beq.w	80032cc <HAL_ADC_ConfigChannel+0x238>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003128:	49a9      	ldr	r1, [pc, #676]	@ (80033d0 <HAL_ADC_ConfigChannel+0x33c>)
 800312a:	420a      	tst	r2, r1
 800312c:	d019      	beq.n	8003162 <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800312e:	48a9      	ldr	r0, [pc, #676]	@ (80033d4 <HAL_ADC_ConfigChannel+0x340>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003130:	4da9      	ldr	r5, [pc, #676]	@ (80033d8 <HAL_ADC_ConfigChannel+0x344>)
 8003132:	6887      	ldr	r7, [r0, #8]
 8003134:	42aa      	cmp	r2, r5
 8003136:	f007 76e0 	and.w	r6, r7, #29360128	@ 0x1c00000
 800313a:	d06f      	beq.n	800321c <HAL_ADC_ConfigChannel+0x188>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800313c:	49a7      	ldr	r1, [pc, #668]	@ (80033dc <HAL_ADC_ConfigChannel+0x348>)
 800313e:	428a      	cmp	r2, r1
 8003140:	f000 811a 	beq.w	8003378 <HAL_ADC_ConfigChannel+0x2e4>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003144:	4da6      	ldr	r5, [pc, #664]	@ (80033e0 <HAL_ADC_ConfigChannel+0x34c>)
 8003146:	42aa      	cmp	r2, r5
 8003148:	d10b      	bne.n	8003162 <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800314a:	027a      	lsls	r2, r7, #9
 800314c:	d409      	bmi.n	8003162 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_VREFINT_INSTANCE(hadc))
 800314e:	4aa5      	ldr	r2, [pc, #660]	@ (80033e4 <HAL_ADC_ConfigChannel+0x350>)
 8003150:	4294      	cmp	r4, r2
 8003152:	d106      	bne.n	8003162 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003154:	6884      	ldr	r4, [r0, #8]
 8003156:	f024 77e0 	bic.w	r7, r4, #29360128	@ 0x1c00000
 800315a:	4337      	orrs	r7, r6
 800315c:	f447 0680 	orr.w	r6, r7, #4194304	@ 0x400000
 8003160:	6086      	str	r6, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003162:	2000      	movs	r0, #0
 8003164:	e003      	b.n	800316e <HAL_ADC_ConfigChannel+0xda>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003166:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003168:	f042 0720 	orr.w	r7, r2, #32
 800316c:	659f      	str	r7, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 800316e:	2600      	movs	r6, #0
 8003170:	f883 6054 	strb.w	r6, [r3, #84]	@ 0x54
}
 8003174:	b002      	add	sp, #8
 8003176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800317a:	68a7      	ldr	r7, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800317c:	680a      	ldr	r2, [r1, #0]
 800317e:	073e      	lsls	r6, r7, #28
 8003180:	d4bc      	bmi.n	80030fc <HAL_ADC_ConfigChannel+0x68>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003182:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8003184:	f3c2 5604 	ubfx	r6, r2, #20, #5
 8003188:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800318a:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 800318c:	40b0      	lsls	r0, r6
 800318e:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003192:	f002 0c04 	and.w	ip, r2, #4
 8003196:	f104 0814 	add.w	r8, r4, #20
  MODIFY_REG(*preg,
 800319a:	ea6f 0200 	mvn.w	r2, r0
 800319e:	f000 8152 	beq.w	8003446 <HAL_ADC_ConfigChannel+0x3b2>
 80031a2:	f858 700c 	ldr.w	r7, [r8, ip]
 80031a6:	40b5      	lsls	r5, r6
 80031a8:	403a      	ands	r2, r7
 80031aa:	432a      	orrs	r2, r5
 80031ac:	f848 200c 	str.w	r2, [r8, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031b0:	6965      	ldr	r5, [r4, #20]
 80031b2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80031b6:	6166      	str	r6, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80031b8:	e9d1 7004 	ldrd	r7, r0, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80031bc:	680a      	ldr	r2, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80031be:	68e5      	ldr	r5, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031c0:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031c2:	f104 0660 	add.w	r6, r4, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80031c6:	4694      	mov	ip, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031c8:	f000 8116 	beq.w	80033f8 <HAL_ADC_ConfigChannel+0x364>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80031cc:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 80031d0:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 80031d2:	f856 c027 	ldr.w	ip, [r6, r7, lsl #2]
 80031d6:	40a8      	lsls	r0, r5
 80031d8:	4d83      	ldr	r5, [pc, #524]	@ (80033e8 <HAL_ADC_ConfigChannel+0x354>)
 80031da:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80031de:	ea0c 0505 	and.w	r5, ip, r5
 80031e2:	4315      	orrs	r5, r2
 80031e4:	4328      	orrs	r0, r5
 80031e6:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80031ea:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031ee:	680a      	ldr	r2, [r1, #0]
}
 80031f0:	e784      	b.n	80030fc <HAL_ADC_ConfigChannel+0x68>
      switch (pConfig->Rank)
 80031f2:	1ebd      	subs	r5, r7, #2
 80031f4:	2d03      	cmp	r5, #3
 80031f6:	d903      	bls.n	8003200 <HAL_ADC_ConfigChannel+0x16c>
    if (pConfig->Rank <= 5U)
 80031f8:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 80031fc:	2506      	movs	r5, #6
 80031fe:	e76b      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x44>
 8003200:	4e7a      	ldr	r6, [pc, #488]	@ (80033ec <HAL_ADC_ConfigChannel+0x358>)
 8003202:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
  MODIFY_REG(*preg,
 8003206:	271f      	movs	r7, #31
 8003208:	f000 051f 	and.w	r5, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800320c:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 800320e:	fa07 f005 	lsl.w	r0, r7, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003212:	f002 060c 	and.w	r6, r2, #12
  MODIFY_REG(*preg,
 8003216:	ea6f 0e00 	mvn.w	lr, r0
 800321a:	e75d      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x44>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800321c:	0238      	lsls	r0, r7, #8
 800321e:	d4a0      	bmi.n	8003162 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003220:	4870      	ldr	r0, [pc, #448]	@ (80033e4 <HAL_ADC_ConfigChannel+0x350>)
 8003222:	4284      	cmp	r4, r0
 8003224:	d003      	beq.n	800322e <HAL_ADC_ConfigChannel+0x19a>
 8003226:	f500 7100 	add.w	r1, r0, #512	@ 0x200
 800322a:	428c      	cmp	r4, r1
 800322c:	d199      	bne.n	8003162 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800322e:	4d69      	ldr	r5, [pc, #420]	@ (80033d4 <HAL_ADC_ConfigChannel+0x340>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003230:	4c6f      	ldr	r4, [pc, #444]	@ (80033f0 <HAL_ADC_ConfigChannel+0x35c>)
 8003232:	68aa      	ldr	r2, [r5, #8]
 8003234:	496f      	ldr	r1, [pc, #444]	@ (80033f4 <HAL_ADC_ConfigChannel+0x360>)
 8003236:	f022 77e0 	bic.w	r7, r2, #29360128	@ 0x1c00000
 800323a:	4337      	orrs	r7, r6
 800323c:	f447 0600 	orr.w	r6, r7, #8388608	@ 0x800000
 8003240:	60ae      	str	r6, [r5, #8]
 8003242:	6820      	ldr	r0, [r4, #0]
 8003244:	0985      	lsrs	r5, r0, #6
 8003246:	fba1 1405 	umull	r1, r4, r1, r5
 800324a:	09a2      	lsrs	r2, r4, #6
 800324c:	3201      	adds	r2, #1
 800324e:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8003252:	00be      	lsls	r6, r7, #2
 8003254:	9601      	str	r6, [sp, #4]
          while (wait_loop_index != 0UL)
 8003256:	9801      	ldr	r0, [sp, #4]
 8003258:	2800      	cmp	r0, #0
 800325a:	d082      	beq.n	8003162 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 800325c:	9901      	ldr	r1, [sp, #4]
 800325e:	1e4d      	subs	r5, r1, #1
 8003260:	9501      	str	r5, [sp, #4]
          while (wait_loop_index != 0UL)
 8003262:	9c01      	ldr	r4, [sp, #4]
 8003264:	2c00      	cmp	r4, #0
 8003266:	f43f af7c 	beq.w	8003162 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 800326a:	9a01      	ldr	r2, [sp, #4]
 800326c:	1e57      	subs	r7, r2, #1
 800326e:	9701      	str	r7, [sp, #4]
          while (wait_loop_index != 0UL)
 8003270:	9e01      	ldr	r6, [sp, #4]
 8003272:	2e00      	cmp	r6, #0
 8003274:	f43f af75 	beq.w	8003162 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003278:	9801      	ldr	r0, [sp, #4]
 800327a:	1e41      	subs	r1, r0, #1
 800327c:	9101      	str	r1, [sp, #4]
          while (wait_loop_index != 0UL)
 800327e:	9d01      	ldr	r5, [sp, #4]
 8003280:	2d00      	cmp	r5, #0
 8003282:	f43f af6e 	beq.w	8003162 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003286:	9c01      	ldr	r4, [sp, #4]
 8003288:	1e62      	subs	r2, r4, #1
 800328a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800328c:	9f01      	ldr	r7, [sp, #4]
 800328e:	2f00      	cmp	r7, #0
 8003290:	f43f af67 	beq.w	8003162 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003294:	9e01      	ldr	r6, [sp, #4]
 8003296:	1e70      	subs	r0, r6, #1
 8003298:	9001      	str	r0, [sp, #4]
          while (wait_loop_index != 0UL)
 800329a:	9901      	ldr	r1, [sp, #4]
 800329c:	2900      	cmp	r1, #0
 800329e:	f43f af60 	beq.w	8003162 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 80032a2:	9d01      	ldr	r5, [sp, #4]
 80032a4:	1e6c      	subs	r4, r5, #1
 80032a6:	9401      	str	r4, [sp, #4]
          while (wait_loop_index != 0UL)
 80032a8:	9a01      	ldr	r2, [sp, #4]
 80032aa:	2a00      	cmp	r2, #0
 80032ac:	f43f af59 	beq.w	8003162 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 80032b0:	9f01      	ldr	r7, [sp, #4]
 80032b2:	1e7e      	subs	r6, r7, #1
 80032b4:	9601      	str	r6, [sp, #4]
          while (wait_loop_index != 0UL)
 80032b6:	9801      	ldr	r0, [sp, #4]
 80032b8:	2800      	cmp	r0, #0
 80032ba:	f43f af52 	beq.w	8003162 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 80032be:	9901      	ldr	r1, [sp, #4]
 80032c0:	1e4d      	subs	r5, r1, #1
 80032c2:	9501      	str	r5, [sp, #4]
          while (wait_loop_index != 0UL)
 80032c4:	9c01      	ldr	r4, [sp, #4]
 80032c6:	2c00      	cmp	r4, #0
 80032c8:	d1c8      	bne.n	800325c <HAL_ADC_ConfigChannel+0x1c8>
 80032ca:	e74a      	b.n	8003162 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032cc:	2f00      	cmp	r7, #0
 80032ce:	d067      	beq.n	80033a0 <HAL_ADC_ConfigChannel+0x30c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	fa92 f6a2 	rbit	r6, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032d4:	2e00      	cmp	r6, #0
 80032d6:	f000 80c0 	beq.w	800345a <HAL_ADC_ConfigChannel+0x3c6>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80032da:	fab6 f786 	clz	r7, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032de:	3701      	adds	r7, #1
 80032e0:	f007 051f 	and.w	r5, r7, #31
 80032e4:	2d09      	cmp	r5, #9
 80032e6:	f240 80b8 	bls.w	800345a <HAL_ADC_ConfigChannel+0x3c6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80032ee:	2800      	cmp	r0, #0
 80032f0:	f000 8150 	beq.w	8003594 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 80032f4:	fab0 f680 	clz	r6, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032f8:	3601      	adds	r6, #1
 80032fa:	06b7      	lsls	r7, r6, #26
 80032fc:	f007 40f8 	and.w	r0, r7, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8003304:	2d00      	cmp	r5, #0
 8003306:	f000 814a 	beq.w	800359e <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 800330a:	fab5 f685 	clz	r6, r5
 800330e:	3601      	adds	r6, #1
 8003310:	f006 071f 	and.w	r7, r6, #31
 8003314:	2501      	movs	r5, #1
 8003316:	fa05 f607 	lsl.w	r6, r5, r7
 800331a:	4330      	orrs	r0, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003320:	2a00      	cmp	r2, #0
 8003322:	f000 813a 	beq.w	800359a <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8003326:	fab2 f782 	clz	r7, r2
 800332a:	1c7d      	adds	r5, r7, #1
 800332c:	f005 071f 	and.w	r7, r5, #31
 8003330:	f04f 0803 	mov.w	r8, #3
 8003334:	f06f 0c1d 	mvn.w	ip, #29
 8003338:	fb18 c607 	smlabb	r6, r8, r7, ip
 800333c:	0532      	lsls	r2, r6, #20
 800333e:	f042 7500 	orr.w	r5, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003342:	4305      	orrs	r5, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003344:	0de8      	lsrs	r0, r5, #23
  MODIFY_REG(*preg,
 8003346:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003348:	f000 0804 	and.w	r8, r0, #4
 800334c:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 8003350:	f3c5 5204 	ubfx	r2, r5, #20, #5
 8003354:	fa07 f502 	lsl.w	r5, r7, r2
 8003358:	f856 0008 	ldr.w	r0, [r6, r8]
 800335c:	2707      	movs	r7, #7
 800335e:	fa07 fc02 	lsl.w	ip, r7, r2
 8003362:	ea20 020c 	bic.w	r2, r0, ip
 8003366:	432a      	orrs	r2, r5
 8003368:	f846 2008 	str.w	r2, [r6, r8]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800336c:	680a      	ldr	r2, [r1, #0]
}
 800336e:	e6db      	b.n	8003128 <HAL_ADC_ConfigChannel+0x94>
  __HAL_LOCK(hadc);
 8003370:	2002      	movs	r0, #2
}
 8003372:	b002      	add	sp, #8
 8003374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003378:	01f9      	lsls	r1, r7, #7
 800337a:	f53f aef2 	bmi.w	8003162 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800337e:	4819      	ldr	r0, [pc, #100]	@ (80033e4 <HAL_ADC_ConfigChannel+0x350>)
 8003380:	4284      	cmp	r4, r0
 8003382:	d004      	beq.n	800338e <HAL_ADC_ConfigChannel+0x2fa>
 8003384:	f500 7100 	add.w	r1, r0, #512	@ 0x200
 8003388:	428c      	cmp	r4, r1
 800338a:	f47f aeea 	bne.w	8003162 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800338e:	4d11      	ldr	r5, [pc, #68]	@ (80033d4 <HAL_ADC_ConfigChannel+0x340>)
 8003390:	68aa      	ldr	r2, [r5, #8]
 8003392:	f022 74e0 	bic.w	r4, r2, #29360128	@ 0x1c00000
 8003396:	4334      	orrs	r4, r6
 8003398:	f044 7780 	orr.w	r7, r4, #16777216	@ 0x1000000
 800339c:	60af      	str	r7, [r5, #8]
}
 800339e:	e6e0      	b.n	8003162 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033a0:	0e90      	lsrs	r0, r2, #26
 80033a2:	3001      	adds	r0, #1
 80033a4:	f000 051f 	and.w	r5, r0, #31
 80033a8:	0682      	lsls	r2, r0, #26
 80033aa:	2001      	movs	r0, #1
 80033ac:	f002 47f8 	and.w	r7, r2, #2080374784	@ 0x7c000000
 80033b0:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b2:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033b4:	ea40 0007 	orr.w	r0, r0, r7
 80033b8:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033bc:	d972      	bls.n	80034a4 <HAL_ADC_ConfigChannel+0x410>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033be:	3e1e      	subs	r6, #30
 80033c0:	0535      	lsls	r5, r6, #20
 80033c2:	f045 7500 	orr.w	r5, r5, #33554432	@ 0x2000000
 80033c6:	e7bc      	b.n	8003342 <HAL_ADC_ConfigChannel+0x2ae>
 80033c8:	0007ffff 	.word	0x0007ffff
 80033cc:	407f0000 	.word	0x407f0000
 80033d0:	80080000 	.word	0x80080000
 80033d4:	50040300 	.word	0x50040300
 80033d8:	c7520000 	.word	0xc7520000
 80033dc:	cb840000 	.word	0xcb840000
 80033e0:	80000001 	.word	0x80000001
 80033e4:	50040000 	.word	0x50040000
 80033e8:	03fff000 	.word	0x03fff000
 80033ec:	0800a2c0 	.word	0x0800a2c0
 80033f0:	20000400 	.word	0x20000400
 80033f4:	053e2d63 	.word	0x053e2d63
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033f8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80033fa:	6e25      	ldr	r5, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033fc:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003400:	f3c5 6784 	ubfx	r7, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003404:	2800      	cmp	r0, #0
 8003406:	d14f      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x414>
 8003408:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800340c:	4297      	cmp	r7, r2
 800340e:	f000 8091 	beq.w	8003534 <HAL_ADC_ConfigChannel+0x4a0>
 8003412:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003414:	6e65      	ldr	r5, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003416:	f3c5 6884 	ubfx	r8, r5, #26, #5
 800341a:	4590      	cmp	r8, r2
 800341c:	d075      	beq.n	800350a <HAL_ADC_ConfigChannel+0x476>
 800341e:	68b0      	ldr	r0, [r6, #8]
 8003420:	68b7      	ldr	r7, [r6, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003422:	f3c7 6084 	ubfx	r0, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003426:	f106 0708 	add.w	r7, r6, #8
 800342a:	4290      	cmp	r0, r2
 800342c:	f000 8094 	beq.w	8003558 <HAL_ADC_ConfigChannel+0x4c4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003430:	68f0      	ldr	r0, [r6, #12]
 8003432:	68f0      	ldr	r0, [r6, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003434:	f106 050c 	add.w	r5, r6, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003438:	f3c0 6784 	ubfx	r7, r0, #26, #5
 800343c:	42ba      	cmp	r2, r7
 800343e:	f000 80a0 	beq.w	8003582 <HAL_ADC_ConfigChannel+0x4ee>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003442:	4662      	mov	r2, ip
 8003444:	e65a      	b.n	80030fc <HAL_ADC_ConfigChannel+0x68>
  MODIFY_REG(*preg,
 8003446:	f858 000c 	ldr.w	r0, [r8, ip]
 800344a:	4002      	ands	r2, r0
 800344c:	f848 200c 	str.w	r2, [r8, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003450:	6962      	ldr	r2, [r4, #20]
 8003452:	f042 4700 	orr.w	r7, r2, #2147483648	@ 0x80000000
 8003456:	6167      	str	r7, [r4, #20]
}
 8003458:	e6ae      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x124>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800345e:	2800      	cmp	r0, #0
 8003460:	f000 80a1 	beq.w	80035a6 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8003464:	fab0 f780 	clz	r7, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003468:	3701      	adds	r7, #1
 800346a:	06be      	lsls	r6, r7, #26
 800346c:	f006 40f8 	and.w	r0, r6, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8003474:	2d00      	cmp	r5, #0
 8003476:	f000 8094 	beq.w	80035a2 <HAL_ADC_ConfigChannel+0x50e>
  return __builtin_clz(value);
 800347a:	fab5 f785 	clz	r7, r5
 800347e:	3701      	adds	r7, #1
 8003480:	f007 081f 	and.w	r8, r7, #31
 8003484:	f04f 0c01 	mov.w	ip, #1
 8003488:	fa0c f608 	lsl.w	r6, ip, r8
 800348c:	4330      	orrs	r0, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003492:	2a00      	cmp	r2, #0
 8003494:	d07b      	beq.n	800358e <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 8003496:	fab2 f582 	clz	r5, r2
 800349a:	3501      	adds	r5, #1
 800349c:	f005 071f 	and.w	r7, r5, #31
 80034a0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80034a4:	0535      	lsls	r5, r6, #20
 80034a6:	e74c      	b.n	8003342 <HAL_ADC_ConfigChannel+0x2ae>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80034ac:	b11d      	cbz	r5, 80034b6 <HAL_ADC_ConfigChannel+0x422>
  return __builtin_clz(value);
 80034ae:	fab5 f085 	clz	r0, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034b2:	4287      	cmp	r7, r0
 80034b4:	d03e      	beq.n	8003534 <HAL_ADC_ConfigChannel+0x4a0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034b6:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80034b8:	6e67      	ldr	r7, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034ba:	f3c7 6884 	ubfx	r8, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	fa9c f0ac 	rbit	r0, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034c2:	f106 0708 	add.w	r7, r6, #8
 80034c6:	46be      	mov	lr, r7
  if (value == 0U)
 80034c8:	b118      	cbz	r0, 80034d2 <HAL_ADC_ConfigChannel+0x43e>
  return __builtin_clz(value);
 80034ca:	fab0 f580 	clz	r5, r0
 80034ce:	4545      	cmp	r5, r8
 80034d0:	d01d      	beq.n	800350e <HAL_ADC_ConfigChannel+0x47a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034d2:	68b0      	ldr	r0, [r6, #8]
 80034d4:	68b0      	ldr	r0, [r6, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034d6:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034de:	f106 050c 	add.w	r5, r6, #12
 80034e2:	46a8      	mov	r8, r5
  if (value == 0U)
 80034e4:	f1be 0f00 	cmp.w	lr, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_ADC_ConfigChannel+0x45e>
  return __builtin_clz(value);
 80034ea:	fabe fe8e 	clz	lr, lr
 80034ee:	4586      	cmp	lr, r0
 80034f0:	d034      	beq.n	800355c <HAL_ADC_ConfigChannel+0x4c8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034f2:	68f0      	ldr	r0, [r6, #12]
 80034f4:	68f6      	ldr	r6, [r6, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034f6:	f3c6 6784 	ubfx	r7, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 80034fe:	2e00      	cmp	r6, #0
 8003500:	f43f adfc 	beq.w	80030fc <HAL_ADC_ConfigChannel+0x68>
  return __builtin_clz(value);
 8003504:	fab6 f286 	clz	r2, r6
 8003508:	e798      	b.n	800343c <HAL_ADC_ConfigChannel+0x3a8>
 800350a:	f106 0e08 	add.w	lr, r6, #8
  MODIFY_REG(*preg,
 800350e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003510:	f022 4500 	bic.w	r5, r2, #2147483648	@ 0x80000000
 8003514:	6665      	str	r5, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003516:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800351a:	68b2      	ldr	r2, [r6, #8]
 800351c:	68b0      	ldr	r0, [r6, #8]
 800351e:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003522:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003524:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003528:	4662      	mov	r2, ip
 800352a:	2d00      	cmp	r5, #0
 800352c:	d1d5      	bne.n	80034da <HAL_ADC_ConfigChannel+0x446>
 800352e:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8003532:	e77a      	b.n	800342a <HAL_ADC_ConfigChannel+0x396>
  MODIFY_REG(*preg,
 8003534:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003536:	f020 4700 	bic.w	r7, r0, #2147483648	@ 0x80000000
 800353a:	6627      	str	r7, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800353c:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003540:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003542:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003544:	f3cc 0512 	ubfx	r5, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003548:	f3c2 6884 	ubfx	r8, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800354c:	4662      	mov	r2, ip
 800354e:	2d00      	cmp	r5, #0
 8003550:	d1b5      	bne.n	80034be <HAL_ADC_ConfigChannel+0x42a>
 8003552:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8003556:	e760      	b.n	800341a <HAL_ADC_ConfigChannel+0x386>
 8003558:	f106 080c 	add.w	r8, r6, #12
  MODIFY_REG(*preg,
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 8003562:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003564:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003568:	68f2      	ldr	r2, [r6, #12]
 800356a:	68f6      	ldr	r6, [r6, #12]
 800356c:	f3cc 0012 	ubfx	r0, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003570:	4645      	mov	r5, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003572:	f3c6 6784 	ubfx	r7, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003576:	4662      	mov	r2, ip
 8003578:	2800      	cmp	r0, #0
 800357a:	d1be      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x466>
 800357c:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8003580:	e75c      	b.n	800343c <HAL_ADC_ConfigChannel+0x3a8>
  MODIFY_REG(*preg,
 8003582:	682f      	ldr	r7, [r5, #0]
 8003584:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8003588:	602a      	str	r2, [r5, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800358a:	680a      	ldr	r2, [r1, #0]
}
 800358c:	e5b6      	b.n	80030fc <HAL_ADC_ConfigChannel+0x68>
 800358e:	f44f 1540 	mov.w	r5, #3145728	@ 0x300000
 8003592:	e6d6      	b.n	8003342 <HAL_ADC_ConfigChannel+0x2ae>
 8003594:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003598:	e6b2      	b.n	8003300 <HAL_ADC_ConfigChannel+0x26c>
 800359a:	4d04      	ldr	r5, [pc, #16]	@ (80035ac <HAL_ADC_ConfigChannel+0x518>)
 800359c:	e6d1      	b.n	8003342 <HAL_ADC_ConfigChannel+0x2ae>
 800359e:	2602      	movs	r6, #2
 80035a0:	e6bb      	b.n	800331a <HAL_ADC_ConfigChannel+0x286>
 80035a2:	2602      	movs	r6, #2
 80035a4:	e772      	b.n	800348c <HAL_ADC_ConfigChannel+0x3f8>
 80035a6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80035aa:	e761      	b.n	8003470 <HAL_ADC_ConfigChannel+0x3dc>
 80035ac:	fe500000 	.word	0xfe500000

080035b0 <ADC_Enable>:
{
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80035b4:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035b6:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 80035b8:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ba:	6899      	ldr	r1, [r3, #8]
 80035bc:	07ca      	lsls	r2, r1, #31
 80035be:	d464      	bmi.n	800368a <ADC_Enable+0xda>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035c0:	4d39      	ldr	r5, [pc, #228]	@ (80036a8 <ADC_Enable+0xf8>)
 80035c2:	4604      	mov	r4, r0
 80035c4:	6898      	ldr	r0, [r3, #8]
 80035c6:	4228      	tst	r0, r5
 80035c8:	d162      	bne.n	8003690 <ADC_Enable+0xe0>
  MODIFY_REG(ADCx->CR,
 80035ca:	689e      	ldr	r6, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035cc:	4937      	ldr	r1, [pc, #220]	@ (80036ac <ADC_Enable+0xfc>)
  MODIFY_REG(ADCx->CR,
 80035ce:	f026 4c00 	bic.w	ip, r6, #2147483648	@ 0x80000000
 80035d2:	f02c 0e3f 	bic.w	lr, ip, #63	@ 0x3f
 80035d6:	f04e 0201 	orr.w	r2, lr, #1
 80035da:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035dc:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	d537      	bpl.n	8003652 <ADC_Enable+0xa2>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035e2:	4833      	ldr	r0, [pc, #204]	@ (80036b0 <ADC_Enable+0x100>)
 80035e4:	4d33      	ldr	r5, [pc, #204]	@ (80036b4 <ADC_Enable+0x104>)
 80035e6:	6806      	ldr	r6, [r0, #0]
 80035e8:	09b1      	lsrs	r1, r6, #6
 80035ea:	fba5 2301 	umull	r2, r3, r5, r1
 80035ee:	099a      	lsrs	r2, r3, #6
 80035f0:	3201      	adds	r2, #1
 80035f2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 80035f6:	0085      	lsls	r5, r0, #2
 80035f8:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 80035fa:	9e01      	ldr	r6, [sp, #4]
 80035fc:	2e00      	cmp	r6, #0
 80035fe:	d028      	beq.n	8003652 <ADC_Enable+0xa2>
        wait_loop_index--;
 8003600:	9901      	ldr	r1, [sp, #4]
 8003602:	1e4b      	subs	r3, r1, #1
 8003604:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003606:	9a01      	ldr	r2, [sp, #4]
 8003608:	b31a      	cbz	r2, 8003652 <ADC_Enable+0xa2>
        wait_loop_index--;
 800360a:	9801      	ldr	r0, [sp, #4]
 800360c:	1e45      	subs	r5, r0, #1
 800360e:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 8003610:	9e01      	ldr	r6, [sp, #4]
 8003612:	b1f6      	cbz	r6, 8003652 <ADC_Enable+0xa2>
        wait_loop_index--;
 8003614:	9901      	ldr	r1, [sp, #4]
 8003616:	1e4b      	subs	r3, r1, #1
 8003618:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800361a:	9a01      	ldr	r2, [sp, #4]
 800361c:	b1ca      	cbz	r2, 8003652 <ADC_Enable+0xa2>
        wait_loop_index--;
 800361e:	9801      	ldr	r0, [sp, #4]
 8003620:	1e45      	subs	r5, r0, #1
 8003622:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 8003624:	9e01      	ldr	r6, [sp, #4]
 8003626:	b1a6      	cbz	r6, 8003652 <ADC_Enable+0xa2>
        wait_loop_index--;
 8003628:	9901      	ldr	r1, [sp, #4]
 800362a:	1e4b      	subs	r3, r1, #1
 800362c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800362e:	9a01      	ldr	r2, [sp, #4]
 8003630:	b17a      	cbz	r2, 8003652 <ADC_Enable+0xa2>
        wait_loop_index--;
 8003632:	9801      	ldr	r0, [sp, #4]
 8003634:	1e45      	subs	r5, r0, #1
 8003636:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 8003638:	9e01      	ldr	r6, [sp, #4]
 800363a:	b156      	cbz	r6, 8003652 <ADC_Enable+0xa2>
        wait_loop_index--;
 800363c:	9901      	ldr	r1, [sp, #4]
 800363e:	1e4b      	subs	r3, r1, #1
 8003640:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003642:	9a01      	ldr	r2, [sp, #4]
 8003644:	b12a      	cbz	r2, 8003652 <ADC_Enable+0xa2>
        wait_loop_index--;
 8003646:	9801      	ldr	r0, [sp, #4]
 8003648:	1e45      	subs	r5, r0, #1
 800364a:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 800364c:	9e01      	ldr	r6, [sp, #4]
 800364e:	2e00      	cmp	r6, #0
 8003650:	d1d6      	bne.n	8003600 <ADC_Enable+0x50>
    tickstart = HAL_GetTick();
 8003652:	f7ff fb91 	bl	8002d78 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	07ce      	lsls	r6, r1, #31
    tickstart = HAL_GetTick();
 800365c:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800365e:	d414      	bmi.n	800368a <ADC_Enable+0xda>
  MODIFY_REG(ADCx->CR,
 8003660:	4e15      	ldr	r6, [pc, #84]	@ (80036b8 <ADC_Enable+0x108>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	07d0      	lsls	r0, r2, #31
 8003666:	d404      	bmi.n	8003672 <ADC_Enable+0xc2>
  MODIFY_REG(ADCx->CR,
 8003668:	6898      	ldr	r0, [r3, #8]
 800366a:	4030      	ands	r0, r6
 800366c:	f040 0101 	orr.w	r1, r0, #1
 8003670:	6099      	str	r1, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003672:	f7ff fb81 	bl	8002d78 <HAL_GetTick>
 8003676:	1b43      	subs	r3, r0, r5
 8003678:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800367a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800367c:	d902      	bls.n	8003684 <ADC_Enable+0xd4>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	07d1      	lsls	r1, r2, #31
 8003682:	d505      	bpl.n	8003690 <ADC_Enable+0xe0>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	07c2      	lsls	r2, r0, #31
 8003688:	d5eb      	bpl.n	8003662 <ADC_Enable+0xb2>
  return HAL_OK;
 800368a:	2000      	movs	r0, #0
}
 800368c:	b002      	add	sp, #8
 800368e:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003690:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003692:	f045 0610 	orr.w	r6, r5, #16
 8003696:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003698:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800369a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369c:	f041 0301 	orr.w	r3, r1, #1
 80036a0:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 80036a2:	b002      	add	sp, #8
 80036a4:	bd70      	pop	{r4, r5, r6, pc}
 80036a6:	bf00      	nop
 80036a8:	8000003f 	.word	0x8000003f
 80036ac:	50040300 	.word	0x50040300
 80036b0:	20000400 	.word	0x20000400
 80036b4:	053e2d63 	.word	0x053e2d63
 80036b8:	7fffffc0 	.word	0x7fffffc0

080036bc <HAL_ADC_Start_IT>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036bc:	4a4d      	ldr	r2, [pc, #308]	@ (80037f4 <HAL_ADC_Start_IT+0x138>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036be:	6803      	ldr	r3, [r0, #0]
{
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036c4:	689d      	ldr	r5, [r3, #8]
 80036c6:	f015 0504 	ands.w	r5, r5, #4
 80036ca:	d15d      	bne.n	8003788 <HAL_ADC_Start_IT+0xcc>
    __HAL_LOCK(hadc);
 80036cc:	f890 1054 	ldrb.w	r1, [r0, #84]	@ 0x54
 80036d0:	2901      	cmp	r1, #1
 80036d2:	4604      	mov	r4, r0
 80036d4:	d058      	beq.n	8003788 <HAL_ADC_Start_IT+0xcc>
 80036d6:	2201      	movs	r2, #1
 80036d8:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80036dc:	f7ff ff68 	bl	80035b0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d153      	bne.n	800378c <HAL_ADC_Start_IT+0xd0>
      ADC_STATE_CLR_SET(hadc->State,
 80036e4:	6da5      	ldr	r5, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036e6:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80036e8:	f425 6170 	bic.w	r1, r5, #3840	@ 0xf00
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036ec:	4d42      	ldr	r5, [pc, #264]	@ (80037f8 <HAL_ADC_Start_IT+0x13c>)
      ADC_STATE_CLR_SET(hadc->State,
 80036ee:	f021 0c01 	bic.w	ip, r1, #1
 80036f2:	f44c 7280 	orr.w	r2, ip, #256	@ 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036f6:	42ab      	cmp	r3, r5
      ADC_STATE_CLR_SET(hadc->State,
 80036f8:	65a2      	str	r2, [r4, #88]	@ 0x58
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036fa:	f006 061f 	and.w	r6, r6, #31
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036fe:	d048      	beq.n	8003792 <HAL_ADC_Start_IT+0xd6>
 8003700:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003702:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003704:	f422 1580 	bic.w	r5, r2, #1048576	@ 0x100000
 8003708:	65a5      	str	r5, [r4, #88]	@ 0x58
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800370a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800370c:	f412 5580 	ands.w	r5, r2, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003710:	bf1c      	itt	ne
 8003712:	6de5      	ldrne	r5, [r4, #92]	@ 0x5c
 8003714:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8003718:	65e5      	str	r5, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800371a:	221c      	movs	r2, #28
      __HAL_UNLOCK(hadc);
 800371c:	2500      	movs	r5, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800371e:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8003720:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	f022 051c 	bic.w	r5, r2, #28
 800372a:	605d      	str	r5, [r3, #4]
      switch (hadc->Init.EOCSelection)
 800372c:	6965      	ldr	r5, [r4, #20]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800372e:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8003730:	2d08      	cmp	r5, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003732:	bf0c      	ite	eq
 8003734:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003738:	f042 0204 	orrne.w	r2, r2, #4
 800373c:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800373e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003740:	b91a      	cbnz	r2, 800374a <HAL_ADC_Start_IT+0x8e>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	f042 0210 	orr.w	r2, r2, #16
 8003748:	605a      	str	r2, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800374a:	428b      	cmp	r3, r1
 800374c:	d025      	beq.n	800379a <HAL_ADC_Start_IT+0xde>
 800374e:	f240 2221 	movw	r2, #545	@ 0x221
 8003752:	40f2      	lsrs	r2, r6
 8003754:	07d6      	lsls	r6, r2, #31
 8003756:	d420      	bmi.n	800379a <HAL_ADC_Start_IT+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003758:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 800375a:	f446 1280 	orr.w	r2, r6, #1048576	@ 0x100000
 800375e:	65a2      	str	r2, [r4, #88]	@ 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003760:	68c9      	ldr	r1, [r1, #12]
 8003762:	018a      	lsls	r2, r1, #6
 8003764:	d50f      	bpl.n	8003786 <HAL_ADC_Start_IT+0xca>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003766:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8003768:	f426 5e40 	bic.w	lr, r6, #12288	@ 0x3000
 800376c:	f44e 5280 	orr.w	r2, lr, #4096	@ 0x1000
 8003770:	65a2      	str	r2, [r4, #88]	@ 0x58
          switch (hadc->Init.EOCSelection)
 8003772:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003774:	685c      	ldr	r4, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8003776:	d034      	beq.n	80037e2 <HAL_ADC_Start_IT+0x126>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003778:	f024 0240 	bic.w	r2, r4, #64	@ 0x40
 800377c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800377e:	685c      	ldr	r4, [r3, #4]
 8003780:	f044 0520 	orr.w	r5, r4, #32
 8003784:	605d      	str	r5, [r3, #4]
}
 8003786:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8003788:	2002      	movs	r0, #2
}
 800378a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 800378c:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8003790:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003792:	491a      	ldr	r1, [pc, #104]	@ (80037fc <HAL_ADC_Start_IT+0x140>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003794:	2e00      	cmp	r6, #0
 8003796:	d1b8      	bne.n	800370a <HAL_ADC_Start_IT+0x4e>
 8003798:	e7b3      	b.n	8003702 <HAL_ADC_Start_IT+0x46>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800379a:	68d9      	ldr	r1, [r3, #12]
 800379c:	0189      	lsls	r1, r1, #6
 800379e:	d50f      	bpl.n	80037c0 <HAL_ADC_Start_IT+0x104>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037a0:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 80037a2:	f426 5c40 	bic.w	ip, r6, #12288	@ 0x3000
 80037a6:	f44c 5280 	orr.w	r2, ip, #4096	@ 0x1000
 80037aa:	65a2      	str	r2, [r4, #88]	@ 0x58
          switch (hadc->Init.EOCSelection)
 80037ac:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80037ae:	685c      	ldr	r4, [r3, #4]
          switch (hadc->Init.EOCSelection)
 80037b0:	d00f      	beq.n	80037d2 <HAL_ADC_Start_IT+0x116>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80037b2:	f024 0240 	bic.w	r2, r4, #64	@ 0x40
 80037b6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80037b8:	685c      	ldr	r4, [r3, #4]
 80037ba:	f044 0520 	orr.w	r5, r4, #32
 80037be:	605d      	str	r5, [r3, #4]
  MODIFY_REG(ADCx->CR,
 80037c0:	6899      	ldr	r1, [r3, #8]
 80037c2:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80037c6:	f026 0e3f 	bic.w	lr, r6, #63	@ 0x3f
 80037ca:	f04e 0204 	orr.w	r2, lr, #4
 80037ce:	609a      	str	r2, [r3, #8]
}
 80037d0:	bd70      	pop	{r4, r5, r6, pc}
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037d2:	f024 0520 	bic.w	r5, r4, #32
 80037d6:	605d      	str	r5, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	f041 0640 	orr.w	r6, r1, #64	@ 0x40
 80037de:	605e      	str	r6, [r3, #4]
              break;
 80037e0:	e7ee      	b.n	80037c0 <HAL_ADC_Start_IT+0x104>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037e2:	f024 0520 	bic.w	r5, r4, #32
 80037e6:	605d      	str	r5, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	f041 0640 	orr.w	r6, r1, #64	@ 0x40
 80037ee:	605e      	str	r6, [r3, #4]
}
 80037f0:	bd70      	pop	{r4, r5, r6, pc}
 80037f2:	bf00      	nop
 80037f4:	50040300 	.word	0x50040300
 80037f8:	50040100 	.word	0x50040100
 80037fc:	50040000 	.word	0x50040000

08003800 <HAL_ADC_Start_DMA>:
{
 8003800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003804:	4b37      	ldr	r3, [pc, #220]	@ (80038e4 <HAL_ADC_Start_DMA+0xe4>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003806:	6806      	ldr	r6, [r0, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
{
 800380a:	460d      	mov	r5, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800380c:	68b1      	ldr	r1, [r6, #8]
 800380e:	0749      	lsls	r1, r1, #29
 8003810:	d418      	bmi.n	8003844 <HAL_ADC_Start_DMA+0x44>
 8003812:	4617      	mov	r7, r2
    __HAL_LOCK(hadc);
 8003814:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8003818:	2a01      	cmp	r2, #1
 800381a:	4604      	mov	r4, r0
 800381c:	d012      	beq.n	8003844 <HAL_ADC_Start_DMA+0x44>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800381e:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003822:	4b31      	ldr	r3, [pc, #196]	@ (80038e8 <HAL_ADC_Start_DMA+0xe8>)
    __HAL_LOCK(hadc);
 8003824:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003826:	429e      	cmp	r6, r3
    __HAL_LOCK(hadc);
 8003828:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800382c:	d00d      	beq.n	800384a <HAL_ADC_Start_DMA+0x4a>
 800382e:	f240 2621 	movw	r6, #545	@ 0x221
 8003832:	fa26 fc08 	lsr.w	ip, r6, r8
 8003836:	ea1c 0100 	ands.w	r1, ip, r0
 800383a:	d106      	bne.n	800384a <HAL_ADC_Start_DMA+0x4a>
      __HAL_UNLOCK(hadc);
 800383c:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
}
 8003840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8003844:	2002      	movs	r0, #2
}
 8003846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800384a:	4620      	mov	r0, r4
 800384c:	f7ff feb0 	bl	80035b0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003850:	2800      	cmp	r0, #0
 8003852:	d13d      	bne.n	80038d0 <HAL_ADC_Start_DMA+0xd0>
        ADC_STATE_CLR_SET(hadc->State,
 8003854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003856:	6821      	ldr	r1, [r4, #0]
 8003858:	4e24      	ldr	r6, [pc, #144]	@ (80038ec <HAL_ADC_Start_DMA+0xec>)
        ADC_STATE_CLR_SET(hadc->State,
 800385a:	f420 6270 	bic.w	r2, r0, #3840	@ 0xf00
 800385e:	f022 0e01 	bic.w	lr, r2, #1
 8003862:	f44e 7380 	orr.w	r3, lr, #256	@ 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003866:	42b1      	cmp	r1, r6
        ADC_STATE_CLR_SET(hadc->State,
 8003868:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800386a:	d036      	beq.n	80038da <HAL_ADC_Start_DMA+0xda>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800386c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800386e:	f420 1280 	bic.w	r2, r0, #1048576	@ 0x100000
 8003872:	65a2      	str	r2, [r4, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003874:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003876:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003878:	f413 5680 	ands.w	r6, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800387c:	bf18      	it	ne
 800387e:	6de6      	ldrne	r6, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003880:	463b      	mov	r3, r7
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003882:	bf18      	it	ne
 8003884:	f026 0606 	bicne.w	r6, r6, #6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003888:	4f19      	ldr	r7, [pc, #100]	@ (80038f0 <HAL_ADC_Start_DMA+0xf0>)
          ADC_CLEAR_ERRORCODE(hadc);
 800388a:	65e6      	str	r6, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800388c:	462a      	mov	r2, r5
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800388e:	62c7      	str	r7, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003890:	4d18      	ldr	r5, [pc, #96]	@ (80038f4 <HAL_ADC_Start_DMA+0xf4>)
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003892:	4e19      	ldr	r6, [pc, #100]	@ (80038f8 <HAL_ADC_Start_DMA+0xf8>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003894:	6305      	str	r5, [r0, #48]	@ 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003896:	271c      	movs	r7, #28
        __HAL_UNLOCK(hadc);
 8003898:	f04f 0800 	mov.w	r8, #0
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800389c:	6346      	str	r6, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800389e:	600f      	str	r7, [r1, #0]
        __HAL_UNLOCK(hadc);
 80038a0:	f884 8054 	strb.w	r8, [r4, #84]	@ 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038a4:	684d      	ldr	r5, [r1, #4]
 80038a6:	f045 0610 	orr.w	r6, r5, #16
 80038aa:	604e      	str	r6, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80038ac:	68cf      	ldr	r7, [r1, #12]
 80038ae:	f047 0501 	orr.w	r5, r7, #1
 80038b2:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038b4:	3140      	adds	r1, #64	@ 0x40
 80038b6:	f000 fcdb 	bl	8004270 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80038ba:	6824      	ldr	r4, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80038bc:	68a1      	ldr	r1, [r4, #8]
 80038be:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80038c2:	f022 033f 	bic.w	r3, r2, #63	@ 0x3f
 80038c6:	f043 0604 	orr.w	r6, r3, #4
 80038ca:	60a6      	str	r6, [r4, #8]
}
 80038cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80038d0:	2500      	movs	r5, #0
 80038d2:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 80038d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038da:	f1b8 0f00 	cmp.w	r8, #0
 80038de:	d1c9      	bne.n	8003874 <HAL_ADC_Start_DMA+0x74>
 80038e0:	e7c4      	b.n	800386c <HAL_ADC_Start_DMA+0x6c>
 80038e2:	bf00      	nop
 80038e4:	50040300 	.word	0x50040300
 80038e8:	50040200 	.word	0x50040200
 80038ec:	50040100 	.word	0x50040100
 80038f0:	0800300d 	.word	0x0800300d
 80038f4:	08002ffd 	.word	0x08002ffd
 80038f8:	08003079 	.word	0x08003079

080038fc <ADC_Disable>:
{
 80038fc:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038fe:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	0795      	lsls	r5, r2, #30
 8003904:	d502      	bpl.n	800390c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003906:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003908:	2000      	movs	r0, #0
}
 800390a:	bd38      	pop	{r3, r4, r5, pc}
 800390c:	6899      	ldr	r1, [r3, #8]
 800390e:	07cc      	lsls	r4, r1, #31
 8003910:	d5fa      	bpl.n	8003908 <ADC_Disable+0xc>
 8003912:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003914:	6898      	ldr	r0, [r3, #8]
 8003916:	f000 050d 	and.w	r5, r0, #13
 800391a:	2d01      	cmp	r5, #1
 800391c:	d009      	beq.n	8003932 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391e:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003920:	f045 0010 	orr.w	r0, r5, #16
 8003924:	65a0      	str	r0, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003926:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003928:	f043 0201 	orr.w	r2, r3, #1
 800392c:	65e2      	str	r2, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800392e:	2001      	movs	r0, #1
}
 8003930:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 8003938:	f020 053f 	bic.w	r5, r0, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800393c:	2103      	movs	r1, #3
 800393e:	f045 0202 	orr.w	r2, r5, #2
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003946:	f7ff fa17 	bl	8002d78 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	6899      	ldr	r1, [r3, #8]
 800394e:	07c9      	lsls	r1, r1, #31
    tickstart = HAL_GetTick();
 8003950:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003952:	d403      	bmi.n	800395c <ADC_Disable+0x60>
 8003954:	e7d8      	b.n	8003908 <ADC_Disable+0xc>
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	07cb      	lsls	r3, r1, #31
 800395a:	d5d5      	bpl.n	8003908 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800395c:	f7ff fa0c 	bl	8002d78 <HAL_GetTick>
 8003960:	1b40      	subs	r0, r0, r5
 8003962:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003964:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003966:	d9f6      	bls.n	8003956 <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	07d2      	lsls	r2, r2, #31
 800396c:	d5f3      	bpl.n	8003956 <ADC_Disable+0x5a>
 800396e:	e7d6      	b.n	800391e <ADC_Disable+0x22>

08003970 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003970:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003972:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 8003976:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003978:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800397a:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 800397c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800397e:	d040      	beq.n	8003a02 <HAL_ADCEx_Calibration_Start+0x92>
 8003980:	460d      	mov	r5, r1
 8003982:	2101      	movs	r1, #1
 8003984:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003988:	4604      	mov	r4, r0
 800398a:	f7ff ffb7 	bl	80038fc <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800398e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 8003990:	b9e0      	cbnz	r0, 80039cc <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 8003992:	f423 5188 	bic.w	r1, r3, #4352	@ 0x1100
 8003996:	f021 0c02 	bic.w	ip, r1, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800399a:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800399c:	f04c 0302 	orr.w	r3, ip, #2
 80039a0:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 80039a2:	6891      	ldr	r1, [r2, #8]
 80039a4:	f021 4e40 	bic.w	lr, r1, #3221225472	@ 0xc0000000
 80039a8:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 80039ac:	f02e 033f 	bic.w	r3, lr, #63	@ 0x3f
 80039b0:	432b      	orrs	r3, r5
 80039b2:	f043 4500 	orr.w	r5, r3, #2147483648	@ 0x80000000
 80039b6:	6095      	str	r5, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80039b8:	6891      	ldr	r1, [r2, #8]
 80039ba:	2900      	cmp	r1, #0
 80039bc:	db0e      	blt.n	80039dc <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039be:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80039c0:	f022 0c03 	bic.w	ip, r2, #3
 80039c4:	f04c 0301 	orr.w	r3, ip, #1
 80039c8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80039ca:	e002      	b.n	80039d2 <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039cc:	f043 0210 	orr.w	r2, r3, #16
 80039d0:	65a2      	str	r2, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039d2:	2500      	movs	r5, #0
 80039d4:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 80039d8:	b003      	add	sp, #12
 80039da:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 80039dc:	9901      	ldr	r1, [sp, #4]
 80039de:	3101      	adds	r1, #1
 80039e0:	9101      	str	r1, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80039e2:	9b01      	ldr	r3, [sp, #4]
 80039e4:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80039e8:	d3e6      	bcc.n	80039b8 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80039ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ec:	f020 0212 	bic.w	r2, r0, #18
        __HAL_UNLOCK(hadc);
 80039f0:	f04f 0e00 	mov.w	lr, #0
        ADC_STATE_CLR_SET(hadc->State,
 80039f4:	f042 0510 	orr.w	r5, r2, #16
 80039f8:	65a5      	str	r5, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 80039fa:	f884 e054 	strb.w	lr, [r4, #84]	@ 0x54
        return HAL_ERROR;
 80039fe:	2001      	movs	r0, #1
 8003a00:	e7ea      	b.n	80039d8 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8003a02:	2002      	movs	r0, #2
}
 8003a04:	b003      	add	sp, #12
 8003a06:	bd30      	pop	{r4, r5, pc}

08003a08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a08:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a0a:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a0e:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8003a10:	2a01      	cmp	r2, #1
{
 8003a12:	b09a      	sub	sp, #104	@ 0x68
  __HAL_LOCK(hadc);
 8003a14:	d044      	beq.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003a16:	4603      	mov	r3, r0

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a18:	4d2e      	ldr	r5, [pc, #184]	@ (8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8003a1a:	681c      	ldr	r4, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a1c:	2700      	movs	r7, #0
  __HAL_LOCK(hadc);
 8003a1e:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a20:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a22:	9716      	str	r7, [sp, #88]	@ 0x58
  __HAL_LOCK(hadc);
 8003a24:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003a28:	9717      	str	r7, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a2a:	d008      	beq.n	8003a3e <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a2c:	6d99      	ldr	r1, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a2e:	f883 7054 	strb.w	r7, [r3, #84]	@ 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a32:	f041 0220 	orr.w	r2, r1, #32
 8003a36:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003a38:	b01a      	add	sp, #104	@ 0x68
 8003a3a:	bcf0      	pop	{r4, r5, r6, r7}
 8003a3c:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a3e:	4a26      	ldr	r2, [pc, #152]	@ (8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8003a40:	6890      	ldr	r0, [r2, #8]
 8003a42:	0740      	lsls	r0, r0, #29
 8003a44:	d50b      	bpl.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003a46:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a48:	6d9f      	ldr	r7, [r3, #88]	@ 0x58
 8003a4a:	f047 0520 	orr.w	r5, r7, #32
    tmp_hal_status = HAL_ERROR;
 8003a4e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a50:	659d      	str	r5, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003a52:	2400      	movs	r4, #0
 8003a54:	f883 4054 	strb.w	r4, [r3, #84]	@ 0x54
}
 8003a58:	b01a      	add	sp, #104	@ 0x68
 8003a5a:	bcf0      	pop	{r4, r5, r6, r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	68a7      	ldr	r7, [r4, #8]
 8003a60:	077f      	lsls	r7, r7, #29
 8003a62:	d4f1      	bmi.n	8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a64:	b306      	cbz	r6, 8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a66:	4f1d      	ldr	r7, [pc, #116]	@ (8003adc <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8003a68:	684d      	ldr	r5, [r1, #4]
 8003a6a:	68b8      	ldr	r0, [r7, #8]
 8003a6c:	f893 c030 	ldrb.w	ip, [r3, #48]	@ 0x30
 8003a70:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8003a74:	4328      	orrs	r0, r5
 8003a76:	ea40 354c 	orr.w	r5, r0, ip, lsl #13
 8003a7a:	60bd      	str	r5, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a7c:	4818      	ldr	r0, [pc, #96]	@ (8003ae0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003a7e:	68a4      	ldr	r4, [r4, #8]
 8003a80:	6892      	ldr	r2, [r2, #8]
 8003a82:	6885      	ldr	r5, [r0, #8]
 8003a84:	4322      	orrs	r2, r4
 8003a86:	432a      	orrs	r2, r5
 8003a88:	07d5      	lsls	r5, r2, #31
 8003a8a:	d420      	bmi.n	8003ace <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        MODIFY_REG(tmpADC_Common->CCR,
 8003a8c:	68bc      	ldr	r4, [r7, #8]
 8003a8e:	688a      	ldr	r2, [r1, #8]
 8003a90:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 8003a94:	4332      	orrs	r2, r6
 8003a96:	f021 060f 	bic.w	r6, r1, #15
 8003a9a:	4332      	orrs	r2, r6
 8003a9c:	60ba      	str	r2, [r7, #8]
 8003a9e:	e016      	b.n	8003ace <HAL_ADCEx_MultiModeConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8003aa0:	2002      	movs	r0, #2
}
 8003aa2:	b01a      	add	sp, #104	@ 0x68
 8003aa4:	bcf0      	pop	{r4, r5, r6, r7}
 8003aa6:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003aa8:	4e0c      	ldr	r6, [pc, #48]	@ (8003adc <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8003aaa:	480d      	ldr	r0, [pc, #52]	@ (8003ae0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003aac:	68b5      	ldr	r5, [r6, #8]
 8003aae:	f425 4160 	bic.w	r1, r5, #57344	@ 0xe000
 8003ab2:	60b1      	str	r1, [r6, #8]
 8003ab4:	68a4      	ldr	r4, [r4, #8]
 8003ab6:	6892      	ldr	r2, [r2, #8]
 8003ab8:	6887      	ldr	r7, [r0, #8]
 8003aba:	4322      	orrs	r2, r4
 8003abc:	433a      	orrs	r2, r7
 8003abe:	07d4      	lsls	r4, r2, #31
 8003ac0:	d405      	bmi.n	8003ace <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ac2:	68b5      	ldr	r5, [r6, #8]
 8003ac4:	f425 6171 	bic.w	r1, r5, #3856	@ 0xf10
 8003ac8:	f021 000f 	bic.w	r0, r1, #15
 8003acc:	60b0      	str	r0, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ace:	2000      	movs	r0, #0
 8003ad0:	e7bf      	b.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003ad2:	bf00      	nop
 8003ad4:	50040000 	.word	0x50040000
 8003ad8:	50040100 	.word	0x50040100
 8003adc:	50040300 	.word	0x50040300
 8003ae0:	50040200 	.word	0x50040200

08003ae4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae4:	4907      	ldr	r1, [pc, #28]	@ (8003b04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003ae6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aea:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
 8003aee:	4002      	ands	r2, r0
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af6:	f043 62bf 	orr.w	r2, r3, #100139008	@ 0x5f80000
 8003afa:	f442 3000 	orr.w	r0, r2, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003afe:	60c8      	str	r0, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b08:	4b1b      	ldr	r3, [pc, #108]	@ (8003b78 <HAL_NVIC_SetPriority+0x70>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b10:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b12:	f1c3 0e07 	rsb	lr, r3, #7
 8003b16:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b1a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b1e:	bf28      	it	cs
 8003b20:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b24:	f1bc 0f06 	cmp.w	ip, #6
 8003b28:	d91c      	bls.n	8003b64 <HAL_NVIC_SetPriority+0x5c>
 8003b2a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b32:	fa03 f30c 	lsl.w	r3, r3, ip
 8003b36:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	fa03 f30e 	lsl.w	r3, r3, lr
 8003b42:	ea21 0103 	bic.w	r1, r1, r3
 8003b46:	fa01 f30c 	lsl.w	r3, r1, ip
 8003b4a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4c:	011a      	lsls	r2, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8003b4e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b50:	b2d1      	uxtb	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003b52:	db0a      	blt.n	8003b6a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b54:	f100 4c60 	add.w	ip, r0, #3758096384	@ 0xe0000000
 8003b58:	f50c 4261 	add.w	r2, ip, #57600	@ 0xe100
 8003b5c:	f882 1300 	strb.w	r1, [r2, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003b60:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b64:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b66:	4694      	mov	ip, r2
 8003b68:	e7e7      	b.n	8003b3a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6a:	4b04      	ldr	r3, [pc, #16]	@ (8003b7c <HAL_NVIC_SetPriority+0x74>)
 8003b6c:	f000 000f 	and.w	r0, r0, #15
 8003b70:	4403      	add	r3, r0
 8003b72:	7619      	strb	r1, [r3, #24]
 8003b74:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b78:	e000ed00 	.word	0xe000ed00
 8003b7c:	e000ecfc 	.word	0xe000ecfc

08003b80 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003b80:	2800      	cmp	r0, #0
 8003b82:	db07      	blt.n	8003b94 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b84:	4a04      	ldr	r2, [pc, #16]	@ (8003b98 <HAL_NVIC_EnableIRQ+0x18>)
 8003b86:	0941      	lsrs	r1, r0, #5
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f000 001f 	and.w	r0, r0, #31
 8003b8e:	4083      	lsls	r3, r0
 8003b90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	e000e100 	.word	0xe000e100

08003b9c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b9c:	3801      	subs	r0, #1
 8003b9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003ba2:	d301      	bcc.n	8003ba8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ba4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003ba6:	4770      	bx	lr
{
 8003ba8:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003baa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bae:	4c07      	ldr	r4, [pc, #28]	@ (8003bcc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bb0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb2:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003bb6:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bba:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bbc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bbe:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc0:	619a      	str	r2, [r3, #24]
}
 8003bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bc6:	6119      	str	r1, [r3, #16]
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <CRYP_SetKey>:
  */
static HAL_StatusTypeDef  CRYP_SetKey(CRYP_HandleTypeDef *hcryp)
{
  uint32_t keyaddr;

  if (hcryp->Init.pKey == NULL)
 8003bd0:	6a03      	ldr	r3, [r0, #32]
 8003bd2:	b32b      	cbz	r3, 8003c20 <CRYP_SetKey+0x50>
{
 8003bd4:	b410      	push	{r4}
  }


  keyaddr = (uint32_t)(hcryp->Init.pKey);

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003bd6:	68c4      	ldr	r4, [r0, #12]
  {
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8003bd8:	6802      	ldr	r2, [r0, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003bda:	f5b4 2f80 	cmp.w	r4, #262144	@ 0x40000
  keyaddr = (uint32_t)(hcryp->Init.pKey);
 8003bde:	4619      	mov	r1, r3
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003be0:	d10e      	bne.n	8003c00 <CRYP_SetKey+0x30>
  return __builtin_bswap32(value);
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	ba04      	rev	r4, r0
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8003be6:	63d4      	str	r4, [r2, #60]	@ 0x3c
 8003be8:	6858      	ldr	r0, [r3, #4]
 8003bea:	ba04      	rev	r4, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR6 = __REV(*(uint32_t*)(keyaddr));
 8003bec:	6394      	str	r4, [r2, #56]	@ 0x38
 8003bee:	6898      	ldr	r0, [r3, #8]
 8003bf0:	ba04      	rev	r4, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR5 = __REV(*(uint32_t*)(keyaddr));
 8003bf2:	6354      	str	r4, [r2, #52]	@ 0x34
 8003bf4:	68d8      	ldr	r0, [r3, #12]
    keyaddr+=4U;
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4U;
 8003bf6:	f103 0110 	add.w	r1, r3, #16
 8003bfa:	ba04      	rev	r4, r0
  }

  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 8003bfc:	460b      	mov	r3, r1
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
 8003bfe:	6314      	str	r4, [r2, #48]	@ 0x30
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	ba1c      	rev	r4, r3
  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 8003c04:	61d4      	str	r4, [r2, #28]
 8003c06:	684b      	ldr	r3, [r1, #4]
 8003c08:	ba1c      	rev	r4, r3
  keyaddr+=4U;
  hcryp->Instance->KEYR2 = __REV(*(uint32_t*)(keyaddr));
 8003c0a:	6194      	str	r4, [r2, #24]
 8003c0c:	688b      	ldr	r3, [r1, #8]
 8003c0e:	ba1c      	rev	r4, r3
  keyaddr+=4U;
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
 8003c10:	6154      	str	r4, [r2, #20]
 8003c12:	68c9      	ldr	r1, [r1, #12]
  keyaddr+=4U;
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));

  return HAL_OK;
}
 8003c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c18:	ba0b      	rev	r3, r1
  return HAL_OK;
 8003c1a:	2000      	movs	r0, #0
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));
 8003c1c:	6113      	str	r3, [r2, #16]
}
 8003c1e:	4770      	bx	lr
    return HAL_ERROR;
 8003c20:	2001      	movs	r0, #1
}
 8003c22:	4770      	bx	lr

08003c24 <HAL_CRYP_Init>:
  if(hcryp == NULL)
 8003c24:	2800      	cmp	r0, #0
 8003c26:	f000 80a4 	beq.w	8003d72 <HAL_CRYP_Init+0x14e>
  if (hcryp->Init.OperatingMode != CRYP_ALGOMODE_KEYDERIVATION)
 8003c2a:	6902      	ldr	r2, [r0, #16]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003c2c:	2a18      	cmp	r2, #24
{
 8003c2e:	b570      	push	{r4, r5, r6, lr}
 8003c30:	4604      	mov	r4, r0
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003c32:	d04d      	beq.n	8003cd0 <HAL_CRYP_Init+0xac>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003c34:	2a08      	cmp	r2, #8
 8003c36:	d03e      	beq.n	8003cb6 <HAL_CRYP_Init+0x92>
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8003c38:	f894 0055 	ldrb.w	r0, [r4, #85]	@ 0x55
 8003c3c:	f000 05ff 	and.w	r5, r0, #255	@ 0xff
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d03e      	beq.n	8003cc2 <HAL_CRYP_Init+0x9e>
  __HAL_CRYP_DISABLE(hcryp);
 8003c44:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003c46:	68e1      	ldr	r1, [r4, #12]
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003c48:	2602      	movs	r6, #2
 8003c4a:	f884 6055 	strb.w	r6, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003c4e:	682b      	ldr	r3, [r5, #0]
 8003c50:	f023 0001 	bic.w	r0, r3, #1
 8003c54:	6028      	str	r0, [r5, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003c56:	682e      	ldr	r6, [r5, #0]
 8003c58:	f426 2380 	bic.w	r3, r6, #262144	@ 0x40000
 8003c5c:	430b      	orrs	r3, r1
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003c5e:	f04f 0c0a 	mov.w	ip, #10
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003c62:	2a08      	cmp	r2, #8
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003c64:	602b      	str	r3, [r5, #0]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003c66:	f884 c048 	strb.w	ip, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003c6a:	d066      	beq.n	8003d3a <HAL_CRYP_Init+0x116>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003c6c:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8003c70:	2e60      	cmp	r6, #96	@ 0x60
 8003c72:	d033      	beq.n	8003cdc <HAL_CRYP_Init+0xb8>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003c74:	6829      	ldr	r1, [r5, #0]
 8003c76:	f421 3380 	bic.w	r3, r1, #65536	@ 0x10000
 8003c7a:	f023 017e 	bic.w	r1, r3, #126	@ 0x7e
 8003c7e:	68a3      	ldr	r3, [r4, #8]
 8003c80:	4333      	orrs	r3, r6
 8003c82:	430b      	orrs	r3, r1
 8003c84:	4313      	orrs	r3, r2
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003c86:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003c8a:	602b      	str	r3, [r5, #0]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003c8c:	d061      	beq.n	8003d52 <HAL_CRYP_Init+0x12e>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d04d      	beq.n	8003d2e <HAL_CRYP_Init+0x10a>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8003c92:	2e00      	cmp	r6, #0
 8003c94:	d13b      	bne.n	8003d0e <HAL_CRYP_Init+0xea>
  hcryp->CrypInCount = 0;
 8003c96:	2200      	movs	r2, #0
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003c9e:	2000      	movs	r0, #0
  hcryp->State = HAL_CRYP_STATE_READY;
 8003ca0:	2101      	movs	r1, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003ca2:	65a0      	str	r0, [r4, #88]	@ 0x58
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003ca4:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hcryp->State = HAL_CRYP_STATE_READY;
 8003ca8:	f884 1055 	strb.w	r1, [r4, #85]	@ 0x55
  __HAL_CRYP_ENABLE(hcryp);
 8003cac:	682c      	ldr	r4, [r5, #0]
 8003cae:	f044 0301 	orr.w	r3, r4, #1
 8003cb2:	602b      	str	r3, [r5, #0]
}
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003cb6:	6943      	ldr	r3, [r0, #20]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cbc:	d1bc      	bne.n	8003c38 <HAL_CRYP_Init+0x14>
    return HAL_ERROR;
 8003cbe:	2001      	movs	r0, #1
}
 8003cc0:	bd70      	pop	{r4, r5, r6, pc}
    hcryp->Lock = HAL_UNLOCKED;
 8003cc2:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
    HAL_CRYP_MspInit(hcryp);
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f7fc fe4c 	bl	8000964 <HAL_CRYP_MspInit>
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003ccc:	6922      	ldr	r2, [r4, #16]
 8003cce:	e7b9      	b.n	8003c44 <HAL_CRYP_Init+0x20>
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
 8003cd0:	6943      	ldr	r3, [r0, #20]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003cd2:	f023 0120 	bic.w	r1, r3, #32
 8003cd6:	2940      	cmp	r1, #64	@ 0x40
 8003cd8:	d1ee      	bne.n	8003cb8 <HAL_CRYP_Init+0x94>
 8003cda:	e7f0      	b.n	8003cbe <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003cdc:	682e      	ldr	r6, [r5, #0]
 8003cde:	f426 3180 	bic.w	r1, r6, #65536	@ 0x10000
 8003ce2:	f021 037e 	bic.w	r3, r1, #126	@ 0x7e
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8003cec:	602a      	str	r2, [r5, #0]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003cee:	682e      	ldr	r6, [r5, #0]
 8003cf0:	69e1      	ldr	r1, [r4, #28]
 8003cf2:	f426 43c0 	bic.w	r3, r6, #24576	@ 0x6000
 8003cf6:	430b      	orrs	r3, r1
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003cf8:	f04f 0c03 	mov.w	ip, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003cfc:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003cfe:	f884 c048 	strb.w	ip, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003d02:	b920      	cbnz	r0, 8003d0e <HAL_CRYP_Init+0xea>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003d04:	4620      	mov	r0, r4
 8003d06:	f7ff ff63 	bl	8003bd0 <CRYP_SetKey>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d1d7      	bne.n	8003cbe <HAL_CRYP_Init+0x9a>
    hcryp->Instance->IVR0 = 0;
  }
  else
#endif
  {
    if (hcryp->Init.pInitVect == NULL)
 8003d0e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d0d4      	beq.n	8003cbe <HAL_CRYP_Init+0x9a>
 8003d14:	6802      	ldr	r2, [r0, #0]
 8003d16:	ba16      	rev	r6, r2
      return HAL_ERROR;
    }

    ivaddr = (uint32_t)(hcryp->Init.pInitVect);

    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 8003d18:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8003d1a:	6841      	ldr	r1, [r0, #4]
 8003d1c:	ba0b      	rev	r3, r1
    ivaddr+=4U;
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 8003d1e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003d20:	6882      	ldr	r2, [r0, #8]
 8003d22:	ba16      	rev	r6, r2
    ivaddr+=4U;
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 8003d24:	626e      	str	r6, [r5, #36]	@ 0x24
 8003d26:	68c0      	ldr	r0, [r0, #12]
 8003d28:	ba01      	rev	r1, r0
    ivaddr+=4U;
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 8003d2a:	6229      	str	r1, [r5, #32]
 8003d2c:	e7b3      	b.n	8003c96 <HAL_CRYP_Init+0x72>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f7ff ff4e 	bl	8003bd0 <CRYP_SetKey>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d0ac      	beq.n	8003c92 <HAL_CRYP_Init+0x6e>
 8003d38:	e7c1      	b.n	8003cbe <HAL_CRYP_Init+0x9a>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003d3a:	682b      	ldr	r3, [r5, #0]
 8003d3c:	f023 0218 	bic.w	r2, r3, #24
 8003d40:	f042 0608 	orr.w	r6, r2, #8
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8003d44:	4620      	mov	r0, r4
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003d46:	602e      	str	r6, [r5, #0]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8003d48:	f7ff ff42 	bl	8003bd0 <CRYP_SetKey>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d0a2      	beq.n	8003c96 <HAL_CRYP_Init+0x72>
 8003d50:	e7b5      	b.n	8003cbe <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003d52:	682e      	ldr	r6, [r5, #0]
 8003d54:	69e2      	ldr	r2, [r4, #28]
 8003d56:	f426 41c0 	bic.w	r1, r6, #24576	@ 0x6000
 8003d5a:	4311      	orrs	r1, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003d5c:	2303      	movs	r3, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003d5e:	6029      	str	r1, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003d60:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003d64:	b138      	cbz	r0, 8003d76 <HAL_CRYP_Init+0x152>
    hcryp->Instance->IVR3 = 0;
 8003d66:	2000      	movs	r0, #0
 8003d68:	62e8      	str	r0, [r5, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 8003d6a:	62a8      	str	r0, [r5, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 8003d6c:	6268      	str	r0, [r5, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 8003d6e:	6228      	str	r0, [r5, #32]
 8003d70:	e791      	b.n	8003c96 <HAL_CRYP_Init+0x72>
    return HAL_ERROR;
 8003d72:	2001      	movs	r0, #1
}
 8003d74:	4770      	bx	lr
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7ff ff2a 	bl	8003bd0 <CRYP_SetKey>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d19e      	bne.n	8003cbe <HAL_CRYP_Init+0x9a>
 8003d80:	e7f1      	b.n	8003d66 <HAL_CRYP_Init+0x142>
 8003d82:	bf00      	nop
 8003d84:	0000      	movs	r0, r0
	...

08003d88 <HAL_CRYP_AESCBC_Encrypt>:
{
 8003d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  if(hcryp == NULL)
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d073      	beq.n	8003e7e <HAL_CRYP_AESCBC_Encrypt+0xf6>
  hcryp->CrypInCount = 0;
 8003d96:	ed9f 7b7a 	vldr	d7, [pc, #488]	@ 8003f80 <HAL_CRYP_AESCBC_Encrypt+0x1f8>
 8003d9a:	ed80 7b10 	vstr	d7, [r0, #64]	@ 0x40
 8003d9e:	4616      	mov	r6, r2
 8003da0:	461f      	mov	r7, r3
  __HAL_CRYP_DISABLE(hcryp);
 8003da2:	6802      	ldr	r2, [r0, #0]
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 8003da4:	2301      	movs	r3, #1
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003da6:	f04f 0902 	mov.w	r9, #2
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 8003daa:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003dae:	f880 9055 	strb.w	r9, [r0, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003db2:	460d      	mov	r5, r1
 8003db4:	6811      	ldr	r1, [r2, #0]
 8003db6:	f021 0301 	bic.w	r3, r1, #1
 8003dba:	4604      	mov	r4, r0
 8003dbc:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 8003dbe:	f7fc fde9 	bl	8000994 <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8003dc2:	2000      	movs	r0, #0
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 8003dc4:	ed9f 0b70 	vldr	d0, [pc, #448]	@ 8003f88 <HAL_CRYP_AESCBC_Encrypt+0x200>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8003dc8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8003dcc:	f894 2055 	ldrb.w	r2, [r4, #85]	@ 0x55
  __HAL_UNLOCK(hcryp);
 8003dd0:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 8003dd4:	ed84 0b04 	vstr	d0, [r4, #16]
  hcryp->Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8003dd8:	61a0      	str	r0, [r4, #24]
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8003dda:	2a00      	cmp	r2, #0
 8003ddc:	d053      	beq.n	8003e86 <HAL_CRYP_AESCBC_Encrypt+0xfe>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003dde:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003de2:	f8d4 9000 	ldr.w	r9, [r4]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003de6:	68e1      	ldr	r1, [r4, #12]
  __HAL_CRYP_DISABLE(hcryp);
 8003de8:	f8d9 3000 	ldr.w	r3, [r9]
 8003dec:	f023 0201 	bic.w	r2, r3, #1
 8003df0:	f8c9 2000 	str.w	r2, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003df4:	f8d9 3000 	ldr.w	r3, [r9]
 8003df8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003dfc:	430a      	orrs	r2, r1
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003dfe:	210a      	movs	r1, #10
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003e00:	f8c9 2000 	str.w	r2, [r9]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003e04:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003e08:	e9d4 2c05 	ldrd	r2, ip, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8003e0c:	2a60      	cmp	r2, #96	@ 0x60
 8003e0e:	d063      	beq.n	8003ed8 <HAL_CRYP_AESCBC_Encrypt+0x150>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003e10:	f8d9 3000 	ldr.w	r3, [r9]
 8003e14:	f423 3e80 	bic.w	lr, r3, #65536	@ 0x10000
 8003e18:	68a3      	ldr	r3, [r4, #8]
 8003e1a:	f02e 017e 	bic.w	r1, lr, #126	@ 0x7e
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	430b      	orrs	r3, r1
 8003e22:	4303      	orrs	r3, r0
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003e24:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003e28:	f8c9 3000 	str.w	r3, [r9]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003e2c:	f000 808e 	beq.w	8003f4c <HAL_CRYP_AESCBC_Encrypt+0x1c4>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003e30:	f1bc 0f00 	cmp.w	ip, #0
 8003e34:	f000 8082 	beq.w	8003f3c <HAL_CRYP_AESCBC_Encrypt+0x1b4>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8003e38:	2a00      	cmp	r2, #0
 8003e3a:	d16b      	bne.n	8003f14 <HAL_CRYP_AESCBC_Encrypt+0x18c>
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003e3c:	4632      	mov	r2, r6
 8003e3e:	4629      	mov	r1, r5
  hcryp->State = HAL_CRYP_STATE_READY;
 8003e40:	2601      	movs	r6, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003e42:	2500      	movs	r5, #0
 8003e44:	65a5      	str	r5, [r4, #88]	@ 0x58
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003e46:	463b      	mov	r3, r7
  hcryp->State = HAL_CRYP_STATE_READY;
 8003e48:	f884 6055 	strb.w	r6, [r4, #85]	@ 0x55
  hcryp->CrypInCount = 0;
 8003e4c:	2700      	movs	r7, #0
 8003e4e:	2600      	movs	r6, #0
 8003e50:	e9c4 6710 	strd	r6, r7, [r4, #64]	@ 0x40
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003e54:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003e58:	4620      	mov	r0, r4
  __HAL_CRYP_ENABLE(hcryp);
 8003e5a:	f8d9 4000 	ldr.w	r4, [r9]
 8003e5e:	f044 0701 	orr.w	r7, r4, #1
 8003e62:	f8c9 7000 	str.w	r7, [r9]
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003e66:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
}
 8003e6a:	b003      	add	sp, #12
 8003e6c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003e70:	f000 b88e 	b.w	8003f90 <HAL_CRYPEx_AES>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff feab 	bl	8003bd0 <CRYP_SetKey>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d074      	beq.n	8003f68 <HAL_CRYP_AESCBC_Encrypt+0x1e0>
}
 8003e7e:	2001      	movs	r0, #1
 8003e80:	b003      	add	sp, #12
 8003e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_CRYP_MspInit(hcryp);
 8003e86:	4620      	mov	r0, r4
 8003e88:	f7fc fd6c 	bl	8000964 <HAL_CRYP_MspInit>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003e8c:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003e90:	f8d4 9000 	ldr.w	r9, [r4]
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003e94:	6920      	ldr	r0, [r4, #16]
  __HAL_CRYP_DISABLE(hcryp);
 8003e96:	f8d9 3000 	ldr.w	r3, [r9]
 8003e9a:	f023 0201 	bic.w	r2, r3, #1
 8003e9e:	f8c9 2000 	str.w	r2, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003ea2:	f8d9 1000 	ldr.w	r1, [r9]
 8003ea6:	68e2      	ldr	r2, [r4, #12]
 8003ea8:	f421 2380 	bic.w	r3, r1, #262144	@ 0x40000
 8003eac:	4313      	orrs	r3, r2
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003eae:	210a      	movs	r1, #10
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003eb0:	2808      	cmp	r0, #8
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003eb2:	f8c9 3000 	str.w	r3, [r9]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003eb6:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003eba:	d1a5      	bne.n	8003e08 <HAL_CRYP_AESCBC_Encrypt+0x80>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003ebc:	f8d9 3000 	ldr.w	r3, [r9]
 8003ec0:	f023 0218 	bic.w	r2, r3, #24
 8003ec4:	f042 0008 	orr.w	r0, r2, #8
 8003ec8:	f8c9 0000 	str.w	r0, [r9]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7ff fe7f 	bl	8003bd0 <CRYP_SetKey>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d0b2      	beq.n	8003e3c <HAL_CRYP_AESCBC_Encrypt+0xb4>
 8003ed6:	e7d2      	b.n	8003e7e <HAL_CRYP_AESCBC_Encrypt+0xf6>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003ed8:	f8d9 1000 	ldr.w	r1, [r9]
 8003edc:	f421 3e80 	bic.w	lr, r1, #65536	@ 0x10000
 8003ee0:	f02e 037e 	bic.w	r3, lr, #126	@ 0x7e
 8003ee4:	4303      	orrs	r3, r0
 8003ee6:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8003eea:	f8c9 2000 	str.w	r2, [r9]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003eee:	f8d9 0000 	ldr.w	r0, [r9]
 8003ef2:	69e3      	ldr	r3, [r4, #28]
 8003ef4:	f420 41c0 	bic.w	r1, r0, #24576	@ 0x6000
 8003ef8:	4319      	orrs	r1, r3
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003efa:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003efc:	f8c9 1000 	str.w	r1, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003f00:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003f04:	f1bc 0f00 	cmp.w	ip, #0
 8003f08:	d104      	bne.n	8003f14 <HAL_CRYP_AESCBC_Encrypt+0x18c>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f7ff fe60 	bl	8003bd0 <CRYP_SetKey>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d1b4      	bne.n	8003e7e <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.pInitVect == NULL)
 8003f14:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d0b1      	beq.n	8003e7e <HAL_CRYP_AESCBC_Encrypt+0xf6>
 8003f1a:	6801      	ldr	r1, [r0, #0]
 8003f1c:	ba0b      	rev	r3, r1
    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 8003f1e:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
 8003f22:	6842      	ldr	r2, [r0, #4]
 8003f24:	ba11      	rev	r1, r2
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 8003f26:	f8c9 1028 	str.w	r1, [r9, #40]	@ 0x28
 8003f2a:	6883      	ldr	r3, [r0, #8]
 8003f2c:	ba1a      	rev	r2, r3
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 8003f2e:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
 8003f32:	68c0      	ldr	r0, [r0, #12]
 8003f34:	ba01      	rev	r1, r0
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 8003f36:	f8c9 1020 	str.w	r1, [r9, #32]
 8003f3a:	e77f      	b.n	8003e3c <HAL_CRYP_AESCBC_Encrypt+0xb4>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	9201      	str	r2, [sp, #4]
 8003f40:	f7ff fe46 	bl	8003bd0 <CRYP_SetKey>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d19a      	bne.n	8003e7e <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8003f48:	9a01      	ldr	r2, [sp, #4]
 8003f4a:	e775      	b.n	8003e38 <HAL_CRYP_AESCBC_Encrypt+0xb0>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003f4c:	f8d9 0000 	ldr.w	r0, [r9]
 8003f50:	69e3      	ldr	r3, [r4, #28]
 8003f52:	f420 41c0 	bic.w	r1, r0, #24576	@ 0x6000
 8003f56:	4319      	orrs	r1, r3
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003f58:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003f5a:	f8c9 1000 	str.w	r1, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003f5e:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003f62:	f1bc 0f00 	cmp.w	ip, #0
 8003f66:	d085      	beq.n	8003e74 <HAL_CRYP_AESCBC_Encrypt+0xec>
    hcryp->Instance->IVR3 = 0;
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 8003f6e:	f8c9 0028 	str.w	r0, [r9, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 8003f72:	f8c9 0024 	str.w	r0, [r9, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 8003f76:	f8c9 0020 	str.w	r0, [r9, #32]
 8003f7a:	e75f      	b.n	8003e3c <HAL_CRYP_AESCBC_Encrypt+0xb4>
 8003f7c:	f3af 8000 	nop.w
	...
 8003f8c:	00000020 	.word	0x00000020

08003f90 <HAL_CRYPEx_AES>:
  *                     case of key derivation only.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AES(CRYP_HandleTypeDef *hcryp, uint8_t *pInputData, uint16_t Size, uint8_t *pOutputData, uint32_t Timeout)
{
 8003f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f94:	461c      	mov	r4, r3

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003f96:	f890 3055 	ldrb.w	r3, [r0, #85]	@ 0x55
{
 8003f9a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	f040 80c7 	bne.w	8004132 <HAL_CRYPEx_AES+0x1a2>
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	b2d8      	uxtb	r0, r3
  {
    /* Check parameters setting */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003fa8:	6935      	ldr	r5, [r6, #16]
 8003faa:	2d08      	cmp	r5, #8
 8003fac:	d063      	beq.n	8004076 <HAL_CRYPEx_AES+0xe6>
        return  HAL_ERROR;
      }
    }
    else
    {
      if ((pInputData == NULL) || (pOutputData == NULL) || (Size == 0U))
 8003fae:	2900      	cmp	r1, #0
 8003fb0:	f000 80bd 	beq.w	800412e <HAL_CRYPEx_AES+0x19e>
 8003fb4:	2c00      	cmp	r4, #0
 8003fb6:	f000 80ba 	beq.w	800412e <HAL_CRYPEx_AES+0x19e>
 8003fba:	4617      	mov	r7, r2
 8003fbc:	2a00      	cmp	r2, #0
 8003fbe:	f000 80b6 	beq.w	800412e <HAL_CRYPEx_AES+0x19e>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(hcryp);
 8003fc2:	f896 2054 	ldrb.w	r2, [r6, #84]	@ 0x54
 8003fc6:	2a01      	cmp	r2, #1
 8003fc8:	f000 80b3 	beq.w	8004132 <HAL_CRYPEx_AES+0x1a2>
 8003fcc:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003fd0:	f101 0510 	add.w	r5, r1, #16
 8003fd4:	2002      	movs	r0, #2


  for(index=0U ; (index < Ilength); index += 16U)
  {
    /* Write the Input block in the Data Input register */
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003fd6:	6831      	ldr	r1, [r6, #0]
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003fd8:	f886 0055 	strb.w	r0, [r6, #85]	@ 0x55
  for(index=0U ; (index < Ilength); index += 16U)
 8003fdc:	3410      	adds	r4, #16
 8003fde:	f04f 0900 	mov.w	r9, #0
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003fe2:	f855 3c10 	ldr.w	r3, [r5, #-16]
 8003fe6:	608b      	str	r3, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003fe8:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8003fec:	608a      	str	r2, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 8003fee:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8003ff2:	6088      	str	r0, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003ff4:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8003ff8:	608b      	str	r3, [r1, #8]
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef const * const hcryp, uint32_t Timeout)
{
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003ffa:	f7fe febd 	bl	8002d78 <HAL_GetTick>
 8003ffe:	f1b8 3fff 	cmp.w	r8, #4294967295

  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004002:	6831      	ldr	r1, [r6, #0]
  tickstart = HAL_GetTick();
 8004004:	4682      	mov	sl, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004006:	f040 809e 	bne.w	8004146 <HAL_CRYPEx_AES+0x1b6>
 800400a:	6848      	ldr	r0, [r1, #4]
 800400c:	07c3      	lsls	r3, r0, #31
 800400e:	d414      	bmi.n	800403a <HAL_CRYPEx_AES+0xaa>
 8004010:	684b      	ldr	r3, [r1, #4]
 8004012:	07db      	lsls	r3, r3, #31
 8004014:	d411      	bmi.n	800403a <HAL_CRYPEx_AES+0xaa>
 8004016:	684a      	ldr	r2, [r1, #4]
 8004018:	07d0      	lsls	r0, r2, #31
 800401a:	d40e      	bmi.n	800403a <HAL_CRYPEx_AES+0xaa>
 800401c:	6848      	ldr	r0, [r1, #4]
 800401e:	07c2      	lsls	r2, r0, #31
 8004020:	d40b      	bmi.n	800403a <HAL_CRYPEx_AES+0xaa>
 8004022:	684b      	ldr	r3, [r1, #4]
 8004024:	07db      	lsls	r3, r3, #31
 8004026:	d408      	bmi.n	800403a <HAL_CRYPEx_AES+0xaa>
 8004028:	684a      	ldr	r2, [r1, #4]
 800402a:	07d0      	lsls	r0, r2, #31
 800402c:	d405      	bmi.n	800403a <HAL_CRYPEx_AES+0xaa>
 800402e:	6848      	ldr	r0, [r1, #4]
 8004030:	07c2      	lsls	r2, r0, #31
 8004032:	d402      	bmi.n	800403a <HAL_CRYPEx_AES+0xaa>
 8004034:	684b      	ldr	r3, [r1, #4]
 8004036:	07db      	lsls	r3, r3, #31
 8004038:	d5e7      	bpl.n	800400a <HAL_CRYPEx_AES+0x7a>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800403a:	6808      	ldr	r0, [r1, #0]
 800403c:	f040 0280 	orr.w	r2, r0, #128	@ 0x80
 8004040:	600a      	str	r2, [r1, #0]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8004042:	68cb      	ldr	r3, [r1, #12]
 8004044:	f844 3c10 	str.w	r3, [r4, #-16]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8004048:	68c8      	ldr	r0, [r1, #12]
 800404a:	f844 0c0c 	str.w	r0, [r4, #-12]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 800404e:	68ca      	ldr	r2, [r1, #12]
 8004050:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8004054:	68cb      	ldr	r3, [r1, #12]
 8004056:	f844 3c04 	str.w	r3, [r4, #-4]
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 800405a:	f896 005c 	ldrb.w	r0, [r6, #92]	@ 0x5c
 800405e:	2801      	cmp	r0, #1
 8004060:	f109 0c10 	add.w	ip, r9, #16
 8004064:	d07d      	beq.n	8004162 <HAL_CRYPEx_AES+0x1d2>
  for(index=0U ; (index < Ilength); index += 16U)
 8004066:	4567      	cmp	r7, ip
 8004068:	f105 0510 	add.w	r5, r5, #16
 800406c:	f104 0410 	add.w	r4, r4, #16
 8004070:	d951      	bls.n	8004116 <HAL_CRYPEx_AES+0x186>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8004072:	46e1      	mov	r9, ip
 8004074:	e7b5      	b.n	8003fe2 <HAL_CRYPEx_AES+0x52>
      if (pOutputData == NULL)
 8004076:	2c00      	cmp	r4, #0
 8004078:	d059      	beq.n	800412e <HAL_CRYPEx_AES+0x19e>
    __HAL_LOCK(hcryp);
 800407a:	f896 2054 	ldrb.w	r2, [r6, #84]	@ 0x54
 800407e:	2a01      	cmp	r2, #1
 8004080:	d057      	beq.n	8004132 <HAL_CRYPEx_AES+0x1a2>
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8004082:	f04f 0e02 	mov.w	lr, #2
    __HAL_LOCK(hcryp);
 8004086:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800408a:	f886 e055 	strb.w	lr, [r6, #85]	@ 0x55
  tickstart = HAL_GetTick();
 800408e:	f7fe fe73 	bl	8002d78 <HAL_GetTick>
 8004092:	f1b8 3fff 	cmp.w	r8, #4294967295
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004096:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 8004098:	4607      	mov	r7, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800409a:	d15e      	bne.n	800415a <HAL_CRYPEx_AES+0x1ca>
 800409c:	685d      	ldr	r5, [r3, #4]
 800409e:	07e9      	lsls	r1, r5, #31
 80040a0:	d414      	bmi.n	80040cc <HAL_CRYPEx_AES+0x13c>
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	07d1      	lsls	r1, r2, #31
 80040a6:	d411      	bmi.n	80040cc <HAL_CRYPEx_AES+0x13c>
 80040a8:	6858      	ldr	r0, [r3, #4]
 80040aa:	07c2      	lsls	r2, r0, #31
 80040ac:	d40e      	bmi.n	80040cc <HAL_CRYPEx_AES+0x13c>
 80040ae:	685f      	ldr	r7, [r3, #4]
 80040b0:	07ff      	lsls	r7, r7, #31
 80040b2:	d40b      	bmi.n	80040cc <HAL_CRYPEx_AES+0x13c>
 80040b4:	6859      	ldr	r1, [r3, #4]
 80040b6:	07cd      	lsls	r5, r1, #31
 80040b8:	d408      	bmi.n	80040cc <HAL_CRYPEx_AES+0x13c>
 80040ba:	685d      	ldr	r5, [r3, #4]
 80040bc:	07e8      	lsls	r0, r5, #31
 80040be:	d405      	bmi.n	80040cc <HAL_CRYPEx_AES+0x13c>
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	07d1      	lsls	r1, r2, #31
 80040c4:	d402      	bmi.n	80040cc <HAL_CRYPEx_AES+0x13c>
 80040c6:	6858      	ldr	r0, [r3, #4]
 80040c8:	07c2      	lsls	r2, r0, #31
 80040ca:	d5e7      	bpl.n	800409c <HAL_CRYPEx_AES+0x10c>
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80040cc:	681f      	ldr	r7, [r3, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80040ce:	68f1      	ldr	r1, [r6, #12]
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80040d0:	f047 0580 	orr.w	r5, r7, #128	@ 0x80
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80040d4:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80040d8:	601d      	str	r5, [r3, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80040da:	d110      	bne.n	80040fe <HAL_CRYPEx_AES+0x16e>
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 80040dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    outputaddr+=4U;
 80040de:	3410      	adds	r4, #16
 80040e0:	ba10      	rev	r0, r2
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 80040e2:	f844 0c10 	str.w	r0, [r4, #-16]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR6);
 80040e6:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 80040e8:	ba39      	rev	r1, r7
 80040ea:	f844 1c0c 	str.w	r1, [r4, #-12]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR5);
 80040ee:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 80040f0:	ba2a      	rev	r2, r5
 80040f2:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR4);
 80040f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80040f8:	ba07      	rev	r7, r0
 80040fa:	f844 7c04 	str.w	r7, [r4, #-4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR3);
 80040fe:	69d9      	ldr	r1, [r3, #28]
 8004100:	ba0d      	rev	r5, r1
 8004102:	6025      	str	r5, [r4, #0]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR2);
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	ba10      	rev	r0, r2
 8004108:	6060      	str	r0, [r4, #4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR1);
 800410a:	695f      	ldr	r7, [r3, #20]
 800410c:	ba39      	rev	r1, r7
 800410e:	60a1      	str	r1, [r4, #8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR0);
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	ba1d      	rev	r5, r3
 8004114:	60e5      	str	r5, [r4, #12]
    if (hcryp->State != HAL_CRYP_STATE_SUSPENDED)
 8004116:	f896 4055 	ldrb.w	r4, [r6, #85]	@ 0x55
 800411a:	2c05      	cmp	r4, #5
      hcryp->State = HAL_CRYP_STATE_READY;
 800411c:	bf18      	it	ne
 800411e:	2401      	movne	r4, #1
    __HAL_UNLOCK(hcryp);
 8004120:	f04f 0000 	mov.w	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 8004124:	bf18      	it	ne
 8004126:	f886 4055 	strbne.w	r4, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 800412a:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
}
 800412e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hcryp);
 8004132:	2002      	movs	r0, #2
}
 8004134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((HAL_GetTick() - tickstart ) > Timeout)
 8004138:	f7fe fe1e 	bl	8002d78 <HAL_GetTick>
 800413c:	eba0 010a 	sub.w	r1, r0, sl
 8004140:	4588      	cmp	r8, r1
 8004142:	d31e      	bcc.n	8004182 <HAL_CRYPEx_AES+0x1f2>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004144:	6831      	ldr	r1, [r6, #0]
 8004146:	684a      	ldr	r2, [r1, #4]
 8004148:	07d0      	lsls	r0, r2, #31
 800414a:	d5f5      	bpl.n	8004138 <HAL_CRYPEx_AES+0x1a8>
 800414c:	e775      	b.n	800403a <HAL_CRYPEx_AES+0xaa>
      if((HAL_GetTick() - tickstart ) > Timeout)
 800414e:	f7fe fe13 	bl	8002d78 <HAL_GetTick>
 8004152:	1bc3      	subs	r3, r0, r7
 8004154:	4598      	cmp	r8, r3
 8004156:	d314      	bcc.n	8004182 <HAL_CRYPEx_AES+0x1f2>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004158:	6833      	ldr	r3, [r6, #0]
 800415a:	6858      	ldr	r0, [r3, #4]
 800415c:	07c2      	lsls	r2, r0, #31
 800415e:	d5f6      	bpl.n	800414e <HAL_CRYPEx_AES+0x1be>
 8004160:	e7b4      	b.n	80040cc <HAL_CRYPEx_AES+0x13c>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8004162:	4567      	cmp	r7, ip
 8004164:	d9d7      	bls.n	8004116 <HAL_CRYPEx_AES+0x186>
      hcryp->pCrypOutBuffPtr =  (uint8_t *)outputaddr;
 8004166:	63f4      	str	r4, [r6, #60]	@ 0x3c
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8004168:	f1a7 0410 	sub.w	r4, r7, #16
 800416c:	eba4 0709 	sub.w	r7, r4, r9
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8004170:	2105      	movs	r1, #5
      hcryp->pCrypInBuffPtr  =  (uint8_t *)inputaddr;
 8004172:	63b5      	str	r5, [r6, #56]	@ 0x38
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8004174:	2500      	movs	r5, #0
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8004176:	6437      	str	r7, [r6, #64]	@ 0x40
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8004178:	f886 1055 	strb.w	r1, [r6, #85]	@ 0x55
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 800417c:	f886 505c 	strb.w	r5, [r6, #92]	@ 0x5c
      return HAL_OK;
 8004180:	e7c9      	b.n	8004116 <HAL_CRYPEx_AES+0x186>
    hcryp->State = HAL_CRYP_STATE_READY;
 8004182:	2401      	movs	r4, #1
    __HAL_UNLOCK(hcryp);
 8004184:	2100      	movs	r1, #0
    hcryp->State = HAL_CRYP_STATE_READY;
 8004186:	f886 4055 	strb.w	r4, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 800418a:	f886 1054 	strb.w	r1, [r6, #84]	@ 0x54
        return HAL_TIMEOUT;
 800418e:	2003      	movs	r0, #3
}
 8004190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004194 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004194:	2800      	cmp	r0, #0
 8004196:	d051      	beq.n	800423c <HAL_DMA_Init+0xa8>
{
 8004198:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800419a:	4a2f      	ldr	r2, [pc, #188]	@ (8004258 <HAL_DMA_Init+0xc4>)
 800419c:	6804      	ldr	r4, [r0, #0]
 800419e:	4294      	cmp	r4, r2
 80041a0:	4603      	mov	r3, r0
 80041a2:	d942      	bls.n	800422a <HAL_DMA_Init+0x96>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041a4:	492d      	ldr	r1, [pc, #180]	@ (800425c <HAL_DMA_Init+0xc8>)
 80041a6:	482e      	ldr	r0, [pc, #184]	@ (8004260 <HAL_DMA_Init+0xcc>)
 80041a8:	4421      	add	r1, r4
 80041aa:	fba0 2501 	umull	r2, r5, r0, r1
 80041ae:	092e      	lsrs	r6, r5, #4
    hdma->DmaBaseAddress = DMA2;
 80041b0:	4d2c      	ldr	r5, [pc, #176]	@ (8004264 <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041b2:	00b1      	lsls	r1, r6, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041b4:	2702      	movs	r7, #2
 80041b6:	f883 7025 	strb.w	r7, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041ba:	6822      	ldr	r2, [r4, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041bc:	691f      	ldr	r7, [r3, #16]
 80041be:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041c0:	f422 4cff 	bic.w	ip, r2, #32640	@ 0x7f80
  tmp |=  hdma->Init.Direction        |
 80041c4:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
 80041c8:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ca:	433a      	orrs	r2, r7
 80041cc:	695f      	ldr	r7, [r3, #20]
 80041ce:	6459      	str	r1, [r3, #68]	@ 0x44
 80041d0:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d2:	699f      	ldr	r7, [r3, #24]
 80041d4:	433a      	orrs	r2, r7
 80041d6:	69df      	ldr	r7, [r3, #28]
 80041d8:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80041da:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041dc:	f02c 0070 	bic.w	r0, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e0:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 80041e2:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80041e4:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 80041e8:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80041ea:	d015      	beq.n	8004218 <HAL_DMA_Init+0x84>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80041ec:	4f1e      	ldr	r7, [pc, #120]	@ (8004268 <HAL_DMA_Init+0xd4>)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041ee:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041f0:	f001 041c 	and.w	r4, r1, #28
 80041f4:	210f      	movs	r1, #15
 80041f6:	40a1      	lsls	r1, r4
    if (DMA1 == hdma->DmaBaseAddress)
 80041f8:	42bd      	cmp	r5, r7
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041fa:	ea6f 0601 	mvn.w	r6, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041fe:	fa00 f004 	lsl.w	r0, r0, r4
    if (DMA1 == hdma->DmaBaseAddress)
 8004202:	d01d      	beq.n	8004240 <HAL_DMA_Init+0xac>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004204:	f8d7 54a8 	ldr.w	r5, [r7, #1192]	@ 0x4a8
 8004208:	402e      	ands	r6, r5
 800420a:	f8c7 64a8 	str.w	r6, [r7, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800420e:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	@ 0x4a8
 8004212:	4302      	orrs	r2, r0
 8004214:	f8c7 24a8 	str.w	r2, [r7, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004218:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800421a:	2601      	movs	r6, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800421c:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800421e:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8004222:	f883 6025 	strb.w	r6, [r3, #37]	@ 0x25

  return HAL_OK;
}
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800422a:	4f10      	ldr	r7, [pc, #64]	@ (800426c <HAL_DMA_Init+0xd8>)
 800422c:	4a0c      	ldr	r2, [pc, #48]	@ (8004260 <HAL_DMA_Init+0xcc>)
    hdma->DmaBaseAddress = DMA1;
 800422e:	4d0e      	ldr	r5, [pc, #56]	@ (8004268 <HAL_DMA_Init+0xd4>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004230:	4427      	add	r7, r4
 8004232:	fba2 2007 	umull	r2, r0, r2, r7
 8004236:	0906      	lsrs	r6, r0, #4
 8004238:	00b1      	lsls	r1, r6, #2
    hdma->DmaBaseAddress = DMA1;
 800423a:	e7bb      	b.n	80041b4 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 800423c:	2001      	movs	r0, #1
}
 800423e:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004240:	f8d5 40a8 	ldr.w	r4, [r5, #168]	@ 0xa8
 8004244:	4026      	ands	r6, r4
 8004246:	f8c5 60a8 	str.w	r6, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800424a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800424e:	4301      	orrs	r1, r0
 8004250:	f8c5 10a8 	str.w	r1, [r5, #168]	@ 0xa8
 8004254:	e7e0      	b.n	8004218 <HAL_DMA_Init+0x84>
 8004256:	bf00      	nop
 8004258:	40020407 	.word	0x40020407
 800425c:	bffdfbf8 	.word	0xbffdfbf8
 8004260:	cccccccd 	.word	0xcccccccd
 8004264:	40020400 	.word	0x40020400
 8004268:	40020000 	.word	0x40020000
 800426c:	bffdfff8 	.word	0xbffdfff8

08004270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004270:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004272:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8004276:	2c01      	cmp	r4, #1
 8004278:	d00b      	beq.n	8004292 <HAL_DMA_Start_IT+0x22>

  if (HAL_DMA_STATE_READY == hdma->State)
 800427a:	f890 6025 	ldrb.w	r6, [r0, #37]	@ 0x25
  __HAL_LOCK(hdma);
 800427e:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8004280:	2e01      	cmp	r6, #1
  __HAL_LOCK(hdma);
 8004282:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8004286:	fa5f fc86 	uxtb.w	ip, r6
 800428a:	d005      	beq.n	8004298 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428c:	2300      	movs	r3, #0
 800428e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8004292:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8004294:	bc70      	pop	{r4, r5, r6}
 8004296:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004298:	2502      	movs	r5, #2
 800429a:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800429e:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 80042a0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a2:	2600      	movs	r6, #0
 80042a4:	63c6      	str	r6, [r0, #60]	@ 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042a6:	f005 061c 	and.w	r6, r5, #28
 80042aa:	fa0c f506 	lsl.w	r5, ip, r6
    __HAL_DMA_DISABLE(hdma);
 80042ae:	6826      	ldr	r6, [r4, #0]
 80042b0:	f026 0601 	bic.w	r6, r6, #1
 80042b4:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042b6:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 80042b8:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042ba:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042bc:	6883      	ldr	r3, [r0, #8]
    if (NULL != hdma->XferHalfCpltCallback)
 80042be:	6b00      	ldr	r0, [r0, #48]	@ 0x30
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042c0:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042c2:	bf0b      	itete	eq
 80042c4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80042c6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80042c8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80042ca:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80042cc:	b150      	cbz	r0, 80042e4 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	f043 000e 	orr.w	r0, r3, #14
 80042d4:	6020      	str	r0, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80042d6:	6821      	ldr	r1, [r4, #0]
 80042d8:	f041 0201 	orr.w	r2, r1, #1
  HAL_StatusTypeDef status = HAL_OK;
 80042dc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80042de:	6022      	str	r2, [r4, #0]
}
 80042e0:	bc70      	pop	{r4, r5, r6}
 80042e2:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042e4:	6821      	ldr	r1, [r4, #0]
 80042e6:	f021 0204 	bic.w	r2, r1, #4
 80042ea:	6022      	str	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042ec:	6825      	ldr	r5, [r4, #0]
 80042ee:	f045 060a 	orr.w	r6, r5, #10
 80042f2:	6026      	str	r6, [r4, #0]
 80042f4:	e7ef      	b.n	80042d6 <HAL_DMA_Start_IT+0x66>
 80042f6:	bf00      	nop

080042f8 <HAL_DMA_IRQHandler>:
{
 80042f8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042fa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042fc:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80042fe:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004300:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004302:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004304:	f003 031c 	and.w	r3, r3, #28
 8004308:	2204      	movs	r2, #4
 800430a:	409a      	lsls	r2, r3
 800430c:	420a      	tst	r2, r1
 800430e:	d00e      	beq.n	800432e <HAL_DMA_IRQHandler+0x36>
 8004310:	f014 0f04 	tst.w	r4, #4
 8004314:	d00b      	beq.n	800432e <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004316:	6829      	ldr	r1, [r5, #0]
 8004318:	068b      	lsls	r3, r1, #26
 800431a:	d403      	bmi.n	8004324 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	f023 0404 	bic.w	r4, r3, #4
 8004322:	602c      	str	r4, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8004324:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004326:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004328:	b1cb      	cbz	r3, 800435e <HAL_DMA_IRQHandler+0x66>
}
 800432a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800432c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800432e:	2202      	movs	r2, #2
 8004330:	409a      	lsls	r2, r3
 8004332:	420a      	tst	r2, r1
 8004334:	d015      	beq.n	8004362 <HAL_DMA_IRQHandler+0x6a>
 8004336:	f014 0f02 	tst.w	r4, #2
 800433a:	d012      	beq.n	8004362 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800433c:	682c      	ldr	r4, [r5, #0]
 800433e:	06a1      	lsls	r1, r4, #26
 8004340:	d406      	bmi.n	8004350 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	f023 010a 	bic.w	r1, r3, #10
 8004348:	6029      	str	r1, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800434a:	2501      	movs	r5, #1
 800434c:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8004350:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004352:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8004354:	2400      	movs	r4, #0
 8004356:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e5      	bne.n	800432a <HAL_DMA_IRQHandler+0x32>
}
 800435e:	bc70      	pop	{r4, r5, r6}
 8004360:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004362:	2208      	movs	r2, #8
 8004364:	409a      	lsls	r2, r3
 8004366:	420a      	tst	r2, r1
 8004368:	d0f9      	beq.n	800435e <HAL_DMA_IRQHandler+0x66>
 800436a:	0722      	lsls	r2, r4, #28
 800436c:	d5f7      	bpl.n	800435e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800436e:	6829      	ldr	r1, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8004370:	6b42      	ldr	r2, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004372:	f021 040e 	bic.w	r4, r1, #14
 8004376:	602c      	str	r4, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004378:	2501      	movs	r5, #1
 800437a:	fa05 f303 	lsl.w	r3, r5, r3
    __HAL_UNLOCK(hdma);
 800437e:	2100      	movs	r1, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004380:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004382:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004384:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8004388:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 800438c:	2a00      	cmp	r2, #0
 800438e:	d0e6      	beq.n	800435e <HAL_DMA_IRQHandler+0x66>
}
 8004390:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004392:	4710      	bx	r2

08004394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004398:	680c      	ldr	r4, [r1, #0]
{
 800439a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800439c:	2c00      	cmp	r4, #0
 800439e:	f000 8092 	beq.w	80044c6 <HAL_GPIO_Init+0x132>
  uint32_t position = 0x00u;
 80043a2:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043a4:	f04f 0b01 	mov.w	fp, #1
 80043a8:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 80043ac:	ea1e 0a04 	ands.w	sl, lr, r4
 80043b0:	f000 8084 	beq.w	80044bc <HAL_GPIO_Init+0x128>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043b4:	684d      	ldr	r5, [r1, #4]
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043b6:	2603      	movs	r6, #3
 80043b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043bc:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043c0:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043c4:	1e56      	subs	r6, r2, #1
 80043c6:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043c8:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043cc:	d97e      	bls.n	80044cc <HAL_GPIO_Init+0x138>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ce:	2a03      	cmp	r2, #3
 80043d0:	f040 80b9 	bne.w	8004546 <HAL_GPIO_Init+0x1b2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043d4:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 80043d8:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043dc:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043e0:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043e2:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80043e6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043e8:	d068      	beq.n	80044bc <HAL_GPIO_Init+0x128>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ea:	4e6f      	ldr	r6, [pc, #444]	@ (80045a8 <HAL_GPIO_Init+0x214>)
 80043ec:	6e32      	ldr	r2, [r6, #96]	@ 0x60
 80043ee:	f042 0701 	orr.w	r7, r2, #1
 80043f2:	6637      	str	r7, [r6, #96]	@ 0x60
 80043f4:	6e36      	ldr	r6, [r6, #96]	@ 0x60
 80043f6:	f023 0803 	bic.w	r8, r3, #3
 80043fa:	f006 0201 	and.w	r2, r6, #1
 80043fe:	9203      	str	r2, [sp, #12]
 8004400:	f108 4980 	add.w	r9, r8, #1073741824	@ 0x40000000
 8004404:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004406:	f509 3280 	add.w	r2, r9, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800440a:	f003 0703 	and.w	r7, r3, #3
 800440e:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8004412:	f04f 0e0f 	mov.w	lr, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8004416:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004418:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800441c:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004420:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004424:	d026      	beq.n	8004474 <HAL_GPIO_Init+0xe0>
 8004426:	4e61      	ldr	r6, [pc, #388]	@ (80045ac <HAL_GPIO_Init+0x218>)
 8004428:	42b0      	cmp	r0, r6
 800442a:	f000 809e 	beq.w	800456a <HAL_GPIO_Init+0x1d6>
 800442e:	4e60      	ldr	r6, [pc, #384]	@ (80045b0 <HAL_GPIO_Init+0x21c>)
 8004430:	42b0      	cmp	r0, r6
 8004432:	f000 80a0 	beq.w	8004576 <HAL_GPIO_Init+0x1e2>
 8004436:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 80045b8 <HAL_GPIO_Init+0x224>
 800443a:	4540      	cmp	r0, r8
 800443c:	f000 808f 	beq.w	800455e <HAL_GPIO_Init+0x1ca>
 8004440:	f8df 9178 	ldr.w	r9, [pc, #376]	@ 80045bc <HAL_GPIO_Init+0x228>
 8004444:	4548      	cmp	r0, r9
 8004446:	f000 80a2 	beq.w	800458e <HAL_GPIO_Init+0x1fa>
 800444a:	f8df e174 	ldr.w	lr, [pc, #372]	@ 80045c0 <HAL_GPIO_Init+0x22c>
 800444e:	4570      	cmp	r0, lr
 8004450:	f000 80a3 	beq.w	800459a <HAL_GPIO_Init+0x206>
 8004454:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 80045c4 <HAL_GPIO_Init+0x230>
 8004458:	4540      	cmp	r0, r8
 800445a:	f000 8092 	beq.w	8004582 <HAL_GPIO_Init+0x1ee>
 800445e:	f8df e168 	ldr.w	lr, [pc, #360]	@ 80045c8 <HAL_GPIO_Init+0x234>
 8004462:	4570      	cmp	r0, lr
 8004464:	bf0c      	ite	eq
 8004466:	f04f 0e07 	moveq.w	lr, #7
 800446a:	f04f 0e08 	movne.w	lr, #8
 800446e:	fa0e f60c 	lsl.w	r6, lr, ip
 8004472:	4337      	orrs	r7, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004474:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004476:	4a4f      	ldr	r2, [pc, #316]	@ (80045b4 <HAL_GPIO_Init+0x220>)
 8004478:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800447a:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800447c:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004480:	4e4c      	ldr	r6, [pc, #304]	@ (80045b4 <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 8004482:	bf54      	ite	pl
 8004484:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004486:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 800448a:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800448c:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800448e:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004490:	4e48      	ldr	r6, [pc, #288]	@ (80045b4 <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 8004492:	bf54      	ite	pl
 8004494:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004496:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 800449a:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800449c:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800449e:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80044a0:	4e44      	ldr	r6, [pc, #272]	@ (80045b4 <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 80044a2:	bf54      	ite	pl
 80044a4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80044a6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 80044aa:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 80044ac:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044ae:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80044b0:	4d40      	ldr	r5, [pc, #256]	@ (80045b4 <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 80044b2:	bf54      	ite	pl
 80044b4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80044b6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 80044ba:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 80044bc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044be:	fa34 f203 	lsrs.w	r2, r4, r3
 80044c2:	f47f af71 	bne.w	80043a8 <HAL_GPIO_Init+0x14>
  }
}
 80044c6:	b005      	add	sp, #20
 80044c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80044cc:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044d0:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044d2:	ea08 0907 	and.w	r9, r8, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044d6:	fa06 f60c 	lsl.w	r6, r6, ip
 80044da:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->OSPEEDR = temp;
 80044de:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80044e2:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044e6:	ea29 060e 	bic.w	r6, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ea:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 80044ee:	fa0e f803 	lsl.w	r8, lr, r3
 80044f2:	ea48 0906 	orr.w	r9, r8, r6
        GPIOx->OTYPER = temp;
 80044f6:	f8c0 9004 	str.w	r9, [r0, #4]
        temp = GPIOx->PUPDR;
 80044fa:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044fe:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004500:	ea0e 0807 	and.w	r8, lr, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004504:	fa06 f60c 	lsl.w	r6, r6, ip
 8004508:	ea46 0e08 	orr.w	lr, r6, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800450c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800450e:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004512:	f47f af5f 	bne.w	80043d4 <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 8004516:	08de      	lsrs	r6, r3, #3
 8004518:	eb00 0886 	add.w	r8, r0, r6, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800451c:	f003 0607 	and.w	r6, r3, #7
 8004520:	ea4f 0e86 	mov.w	lr, r6, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004524:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8004526:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800452a:	fa06 f60e 	lsl.w	r6, r6, lr
 800452e:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004530:	260f      	movs	r6, #15
 8004532:	fa06 f60e 	lsl.w	r6, r6, lr
 8004536:	ea29 0e06 	bic.w	lr, r9, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800453a:	9e01      	ldr	r6, [sp, #4]
 800453c:	ea46 0e0e 	orr.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004540:	f8c8 e020 	str.w	lr, [r8, #32]
 8004544:	e746      	b.n	80043d4 <HAL_GPIO_Init+0x40>
        temp = GPIOx->PUPDR;
 8004546:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800454a:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800454c:	ea08 0907 	and.w	r9, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004550:	fa06 f60c 	lsl.w	r6, r6, ip
 8004554:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->PUPDR = temp;
 8004558:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800455c:	e73a      	b.n	80043d4 <HAL_GPIO_Init+0x40>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800455e:	f04f 0e03 	mov.w	lr, #3
 8004562:	fa0e f60c 	lsl.w	r6, lr, ip
 8004566:	4337      	orrs	r7, r6
 8004568:	e784      	b.n	8004474 <HAL_GPIO_Init+0xe0>
 800456a:	f04f 0e01 	mov.w	lr, #1
 800456e:	fa0e f60c 	lsl.w	r6, lr, ip
 8004572:	4337      	orrs	r7, r6
 8004574:	e77e      	b.n	8004474 <HAL_GPIO_Init+0xe0>
 8004576:	f04f 0e02 	mov.w	lr, #2
 800457a:	fa0e f60c 	lsl.w	r6, lr, ip
 800457e:	4337      	orrs	r7, r6
 8004580:	e778      	b.n	8004474 <HAL_GPIO_Init+0xe0>
 8004582:	f04f 0e06 	mov.w	lr, #6
 8004586:	fa0e f60c 	lsl.w	r6, lr, ip
 800458a:	4337      	orrs	r7, r6
 800458c:	e772      	b.n	8004474 <HAL_GPIO_Init+0xe0>
 800458e:	f04f 0e04 	mov.w	lr, #4
 8004592:	fa0e f60c 	lsl.w	r6, lr, ip
 8004596:	4337      	orrs	r7, r6
 8004598:	e76c      	b.n	8004474 <HAL_GPIO_Init+0xe0>
 800459a:	f04f 0e05 	mov.w	lr, #5
 800459e:	fa0e f60c 	lsl.w	r6, lr, ip
 80045a2:	4337      	orrs	r7, r6
 80045a4:	e766      	b.n	8004474 <HAL_GPIO_Init+0xe0>
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	48000400 	.word	0x48000400
 80045b0:	48000800 	.word	0x48000800
 80045b4:	40010400 	.word	0x40010400
 80045b8:	48000c00 	.word	0x48000c00
 80045bc:	48001000 	.word	0x48001000
 80045c0:	48001400 	.word	0x48001400
 80045c4:	48001800 	.word	0x48001800
 80045c8:	48001c00 	.word	0x48001c00

080045cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045cc:	b10a      	cbz	r2, 80045d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045ce:	6181      	str	r1, [r0, #24]
 80045d0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045d2:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop

080045d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045d8:	4a04      	ldr	r2, [pc, #16]	@ (80045ec <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80045da:	6951      	ldr	r1, [r2, #20]
 80045dc:	4201      	tst	r1, r0
 80045de:	d100      	bne.n	80045e2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80045e0:	4770      	bx	lr
{
 80045e2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045e4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045e6:	f7fc fb47 	bl	8000c78 <HAL_GPIO_EXTI_Callback>
  }
}
 80045ea:	bd08      	pop	{r3, pc}
 80045ec:	40010400 	.word	0x40010400

080045f0 <HAL_PWR_EnterSLEEPMode>:

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80045f0:	4b0e      	ldr	r3, [pc, #56]	@ (800462c <HAL_PWR_EnterSLEEPMode+0x3c>)
{
 80045f2:	b510      	push	{r4, lr}
 80045f4:	460c      	mov	r4, r1
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80045f6:	6959      	ldr	r1, [r3, #20]
  if (Regulator == PWR_MAINREGULATOR_ON)
 80045f8:	b960      	cbnz	r0, 8004614 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80045fa:	058a      	lsls	r2, r1, #22
 80045fc:	d411      	bmi.n	8004622 <HAL_PWR_EnterSLEEPMode+0x32>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80045fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004630 <HAL_PWR_EnterSLEEPMode+0x40>)
 8004600:	6910      	ldr	r0, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004602:	2c01      	cmp	r4, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004604:	f020 0304 	bic.w	r3, r0, #4
 8004608:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800460a:	d008      	beq.n	800461e <HAL_PWR_EnterSLEEPMode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800460c:	bf40      	sev
    __WFE();
 800460e:	bf20      	wfe
    __WFE();
 8004610:	bf20      	wfe
  }

}
 8004612:	bd10      	pop	{r4, pc}
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8004614:	058b      	lsls	r3, r1, #22
 8004616:	d4f2      	bmi.n	80045fe <HAL_PWR_EnterSLEEPMode+0xe>
      HAL_PWREx_EnableLowPowerRunMode();
 8004618:	f000 f89e 	bl	8004758 <HAL_PWREx_EnableLowPowerRunMode>
 800461c:	e7ef      	b.n	80045fe <HAL_PWR_EnterSLEEPMode+0xe>
    __WFI();
 800461e:	bf30      	wfi
}
 8004620:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004622:	f000 f8a1 	bl	8004768 <HAL_PWREx_DisableLowPowerRunMode>
 8004626:	2800      	cmp	r0, #0
 8004628:	d0e9      	beq.n	80045fe <HAL_PWR_EnterSLEEPMode+0xe>
}
 800462a:	bd10      	pop	{r4, pc}
 800462c:	40007000 	.word	0x40007000
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004634:	4b02      	ldr	r3, [pc, #8]	@ (8004640 <HAL_PWREx_GetVoltageRange+0xc>)
 8004636:	6818      	ldr	r0, [r3, #0]
#endif
}
 8004638:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40007000 	.word	0x40007000

08004644 <HAL_PWREx_ControlVoltageScaling>:
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004644:	4a3d      	ldr	r2, [pc, #244]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004646:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004648:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800464c:	f403 61c0 	and.w	r1, r3, #1536	@ 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004650:	d00a      	beq.n	8004668 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004652:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004656:	d005      	beq.n	8004664 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004658:	6810      	ldr	r0, [r2, #0]
 800465a:	f420 6cc0 	bic.w	ip, r0, #1536	@ 0x600
 800465e:	f44c 6380 	orr.w	r3, ip, #1024	@ 0x400
 8004662:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004664:	2000      	movs	r0, #0
 8004666:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004668:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800466c:	d0fa      	beq.n	8004664 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800466e:	6810      	ldr	r0, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004670:	4933      	ldr	r1, [pc, #204]	@ (8004740 <HAL_PWREx_ControlVoltageScaling+0xfc>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004672:	f420 6cc0 	bic.w	ip, r0, #1536	@ 0x600
 8004676:	f44c 7300 	orr.w	r3, ip, #512	@ 0x200
 800467a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800467c:	680b      	ldr	r3, [r1, #0]
 800467e:	4931      	ldr	r1, [pc, #196]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004680:	2032      	movs	r0, #50	@ 0x32
 8004682:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004686:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004688:	fba1 1303 	umull	r1, r3, r1, r3
 800468c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468e:	0541      	lsls	r1, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004690:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004694:	d54c      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004696:	f013 0107 	ands.w	r1, r3, #7
 800469a:	d02f      	beq.n	80046fc <HAL_PWREx_ControlVoltageScaling+0xb8>
 800469c:	2901      	cmp	r1, #1
 800469e:	d027      	beq.n	80046f0 <HAL_PWREx_ControlVoltageScaling+0xac>
 80046a0:	2902      	cmp	r1, #2
 80046a2:	d020      	beq.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0xa2>
 80046a4:	2903      	cmp	r1, #3
 80046a6:	d019      	beq.n	80046dc <HAL_PWREx_ControlVoltageScaling+0x98>
 80046a8:	2904      	cmp	r1, #4
 80046aa:	d012      	beq.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80046ac:	2905      	cmp	r1, #5
 80046ae:	d00b      	beq.n	80046c8 <HAL_PWREx_ControlVoltageScaling+0x84>
 80046b0:	2906      	cmp	r1, #6
 80046b2:	d004      	beq.n	80046be <HAL_PWREx_ControlVoltageScaling+0x7a>
 80046b4:	6950      	ldr	r0, [r2, #20]
 80046b6:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 80046b8:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046bc:	d538      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 80046be:	6951      	ldr	r1, [r2, #20]
 80046c0:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 80046c2:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046c6:	d533      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 80046c8:	6950      	ldr	r0, [r2, #20]
 80046ca:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 80046cc:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d0:	d52e      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 80046d2:	6951      	ldr	r1, [r2, #20]
 80046d4:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 80046d6:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046da:	d529      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 80046dc:	6950      	ldr	r0, [r2, #20]
 80046de:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 80046e0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046e4:	d524      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 80046e6:	6951      	ldr	r1, [r2, #20]
 80046e8:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 80046ea:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ee:	d51f      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 80046f0:	6950      	ldr	r0, [r2, #20]
 80046f2:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 80046f4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046f8:	d51a      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 80046fa:	b1cb      	cbz	r3, 8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 80046fc:	6951      	ldr	r1, [r2, #20]
 80046fe:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 8004700:	f1a3 0308 	sub.w	r3, r3, #8
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004704:	d514      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004706:	6950      	ldr	r0, [r2, #20]
 8004708:	0541      	lsls	r1, r0, #21
 800470a:	d511      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 800470c:	6951      	ldr	r1, [r2, #20]
 800470e:	0548      	lsls	r0, r1, #21
 8004710:	d50e      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004712:	6950      	ldr	r0, [r2, #20]
 8004714:	0541      	lsls	r1, r0, #21
 8004716:	d50b      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004718:	6951      	ldr	r1, [r2, #20]
 800471a:	0548      	lsls	r0, r1, #21
 800471c:	d508      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 800471e:	6950      	ldr	r0, [r2, #20]
 8004720:	0541      	lsls	r1, r0, #21
 8004722:	d505      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004724:	6951      	ldr	r1, [r2, #20]
 8004726:	0548      	lsls	r0, r1, #21
 8004728:	d502      	bpl.n	8004730 <HAL_PWREx_ControlVoltageScaling+0xec>
 800472a:	6950      	ldr	r0, [r2, #20]
 800472c:	0541      	lsls	r1, r0, #21
 800472e:	d4e4      	bmi.n	80046fa <HAL_PWREx_ControlVoltageScaling+0xb6>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004730:	4a02      	ldr	r2, [pc, #8]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004732:	6953      	ldr	r3, [r2, #20]
 8004734:	0558      	lsls	r0, r3, #21
 8004736:	d595      	bpl.n	8004664 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8004738:	2003      	movs	r0, #3
}
 800473a:	4770      	bx	lr
 800473c:	40007000 	.word	0x40007000
 8004740:	20000400 	.word	0x20000400
 8004744:	431bde83 	.word	0x431bde83

08004748 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004748:	4a02      	ldr	r2, [pc, #8]	@ (8004754 <HAL_PWREx_EnableVddIO2+0xc>)
 800474a:	6853      	ldr	r3, [r2, #4]
 800474c:	f443 7000 	orr.w	r0, r3, #512	@ 0x200
 8004750:	6050      	str	r0, [r2, #4]
}
 8004752:	4770      	bx	lr
 8004754:	40007000 	.word	0x40007000

08004758 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004758:	4a02      	ldr	r2, [pc, #8]	@ (8004764 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800475a:	6813      	ldr	r3, [r2, #0]
 800475c:	f443 4080 	orr.w	r0, r3, #16384	@ 0x4000
 8004760:	6010      	str	r0, [r2, #0]
}
 8004762:	4770      	bx	lr
 8004764:	40007000 	.word	0x40007000

08004768 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004768:	4b34      	ldr	r3, [pc, #208]	@ (800483c <HAL_PWREx_DisableLowPowerRunMode+0xd4>)

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800476a:	4935      	ldr	r1, [pc, #212]	@ (8004840 <HAL_PWREx_DisableLowPowerRunMode+0xd8>)
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800476c:	681a      	ldr	r2, [r3, #0]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800476e:	4835      	ldr	r0, [pc, #212]	@ (8004844 <HAL_PWREx_DisableLowPowerRunMode+0xdc>)
{
 8004770:	b410      	push	{r4}
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004772:	f422 4480 	bic.w	r4, r2, #16384	@ 0x4000
 8004776:	601c      	str	r4, [r3, #0]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004778:	6809      	ldr	r1, [r1, #0]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800477a:	695c      	ldr	r4, [r3, #20]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800477c:	2232      	movs	r2, #50	@ 0x32
 800477e:	fb02 f101 	mul.w	r1, r2, r1
 8004782:	fba0 0101 	umull	r0, r1, r0, r1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004786:	05a0      	lsls	r0, r4, #22
 8004788:	d549      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 800478a:	0c8c      	lsrs	r4, r1, #18
 800478c:	1c62      	adds	r2, r4, #1
 800478e:	f012 0007 	ands.w	r0, r2, #7
 8004792:	d02a      	beq.n	80047ea <HAL_PWREx_DisableLowPowerRunMode+0x82>
 8004794:	2801      	cmp	r0, #1
 8004796:	d022      	beq.n	80047de <HAL_PWREx_DisableLowPowerRunMode+0x76>
 8004798:	2802      	cmp	r0, #2
 800479a:	d01b      	beq.n	80047d4 <HAL_PWREx_DisableLowPowerRunMode+0x6c>
 800479c:	2803      	cmp	r0, #3
 800479e:	d014      	beq.n	80047ca <HAL_PWREx_DisableLowPowerRunMode+0x62>
 80047a0:	2804      	cmp	r0, #4
 80047a2:	d00d      	beq.n	80047c0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
 80047a4:	2805      	cmp	r0, #5
 80047a6:	d006      	beq.n	80047b6 <HAL_PWREx_DisableLowPowerRunMode+0x4e>
 80047a8:	2806      	cmp	r0, #6
 80047aa:	d142      	bne.n	8004832 <HAL_PWREx_DisableLowPowerRunMode+0xca>
 80047ac:	6959      	ldr	r1, [r3, #20]
 80047ae:	058c      	lsls	r4, r1, #22
  {
    wait_loop_index--;
 80047b0:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047b4:	d533      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80047b6:	695c      	ldr	r4, [r3, #20]
 80047b8:	05a1      	lsls	r1, r4, #22
    wait_loop_index--;
 80047ba:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047be:	d52e      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80047c0:	6959      	ldr	r1, [r3, #20]
 80047c2:	058c      	lsls	r4, r1, #22
    wait_loop_index--;
 80047c4:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047c8:	d529      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80047ca:	695c      	ldr	r4, [r3, #20]
 80047cc:	05a1      	lsls	r1, r4, #22
    wait_loop_index--;
 80047ce:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047d2:	d524      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80047d4:	6959      	ldr	r1, [r3, #20]
 80047d6:	058c      	lsls	r4, r1, #22
    wait_loop_index--;
 80047d8:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047dc:	d51f      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80047de:	695c      	ldr	r4, [r3, #20]
 80047e0:	05a1      	lsls	r1, r4, #22
    wait_loop_index--;
 80047e2:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047e6:	d51a      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80047e8:	b1ca      	cbz	r2, 800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80047ea:	6959      	ldr	r1, [r3, #20]
 80047ec:	0589      	lsls	r1, r1, #22
    wait_loop_index--;
 80047ee:	f1a2 0208 	sub.w	r2, r2, #8
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047f2:	d514      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80047f4:	695c      	ldr	r4, [r3, #20]
 80047f6:	05a4      	lsls	r4, r4, #22
 80047f8:	d511      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80047fa:	6959      	ldr	r1, [r3, #20]
 80047fc:	058c      	lsls	r4, r1, #22
 80047fe:	d50e      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004800:	695c      	ldr	r4, [r3, #20]
 8004802:	05a1      	lsls	r1, r4, #22
 8004804:	d50b      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004806:	6959      	ldr	r1, [r3, #20]
 8004808:	058c      	lsls	r4, r1, #22
 800480a:	d508      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 800480c:	695c      	ldr	r4, [r3, #20]
 800480e:	05a1      	lsls	r1, r4, #22
 8004810:	d505      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004812:	6959      	ldr	r1, [r3, #20]
 8004814:	058c      	lsls	r4, r1, #22
 8004816:	d502      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004818:	695c      	ldr	r4, [r3, #20]
 800481a:	05a1      	lsls	r1, r4, #22
 800481c:	d4e4      	bmi.n	80047e8 <HAL_PWREx_DisableLowPowerRunMode+0x80>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800481e:	4b07      	ldr	r3, [pc, #28]	@ (800483c <HAL_PWREx_DisableLowPowerRunMode+0xd4>)
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004820:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004824:	695a      	ldr	r2, [r3, #20]
  return HAL_OK;
 8004826:	f412 7f00 	tst.w	r2, #512	@ 0x200
}
 800482a:	bf14      	ite	ne
 800482c:	2003      	movne	r0, #3
 800482e:	2000      	moveq	r0, #0
 8004830:	4770      	bx	lr
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004832:	6958      	ldr	r0, [r3, #20]
 8004834:	0581      	lsls	r1, r0, #22
    wait_loop_index--;
 8004836:	4622      	mov	r2, r4
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004838:	d5f1      	bpl.n	800481e <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 800483a:	e7b7      	b.n	80047ac <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800483c:	40007000 	.word	0x40007000
 8004840:	20000400 	.word	0x20000400
 8004844:	431bde83 	.word	0x431bde83

08004848 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004848:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800484a:	4d20      	ldr	r5, [pc, #128]	@ (80048cc <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800484c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800484e:	00db      	lsls	r3, r3, #3
{
 8004850:	b083      	sub	sp, #12
 8004852:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004854:	d51a      	bpl.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004856:	f7ff feed 	bl	8004634 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800485a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800485e:	d027      	beq.n	80048b0 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004860:	2c80      	cmp	r4, #128	@ 0x80
 8004862:	d82c      	bhi.n	80048be <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004864:	d02f      	beq.n	80048c6 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004866:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 800486a:	fab4 f484 	clz	r4, r4
 800486e:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004870:	4d17      	ldr	r5, [pc, #92]	@ (80048d0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8004872:	6828      	ldr	r0, [r5, #0]
 8004874:	f020 0307 	bic.w	r3, r0, #7
 8004878:	4323      	orrs	r3, r4
 800487a:	602b      	str	r3, [r5, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800487c:	6829      	ldr	r1, [r5, #0]
 800487e:	f001 0207 	and.w	r2, r1, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8004882:	1b10      	subs	r0, r2, r4
 8004884:	bf18      	it	ne
 8004886:	2001      	movne	r0, #1
 8004888:	b003      	add	sp, #12
 800488a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800488c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800488e:	f040 5180 	orr.w	r1, r0, #268435456	@ 0x10000000
 8004892:	65a9      	str	r1, [r5, #88]	@ 0x58
 8004894:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 8004896:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800489e:	f7ff fec9 	bl	8004634 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80048a2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048a4:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80048a8:	f021 5280 	bic.w	r2, r1, #268435456	@ 0x10000000
 80048ac:	65aa      	str	r2, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ae:	d1d7      	bne.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80048b0:	2c80      	cmp	r4, #128	@ 0x80
 80048b2:	d906      	bls.n	80048c2 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80048b4:	2ca1      	cmp	r4, #161	@ 0xa1
 80048b6:	bf34      	ite	cc
 80048b8:	2401      	movcc	r4, #1
 80048ba:	2402      	movcs	r4, #2
 80048bc:	e7d8      	b.n	8004870 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 80048be:	2403      	movs	r4, #3
 80048c0:	e7d6      	b.n	8004870 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048c2:	2400      	movs	r4, #0
 80048c4:	e7d4      	b.n	8004870 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 80048c6:	2402      	movs	r4, #2
 80048c8:	e7d2      	b.n	8004870 <RCC_SetFlashLatencyFromMSIRange+0x28>
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40022000 	.word	0x40022000

080048d4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d4:	4a28      	ldr	r2, [pc, #160]	@ (8004978 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048d6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d8:	68d0      	ldr	r0, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048da:	f013 030c 	ands.w	r3, r3, #12
 80048de:	d005      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x18>
 80048e0:	2b0c      	cmp	r3, #12
 80048e2:	d035      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d141      	bne.n	800496c <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 80048e8:	4824      	ldr	r0, [pc, #144]	@ (800497c <HAL_RCC_GetSysClockFreq+0xa8>)
 80048ea:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048ec:	4a22      	ldr	r2, [pc, #136]	@ (8004978 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048ee:	6810      	ldr	r0, [r2, #0]
 80048f0:	0701      	lsls	r1, r0, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048f2:	bf54      	ite	pl
 80048f4:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048f8:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80048fa:	4921      	ldr	r1, [pc, #132]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048fc:	bf54      	ite	pl
 80048fe:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004902:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8004906:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800490a:	b303      	cbz	r3, 800494e <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800490c:	2b0c      	cmp	r3, #12
 800490e:	d11d      	bne.n	800494c <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004910:	4b19      	ldr	r3, [pc, #100]	@ (8004978 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	f002 0303 	and.w	r3, r2, #3
    switch (pllsource)
 8004918:	2b02      	cmp	r3, #2
 800491a:	d025      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0x94>
 800491c:	4919      	ldr	r1, [pc, #100]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xb0>)
 800491e:	2b03      	cmp	r3, #3
 8004920:	bf18      	it	ne
 8004922:	4601      	movne	r1, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004924:	4b14      	ldr	r3, [pc, #80]	@ (8004978 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004926:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004928:	68d8      	ldr	r0, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004930:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004932:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004936:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800493a:	fb01 f000 	mul.w	r0, r1, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800493e:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004940:	0059      	lsls	r1, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004942:	fbb0 fcf2 	udiv	ip, r0, r2
    sysclockfreq = pllvco / pllr;
 8004946:	fbbc f0f1 	udiv	r0, ip, r1
 800494a:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800494c:	2000      	movs	r0, #0
}
 800494e:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004950:	f000 0103 	and.w	r1, r0, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004954:	2901      	cmp	r1, #1
 8004956:	d0c9      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004958:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <HAL_RCC_GetSysClockFreq+0xa4>)
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	f002 0303 	and.w	r3, r2, #3
    switch (pllsource)
 8004960:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004962:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8004966:	d1d9      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8004968:	4904      	ldr	r1, [pc, #16]	@ (800497c <HAL_RCC_GetSysClockFreq+0xa8>)
 800496a:	e7db      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 800496c:	2b08      	cmp	r3, #8
 800496e:	4805      	ldr	r0, [pc, #20]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004970:	bf18      	it	ne
 8004972:	2000      	movne	r0, #0
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000
 800497c:	00f42400 	.word	0x00f42400
 8004980:	0800a228 	.word	0x0800a228
 8004984:	007a1200 	.word	0x007a1200

08004988 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004988:	2800      	cmp	r0, #0
 800498a:	f000 8230 	beq.w	8004dee <HAL_RCC_OscConfig+0x466>
{
 800498e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004992:	4a93      	ldr	r2, [pc, #588]	@ (8004be0 <HAL_RCC_OscConfig+0x258>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004994:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004996:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004998:	68d6      	ldr	r6, [r2, #12]
 800499a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800499c:	06d8      	lsls	r0, r3, #27
{
 800499e:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a0:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049a4:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049a8:	d52e      	bpl.n	8004a08 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049aa:	2d00      	cmp	r5, #0
 80049ac:	f000 8121 	beq.w	8004bf2 <HAL_RCC_OscConfig+0x26a>
 80049b0:	2d0c      	cmp	r5, #12
 80049b2:	f000 811b 	beq.w	8004bec <HAL_RCC_OscConfig+0x264>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049b6:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80049b8:	4f89      	ldr	r7, [pc, #548]	@ (8004be0 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 8192 	beq.w	8004ce4 <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_MSI_ENABLE();
 80049c0:	6838      	ldr	r0, [r7, #0]
 80049c2:	f040 0101 	orr.w	r1, r0, #1
 80049c6:	6039      	str	r1, [r7, #0]
        tickstart = HAL_GetTick();
 80049c8:	f7fe f9d6 	bl	8002d78 <HAL_GetTick>
 80049cc:	4681      	mov	r9, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ce:	e006      	b.n	80049de <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049d0:	f7fe f9d2 	bl	8002d78 <HAL_GetTick>
 80049d4:	eba0 0009 	sub.w	r0, r0, r9
 80049d8:	2802      	cmp	r0, #2
 80049da:	f200 8193 	bhi.w	8004d04 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	0793      	lsls	r3, r2, #30
 80049e2:	d5f5      	bpl.n	80049d0 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	f043 0008 	orr.w	r0, r3, #8
 80049ea:	6038      	str	r0, [r7, #0]
 80049ec:	6839      	ldr	r1, [r7, #0]
 80049ee:	6a22      	ldr	r2, [r4, #32]
 80049f0:	f021 03f0 	bic.w	r3, r1, #240	@ 0xf0
 80049f4:	4313      	orrs	r3, r2
 80049f6:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	69e3      	ldr	r3, [r4, #28]
 80049fc:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
 8004a00:	ea41 2203 	orr.w	r2, r1, r3, lsl #8
 8004a04:	607a      	str	r2, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	07d9      	lsls	r1, r3, #31
 8004a0a:	f100 80bf 	bmi.w	8004b8c <HAL_RCC_OscConfig+0x204>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a0e:	0799      	lsls	r1, r3, #30
 8004a10:	d523      	bpl.n	8004a5a <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a12:	2d04      	cmp	r5, #4
 8004a14:	f000 8156 	beq.w	8004cc4 <HAL_RCC_OscConfig+0x33c>
 8004a18:	2d0c      	cmp	r5, #12
 8004a1a:	f000 8150 	beq.w	8004cbe <HAL_RCC_OscConfig+0x336>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a1e:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004a20:	4e6f      	ldr	r6, [pc, #444]	@ (8004be0 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 8189 	beq.w	8004d3a <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_ENABLE();
 8004a28:	6830      	ldr	r0, [r6, #0]
 8004a2a:	f440 7280 	orr.w	r2, r0, #256	@ 0x100
 8004a2e:	6032      	str	r2, [r6, #0]
        tickstart = HAL_GetTick();
 8004a30:	f7fe f9a2 	bl	8002d78 <HAL_GetTick>
 8004a34:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a36:	e005      	b.n	8004a44 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a38:	f7fe f99e 	bl	8002d78 <HAL_GetTick>
 8004a3c:	1bc2      	subs	r2, r0, r7
 8004a3e:	2a02      	cmp	r2, #2
 8004a40:	f200 8160 	bhi.w	8004d04 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a44:	6831      	ldr	r1, [r6, #0]
 8004a46:	054b      	lsls	r3, r1, #21
 8004a48:	d5f6      	bpl.n	8004a38 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4a:	6877      	ldr	r7, [r6, #4]
 8004a4c:	6920      	ldr	r0, [r4, #16]
 8004a4e:	f027 48fe 	bic.w	r8, r7, #2130706432	@ 0x7f000000
 8004a52:	ea48 6300 	orr.w	r3, r8, r0, lsl #24
 8004a56:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	0719      	lsls	r1, r3, #28
 8004a5c:	d519      	bpl.n	8004a92 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a5e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004a60:	4e5f      	ldr	r6, [pc, #380]	@ (8004be0 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8117 	beq.w	8004c96 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 8004a68:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004a6c:	f043 0201 	orr.w	r2, r3, #1
 8004a70:	f8c6 2094 	str.w	r2, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004a74:	f7fe f980 	bl	8002d78 <HAL_GetTick>
 8004a78:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a7a:	e005      	b.n	8004a88 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7c:	f7fe f97c 	bl	8002d78 <HAL_GetTick>
 8004a80:	1bc0      	subs	r0, r0, r7
 8004a82:	2802      	cmp	r0, #2
 8004a84:	f200 813e 	bhi.w	8004d04 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a88:	f8d6 1094 	ldr.w	r1, [r6, #148]	@ 0x94
 8004a8c:	078a      	lsls	r2, r1, #30
 8004a8e:	d5f5      	bpl.n	8004a7c <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	075f      	lsls	r7, r3, #29
 8004a94:	d53f      	bpl.n	8004b16 <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a96:	4f52      	ldr	r7, [pc, #328]	@ (8004be0 <HAL_RCC_OscConfig+0x258>)
 8004a98:	6dbe      	ldr	r6, [r7, #88]	@ 0x58
 8004a9a:	00f6      	lsls	r6, r6, #3
 8004a9c:	f100 814b 	bmi.w	8004d36 <HAL_RCC_OscConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004aa2:	f040 5380 	orr.w	r3, r0, #268435456	@ 0x10000000
 8004aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004aaa:	f002 5180 	and.w	r1, r2, #268435456	@ 0x10000000
 8004aae:	9101      	str	r1, [sp, #4]
 8004ab0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004ab2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab4:	4f4b      	ldr	r7, [pc, #300]	@ (8004be4 <HAL_RCC_OscConfig+0x25c>)
 8004ab6:	6838      	ldr	r0, [r7, #0]
 8004ab8:	05c0      	lsls	r0, r0, #23
 8004aba:	f140 819a 	bpl.w	8004df2 <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004abe:	68a0      	ldr	r0, [r4, #8]
 8004ac0:	2801      	cmp	r0, #1
 8004ac2:	f000 814c 	beq.w	8004d5e <HAL_RCC_OscConfig+0x3d6>
 8004ac6:	2805      	cmp	r0, #5
 8004ac8:	f000 81c2 	beq.w	8004e50 <HAL_RCC_OscConfig+0x4c8>
 8004acc:	4f44      	ldr	r7, [pc, #272]	@ (8004be0 <HAL_RCC_OscConfig+0x258>)
 8004ace:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ad2:	f023 0201 	bic.w	r2, r3, #1
 8004ad6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ade:	f021 0304 	bic.w	r3, r1, #4
 8004ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	f040 8140 	bne.w	8004d6c <HAL_RCC_OscConfig+0x3e4>
      tickstart = HAL_GetTick();
 8004aec:	f7fe f944 	bl	8002d78 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af0:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004af4:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004af6:	e006      	b.n	8004b06 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af8:	f7fe f93e 	bl	8002d78 <HAL_GetTick>
 8004afc:	eba0 0208 	sub.w	r2, r0, r8
 8004b00:	454a      	cmp	r2, r9
 8004b02:	f200 80ff 	bhi.w	8004d04 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b06:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8004b0a:	0783      	lsls	r3, r0, #30
 8004b0c:	d4f4      	bmi.n	8004af8 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8004b0e:	2e00      	cmp	r6, #0
 8004b10:	f040 8181 	bne.w	8004e16 <HAL_RCC_OscConfig+0x48e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	069e      	lsls	r6, r3, #26
 8004b18:	d518      	bpl.n	8004b4c <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b1a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8004b1c:	4e30      	ldr	r6, [pc, #192]	@ (8004be0 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	f000 8151 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_ENABLE();
 8004b24:	f8d6 0098 	ldr.w	r0, [r6, #152]	@ 0x98
 8004b28:	f040 0201 	orr.w	r2, r0, #1
 8004b2c:	f8c6 2098 	str.w	r2, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004b30:	f7fe f922 	bl	8002d78 <HAL_GetTick>
 8004b34:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b36:	e005      	b.n	8004b44 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b38:	f7fe f91e 	bl	8002d78 <HAL_GetTick>
 8004b3c:	1bc2      	subs	r2, r0, r7
 8004b3e:	2a02      	cmp	r2, #2
 8004b40:	f200 80e0 	bhi.w	8004d04 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b44:	f8d6 1098 	ldr.w	r1, [r6, #152]	@ 0x98
 8004b48:	0788      	lsls	r0, r1, #30
 8004b4a:	d5f5      	bpl.n	8004b38 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b4e:	b1de      	cbz	r6, 8004b88 <HAL_RCC_OscConfig+0x200>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b50:	2e02      	cmp	r6, #2
 8004b52:	f000 818b 	beq.w	8004e6c <HAL_RCC_OscConfig+0x4e4>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b56:	2d0c      	cmp	r5, #12
 8004b58:	f000 808d 	beq.w	8004c76 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_PLL_DISABLE();
 8004b5c:	4c20      	ldr	r4, [pc, #128]	@ (8004be0 <HAL_RCC_OscConfig+0x258>)
 8004b5e:	6825      	ldr	r5, [r4, #0]
 8004b60:	f025 7780 	bic.w	r7, r5, #16777216	@ 0x1000000
 8004b64:	6027      	str	r7, [r4, #0]
        tickstart = HAL_GetTick();
 8004b66:	f7fe f907 	bl	8002d78 <HAL_GetTick>
 8004b6a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b6c:	e005      	b.n	8004b7a <HAL_RCC_OscConfig+0x1f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6e:	f7fe f903 	bl	8002d78 <HAL_GetTick>
 8004b72:	1b81      	subs	r1, r0, r6
 8004b74:	2902      	cmp	r1, #2
 8004b76:	f200 80c5 	bhi.w	8004d04 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	d4f6      	bmi.n	8004b6e <HAL_RCC_OscConfig+0x1e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b80:	68e0      	ldr	r0, [r4, #12]
 8004b82:	4a19      	ldr	r2, [pc, #100]	@ (8004be8 <HAL_RCC_OscConfig+0x260>)
 8004b84:	4002      	ands	r2, r0
 8004b86:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8004b88:	2000      	movs	r0, #0
 8004b8a:	e075      	b.n	8004c78 <HAL_RCC_OscConfig+0x2f0>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b8c:	2d08      	cmp	r5, #8
 8004b8e:	d078      	beq.n	8004c82 <HAL_RCC_OscConfig+0x2fa>
 8004b90:	2d0c      	cmp	r5, #12
 8004b92:	d074      	beq.n	8004c7e <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b94:	6861      	ldr	r1, [r4, #4]
 8004b96:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004b9a:	f000 80b7 	beq.w	8004d0c <HAL_RCC_OscConfig+0x384>
 8004b9e:	f5b1 2fa0 	cmp.w	r1, #327680	@ 0x50000
 8004ba2:	f000 8144 	beq.w	8004e2e <HAL_RCC_OscConfig+0x4a6>
 8004ba6:	4f0e      	ldr	r7, [pc, #56]	@ (8004be0 <HAL_RCC_OscConfig+0x258>)
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	f422 3380 	bic.w	r3, r2, #65536	@ 0x10000
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	6838      	ldr	r0, [r7, #0]
 8004bb2:	f420 2280 	bic.w	r2, r0, #262144	@ 0x40000
 8004bb6:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	f040 80ac 	bne.w	8004d16 <HAL_RCC_OscConfig+0x38e>
        tickstart = HAL_GetTick();
 8004bbe:	f7fe f8db 	bl	8002d78 <HAL_GetTick>
 8004bc2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bc4:	e006      	b.n	8004bd4 <HAL_RCC_OscConfig+0x24c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc6:	f7fe f8d7 	bl	8002d78 <HAL_GetTick>
 8004bca:	eba0 0308 	sub.w	r3, r0, r8
 8004bce:	2b64      	cmp	r3, #100	@ 0x64
 8004bd0:	f200 8098 	bhi.w	8004d04 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	0388      	lsls	r0, r1, #14
 8004bd8:	d4f5      	bmi.n	8004bc6 <HAL_RCC_OscConfig+0x23e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	e717      	b.n	8004a0e <HAL_RCC_OscConfig+0x86>
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40007000 	.word	0x40007000
 8004be8:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bec:	2e01      	cmp	r6, #1
 8004bee:	f47f aee2 	bne.w	80049b6 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bf2:	4fac      	ldr	r7, [pc, #688]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	0789      	lsls	r1, r1, #30
 8004bf8:	d43a      	bmi.n	8004c70 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bfa:	4faa      	ldr	r7, [pc, #680]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004bfc:	6a20      	ldr	r0, [r4, #32]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	0712      	lsls	r2, r2, #28
 8004c02:	bf56      	itet	pl
 8004c04:	f8d7 7094 	ldrpl.w	r7, [r7, #148]	@ 0x94
 8004c08:	683f      	ldrmi	r7, [r7, #0]
 8004c0a:	093f      	lsrpl	r7, r7, #4
 8004c0c:	f007 01f0 	and.w	r1, r7, #240	@ 0xf0
 8004c10:	4288      	cmp	r0, r1
 8004c12:	f200 80c0 	bhi.w	8004d96 <HAL_RCC_OscConfig+0x40e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c16:	4ba3      	ldr	r3, [pc, #652]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004c18:	681f      	ldr	r7, [r3, #0]
 8004c1a:	f047 0208 	orr.w	r2, r7, #8
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	6819      	ldr	r1, [r3, #0]
 8004c22:	f021 07f0 	bic.w	r7, r1, #240	@ 0xf0
 8004c26:	4307      	orrs	r7, r0
 8004c28:	601f      	str	r7, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	69e1      	ldr	r1, [r4, #28]
 8004c2e:	f422 477f 	bic.w	r7, r2, #65280	@ 0xff00
 8004c32:	ea47 2201 	orr.w	r2, r7, r1, lsl #8
 8004c36:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c38:	2d00      	cmp	r5, #0
 8004c3a:	f000 80f2 	beq.w	8004e22 <HAL_RCC_OscConfig+0x49a>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c3e:	f7ff fe49 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8004c42:	4b98      	ldr	r3, [pc, #608]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004c44:	4a98      	ldr	r2, [pc, #608]	@ (8004ea8 <HAL_RCC_OscConfig+0x520>)
 8004c46:	689f      	ldr	r7, [r3, #8]
 8004c48:	f3c7 1103 	ubfx	r1, r7, #4, #4
 8004c4c:	4f97      	ldr	r7, [pc, #604]	@ (8004eac <HAL_RCC_OscConfig+0x524>)
 8004c4e:	f812 8001 	ldrb.w	r8, [r2, r1]
 8004c52:	f008 091f 	and.w	r9, r8, #31
 8004c56:	fa20 f309 	lsr.w	r3, r0, r9
        status = HAL_InitTick(uwTickPrio);
 8004c5a:	4895      	ldr	r0, [pc, #596]	@ (8004eb0 <HAL_RCC_OscConfig+0x528>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c5c:	603b      	str	r3, [r7, #0]
        status = HAL_InitTick(uwTickPrio);
 8004c5e:	6800      	ldr	r0, [r0, #0]
 8004c60:	f7fe f848 	bl	8002cf4 <HAL_InitTick>
        if(status != HAL_OK)
 8004c64:	b940      	cbnz	r0, 8004c78 <HAL_RCC_OscConfig+0x2f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	07d9      	lsls	r1, r3, #31
 8004c6a:	f57f aed0 	bpl.w	8004a0e <HAL_RCC_OscConfig+0x86>
 8004c6e:	e78d      	b.n	8004b8c <HAL_RCC_OscConfig+0x204>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c70:	69a3      	ldr	r3, [r4, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1c1      	bne.n	8004bfa <HAL_RCC_OscConfig+0x272>
    return HAL_ERROR;
 8004c76:	2001      	movs	r0, #1
}
 8004c78:	b003      	add	sp, #12
 8004c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c7e:	2e03      	cmp	r6, #3
 8004c80:	d188      	bne.n	8004b94 <HAL_RCC_OscConfig+0x20c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c82:	4a88      	ldr	r2, [pc, #544]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004c84:	6811      	ldr	r1, [r2, #0]
 8004c86:	038a      	lsls	r2, r1, #14
 8004c88:	f57f aec1 	bpl.w	8004a0e <HAL_RCC_OscConfig+0x86>
 8004c8c:	6867      	ldr	r7, [r4, #4]
 8004c8e:	2f00      	cmp	r7, #0
 8004c90:	f47f aebd 	bne.w	8004a0e <HAL_RCC_OscConfig+0x86>
 8004c94:	e7ef      	b.n	8004c76 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_DISABLE();
 8004c96:	f8d6 7094 	ldr.w	r7, [r6, #148]	@ 0x94
 8004c9a:	f027 0201 	bic.w	r2, r7, #1
 8004c9e:	f8c6 2094 	str.w	r2, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004ca2:	f7fe f869 	bl	8002d78 <HAL_GetTick>
 8004ca6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ca8:	e004      	b.n	8004cb4 <HAL_RCC_OscConfig+0x32c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004caa:	f7fe f865 	bl	8002d78 <HAL_GetTick>
 8004cae:	1bc0      	subs	r0, r0, r7
 8004cb0:	2802      	cmp	r0, #2
 8004cb2:	d827      	bhi.n	8004d04 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cb4:	f8d6 1094 	ldr.w	r1, [r6, #148]	@ 0x94
 8004cb8:	078b      	lsls	r3, r1, #30
 8004cba:	d4f6      	bmi.n	8004caa <HAL_RCC_OscConfig+0x322>
 8004cbc:	e6e8      	b.n	8004a90 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cbe:	2e02      	cmp	r6, #2
 8004cc0:	f47f aead 	bne.w	8004a1e <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc4:	4e77      	ldr	r6, [pc, #476]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004cc6:	6831      	ldr	r1, [r6, #0]
 8004cc8:	054a      	lsls	r2, r1, #21
 8004cca:	d502      	bpl.n	8004cd2 <HAL_RCC_OscConfig+0x34a>
 8004ccc:	68e0      	ldr	r0, [r4, #12]
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d0d1      	beq.n	8004c76 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd2:	4f74      	ldr	r7, [pc, #464]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004cd4:	6921      	ldr	r1, [r4, #16]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	f022 46fe 	bic.w	r6, r2, #2130706432	@ 0x7f000000
 8004cdc:	ea46 6001 	orr.w	r0, r6, r1, lsl #24
 8004ce0:	6078      	str	r0, [r7, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ce2:	e6ba      	b.n	8004a5a <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8004ce4:	6838      	ldr	r0, [r7, #0]
 8004ce6:	f020 0101 	bic.w	r1, r0, #1
 8004cea:	6039      	str	r1, [r7, #0]
        tickstart = HAL_GetTick();
 8004cec:	f7fe f844 	bl	8002d78 <HAL_GetTick>
 8004cf0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	0790      	lsls	r0, r2, #30
 8004cf6:	d5b6      	bpl.n	8004c66 <HAL_RCC_OscConfig+0x2de>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cf8:	f7fe f83e 	bl	8002d78 <HAL_GetTick>
 8004cfc:	eba0 0308 	sub.w	r3, r0, r8
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d9f6      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x36a>
            return HAL_TIMEOUT;
 8004d04:	2003      	movs	r0, #3
}
 8004d06:	b003      	add	sp, #12
 8004d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d0c:	4865      	ldr	r0, [pc, #404]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004d0e:	6803      	ldr	r3, [r0, #0]
 8004d10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d14:	6002      	str	r2, [r0, #0]
        tickstart = HAL_GetTick();
 8004d16:	f7fe f82f 	bl	8002d78 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d1a:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8004ea4 <HAL_RCC_OscConfig+0x51c>
        tickstart = HAL_GetTick();
 8004d1e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d20:	e004      	b.n	8004d2c <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d22:	f7fe f829 	bl	8002d78 <HAL_GetTick>
 8004d26:	1bc0      	subs	r0, r0, r7
 8004d28:	2864      	cmp	r0, #100	@ 0x64
 8004d2a:	d8eb      	bhi.n	8004d04 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2c:	f8d9 1000 	ldr.w	r1, [r9]
 8004d30:	038b      	lsls	r3, r1, #14
 8004d32:	d5f6      	bpl.n	8004d22 <HAL_RCC_OscConfig+0x39a>
 8004d34:	e751      	b.n	8004bda <HAL_RCC_OscConfig+0x252>
    FlagStatus       pwrclkchanged = RESET;
 8004d36:	2600      	movs	r6, #0
 8004d38:	e6bc      	b.n	8004ab4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8004d3a:	6830      	ldr	r0, [r6, #0]
 8004d3c:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8004d40:	6032      	str	r2, [r6, #0]
        tickstart = HAL_GetTick();
 8004d42:	f7fe f819 	bl	8002d78 <HAL_GetTick>
 8004d46:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d48:	e004      	b.n	8004d54 <HAL_RCC_OscConfig+0x3cc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d4a:	f7fe f815 	bl	8002d78 <HAL_GetTick>
 8004d4e:	1bc3      	subs	r3, r0, r7
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d8d7      	bhi.n	8004d04 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d54:	6831      	ldr	r1, [r6, #0]
 8004d56:	0548      	lsls	r0, r1, #21
 8004d58:	d4f7      	bmi.n	8004d4a <HAL_RCC_OscConfig+0x3c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	e67d      	b.n	8004a5a <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d5e:	4951      	ldr	r1, [pc, #324]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004d60:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8004d64:	f043 0001 	orr.w	r0, r3, #1
 8004d68:	f8c1 0090 	str.w	r0, [r1, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8004d6c:	f7fe f804 	bl	8002d78 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d70:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8004ea4 <HAL_RCC_OscConfig+0x51c>
      tickstart = HAL_GetTick();
 8004d74:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d76:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7a:	e004      	b.n	8004d86 <HAL_RCC_OscConfig+0x3fe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7c:	f7fd fffc 	bl	8002d78 <HAL_GetTick>
 8004d80:	1bc1      	subs	r1, r0, r7
 8004d82:	4549      	cmp	r1, r9
 8004d84:	d8be      	bhi.n	8004d04 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d86:	f8d8 2090 	ldr.w	r2, [r8, #144]	@ 0x90
 8004d8a:	0792      	lsls	r2, r2, #30
 8004d8c:	d5f6      	bpl.n	8004d7c <HAL_RCC_OscConfig+0x3f4>
    if(pwrclkchanged == SET)
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	f43f aec0 	beq.w	8004b14 <HAL_RCC_OscConfig+0x18c>
 8004d94:	e03f      	b.n	8004e16 <HAL_RCC_OscConfig+0x48e>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d96:	f7ff fd57 	bl	8004848 <RCC_SetFlashLatencyFromMSIRange>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	f47f af6b 	bne.w	8004c76 <HAL_RCC_OscConfig+0x2ee>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004da0:	4840      	ldr	r0, [pc, #256]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004da2:	6803      	ldr	r3, [r0, #0]
 8004da4:	f043 0708 	orr.w	r7, r3, #8
 8004da8:	6007      	str	r7, [r0, #0]
 8004daa:	6801      	ldr	r1, [r0, #0]
 8004dac:	6a23      	ldr	r3, [r4, #32]
 8004dae:	f021 02f0 	bic.w	r2, r1, #240	@ 0xf0
 8004db2:	431a      	orrs	r2, r3
 8004db4:	6002      	str	r2, [r0, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004db6:	6847      	ldr	r7, [r0, #4]
 8004db8:	69e1      	ldr	r1, [r4, #28]
 8004dba:	f427 4c7f 	bic.w	ip, r7, #65280	@ 0xff00
 8004dbe:	ea4c 2201 	orr.w	r2, ip, r1, lsl #8
 8004dc2:	6042      	str	r2, [r0, #4]
 8004dc4:	e73b      	b.n	8004c3e <HAL_RCC_OscConfig+0x2b6>
      __HAL_RCC_HSI48_DISABLE();
 8004dc6:	f8d6 2098 	ldr.w	r2, [r6, #152]	@ 0x98
 8004dca:	f022 0701 	bic.w	r7, r2, #1
 8004dce:	f8c6 7098 	str.w	r7, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004dd2:	f7fd ffd1 	bl	8002d78 <HAL_GetTick>
 8004dd6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dd8:	e004      	b.n	8004de4 <HAL_RCC_OscConfig+0x45c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dda:	f7fd ffcd 	bl	8002d78 <HAL_GetTick>
 8004dde:	1bc3      	subs	r3, r0, r7
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d88f      	bhi.n	8004d04 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004de4:	f8d6 1098 	ldr.w	r1, [r6, #152]	@ 0x98
 8004de8:	0789      	lsls	r1, r1, #30
 8004dea:	d4f6      	bmi.n	8004dda <HAL_RCC_OscConfig+0x452>
 8004dec:	e6ae      	b.n	8004b4c <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 8004dee:	2001      	movs	r0, #1
}
 8004df0:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004df8:	603a      	str	r2, [r7, #0]
      tickstart = HAL_GetTick();
 8004dfa:	f7fd ffbd 	bl	8002d78 <HAL_GetTick>
 8004dfe:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e00:	6839      	ldr	r1, [r7, #0]
 8004e02:	05c9      	lsls	r1, r1, #23
 8004e04:	f53f ae5b 	bmi.w	8004abe <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e08:	f7fd ffb6 	bl	8002d78 <HAL_GetTick>
 8004e0c:	eba0 0308 	sub.w	r3, r0, r8
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d9f5      	bls.n	8004e00 <HAL_RCC_OscConfig+0x478>
 8004e14:	e776      	b.n	8004d04 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e16:	4e23      	ldr	r6, [pc, #140]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004e18:	6db7      	ldr	r7, [r6, #88]	@ 0x58
 8004e1a:	f027 5180 	bic.w	r1, r7, #268435456	@ 0x10000000
 8004e1e:	65b1      	str	r1, [r6, #88]	@ 0x58
 8004e20:	e678      	b.n	8004b14 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e22:	f7ff fd11 	bl	8004848 <RCC_SetFlashLatencyFromMSIRange>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f43f af09 	beq.w	8004c3e <HAL_RCC_OscConfig+0x2b6>
 8004e2c:	e723      	b.n	8004c76 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e2e:	f101 4e80 	add.w	lr, r1, #1073741824	@ 0x40000000
 8004e32:	f5ae 3c3c 	sub.w	ip, lr, #192512	@ 0x2f000
 8004e36:	f8dc 0000 	ldr.w	r0, [ip]
 8004e3a:	f440 2280 	orr.w	r2, r0, #262144	@ 0x40000
 8004e3e:	f8cc 2000 	str.w	r2, [ip]
 8004e42:	f8dc 1000 	ldr.w	r1, [ip]
 8004e46:	f441 3780 	orr.w	r7, r1, #65536	@ 0x10000
 8004e4a:	f8cc 7000 	str.w	r7, [ip]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e4e:	e762      	b.n	8004d16 <HAL_RCC_OscConfig+0x38e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e50:	4914      	ldr	r1, [pc, #80]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004e52:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8004e56:	f043 0004 	orr.w	r0, r3, #4
 8004e5a:	f8c1 0090 	str.w	r0, [r1, #144]	@ 0x90
 8004e5e:	f8d1 7090 	ldr.w	r7, [r1, #144]	@ 0x90
 8004e62:	f047 0201 	orr.w	r2, r7, #1
 8004e66:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e6a:	e77f      	b.n	8004d6c <HAL_RCC_OscConfig+0x3e4>
      pll_config = RCC->PLLCFGR;
 8004e6c:	4e0d      	ldr	r6, [pc, #52]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8004e70:	68f7      	ldr	r7, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e72:	f007 0303 	and.w	r3, r7, #3
 8004e76:	4283      	cmp	r3, r0
 8004e78:	d058      	beq.n	8004f2c <HAL_RCC_OscConfig+0x5a4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e7a:	2d0c      	cmp	r5, #12
 8004e7c:	f43f aefb 	beq.w	8004c76 <HAL_RCC_OscConfig+0x2ee>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e80:	4d08      	ldr	r5, [pc, #32]	@ (8004ea4 <HAL_RCC_OscConfig+0x51c>)
 8004e82:	6828      	ldr	r0, [r5, #0]
 8004e84:	0142      	lsls	r2, r0, #5
 8004e86:	f53f aef6 	bmi.w	8004c76 <HAL_RCC_OscConfig+0x2ee>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e8a:	682a      	ldr	r2, [r5, #0]
 8004e8c:	00d3      	lsls	r3, r2, #3
 8004e8e:	f53f aef2 	bmi.w	8004c76 <HAL_RCC_OscConfig+0x2ee>
            __HAL_RCC_PLL_DISABLE();
 8004e92:	682f      	ldr	r7, [r5, #0]
 8004e94:	f027 7380 	bic.w	r3, r7, #16777216	@ 0x1000000
 8004e98:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8004e9a:	f7fd ff6d 	bl	8002d78 <HAL_GetTick>
 8004e9e:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea0:	e00e      	b.n	8004ec0 <HAL_RCC_OscConfig+0x538>
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	0800a260 	.word	0x0800a260
 8004eac:	20000400 	.word	0x20000400
 8004eb0:	20000408 	.word	0x20000408
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fd ff60 	bl	8002d78 <HAL_GetTick>
 8004eb8:	1b80      	subs	r0, r0, r6
 8004eba:	2802      	cmp	r0, #2
 8004ebc:	f63f af22 	bhi.w	8004d04 <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec0:	6829      	ldr	r1, [r5, #0]
 8004ec2:	018f      	lsls	r7, r1, #6
 8004ec4:	d4f6      	bmi.n	8004eb4 <HAL_RCC_OscConfig+0x52c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ec6:	68ee      	ldr	r6, [r5, #12]
 8004ec8:	4838      	ldr	r0, [pc, #224]	@ (8004fac <HAL_RCC_OscConfig+0x624>)
 8004eca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004ecc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004ece:	e9d4 710d 	ldrd	r7, r1, [r4, #52]	@ 0x34
 8004ed2:	4030      	ands	r0, r6
 8004ed4:	e9d4 460f 	ldrd	r4, r6, [r4, #60]	@ 0x3c
 8004ed8:	4310      	orrs	r0, r2
 8004eda:	ea40 2e07 	orr.w	lr, r0, r7, lsl #8
 8004ede:	ea4e 6cc1 	orr.w	ip, lr, r1, lsl #27
 8004ee2:	0860      	lsrs	r0, r4, #1
 8004ee4:	f103 38ff 	add.w	r8, r3, #4294967295
 8004ee8:	ea4c 1708 	orr.w	r7, ip, r8, lsl #4
 8004eec:	0872      	lsrs	r2, r6, #1
 8004eee:	f100 39ff 	add.w	r9, r0, #4294967295
 8004ef2:	ea47 5149 	orr.w	r1, r7, r9, lsl #21
 8004ef6:	1e53      	subs	r3, r2, #1
 8004ef8:	ea41 6443 	orr.w	r4, r1, r3, lsl #25
 8004efc:	60ec      	str	r4, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8004efe:	6828      	ldr	r0, [r5, #0]
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f00:	4e2b      	ldr	r6, [pc, #172]	@ (8004fb0 <HAL_RCC_OscConfig+0x628>)
            __HAL_RCC_PLL_ENABLE();
 8004f02:	f040 7780 	orr.w	r7, r0, #16777216	@ 0x1000000
 8004f06:	602f      	str	r7, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f08:	68ea      	ldr	r2, [r5, #12]
 8004f0a:	f042 7180 	orr.w	r1, r2, #16777216	@ 0x1000000
 8004f0e:	60e9      	str	r1, [r5, #12]
            tickstart = HAL_GetTick();
 8004f10:	f7fd ff32 	bl	8002d78 <HAL_GetTick>
 8004f14:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f16:	e005      	b.n	8004f24 <HAL_RCC_OscConfig+0x59c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fd ff2e 	bl	8002d78 <HAL_GetTick>
 8004f1c:	1b03      	subs	r3, r0, r4
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	f63f aef0 	bhi.w	8004d04 <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f24:	6835      	ldr	r5, [r6, #0]
 8004f26:	01a8      	lsls	r0, r5, #6
 8004f28:	d5f6      	bpl.n	8004f18 <HAL_RCC_OscConfig+0x590>
 8004f2a:	e62d      	b.n	8004b88 <HAL_RCC_OscConfig+0x200>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f2c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004f2e:	f007 0c70 	and.w	ip, r7, #112	@ 0x70
 8004f32:	f102 38ff 	add.w	r8, r2, #4294967295
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f36:	ebbc 1f08 	cmp.w	ip, r8, lsl #4
 8004f3a:	d19e      	bne.n	8004e7a <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f3e:	f407 43fe 	and.w	r3, r7, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f42:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 8004f46:	d198      	bne.n	8004e7a <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f48:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004f4a:	f007 4078 	and.w	r0, r7, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4e:	ebb0 6fc2 	cmp.w	r0, r2, lsl #27
 8004f52:	d192      	bne.n	8004e7a <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f54:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8004f56:	0848      	lsrs	r0, r1, #1
 8004f58:	f407 03c0 	and.w	r3, r7, #6291456	@ 0x600000
 8004f5c:	f100 39ff 	add.w	r9, r0, #4294967295
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f60:	ebb3 5f49 	cmp.w	r3, r9, lsl #21
 8004f64:	d189      	bne.n	8004e7a <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f66:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004f68:	0853      	lsrs	r3, r2, #1
 8004f6a:	f007 67c0 	and.w	r7, r7, #100663296	@ 0x6000000
 8004f6e:	1e59      	subs	r1, r3, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f70:	ebb7 6f41 	cmp.w	r7, r1, lsl #25
 8004f74:	d181      	bne.n	8004e7a <HAL_RCC_OscConfig+0x4f2>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f76:	6835      	ldr	r5, [r6, #0]
 8004f78:	01a9      	lsls	r1, r5, #6
 8004f7a:	f53f ae05 	bmi.w	8004b88 <HAL_RCC_OscConfig+0x200>
          __HAL_RCC_PLL_ENABLE();
 8004f7e:	6834      	ldr	r4, [r6, #0]
 8004f80:	f044 7080 	orr.w	r0, r4, #16777216	@ 0x1000000
 8004f84:	6030      	str	r0, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f86:	68f2      	ldr	r2, [r6, #12]
 8004f88:	f042 7780 	orr.w	r7, r2, #16777216	@ 0x1000000
 8004f8c:	60f7      	str	r7, [r6, #12]
          tickstart = HAL_GetTick();
 8004f8e:	f7fd fef3 	bl	8002d78 <HAL_GetTick>
 8004f92:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f94:	e005      	b.n	8004fa2 <HAL_RCC_OscConfig+0x61a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f96:	f7fd feef 	bl	8002d78 <HAL_GetTick>
 8004f9a:	1b41      	subs	r1, r0, r5
 8004f9c:	2902      	cmp	r1, #2
 8004f9e:	f63f aeb1 	bhi.w	8004d04 <HAL_RCC_OscConfig+0x37c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa2:	6833      	ldr	r3, [r6, #0]
 8004fa4:	019a      	lsls	r2, r3, #6
 8004fa6:	d5f6      	bpl.n	8004f96 <HAL_RCC_OscConfig+0x60e>
 8004fa8:	e5ee      	b.n	8004b88 <HAL_RCC_OscConfig+0x200>
 8004faa:	bf00      	nop
 8004fac:	019d808c 	.word	0x019d808c
 8004fb0:	40021000 	.word	0x40021000

08004fb4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f000 80a0 	beq.w	80050fa <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fba:	4a54      	ldr	r2, [pc, #336]	@ (800510c <HAL_RCC_ClockConfig+0x158>)
 8004fbc:	6813      	ldr	r3, [r2, #0]
{
 8004fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc4:	f003 0007 	and.w	r0, r3, #7
 8004fc8:	4288      	cmp	r0, r1
 8004fca:	460d      	mov	r5, r1
 8004fcc:	d20c      	bcs.n	8004fe8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	6811      	ldr	r1, [r2, #0]
 8004fd0:	f021 0607 	bic.w	r6, r1, #7
 8004fd4:	432e      	orrs	r6, r5
 8004fd6:	6016      	str	r6, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd8:	6817      	ldr	r7, [r2, #0]
 8004fda:	f007 0207 	and.w	r2, r7, #7
 8004fde:	42aa      	cmp	r2, r5
 8004fe0:	d002      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004fe2:	2001      	movs	r0, #1
}
 8004fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fec:	f003 0701 	and.w	r7, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff0:	d570      	bpl.n	80050d4 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ff2:	4e47      	ldr	r6, [pc, #284]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 8004ff4:	68a0      	ldr	r0, [r4, #8]
 8004ff6:	68b1      	ldr	r1, [r6, #8]
 8004ff8:	f001 02f0 	and.w	r2, r1, #240	@ 0xf0
 8004ffc:	4290      	cmp	r0, r2
 8004ffe:	d904      	bls.n	800500a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005000:	68b1      	ldr	r1, [r6, #8]
 8005002:	f021 02f0 	bic.w	r2, r1, #240	@ 0xf0
 8005006:	4302      	orrs	r2, r0
 8005008:	60b2      	str	r2, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500a:	b337      	cbz	r7, 800505a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500c:	6861      	ldr	r1, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800500e:	4b40      	ldr	r3, [pc, #256]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005010:	2903      	cmp	r1, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005012:	681f      	ldr	r7, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005014:	d065      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005016:	2902      	cmp	r1, #2
 8005018:	d06c      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800501a:	2900      	cmp	r1, #0
 800501c:	d171      	bne.n	8005102 <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800501e:	07be      	lsls	r6, r7, #30
 8005020:	d5df      	bpl.n	8004fe2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005022:	4e3b      	ldr	r6, [pc, #236]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 8005024:	68b0      	ldr	r0, [r6, #8]
 8005026:	f020 0203 	bic.w	r2, r0, #3
 800502a:	430a      	orrs	r2, r1
 800502c:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 800502e:	f7fd fea3 	bl	8002d78 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005032:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005036:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005038:	e004      	b.n	8005044 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800503a:	f7fd fe9d 	bl	8002d78 <HAL_GetTick>
 800503e:	1bc1      	subs	r1, r0, r7
 8005040:	4541      	cmp	r1, r8
 8005042:	d85c      	bhi.n	80050fe <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005044:	68b1      	ldr	r1, [r6, #8]
 8005046:	6860      	ldr	r0, [r4, #4]
 8005048:	f001 0c0c 	and.w	ip, r1, #12
 800504c:	ebbc 0f80 	cmp.w	ip, r0, lsl #2
 8005050:	d1f3      	bne.n	800503a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	0799      	lsls	r1, r3, #30
 8005056:	d506      	bpl.n	8005066 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005058:	68a0      	ldr	r0, [r4, #8]
 800505a:	4e2d      	ldr	r6, [pc, #180]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 800505c:	68b7      	ldr	r7, [r6, #8]
 800505e:	f007 08f0 	and.w	r8, r7, #240	@ 0xf0
 8005062:	4580      	cmp	r8, r0
 8005064:	d840      	bhi.n	80050e8 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005066:	4829      	ldr	r0, [pc, #164]	@ (800510c <HAL_RCC_ClockConfig+0x158>)
 8005068:	6806      	ldr	r6, [r0, #0]
 800506a:	f006 0707 	and.w	r7, r6, #7
 800506e:	42af      	cmp	r7, r5
 8005070:	d909      	bls.n	8005086 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005072:	6802      	ldr	r2, [r0, #0]
 8005074:	f022 0107 	bic.w	r1, r2, #7
 8005078:	4329      	orrs	r1, r5
 800507a:	6001      	str	r1, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507c:	6800      	ldr	r0, [r0, #0]
 800507e:	f000 0607 	and.w	r6, r0, #7
 8005082:	42ae      	cmp	r6, r5
 8005084:	d1ad      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005086:	075a      	lsls	r2, r3, #29
 8005088:	d506      	bpl.n	8005098 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508a:	4d21      	ldr	r5, [pc, #132]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 800508c:	68e7      	ldr	r7, [r4, #12]
 800508e:	68aa      	ldr	r2, [r5, #8]
 8005090:	f422 61e0 	bic.w	r1, r2, #1792	@ 0x700
 8005094:	4339      	orrs	r1, r7
 8005096:	60a9      	str	r1, [r5, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005098:	071b      	lsls	r3, r3, #28
 800509a:	d507      	bpl.n	80050ac <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800509c:	481c      	ldr	r0, [pc, #112]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 800509e:	6924      	ldr	r4, [r4, #16]
 80050a0:	6883      	ldr	r3, [r0, #8]
 80050a2:	f423 5660 	bic.w	r6, r3, #14336	@ 0x3800
 80050a6:	ea46 05c4 	orr.w	r5, r6, r4, lsl #3
 80050aa:	6085      	str	r5, [r0, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050ac:	f7ff fc12 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 80050b0:	4a17      	ldr	r2, [pc, #92]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 80050b2:	4c18      	ldr	r4, [pc, #96]	@ (8005114 <HAL_RCC_ClockConfig+0x160>)
 80050b4:	6891      	ldr	r1, [r2, #8]
 80050b6:	4e18      	ldr	r6, [pc, #96]	@ (8005118 <HAL_RCC_ClockConfig+0x164>)
 80050b8:	f3c1 1303 	ubfx	r3, r1, #4, #4
 80050bc:	4607      	mov	r7, r0
 80050be:	5ce5      	ldrb	r5, [r4, r3]
  status = HAL_InitTick(uwTickPrio);
 80050c0:	4816      	ldr	r0, [pc, #88]	@ (800511c <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050c2:	f005 021f 	and.w	r2, r5, #31
 80050c6:	40d7      	lsrs	r7, r2
 80050c8:	6037      	str	r7, [r6, #0]
  status = HAL_InitTick(uwTickPrio);
 80050ca:	6800      	ldr	r0, [r0, #0]
}
 80050cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80050d0:	f7fd be10 	b.w	8002cf4 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d4:	2f00      	cmp	r7, #0
 80050d6:	d0c6      	beq.n	8005066 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d8:	6861      	ldr	r1, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050dc:	2903      	cmp	r1, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050de:	681f      	ldr	r7, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050e0:	d199      	bne.n	8005016 <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e2:	01bb      	lsls	r3, r7, #6
 80050e4:	d49d      	bmi.n	8005022 <HAL_RCC_ClockConfig+0x6e>
 80050e6:	e77c      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e8:	68b2      	ldr	r2, [r6, #8]
 80050ea:	f022 01f0 	bic.w	r1, r2, #240	@ 0xf0
 80050ee:	4301      	orrs	r1, r0
 80050f0:	60b1      	str	r1, [r6, #8]
 80050f2:	e7b8      	b.n	8005066 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f4:	03bf      	lsls	r7, r7, #14
 80050f6:	d494      	bmi.n	8005022 <HAL_RCC_ClockConfig+0x6e>
 80050f8:	e773      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80050fa:	2001      	movs	r0, #1
}
 80050fc:	4770      	bx	lr
        return HAL_TIMEOUT;
 80050fe:	2003      	movs	r0, #3
 8005100:	e770      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005102:	0578      	lsls	r0, r7, #21
 8005104:	f57f af6d 	bpl.w	8004fe2 <HAL_RCC_ClockConfig+0x2e>
 8005108:	e78b      	b.n	8005022 <HAL_RCC_ClockConfig+0x6e>
 800510a:	bf00      	nop
 800510c:	40022000 	.word	0x40022000
 8005110:	40021000 	.word	0x40021000
 8005114:	0800a260 	.word	0x0800a260
 8005118:	20000400 	.word	0x20000400
 800511c:	20000408 	.word	0x20000408

08005120 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005120:	4b01      	ldr	r3, [pc, #4]	@ (8005128 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000400 	.word	0x20000400

0800512c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800512c:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800512e:	4a07      	ldr	r2, [pc, #28]	@ (800514c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005130:	6898      	ldr	r0, [r3, #8]
  return SystemCoreClock;
 8005132:	4907      	ldr	r1, [pc, #28]	@ (8005150 <HAL_RCC_GetPCLK1Freq+0x24>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005134:	f3c0 2c02 	ubfx	ip, r0, #8, #3
 8005138:	6808      	ldr	r0, [r1, #0]
 800513a:	f812 300c 	ldrb.w	r3, [r2, ip]
 800513e:	f003 021f 	and.w	r2, r3, #31
}
 8005142:	40d0      	lsrs	r0, r2
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000
 800514c:	0800a258 	.word	0x0800a258
 8005150:	20000400 	.word	0x20000400

08005154 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005154:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005156:	4a07      	ldr	r2, [pc, #28]	@ (8005174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005158:	6898      	ldr	r0, [r3, #8]
  return SystemCoreClock;
 800515a:	4907      	ldr	r1, [pc, #28]	@ (8005178 <HAL_RCC_GetPCLK2Freq+0x24>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800515c:	f3c0 2cc2 	ubfx	ip, r0, #11, #3
 8005160:	6808      	ldr	r0, [r1, #0]
 8005162:	f812 300c 	ldrb.w	r3, [r2, ip]
 8005166:	f003 021f 	and.w	r2, r3, #31
}
 800516a:	40d0      	lsrs	r0, r2
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000
 8005174:	0800a258 	.word	0x0800a258
 8005178:	20000400 	.word	0x20000400

0800517c <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800517c:	4a45      	ldr	r2, [pc, #276]	@ (8005294 <RCCEx_PLLSAI1_Config+0x118>)
{
 800517e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005180:	68d6      	ldr	r6, [r2, #12]
{
 8005182:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005184:	07b1      	lsls	r1, r6, #30
{
 8005186:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005188:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800518a:	d006      	beq.n	800519a <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800518c:	68d6      	ldr	r6, [r2, #12]
 800518e:	f006 0103 	and.w	r1, r6, #3
 8005192:	4281      	cmp	r1, r0
 8005194:	d04b      	beq.n	800522e <RCCEx_PLLSAI1_Config+0xb2>
 8005196:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8005198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800519a:	2802      	cmp	r0, #2
 800519c:	d058      	beq.n	8005250 <RCCEx_PLLSAI1_Config+0xd4>
 800519e:	2803      	cmp	r0, #3
 80051a0:	d04f      	beq.n	8005242 <RCCEx_PLLSAI1_Config+0xc6>
 80051a2:	2801      	cmp	r0, #1
 80051a4:	d1f7      	bne.n	8005196 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	0793      	lsls	r3, r2, #30
 80051aa:	d5f5      	bpl.n	8005198 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ac:	4e39      	ldr	r6, [pc, #228]	@ (8005294 <RCCEx_PLLSAI1_Config+0x118>)
 80051ae:	6867      	ldr	r7, [r4, #4]
 80051b0:	68f1      	ldr	r1, [r6, #12]
 80051b2:	f021 0373 	bic.w	r3, r1, #115	@ 0x73
 80051b6:	4318      	orrs	r0, r3
 80051b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80051bc:	ea40 120c 	orr.w	r2, r0, ip, lsl #4
 80051c0:	60f2      	str	r2, [r6, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80051c2:	4e34      	ldr	r6, [pc, #208]	@ (8005294 <RCCEx_PLLSAI1_Config+0x118>)
 80051c4:	6832      	ldr	r2, [r6, #0]
 80051c6:	f022 6180 	bic.w	r1, r2, #67108864	@ 0x4000000
 80051ca:	6031      	str	r1, [r6, #0]
    tickstart = HAL_GetTick();
 80051cc:	f7fd fdd4 	bl	8002d78 <HAL_GetTick>
 80051d0:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051d2:	e004      	b.n	80051de <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051d4:	f7fd fdd0 	bl	8002d78 <HAL_GetTick>
 80051d8:	1bc2      	subs	r2, r0, r7
 80051da:	2a02      	cmp	r2, #2
 80051dc:	d83c      	bhi.n	8005258 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051de:	6833      	ldr	r3, [r6, #0]
 80051e0:	011a      	lsls	r2, r3, #4
 80051e2:	d4f7      	bmi.n	80051d4 <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051e4:	68a0      	ldr	r0, [r4, #8]
 80051e6:	0207      	lsls	r7, r0, #8
      if(Divider == DIVIDER_P_UPDATE)
 80051e8:	2d00      	cmp	r5, #0
 80051ea:	d137      	bne.n	800525c <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051ec:	6935      	ldr	r5, [r6, #16]
 80051ee:	68e1      	ldr	r1, [r4, #12]
 80051f0:	f025 4c78 	bic.w	ip, r5, #4160749568	@ 0xf8000000
 80051f4:	ea47 63c1 	orr.w	r3, r7, r1, lsl #27
 80051f8:	f42c 42fe 	bic.w	r2, ip, #32512	@ 0x7f00
 80051fc:	4313      	orrs	r3, r2
 80051fe:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8005200:	4d24      	ldr	r5, [pc, #144]	@ (8005294 <RCCEx_PLLSAI1_Config+0x118>)
 8005202:	682e      	ldr	r6, [r5, #0]
 8005204:	f046 6080 	orr.w	r0, r6, #67108864	@ 0x4000000
 8005208:	6028      	str	r0, [r5, #0]
      tickstart = HAL_GetTick();
 800520a:	f7fd fdb5 	bl	8002d78 <HAL_GetTick>
 800520e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005210:	e004      	b.n	800521c <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005212:	f7fd fdb1 	bl	8002d78 <HAL_GetTick>
 8005216:	1b83      	subs	r3, r0, r6
 8005218:	2b02      	cmp	r3, #2
 800521a:	d81d      	bhi.n	8005258 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800521c:	682f      	ldr	r7, [r5, #0]
 800521e:	013b      	lsls	r3, r7, #4
 8005220:	d5f7      	bpl.n	8005212 <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005222:	6929      	ldr	r1, [r5, #16]
 8005224:	69a4      	ldr	r4, [r4, #24]
 8005226:	4321      	orrs	r1, r4
 8005228:	2000      	movs	r0, #0
 800522a:	6129      	str	r1, [r5, #16]
}
 800522c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800522e:	2900      	cmp	r1, #0
 8005230:	d0b1      	beq.n	8005196 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005232:	68d3      	ldr	r3, [r2, #12]
       ||
 8005234:	6860      	ldr	r0, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005236:	f3c3 1702 	ubfx	r7, r3, #4, #3
 800523a:	3701      	adds	r7, #1
       ||
 800523c:	4287      	cmp	r7, r0
 800523e:	d1aa      	bne.n	8005196 <RCCEx_PLLSAI1_Config+0x1a>
 8005240:	e7bf      	b.n	80051c2 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	039e      	lsls	r6, r3, #14
 8005246:	d4b1      	bmi.n	80051ac <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005248:	6817      	ldr	r7, [r2, #0]
 800524a:	0379      	lsls	r1, r7, #13
 800524c:	d5a3      	bpl.n	8005196 <RCCEx_PLLSAI1_Config+0x1a>
 800524e:	e7ad      	b.n	80051ac <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005250:	6811      	ldr	r1, [r2, #0]
 8005252:	054f      	lsls	r7, r1, #21
 8005254:	d59f      	bpl.n	8005196 <RCCEx_PLLSAI1_Config+0x1a>
 8005256:	e7a9      	b.n	80051ac <RCCEx_PLLSAI1_Config+0x30>
 8005258:	2003      	movs	r0, #3
}
 800525a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800525c:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800525e:	6931      	ldr	r1, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8005260:	d00b      	beq.n	800527a <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005262:	6965      	ldr	r5, [r4, #20]
 8005264:	f021 6ec0 	bic.w	lr, r1, #100663296	@ 0x6000000
 8005268:	086a      	lsrs	r2, r5, #1
 800526a:	f42e 43fe 	bic.w	r3, lr, #32512	@ 0x7f00
 800526e:	1e50      	subs	r0, r2, #1
 8005270:	433b      	orrs	r3, r7
 8005272:	ea43 6740 	orr.w	r7, r3, r0, lsl #25
 8005276:	6137      	str	r7, [r6, #16]
 8005278:	e7c2      	b.n	8005200 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800527a:	6925      	ldr	r5, [r4, #16]
 800527c:	f421 01c0 	bic.w	r1, r1, #6291456	@ 0x600000
 8005280:	086a      	lsrs	r2, r5, #1
 8005282:	f421 43fe 	bic.w	r3, r1, #32512	@ 0x7f00
 8005286:	1e50      	subs	r0, r2, #1
 8005288:	433b      	orrs	r3, r7
 800528a:	ea43 5740 	orr.w	r7, r3, r0, lsl #21
 800528e:	6137      	str	r7, [r6, #16]
 8005290:	e7b6      	b.n	8005200 <RCCEx_PLLSAI1_Config+0x84>
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000

08005298 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005298:	4a3e      	ldr	r2, [pc, #248]	@ (8005394 <RCCEx_PLLSAI2_Config+0xfc>)
{
 800529a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800529c:	68d6      	ldr	r6, [r2, #12]
{
 800529e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052a0:	07b1      	lsls	r1, r6, #30
{
 80052a2:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052a4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052a6:	d006      	beq.n	80052b6 <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052a8:	68d6      	ldr	r6, [r2, #12]
 80052aa:	f006 0103 	and.w	r1, r6, #3
 80052ae:	4281      	cmp	r1, r0
 80052b0:	d04b      	beq.n	800534a <RCCEx_PLLSAI2_Config+0xb2>
 80052b2:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80052b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 80052b6:	2802      	cmp	r0, #2
 80052b8:	d058      	beq.n	800536c <RCCEx_PLLSAI2_Config+0xd4>
 80052ba:	2803      	cmp	r0, #3
 80052bc:	d04f      	beq.n	800535e <RCCEx_PLLSAI2_Config+0xc6>
 80052be:	2801      	cmp	r0, #1
 80052c0:	d1f7      	bne.n	80052b2 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	0793      	lsls	r3, r2, #30
 80052c6:	d5f5      	bpl.n	80052b4 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052c8:	4e32      	ldr	r6, [pc, #200]	@ (8005394 <RCCEx_PLLSAI2_Config+0xfc>)
 80052ca:	6867      	ldr	r7, [r4, #4]
 80052cc:	68f1      	ldr	r1, [r6, #12]
 80052ce:	f021 0373 	bic.w	r3, r1, #115	@ 0x73
 80052d2:	4318      	orrs	r0, r3
 80052d4:	f107 3cff 	add.w	ip, r7, #4294967295
 80052d8:	ea40 120c 	orr.w	r2, r0, ip, lsl #4
 80052dc:	60f2      	str	r2, [r6, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 80052de:	4e2d      	ldr	r6, [pc, #180]	@ (8005394 <RCCEx_PLLSAI2_Config+0xfc>)
 80052e0:	6832      	ldr	r2, [r6, #0]
 80052e2:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 80052e6:	6031      	str	r1, [r6, #0]
    tickstart = HAL_GetTick();
 80052e8:	f7fd fd46 	bl	8002d78 <HAL_GetTick>
 80052ec:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052ee:	e004      	b.n	80052fa <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052f0:	f7fd fd42 	bl	8002d78 <HAL_GetTick>
 80052f4:	1bc2      	subs	r2, r0, r7
 80052f6:	2a02      	cmp	r2, #2
 80052f8:	d83c      	bhi.n	8005374 <RCCEx_PLLSAI2_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052fa:	6833      	ldr	r3, [r6, #0]
 80052fc:	009a      	lsls	r2, r3, #2
 80052fe:	d4f7      	bmi.n	80052f0 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005300:	68a0      	ldr	r0, [r4, #8]
 8005302:	0207      	lsls	r7, r0, #8
      if(Divider == DIVIDER_P_UPDATE)
 8005304:	2d00      	cmp	r5, #0
 8005306:	d137      	bne.n	8005378 <RCCEx_PLLSAI2_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005308:	6975      	ldr	r5, [r6, #20]
 800530a:	68e1      	ldr	r1, [r4, #12]
 800530c:	f025 4c78 	bic.w	ip, r5, #4160749568	@ 0xf8000000
 8005310:	ea47 63c1 	orr.w	r3, r7, r1, lsl #27
 8005314:	f42c 42fe 	bic.w	r2, ip, #32512	@ 0x7f00
 8005318:	4313      	orrs	r3, r2
 800531a:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800531c:	4d1d      	ldr	r5, [pc, #116]	@ (8005394 <RCCEx_PLLSAI2_Config+0xfc>)
 800531e:	682e      	ldr	r6, [r5, #0]
 8005320:	f046 5080 	orr.w	r0, r6, #268435456	@ 0x10000000
 8005324:	6028      	str	r0, [r5, #0]
      tickstart = HAL_GetTick();
 8005326:	f7fd fd27 	bl	8002d78 <HAL_GetTick>
 800532a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800532c:	e004      	b.n	8005338 <RCCEx_PLLSAI2_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800532e:	f7fd fd23 	bl	8002d78 <HAL_GetTick>
 8005332:	1b83      	subs	r3, r0, r6
 8005334:	2b02      	cmp	r3, #2
 8005336:	d81d      	bhi.n	8005374 <RCCEx_PLLSAI2_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005338:	682f      	ldr	r7, [r5, #0]
 800533a:	00bb      	lsls	r3, r7, #2
 800533c:	d5f7      	bpl.n	800532e <RCCEx_PLLSAI2_Config+0x96>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800533e:	6969      	ldr	r1, [r5, #20]
 8005340:	6964      	ldr	r4, [r4, #20]
 8005342:	4321      	orrs	r1, r4
 8005344:	2000      	movs	r0, #0
 8005346:	6169      	str	r1, [r5, #20]
}
 8005348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800534a:	2900      	cmp	r1, #0
 800534c:	d0b1      	beq.n	80052b2 <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800534e:	68d3      	ldr	r3, [r2, #12]
       ||
 8005350:	6860      	ldr	r0, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005352:	f3c3 1702 	ubfx	r7, r3, #4, #3
 8005356:	3701      	adds	r7, #1
       ||
 8005358:	4287      	cmp	r7, r0
 800535a:	d1aa      	bne.n	80052b2 <RCCEx_PLLSAI2_Config+0x1a>
 800535c:	e7bf      	b.n	80052de <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	039e      	lsls	r6, r3, #14
 8005362:	d4b1      	bmi.n	80052c8 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005364:	6817      	ldr	r7, [r2, #0]
 8005366:	0379      	lsls	r1, r7, #13
 8005368:	d5a3      	bpl.n	80052b2 <RCCEx_PLLSAI2_Config+0x1a>
 800536a:	e7ad      	b.n	80052c8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800536c:	6811      	ldr	r1, [r2, #0]
 800536e:	054f      	lsls	r7, r1, #21
 8005370:	d59f      	bpl.n	80052b2 <RCCEx_PLLSAI2_Config+0x1a>
 8005372:	e7a9      	b.n	80052c8 <RCCEx_PLLSAI2_Config+0x30>
 8005374:	2003      	movs	r0, #3
}
 8005376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005378:	6975      	ldr	r5, [r6, #20]
 800537a:	6921      	ldr	r1, [r4, #16]
 800537c:	f025 6ec0 	bic.w	lr, r5, #100663296	@ 0x6000000
 8005380:	084b      	lsrs	r3, r1, #1
 8005382:	f42e 42fe 	bic.w	r2, lr, #32512	@ 0x7f00
 8005386:	1e58      	subs	r0, r3, #1
 8005388:	433a      	orrs	r2, r7
 800538a:	ea42 6740 	orr.w	r7, r2, r0, lsl #25
 800538e:	6177      	str	r7, [r6, #20]
 8005390:	e7c4      	b.n	800531c <RCCEx_PLLSAI2_Config+0x84>
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000

08005398 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800539c:	6803      	ldr	r3, [r0, #0]
 800539e:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 80053a2:	b083      	sub	sp, #12
 80053a4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053a6:	d016      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80053a8:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80053aa:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80053ae:	f000 81e8 	beq.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80053b2:	f200 8123 	bhi.w	80055fc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80053b6:	2900      	cmp	r1, #0
 80053b8:	f000 81b7 	beq.w	800572a <HAL_RCCEx_PeriphCLKConfig+0x392>
 80053bc:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80053c0:	f040 81d1 	bne.w	8005766 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053c4:	2100      	movs	r1, #0
 80053c6:	3020      	adds	r0, #32
 80053c8:	f7ff ff66 	bl	8005298 <RCCEx_PLLSAI2_Config>
 80053cc:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053ce:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80053d0:	2e00      	cmp	r6, #0
 80053d2:	f000 81e3 	beq.w	800579c <HAL_RCCEx_PeriphCLKConfig+0x404>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053d6:	04d8      	lsls	r0, r3, #19
 80053d8:	f140 8121 	bpl.w	800561e <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Sai2ClockSelection)
 80053dc:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80053de:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 80053e2:	f000 81d4 	beq.w	800578e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80053e6:	f200 817f 	bhi.w	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80053ea:	2900      	cmp	r1, #0
 80053ec:	f000 81a6 	beq.w	800573c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80053f0:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80053f4:	f040 81b9 	bne.w	800576a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053f8:	2100      	movs	r1, #0
 80053fa:	f104 0020 	add.w	r0, r4, #32
 80053fe:	f7ff ff4b 	bl	8005298 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005402:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005404:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8005406:	2f00      	cmp	r7, #0
 8005408:	f040 8175 	bne.w	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800540c:	49b4      	ldr	r1, [pc, #720]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800540e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8005410:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005414:	f022 7540 	bic.w	r5, r2, #50331648	@ 0x3000000
 8005418:	4305      	orrs	r5, r0
 800541a:	f8c1 5088 	str.w	r5, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800541e:	0399      	lsls	r1, r3, #14
 8005420:	f100 8101 	bmi.w	8005626 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005424:	07d9      	lsls	r1, r3, #31
 8005426:	d508      	bpl.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005428:	4fad      	ldr	r7, [pc, #692]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800542a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800542c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8005430:	f020 0103 	bic.w	r1, r0, #3
 8005434:	4311      	orrs	r1, r2
 8005436:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800543a:	079a      	lsls	r2, r3, #30
 800543c:	d508      	bpl.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800543e:	4da8      	ldr	r5, [pc, #672]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005440:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005442:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 8005446:	f027 010c 	bic.w	r1, r7, #12
 800544a:	4301      	orrs	r1, r0
 800544c:	f8c5 1088 	str.w	r1, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005450:	075f      	lsls	r7, r3, #29
 8005452:	d508      	bpl.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005454:	4da2      	ldr	r5, [pc, #648]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005456:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005458:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
 800545c:	f022 0730 	bic.w	r7, r2, #48	@ 0x30
 8005460:	430f      	orrs	r7, r1
 8005462:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005466:	071d      	lsls	r5, r3, #28
 8005468:	d508      	bpl.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800546a:	4d9d      	ldr	r5, [pc, #628]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800546c:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 800546e:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8005472:	f020 02c0 	bic.w	r2, r0, #192	@ 0xc0
 8005476:	433a      	orrs	r2, r7
 8005478:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800547c:	06d8      	lsls	r0, r3, #27
 800547e:	d508      	bpl.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005480:	4997      	ldr	r1, [pc, #604]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005482:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005484:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 8005488:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
 800548c:	4302      	orrs	r2, r0
 800548e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005492:	0699      	lsls	r1, r3, #26
 8005494:	d508      	bpl.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005496:	4f92      	ldr	r7, [pc, #584]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005498:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800549a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800549e:	f421 6540 	bic.w	r5, r1, #3072	@ 0xc00
 80054a2:	4315      	orrs	r5, r2
 80054a4:	f8c7 5088 	str.w	r5, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054a8:	059a      	lsls	r2, r3, #22
 80054aa:	d508      	bpl.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ac:	4f8c      	ldr	r7, [pc, #560]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80054ae:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80054b0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80054b4:	f420 2140 	bic.w	r1, r0, #786432	@ 0xc0000
 80054b8:	4329      	orrs	r1, r5
 80054ba:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054be:	055f      	lsls	r7, r3, #21
 80054c0:	d508      	bpl.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054c2:	4f87      	ldr	r7, [pc, #540]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80054c4:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80054c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80054ca:	f422 1140 	bic.w	r1, r2, #3145728	@ 0x300000
 80054ce:	4301      	orrs	r1, r0
 80054d0:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054d4:	065d      	lsls	r5, r3, #25
 80054d6:	d508      	bpl.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054d8:	4d81      	ldr	r5, [pc, #516]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80054da:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80054dc:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 80054e0:	f427 5240 	bic.w	r2, r7, #12288	@ 0x3000
 80054e4:	430a      	orrs	r2, r1
 80054e6:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054ea:	0618      	lsls	r0, r3, #24
 80054ec:	d508      	bpl.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054ee:	4d7c      	ldr	r5, [pc, #496]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80054f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054f2:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 80054f6:	f420 4740 	bic.w	r7, r0, #49152	@ 0xc000
 80054fa:	4317      	orrs	r7, r2
 80054fc:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005500:	05d9      	lsls	r1, r3, #23
 8005502:	d508      	bpl.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005504:	4976      	ldr	r1, [pc, #472]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005506:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005508:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 800550c:	f425 3740 	bic.w	r7, r5, #196608	@ 0x30000
 8005510:	4307      	orrs	r7, r0
 8005512:	f8c1 7088 	str.w	r7, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005516:	02da      	lsls	r2, r3, #11
 8005518:	d508      	bpl.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800551a:	4971      	ldr	r1, [pc, #452]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800551c:	6de7      	ldr	r7, [r4, #92]	@ 0x5c
 800551e:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 8005522:	f022 0503 	bic.w	r5, r2, #3
 8005526:	433d      	orrs	r5, r7
 8005528:	f8c1 509c 	str.w	r5, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800552c:	049f      	lsls	r7, r3, #18
 800552e:	d510      	bpl.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005530:	496b      	ldr	r1, [pc, #428]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005532:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8005534:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
 8005538:	f020 6240 	bic.w	r2, r0, #201326592	@ 0xc000000
 800553c:	432a      	orrs	r2, r5
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800553e:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005542:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005546:	f000 8104 	beq.w	8005752 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800554a:	f1b5 6f80 	cmp.w	r5, #67108864	@ 0x4000000
 800554e:	f000 8132 	beq.w	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005552:	031d      	lsls	r5, r3, #12
 8005554:	d510      	bpl.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005556:	4962      	ldr	r1, [pc, #392]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005558:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 800555a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800555e:	f022 6540 	bic.w	r5, r2, #201326592	@ 0xc000000
 8005562:	433d      	orrs	r5, r7
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005564:	f1b7 6f00 	cmp.w	r7, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005568:	f8c1 5088 	str.w	r5, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800556c:	f000 80f6 	beq.w	800575c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005570:	f1b7 6f80 	cmp.w	r7, #67108864	@ 0x4000000
 8005574:	f000 8129 	beq.w	80057ca <HAL_RCCEx_PeriphCLKConfig+0x432>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005578:	0358      	lsls	r0, r3, #13
 800557a:	d510      	bpl.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800557c:	4958      	ldr	r1, [pc, #352]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800557e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005580:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 8005584:	f025 6740 	bic.w	r7, r5, #201326592	@ 0xc000000
 8005588:	4307      	orrs	r7, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800558a:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800558e:	f8c1 7088 	str.w	r7, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005592:	f000 80d9 	beq.w	8005748 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005596:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800559a:	f000 8120 	beq.w	80057de <HAL_RCCEx_PeriphCLKConfig+0x446>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800559e:	0459      	lsls	r1, r3, #17
 80055a0:	d510      	bpl.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055a2:	4f4f      	ldr	r7, [pc, #316]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80055a4:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80055a6:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80055aa:	f021 5040 	bic.w	r0, r1, #805306368	@ 0x30000000
 80055ae:	4310      	orrs	r0, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055b0:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055b4:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055b8:	f000 80d9 	beq.w	800576e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055bc:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80055c0:	f000 80ee 	beq.w	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055c4:	041a      	lsls	r2, r3, #16
 80055c6:	d509      	bpl.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055c8:	4d45      	ldr	r5, [pc, #276]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80055ca:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80055ce:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 80055d2:	f027 4180 	bic.w	r1, r7, #1073741824	@ 0x40000000
 80055d6:	4301      	orrs	r1, r0
 80055d8:	f8c5 1088 	str.w	r1, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055dc:	03db      	lsls	r3, r3, #15
 80055de:	d509      	bpl.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055e0:	4a3f      	ldr	r2, [pc, #252]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80055e2:	f8d4 4084 	ldr.w	r4, [r4, #132]	@ 0x84
 80055e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80055ea:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80055ee:	4325      	orrs	r5, r4
 80055f0:	f8c2 5088 	str.w	r5, [r2, #136]	@ 0x88
}
 80055f4:	4630      	mov	r0, r6
 80055f6:	b003      	add	sp, #12
 80055f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 80055fc:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8005600:	f040 80b1 	bne.w	8005766 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005604:	4e36      	ldr	r6, [pc, #216]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005606:	f8d6 7088 	ldr.w	r7, [r6, #136]	@ 0x88
 800560a:	f427 0040 	bic.w	r0, r7, #12582912	@ 0xc00000
 800560e:	4308      	orrs	r0, r1
 8005610:	f8c6 0088 	str.w	r0, [r6, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005614:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005616:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800561a:	f53f aedf 	bmi.w	80053dc <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 800561e:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005620:	0399      	lsls	r1, r3, #14
 8005622:	f57f aeff 	bpl.w	8005424 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005626:	4b2e      	ldr	r3, [pc, #184]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005628:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800562a:	00ca      	lsls	r2, r1, #3
 800562c:	d565      	bpl.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x362>
    FlagStatus       pwrclkchanged = RESET;
 800562e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005632:	4d2c      	ldr	r5, [pc, #176]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005634:	6829      	ldr	r1, [r5, #0]
 8005636:	f441 7080 	orr.w	r0, r1, #256	@ 0x100
 800563a:	6028      	str	r0, [r5, #0]
    tickstart = HAL_GetTick();
 800563c:	f7fd fb9c 	bl	8002d78 <HAL_GetTick>
 8005640:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005642:	e005      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005644:	f7fd fb98 	bl	8002d78 <HAL_GetTick>
 8005648:	eba0 0009 	sub.w	r0, r0, r9
 800564c:	2802      	cmp	r0, #2
 800564e:	d860      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005650:	682a      	ldr	r2, [r5, #0]
 8005652:	05d3      	lsls	r3, r2, #23
 8005654:	d5f6      	bpl.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    if(ret == HAL_OK)
 8005656:	2f00      	cmp	r7, #0
 8005658:	f040 80cb 	bne.w	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800565c:	4d20      	ldr	r5, [pc, #128]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800565e:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005662:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005666:	f417 7940 	ands.w	r9, r7, #768	@ 0x300
 800566a:	d026      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x322>
 800566c:	4591      	cmp	r9, r2
 800566e:	d024      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x322>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005670:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8005674:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005678:	f443 3080 	orr.w	r0, r3, #65536	@ 0x10000
 800567c:	f8c5 0090 	str.w	r0, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005680:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005684:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005688:	f427 3380 	bic.w	r3, r7, #65536	@ 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800568c:	07cf      	lsls	r7, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800568e:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8005692:	f8c5 0090 	str.w	r0, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005696:	d510      	bpl.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x322>
        tickstart = HAL_GetTick();
 8005698:	f7fd fb6e 	bl	8002d78 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800569c:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80056a0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a2:	e004      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x316>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f7fd fb68 	bl	8002d78 <HAL_GetTick>
 80056a8:	1bc3      	subs	r3, r0, r7
 80056aa:	454b      	cmp	r3, r9
 80056ac:	d831      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x37a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ae:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 80056b2:	0790      	lsls	r0, r2, #30
 80056b4:	d5f6      	bpl.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b6:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 80056ba:	4d09      	ldr	r5, [pc, #36]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80056bc:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 80056c0:	f421 7740 	bic.w	r7, r1, #768	@ 0x300
 80056c4:	4317      	orrs	r7, r2
 80056c6:	f8c5 7090 	str.w	r7, [r5, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056ca:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 80056cc:	f1b8 0f00 	cmp.w	r8, #0
 80056d0:	f43f aea8 	beq.w	8005424 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d4:	4902      	ldr	r1, [pc, #8]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80056d6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80056d8:	f022 5580 	bic.w	r5, r2, #268435456	@ 0x10000000
 80056dc:	658d      	str	r5, [r1, #88]	@ 0x58
 80056de:	e6a1      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80056e0:	40021000 	.word	0x40021000
 80056e4:	40007000 	.word	0x40007000
    switch(PeriphClkInit->Sai2ClockSelection)
 80056e8:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80056ec:	d13d      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch(PeriphClkInit->Sai1ClockSelection)
 80056ee:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 80056f0:	2f00      	cmp	r7, #0
 80056f2:	f43f ae8b 	beq.w	800540c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80056f6:	463e      	mov	r6, r7
 80056f8:	e792      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PWR_CLK_ENABLE();
 80056fa:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80056fc:	f040 5280 	orr.w	r2, r0, #268435456	@ 0x10000000
 8005700:	659a      	str	r2, [r3, #88]	@ 0x58
 8005702:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8005704:	f005 5380 	and.w	r3, r5, #268435456	@ 0x10000000
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800570c:	f04f 0801 	mov.w	r8, #1
 8005710:	e78f      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = HAL_TIMEOUT;
 8005712:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005714:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8005716:	f1b8 0f00 	cmp.w	r8, #0
 800571a:	f43f ae83 	beq.w	8005424 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800571e:	4936      	ldr	r1, [pc, #216]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005720:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8005722:	f022 5580 	bic.w	r5, r2, #268435456	@ 0x10000000
 8005726:	658d      	str	r5, [r1, #88]	@ 0x58
 8005728:	e67c      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800572a:	3004      	adds	r0, #4
 800572c:	f7ff fd26 	bl	800517c <RCCEx_PLLSAI1_Config>
 8005730:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005732:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005734:	2e00      	cmp	r6, #0
 8005736:	f47f ae4e 	bne.w	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800573a:	e02f      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x404>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800573c:	1d20      	adds	r0, r4, #4
 800573e:	f7ff fd1d 	bl	800517c <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005742:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005744:	4607      	mov	r7, r0
      break;
 8005746:	e65e      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005748:	68ca      	ldr	r2, [r1, #12]
 800574a:	f442 1580 	orr.w	r5, r2, #1048576	@ 0x100000
 800574e:	60cd      	str	r5, [r1, #12]
 8005750:	e725      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005752:	68cf      	ldr	r7, [r1, #12]
 8005754:	f447 1080 	orr.w	r0, r7, #1048576	@ 0x100000
 8005758:	60c8      	str	r0, [r1, #12]
 800575a:	e6fa      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800575c:	68c8      	ldr	r0, [r1, #12]
 800575e:	f440 1280 	orr.w	r2, r0, #1048576	@ 0x100000
 8005762:	60ca      	str	r2, [r1, #12]
 8005764:	e708      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005766:	2601      	movs	r6, #1
 8005768:	e635      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 800576a:	2601      	movs	r6, #1
 800576c:	e757      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800576e:	2102      	movs	r1, #2
 8005770:	1d20      	adds	r0, r4, #4
 8005772:	f7ff fd03 	bl	800517c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005776:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005778:	2800      	cmp	r0, #0
 800577a:	f43f af23 	beq.w	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800577e:	4606      	mov	r6, r0
 8005780:	e720      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005782:	481d      	ldr	r0, [pc, #116]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005784:	68c2      	ldr	r2, [r0, #12]
 8005786:	f442 3580 	orr.w	r5, r2, #65536	@ 0x10000
 800578a:	60c5      	str	r5, [r0, #12]
    if(ret == HAL_OK)
 800578c:	e73a      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800578e:	491a      	ldr	r1, [pc, #104]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005790:	68ca      	ldr	r2, [r1, #12]
 8005792:	f442 3580 	orr.w	r5, r2, #65536	@ 0x10000
 8005796:	60cd      	str	r5, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8005798:	4637      	mov	r7, r6
 800579a:	e7a9      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800579c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800579e:	e731      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80057a0:	2102      	movs	r1, #2
 80057a2:	f104 0020 	add.w	r0, r4, #32
 80057a6:	f7ff fd77 	bl	8005298 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057aa:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80057ac:	2800      	cmp	r0, #0
 80057ae:	f43f af09 	beq.w	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057b2:	4606      	mov	r6, r0
 80057b4:	e706      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057b6:	2101      	movs	r1, #1
 80057b8:	1d20      	adds	r0, r4, #4
 80057ba:	f7ff fcdf 	bl	800517c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80057be:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f43f aec6 	beq.w	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80057c6:	4606      	mov	r6, r0
 80057c8:	e6c3      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ca:	2101      	movs	r1, #1
 80057cc:	1d20      	adds	r0, r4, #4
 80057ce:	f7ff fcd5 	bl	800517c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057d2:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f43f aecf 	beq.w	8005578 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057da:	4606      	mov	r6, r0
 80057dc:	e6cc      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057de:	2101      	movs	r1, #1
 80057e0:	1d20      	adds	r0, r4, #4
 80057e2:	f7ff fccb 	bl	800517c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057e6:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80057e8:	2800      	cmp	r0, #0
 80057ea:	f43f aed8 	beq.w	800559e <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057ee:	4606      	mov	r6, r0
 80057f0:	e6d5      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80057f2:	463e      	mov	r6, r7
 80057f4:	e78e      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 80057f6:	bf00      	nop
 80057f8:	40021000 	.word	0x40021000

080057fc <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80057fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005800:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005802:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005804:	460e      	mov	r6, r1
 8005806:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8005808:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800580c:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800580e:	f7fd fab3 	bl	8002d78 <HAL_GetTick>
 8005812:	4437      	add	r7, r6
 8005814:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005816:	f7fd faaf 	bl	8002d78 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800581a:	4958      	ldr	r1, [pc, #352]	@ (800597c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x180>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800581c:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800581e:	680a      	ldr	r2, [r1, #0]
 8005820:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8005824:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 8005828:	0d19      	lsrs	r1, r3, #20
 800582a:	fb07 f101 	mul.w	r1, r7, r1
 800582e:	3601      	adds	r6, #1
 8005830:	9101      	str	r1, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005832:	d15c      	bne.n	80058ee <SPI_WaitFifoStateUntilTimeout.constprop.0+0xf2>
 8005834:	68a5      	ldr	r5, [r4, #8]
 8005836:	f415 6fc0 	tst.w	r5, #1536	@ 0x600
 800583a:	d054      	beq.n	80058e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800583c:	7b26      	ldrb	r6, [r4, #12]
 800583e:	fa5f f886 	uxtb.w	r8, r6
 8005842:	f88d 8003 	strb.w	r8, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005846:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800584a:	68a3      	ldr	r3, [r4, #8]
 800584c:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005850:	d049      	beq.n	80058e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005852:	7b21      	ldrb	r1, [r4, #12]
 8005854:	b2c8      	uxtb	r0, r1
 8005856:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 800585a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800585e:	68a7      	ldr	r7, [r4, #8]
 8005860:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 8005864:	d03f      	beq.n	80058e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005866:	7b22      	ldrb	r2, [r4, #12]
 8005868:	b2d5      	uxtb	r5, r2
 800586a:	f88d 5003 	strb.w	r5, [sp, #3]
      UNUSED(tmpreg8);
 800586e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005872:	68a6      	ldr	r6, [r4, #8]
 8005874:	f416 6fc0 	tst.w	r6, #1536	@ 0x600
 8005878:	d035      	beq.n	80058e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 800587a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800587e:	fa5f fe8c 	uxtb.w	lr, ip
 8005882:	f88d e003 	strb.w	lr, [sp, #3]
      UNUSED(tmpreg8);
 8005886:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800588a:	68a3      	ldr	r3, [r4, #8]
 800588c:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005890:	d029      	beq.n	80058e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005892:	7b21      	ldrb	r1, [r4, #12]
 8005894:	b2c8      	uxtb	r0, r1
 8005896:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 800589a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800589e:	68a7      	ldr	r7, [r4, #8]
 80058a0:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 80058a4:	d01f      	beq.n	80058e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 80058a6:	7b22      	ldrb	r2, [r4, #12]
 80058a8:	b2d5      	uxtb	r5, r2
 80058aa:	f88d 5003 	strb.w	r5, [sp, #3]
      UNUSED(tmpreg8);
 80058ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80058b2:	68a6      	ldr	r6, [r4, #8]
 80058b4:	f416 6fc0 	tst.w	r6, #1536	@ 0x600
 80058b8:	d015      	beq.n	80058e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 80058ba:	f894 800c 	ldrb.w	r8, [r4, #12]
 80058be:	fa5f fc88 	uxtb.w	ip, r8
 80058c2:	f88d c003 	strb.w	ip, [sp, #3]
      UNUSED(tmpreg8);
 80058c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80058ca:	68a3      	ldr	r3, [r4, #8]
 80058cc:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80058d0:	d009      	beq.n	80058e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 80058d2:	7b21      	ldrb	r1, [r4, #12]
 80058d4:	b2c8      	uxtb	r0, r1
 80058d6:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 80058da:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80058de:	68a7      	ldr	r7, [r4, #8]
 80058e0:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 80058e4:	d1aa      	bne.n	800583c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 80058e6:	2000      	movs	r0, #0
}
 80058e8:	b002      	add	sp, #8
 80058ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ee:	4606      	mov	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80058f0:	4620      	mov	r0, r4
 80058f2:	e015      	b.n	8005920 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x124>
      tmpreg8 = *ptmpreg8;
 80058f4:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80058f8:	fa5f fe8c 	uxtb.w	lr, ip
 80058fc:	f88d e003 	strb.w	lr, [sp, #3]
      UNUSED(tmpreg8);
 8005900:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005904:	f7fd fa38 	bl	8002d78 <HAL_GetTick>
 8005908:	1b83      	subs	r3, r0, r6
 800590a:	42bb      	cmp	r3, r7
 800590c:	d20d      	bcs.n	800592a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x12e>
      if (count == 0U)
 800590e:	9901      	ldr	r1, [sp, #4]
      count--;
 8005910:	9801      	ldr	r0, [sp, #4]
        tmp_timeout = 0U;
 8005912:	2900      	cmp	r1, #0
      count--;
 8005914:	f100 32ff 	add.w	r2, r0, #4294967295
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005918:	6828      	ldr	r0, [r5, #0]
      count--;
 800591a:	9201      	str	r2, [sp, #4]
        tmp_timeout = 0U;
 800591c:	bf08      	it	eq
 800591e:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8005920:	6882      	ldr	r2, [r0, #8]
 8005922:	f412 6fc0 	tst.w	r2, #1536	@ 0x600
 8005926:	d1e5      	bne.n	80058f4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xf8>
 8005928:	e7dd      	b.n	80058e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800592a:	e9d5 7400 	ldrd	r7, r4, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800592e:	687e      	ldr	r6, [r7, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005930:	f5b4 7f82 	cmp.w	r4, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005934:	f026 03e0 	bic.w	r3, r6, #224	@ 0xe0
 8005938:	607b      	str	r3, [r7, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800593a:	d013      	beq.n	8005964 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x168>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800593c:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800593e:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8005942:	d107      	bne.n	8005954 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x158>
          SPI_RESET_CRC(hspi);
 8005944:	683e      	ldr	r6, [r7, #0]
 8005946:	f426 5300 	bic.w	r3, r6, #8192	@ 0x2000
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	f441 5000 	orr.w	r0, r1, #8192	@ 0x2000
 8005952:	6038      	str	r0, [r7, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005954:	2701      	movs	r7, #1
        __HAL_UNLOCK(hspi);
 8005956:	2200      	movs	r2, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005958:	f885 705d 	strb.w	r7, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800595c:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005960:	2003      	movs	r0, #3
 8005962:	e7c1      	b.n	80058e8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xec>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005964:	68a9      	ldr	r1, [r5, #8]
 8005966:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800596a:	d002      	beq.n	8005972 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x176>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800596c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005970:	d1e4      	bne.n	800593c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x140>
          __HAL_SPI_DISABLE(hspi);
 8005972:	6838      	ldr	r0, [r7, #0]
 8005974:	f020 0240 	bic.w	r2, r0, #64	@ 0x40
 8005978:	603a      	str	r2, [r7, #0]
 800597a:	e7df      	b.n	800593c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x140>
 800597c:	20000400 	.word	0x20000400

08005980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005984:	b084      	sub	sp, #16
  __IO uint8_t  tmpreg8 = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	188f      	adds	r7, r1, r2
{
 800598a:	460d      	mov	r5, r1
 800598c:	4616      	mov	r6, r2
  __IO uint8_t  tmpreg8 = 0;
 800598e:	f88d 3007 	strb.w	r3, [sp, #7]
{
 8005992:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005994:	f7fd f9f0 	bl	8002d78 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005998:	f8df 8190 	ldr.w	r8, [pc, #400]	@ 8005b2c <SPI_EndRxTxTransaction+0x1ac>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800599c:	eba7 0900 	sub.w	r9, r7, r0
  tmp_tickstart = HAL_GetTick();
 80059a0:	f7fd f9ea 	bl	8002d78 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059a4:	f8d8 1000 	ldr.w	r1, [r8]
 80059a8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80059ac:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80059b0:	0d19      	lsrs	r1, r3, #20
 80059b2:	fb09 f201 	mul.w	r2, r9, r1
 80059b6:	9202      	str	r2, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80059b8:	1c6a      	adds	r2, r5, #1
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	bf18      	it	ne
 80059be:	4682      	movne	sl, r0
 80059c0:	d160      	bne.n	8005a84 <SPI_EndRxTxTransaction+0x104>
 80059c2:	6898      	ldr	r0, [r3, #8]
 80059c4:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 80059c8:	d01b      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x82>
 80059ca:	6899      	ldr	r1, [r3, #8]
 80059cc:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 80059d0:	d017      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x82>
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	f412 5fc0 	tst.w	r2, #6144	@ 0x1800
 80059d8:	d013      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x82>
 80059da:	6898      	ldr	r0, [r3, #8]
 80059dc:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 80059e0:	d00f      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x82>
 80059e2:	6899      	ldr	r1, [r3, #8]
 80059e4:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 80059e8:	d00b      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x82>
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	f412 5fc0 	tst.w	r2, #6144	@ 0x1800
 80059f0:	d007      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x82>
 80059f2:	6898      	ldr	r0, [r3, #8]
 80059f4:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 80059f8:	d003      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x82>
 80059fa:	6899      	ldr	r1, [r3, #8]
 80059fc:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 8005a00:	d1df      	bne.n	80059c2 <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a02:	f7fd f9b9 	bl	8002d78 <HAL_GetTick>
 8005a06:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005a08:	f7fd f9b6 	bl	8002d78 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a0c:	f8d8 2000 	ldr.w	r2, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a10:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8005a12:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a14:	f3c2 30cb 	ubfx	r0, r2, #15, #12
 8005a18:	fb07 f000 	mul.w	r0, r7, r0
 8005a1c:	1c69      	adds	r1, r5, #1
 8005a1e:	9003      	str	r0, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a20:	d144      	bne.n	8005aac <SPI_EndRxTxTransaction+0x12c>
 8005a22:	689f      	ldr	r7, [r3, #8]
 8005a24:	063a      	lsls	r2, r7, #24
 8005a26:	d514      	bpl.n	8005a52 <SPI_EndRxTxTransaction+0xd2>
 8005a28:	6898      	ldr	r0, [r3, #8]
 8005a2a:	0600      	lsls	r0, r0, #24
 8005a2c:	d511      	bpl.n	8005a52 <SPI_EndRxTxTransaction+0xd2>
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	0611      	lsls	r1, r2, #24
 8005a32:	d50e      	bpl.n	8005a52 <SPI_EndRxTxTransaction+0xd2>
 8005a34:	6899      	ldr	r1, [r3, #8]
 8005a36:	060a      	lsls	r2, r1, #24
 8005a38:	d50b      	bpl.n	8005a52 <SPI_EndRxTxTransaction+0xd2>
 8005a3a:	689f      	ldr	r7, [r3, #8]
 8005a3c:	063f      	lsls	r7, r7, #24
 8005a3e:	d508      	bpl.n	8005a52 <SPI_EndRxTxTransaction+0xd2>
 8005a40:	6898      	ldr	r0, [r3, #8]
 8005a42:	0600      	lsls	r0, r0, #24
 8005a44:	d505      	bpl.n	8005a52 <SPI_EndRxTxTransaction+0xd2>
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	0611      	lsls	r1, r2, #24
 8005a4a:	d502      	bpl.n	8005a52 <SPI_EndRxTxTransaction+0xd2>
 8005a4c:	6899      	ldr	r1, [r3, #8]
 8005a4e:	060a      	lsls	r2, r1, #24
 8005a50:	d4e7      	bmi.n	8005a22 <SPI_EndRxTxTransaction+0xa2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a52:	4632      	mov	r2, r6
 8005a54:	4629      	mov	r1, r5
 8005a56:	4620      	mov	r0, r4
 8005a58:	f7ff fed0 	bl	80057fc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005a5c:	bb50      	cbnz	r0, 8005ab4 <SPI_EndRxTxTransaction+0x134>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005a5e:	b004      	add	sp, #16
 8005a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a64:	f7fd f988 	bl	8002d78 <HAL_GetTick>
 8005a68:	eba0 030a 	sub.w	r3, r0, sl
 8005a6c:	4599      	cmp	r9, r3
 8005a6e:	d929      	bls.n	8005ac4 <SPI_EndRxTxTransaction+0x144>
      if (count == 0U)
 8005a70:	9802      	ldr	r0, [sp, #8]
      count--;
 8005a72:	9a02      	ldr	r2, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a74:	6823      	ldr	r3, [r4, #0]
        tmp_timeout = 0U;
 8005a76:	2800      	cmp	r0, #0
      count--;
 8005a78:	f102 31ff 	add.w	r1, r2, #4294967295
        tmp_timeout = 0U;
 8005a7c:	bf08      	it	eq
 8005a7e:	f04f 0900 	moveq.w	r9, #0
      count--;
 8005a82:	9102      	str	r1, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8005a8a:	d1eb      	bne.n	8005a64 <SPI_EndRxTxTransaction+0xe4>
 8005a8c:	e7b9      	b.n	8005a02 <SPI_EndRxTxTransaction+0x82>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a8e:	f7fd f973 	bl	8002d78 <HAL_GetTick>
 8005a92:	eba0 0308 	sub.w	r3, r0, r8
 8005a96:	429f      	cmp	r7, r3
 8005a98:	d914      	bls.n	8005ac4 <SPI_EndRxTxTransaction+0x144>
      if (count == 0U)
 8005a9a:	9803      	ldr	r0, [sp, #12]
      count--;
 8005a9c:	9a03      	ldr	r2, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a9e:	6823      	ldr	r3, [r4, #0]
        tmp_timeout = 0U;
 8005aa0:	2800      	cmp	r0, #0
      count--;
 8005aa2:	f102 31ff 	add.w	r1, r2, #4294967295
        tmp_timeout = 0U;
 8005aa6:	bf08      	it	eq
 8005aa8:	2700      	moveq	r7, #0
      count--;
 8005aaa:	9103      	str	r1, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aac:	6899      	ldr	r1, [r3, #8]
 8005aae:	060b      	lsls	r3, r1, #24
 8005ab0:	d4ed      	bmi.n	8005a8e <SPI_EndRxTxTransaction+0x10e>
 8005ab2:	e7ce      	b.n	8005a52 <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab4:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8005ab6:	f045 0620 	orr.w	r6, r5, #32
 8005aba:	6626      	str	r6, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005abc:	2003      	movs	r0, #3
}
 8005abe:	b004      	add	sp, #16
 8005ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac4:	e9d4 a500 	ldrd	sl, r5, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ac8:	f8da 6004 	ldr.w	r6, [sl, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005acc:	f5b5 7f82 	cmp.w	r5, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ad0:	f026 07e0 	bic.w	r7, r6, #224	@ 0xe0
 8005ad4:	f8ca 7004 	str.w	r7, [sl, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad8:	d01a      	beq.n	8005b10 <SPI_EndRxTxTransaction+0x190>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ada:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ae0:	d10b      	bne.n	8005afa <SPI_EndRxTxTransaction+0x17a>
          SPI_RESET_CRC(hspi);
 8005ae2:	f8da 5000 	ldr.w	r5, [sl]
 8005ae6:	f425 5600 	bic.w	r6, r5, #8192	@ 0x2000
 8005aea:	f8ca 6000 	str.w	r6, [sl]
 8005aee:	f8da 7000 	ldr.w	r7, [sl]
 8005af2:	f447 5000 	orr.w	r0, r7, #8192	@ 0x2000
 8005af6:	f8ca 0000 	str.w	r0, [sl]
        hspi->State = HAL_SPI_STATE_READY;
 8005afa:	2201      	movs	r2, #1
 8005afc:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b00:	6e21      	ldr	r1, [r4, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8005b02:	2500      	movs	r5, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b04:	f041 0320 	orr.w	r3, r1, #32
        __HAL_UNLOCK(hspi);
 8005b08:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b0c:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b0e:	e7d5      	b.n	8005abc <SPI_EndRxTxTransaction+0x13c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b10:	68a0      	ldr	r0, [r4, #8]
 8005b12:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005b16:	d002      	beq.n	8005b1e <SPI_EndRxTxTransaction+0x19e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b18:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8005b1c:	d1dd      	bne.n	8005ada <SPI_EndRxTxTransaction+0x15a>
          __HAL_SPI_DISABLE(hspi);
 8005b1e:	f8da 2000 	ldr.w	r2, [sl]
 8005b22:	f022 0140 	bic.w	r1, r2, #64	@ 0x40
 8005b26:	f8ca 1000 	str.w	r1, [sl]
 8005b2a:	e7d6      	b.n	8005ada <SPI_EndRxTxTransaction+0x15a>
 8005b2c:	20000400 	.word	0x20000400

08005b30 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d074      	beq.n	8005c1e <HAL_SPI_Init+0xee>
{
 8005b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b38:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b3a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d053      	beq.n	8005be8 <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b46:	f894 505d 	ldrb.w	r5, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b4e:	f005 06ff 	and.w	r6, r5, #255	@ 0xff
 8005b52:	2d00      	cmp	r5, #0
 8005b54:	d057      	beq.n	8005c06 <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 8005b56:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b58:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005b5a:	2702      	movs	r7, #2
 8005b5c:	f884 705d 	strb.w	r7, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005b60:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b62:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8005b66:	f023 0540 	bic.w	r5, r3, #64	@ 0x40
 8005b6a:	600d      	str	r5, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b6c:	d842      	bhi.n	8005bf4 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b6e:	d151      	bne.n	8005c14 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b72:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b76:	f406 5500 	and.w	r5, r6, #8192	@ 0x2000
 8005b7a:	6863      	ldr	r3, [r4, #4]
 8005b7c:	68a6      	ldr	r6, [r4, #8]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b7e:	f402 6870 	and.w	r8, r2, #3840	@ 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b82:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b86:	6923      	ldr	r3, [r4, #16]
 8005b88:	f406 4704 	and.w	r7, r6, #33792	@ 0x8400
 8005b8c:	433a      	orrs	r2, r7
 8005b8e:	f003 0602 	and.w	r6, r3, #2
 8005b92:	4316      	orrs	r6, r2
 8005b94:	6962      	ldr	r2, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b96:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b98:	69e3      	ldr	r3, [r4, #28]
 8005b9a:	f002 0201 	and.w	r2, r2, #1
 8005b9e:	4332      	orrs	r2, r6
 8005ba0:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ba2:	f007 0e08 	and.w	lr, r7, #8
 8005ba6:	ea4e 0e08 	orr.w	lr, lr, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005baa:	6a27      	ldr	r7, [r4, #32]
 8005bac:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 8005bb0:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	ea43 0208 	orr.w	r2, r3, r8
 8005bba:	f007 0780 	and.w	r7, r7, #128	@ 0x80
 8005bbe:	433a      	orrs	r2, r7
 8005bc0:	432a      	orrs	r2, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bc2:	0c35      	lsrs	r5, r6, #16
 8005bc4:	f005 0604 	and.w	r6, r5, #4
 8005bc8:	f000 0010 	and.w	r0, r0, #16
 8005bcc:	ea4e 0706 	orr.w	r7, lr, r6
 8005bd0:	4307      	orrs	r7, r0
 8005bd2:	ea47 030c 	orr.w	r3, r7, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bd6:	600a      	str	r2, [r1, #0]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bd8:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bda:	604b      	str	r3, [r1, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 8005bdc:	2101      	movs	r1, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bde:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005be0:	f884 105d 	strb.w	r1, [r4, #93]	@ 0x5d
}
 8005be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005be8:	6861      	ldr	r1, [r4, #4]
 8005bea:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8005bee:	d0aa      	beq.n	8005b46 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bf0:	61e0      	str	r0, [r4, #28]
 8005bf2:	e7a8      	b.n	8005b46 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bf4:	f5b2 6f70 	cmp.w	r2, #3840	@ 0xf00
 8005bf8:	d113      	bne.n	8005c22 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bfa:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bfc:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c00:	f407 5500 	and.w	r5, r7, #8192	@ 0x2000
 8005c04:	e7b9      	b.n	8005b7a <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 8005c06:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005c08:	f884 605c 	strb.w	r6, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005c0c:	f7fc fddc 	bl	80027c8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c10:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005c12:	e7a0      	b.n	8005b56 <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c14:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c18:	2500      	movs	r5, #0
 8005c1a:	62a5      	str	r5, [r4, #40]	@ 0x28
 8005c1c:	e7ad      	b.n	8005b7a <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8005c1e:	2001      	movs	r0, #1
}
 8005c20:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c22:	f04f 0c00 	mov.w	ip, #0
 8005c26:	e7f7      	b.n	8005c18 <HAL_SPI_Init+0xe8>

08005c28 <HAL_SPI_TransmitReceive>:
{
 8005c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	4691      	mov	r9, r2
 8005c30:	461f      	mov	r7, r3
 8005c32:	9e08      	ldr	r6, [sp, #32]
 8005c34:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 8005c36:	f7fd f89f 	bl	8002d78 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005c3a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8005c3e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c40:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005c42:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c44:	d00b      	beq.n	8005c5e <HAL_SPI_TransmitReceive+0x36>
 8005c46:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005c4a:	f040 8099 	bne.w	8005d80 <HAL_SPI_TransmitReceive+0x158>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005c4e:	68a0      	ldr	r0, [r4, #8]
 8005c50:	b2d9      	uxtb	r1, r3
 8005c52:	2800      	cmp	r0, #0
 8005c54:	f040 8094 	bne.w	8005d80 <HAL_SPI_TransmitReceive+0x158>
 8005c58:	2904      	cmp	r1, #4
 8005c5a:	f040 8091 	bne.w	8005d80 <HAL_SPI_TransmitReceive+0x158>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c5e:	f1b8 0f00 	cmp.w	r8, #0
 8005c62:	f000 8168 	beq.w	8005f36 <HAL_SPI_TransmitReceive+0x30e>
 8005c66:	f1b9 0f00 	cmp.w	r9, #0
 8005c6a:	f000 8164 	beq.w	8005f36 <HAL_SPI_TransmitReceive+0x30e>
 8005c6e:	2f00      	cmp	r7, #0
 8005c70:	f000 8161 	beq.w	8005f36 <HAL_SPI_TransmitReceive+0x30e>
  __HAL_LOCK(hspi);
 8005c74:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	f000 8081 	beq.w	8005d80 <HAL_SPI_TransmitReceive+0x158>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c7e:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c82:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c84:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c88:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c8a:	bf1c      	itt	ne
 8005c8c:	2005      	movne	r0, #5
 8005c8e:	f884 005d 	strbne.w	r0, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c92:	2300      	movs	r3, #0
  __HAL_LOCK(hspi);
 8005c94:	f04f 0c01 	mov.w	ip, #1
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c9c:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8005c9e:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 8005ca2:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ca6:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hspi);
 8005ca8:	f884 c05c 	strb.w	ip, [r4, #92]	@ 0x5c
  hspi->RxXferSize  = Size;
 8005cac:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005cb0:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005cb4:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005cb6:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005cb8:	d965      	bls.n	8005d86 <HAL_SPI_TransmitReceive+0x15e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cba:	6858      	ldr	r0, [r3, #4]
 8005cbc:	f420 5180 	bic.w	r1, r0, #4096	@ 0x1000
 8005cc0:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	0640      	lsls	r0, r0, #25
 8005cc6:	d403      	bmi.n	8005cd0 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8005cc8:	6819      	ldr	r1, [r3, #0]
 8005cca:	f041 0040 	orr.w	r0, r1, #64	@ 0x40
 8005cce:	6018      	str	r0, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cd0:	2a00      	cmp	r2, #0
 8005cd2:	f000 80f1 	beq.w	8005eb8 <HAL_SPI_TransmitReceive+0x290>
 8005cd6:	2f01      	cmp	r7, #1
 8005cd8:	f000 80ee 	beq.w	8005eb8 <HAL_SPI_TransmitReceive+0x290>
 8005cdc:	1c73      	adds	r3, r6, #1
        txallowed = 1U;
 8005cde:	f04f 0701 	mov.w	r7, #1
 8005ce2:	d031      	beq.n	8005d48 <HAL_SPI_TransmitReceive+0x120>
 8005ce4:	e0cf      	b.n	8005e86 <HAL_SPI_TransmitReceive+0x25e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	6890      	ldr	r0, [r2, #8]
 8005cea:	0780      	lsls	r0, r0, #30
 8005cec:	d513      	bpl.n	8005d16 <HAL_SPI_TransmitReceive+0xee>
 8005cee:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8005cf2:	fa1f f38c 	uxth.w	r3, ip
 8005cf6:	b173      	cbz	r3, 8005d16 <HAL_SPI_TransmitReceive+0xee>
 8005cf8:	b167      	cbz	r7, 8005d14 <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cfa:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8005cfc:	f837 1b02 	ldrh.w	r1, [r7], #2
 8005d00:	60d1      	str	r1, [r2, #12]
        hspi->TxXferCount--;
 8005d02:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d06:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d08:	f10e 30ff 	add.w	r0, lr, #4294967295
 8005d0c:	fa1f f880 	uxth.w	r8, r0
 8005d10:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005d14:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d16:	6893      	ldr	r3, [r2, #8]
 8005d18:	f013 0901 	ands.w	r9, r3, #1
 8005d1c:	d012      	beq.n	8005d44 <HAL_SPI_TransmitReceive+0x11c>
 8005d1e:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
 8005d22:	fa1f f18c 	uxth.w	r1, ip
 8005d26:	b169      	cbz	r1, 8005d44 <HAL_SPI_TransmitReceive+0x11c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d28:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005d2a:	68d2      	ldr	r2, [r2, #12]
 8005d2c:	f820 2b02 	strh.w	r2, [r0], #2
        hspi->RxXferCount--;
 8005d30:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d34:	6420      	str	r0, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d36:	f10e 38ff 	add.w	r8, lr, #4294967295
 8005d3a:	fa1f f388 	uxth.w	r3, r8
        txallowed = 1U;
 8005d3e:	464f      	mov	r7, r9
        hspi->RxXferCount--;
 8005d40:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d44:	f7fd f818 	bl	8002d78 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d48:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005d4a:	b290      	uxth	r0, r2
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d1ca      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0xbe>
 8005d50:	f8b4 9046 	ldrh.w	r9, [r4, #70]	@ 0x46
 8005d54:	fa1f f389 	uxth.w	r3, r9
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1c4      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0xbe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4620      	mov	r0, r4
 8005d62:	f7ff fe0d 	bl	8005980 <SPI_EndRxTxTransaction>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f040 80e0 	bne.w	8005f2c <HAL_SPI_TransmitReceive+0x304>
  hspi->State = HAL_SPI_STATE_READY;
 8005d6c:	2701      	movs	r7, #1
 8005d6e:	f884 705d 	strb.w	r7, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d72:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8005d74:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d78:	1e08      	subs	r0, r1, #0
 8005d7a:	bf18      	it	ne
 8005d7c:	2001      	movne	r0, #1
 8005d7e:	e000      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x15a>
    return HAL_BUSY;
 8005d80:	2002      	movs	r0, #2
}
 8005d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d86:	2f01      	cmp	r7, #1
 8005d88:	f000 80f5 	beq.w	8005f76 <HAL_SPI_TransmitReceive+0x34e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d8c:	6858      	ldr	r0, [r3, #4]
 8005d8e:	f420 5180 	bic.w	r1, r0, #4096	@ 0x1000
 8005d92:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d94:	681f      	ldr	r7, [r3, #0]
 8005d96:	0679      	lsls	r1, r7, #25
 8005d98:	d403      	bmi.n	8005da2 <HAL_SPI_TransmitReceive+0x17a>
    __HAL_SPI_ENABLE(hspi);
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	f040 0140 	orr.w	r1, r0, #64	@ 0x40
 8005da0:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005da2:	b97a      	cbnz	r2, 8005dc4 <HAL_SPI_TransmitReceive+0x19c>
      if (hspi->TxXferCount > 1U)
 8005da4:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
 8005da8:	fa1f f28e 	uxth.w	r2, lr
 8005dac:	2a01      	cmp	r2, #1
 8005dae:	f240 80c4 	bls.w	8005f3a <HAL_SPI_TransmitReceive+0x312>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005db2:	4642      	mov	r2, r8
 8005db4:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005db8:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount -= 2U;
 8005dba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dbc:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005dbe:	1e9f      	subs	r7, r3, #2
 8005dc0:	b2b8      	uxth	r0, r7
 8005dc2:	87e0      	strh	r0, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005dc4:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dc6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005dc8:	b291      	uxth	r1, r2
 8005dca:	b929      	cbnz	r1, 8005dd8 <HAL_SPI_TransmitReceive+0x1b0>
 8005dcc:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
 8005dd0:	fa1f f38e 	uxth.w	r3, lr
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0c1      	beq.n	8005d5c <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	6890      	ldr	r0, [r2, #8]
 8005ddc:	0781      	lsls	r1, r0, #30
 8005dde:	d506      	bpl.n	8005dee <HAL_SPI_TransmitReceive+0x1c6>
 8005de0:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8005de2:	b28b      	uxth	r3, r1
 8005de4:	b11b      	cbz	r3, 8005dee <HAL_SPI_TransmitReceive+0x1c6>
 8005de6:	2f00      	cmp	r7, #0
 8005de8:	f040 8081 	bne.w	8005eee <HAL_SPI_TransmitReceive+0x2c6>
        txallowed = 0U;
 8005dec:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dee:	6893      	ldr	r3, [r2, #8]
 8005df0:	f013 0801 	ands.w	r8, r3, #1
 8005df4:	d01b      	beq.n	8005e2e <HAL_SPI_TransmitReceive+0x206>
 8005df6:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
 8005dfa:	b281      	uxth	r1, r0
 8005dfc:	b1b9      	cbz	r1, 8005e2e <HAL_SPI_TransmitReceive+0x206>
        if (hspi->RxXferCount > 1U)
 8005dfe:	f8b4 7046 	ldrh.w	r7, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e02:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8005e04:	b2bb      	uxth	r3, r7
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d964      	bls.n	8005ed4 <HAL_SPI_TransmitReceive+0x2ac>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e0a:	68d0      	ldr	r0, [r2, #12]
 8005e0c:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->RxXferCount -= 2U;
 8005e10:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e14:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005e16:	f1ac 0e02 	sub.w	lr, ip, #2
 8005e1a:	fa1f f18e 	uxth.w	r1, lr
 8005e1e:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005e22:	f8b4 7046 	ldrh.w	r7, [r4, #70]	@ 0x46
 8005e26:	b2bb      	uxth	r3, r7
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d940      	bls.n	8005eae <HAL_SPI_TransmitReceive+0x286>
        txallowed = 1U;
 8005e2c:	4647      	mov	r7, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e2e:	f7fc ffa3 	bl	8002d78 <HAL_GetTick>
 8005e32:	1b42      	subs	r2, r0, r5
 8005e34:	42b2      	cmp	r2, r6
 8005e36:	d3c6      	bcc.n	8005dc6 <HAL_SPI_TransmitReceive+0x19e>
 8005e38:	1c73      	adds	r3, r6, #1
 8005e3a:	d0c4      	beq.n	8005dc6 <HAL_SPI_TransmitReceive+0x19e>
        hspi->State = HAL_SPI_STATE_READY;
 8005e3c:	2601      	movs	r6, #1
        __HAL_UNLOCK(hspi);
 8005e3e:	2500      	movs	r5, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005e40:	f884 605d 	strb.w	r6, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005e44:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005e48:	2003      	movs	r0, #3
}
 8005e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e4e:	b157      	cbz	r7, 8005e66 <HAL_SPI_TransmitReceive+0x23e>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e50:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8005e52:	f837 3b02 	ldrh.w	r3, [r7], #2
 8005e56:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005e58:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e5c:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e5e:	f108 31ff 	add.w	r1, r8, #4294967295
 8005e62:	b288      	uxth	r0, r1
 8005e64:	87e0      	strh	r0, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8005e66:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e68:	6893      	ldr	r3, [r2, #8]
 8005e6a:	f013 0901 	ands.w	r9, r3, #1
 8005e6e:	d005      	beq.n	8005e7c <HAL_SPI_TransmitReceive+0x254>
 8005e70:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
 8005e74:	fa1f f18c 	uxth.w	r1, ip
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	d16d      	bne.n	8005f58 <HAL_SPI_TransmitReceive+0x330>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e7c:	f7fc ff7c 	bl	8002d78 <HAL_GetTick>
 8005e80:	1b41      	subs	r1, r0, r5
 8005e82:	42b1      	cmp	r1, r6
 8005e84:	d2da      	bcs.n	8005e3c <HAL_SPI_TransmitReceive+0x214>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e86:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
 8005e8a:	fa1f f38e 	uxth.w	r3, lr
 8005e8e:	b92b      	cbnz	r3, 8005e9c <HAL_SPI_TransmitReceive+0x274>
 8005e90:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005e94:	b288      	uxth	r0, r1
 8005e96:	2800      	cmp	r0, #0
 8005e98:	f43f af60 	beq.w	8005d5c <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e9c:	6822      	ldr	r2, [r4, #0]
 8005e9e:	6893      	ldr	r3, [r2, #8]
 8005ea0:	0799      	lsls	r1, r3, #30
 8005ea2:	d5e1      	bpl.n	8005e68 <HAL_SPI_TransmitReceive+0x240>
 8005ea4:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8005ea6:	b288      	uxth	r0, r1
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d0dd      	beq.n	8005e68 <HAL_SPI_TransmitReceive+0x240>
 8005eac:	e7cf      	b.n	8005e4e <HAL_SPI_TransmitReceive+0x226>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eae:	6850      	ldr	r0, [r2, #4]
 8005eb0:	f440 5180 	orr.w	r1, r0, #4096	@ 0x1000
 8005eb4:	6051      	str	r1, [r2, #4]
 8005eb6:	e7b9      	b.n	8005e2c <HAL_SPI_TransmitReceive+0x204>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005eb8:	4647      	mov	r7, r8
 8005eba:	f837 2b02 	ldrh.w	r2, [r7], #2
 8005ebe:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005ec0:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec4:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8005ec6:	f108 39ff 	add.w	r9, r8, #4294967295
 8005eca:	fa1f fc89 	uxth.w	ip, r9
 8005ece:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8005ed2:	e703      	b.n	8005cdc <HAL_SPI_TransmitReceive+0xb4>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ed4:	7b12      	ldrb	r2, [r2, #12]
 8005ed6:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8005ed8:	f8b4 9046 	ldrh.w	r9, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr++;
 8005edc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005ede:	f109 37ff 	add.w	r7, r9, #4294967295
          hspi->pRxBuffPtr++;
 8005ee2:	3001      	adds	r0, #1
          hspi->RxXferCount--;
 8005ee4:	b2bb      	uxth	r3, r7
          hspi->pRxBuffPtr++;
 8005ee6:	6420      	str	r0, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005ee8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8005eec:	e79e      	b.n	8005e2c <HAL_SPI_TransmitReceive+0x204>
        if (hspi->TxXferCount > 1U)
 8005eee:	8fe7      	ldrh	r7, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ef0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8005ef2:	b2b8      	uxth	r0, r7
 8005ef4:	2801      	cmp	r0, #1
 8005ef6:	d90c      	bls.n	8005f12 <HAL_SPI_TransmitReceive+0x2ea>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ef8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005efc:	60d1      	str	r1, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005efe:	f8b4 903e 	ldrh.w	r9, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f02:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005f04:	f1a9 0c02 	sub.w	ip, r9, #2
 8005f08:	fa1f fe8c 	uxth.w	lr, ip
 8005f0c:	f8a4 e03e 	strh.w	lr, [r4, #62]	@ 0x3e
 8005f10:	e76c      	b.n	8005dec <HAL_SPI_TransmitReceive+0x1c4>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f12:	7819      	ldrb	r1, [r3, #0]
 8005f14:	7311      	strb	r1, [r2, #12]
          hspi->TxXferCount--;
 8005f16:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8005f1a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f1c:	f108 37ff 	add.w	r7, r8, #4294967295
          hspi->pTxBuffPtr++;
 8005f20:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8005f22:	b2b8      	uxth	r0, r7
          hspi->pTxBuffPtr++;
 8005f24:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f26:	87e0      	strh	r0, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f28:	6822      	ldr	r2, [r4, #0]
 8005f2a:	e75f      	b.n	8005dec <HAL_SPI_TransmitReceive+0x1c4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f2c:	2620      	movs	r6, #32
    __HAL_UNLOCK(hspi);
 8005f2e:	2500      	movs	r5, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f30:	6626      	str	r6, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005f32:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8005f36:	2001      	movs	r0, #1
 8005f38:	e723      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x15a>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f3a:	f898 7000 	ldrb.w	r7, [r8]
 8005f3e:	731f      	strb	r7, [r3, #12]
        hspi->TxXferCount--;
 8005f40:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 8005f44:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f46:	f108 39ff 	add.w	r9, r8, #4294967295
        hspi->pTxBuffPtr++;
 8005f4a:	3001      	adds	r0, #1
        hspi->TxXferCount--;
 8005f4c:	fa1f fc89 	uxth.w	ip, r9
        hspi->pTxBuffPtr++;
 8005f50:	63a0      	str	r0, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f52:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8005f56:	e735      	b.n	8005dc4 <HAL_SPI_TransmitReceive+0x19c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f58:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005f5a:	68d2      	ldr	r2, [r2, #12]
 8005f5c:	f820 2b02 	strh.w	r2, [r0], #2
        hspi->RxXferCount--;
 8005f60:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f64:	6420      	str	r0, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f66:	f10e 38ff 	add.w	r8, lr, #4294967295
 8005f6a:	fa1f f388 	uxth.w	r3, r8
        txallowed = 1U;
 8005f6e:	464f      	mov	r7, r9
        hspi->RxXferCount--;
 8005f70:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8005f74:	e782      	b.n	8005e7c <HAL_SPI_TransmitReceive+0x254>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f76:	685f      	ldr	r7, [r3, #4]
 8005f78:	f447 5280 	orr.w	r2, r7, #4096	@ 0x1000
 8005f7c:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	0640      	lsls	r0, r0, #25
 8005f82:	f53f af0f 	bmi.w	8005da4 <HAL_SPI_TransmitReceive+0x17c>
    __HAL_SPI_ENABLE(hspi);
 8005f86:	6819      	ldr	r1, [r3, #0]
 8005f88:	f041 0740 	orr.w	r7, r1, #64	@ 0x40
 8005f8c:	601f      	str	r7, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f8e:	e709      	b.n	8005da4 <HAL_SPI_TransmitReceive+0x17c>

08005f90 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f90:	2800      	cmp	r0, #0
 8005f92:	f000 808c 	beq.w	80060ae <HAL_TIM_Base_Init+0x11e>
{
 8005f96:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f98:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d078      	beq.n	8006098 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fa6:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fa8:	4942      	ldr	r1, [pc, #264]	@ (80060b4 <HAL_TIM_Base_Init+0x124>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005faa:	2002      	movs	r0, #2
 8005fac:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb0:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005fb2:	681d      	ldr	r5, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb4:	d05c      	beq.n	8006070 <HAL_TIM_Base_Init+0xe0>
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fba:	d024      	beq.n	8006006 <HAL_TIM_Base_Init+0x76>
 8005fbc:	f5a1 3c94 	sub.w	ip, r1, #75776	@ 0x12800
 8005fc0:	4563      	cmp	r3, ip
 8005fc2:	d020      	beq.n	8006006 <HAL_TIM_Base_Init+0x76>
 8005fc4:	f50c 6280 	add.w	r2, ip, #1024	@ 0x400
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d01c      	beq.n	8006006 <HAL_TIM_Base_Init+0x76>
 8005fcc:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8005fd0:	4283      	cmp	r3, r0
 8005fd2:	d018      	beq.n	8006006 <HAL_TIM_Base_Init+0x76>
 8005fd4:	f500 3194 	add.w	r1, r0, #75776	@ 0x12800
 8005fd8:	428b      	cmp	r3, r1
 8005fda:	d049      	beq.n	8006070 <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fdc:	f501 6240 	add.w	r2, r1, #3072	@ 0xc00
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d05e      	beq.n	80060a2 <HAL_TIM_Base_Init+0x112>
 8005fe4:	4834      	ldr	r0, [pc, #208]	@ (80060b8 <HAL_TIM_Base_Init+0x128>)
 8005fe6:	4283      	cmp	r3, r0
 8005fe8:	d05b      	beq.n	80060a2 <HAL_TIM_Base_Init+0x112>
 8005fea:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 8005fee:	4563      	cmp	r3, ip
 8005ff0:	d057      	beq.n	80060a2 <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff2:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8005ff6:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ff8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ffa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ffc:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005ffe:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006000:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006002:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006004:	e010      	b.n	8006028 <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 8006006:	68a0      	ldr	r0, [r4, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006008:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800600a:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800600e:	4305      	orrs	r5, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006010:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006012:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006016:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006018:	f022 0580 	bic.w	r5, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800601c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800601e:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006020:	430d      	orrs	r5, r1
  TIMx->CR1 = tmpcr1;
 8006022:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006024:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006026:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006028:	2201      	movs	r2, #1
 800602a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800602c:	6918      	ldr	r0, [r3, #16]
 800602e:	07c2      	lsls	r2, r0, #31
 8006030:	d503      	bpl.n	800603a <HAL_TIM_Base_Init+0xaa>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006032:	691d      	ldr	r5, [r3, #16]
 8006034:	f025 0101 	bic.w	r1, r5, #1
 8006038:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603a:	2301      	movs	r3, #1
 800603c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006044:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006048:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800604c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006050:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006058:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800605c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006060:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006064:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006068:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800606c:	2000      	movs	r0, #0
}
 800606e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8006070:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006072:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006074:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006078:	4305      	orrs	r5, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800607a:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607e:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006080:	69a1      	ldr	r1, [r4, #24]
 8006082:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006086:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006088:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800608a:	68e0      	ldr	r0, [r4, #12]
 800608c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800608e:	6865      	ldr	r5, [r4, #4]
 8006090:	629d      	str	r5, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006092:	6961      	ldr	r1, [r4, #20]
 8006094:	6319      	str	r1, [r3, #48]	@ 0x30
 8006096:	e7c7      	b.n	8006028 <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 8006098:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800609c:	f7fc fc9c 	bl	80029d8 <HAL_TIM_Base_MspInit>
 80060a0:	e781      	b.n	8005fa6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a6:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060aa:	4302      	orrs	r2, r0
 80060ac:	e7e9      	b.n	8006082 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 80060ae:	2001      	movs	r0, #1
}
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40014400 	.word	0x40014400

080060bc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80060bc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d123      	bne.n	800610c <HAL_TIM_Base_Start+0x50>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c4:	6803      	ldr	r3, [r0, #0]
 80060c6:	4a17      	ldr	r2, [pc, #92]	@ (8006124 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 80060c8:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ca:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d0:	d01e      	beq.n	8006110 <HAL_TIM_Base_Start+0x54>
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d6:	d01b      	beq.n	8006110 <HAL_TIM_Base_Start+0x54>
 80060d8:	f5a2 3094 	sub.w	r0, r2, #75776	@ 0x12800
 80060dc:	4283      	cmp	r3, r0
 80060de:	d017      	beq.n	8006110 <HAL_TIM_Base_Start+0x54>
 80060e0:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 80060e4:	4563      	cmp	r3, ip
 80060e6:	d013      	beq.n	8006110 <HAL_TIM_Base_Start+0x54>
 80060e8:	f50c 6280 	add.w	r2, ip, #1024	@ 0x400
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00f      	beq.n	8006110 <HAL_TIM_Base_Start+0x54>
 80060f0:	f502 3194 	add.w	r1, r2, #75776	@ 0x12800
 80060f4:	428b      	cmp	r3, r1
 80060f6:	d00b      	beq.n	8006110 <HAL_TIM_Base_Start+0x54>
 80060f8:	f501 6040 	add.w	r0, r1, #3072	@ 0xc00
 80060fc:	4283      	cmp	r3, r0
 80060fe:	d007      	beq.n	8006110 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	f040 0101 	orr.w	r1, r0, #1
 8006106:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8006108:	2000      	movs	r0, #0
 800610a:	4770      	bx	lr
    return HAL_ERROR;
 800610c:	2001      	movs	r0, #1
}
 800610e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006110:	6899      	ldr	r1, [r3, #8]
 8006112:	4a05      	ldr	r2, [pc, #20]	@ (8006128 <HAL_TIM_Base_Start+0x6c>)
 8006114:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006116:	2a06      	cmp	r2, #6
 8006118:	d0f6      	beq.n	8006108 <HAL_TIM_Base_Start+0x4c>
 800611a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800611e:	d1ef      	bne.n	8006100 <HAL_TIM_Base_Start+0x44>
  return HAL_OK;
 8006120:	2000      	movs	r0, #0
 8006122:	4770      	bx	lr
 8006124:	40012c00 	.word	0x40012c00
 8006128:	00010007 	.word	0x00010007

0800612c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800612c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006130:	2b01      	cmp	r3, #1
 8006132:	d070      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0xea>
 8006134:	4602      	mov	r2, r0
{
 8006136:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8006138:	6804      	ldr	r4, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800613a:	4b50      	ldr	r3, [pc, #320]	@ (800627c <HAL_TIM_ConfigClockSource+0x150>)
  htim->State = HAL_TIM_STATE_BUSY;
 800613c:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 800613e:	2001      	movs	r0, #1
 8006140:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	f882 503d 	strb.w	r5, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006148:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800614a:	402b      	ands	r3, r5
  switch (sClockSourceConfig->ClockSource)
 800614c:	680d      	ldr	r5, [r1, #0]
  htim->Instance->SMCR = tmpsmcr;
 800614e:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006150:	2d60      	cmp	r5, #96	@ 0x60
 8006152:	d062      	beq.n	800621a <HAL_TIM_ConfigClockSource+0xee>
 8006154:	d825      	bhi.n	80061a2 <HAL_TIM_ConfigClockSource+0x76>
 8006156:	2d40      	cmp	r5, #64	@ 0x40
 8006158:	d078      	beq.n	800624c <HAL_TIM_ConfigClockSource+0x120>
 800615a:	d94b      	bls.n	80061f4 <HAL_TIM_ConfigClockSource+0xc8>
 800615c:	2d50      	cmp	r5, #80	@ 0x50
 800615e:	d117      	bne.n	8006190 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8006160:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006162:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006164:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006166:	6a23      	ldr	r3, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006168:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800616c:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616e:	f023 0501 	bic.w	r5, r3, #1
 8006172:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006174:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006176:	f023 05f0 	bic.w	r5, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800617a:	ea45 1000 	orr.w	r0, r5, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800617e:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 8006180:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006182:	68a1      	ldr	r1, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006184:	f021 0c70 	bic.w	ip, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006188:	f04c 0357 	orr.w	r3, ip, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800618e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006190:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 8006192:	f04f 0c00 	mov.w	ip, #0
  htim->State = HAL_TIM_STATE_READY;
 8006196:	f882 403d 	strb.w	r4, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800619a:	f882 c03c 	strb.w	ip, [r2, #60]	@ 0x3c
}
 800619e:	bc30      	pop	{r4, r5}
 80061a0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80061a2:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80061a6:	d0f2      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x62>
 80061a8:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 80061ac:	d110      	bne.n	80061d0 <HAL_TIM_ConfigClockSource+0xa4>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061ae:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80061b2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061b4:	432b      	orrs	r3, r5
 80061b6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b8:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061bc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80061c0:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c2:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061c4:	68a0      	ldr	r0, [r4, #8]
 80061c6:	f440 4580 	orr.w	r5, r0, #16384	@ 0x4000
 80061ca:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80061cc:	2000      	movs	r0, #0
 80061ce:	e7df      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80061d0:	2d70      	cmp	r5, #112	@ 0x70
 80061d2:	d1dd      	bne.n	8006190 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80061d8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061da:	432b      	orrs	r3, r5
 80061dc:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061de:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80061e6:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80061e8:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80061ea:	68a0      	ldr	r0, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061ec:	f040 0577 	orr.w	r5, r0, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80061f0:	60a5      	str	r5, [r4, #8]
      break;
 80061f2:	e7cc      	b.n	800618e <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 80061f4:	2d20      	cmp	r5, #32
 80061f6:	d002      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0xd2>
 80061f8:	d909      	bls.n	800620e <HAL_TIM_ConfigClockSource+0xe2>
 80061fa:	2d30      	cmp	r5, #48	@ 0x30
 80061fc:	d1c8      	bne.n	8006190 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 80061fe:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006200:	f020 0170 	bic.w	r1, r0, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006204:	430d      	orrs	r5, r1
 8006206:	f045 0507 	orr.w	r5, r5, #7
  TIMx->SMCR = tmpsmcr;
 800620a:	60a5      	str	r5, [r4, #8]
}
 800620c:	e7bf      	b.n	800618e <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 800620e:	f035 0110 	bics.w	r1, r5, #16
 8006212:	d1bd      	bne.n	8006190 <HAL_TIM_ConfigClockSource+0x64>
 8006214:	e7f3      	b.n	80061fe <HAL_TIM_ConfigClockSource+0xd2>
  __HAL_LOCK(htim);
 8006216:	2002      	movs	r0, #2
}
 8006218:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 800621a:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800621c:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800621e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006220:	f021 0ca0 	bic.w	ip, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006224:	ea4c 1305 	orr.w	r3, ip, r5, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006228:	6a25      	ldr	r5, [r4, #32]
 800622a:	f025 0110 	bic.w	r1, r5, #16
 800622e:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006230:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006232:	f425 4c70 	bic.w	ip, r5, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006236:	ea4c 3000 	orr.w	r0, ip, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800623a:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 800623c:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800623e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006240:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006244:	f041 0567 	orr.w	r5, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006248:	60a5      	str	r5, [r4, #8]
}
 800624a:	e7a0      	b.n	800618e <HAL_TIM_ConfigClockSource+0x62>
                               sClockSourceConfig->ClockPolarity,
 800624c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800624e:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8006250:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006252:	f021 050a 	bic.w	r5, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006256:	431d      	orrs	r5, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006258:	6a23      	ldr	r3, [r4, #32]
 800625a:	f023 0101 	bic.w	r1, r3, #1
 800625e:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006260:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006262:	f023 01f0 	bic.w	r1, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006266:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800626a:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 800626c:	6225      	str	r5, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800626e:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006270:	f025 0c70 	bic.w	ip, r5, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006274:	f04c 0347 	orr.w	r3, ip, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8006278:	60a3      	str	r3, [r4, #8]
}
 800627a:	e788      	b.n	800618e <HAL_TIM_ConfigClockSource+0x62>
 800627c:	fffe0088 	.word	0xfffe0088

08006280 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop

08006284 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop

08006288 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop

0800628c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop

08006290 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop

08006294 <HAL_TIM_IRQHandler>:
{
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006296:	6803      	ldr	r3, [r0, #0]
 8006298:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800629a:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800629c:	07a1      	lsls	r1, r4, #30
{
 800629e:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062a0:	d501      	bpl.n	80062a6 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062a2:	07b2      	lsls	r2, r6, #30
 80062a4:	d457      	bmi.n	8006356 <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062a6:	0767      	lsls	r7, r4, #29
 80062a8:	d501      	bpl.n	80062ae <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062aa:	0770      	lsls	r0, r6, #29
 80062ac:	d440      	bmi.n	8006330 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062ae:	0721      	lsls	r1, r4, #28
 80062b0:	d501      	bpl.n	80062b6 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062b2:	0732      	lsls	r2, r6, #28
 80062b4:	d42a      	bmi.n	800630c <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062b6:	06e7      	lsls	r7, r4, #27
 80062b8:	d501      	bpl.n	80062be <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062ba:	06f0      	lsls	r0, r6, #27
 80062bc:	d413      	bmi.n	80062e6 <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062be:	07e1      	lsls	r1, r4, #31
 80062c0:	d501      	bpl.n	80062c6 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062c2:	07f2      	lsls	r2, r6, #31
 80062c4:	d465      	bmi.n	8006392 <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062c6:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062ca:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062ce:	d052      	beq.n	8006376 <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062d0:	0633      	lsls	r3, r6, #24
 80062d2:	d466      	bmi.n	80063a2 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062d4:	0660      	lsls	r0, r4, #25
 80062d6:	d501      	bpl.n	80062dc <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062d8:	0671      	lsls	r1, r6, #25
 80062da:	d473      	bmi.n	80063c4 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062dc:	06a2      	lsls	r2, r4, #26
 80062de:	d501      	bpl.n	80062e4 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062e0:	06b3      	lsls	r3, r6, #26
 80062e2:	d44d      	bmi.n	8006380 <HAL_TIM_IRQHandler+0xec>
}
 80062e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062e6:	682b      	ldr	r3, [r5, #0]
 80062e8:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ec:	2108      	movs	r1, #8
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062f0:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062f2:	69df      	ldr	r7, [r3, #28]
 80062f4:	f417 7f40 	tst.w	r7, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80062f8:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062fa:	d174      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fc:	f7ff ffc2 	bl	8006284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006300:	4628      	mov	r0, r5
 8006302:	f7ff ffc3 	bl	800628c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006306:	2000      	movs	r0, #0
 8006308:	7728      	strb	r0, [r5, #28]
 800630a:	e7d8      	b.n	80062be <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006312:	2104      	movs	r1, #4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006316:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006318:	69df      	ldr	r7, [r3, #28]
 800631a:	07bb      	lsls	r3, r7, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800631c:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800631e:	d15f      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006320:	f7ff ffb0 	bl	8006284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006324:	4628      	mov	r0, r5
 8006326:	f7ff ffb1 	bl	800628c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632a:	2000      	movs	r0, #0
 800632c:	7728      	strb	r0, [r5, #28]
 800632e:	e7c2      	b.n	80062b6 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006336:	2102      	movs	r1, #2
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800633a:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800633c:	699f      	ldr	r7, [r3, #24]
 800633e:	f417 7f40 	tst.w	r7, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006342:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006344:	d149      	bne.n	80063da <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006346:	f7ff ff9d 	bl	8006284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634a:	4628      	mov	r0, r5
 800634c:	f7ff ff9e 	bl	800628c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006350:	2000      	movs	r0, #0
 8006352:	7728      	strb	r0, [r5, #28]
 8006354:	e7ab      	b.n	80062ae <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006356:	f06f 0202 	mvn.w	r2, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800635a:	2101      	movs	r1, #1
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800635c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800635e:	7701      	strb	r1, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006360:	699f      	ldr	r7, [r3, #24]
 8006362:	07bb      	lsls	r3, r7, #30
 8006364:	d136      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006366:	f7ff ff8d 	bl	8006284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636a:	4628      	mov	r0, r5
 800636c:	f7ff ff8e 	bl	800628c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006370:	2000      	movs	r0, #0
 8006372:	7728      	strb	r0, [r5, #28]
 8006374:	e797      	b.n	80062a6 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006376:	2f00      	cmp	r7, #0
 8006378:	d0ac      	beq.n	80062d4 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800637a:	0637      	lsls	r7, r6, #24
 800637c:	d41a      	bmi.n	80063b4 <HAL_TIM_IRQHandler+0x120>
 800637e:	e7a9      	b.n	80062d4 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006380:	682e      	ldr	r6, [r5, #0]
 8006382:	f06f 0420 	mvn.w	r4, #32
 8006386:	6134      	str	r4, [r6, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006388:	4628      	mov	r0, r5
}
 800638a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 800638e:	f000 b87d 	b.w	800648c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006392:	682b      	ldr	r3, [r5, #0]
 8006394:	f06f 0201 	mvn.w	r2, #1
 8006398:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800639a:	4628      	mov	r0, r5
 800639c:	f7ff ff70 	bl	8006280 <HAL_TIM_PeriodElapsedCallback>
 80063a0:	e791      	b.n	80062c6 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80063a2:	6829      	ldr	r1, [r5, #0]
 80063a4:	f46f 5002 	mvn.w	r0, #8320	@ 0x2080
 80063a8:	6108      	str	r0, [r1, #16]
      HAL_TIMEx_BreakCallback(htim);
 80063aa:	4628      	mov	r0, r5
 80063ac:	f000 f870 	bl	8006490 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80063b0:	2f00      	cmp	r7, #0
 80063b2:	d08f      	beq.n	80062d4 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80063ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80063bc:	4628      	mov	r0, r5
 80063be:	f000 f869 	bl	8006494 <HAL_TIMEx_Break2Callback>
 80063c2:	e787      	b.n	80062d4 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063c4:	682f      	ldr	r7, [r5, #0]
 80063c6:	f06f 0140 	mvn.w	r1, #64	@ 0x40
 80063ca:	6139      	str	r1, [r7, #16]
      HAL_TIM_TriggerCallback(htim);
 80063cc:	4628      	mov	r0, r5
 80063ce:	f7ff ff5f 	bl	8006290 <HAL_TIM_TriggerCallback>
 80063d2:	e783      	b.n	80062dc <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 80063d4:	f7ff ff58 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 80063d8:	e7ca      	b.n	8006370 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80063da:	f7ff ff55 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 80063de:	e7b7      	b.n	8006350 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 80063e0:	f7ff ff52 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 80063e4:	e7a1      	b.n	800632a <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 80063e6:	f7ff ff4f 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 80063ea:	e78c      	b.n	8006306 <HAL_TIM_IRQHandler+0x72>

080063ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ec:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80063f0:	2a01      	cmp	r2, #1
 80063f2:	d044      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f4:	6802      	ldr	r2, [r0, #0]
{
 80063f6:	b470      	push	{r4, r5, r6}
 80063f8:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063fa:	4e22      	ldr	r6, [pc, #136]	@ (8006484 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	2002      	movs	r0, #2
 80063fe:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006402:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 8006404:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006406:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006408:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800640a:	d026      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800640c:	f506 6c00 	add.w	ip, r6, #2048	@ 0x800
 8006410:	4562      	cmp	r2, ip
 8006412:	d02b      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8006414:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006418:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800641e:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006420:	d00e      	beq.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006422:	4e19      	ldr	r6, [pc, #100]	@ (8006488 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8006424:	42b2      	cmp	r2, r6
 8006426:	d00b      	beq.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006428:	f506 6580 	add.w	r5, r6, #1024	@ 0x400
 800642c:	42aa      	cmp	r2, r5
 800642e:	d007      	beq.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006430:	f505 6c80 	add.w	ip, r5, #1024	@ 0x400
 8006434:	4562      	cmp	r2, ip
 8006436:	d003      	beq.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006438:	f50c 309a 	add.w	r0, ip, #78848	@ 0x13400
 800643c:	4282      	cmp	r2, r0
 800643e:	d104      	bne.n	800644a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006440:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006442:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006446:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006448:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800644a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800644c:	2201      	movs	r2, #1
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006452:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8006456:	bc70      	pop	{r4, r5, r6}
 8006458:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800645a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800645c:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006460:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8006462:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006466:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8006468:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800646a:	e7e9      	b.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800646c:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800646e:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006472:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8006474:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006478:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 800647a:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647c:	e7e0      	b.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 800647e:	2002      	movs	r0, #2
}
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40012c00 	.word	0x40012c00
 8006488:	40000400 	.word	0x40000400

0800648c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop

08006490 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop

08006494 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop

08006498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800649c:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800649e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80064a0:	2820      	cmp	r0, #32
 80064a2:	d17c      	bne.n	800659e <HAL_UART_Transmit+0x106>
  {
    if ((pData == NULL) || (Size == 0U))
 80064a4:	4688      	mov	r8, r1
 80064a6:	b109      	cbz	r1, 80064ac <HAL_UART_Transmit+0x14>
 80064a8:	4617      	mov	r7, r2
 80064aa:	b912      	cbnz	r2, 80064b2 <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 80064ac:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80064ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b2:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b4:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b8:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ba:	f8c4 9084 	str.w	r9, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064be:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80064c0:	f7fc fc5a 	bl	8002d78 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c4:	68a1      	ldr	r1, [r4, #8]
    huart->TxXferSize  = Size;
 80064c6:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ca:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80064ce:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 80064d2:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d4:	d072      	beq.n	80065bc <HAL_UART_Transmit+0x124>
    while (huart->TxXferCount > 0U)
 80064d6:	f8b4 0052 	ldrh.w	r0, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064da:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 80064dc:	b287      	uxth	r7, r0
 80064de:	2f00      	cmp	r7, #0
 80064e0:	d02c      	beq.n	800653c <HAL_UART_Transmit+0xa4>
 80064e2:	1c68      	adds	r0, r5, #1
 80064e4:	d150      	bne.n	8006588 <HAL_UART_Transmit+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e6:	69d0      	ldr	r0, [r2, #28]
 80064e8:	0603      	lsls	r3, r0, #24
 80064ea:	d414      	bmi.n	8006516 <HAL_UART_Transmit+0x7e>
 80064ec:	69d7      	ldr	r7, [r2, #28]
 80064ee:	0638      	lsls	r0, r7, #24
 80064f0:	d411      	bmi.n	8006516 <HAL_UART_Transmit+0x7e>
 80064f2:	69d3      	ldr	r3, [r2, #28]
 80064f4:	0619      	lsls	r1, r3, #24
 80064f6:	d40e      	bmi.n	8006516 <HAL_UART_Transmit+0x7e>
 80064f8:	69d1      	ldr	r1, [r2, #28]
 80064fa:	060b      	lsls	r3, r1, #24
 80064fc:	d40b      	bmi.n	8006516 <HAL_UART_Transmit+0x7e>
 80064fe:	69d0      	ldr	r0, [r2, #28]
 8006500:	0607      	lsls	r7, r0, #24
 8006502:	d408      	bmi.n	8006516 <HAL_UART_Transmit+0x7e>
 8006504:	69d7      	ldr	r7, [r2, #28]
 8006506:	0638      	lsls	r0, r7, #24
 8006508:	d405      	bmi.n	8006516 <HAL_UART_Transmit+0x7e>
 800650a:	69d3      	ldr	r3, [r2, #28]
 800650c:	0619      	lsls	r1, r3, #24
 800650e:	d402      	bmi.n	8006516 <HAL_UART_Transmit+0x7e>
 8006510:	69d1      	ldr	r1, [r2, #28]
 8006512:	060b      	lsls	r3, r1, #24
 8006514:	d5e7      	bpl.n	80064e6 <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 8006516:	f1b8 0f00 	cmp.w	r8, #0
 800651a:	d03b      	beq.n	8006594 <HAL_UART_Transmit+0xfc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800651c:	f818 0b01 	ldrb.w	r0, [r8], #1
 8006520:	8510      	strh	r0, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006522:	f8b4 c052 	ldrh.w	ip, [r4, #82]	@ 0x52
 8006526:	f10c 3eff 	add.w	lr, ip, #4294967295
 800652a:	fa1f f38e 	uxth.w	r3, lr
 800652e:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006532:	f8b4 1052 	ldrh.w	r1, [r4, #82]	@ 0x52
 8006536:	b288      	uxth	r0, r1
 8006538:	2800      	cmp	r0, #0
 800653a:	d1d2      	bne.n	80064e2 <HAL_UART_Transmit+0x4a>
 800653c:	1c69      	adds	r1, r5, #1
 800653e:	d139      	bne.n	80065b4 <HAL_UART_Transmit+0x11c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006540:	69d1      	ldr	r1, [r2, #28]
 8006542:	064b      	lsls	r3, r1, #25
 8006544:	d414      	bmi.n	8006570 <HAL_UART_Transmit+0xd8>
 8006546:	69d0      	ldr	r0, [r2, #28]
 8006548:	0645      	lsls	r5, r0, #25
 800654a:	d411      	bmi.n	8006570 <HAL_UART_Transmit+0xd8>
 800654c:	69d5      	ldr	r5, [r2, #28]
 800654e:	0668      	lsls	r0, r5, #25
 8006550:	d40e      	bmi.n	8006570 <HAL_UART_Transmit+0xd8>
 8006552:	69d6      	ldr	r6, [r2, #28]
 8006554:	0671      	lsls	r1, r6, #25
 8006556:	d40b      	bmi.n	8006570 <HAL_UART_Transmit+0xd8>
 8006558:	69d7      	ldr	r7, [r2, #28]
 800655a:	067b      	lsls	r3, r7, #25
 800655c:	d408      	bmi.n	8006570 <HAL_UART_Transmit+0xd8>
 800655e:	69d3      	ldr	r3, [r2, #28]
 8006560:	065f      	lsls	r7, r3, #25
 8006562:	d405      	bmi.n	8006570 <HAL_UART_Transmit+0xd8>
 8006564:	69d1      	ldr	r1, [r2, #28]
 8006566:	064e      	lsls	r6, r1, #25
 8006568:	d402      	bmi.n	8006570 <HAL_UART_Transmit+0xd8>
 800656a:	69d0      	ldr	r0, [r2, #28]
 800656c:	0645      	lsls	r5, r0, #25
 800656e:	d5e7      	bpl.n	8006540 <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 8006570:	2220      	movs	r2, #32
 8006572:	67e2      	str	r2, [r4, #124]	@ 0x7c
    return HAL_OK;
 8006574:	2000      	movs	r0, #0
 8006576:	e79a      	b.n	80064ae <HAL_UART_Transmit+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006578:	f7fc fbfe 	bl	8002d78 <HAL_GetTick>
 800657c:	1b81      	subs	r1, r0, r6
 800657e:	428d      	cmp	r5, r1
 8006580:	d322      	bcc.n	80065c8 <HAL_UART_Transmit+0x130>
 8006582:	b30d      	cbz	r5, 80065c8 <HAL_UART_Transmit+0x130>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006584:	6822      	ldr	r2, [r4, #0]
 8006586:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006588:	69d3      	ldr	r3, [r2, #28]
 800658a:	061f      	lsls	r7, r3, #24
 800658c:	d5f4      	bpl.n	8006578 <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 800658e:	f1b8 0f00 	cmp.w	r8, #0
 8006592:	d1c3      	bne.n	800651c <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006594:	f839 7b02 	ldrh.w	r7, [r9], #2
 8006598:	f3c7 0008 	ubfx	r0, r7, #0, #9
 800659c:	e7c0      	b.n	8006520 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 800659e:	2002      	movs	r0, #2
}
 80065a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a4:	f7fc fbe8 	bl	8002d78 <HAL_GetTick>
 80065a8:	1b87      	subs	r7, r0, r6
 80065aa:	42bd      	cmp	r5, r7
 80065ac:	d30c      	bcc.n	80065c8 <HAL_UART_Transmit+0x130>
 80065ae:	b15d      	cbz	r5, 80065c8 <HAL_UART_Transmit+0x130>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065b0:	6822      	ldr	r2, [r4, #0]
 80065b2:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b4:	69d2      	ldr	r2, [r2, #28]
 80065b6:	0657      	lsls	r7, r2, #25
 80065b8:	d5f4      	bpl.n	80065a4 <HAL_UART_Transmit+0x10c>
 80065ba:	e7d9      	b.n	8006570 <HAL_UART_Transmit+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065bc:	6922      	ldr	r2, [r4, #16]
 80065be:	2a00      	cmp	r2, #0
 80065c0:	d189      	bne.n	80064d6 <HAL_UART_Transmit+0x3e>
 80065c2:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80065c4:	4690      	mov	r8, r2
 80065c6:	e786      	b.n	80064d6 <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 80065c8:	2320      	movs	r3, #32
 80065ca:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 80065cc:	2003      	movs	r0, #3
}
 80065ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065d2:	bf00      	nop

080065d4 <HAL_UART_Receive>:
{
 80065d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d8:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80065da:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80065de:	2820      	cmp	r0, #32
 80065e0:	d161      	bne.n	80066a6 <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 80065e2:	4689      	mov	r9, r1
 80065e4:	b109      	cbz	r1, 80065ea <HAL_UART_Receive+0x16>
 80065e6:	4617      	mov	r7, r2
 80065e8:	b912      	cbnz	r2, 80065f0 <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 80065ea:	2001      	movs	r0, #1
}
 80065ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f0:	2500      	movs	r5, #0
 80065f2:	4698      	mov	r8, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065f4:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f6:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065fa:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fe:	6625      	str	r5, [r4, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8006600:	f7fc fbba 	bl	8002d78 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8006604:	f8a4 7058 	strh.w	r7, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006608:	f8a4 705a 	strh.w	r7, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 800660c:	68a7      	ldr	r7, [r4, #8]
 800660e:	f5b7 5f80 	cmp.w	r7, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8006612:	4606      	mov	r6, r0
    UART_MASK_COMPUTATION(huart);
 8006614:	f000 80f1 	beq.w	80067fa <HAL_UART_Receive+0x226>
 8006618:	2f00      	cmp	r7, #0
 800661a:	f040 8108 	bne.w	800682e <HAL_UART_Receive+0x25a>
 800661e:	6922      	ldr	r2, [r4, #16]
    uhMask = huart->Mask;
 8006620:	2a00      	cmp	r2, #0
 8006622:	bf0c      	ite	eq
 8006624:	25ff      	moveq	r5, #255	@ 0xff
 8006626:	257f      	movne	r5, #127	@ 0x7f
    while (huart->RxXferCount > 0U)
 8006628:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 800662c:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 8006630:	fa1f f38c 	uxth.w	r3, ip
 8006634:	2b00      	cmp	r3, #0
 8006636:	d030      	beq.n	800669a <HAL_UART_Receive+0xc6>
 8006638:	6822      	ldr	r2, [r4, #0]
 800663a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800663e:	d135      	bne.n	80066ac <HAL_UART_Receive+0xd8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006640:	69d1      	ldr	r1, [r2, #28]
 8006642:	0688      	lsls	r0, r1, #26
 8006644:	d414      	bmi.n	8006670 <HAL_UART_Receive+0x9c>
 8006646:	69d0      	ldr	r0, [r2, #28]
 8006648:	0683      	lsls	r3, r0, #26
 800664a:	d411      	bmi.n	8006670 <HAL_UART_Receive+0x9c>
 800664c:	69d3      	ldr	r3, [r2, #28]
 800664e:	0698      	lsls	r0, r3, #26
 8006650:	d40e      	bmi.n	8006670 <HAL_UART_Receive+0x9c>
 8006652:	69d1      	ldr	r1, [r2, #28]
 8006654:	0689      	lsls	r1, r1, #26
 8006656:	d40b      	bmi.n	8006670 <HAL_UART_Receive+0x9c>
 8006658:	69d0      	ldr	r0, [r2, #28]
 800665a:	0683      	lsls	r3, r0, #26
 800665c:	d408      	bmi.n	8006670 <HAL_UART_Receive+0x9c>
 800665e:	69d3      	ldr	r3, [r2, #28]
 8006660:	0698      	lsls	r0, r3, #26
 8006662:	d405      	bmi.n	8006670 <HAL_UART_Receive+0x9c>
 8006664:	69d1      	ldr	r1, [r2, #28]
 8006666:	0689      	lsls	r1, r1, #26
 8006668:	d402      	bmi.n	8006670 <HAL_UART_Receive+0x9c>
 800666a:	69d0      	ldr	r0, [r2, #28]
 800666c:	0683      	lsls	r3, r0, #26
 800666e:	d5e7      	bpl.n	8006640 <HAL_UART_Receive+0x6c>
      if (pdata8bits == NULL)
 8006670:	f1b9 0f00 	cmp.w	r9, #0
 8006674:	f000 80c8 	beq.w	8006808 <HAL_UART_Receive+0x234>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006678:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800667a:	402a      	ands	r2, r5
 800667c:	f809 2b01 	strb.w	r2, [r9], #1
      huart->RxXferCount--;
 8006680:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	@ 0x5a
 8006684:	f10e 3cff 	add.w	ip, lr, #4294967295
 8006688:	fa1f f38c 	uxth.w	r3, ip
 800668c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006690:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
 8006694:	b288      	uxth	r0, r1
 8006696:	2800      	cmp	r0, #0
 8006698:	d1ce      	bne.n	8006638 <HAL_UART_Receive+0x64>
    huart->RxState = HAL_UART_STATE_READY;
 800669a:	2620      	movs	r6, #32
 800669c:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    return HAL_OK;
 80066a0:	2000      	movs	r0, #0
}
 80066a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80066a6:	2002      	movs	r0, #2
}
 80066a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ac:	69d1      	ldr	r1, [r2, #28]
 80066ae:	0689      	lsls	r1, r1, #26
 80066b0:	d4de      	bmi.n	8006670 <HAL_UART_Receive+0x9c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b2:	f7fc fb61 	bl	8002d78 <HAL_GetTick>
 80066b6:	1b80      	subs	r0, r0, r6
 80066b8:	4580      	cmp	r8, r0
 80066ba:	f0c0 8098 	bcc.w	80067ee <HAL_UART_Receive+0x21a>
 80066be:	f1b8 0f00 	cmp.w	r8, #0
 80066c2:	f000 8094 	beq.w	80067ee <HAL_UART_Receive+0x21a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	6813      	ldr	r3, [r2, #0]
 80066ca:	0758      	lsls	r0, r3, #29
 80066cc:	d5ee      	bpl.n	80066ac <HAL_UART_Receive+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066ce:	69d1      	ldr	r1, [r2, #28]
 80066d0:	0709      	lsls	r1, r1, #28
 80066d2:	f100 80ba 	bmi.w	800684a <HAL_UART_Receive+0x276>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d6:	69d0      	ldr	r0, [r2, #28]
 80066d8:	0503      	lsls	r3, r0, #20
 80066da:	d5e7      	bpl.n	80066ac <HAL_UART_Receive+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066dc:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80066e0:	6215      	str	r5, [r2, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	e852 6f00 	ldrex	r6, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e6:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	e842 7300 	strex	r3, r7, [r2]
 80066ee:	b38b      	cbz	r3, 8006754 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	e852 1f00 	ldrex	r1, [r2]
 80066f4:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	e842 0500 	strex	r5, r0, [r2]
 80066fc:	b355      	cbz	r5, 8006754 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fe:	e852 6f00 	ldrex	r6, [r2]
 8006702:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	e842 7300 	strex	r3, r7, [r2]
 800670a:	b31b      	cbz	r3, 8006754 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	e852 1f00 	ldrex	r1, [r2]
 8006710:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	e842 0500 	strex	r5, r0, [r2]
 8006718:	b1e5      	cbz	r5, 8006754 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	e852 6f00 	ldrex	r6, [r2]
 800671e:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	e842 7300 	strex	r3, r7, [r2]
 8006726:	b1ab      	cbz	r3, 8006754 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	e852 1f00 	ldrex	r1, [r2]
 800672c:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	e842 0500 	strex	r5, r0, [r2]
 8006734:	b175      	cbz	r5, 8006754 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	e852 6f00 	ldrex	r6, [r2]
 800673a:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	e842 7300 	strex	r3, r7, [r2]
 8006742:	b13b      	cbz	r3, 8006754 <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	e852 1f00 	ldrex	r1, [r2]
 8006748:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	e842 0500 	strex	r5, r0, [r2]
 8006750:	2d00      	cmp	r5, #0
 8006752:	d1c6      	bne.n	80066e2 <HAL_UART_Receive+0x10e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006754:	f102 0e08 	add.w	lr, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	e85e 6f00 	ldrex	r6, [lr]
 800675c:	f026 0701 	bic.w	r7, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	e84e 7300 	strex	r3, r7, [lr]
 8006764:	b3ab      	cbz	r3, 80067d2 <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	f102 0908 	add.w	r9, r2, #8
 800676a:	e859 1f00 	ldrex	r1, [r9]
 800676e:	f021 0601 	bic.w	r6, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	f102 0508 	add.w	r5, r2, #8
 8006776:	e845 6000 	strex	r0, r6, [r5]
 800677a:	b350      	cbz	r0, 80067d2 <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	e85e 7f00 	ldrex	r7, [lr]
 8006780:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	e84e 3100 	strex	r1, r3, [lr]
 8006788:	b319      	cbz	r1, 80067d2 <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	e85e 6f00 	ldrex	r6, [lr]
 800678e:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	e84e 5000 	strex	r0, r5, [lr]
 8006796:	b1e0      	cbz	r0, 80067d2 <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	e85e 7f00 	ldrex	r7, [lr]
 800679c:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	e84e 3100 	strex	r1, r3, [lr]
 80067a4:	b1a9      	cbz	r1, 80067d2 <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	e85e 6f00 	ldrex	r6, [lr]
 80067aa:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	e84e 5000 	strex	r0, r5, [lr]
 80067b2:	b170      	cbz	r0, 80067d2 <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	e85e 7f00 	ldrex	r7, [lr]
 80067b8:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	e84e 3100 	strex	r1, r3, [lr]
 80067c0:	b139      	cbz	r1, 80067d2 <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	e85e 6f00 	ldrex	r6, [lr]
 80067c6:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	e84e 5000 	strex	r0, r5, [lr]
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d1c0      	bne.n	8006754 <HAL_UART_Receive+0x180>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d2:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 80067d4:	2f01      	cmp	r7, #1
 80067d6:	f000 80c1 	beq.w	800695c <HAL_UART_Receive+0x388>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067da:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067e2:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e4:	6620      	str	r0, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80067e6:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ea:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80067ee:	2320      	movs	r3, #32
 80067f0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 80067f4:	2003      	movs	r0, #3
}
 80067f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 80067fa:	6920      	ldr	r0, [r4, #16]
 80067fc:	bb10      	cbnz	r0, 8006844 <HAL_UART_Receive+0x270>
 80067fe:	464f      	mov	r7, r9
    uhMask = huart->Mask;
 8006800:	f240 15ff 	movw	r5, #511	@ 0x1ff
      pdata8bits  = NULL;
 8006804:	4681      	mov	r9, r0
 8006806:	e70f      	b.n	8006628 <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006808:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 800680a:	402b      	ands	r3, r5
 800680c:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8006810:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	@ 0x5a
 8006814:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006818:	b288      	uxth	r0, r1
 800681a:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800681e:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	@ 0x5a
 8006822:	fa1f f38c 	uxth.w	r3, ip
 8006826:	2b00      	cmp	r3, #0
 8006828:	f47f af07 	bne.w	800663a <HAL_UART_Receive+0x66>
 800682c:	e735      	b.n	800669a <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 800682e:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
    uhMask = huart->Mask;
 8006832:	462f      	mov	r7, r5
    UART_MASK_COMPUTATION(huart);
 8006834:	f47f aef8 	bne.w	8006628 <HAL_UART_Receive+0x54>
 8006838:	6921      	ldr	r1, [r4, #16]
    uhMask = huart->Mask;
 800683a:	2900      	cmp	r1, #0
 800683c:	bf14      	ite	ne
 800683e:	253f      	movne	r5, #63	@ 0x3f
 8006840:	257f      	moveq	r5, #127	@ 0x7f
 8006842:	e6f1      	b.n	8006628 <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 8006844:	462f      	mov	r7, r5
    uhMask = huart->Mask;
 8006846:	25ff      	movs	r5, #255	@ 0xff
 8006848:	e6ee      	b.n	8006628 <HAL_UART_Receive+0x54>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800684a:	2708      	movs	r7, #8
 800684c:	6217      	str	r7, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	e852 8f00 	ldrex	r8, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006852:	f428 7990 	bic.w	r9, r8, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	e842 9300 	strex	r3, r9, [r2]
 800685a:	b38b      	cbz	r3, 80068c0 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	e852 1f00 	ldrex	r1, [r2]
 8006860:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	e842 6500 	strex	r5, r6, [r2]
 8006868:	b355      	cbz	r5, 80068c0 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	e852 0f00 	ldrex	r0, [r2]
 800686e:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	e842 7300 	strex	r3, r7, [r2]
 8006876:	b31b      	cbz	r3, 80068c0 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	e852 1f00 	ldrex	r1, [r2]
 800687c:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	e842 6500 	strex	r5, r6, [r2]
 8006884:	b1e5      	cbz	r5, 80068c0 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	e852 0f00 	ldrex	r0, [r2]
 800688a:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	e842 7300 	strex	r3, r7, [r2]
 8006892:	b1ab      	cbz	r3, 80068c0 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	e852 1f00 	ldrex	r1, [r2]
 8006898:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	e842 6500 	strex	r5, r6, [r2]
 80068a0:	b175      	cbz	r5, 80068c0 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	e852 0f00 	ldrex	r0, [r2]
 80068a6:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	e842 7300 	strex	r3, r7, [r2]
 80068ae:	b13b      	cbz	r3, 80068c0 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	e852 1f00 	ldrex	r1, [r2]
 80068b4:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	e842 6500 	strex	r5, r6, [r2]
 80068bc:	2d00      	cmp	r5, #0
 80068be:	d1c6      	bne.n	800684e <HAL_UART_Receive+0x27a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c0:	f102 0e08 	add.w	lr, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	e85e 0f00 	ldrex	r0, [lr]
 80068c8:	f020 0701 	bic.w	r7, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	e84e 7300 	strex	r3, r7, [lr]
 80068d0:	b3ab      	cbz	r3, 800693e <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	f102 0908 	add.w	r9, r2, #8
 80068d6:	e859 1f00 	ldrex	r1, [r9]
 80068da:	f021 0601 	bic.w	r6, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	f102 0508 	add.w	r5, r2, #8
 80068e2:	e845 6000 	strex	r0, r6, [r5]
 80068e6:	b350      	cbz	r0, 800693e <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	e85e 7f00 	ldrex	r7, [lr]
 80068ec:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	e84e 3100 	strex	r1, r3, [lr]
 80068f4:	b319      	cbz	r1, 800693e <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	e85e 6f00 	ldrex	r6, [lr]
 80068fa:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	e84e 5000 	strex	r0, r5, [lr]
 8006902:	b1e0      	cbz	r0, 800693e <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	e85e 7f00 	ldrex	r7, [lr]
 8006908:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	e84e 3100 	strex	r1, r3, [lr]
 8006910:	b1a9      	cbz	r1, 800693e <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	e85e 6f00 	ldrex	r6, [lr]
 8006916:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	e84e 5000 	strex	r0, r5, [lr]
 800691e:	b170      	cbz	r0, 800693e <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	e85e 7f00 	ldrex	r7, [lr]
 8006924:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	e84e 3100 	strex	r1, r3, [lr]
 800692c:	b139      	cbz	r1, 800693e <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	e85e 6f00 	ldrex	r6, [lr]
 8006932:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	e84e 5000 	strex	r0, r5, [lr]
 800693a:	2800      	cmp	r0, #0
 800693c:	d1c0      	bne.n	80068c0 <HAL_UART_Receive+0x2ec>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800693e:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8006940:	2f01      	cmp	r7, #1
 8006942:	d053      	beq.n	80069ec <HAL_UART_Receive+0x418>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006944:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006946:	2720      	movs	r7, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006948:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 800694a:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 800694e:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006950:	6620      	str	r0, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006952:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006956:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          return HAL_ERROR;
 800695a:	e748      	b.n	80067ee <HAL_UART_Receive+0x21a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	e852 ef00 	ldrex	lr, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006960:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	e842 c300 	strex	r3, ip, [r2]
 8006968:	2b00      	cmp	r3, #0
 800696a:	f43f af36 	beq.w	80067da <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	e852 1f00 	ldrex	r1, [r2]
 8006972:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	e842 6500 	strex	r5, r6, [r2]
 800697a:	2d00      	cmp	r5, #0
 800697c:	f43f af2d 	beq.w	80067da <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	e852 0f00 	ldrex	r0, [r2]
 8006984:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	e842 7300 	strex	r3, r7, [r2]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f43f af24 	beq.w	80067da <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	e852 1f00 	ldrex	r1, [r2]
 8006996:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	e842 6500 	strex	r5, r6, [r2]
 800699e:	2d00      	cmp	r5, #0
 80069a0:	f43f af1b 	beq.w	80067da <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	e852 0f00 	ldrex	r0, [r2]
 80069a8:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	e842 7300 	strex	r3, r7, [r2]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f43f af12 	beq.w	80067da <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	e852 1f00 	ldrex	r1, [r2]
 80069ba:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	e842 6500 	strex	r5, r6, [r2]
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	f43f af09 	beq.w	80067da <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	e852 0f00 	ldrex	r0, [r2]
 80069cc:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	e842 7300 	strex	r3, r7, [r2]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f43f af00 	beq.w	80067da <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	e852 1f00 	ldrex	r1, [r2]
 80069de:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	e842 6500 	strex	r5, r6, [r2]
 80069e6:	2d00      	cmp	r5, #0
 80069e8:	d1b8      	bne.n	800695c <HAL_UART_Receive+0x388>
 80069ea:	e6f6      	b.n	80067da <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	e852 ef00 	ldrex	lr, [r2]
 80069f0:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	e842 c300 	strex	r3, ip, [r2]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0a3      	beq.n	8006944 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	e852 1f00 	ldrex	r1, [r2]
 8006a00:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	e842 6500 	strex	r5, r6, [r2]
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	d09b      	beq.n	8006944 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	e852 0f00 	ldrex	r0, [r2]
 8006a10:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	e842 7300 	strex	r3, r7, [r2]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d093      	beq.n	8006944 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	e852 1f00 	ldrex	r1, [r2]
 8006a20:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	e842 6500 	strex	r5, r6, [r2]
 8006a28:	2d00      	cmp	r5, #0
 8006a2a:	d08b      	beq.n	8006944 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	e852 0f00 	ldrex	r0, [r2]
 8006a30:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	e842 7300 	strex	r3, r7, [r2]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d083      	beq.n	8006944 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	e852 1f00 	ldrex	r1, [r2]
 8006a40:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	e842 6500 	strex	r5, r6, [r2]
 8006a48:	2d00      	cmp	r5, #0
 8006a4a:	f43f af7b 	beq.w	8006944 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	e852 0f00 	ldrex	r0, [r2]
 8006a52:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	e842 7300 	strex	r3, r7, [r2]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f43f af72 	beq.w	8006944 <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	e852 1f00 	ldrex	r1, [r2]
 8006a64:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	e842 6500 	strex	r5, r6, [r2]
 8006a6c:	2d00      	cmp	r5, #0
 8006a6e:	d1bd      	bne.n	80069ec <HAL_UART_Receive+0x418>
 8006a70:	e768      	b.n	8006944 <HAL_UART_Receive+0x370>
 8006a72:	bf00      	nop

08006a74 <UART_SetConfig>:
{
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a78:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a7a:	6882      	ldr	r2, [r0, #8]
 8006a7c:	6900      	ldr	r0, [r0, #16]
 8006a7e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a80:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a82:	4302      	orrs	r2, r0
 8006a84:	430a      	orrs	r2, r1
 8006a86:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a88:	4981      	ldr	r1, [pc, #516]	@ (8006c90 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a8a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a8c:	4029      	ands	r1, r5
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a96:	497f      	ldr	r1, [pc, #508]	@ (8006c94 <UART_SetConfig+0x220>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a98:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006a9c:	432a      	orrs	r2, r5
 8006a9e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aa0:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aa2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aa4:	689d      	ldr	r5, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aa6:	d040      	beq.n	8006b2a <UART_SetConfig+0xb6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aa8:	f425 6130 	bic.w	r1, r5, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006aac:	6a25      	ldr	r5, [r4, #32]
 8006aae:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ab0:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ab2:	4979      	ldr	r1, [pc, #484]	@ (8006c98 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ab4:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ab6:	428b      	cmp	r3, r1
 8006ab8:	d115      	bne.n	8006ae6 <UART_SetConfig+0x72>
 8006aba:	4a78      	ldr	r2, [pc, #480]	@ (8006c9c <UART_SetConfig+0x228>)
 8006abc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006ac0:	f003 0503 	and.w	r5, r3, #3
 8006ac4:	2d02      	cmp	r5, #2
 8006ac6:	f000 808e 	beq.w	8006be6 <UART_SetConfig+0x172>
 8006aca:	2d03      	cmp	r5, #3
 8006acc:	d078      	beq.n	8006bc0 <UART_SetConfig+0x14c>
 8006ace:	2d01      	cmp	r5, #1
 8006ad0:	d06e      	beq.n	8006bb0 <UART_SetConfig+0x13c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006ad6:	f000 80d0 	beq.w	8006c7a <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ada:	f7fe fb3b 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d173      	bne.n	8006bca <UART_SetConfig+0x156>
        pclk = (uint32_t) HSI_VALUE;
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e01d      	b.n	8006b22 <UART_SetConfig+0xae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ae6:	4a6e      	ldr	r2, [pc, #440]	@ (8006ca0 <UART_SetConfig+0x22c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d110      	bne.n	8006b0e <UART_SetConfig+0x9a>
 8006aec:	4d6b      	ldr	r5, [pc, #428]	@ (8006c9c <UART_SetConfig+0x228>)
 8006aee:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 8006af2:	f001 0c0c 	and.w	ip, r1, #12
 8006af6:	f1bc 0f0c 	cmp.w	ip, #12
 8006afa:	d811      	bhi.n	8006b20 <UART_SetConfig+0xac>
 8006afc:	e8df f00c 	tbb	[pc, ip]
 8006b00:	10101082 	.word	0x10101082
 8006b04:	10101058 	.word	0x10101058
 8006b08:	10101073 	.word	0x10101073
 8006b0c:	60          	.byte	0x60
 8006b0d:	00          	.byte	0x00
 8006b0e:	4d65      	ldr	r5, [pc, #404]	@ (8006ca4 <UART_SetConfig+0x230>)
 8006b10:	42ab      	cmp	r3, r5
 8006b12:	d07d      	beq.n	8006c10 <UART_SetConfig+0x19c>
 8006b14:	4964      	ldr	r1, [pc, #400]	@ (8006ca8 <UART_SetConfig+0x234>)
 8006b16:	428b      	cmp	r3, r1
 8006b18:	d03f      	beq.n	8006b9a <UART_SetConfig+0x126>
 8006b1a:	4a64      	ldr	r2, [pc, #400]	@ (8006cac <UART_SetConfig+0x238>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d067      	beq.n	8006bf0 <UART_SetConfig+0x17c>
        ret = HAL_ERROR;
 8006b20:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006b22:	2200      	movs	r2, #0
 8006b24:	e9c4 221a 	strd	r2, r2, [r4, #104]	@ 0x68
}
 8006b28:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b2a:	f425 6130 	bic.w	r1, r5, #2816	@ 0xb00
 8006b2e:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b30:	485a      	ldr	r0, [pc, #360]	@ (8006c9c <UART_SetConfig+0x228>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b32:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b34:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8006b38:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8006b3c:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8006b40:	d07e      	beq.n	8006c40 <UART_SetConfig+0x1cc>
 8006b42:	d807      	bhi.n	8006b54 <UART_SetConfig+0xe0>
 8006b44:	b322      	cbz	r2, 8006b90 <UART_SetConfig+0x11c>
 8006b46:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006b4a:	d1e9      	bne.n	8006b20 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 8006b4c:	f7fd fec2 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006b50:	b928      	cbnz	r0, 8006b5e <UART_SetConfig+0xea>
 8006b52:	e7c6      	b.n	8006ae2 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b54:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8006b58:	d1e2      	bne.n	8006b20 <UART_SetConfig+0xac>
        pclk = (uint32_t) LSE_VALUE;
 8006b5a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b5e:	6862      	ldr	r2, [r4, #4]
 8006b60:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8006b64:	4285      	cmp	r5, r0
 8006b66:	d8db      	bhi.n	8006b20 <UART_SetConfig+0xac>
 8006b68:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006b6c:	d8d8      	bhi.n	8006b20 <UART_SetConfig+0xac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b6e:	0851      	lsrs	r1, r2, #1
 8006b70:	2300      	movs	r3, #0
 8006b72:	f44f 7e80 	mov.w	lr, #256	@ 0x100
 8006b76:	468c      	mov	ip, r1
 8006b78:	4619      	mov	r1, r3
 8006b7a:	fbe0 c10e 	umlal	ip, r1, r0, lr
 8006b7e:	4660      	mov	r0, ip
 8006b80:	f7f9 fb86 	bl	8000290 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b84:	4b4a      	ldr	r3, [pc, #296]	@ (8006cb0 <UART_SetConfig+0x23c>)
 8006b86:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d8c8      	bhi.n	8006b20 <UART_SetConfig+0xac>
 8006b8e:	e027      	b.n	8006be0 <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b90:	f7fe facc 	bl	800512c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d1e2      	bne.n	8006b5e <UART_SetConfig+0xea>
 8006b98:	e7a3      	b.n	8006ae2 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b9a:	4a40      	ldr	r2, [pc, #256]	@ (8006c9c <UART_SetConfig+0x228>)
 8006b9c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006ba0:	f003 05c0 	and.w	r5, r3, #192	@ 0xc0
 8006ba4:	2d80      	cmp	r5, #128	@ 0x80
 8006ba6:	d01e      	beq.n	8006be6 <UART_SetConfig+0x172>
 8006ba8:	d83f      	bhi.n	8006c2a <UART_SetConfig+0x1b6>
 8006baa:	b35d      	cbz	r5, 8006c04 <UART_SetConfig+0x190>
 8006bac:	2d40      	cmp	r5, #64	@ 0x40
 8006bae:	d1b7      	bne.n	8006b20 <UART_SetConfig+0xac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bb0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006bb4:	d069      	beq.n	8006c8a <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetSysClockFreq();
 8006bb6:	f7fd fe8d 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
        break;
 8006bba:	e790      	b.n	8006ade <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bbc:	2b30      	cmp	r3, #48	@ 0x30
 8006bbe:	d1af      	bne.n	8006b20 <UART_SetConfig+0xac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006bc4:	d05e      	beq.n	8006c84 <UART_SetConfig+0x210>
        pclk = (uint32_t) LSE_VALUE;
 8006bc6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bca:	6861      	ldr	r1, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bcc:	f64f 7cef 	movw	ip, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bd0:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 8006bd4:	fbb2 f0f1 	udiv	r0, r2, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bd8:	f1a0 0310 	sub.w	r3, r0, #16
 8006bdc:	4563      	cmp	r3, ip
 8006bde:	d89f      	bhi.n	8006b20 <UART_SetConfig+0xac>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006be0:	6825      	ldr	r5, [r4, #0]
 8006be2:	60e8      	str	r0, [r5, #12]
 8006be4:	e77d      	b.n	8006ae2 <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006be6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006bea:	d049      	beq.n	8006c80 <UART_SetConfig+0x20c>
        pclk = (uint32_t) HSI_VALUE;
 8006bec:	4831      	ldr	r0, [pc, #196]	@ (8006cb4 <UART_SetConfig+0x240>)
 8006bee:	e7ec      	b.n	8006bca <UART_SetConfig+0x156>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8006c9c <UART_SetConfig+0x228>)
 8006bf2:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8006bf6:	f405 7140 	and.w	r1, r5, #768	@ 0x300
 8006bfa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006bfe:	d0f2      	beq.n	8006be6 <UART_SetConfig+0x172>
 8006c00:	d81a      	bhi.n	8006c38 <UART_SetConfig+0x1c4>
 8006c02:	b9a9      	cbnz	r1, 8006c30 <UART_SetConfig+0x1bc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c04:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006c08:	d01c      	beq.n	8006c44 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c0a:	f7fe fa8f 	bl	800512c <HAL_RCC_GetPCLK1Freq>
        break;
 8006c0e:	e766      	b.n	8006ade <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c10:	4922      	ldr	r1, [pc, #136]	@ (8006c9c <UART_SetConfig+0x228>)
 8006c12:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006c16:	f002 0330 	and.w	r3, r2, #48	@ 0x30
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d0e3      	beq.n	8006be6 <UART_SetConfig+0x172>
 8006c1e:	d8cd      	bhi.n	8006bbc <UART_SetConfig+0x148>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0ef      	beq.n	8006c04 <UART_SetConfig+0x190>
 8006c24:	2b10      	cmp	r3, #16
 8006c26:	d0c3      	beq.n	8006bb0 <UART_SetConfig+0x13c>
 8006c28:	e77a      	b.n	8006b20 <UART_SetConfig+0xac>
 8006c2a:	2dc0      	cmp	r5, #192	@ 0xc0
 8006c2c:	d0c8      	beq.n	8006bc0 <UART_SetConfig+0x14c>
 8006c2e:	e777      	b.n	8006b20 <UART_SetConfig+0xac>
 8006c30:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006c34:	d0bc      	beq.n	8006bb0 <UART_SetConfig+0x13c>
 8006c36:	e773      	b.n	8006b20 <UART_SetConfig+0xac>
 8006c38:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8006c3c:	d0c0      	beq.n	8006bc0 <UART_SetConfig+0x14c>
 8006c3e:	e76f      	b.n	8006b20 <UART_SetConfig+0xac>
        pclk = (uint32_t) HSI_VALUE;
 8006c40:	481c      	ldr	r0, [pc, #112]	@ (8006cb4 <UART_SetConfig+0x240>)
 8006c42:	e78c      	b.n	8006b5e <UART_SetConfig+0xea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c44:	f7fe fa72 	bl	800512c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	f43f af4a 	beq.w	8006ae2 <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c4e:	0040      	lsls	r0, r0, #1
 8006c50:	6861      	ldr	r1, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c52:	f64f 7cef 	movw	ip, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c56:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8006c5a:	fbb0 f3f1 	udiv	r3, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c5e:	f1a3 0210 	sub.w	r2, r3, #16
 8006c62:	4562      	cmp	r2, ip
 8006c64:	f63f af5c 	bhi.w	8006b20 <UART_SetConfig+0xac>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c68:	f023 050f 	bic.w	r5, r3, #15
        huart->Instance->BRR = brrtemp;
 8006c6c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c6e:	b2a8      	uxth	r0, r5
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c70:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006c74:	4303      	orrs	r3, r0
 8006c76:	60cb      	str	r3, [r1, #12]
 8006c78:	e733      	b.n	8006ae2 <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c7a:	f7fe fa6b 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
        break;
 8006c7e:	e7e3      	b.n	8006c48 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c80:	480d      	ldr	r0, [pc, #52]	@ (8006cb8 <UART_SetConfig+0x244>)
 8006c82:	e7e5      	b.n	8006c50 <UART_SetConfig+0x1dc>
 8006c84:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006c88:	e7e2      	b.n	8006c50 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetSysClockFreq();
 8006c8a:	f7fd fe23 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
        break;
 8006c8e:	e7db      	b.n	8006c48 <UART_SetConfig+0x1d4>
 8006c90:	efff69f3 	.word	0xefff69f3
 8006c94:	40008000 	.word	0x40008000
 8006c98:	40013800 	.word	0x40013800
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	40004400 	.word	0x40004400
 8006ca4:	40004800 	.word	0x40004800
 8006ca8:	40004c00 	.word	0x40004c00
 8006cac:	40005000 	.word	0x40005000
 8006cb0:	000ffcff 	.word	0x000ffcff
 8006cb4:	00f42400 	.word	0x00f42400
 8006cb8:	01e84800 	.word	0x01e84800

08006cbc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cbc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006cbe:	071a      	lsls	r2, r3, #28
{
 8006cc0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cc2:	d506      	bpl.n	8006cd2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cc4:	6801      	ldr	r1, [r0, #0]
 8006cc6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006cc8:	684a      	ldr	r2, [r1, #4]
 8006cca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006cce:	4322      	orrs	r2, r4
 8006cd0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cd2:	07dc      	lsls	r4, r3, #31
 8006cd4:	d506      	bpl.n	8006ce4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cd6:	6801      	ldr	r1, [r0, #0]
 8006cd8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8006cda:	684a      	ldr	r2, [r1, #4]
 8006cdc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006ce0:	4322      	orrs	r2, r4
 8006ce2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ce4:	0799      	lsls	r1, r3, #30
 8006ce6:	d506      	bpl.n	8006cf6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ce8:	6801      	ldr	r1, [r0, #0]
 8006cea:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006cec:	684a      	ldr	r2, [r1, #4]
 8006cee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006cf2:	4322      	orrs	r2, r4
 8006cf4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cf6:	075a      	lsls	r2, r3, #29
 8006cf8:	d506      	bpl.n	8006d08 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cfa:	6801      	ldr	r1, [r0, #0]
 8006cfc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006cfe:	684a      	ldr	r2, [r1, #4]
 8006d00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d04:	4322      	orrs	r2, r4
 8006d06:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d08:	06dc      	lsls	r4, r3, #27
 8006d0a:	d506      	bpl.n	8006d1a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d0c:	6801      	ldr	r1, [r0, #0]
 8006d0e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006d10:	688a      	ldr	r2, [r1, #8]
 8006d12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d16:	4322      	orrs	r2, r4
 8006d18:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d1a:	0699      	lsls	r1, r3, #26
 8006d1c:	d506      	bpl.n	8006d2c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d1e:	6801      	ldr	r1, [r0, #0]
 8006d20:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006d22:	688a      	ldr	r2, [r1, #8]
 8006d24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d28:	4322      	orrs	r2, r4
 8006d2a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d2c:	065a      	lsls	r2, r3, #25
 8006d2e:	d509      	bpl.n	8006d44 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d30:	6801      	ldr	r1, [r0, #0]
 8006d32:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006d34:	684a      	ldr	r2, [r1, #4]
 8006d36:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006d3a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d3c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d40:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d42:	d00b      	beq.n	8006d5c <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d44:	061b      	lsls	r3, r3, #24
 8006d46:	d506      	bpl.n	8006d56 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d48:	6804      	ldr	r4, [r0, #0]
 8006d4a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8006d4c:	6863      	ldr	r3, [r4, #4]
 8006d4e:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d52:	4301      	orrs	r1, r0
 8006d54:	6061      	str	r1, [r4, #4]
}
 8006d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d5a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d5c:	684a      	ldr	r2, [r1, #4]
 8006d5e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006d60:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006d64:	4322      	orrs	r2, r4
 8006d66:	604a      	str	r2, [r1, #4]
 8006d68:	e7ec      	b.n	8006d44 <UART_AdvFeatureConfig+0x88>
 8006d6a:	bf00      	nop

08006d6c <UART_CheckIdleState>:
{
 8006d6c:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6e:	2300      	movs	r3, #0
{
 8006d70:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d72:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8006d76:	f7fb ffff 	bl	8002d78 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d7a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8006d7c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d7e:	6810      	ldr	r0, [r2, #0]
 8006d80:	0703      	lsls	r3, r0, #28
 8006d82:	d40e      	bmi.n	8006da2 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d84:	6811      	ldr	r1, [r2, #0]
 8006d86:	0749      	lsls	r1, r1, #29
 8006d88:	d462      	bmi.n	8006e50 <UART_CheckIdleState+0xe4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8006d8c:	2120      	movs	r1, #32
 8006d8e:	67e1      	str	r1, [r4, #124]	@ 0x7c
  return HAL_OK;
 8006d90:	4628      	mov	r0, r5
  huart->RxState = HAL_UART_STATE_READY;
 8006d92:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d96:	6625      	str	r5, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d98:	6665      	str	r5, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
}
 8006da0:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da2:	69d1      	ldr	r1, [r2, #28]
 8006da4:	0288      	lsls	r0, r1, #10
 8006da6:	d4ed      	bmi.n	8006d84 <UART_CheckIdleState+0x18>
 8006da8:	e00e      	b.n	8006dc8 <UART_CheckIdleState+0x5c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	0741      	lsls	r1, r0, #29
 8006dae:	461a      	mov	r2, r3
 8006db0:	d507      	bpl.n	8006dc2 <UART_CheckIdleState+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006db2:	69d9      	ldr	r1, [r3, #28]
 8006db4:	0708      	lsls	r0, r1, #28
 8006db6:	f100 80e0 	bmi.w	8006f7a <UART_CheckIdleState+0x20e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dba:	69d8      	ldr	r0, [r3, #28]
 8006dbc:	0501      	lsls	r1, r0, #20
 8006dbe:	f100 81a6 	bmi.w	800710e <UART_CheckIdleState+0x3a2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	0298      	lsls	r0, r3, #10
 8006dc6:	d4dd      	bmi.n	8006d84 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc8:	f7fb ffd6 	bl	8002d78 <HAL_GetTick>
 8006dcc:	1b42      	subs	r2, r0, r5
 8006dce:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dd2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd4:	d3e9      	bcc.n	8006daa <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	e853 ef00 	ldrex	lr, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006dda:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	e843 c200 	strex	r2, ip, [r3]
 8006de2:	b38a      	cbz	r2, 8006e48 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	e853 5f00 	ldrex	r5, [r3]
 8006de8:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	e843 0100 	strex	r1, r0, [r3]
 8006df0:	b351      	cbz	r1, 8006e48 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	e853 ef00 	ldrex	lr, [r3]
 8006df6:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	e843 c200 	strex	r2, ip, [r3]
 8006dfe:	b31a      	cbz	r2, 8006e48 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	e853 5f00 	ldrex	r5, [r3]
 8006e04:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	e843 0100 	strex	r1, r0, [r3]
 8006e0c:	b1e1      	cbz	r1, 8006e48 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	e853 ef00 	ldrex	lr, [r3]
 8006e12:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	e843 c200 	strex	r2, ip, [r3]
 8006e1a:	b1aa      	cbz	r2, 8006e48 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	e853 5f00 	ldrex	r5, [r3]
 8006e20:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	e843 0100 	strex	r1, r0, [r3]
 8006e28:	b171      	cbz	r1, 8006e48 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	e853 ef00 	ldrex	lr, [r3]
 8006e2e:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	e843 c200 	strex	r2, ip, [r3]
 8006e36:	b13a      	cbz	r2, 8006e48 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	e853 5f00 	ldrex	r5, [r3]
 8006e3c:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	e843 0100 	strex	r1, r0, [r3]
 8006e44:	2900      	cmp	r1, #0
 8006e46:	d1c6      	bne.n	8006dd6 <UART_CheckIdleState+0x6a>
      huart->gState = HAL_UART_STATE_READY;
 8006e48:	2320      	movs	r3, #32
 8006e4a:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8006e4c:	2003      	movs	r0, #3
 8006e4e:	e7a4      	b.n	8006d9a <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e50:	69d2      	ldr	r2, [r2, #28]
 8006e52:	0253      	lsls	r3, r2, #9
 8006e54:	d499      	bmi.n	8006d8a <UART_CheckIdleState+0x1e>
 8006e56:	e00d      	b.n	8006e74 <UART_CheckIdleState+0x108>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e58:	6819      	ldr	r1, [r3, #0]
 8006e5a:	0748      	lsls	r0, r1, #29
 8006e5c:	d507      	bpl.n	8006e6e <UART_CheckIdleState+0x102>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	0711      	lsls	r1, r2, #28
 8006e62:	f100 821e 	bmi.w	80072a2 <UART_CheckIdleState+0x536>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e66:	69d8      	ldr	r0, [r3, #28]
 8006e68:	0502      	lsls	r2, r0, #20
 8006e6a:	f100 82e4 	bmi.w	8007436 <UART_CheckIdleState+0x6ca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	025b      	lsls	r3, r3, #9
 8006e72:	d48a      	bmi.n	8006d8a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e74:	f7fb ff80 	bl	8002d78 <HAL_GetTick>
 8006e78:	1b40      	subs	r0, r0, r5
 8006e7a:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	d3ea      	bcc.n	8006e58 <UART_CheckIdleState+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	e853 ef00 	ldrex	lr, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e86:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	e843 c200 	strex	r2, ip, [r3]
 8006e8e:	b38a      	cbz	r2, 8006ef4 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	e853 5f00 	ldrex	r5, [r3]
 8006e94:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	e843 0100 	strex	r1, r0, [r3]
 8006e9c:	b351      	cbz	r1, 8006ef4 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	e853 ef00 	ldrex	lr, [r3]
 8006ea2:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	e843 c200 	strex	r2, ip, [r3]
 8006eaa:	b31a      	cbz	r2, 8006ef4 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	e853 5f00 	ldrex	r5, [r3]
 8006eb0:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	e843 0100 	strex	r1, r0, [r3]
 8006eb8:	b1e1      	cbz	r1, 8006ef4 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	e853 ef00 	ldrex	lr, [r3]
 8006ebe:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	e843 c200 	strex	r2, ip, [r3]
 8006ec6:	b1aa      	cbz	r2, 8006ef4 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	e853 5f00 	ldrex	r5, [r3]
 8006ecc:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	e843 0100 	strex	r1, r0, [r3]
 8006ed4:	b171      	cbz	r1, 8006ef4 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	e853 ef00 	ldrex	lr, [r3]
 8006eda:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	e843 c200 	strex	r2, ip, [r3]
 8006ee2:	b13a      	cbz	r2, 8006ef4 <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	e853 5f00 	ldrex	r5, [r3]
 8006ee8:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	e843 0100 	strex	r1, r0, [r3]
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	d1c6      	bne.n	8006e82 <UART_CheckIdleState+0x116>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef4:	f103 0e08 	add.w	lr, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	e85e 2f00 	ldrex	r2, [lr]
 8006efc:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	e84e 1000 	strex	r0, r1, [lr]
 8006f04:	b3a8      	cbz	r0, 8006f72 <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	f103 0c08 	add.w	ip, r3, #8
 8006f0a:	e85c 2f00 	ldrex	r2, [ip]
 8006f0e:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	f103 0508 	add.w	r5, r3, #8
 8006f16:	e845 1000 	strex	r0, r1, [r5]
 8006f1a:	b350      	cbz	r0, 8006f72 <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	e85e 2f00 	ldrex	r2, [lr]
 8006f20:	f022 0c01 	bic.w	ip, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	e84e c100 	strex	r1, ip, [lr]
 8006f28:	b319      	cbz	r1, 8006f72 <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	e85e 5f00 	ldrex	r5, [lr]
 8006f2e:	f025 0201 	bic.w	r2, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	e84e 2000 	strex	r0, r2, [lr]
 8006f36:	b1e0      	cbz	r0, 8006f72 <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	e85e cf00 	ldrex	ip, [lr]
 8006f3c:	f02c 0101 	bic.w	r1, ip, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	e84e 1500 	strex	r5, r1, [lr]
 8006f44:	b1ad      	cbz	r5, 8006f72 <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	e85e 2f00 	ldrex	r2, [lr]
 8006f4a:	f022 0c01 	bic.w	ip, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	e84e c000 	strex	r0, ip, [lr]
 8006f52:	b170      	cbz	r0, 8006f72 <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	e85e 1f00 	ldrex	r1, [lr]
 8006f58:	f021 0501 	bic.w	r5, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	e84e 5200 	strex	r2, r5, [lr]
 8006f60:	b13a      	cbz	r2, 8006f72 <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	e85e 0f00 	ldrex	r0, [lr]
 8006f66:	f020 0c01 	bic.w	ip, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	e84e c100 	strex	r1, ip, [lr]
 8006f6e:	2900      	cmp	r1, #0
 8006f70:	d1c0      	bne.n	8006ef4 <UART_CheckIdleState+0x188>
      huart->RxState = HAL_UART_STATE_READY;
 8006f72:	2320      	movs	r3, #32
 8006f74:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8006f78:	e768      	b.n	8006e4c <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f7a:	2108      	movs	r1, #8
 8006f7c:	6219      	str	r1, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	e853 cf00 	ldrex	ip, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f82:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	e843 e200 	strex	r2, lr, [r3]
 8006f8a:	b38a      	cbz	r2, 8006ff0 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	e853 5f00 	ldrex	r5, [r3]
 8006f90:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	e843 0100 	strex	r1, r0, [r3]
 8006f98:	b351      	cbz	r1, 8006ff0 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	e853 cf00 	ldrex	ip, [r3]
 8006f9e:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	e843 e200 	strex	r2, lr, [r3]
 8006fa6:	b31a      	cbz	r2, 8006ff0 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	e853 5f00 	ldrex	r5, [r3]
 8006fac:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	e843 0100 	strex	r1, r0, [r3]
 8006fb4:	b1e1      	cbz	r1, 8006ff0 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	e853 cf00 	ldrex	ip, [r3]
 8006fba:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	e843 e200 	strex	r2, lr, [r3]
 8006fc2:	b1aa      	cbz	r2, 8006ff0 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	e853 5f00 	ldrex	r5, [r3]
 8006fc8:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	e843 0100 	strex	r1, r0, [r3]
 8006fd0:	b171      	cbz	r1, 8006ff0 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	e853 cf00 	ldrex	ip, [r3]
 8006fd6:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	e843 e200 	strex	r2, lr, [r3]
 8006fde:	b13a      	cbz	r2, 8006ff0 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	e853 5f00 	ldrex	r5, [r3]
 8006fe4:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	e843 0100 	strex	r1, r0, [r3]
 8006fec:	2900      	cmp	r1, #0
 8006fee:	d1c6      	bne.n	8006f7e <UART_CheckIdleState+0x212>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff0:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	e85c 2f00 	ldrex	r2, [ip]
 8006ff8:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	e84c 1000 	strex	r0, r1, [ip]
 8007000:	b3a8      	cbz	r0, 800706e <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007002:	f103 0e08 	add.w	lr, r3, #8
 8007006:	e85e 2f00 	ldrex	r2, [lr]
 800700a:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	f103 0508 	add.w	r5, r3, #8
 8007012:	e845 1000 	strex	r0, r1, [r5]
 8007016:	b350      	cbz	r0, 800706e <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	e85c 2f00 	ldrex	r2, [ip]
 800701c:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	e84c e100 	strex	r1, lr, [ip]
 8007024:	b319      	cbz	r1, 800706e <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	e85c 5f00 	ldrex	r5, [ip]
 800702a:	f025 0201 	bic.w	r2, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	e84c 2000 	strex	r0, r2, [ip]
 8007032:	b1e0      	cbz	r0, 800706e <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	e85c ef00 	ldrex	lr, [ip]
 8007038:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	e84c 1500 	strex	r5, r1, [ip]
 8007040:	b1ad      	cbz	r5, 800706e <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	e85c 2f00 	ldrex	r2, [ip]
 8007046:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	e84c e000 	strex	r0, lr, [ip]
 800704e:	b170      	cbz	r0, 800706e <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	e85c 1f00 	ldrex	r1, [ip]
 8007054:	f021 0501 	bic.w	r5, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	e84c 5200 	strex	r2, r5, [ip]
 800705c:	b13a      	cbz	r2, 800706e <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	e85c 0f00 	ldrex	r0, [ip]
 8007062:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	e84c e100 	strex	r1, lr, [ip]
 800706a:	2900      	cmp	r1, #0
 800706c:	d1c0      	bne.n	8006ff0 <UART_CheckIdleState+0x284>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800706e:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8007070:	2d01      	cmp	r5, #1
 8007072:	d00b      	beq.n	800708c <UART_CheckIdleState+0x320>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007074:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007076:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007078:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800707a:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 800707e:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007080:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8007082:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007086:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 800708a:	e6a4      	b.n	8006dd6 <UART_CheckIdleState+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	e853 cf00 	ldrex	ip, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007090:	f02c 0210 	bic.w	r2, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	e843 2000 	strex	r0, r2, [r3]
 8007098:	2800      	cmp	r0, #0
 800709a:	d0eb      	beq.n	8007074 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	e853 1f00 	ldrex	r1, [r3]
 80070a0:	f021 0510 	bic.w	r5, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a4:	e843 5200 	strex	r2, r5, [r3]
 80070a8:	2a00      	cmp	r2, #0
 80070aa:	d0e3      	beq.n	8007074 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	e853 0f00 	ldrex	r0, [r3]
 80070b0:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	e843 5100 	strex	r1, r5, [r3]
 80070b8:	2900      	cmp	r1, #0
 80070ba:	d0db      	beq.n	8007074 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	e853 ef00 	ldrex	lr, [r3]
 80070c0:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	e843 c200 	strex	r2, ip, [r3]
 80070c8:	2a00      	cmp	r2, #0
 80070ca:	d0d3      	beq.n	8007074 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	e853 0f00 	ldrex	r0, [r3]
 80070d0:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	e843 5100 	strex	r1, r5, [r3]
 80070d8:	2900      	cmp	r1, #0
 80070da:	d0cb      	beq.n	8007074 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	e853 ef00 	ldrex	lr, [r3]
 80070e0:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	e843 c200 	strex	r2, ip, [r3]
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	d0c3      	beq.n	8007074 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	e853 0f00 	ldrex	r0, [r3]
 80070f0:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	e843 5100 	strex	r1, r5, [r3]
 80070f8:	2900      	cmp	r1, #0
 80070fa:	d0bb      	beq.n	8007074 <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	e853 ef00 	ldrex	lr, [r3]
 8007100:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	e843 c200 	strex	r2, ip, [r3]
 8007108:	2a00      	cmp	r2, #0
 800710a:	d1bf      	bne.n	800708c <UART_CheckIdleState+0x320>
 800710c:	e7b2      	b.n	8007074 <UART_CheckIdleState+0x308>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800710e:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8007112:	621d      	str	r5, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	e853 ef00 	ldrex	lr, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007118:	f42e 7290 	bic.w	r2, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	e843 2000 	strex	r0, r2, [r3]
 8007120:	b388      	cbz	r0, 8007186 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	e853 1f00 	ldrex	r1, [r3]
 8007126:	f421 7590 	bic.w	r5, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	e843 5200 	strex	r2, r5, [r3]
 800712e:	b352      	cbz	r2, 8007186 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	e853 0f00 	ldrex	r0, [r3]
 8007134:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	e843 5100 	strex	r1, r5, [r3]
 800713c:	b319      	cbz	r1, 8007186 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	e853 cf00 	ldrex	ip, [r3]
 8007142:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	e843 e200 	strex	r2, lr, [r3]
 800714a:	b1e2      	cbz	r2, 8007186 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	e853 0f00 	ldrex	r0, [r3]
 8007150:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	e843 5100 	strex	r1, r5, [r3]
 8007158:	b1a9      	cbz	r1, 8007186 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	e853 cf00 	ldrex	ip, [r3]
 800715e:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	e843 e200 	strex	r2, lr, [r3]
 8007166:	b172      	cbz	r2, 8007186 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	e853 0f00 	ldrex	r0, [r3]
 800716c:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	e843 5100 	strex	r1, r5, [r3]
 8007174:	b139      	cbz	r1, 8007186 <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	e853 cf00 	ldrex	ip, [r3]
 800717a:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	e843 e200 	strex	r2, lr, [r3]
 8007182:	2a00      	cmp	r2, #0
 8007184:	d1c6      	bne.n	8007114 <UART_CheckIdleState+0x3a8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007186:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	e85c 5f00 	ldrex	r5, [ip]
 800718e:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	e84c 1200 	strex	r2, r1, [ip]
 8007196:	b3aa      	cbz	r2, 8007204 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	f103 0008 	add.w	r0, r3, #8
 800719c:	e850 5f00 	ldrex	r5, [r0]
 80071a0:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	f103 0e08 	add.w	lr, r3, #8
 80071a8:	e84e 1200 	strex	r2, r1, [lr]
 80071ac:	b352      	cbz	r2, 8007204 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	e85c 0f00 	ldrex	r0, [ip]
 80071b2:	f020 0501 	bic.w	r5, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	e84c 5100 	strex	r1, r5, [ip]
 80071ba:	b319      	cbz	r1, 8007204 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	e85c 2f00 	ldrex	r2, [ip]
 80071c0:	f022 0501 	bic.w	r5, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	e84c 5000 	strex	r0, r5, [ip]
 80071c8:	b1e0      	cbz	r0, 8007204 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	e85c ef00 	ldrex	lr, [ip]
 80071ce:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	e84c 1200 	strex	r2, r1, [ip]
 80071d6:	b1aa      	cbz	r2, 8007204 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	e85c 5f00 	ldrex	r5, [ip]
 80071dc:	f025 0e01 	bic.w	lr, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	e84c e000 	strex	r0, lr, [ip]
 80071e4:	b170      	cbz	r0, 8007204 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	e85c 1f00 	ldrex	r1, [ip]
 80071ea:	f021 0201 	bic.w	r2, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	e84c 2500 	strex	r5, r2, [ip]
 80071f2:	b13d      	cbz	r5, 8007204 <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	e85c 0f00 	ldrex	r0, [ip]
 80071f8:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	e84c e100 	strex	r1, lr, [ip]
 8007200:	2900      	cmp	r1, #0
 8007202:	d1c0      	bne.n	8007186 <UART_CheckIdleState+0x41a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007204:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8007206:	2a01      	cmp	r2, #1
 8007208:	d00a      	beq.n	8007220 <UART_CheckIdleState+0x4b4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800720a:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 800720c:	2020      	movs	r0, #32
 800720e:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8007212:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007214:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8007216:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800721a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 800721e:	e5da      	b.n	8006dd6 <UART_CheckIdleState+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	e853 5f00 	ldrex	r5, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007224:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	e843 0100 	strex	r1, r0, [r3]
 800722c:	2900      	cmp	r1, #0
 800722e:	d0ec      	beq.n	800720a <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	e853 cf00 	ldrex	ip, [r3]
 8007234:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	e843 e200 	strex	r2, lr, [r3]
 800723c:	2a00      	cmp	r2, #0
 800723e:	d0e4      	beq.n	800720a <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	e853 5f00 	ldrex	r5, [r3]
 8007244:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	e843 0100 	strex	r1, r0, [r3]
 800724c:	2900      	cmp	r1, #0
 800724e:	d0dc      	beq.n	800720a <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	e853 cf00 	ldrex	ip, [r3]
 8007254:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	e843 e200 	strex	r2, lr, [r3]
 800725c:	2a00      	cmp	r2, #0
 800725e:	d0d4      	beq.n	800720a <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	e853 5f00 	ldrex	r5, [r3]
 8007264:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	e843 0100 	strex	r1, r0, [r3]
 800726c:	2900      	cmp	r1, #0
 800726e:	d0cc      	beq.n	800720a <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	e853 cf00 	ldrex	ip, [r3]
 8007274:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	e843 e200 	strex	r2, lr, [r3]
 800727c:	2a00      	cmp	r2, #0
 800727e:	d0c4      	beq.n	800720a <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	e853 5f00 	ldrex	r5, [r3]
 8007284:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	e843 0100 	strex	r1, r0, [r3]
 800728c:	2900      	cmp	r1, #0
 800728e:	d0bc      	beq.n	800720a <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	e853 cf00 	ldrex	ip, [r3]
 8007294:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	e843 e200 	strex	r2, lr, [r3]
 800729c:	2a00      	cmp	r2, #0
 800729e:	d1bf      	bne.n	8007220 <UART_CheckIdleState+0x4b4>
 80072a0:	e7b3      	b.n	800720a <UART_CheckIdleState+0x49e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072a2:	2108      	movs	r1, #8
 80072a4:	6219      	str	r1, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	e853 cf00 	ldrex	ip, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072aa:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	e843 e200 	strex	r2, lr, [r3]
 80072b2:	b38a      	cbz	r2, 8007318 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	e853 5f00 	ldrex	r5, [r3]
 80072b8:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	e843 0100 	strex	r1, r0, [r3]
 80072c0:	b351      	cbz	r1, 8007318 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	e853 cf00 	ldrex	ip, [r3]
 80072c6:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	e843 e200 	strex	r2, lr, [r3]
 80072ce:	b31a      	cbz	r2, 8007318 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	e853 5f00 	ldrex	r5, [r3]
 80072d4:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	e843 0100 	strex	r1, r0, [r3]
 80072dc:	b1e1      	cbz	r1, 8007318 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	e853 cf00 	ldrex	ip, [r3]
 80072e2:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	e843 e200 	strex	r2, lr, [r3]
 80072ea:	b1aa      	cbz	r2, 8007318 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	e853 5f00 	ldrex	r5, [r3]
 80072f0:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	e843 0100 	strex	r1, r0, [r3]
 80072f8:	b171      	cbz	r1, 8007318 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	e853 cf00 	ldrex	ip, [r3]
 80072fe:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	e843 e200 	strex	r2, lr, [r3]
 8007306:	b13a      	cbz	r2, 8007318 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	e853 5f00 	ldrex	r5, [r3]
 800730c:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	e843 0100 	strex	r1, r0, [r3]
 8007314:	2900      	cmp	r1, #0
 8007316:	d1c6      	bne.n	80072a6 <UART_CheckIdleState+0x53a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007318:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	e85c 2f00 	ldrex	r2, [ip]
 8007320:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	e84c 1000 	strex	r0, r1, [ip]
 8007328:	b3a8      	cbz	r0, 8007396 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	f103 0e08 	add.w	lr, r3, #8
 800732e:	e85e 2f00 	ldrex	r2, [lr]
 8007332:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	f103 0508 	add.w	r5, r3, #8
 800733a:	e845 1000 	strex	r0, r1, [r5]
 800733e:	b350      	cbz	r0, 8007396 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	e85c 2f00 	ldrex	r2, [ip]
 8007344:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	e84c e100 	strex	r1, lr, [ip]
 800734c:	b319      	cbz	r1, 8007396 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	e85c 5f00 	ldrex	r5, [ip]
 8007352:	f025 0201 	bic.w	r2, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	e84c 2000 	strex	r0, r2, [ip]
 800735a:	b1e0      	cbz	r0, 8007396 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	e85c ef00 	ldrex	lr, [ip]
 8007360:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	e84c 1500 	strex	r5, r1, [ip]
 8007368:	b1ad      	cbz	r5, 8007396 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	e85c 2f00 	ldrex	r2, [ip]
 800736e:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	e84c e000 	strex	r0, lr, [ip]
 8007376:	b170      	cbz	r0, 8007396 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	e85c 1f00 	ldrex	r1, [ip]
 800737c:	f021 0501 	bic.w	r5, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	e84c 5200 	strex	r2, r5, [ip]
 8007384:	b13a      	cbz	r2, 8007396 <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	e85c 0f00 	ldrex	r0, [ip]
 800738a:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	e84c e100 	strex	r1, lr, [ip]
 8007392:	2900      	cmp	r1, #0
 8007394:	d1c0      	bne.n	8007318 <UART_CheckIdleState+0x5ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007396:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8007398:	2d01      	cmp	r5, #1
 800739a:	d00b      	beq.n	80073b4 <UART_CheckIdleState+0x648>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739c:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 800739e:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073a0:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80073a2:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80073a6:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a8:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80073aa:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073ae:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 80073b2:	e566      	b.n	8006e82 <UART_CheckIdleState+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	e853 cf00 	ldrex	ip, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b8:	f02c 0210 	bic.w	r2, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	e843 2000 	strex	r0, r2, [r3]
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d0eb      	beq.n	800739c <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	e853 1f00 	ldrex	r1, [r3]
 80073c8:	f021 0510 	bic.w	r5, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	e843 5200 	strex	r2, r5, [r3]
 80073d0:	2a00      	cmp	r2, #0
 80073d2:	d0e3      	beq.n	800739c <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	e853 0f00 	ldrex	r0, [r3]
 80073d8:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	e843 5100 	strex	r1, r5, [r3]
 80073e0:	2900      	cmp	r1, #0
 80073e2:	d0db      	beq.n	800739c <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	e853 ef00 	ldrex	lr, [r3]
 80073e8:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	e843 c200 	strex	r2, ip, [r3]
 80073f0:	2a00      	cmp	r2, #0
 80073f2:	d0d3      	beq.n	800739c <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	e853 0f00 	ldrex	r0, [r3]
 80073f8:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	e843 5100 	strex	r1, r5, [r3]
 8007400:	2900      	cmp	r1, #0
 8007402:	d0cb      	beq.n	800739c <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	e853 ef00 	ldrex	lr, [r3]
 8007408:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	e843 c200 	strex	r2, ip, [r3]
 8007410:	2a00      	cmp	r2, #0
 8007412:	d0c3      	beq.n	800739c <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	e853 0f00 	ldrex	r0, [r3]
 8007418:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	e843 5100 	strex	r1, r5, [r3]
 8007420:	2900      	cmp	r1, #0
 8007422:	d0bb      	beq.n	800739c <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	e853 ef00 	ldrex	lr, [r3]
 8007428:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	e843 c200 	strex	r2, ip, [r3]
 8007430:	2a00      	cmp	r2, #0
 8007432:	d1bf      	bne.n	80073b4 <UART_CheckIdleState+0x648>
 8007434:	e7b2      	b.n	800739c <UART_CheckIdleState+0x630>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007436:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800743a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	e853 0f00 	ldrex	r0, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007440:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	e843 5100 	strex	r1, r5, [r3]
 8007448:	b389      	cbz	r1, 80074ae <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	e853 cf00 	ldrex	ip, [r3]
 800744e:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	e843 e200 	strex	r2, lr, [r3]
 8007456:	b352      	cbz	r2, 80074ae <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	e853 0f00 	ldrex	r0, [r3]
 800745c:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	e843 5100 	strex	r1, r5, [r3]
 8007464:	b319      	cbz	r1, 80074ae <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	e853 cf00 	ldrex	ip, [r3]
 800746a:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	e843 e200 	strex	r2, lr, [r3]
 8007472:	b1e2      	cbz	r2, 80074ae <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	e853 0f00 	ldrex	r0, [r3]
 8007478:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	e843 5100 	strex	r1, r5, [r3]
 8007480:	b1a9      	cbz	r1, 80074ae <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	e853 cf00 	ldrex	ip, [r3]
 8007486:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	e843 e200 	strex	r2, lr, [r3]
 800748e:	b172      	cbz	r2, 80074ae <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	e853 0f00 	ldrex	r0, [r3]
 8007494:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	e843 5100 	strex	r1, r5, [r3]
 800749c:	b139      	cbz	r1, 80074ae <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	e853 cf00 	ldrex	ip, [r3]
 80074a2:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a6:	e843 e200 	strex	r2, lr, [r3]
 80074aa:	2a00      	cmp	r2, #0
 80074ac:	d1c6      	bne.n	800743c <UART_CheckIdleState+0x6d0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ae:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	e85c 5f00 	ldrex	r5, [ip]
 80074b6:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ba:	e84c 1200 	strex	r2, r1, [ip]
 80074be:	b3aa      	cbz	r2, 800752c <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	f103 0008 	add.w	r0, r3, #8
 80074c4:	e850 5f00 	ldrex	r5, [r0]
 80074c8:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	f103 0e08 	add.w	lr, r3, #8
 80074d0:	e84e 1200 	strex	r2, r1, [lr]
 80074d4:	b352      	cbz	r2, 800752c <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	e85c 0f00 	ldrex	r0, [ip]
 80074da:	f020 0501 	bic.w	r5, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	e84c 5100 	strex	r1, r5, [ip]
 80074e2:	b319      	cbz	r1, 800752c <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	e85c 2f00 	ldrex	r2, [ip]
 80074e8:	f022 0501 	bic.w	r5, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	e84c 5000 	strex	r0, r5, [ip]
 80074f0:	b1e0      	cbz	r0, 800752c <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	e85c ef00 	ldrex	lr, [ip]
 80074f6:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	e84c 1200 	strex	r2, r1, [ip]
 80074fe:	b1aa      	cbz	r2, 800752c <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	e85c 5f00 	ldrex	r5, [ip]
 8007504:	f025 0e01 	bic.w	lr, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	e84c e000 	strex	r0, lr, [ip]
 800750c:	b170      	cbz	r0, 800752c <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	e85c 1f00 	ldrex	r1, [ip]
 8007512:	f021 0201 	bic.w	r2, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	e84c 2500 	strex	r5, r2, [ip]
 800751a:	b13d      	cbz	r5, 800752c <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751c:	e85c 0f00 	ldrex	r0, [ip]
 8007520:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	e84c e100 	strex	r1, lr, [ip]
 8007528:	2900      	cmp	r1, #0
 800752a:	d1c0      	bne.n	80074ae <UART_CheckIdleState+0x742>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800752c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800752e:	2a01      	cmp	r2, #1
 8007530:	d00a      	beq.n	8007548 <UART_CheckIdleState+0x7dc>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007532:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007534:	2020      	movs	r0, #32
 8007536:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 800753a:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753c:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 800753e:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007542:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8007546:	e49c      	b.n	8006e82 <UART_CheckIdleState+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	e853 5f00 	ldrex	r5, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754c:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	e843 0100 	strex	r1, r0, [r3]
 8007554:	2900      	cmp	r1, #0
 8007556:	d0ec      	beq.n	8007532 <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	e853 cf00 	ldrex	ip, [r3]
 800755c:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	e843 e200 	strex	r2, lr, [r3]
 8007564:	2a00      	cmp	r2, #0
 8007566:	d0e4      	beq.n	8007532 <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	e853 5f00 	ldrex	r5, [r3]
 800756c:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	e843 0100 	strex	r1, r0, [r3]
 8007574:	2900      	cmp	r1, #0
 8007576:	d0dc      	beq.n	8007532 <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	e853 cf00 	ldrex	ip, [r3]
 800757c:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	e843 e200 	strex	r2, lr, [r3]
 8007584:	2a00      	cmp	r2, #0
 8007586:	d0d4      	beq.n	8007532 <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	e853 5f00 	ldrex	r5, [r3]
 800758c:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	e843 0100 	strex	r1, r0, [r3]
 8007594:	2900      	cmp	r1, #0
 8007596:	d0cc      	beq.n	8007532 <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	e853 cf00 	ldrex	ip, [r3]
 800759c:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	e843 e200 	strex	r2, lr, [r3]
 80075a4:	2a00      	cmp	r2, #0
 80075a6:	d0c4      	beq.n	8007532 <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	e853 5f00 	ldrex	r5, [r3]
 80075ac:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	e843 0100 	strex	r1, r0, [r3]
 80075b4:	2900      	cmp	r1, #0
 80075b6:	d0bc      	beq.n	8007532 <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	e853 cf00 	ldrex	ip, [r3]
 80075bc:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	e843 e200 	strex	r2, lr, [r3]
 80075c4:	2a00      	cmp	r2, #0
 80075c6:	d1bf      	bne.n	8007548 <UART_CheckIdleState+0x7dc>
 80075c8:	e7b3      	b.n	8007532 <UART_CheckIdleState+0x7c6>
 80075ca:	bf00      	nop

080075cc <HAL_UART_Init>:
  if (huart == NULL)
 80075cc:	b370      	cbz	r0, 800762c <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80075ce:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 80075d0:	b510      	push	{r4, lr}
 80075d2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80075d4:	b32b      	cbz	r3, 8007622 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 80075d6:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 80075da:	2024      	movs	r0, #36	@ 0x24
 80075dc:	67e0      	str	r0, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80075de:	6813      	ldr	r3, [r2, #0]
 80075e0:	f023 0001 	bic.w	r0, r3, #1
 80075e4:	6010      	str	r0, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075e6:	b9c1      	cbnz	r1, 800761a <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075e8:	4620      	mov	r0, r4
 80075ea:	f7ff fa43 	bl	8006a74 <UART_SetConfig>
 80075ee:	2801      	cmp	r0, #1
 80075f0:	d011      	beq.n	8007616 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075f2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80075f4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075f6:	685c      	ldr	r4, [r3, #4]
 80075f8:	f424 4290 	bic.w	r2, r4, #18432	@ 0x4800
 80075fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075fe:	6899      	ldr	r1, [r3, #8]
 8007600:	f021 042a 	bic.w	r4, r1, #42	@ 0x2a
 8007604:	609c      	str	r4, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	f042 0101 	orr.w	r1, r2, #1
}
 800760c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8007610:	6019      	str	r1, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007612:	f7ff bbab 	b.w	8006d6c <UART_CheckIdleState>
}
 8007616:	2001      	movs	r0, #1
 8007618:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800761a:	4620      	mov	r0, r4
 800761c:	f7ff fb4e 	bl	8006cbc <UART_AdvFeatureConfig>
 8007620:	e7e2      	b.n	80075e8 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8007622:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8007626:	f7fb fa1f 	bl	8002a68 <HAL_UART_MspInit>
 800762a:	e7d4      	b.n	80075d6 <HAL_UART_Init+0xa>
}
 800762c:	2001      	movs	r0, #1
 800762e:	4770      	bx	lr

08007630 <arm_split_rfft_q15>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	b083      	sub	sp, #12
 8007636:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 800763a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800763c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800763e:	3d01      	subs	r5, #1
 8007640:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 8007644:	00ac      	lsls	r4, r5, #2
 8007646:	9401      	str	r4, [sp, #4]
 8007648:	1e4c      	subs	r4, r1, #1
 800764a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800764e:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8007652:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007656:	d02d      	beq.n	80076b4 <arm_split_rfft_q15+0x84>
 8007658:	2f01      	cmp	r7, #1
 800765a:	f1a6 0c04 	sub.w	ip, r6, #4
 800765e:	f100 0604 	add.w	r6, r0, #4
 8007662:	d13e      	bne.n	80076e2 <arm_split_rfft_q15+0xb2>
 8007664:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8007666:	f1ac 0104 	sub.w	r1, ip, #4
 800766a:	f107 0808 	add.w	r8, r7, #8
 800766e:	f856 7b04 	ldr.w	r7, [r6], #4
 8007672:	f852 9b04 	ldr.w	r9, [r2], #4
 8007676:	fb47 fc09 	smusd	ip, r7, r9
 800767a:	f855 e904 	ldr.w	lr, [r5], #-4
 800767e:	f853 ab04 	ldr.w	sl, [r3], #4
 8007682:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8007686:	fb4e fe1a 	smusdx	lr, lr, sl
 800768a:	fb27 e719 	smladx	r7, r7, r9, lr
 800768e:	143f      	asrs	r7, r7, #16
 8007690:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8007694:	f1c7 0e00 	rsb	lr, r7, #0
 8007698:	3c01      	subs	r4, #1
 800769a:	f828 7c02 	strh.w	r7, [r8, #-2]
 800769e:	f828 cc04 	strh.w	ip, [r8, #-4]
 80076a2:	f1a1 0104 	sub.w	r1, r1, #4
 80076a6:	f8a1 e00a 	strh.w	lr, [r1, #10]
 80076aa:	f8a1 c008 	strh.w	ip, [r1, #8]
 80076ae:	f108 0804 	add.w	r8, r8, #4
 80076b2:	d1dc      	bne.n	800766e <arm_split_rfft_q15+0x3e>
 80076b4:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80076b8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80076bc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80076be:	9a01      	ldr	r2, [sp, #4]
 80076c0:	1a5b      	subs	r3, r3, r1
 80076c2:	4422      	add	r2, r4
 80076c4:	2100      	movs	r1, #0
 80076c6:	105b      	asrs	r3, r3, #1
 80076c8:	8093      	strh	r3, [r2, #4]
 80076ca:	80d1      	strh	r1, [r2, #6]
 80076cc:	f9b0 3000 	ldrsh.w	r3, [r0]
 80076d0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80076d4:	8061      	strh	r1, [r4, #2]
 80076d6:	4413      	add	r3, r2
 80076d8:	105b      	asrs	r3, r3, #1
 80076da:	8023      	strh	r3, [r4, #0]
 80076dc:	b003      	add	sp, #12
 80076de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e2:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80076e6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80076e8:	f1ac 0104 	sub.w	r1, ip, #4
 80076ec:	f107 0808 	add.w	r8, r7, #8
 80076f0:	f856 7b04 	ldr.w	r7, [r6], #4
 80076f4:	f8d2 9000 	ldr.w	r9, [r2]
 80076f8:	fb47 fc09 	smusd	ip, r7, r9
 80076fc:	f855 e904 	ldr.w	lr, [r5], #-4
 8007700:	f8d3 a000 	ldr.w	sl, [r3]
 8007704:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8007708:	fb4e fe1a 	smusdx	lr, lr, sl
 800770c:	fb27 e719 	smladx	r7, r7, r9, lr
 8007710:	143f      	asrs	r7, r7, #16
 8007712:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8007716:	f1c7 0e00 	rsb	lr, r7, #0
 800771a:	3c01      	subs	r4, #1
 800771c:	f828 7c02 	strh.w	r7, [r8, #-2]
 8007720:	f828 cc04 	strh.w	ip, [r8, #-4]
 8007724:	445b      	add	r3, fp
 8007726:	f8a1 e006 	strh.w	lr, [r1, #6]
 800772a:	f8a1 c004 	strh.w	ip, [r1, #4]
 800772e:	445a      	add	r2, fp
 8007730:	f108 0804 	add.w	r8, r8, #4
 8007734:	f1a1 0104 	sub.w	r1, r1, #4
 8007738:	d1da      	bne.n	80076f0 <arm_split_rfft_q15+0xc0>
 800773a:	e7bb      	b.n	80076b4 <arm_split_rfft_q15+0x84>

0800773c <arm_rfft_q15>:
 800773c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007740:	f890 e004 	ldrb.w	lr, [r0, #4]
 8007744:	6806      	ldr	r6, [r0, #0]
 8007746:	f1be 0f01 	cmp.w	lr, #1
 800774a:	4604      	mov	r4, r0
 800774c:	b083      	sub	sp, #12
 800774e:	6940      	ldr	r0, [r0, #20]
 8007750:	4615      	mov	r5, r2
 8007752:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007756:	460f      	mov	r7, r1
 8007758:	d00f      	beq.n	800777a <arm_rfft_q15+0x3e>
 800775a:	7963      	ldrb	r3, [r4, #5]
 800775c:	4672      	mov	r2, lr
 800775e:	f000 fa3f 	bl	8007be0 <arm_cfft_q15>
 8007762:	68a3      	ldr	r3, [r4, #8]
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	9500      	str	r5, [sp, #0]
 8007768:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 800776c:	4631      	mov	r1, r6
 800776e:	4638      	mov	r0, r7
 8007770:	f7ff ff5e 	bl	8007630 <arm_split_rfft_q15>
 8007774:	b003      	add	sp, #12
 8007776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777a:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 800777e:	68a2      	ldr	r2, [r4, #8]
 8007780:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 8007784:	b30e      	cbz	r6, 80077ca <arm_rfft_q15+0x8e>
 8007786:	2a01      	cmp	r2, #1
 8007788:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800778c:	d132      	bne.n	80077f4 <arm_rfft_q15+0xb8>
 800778e:	46a9      	mov	r9, r5
 8007790:	f85c 8904 	ldr.w	r8, [ip], #-4
 8007794:	f851 2b04 	ldr.w	r2, [r1], #4
 8007798:	fb48 fa02 	smusd	sl, r8, r2
 800779c:	f857 bb04 	ldr.w	fp, [r7], #4
 80077a0:	f853 eb04 	ldr.w	lr, [r3], #4
 80077a4:	fb2b aa0e 	smlad	sl, fp, lr, sl
 80077a8:	fb28 f812 	smuadx	r8, r8, r2
 80077ac:	f1c8 0200 	rsb	r2, r8, #0
 80077b0:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 80077b4:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80077b8:	0412      	lsls	r2, r2, #16
 80077ba:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 80077be:	3e01      	subs	r6, #1
 80077c0:	f849 2b04 	str.w	r2, [r9], #4
 80077c4:	d1e4      	bne.n	8007790 <arm_rfft_q15+0x54>
 80077c6:	f894 e004 	ldrb.w	lr, [r4, #4]
 80077ca:	7963      	ldrb	r3, [r4, #5]
 80077cc:	4672      	mov	r2, lr
 80077ce:	4629      	mov	r1, r5
 80077d0:	f000 fa06 	bl	8007be0 <arm_cfft_q15>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0cc      	beq.n	8007774 <arm_rfft_q15+0x38>
 80077da:	3d02      	subs	r5, #2
 80077dc:	2100      	movs	r1, #0
 80077de:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	802b      	strh	r3, [r5, #0]
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	3101      	adds	r1, #1
 80077ea:	428b      	cmp	r3, r1
 80077ec:	d8f7      	bhi.n	80077de <arm_rfft_q15+0xa2>
 80077ee:	b003      	add	sp, #12
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	ee07 0a90 	vmov	s15, r0
 80077f8:	46a8      	mov	r8, r5
 80077fa:	f85c e904 	ldr.w	lr, [ip], #-4
 80077fe:	6808      	ldr	r0, [r1, #0]
 8007800:	fb4e f900 	smusd	r9, lr, r0
 8007804:	f857 ab04 	ldr.w	sl, [r7], #4
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	fb2a 9902 	smlad	r9, sl, r2, r9
 800780e:	fb2e fe10 	smuadx	lr, lr, r0
 8007812:	f1ce 0e00 	rsb	lr, lr, #0
 8007816:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 800781a:	0c12      	lsrs	r2, r2, #16
 800781c:	0412      	lsls	r2, r2, #16
 800781e:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 8007822:	3e01      	subs	r6, #1
 8007824:	f848 2b04 	str.w	r2, [r8], #4
 8007828:	4459      	add	r1, fp
 800782a:	445b      	add	r3, fp
 800782c:	d1e5      	bne.n	80077fa <arm_rfft_q15+0xbe>
 800782e:	ee17 0a90 	vmov	r0, s15
 8007832:	e7c8      	b.n	80077c6 <arm_rfft_q15+0x8a>

08007834 <arm_rfft_init_q15>:
 8007834:	b430      	push	{r4, r5}
 8007836:	b289      	uxth	r1, r1
 8007838:	4d31      	ldr	r5, [pc, #196]	@ (8007900 <arm_rfft_init_q15+0xcc>)
 800783a:	4c32      	ldr	r4, [pc, #200]	@ (8007904 <arm_rfft_init_q15+0xd0>)
 800783c:	6001      	str	r1, [r0, #0]
 800783e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007842:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8007846:	7102      	strb	r2, [r0, #4]
 8007848:	7143      	strb	r3, [r0, #5]
 800784a:	d053      	beq.n	80078f4 <arm_rfft_init_q15+0xc0>
 800784c:	d91a      	bls.n	8007884 <arm_rfft_init_q15+0x50>
 800784e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007852:	d033      	beq.n	80078bc <arm_rfft_init_q15+0x88>
 8007854:	d909      	bls.n	800786a <arm_rfft_init_q15+0x36>
 8007856:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800785a:	d12b      	bne.n	80078b4 <arm_rfft_init_q15+0x80>
 800785c:	4b2a      	ldr	r3, [pc, #168]	@ (8007908 <arm_rfft_init_q15+0xd4>)
 800785e:	6143      	str	r3, [r0, #20]
 8007860:	2201      	movs	r2, #1
 8007862:	6082      	str	r2, [r0, #8]
 8007864:	2000      	movs	r0, #0
 8007866:	bc30      	pop	{r4, r5}
 8007868:	4770      	bx	lr
 800786a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800786e:	d02c      	beq.n	80078ca <arm_rfft_init_q15+0x96>
 8007870:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007874:	d11e      	bne.n	80078b4 <arm_rfft_init_q15+0x80>
 8007876:	4b25      	ldr	r3, [pc, #148]	@ (800790c <arm_rfft_init_q15+0xd8>)
 8007878:	6143      	str	r3, [r0, #20]
 800787a:	2204      	movs	r2, #4
 800787c:	6082      	str	r2, [r0, #8]
 800787e:	bc30      	pop	{r4, r5}
 8007880:	2000      	movs	r0, #0
 8007882:	4770      	bx	lr
 8007884:	2980      	cmp	r1, #128	@ 0x80
 8007886:	d027      	beq.n	80078d8 <arm_rfft_init_q15+0xa4>
 8007888:	d909      	bls.n	800789e <arm_rfft_init_q15+0x6a>
 800788a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800788e:	d111      	bne.n	80078b4 <arm_rfft_init_q15+0x80>
 8007890:	4b1f      	ldr	r3, [pc, #124]	@ (8007910 <arm_rfft_init_q15+0xdc>)
 8007892:	6143      	str	r3, [r0, #20]
 8007894:	2220      	movs	r2, #32
 8007896:	6082      	str	r2, [r0, #8]
 8007898:	bc30      	pop	{r4, r5}
 800789a:	2000      	movs	r0, #0
 800789c:	4770      	bx	lr
 800789e:	2920      	cmp	r1, #32
 80078a0:	d021      	beq.n	80078e6 <arm_rfft_init_q15+0xb2>
 80078a2:	2940      	cmp	r1, #64	@ 0x40
 80078a4:	d106      	bne.n	80078b4 <arm_rfft_init_q15+0x80>
 80078a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007914 <arm_rfft_init_q15+0xe0>)
 80078a8:	6143      	str	r3, [r0, #20]
 80078aa:	2280      	movs	r2, #128	@ 0x80
 80078ac:	6082      	str	r2, [r0, #8]
 80078ae:	bc30      	pop	{r4, r5}
 80078b0:	2000      	movs	r0, #0
 80078b2:	4770      	bx	lr
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	bc30      	pop	{r4, r5}
 80078ba:	4770      	bx	lr
 80078bc:	4b16      	ldr	r3, [pc, #88]	@ (8007918 <arm_rfft_init_q15+0xe4>)
 80078be:	6143      	str	r3, [r0, #20]
 80078c0:	2202      	movs	r2, #2
 80078c2:	6082      	str	r2, [r0, #8]
 80078c4:	bc30      	pop	{r4, r5}
 80078c6:	2000      	movs	r0, #0
 80078c8:	4770      	bx	lr
 80078ca:	4b14      	ldr	r3, [pc, #80]	@ (800791c <arm_rfft_init_q15+0xe8>)
 80078cc:	6143      	str	r3, [r0, #20]
 80078ce:	2208      	movs	r2, #8
 80078d0:	6082      	str	r2, [r0, #8]
 80078d2:	bc30      	pop	{r4, r5}
 80078d4:	2000      	movs	r0, #0
 80078d6:	4770      	bx	lr
 80078d8:	4b11      	ldr	r3, [pc, #68]	@ (8007920 <arm_rfft_init_q15+0xec>)
 80078da:	6143      	str	r3, [r0, #20]
 80078dc:	2240      	movs	r2, #64	@ 0x40
 80078de:	6082      	str	r2, [r0, #8]
 80078e0:	bc30      	pop	{r4, r5}
 80078e2:	2000      	movs	r0, #0
 80078e4:	4770      	bx	lr
 80078e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007924 <arm_rfft_init_q15+0xf0>)
 80078e8:	6143      	str	r3, [r0, #20]
 80078ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078ee:	6082      	str	r2, [r0, #8]
 80078f0:	2000      	movs	r0, #0
 80078f2:	e7b8      	b.n	8007866 <arm_rfft_init_q15+0x32>
 80078f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007928 <arm_rfft_init_q15+0xf4>)
 80078f6:	6143      	str	r3, [r0, #20]
 80078f8:	2210      	movs	r2, #16
 80078fa:	6082      	str	r2, [r0, #8]
 80078fc:	2000      	movs	r0, #0
 80078fe:	e7b2      	b.n	8007866 <arm_rfft_init_q15+0x32>
 8007900:	0800e158 	.word	0x0800e158
 8007904:	08012158 	.word	0x08012158
 8007908:	0800a330 	.word	0x0800a330
 800790c:	0800a2d0 	.word	0x0800a2d0
 8007910:	0800a2e0 	.word	0x0800a2e0
 8007914:	0800a320 	.word	0x0800a320
 8007918:	0800a300 	.word	0x0800a300
 800791c:	0800a340 	.word	0x0800a340
 8007920:	0800a350 	.word	0x0800a350
 8007924:	0800a2f0 	.word	0x0800a2f0
 8007928:	0800a310 	.word	0x0800a310

0800792c <arm_mult_q15>:
 800792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007930:	ea5f 0893 	movs.w	r8, r3, lsr #2
 8007934:	d037      	beq.n	80079a6 <arm_mult_q15+0x7a>
 8007936:	4694      	mov	ip, r2
 8007938:	460f      	mov	r7, r1
 800793a:	4606      	mov	r6, r0
 800793c:	46c6      	mov	lr, r8
 800793e:	f8d6 a000 	ldr.w	sl, [r6]
 8007942:	683d      	ldr	r5, [r7, #0]
 8007944:	6874      	ldr	r4, [r6, #4]
 8007946:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800794a:	fb15 f93a 	smultt	r9, r5, sl
 800794e:	ea4f 39e9 	mov.w	r9, r9, asr #15
 8007952:	3608      	adds	r6, #8
 8007954:	3708      	adds	r7, #8
 8007956:	f309 090f 	ssat	r9, #16, r9
 800795a:	fb1a fa05 	smulbb	sl, sl, r5
 800795e:	ea4f 3aea 	mov.w	sl, sl, asr #15
 8007962:	f30a 0a0f 	ssat	sl, #16, sl
 8007966:	fb1b f534 	smultt	r5, fp, r4
 800796a:	13ed      	asrs	r5, r5, #15
 800796c:	f305 050f 	ssat	r5, #16, r5
 8007970:	fb14 f40b 	smulbb	r4, r4, fp
 8007974:	13e4      	asrs	r4, r4, #15
 8007976:	f304 040f 	ssat	r4, #16, r4
 800797a:	fa1f fa8a 	uxth.w	sl, sl
 800797e:	b2a4      	uxth	r4, r4
 8007980:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 8007984:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007988:	f1be 0e01 	subs.w	lr, lr, #1
 800798c:	f8cc 9000 	str.w	r9, [ip]
 8007990:	f8cc 4004 	str.w	r4, [ip, #4]
 8007994:	f10c 0c08 	add.w	ip, ip, #8
 8007998:	d1d1      	bne.n	800793e <arm_mult_q15+0x12>
 800799a:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 800799e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80079a2:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80079a6:	f013 0303 	ands.w	r3, r3, #3
 80079aa:	d01b      	beq.n	80079e4 <arm_mult_q15+0xb8>
 80079ac:	880c      	ldrh	r4, [r1, #0]
 80079ae:	8805      	ldrh	r5, [r0, #0]
 80079b0:	fb14 f405 	smulbb	r4, r4, r5
 80079b4:	13e4      	asrs	r4, r4, #15
 80079b6:	f304 040f 	ssat	r4, #16, r4
 80079ba:	3b01      	subs	r3, #1
 80079bc:	8014      	strh	r4, [r2, #0]
 80079be:	d011      	beq.n	80079e4 <arm_mult_q15+0xb8>
 80079c0:	884c      	ldrh	r4, [r1, #2]
 80079c2:	8845      	ldrh	r5, [r0, #2]
 80079c4:	fb14 f405 	smulbb	r4, r4, r5
 80079c8:	13e4      	asrs	r4, r4, #15
 80079ca:	f304 040f 	ssat	r4, #16, r4
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	8054      	strh	r4, [r2, #2]
 80079d2:	d007      	beq.n	80079e4 <arm_mult_q15+0xb8>
 80079d4:	8883      	ldrh	r3, [r0, #4]
 80079d6:	8889      	ldrh	r1, [r1, #4]
 80079d8:	fb13 f301 	smulbb	r3, r3, r1
 80079dc:	13db      	asrs	r3, r3, #15
 80079de:	f303 030f 	ssat	r3, #16, r3
 80079e2:	8093      	strh	r3, [r2, #4]
 80079e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079e8 <arm_dot_prod_q15>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	ea5f 0992 	movs.w	r9, r2, lsr #2
 80079f0:	d036      	beq.n	8007a60 <arm_dot_prod_q15+0x78>
 80079f2:	468e      	mov	lr, r1
 80079f4:	4684      	mov	ip, r0
 80079f6:	46c8      	mov	r8, r9
 80079f8:	2600      	movs	r6, #0
 80079fa:	2700      	movs	r7, #0
 80079fc:	f8dc a000 	ldr.w	sl, [ip]
 8007a00:	f8de b000 	ldr.w	fp, [lr]
 8007a04:	4635      	mov	r5, r6
 8007a06:	463c      	mov	r4, r7
 8007a08:	fbca 54cb 	smlald	r5, r4, sl, fp
 8007a0c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007a10:	f8de 7004 	ldr.w	r7, [lr, #4]
 8007a14:	f10c 0c08 	add.w	ip, ip, #8
 8007a18:	f10e 0e08 	add.w	lr, lr, #8
 8007a1c:	fbc6 54c7 	smlald	r5, r4, r6, r7
 8007a20:	f1b8 0801 	subs.w	r8, r8, #1
 8007a24:	462e      	mov	r6, r5
 8007a26:	4627      	mov	r7, r4
 8007a28:	d1e8      	bne.n	80079fc <arm_dot_prod_q15+0x14>
 8007a2a:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8007a2e:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 8007a32:	f012 0203 	ands.w	r2, r2, #3
 8007a36:	d00f      	beq.n	8007a58 <arm_dot_prod_q15+0x70>
 8007a38:	880d      	ldrh	r5, [r1, #0]
 8007a3a:	8804      	ldrh	r4, [r0, #0]
 8007a3c:	3a01      	subs	r2, #1
 8007a3e:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 8007a42:	d009      	beq.n	8007a58 <arm_dot_prod_q15+0x70>
 8007a44:	884d      	ldrh	r5, [r1, #2]
 8007a46:	8844      	ldrh	r4, [r0, #2]
 8007a48:	2a01      	cmp	r2, #1
 8007a4a:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 8007a4e:	d003      	beq.n	8007a58 <arm_dot_prod_q15+0x70>
 8007a50:	8880      	ldrh	r0, [r0, #4]
 8007a52:	888a      	ldrh	r2, [r1, #4]
 8007a54:	fbc0 6782 	smlalbb	r6, r7, r0, r2
 8007a58:	e9c3 6700 	strd	r6, r7, [r3]
 8007a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a60:	2600      	movs	r6, #0
 8007a62:	2700      	movs	r7, #0
 8007a64:	e7e5      	b.n	8007a32 <arm_dot_prod_q15+0x4a>
 8007a66:	bf00      	nop

08007a68 <arm_cfft_radix4by2_q15>:
 8007a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a6c:	084d      	lsrs	r5, r1, #1
 8007a6e:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8007a72:	4616      	mov	r6, r2
 8007a74:	d047      	beq.n	8007b06 <arm_cfft_radix4by2_q15+0x9e>
 8007a76:	4604      	mov	r4, r0
 8007a78:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8007b20 <arm_cfft_radix4by2_q15+0xb8>
 8007a7c:	4696      	mov	lr, r2
 8007a7e:	4638      	mov	r0, r7
 8007a80:	4621      	mov	r1, r4
 8007a82:	462a      	mov	r2, r5
 8007a84:	f04f 0c00 	mov.w	ip, #0
 8007a88:	680b      	ldr	r3, [r1, #0]
 8007a8a:	f8d0 a000 	ldr.w	sl, [r0]
 8007a8e:	fa93 f32c 	shadd16	r3, r3, ip
 8007a92:	fa9a fa2c 	shadd16	sl, sl, ip
 8007a96:	fa93 f92a 	shadd16	r9, r3, sl
 8007a9a:	fad3 fa1a 	qsub16	sl, r3, sl
 8007a9e:	f85e 3b04 	ldr.w	r3, [lr], #4
 8007aa2:	f841 9b04 	str.w	r9, [r1], #4
 8007aa6:	fb23 f90a 	smuad	r9, r3, sl
 8007aaa:	fb43 f31a 	smusdx	r3, r3, sl
 8007aae:	ea03 0308 	and.w	r3, r3, r8
 8007ab2:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8007ab6:	3a01      	subs	r2, #1
 8007ab8:	f840 3b04 	str.w	r3, [r0], #4
 8007abc:	d1e4      	bne.n	8007a88 <arm_cfft_radix4by2_q15+0x20>
 8007abe:	4629      	mov	r1, r5
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	4632      	mov	r2, r6
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 f8e9 	bl	8007c9c <arm_radix4_butterfly_q15>
 8007aca:	4638      	mov	r0, r7
 8007acc:	4629      	mov	r1, r5
 8007ace:	4632      	mov	r2, r6
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	f000 f8e3 	bl	8007c9c <arm_radix4_butterfly_q15>
 8007ad6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8007ada:	4620      	mov	r0, r4
 8007adc:	f9b0 6000 	ldrsh.w	r6, [r0]
 8007ae0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007ae4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007ae8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007aec:	0076      	lsls	r6, r6, #1
 8007aee:	0064      	lsls	r4, r4, #1
 8007af0:	0052      	lsls	r2, r2, #1
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	8006      	strh	r6, [r0, #0]
 8007af6:	8044      	strh	r4, [r0, #2]
 8007af8:	8082      	strh	r2, [r0, #4]
 8007afa:	80c3      	strh	r3, [r0, #6]
 8007afc:	3008      	adds	r0, #8
 8007afe:	4285      	cmp	r5, r0
 8007b00:	d1ec      	bne.n	8007adc <arm_cfft_radix4by2_q15+0x74>
 8007b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b06:	4629      	mov	r1, r5
 8007b08:	2302      	movs	r3, #2
 8007b0a:	f000 f8c7 	bl	8007c9c <arm_radix4_butterfly_q15>
 8007b0e:	4632      	mov	r2, r6
 8007b10:	4629      	mov	r1, r5
 8007b12:	4638      	mov	r0, r7
 8007b14:	2302      	movs	r3, #2
 8007b16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1a:	f000 b8bf 	b.w	8007c9c <arm_radix4_butterfly_q15>
 8007b1e:	bf00      	nop
 8007b20:	ffff0000 	.word	0xffff0000

08007b24 <arm_cfft_radix4by2_inverse_q15>:
 8007b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b28:	084d      	lsrs	r5, r1, #1
 8007b2a:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8007b2e:	4616      	mov	r6, r2
 8007b30:	d047      	beq.n	8007bc2 <arm_cfft_radix4by2_inverse_q15+0x9e>
 8007b32:	4604      	mov	r4, r0
 8007b34:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8007bdc <arm_cfft_radix4by2_inverse_q15+0xb8>
 8007b38:	4696      	mov	lr, r2
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	462a      	mov	r2, r5
 8007b40:	f04f 0c00 	mov.w	ip, #0
 8007b44:	680b      	ldr	r3, [r1, #0]
 8007b46:	f8d0 a000 	ldr.w	sl, [r0]
 8007b4a:	fa93 f32c 	shadd16	r3, r3, ip
 8007b4e:	fa9a fa2c 	shadd16	sl, sl, ip
 8007b52:	fa93 f92a 	shadd16	r9, r3, sl
 8007b56:	fad3 fa1a 	qsub16	sl, r3, sl
 8007b5a:	f85e 3b04 	ldr.w	r3, [lr], #4
 8007b5e:	f841 9b04 	str.w	r9, [r1], #4
 8007b62:	fb43 f90a 	smusd	r9, r3, sl
 8007b66:	fb23 f31a 	smuadx	r3, r3, sl
 8007b6a:	ea03 0308 	and.w	r3, r3, r8
 8007b6e:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8007b72:	3a01      	subs	r2, #1
 8007b74:	f840 3b04 	str.w	r3, [r0], #4
 8007b78:	d1e4      	bne.n	8007b44 <arm_cfft_radix4by2_inverse_q15+0x20>
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	4632      	mov	r2, r6
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 fa35 	bl	8007ff0 <arm_radix4_butterfly_inverse_q15>
 8007b86:	4638      	mov	r0, r7
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4632      	mov	r2, r6
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	f000 fa2f 	bl	8007ff0 <arm_radix4_butterfly_inverse_q15>
 8007b92:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8007b96:	4620      	mov	r0, r4
 8007b98:	f9b0 6000 	ldrsh.w	r6, [r0]
 8007b9c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007ba0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007ba4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007ba8:	0076      	lsls	r6, r6, #1
 8007baa:	0064      	lsls	r4, r4, #1
 8007bac:	0052      	lsls	r2, r2, #1
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	8006      	strh	r6, [r0, #0]
 8007bb2:	8044      	strh	r4, [r0, #2]
 8007bb4:	8082      	strh	r2, [r0, #4]
 8007bb6:	80c3      	strh	r3, [r0, #6]
 8007bb8:	3008      	adds	r0, #8
 8007bba:	4285      	cmp	r5, r0
 8007bbc:	d1ec      	bne.n	8007b98 <arm_cfft_radix4by2_inverse_q15+0x74>
 8007bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	f000 fa13 	bl	8007ff0 <arm_radix4_butterfly_inverse_q15>
 8007bca:	4632      	mov	r2, r6
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4638      	mov	r0, r7
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd6:	f000 ba0b 	b.w	8007ff0 <arm_radix4_butterfly_inverse_q15>
 8007bda:	bf00      	nop
 8007bdc:	ffff0000 	.word	0xffff0000

08007be0 <arm_cfft_q15>:
 8007be0:	b5e0      	push	{r5, r6, r7, lr}
 8007be2:	2a01      	cmp	r2, #1
 8007be4:	460f      	mov	r7, r1
 8007be6:	4605      	mov	r5, r0
 8007be8:	8801      	ldrh	r1, [r0, #0]
 8007bea:	461e      	mov	r6, r3
 8007bec:	d02f      	beq.n	8007c4e <arm_cfft_q15+0x6e>
 8007bee:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007bf2:	d026      	beq.n	8007c42 <arm_cfft_q15+0x62>
 8007bf4:	d908      	bls.n	8007c08 <arm_cfft_q15+0x28>
 8007bf6:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007bfa:	d017      	beq.n	8007c2c <arm_cfft_q15+0x4c>
 8007bfc:	d91b      	bls.n	8007c36 <arm_cfft_q15+0x56>
 8007bfe:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007c02:	d01e      	beq.n	8007c42 <arm_cfft_q15+0x62>
 8007c04:	b93e      	cbnz	r6, 8007c16 <arm_cfft_q15+0x36>
 8007c06:	bde0      	pop	{r5, r6, r7, pc}
 8007c08:	2940      	cmp	r1, #64	@ 0x40
 8007c0a:	d01a      	beq.n	8007c42 <arm_cfft_q15+0x62>
 8007c0c:	d90a      	bls.n	8007c24 <arm_cfft_q15+0x44>
 8007c0e:	2980      	cmp	r1, #128	@ 0x80
 8007c10:	d00c      	beq.n	8007c2c <arm_cfft_q15+0x4c>
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	d0f7      	beq.n	8007c06 <arm_cfft_q15+0x26>
 8007c16:	68aa      	ldr	r2, [r5, #8]
 8007c18:	89a9      	ldrh	r1, [r5, #12]
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8007c20:	f000 bb90 	b.w	8008344 <arm_bitreversal_16>
 8007c24:	2910      	cmp	r1, #16
 8007c26:	d00c      	beq.n	8007c42 <arm_cfft_q15+0x62>
 8007c28:	2920      	cmp	r1, #32
 8007c2a:	d1eb      	bne.n	8007c04 <arm_cfft_q15+0x24>
 8007c2c:	686a      	ldr	r2, [r5, #4]
 8007c2e:	4638      	mov	r0, r7
 8007c30:	f7ff ff1a 	bl	8007a68 <arm_cfft_radix4by2_q15>
 8007c34:	e7e6      	b.n	8007c04 <arm_cfft_q15+0x24>
 8007c36:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007c3a:	d0f7      	beq.n	8007c2c <arm_cfft_q15+0x4c>
 8007c3c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007c40:	d1e0      	bne.n	8007c04 <arm_cfft_q15+0x24>
 8007c42:	686a      	ldr	r2, [r5, #4]
 8007c44:	2301      	movs	r3, #1
 8007c46:	4638      	mov	r0, r7
 8007c48:	f000 f828 	bl	8007c9c <arm_radix4_butterfly_q15>
 8007c4c:	e7da      	b.n	8007c04 <arm_cfft_q15+0x24>
 8007c4e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007c52:	d01d      	beq.n	8007c90 <arm_cfft_q15+0xb0>
 8007c54:	d907      	bls.n	8007c66 <arm_cfft_q15+0x86>
 8007c56:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007c5a:	d00e      	beq.n	8007c7a <arm_cfft_q15+0x9a>
 8007c5c:	d912      	bls.n	8007c84 <arm_cfft_q15+0xa4>
 8007c5e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007c62:	d1cf      	bne.n	8007c04 <arm_cfft_q15+0x24>
 8007c64:	e014      	b.n	8007c90 <arm_cfft_q15+0xb0>
 8007c66:	2940      	cmp	r1, #64	@ 0x40
 8007c68:	d012      	beq.n	8007c90 <arm_cfft_q15+0xb0>
 8007c6a:	d902      	bls.n	8007c72 <arm_cfft_q15+0x92>
 8007c6c:	2980      	cmp	r1, #128	@ 0x80
 8007c6e:	d004      	beq.n	8007c7a <arm_cfft_q15+0x9a>
 8007c70:	e7c8      	b.n	8007c04 <arm_cfft_q15+0x24>
 8007c72:	2910      	cmp	r1, #16
 8007c74:	d00c      	beq.n	8007c90 <arm_cfft_q15+0xb0>
 8007c76:	2920      	cmp	r1, #32
 8007c78:	d1c4      	bne.n	8007c04 <arm_cfft_q15+0x24>
 8007c7a:	686a      	ldr	r2, [r5, #4]
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f7ff ff51 	bl	8007b24 <arm_cfft_radix4by2_inverse_q15>
 8007c82:	e7bf      	b.n	8007c04 <arm_cfft_q15+0x24>
 8007c84:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007c88:	d0f7      	beq.n	8007c7a <arm_cfft_q15+0x9a>
 8007c8a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007c8e:	d1b9      	bne.n	8007c04 <arm_cfft_q15+0x24>
 8007c90:	686a      	ldr	r2, [r5, #4]
 8007c92:	2301      	movs	r3, #1
 8007c94:	4638      	mov	r0, r7
 8007c96:	f000 f9ab 	bl	8007ff0 <arm_radix4_butterfly_inverse_q15>
 8007c9a:	e7b3      	b.n	8007c04 <arm_cfft_q15+0x24>

08007c9c <arm_radix4_butterfly_q15>:
 8007c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca0:	b093      	sub	sp, #76	@ 0x4c
 8007ca2:	f021 0a03 	bic.w	sl, r1, #3
 8007ca6:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8007caa:	9210      	str	r2, [sp, #64]	@ 0x40
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8007cb2:	eb0c 050a 	add.w	r5, ip, sl
 8007cb6:	9101      	str	r1, [sp, #4]
 8007cb8:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007cba:	9303      	str	r3, [sp, #12]
 8007cbc:	4482      	add	sl, r0
 8007cbe:	9211      	str	r2, [sp, #68]	@ 0x44
 8007cc0:	f040 8124 	bne.w	8007f0c <arm_radix4_butterfly_q15+0x270>
 8007cc4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007cc6:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8007fec <arm_radix4_butterfly_q15+0x350>
 8007cca:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8007ccc:	f8cd a008 	str.w	sl, [sp, #8]
 8007cd0:	4693      	mov	fp, r2
 8007cd2:	4690      	mov	r8, r2
 8007cd4:	4657      	mov	r7, sl
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	4691      	mov	r9, r2
 8007cda:	6830      	ldr	r0, [r6, #0]
 8007cdc:	f8dc 2000 	ldr.w	r2, [ip]
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	fa90 f023 	shadd16	r0, r0, r3
 8007ce6:	fa91 f123 	shadd16	r1, r1, r3
 8007cea:	fa90 f023 	shadd16	r0, r0, r3
 8007cee:	fa91 fa23 	shadd16	sl, r1, r3
 8007cf2:	fa92 f223 	shadd16	r2, r2, r3
 8007cf6:	6829      	ldr	r1, [r5, #0]
 8007cf8:	fa92 f223 	shadd16	r2, r2, r3
 8007cfc:	fa91 f123 	shadd16	r1, r1, r3
 8007d00:	fa90 f412 	qadd16	r4, r0, r2
 8007d04:	fa91 f123 	shadd16	r1, r1, r3
 8007d08:	fa9a f111 	qadd16	r1, sl, r1
 8007d0c:	fa94 fa21 	shadd16	sl, r4, r1
 8007d10:	f846 ab04 	str.w	sl, [r6], #4
 8007d14:	fad4 f411 	qsub16	r4, r4, r1
 8007d18:	fad0 f212 	qsub16	r2, r0, r2
 8007d1c:	f85b 1b08 	ldr.w	r1, [fp], #8
 8007d20:	fb21 f004 	smuad	r0, r1, r4
 8007d24:	fb41 f114 	smusdx	r1, r1, r4
 8007d28:	ea01 010e 	and.w	r1, r1, lr
 8007d2c:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007d30:	6838      	ldr	r0, [r7, #0]
 8007d32:	f847 1b04 	str.w	r1, [r7], #4
 8007d36:	fa90 f023 	shadd16	r0, r0, r3
 8007d3a:	682c      	ldr	r4, [r5, #0]
 8007d3c:	fa90 f023 	shadd16	r0, r0, r3
 8007d40:	fa94 f423 	shadd16	r4, r4, r3
 8007d44:	f859 1b04 	ldr.w	r1, [r9], #4
 8007d48:	fa94 f423 	shadd16	r4, r4, r3
 8007d4c:	fad0 f014 	qsub16	r0, r0, r4
 8007d50:	faa2 f410 	qasx	r4, r2, r0
 8007d54:	fae2 f210 	qsax	r2, r2, r0
 8007d58:	fb21 fa02 	smuad	sl, r1, r2
 8007d5c:	fb41 f212 	smusdx	r2, r1, r2
 8007d60:	ea02 020e 	and.w	r2, r2, lr
 8007d64:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8007d68:	f84c 2b04 	str.w	r2, [ip], #4
 8007d6c:	f858 2b0c 	ldr.w	r2, [r8], #12
 8007d70:	fb22 f104 	smuad	r1, r2, r4
 8007d74:	fb42 f214 	smusdx	r2, r2, r4
 8007d78:	ea02 020e 	and.w	r2, r2, lr
 8007d7c:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007d80:	f845 2b04 	str.w	r2, [r5], #4
 8007d84:	9a02      	ldr	r2, [sp, #8]
 8007d86:	42b2      	cmp	r2, r6
 8007d88:	d1a7      	bne.n	8007cda <arm_radix4_butterfly_q15+0x3e>
 8007d8a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d8c:	9b03      	ldr	r3, [sp, #12]
 8007d8e:	2a04      	cmp	r2, #4
 8007d90:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007d94:	f240 8127 	bls.w	8007fe6 <arm_radix4_butterfly_q15+0x34a>
 8007d98:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8007fec <arm_radix4_butterfly_q15+0x350>
 8007d9c:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d9e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007da0:	9102      	str	r1, [sp, #8]
 8007da2:	4608      	mov	r0, r1
 8007da4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007da8:	0889      	lsrs	r1, r1, #2
 8007daa:	0092      	lsls	r2, r2, #2
 8007dac:	0086      	lsls	r6, r0, #2
 8007dae:	9801      	ldr	r0, [sp, #4]
 8007db0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007db2:	008c      	lsls	r4, r1, #2
 8007db4:	009a      	lsls	r2, r3, #2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	4288      	cmp	r0, r1
 8007dba:	940a      	str	r4, [sp, #40]	@ 0x28
 8007dbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007dc2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007dc4:	910e      	str	r1, [sp, #56]	@ 0x38
 8007dc6:	bf28      	it	cs
 8007dc8:	460c      	movcs	r4, r1
 8007dca:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8007dce:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007dd2:	9308      	str	r3, [sp, #32]
 8007dd4:	9307      	str	r3, [sp, #28]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	940c      	str	r4, [sp, #48]	@ 0x30
 8007dda:	9104      	str	r1, [sp, #16]
 8007ddc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dde:	9303      	str	r3, [sp, #12]
 8007de0:	9b08      	ldr	r3, [sp, #32]
 8007de2:	9a05      	ldr	r2, [sp, #20]
 8007de4:	f8d3 9000 	ldr.w	r9, [r3]
 8007de8:	9b07      	ldr	r3, [sp, #28]
 8007dea:	9f03      	ldr	r7, [sp, #12]
 8007dec:	f8d3 8000 	ldr.w	r8, [r3]
 8007df0:	9b06      	ldr	r3, [sp, #24]
 8007df2:	f8d3 e000 	ldr.w	lr, [r3]
 8007df6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007df8:	4615      	mov	r5, r2
 8007dfa:	1898      	adds	r0, r3, r2
 8007dfc:	9a04      	ldr	r2, [sp, #16]
 8007dfe:	4614      	mov	r4, r2
 8007e00:	1899      	adds	r1, r3, r2
 8007e02:	682a      	ldr	r2, [r5, #0]
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	f8d0 b000 	ldr.w	fp, [r0]
 8007e0a:	fa92 fc13 	qadd16	ip, r2, r3
 8007e0e:	fad2 f213 	qsub16	r2, r2, r3
 8007e12:	680b      	ldr	r3, [r1, #0]
 8007e14:	fa9b f313 	qadd16	r3, fp, r3
 8007e18:	fa9c fb23 	shadd16	fp, ip, r3
 8007e1c:	fadc f323 	shsub16	r3, ip, r3
 8007e20:	f04f 0c00 	mov.w	ip, #0
 8007e24:	fa9b fb2c 	shadd16	fp, fp, ip
 8007e28:	f8c5 b000 	str.w	fp, [r5]
 8007e2c:	4435      	add	r5, r6
 8007e2e:	fb28 fb03 	smuad	fp, r8, r3
 8007e32:	fb48 f313 	smusdx	r3, r8, r3
 8007e36:	ea03 030a 	and.w	r3, r3, sl
 8007e3a:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8007e3e:	f8d0 b000 	ldr.w	fp, [r0]
 8007e42:	6003      	str	r3, [r0, #0]
 8007e44:	f8d1 c000 	ldr.w	ip, [r1]
 8007e48:	fadb fc1c 	qsub16	ip, fp, ip
 8007e4c:	4430      	add	r0, r6
 8007e4e:	faa2 f32c 	shasx	r3, r2, ip
 8007e52:	fae2 f22c 	shsax	r2, r2, ip
 8007e56:	fb29 fc02 	smuad	ip, r9, r2
 8007e5a:	fb49 f212 	smusdx	r2, r9, r2
 8007e5e:	ea02 020a 	and.w	r2, r2, sl
 8007e62:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	4434      	add	r4, r6
 8007e6a:	fb2e f203 	smuad	r2, lr, r3
 8007e6e:	fb4e f313 	smusdx	r3, lr, r3
 8007e72:	ea03 030a 	and.w	r3, r3, sl
 8007e76:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007e7a:	9a02      	ldr	r2, [sp, #8]
 8007e7c:	600b      	str	r3, [r1, #0]
 8007e7e:	9b01      	ldr	r3, [sp, #4]
 8007e80:	4417      	add	r7, r2
 8007e82:	42bb      	cmp	r3, r7
 8007e84:	4431      	add	r1, r6
 8007e86:	d8bc      	bhi.n	8007e02 <arm_radix4_butterfly_q15+0x166>
 8007e88:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8007e8c:	440a      	add	r2, r1
 8007e8e:	9208      	str	r2, [sp, #32]
 8007e90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e92:	9a07      	ldr	r2, [sp, #28]
 8007e94:	9b03      	ldr	r3, [sp, #12]
 8007e96:	440a      	add	r2, r1
 8007e98:	9207      	str	r2, [sp, #28]
 8007e9a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007e9c:	9a06      	ldr	r2, [sp, #24]
 8007e9e:	440a      	add	r2, r1
 8007ea0:	9206      	str	r2, [sp, #24]
 8007ea2:	9a05      	ldr	r2, [sp, #20]
 8007ea4:	3204      	adds	r2, #4
 8007ea6:	9205      	str	r2, [sp, #20]
 8007ea8:	9a04      	ldr	r2, [sp, #16]
 8007eaa:	3204      	adds	r2, #4
 8007eac:	9204      	str	r2, [sp, #16]
 8007eae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	9303      	str	r3, [sp, #12]
 8007eb6:	d393      	bcc.n	8007de0 <arm_radix4_butterfly_q15+0x144>
 8007eb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ebc:	2a04      	cmp	r2, #4
 8007ebe:	f63f af6e 	bhi.w	8007d9e <arm_radix4_butterfly_q15+0x102>
 8007ec2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ec6:	689d      	ldr	r5, [r3, #8]
 8007ec8:	68de      	ldr	r6, [r3, #12]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	6859      	ldr	r1, [r3, #4]
 8007ece:	fa92 f015 	qadd16	r0, r2, r5
 8007ed2:	3c01      	subs	r4, #1
 8007ed4:	fad2 f215 	qsub16	r2, r2, r5
 8007ed8:	f103 0310 	add.w	r3, r3, #16
 8007edc:	fa91 f516 	qadd16	r5, r1, r6
 8007ee0:	fad1 f116 	qsub16	r1, r1, r6
 8007ee4:	fa90 f625 	shadd16	r6, r0, r5
 8007ee8:	fad0 f025 	shsub16	r0, r0, r5
 8007eec:	f843 6c10 	str.w	r6, [r3, #-16]
 8007ef0:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007ef4:	fae2 f021 	shsax	r0, r2, r1
 8007ef8:	faa2 f221 	shasx	r2, r2, r1
 8007efc:	f843 0c08 	str.w	r0, [r3, #-8]
 8007f00:	f843 2c04 	str.w	r2, [r3, #-4]
 8007f04:	d1df      	bne.n	8007ec6 <arm_radix4_butterfly_q15+0x22a>
 8007f06:	b013      	add	sp, #76	@ 0x4c
 8007f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0c:	2400      	movs	r4, #0
 8007f0e:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8007fec <arm_radix4_butterfly_q15+0x350>
 8007f12:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007f14:	4623      	mov	r3, r4
 8007f16:	4680      	mov	r8, r0
 8007f18:	4691      	mov	r9, r2
 8007f1a:	f8d8 0000 	ldr.w	r0, [r8]
 8007f1e:	f8dc 2000 	ldr.w	r2, [ip]
 8007f22:	f8da 1000 	ldr.w	r1, [sl]
 8007f26:	fa90 f023 	shadd16	r0, r0, r3
 8007f2a:	fa91 f123 	shadd16	r1, r1, r3
 8007f2e:	fa90 f023 	shadd16	r0, r0, r3
 8007f32:	fa91 fb23 	shadd16	fp, r1, r3
 8007f36:	fa92 f223 	shadd16	r2, r2, r3
 8007f3a:	6829      	ldr	r1, [r5, #0]
 8007f3c:	fa92 f223 	shadd16	r2, r2, r3
 8007f40:	fa91 f123 	shadd16	r1, r1, r3
 8007f44:	fa90 f612 	qadd16	r6, r0, r2
 8007f48:	fa91 f123 	shadd16	r1, r1, r3
 8007f4c:	fa9b f111 	qadd16	r1, fp, r1
 8007f50:	fa96 fb21 	shadd16	fp, r6, r1
 8007f54:	f848 bb04 	str.w	fp, [r8], #4
 8007f58:	fad6 f611 	qsub16	r6, r6, r1
 8007f5c:	fad0 f212 	qsub16	r2, r0, r2
 8007f60:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8007f64:	fb21 f006 	smuad	r0, r1, r6
 8007f68:	fb41 f116 	smusdx	r1, r1, r6
 8007f6c:	ea01 010e 	and.w	r1, r1, lr
 8007f70:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007f74:	f8da 0000 	ldr.w	r0, [sl]
 8007f78:	f84a 1b04 	str.w	r1, [sl], #4
 8007f7c:	fa90 f023 	shadd16	r0, r0, r3
 8007f80:	682e      	ldr	r6, [r5, #0]
 8007f82:	fa90 f023 	shadd16	r0, r0, r3
 8007f86:	fa96 f623 	shadd16	r6, r6, r3
 8007f8a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007f8e:	fa96 f623 	shadd16	r6, r6, r3
 8007f92:	fad0 f016 	qsub16	r0, r0, r6
 8007f96:	faa2 f610 	qasx	r6, r2, r0
 8007f9a:	fae2 f210 	qsax	r2, r2, r0
 8007f9e:	fb21 fb02 	smuad	fp, r1, r2
 8007fa2:	fb41 f212 	smusdx	r2, r1, r2
 8007fa6:	ea02 020e 	and.w	r2, r2, lr
 8007faa:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8007fae:	f84c 2b04 	str.w	r2, [ip], #4
 8007fb2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007fb6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8007fba:	fb22 f106 	smuad	r1, r2, r6
 8007fbe:	fb42 f216 	smusdx	r2, r2, r6
 8007fc2:	ea02 020e 	and.w	r2, r2, lr
 8007fc6:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007fca:	f845 2b04 	str.w	r2, [r5], #4
 8007fce:	9a03      	ldr	r2, [sp, #12]
 8007fd0:	f1b9 0901 	subs.w	r9, r9, #1
 8007fd4:	4414      	add	r4, r2
 8007fd6:	d1a0      	bne.n	8007f1a <arm_radix4_butterfly_q15+0x27e>
 8007fd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007fda:	9b03      	ldr	r3, [sp, #12]
 8007fdc:	2a04      	cmp	r2, #4
 8007fde:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007fe2:	f63f aed9 	bhi.w	8007d98 <arm_radix4_butterfly_q15+0xfc>
 8007fe6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fe8:	4614      	mov	r4, r2
 8007fea:	e76c      	b.n	8007ec6 <arm_radix4_butterfly_q15+0x22a>
 8007fec:	ffff0000 	.word	0xffff0000

08007ff0 <arm_radix4_butterfly_inverse_q15>:
 8007ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	b093      	sub	sp, #76	@ 0x4c
 8007ff6:	f021 0a03 	bic.w	sl, r1, #3
 8007ffa:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8007ffe:	9210      	str	r2, [sp, #64]	@ 0x40
 8008000:	2b01      	cmp	r3, #1
 8008002:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8008006:	eb0c 050a 	add.w	r5, ip, sl
 800800a:	9101      	str	r1, [sp, #4]
 800800c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800800e:	9303      	str	r3, [sp, #12]
 8008010:	4482      	add	sl, r0
 8008012:	9211      	str	r2, [sp, #68]	@ 0x44
 8008014:	f040 8124 	bne.w	8008260 <arm_radix4_butterfly_inverse_q15+0x270>
 8008018:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800801a:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8008340 <arm_radix4_butterfly_inverse_q15+0x350>
 800801e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8008020:	f8cd a008 	str.w	sl, [sp, #8]
 8008024:	4693      	mov	fp, r2
 8008026:	4690      	mov	r8, r2
 8008028:	4657      	mov	r7, sl
 800802a:	2300      	movs	r3, #0
 800802c:	4691      	mov	r9, r2
 800802e:	6830      	ldr	r0, [r6, #0]
 8008030:	f8dc 2000 	ldr.w	r2, [ip]
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	fa90 f023 	shadd16	r0, r0, r3
 800803a:	fa91 f123 	shadd16	r1, r1, r3
 800803e:	fa90 f023 	shadd16	r0, r0, r3
 8008042:	fa91 fa23 	shadd16	sl, r1, r3
 8008046:	fa92 f223 	shadd16	r2, r2, r3
 800804a:	6829      	ldr	r1, [r5, #0]
 800804c:	fa92 f223 	shadd16	r2, r2, r3
 8008050:	fa91 f123 	shadd16	r1, r1, r3
 8008054:	fa90 f412 	qadd16	r4, r0, r2
 8008058:	fa91 f123 	shadd16	r1, r1, r3
 800805c:	fa9a f111 	qadd16	r1, sl, r1
 8008060:	fa94 fa21 	shadd16	sl, r4, r1
 8008064:	f846 ab04 	str.w	sl, [r6], #4
 8008068:	fad4 f411 	qsub16	r4, r4, r1
 800806c:	fad0 f212 	qsub16	r2, r0, r2
 8008070:	f85b 1b08 	ldr.w	r1, [fp], #8
 8008074:	fb41 f004 	smusd	r0, r1, r4
 8008078:	fb21 f114 	smuadx	r1, r1, r4
 800807c:	ea01 010e 	and.w	r1, r1, lr
 8008080:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8008084:	6838      	ldr	r0, [r7, #0]
 8008086:	f847 1b04 	str.w	r1, [r7], #4
 800808a:	fa90 f023 	shadd16	r0, r0, r3
 800808e:	682c      	ldr	r4, [r5, #0]
 8008090:	fa90 f023 	shadd16	r0, r0, r3
 8008094:	fa94 f423 	shadd16	r4, r4, r3
 8008098:	f859 1b04 	ldr.w	r1, [r9], #4
 800809c:	fa94 f423 	shadd16	r4, r4, r3
 80080a0:	fad0 f014 	qsub16	r0, r0, r4
 80080a4:	fae2 f410 	qsax	r4, r2, r0
 80080a8:	faa2 f210 	qasx	r2, r2, r0
 80080ac:	fb41 fa02 	smusd	sl, r1, r2
 80080b0:	fb21 f212 	smuadx	r2, r1, r2
 80080b4:	ea02 020e 	and.w	r2, r2, lr
 80080b8:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 80080bc:	f84c 2b04 	str.w	r2, [ip], #4
 80080c0:	f858 2b0c 	ldr.w	r2, [r8], #12
 80080c4:	fb42 f104 	smusd	r1, r2, r4
 80080c8:	fb22 f214 	smuadx	r2, r2, r4
 80080cc:	ea02 020e 	and.w	r2, r2, lr
 80080d0:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 80080d4:	f845 2b04 	str.w	r2, [r5], #4
 80080d8:	9a02      	ldr	r2, [sp, #8]
 80080da:	42b2      	cmp	r2, r6
 80080dc:	d1a7      	bne.n	800802e <arm_radix4_butterfly_inverse_q15+0x3e>
 80080de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	2a04      	cmp	r2, #4
 80080e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80080e8:	f240 8127 	bls.w	800833a <arm_radix4_butterfly_inverse_q15+0x34a>
 80080ec:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8008340 <arm_radix4_butterfly_inverse_q15+0x350>
 80080f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80080f2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80080f4:	9102      	str	r1, [sp, #8]
 80080f6:	4608      	mov	r0, r1
 80080f8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80080fc:	0889      	lsrs	r1, r1, #2
 80080fe:	0092      	lsls	r2, r2, #2
 8008100:	0086      	lsls	r6, r0, #2
 8008102:	9801      	ldr	r0, [sp, #4]
 8008104:	920d      	str	r2, [sp, #52]	@ 0x34
 8008106:	008c      	lsls	r4, r1, #2
 8008108:	009a      	lsls	r2, r3, #2
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	4288      	cmp	r0, r1
 800810e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008110:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008112:	4604      	mov	r4, r0
 8008114:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008116:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8008118:	910e      	str	r1, [sp, #56]	@ 0x38
 800811a:	bf28      	it	cs
 800811c:	460c      	movcs	r4, r1
 800811e:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8008122:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8008126:	9308      	str	r3, [sp, #32]
 8008128:	9307      	str	r3, [sp, #28]
 800812a:	2300      	movs	r3, #0
 800812c:	940c      	str	r4, [sp, #48]	@ 0x30
 800812e:	9104      	str	r1, [sp, #16]
 8008130:	9209      	str	r2, [sp, #36]	@ 0x24
 8008132:	9303      	str	r3, [sp, #12]
 8008134:	9b08      	ldr	r3, [sp, #32]
 8008136:	9a05      	ldr	r2, [sp, #20]
 8008138:	f8d3 9000 	ldr.w	r9, [r3]
 800813c:	9b07      	ldr	r3, [sp, #28]
 800813e:	9f03      	ldr	r7, [sp, #12]
 8008140:	f8d3 8000 	ldr.w	r8, [r3]
 8008144:	9b06      	ldr	r3, [sp, #24]
 8008146:	f8d3 e000 	ldr.w	lr, [r3]
 800814a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800814c:	4615      	mov	r5, r2
 800814e:	1898      	adds	r0, r3, r2
 8008150:	9a04      	ldr	r2, [sp, #16]
 8008152:	4614      	mov	r4, r2
 8008154:	1899      	adds	r1, r3, r2
 8008156:	682a      	ldr	r2, [r5, #0]
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	f8d0 b000 	ldr.w	fp, [r0]
 800815e:	fa92 fc13 	qadd16	ip, r2, r3
 8008162:	fad2 f213 	qsub16	r2, r2, r3
 8008166:	680b      	ldr	r3, [r1, #0]
 8008168:	fa9b f313 	qadd16	r3, fp, r3
 800816c:	fa9c fb23 	shadd16	fp, ip, r3
 8008170:	fadc f323 	shsub16	r3, ip, r3
 8008174:	f04f 0c00 	mov.w	ip, #0
 8008178:	fa9b fb2c 	shadd16	fp, fp, ip
 800817c:	f8c5 b000 	str.w	fp, [r5]
 8008180:	4435      	add	r5, r6
 8008182:	fb48 fb03 	smusd	fp, r8, r3
 8008186:	fb28 f313 	smuadx	r3, r8, r3
 800818a:	ea03 030a 	and.w	r3, r3, sl
 800818e:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8008192:	f8d0 b000 	ldr.w	fp, [r0]
 8008196:	6003      	str	r3, [r0, #0]
 8008198:	f8d1 c000 	ldr.w	ip, [r1]
 800819c:	fadb fc1c 	qsub16	ip, fp, ip
 80081a0:	4430      	add	r0, r6
 80081a2:	fae2 f32c 	shsax	r3, r2, ip
 80081a6:	faa2 f22c 	shasx	r2, r2, ip
 80081aa:	fb49 fc02 	smusd	ip, r9, r2
 80081ae:	fb29 f212 	smuadx	r2, r9, r2
 80081b2:	ea02 020a 	and.w	r2, r2, sl
 80081b6:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 80081ba:	6022      	str	r2, [r4, #0]
 80081bc:	4434      	add	r4, r6
 80081be:	fb4e f203 	smusd	r2, lr, r3
 80081c2:	fb2e f313 	smuadx	r3, lr, r3
 80081c6:	ea03 030a 	and.w	r3, r3, sl
 80081ca:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 80081ce:	9a02      	ldr	r2, [sp, #8]
 80081d0:	600b      	str	r3, [r1, #0]
 80081d2:	9b01      	ldr	r3, [sp, #4]
 80081d4:	4417      	add	r7, r2
 80081d6:	42bb      	cmp	r3, r7
 80081d8:	4431      	add	r1, r6
 80081da:	d8bc      	bhi.n	8008156 <arm_radix4_butterfly_inverse_q15+0x166>
 80081dc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80081e0:	440a      	add	r2, r1
 80081e2:	9208      	str	r2, [sp, #32]
 80081e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081e6:	9a07      	ldr	r2, [sp, #28]
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	440a      	add	r2, r1
 80081ec:	9207      	str	r2, [sp, #28]
 80081ee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80081f0:	9a06      	ldr	r2, [sp, #24]
 80081f2:	440a      	add	r2, r1
 80081f4:	9206      	str	r2, [sp, #24]
 80081f6:	9a05      	ldr	r2, [sp, #20]
 80081f8:	3204      	adds	r2, #4
 80081fa:	9205      	str	r2, [sp, #20]
 80081fc:	9a04      	ldr	r2, [sp, #16]
 80081fe:	3204      	adds	r2, #4
 8008200:	9204      	str	r2, [sp, #16]
 8008202:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008204:	3301      	adds	r3, #1
 8008206:	4293      	cmp	r3, r2
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	d393      	bcc.n	8008134 <arm_radix4_butterfly_inverse_q15+0x144>
 800820c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800820e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008210:	2a04      	cmp	r2, #4
 8008212:	f63f af6e 	bhi.w	80080f2 <arm_radix4_butterfly_inverse_q15+0x102>
 8008216:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800821a:	689d      	ldr	r5, [r3, #8]
 800821c:	68de      	ldr	r6, [r3, #12]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	6859      	ldr	r1, [r3, #4]
 8008222:	fa92 f015 	qadd16	r0, r2, r5
 8008226:	3c01      	subs	r4, #1
 8008228:	fad2 f215 	qsub16	r2, r2, r5
 800822c:	f103 0310 	add.w	r3, r3, #16
 8008230:	fa91 f516 	qadd16	r5, r1, r6
 8008234:	fad1 f116 	qsub16	r1, r1, r6
 8008238:	fa90 f625 	shadd16	r6, r0, r5
 800823c:	fad0 f025 	shsub16	r0, r0, r5
 8008240:	f843 6c10 	str.w	r6, [r3, #-16]
 8008244:	f843 0c0c 	str.w	r0, [r3, #-12]
 8008248:	faa2 f021 	shasx	r0, r2, r1
 800824c:	fae2 f221 	shsax	r2, r2, r1
 8008250:	f843 0c08 	str.w	r0, [r3, #-8]
 8008254:	f843 2c04 	str.w	r2, [r3, #-4]
 8008258:	d1df      	bne.n	800821a <arm_radix4_butterfly_inverse_q15+0x22a>
 800825a:	b013      	add	sp, #76	@ 0x4c
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008260:	2400      	movs	r4, #0
 8008262:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8008340 <arm_radix4_butterfly_inverse_q15+0x350>
 8008266:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008268:	4623      	mov	r3, r4
 800826a:	4680      	mov	r8, r0
 800826c:	4691      	mov	r9, r2
 800826e:	f8d8 0000 	ldr.w	r0, [r8]
 8008272:	f8dc 2000 	ldr.w	r2, [ip]
 8008276:	f8da 1000 	ldr.w	r1, [sl]
 800827a:	fa90 f023 	shadd16	r0, r0, r3
 800827e:	fa91 f123 	shadd16	r1, r1, r3
 8008282:	fa90 f023 	shadd16	r0, r0, r3
 8008286:	fa91 fb23 	shadd16	fp, r1, r3
 800828a:	fa92 f223 	shadd16	r2, r2, r3
 800828e:	6829      	ldr	r1, [r5, #0]
 8008290:	fa92 f223 	shadd16	r2, r2, r3
 8008294:	fa91 f123 	shadd16	r1, r1, r3
 8008298:	fa90 f612 	qadd16	r6, r0, r2
 800829c:	fa91 f123 	shadd16	r1, r1, r3
 80082a0:	fa9b f111 	qadd16	r1, fp, r1
 80082a4:	fa96 fb21 	shadd16	fp, r6, r1
 80082a8:	f848 bb04 	str.w	fp, [r8], #4
 80082ac:	fad6 f611 	qsub16	r6, r6, r1
 80082b0:	fad0 f212 	qsub16	r2, r0, r2
 80082b4:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 80082b8:	fb41 f006 	smusd	r0, r1, r6
 80082bc:	fb21 f116 	smuadx	r1, r1, r6
 80082c0:	ea01 010e 	and.w	r1, r1, lr
 80082c4:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 80082c8:	f8da 0000 	ldr.w	r0, [sl]
 80082cc:	f84a 1b04 	str.w	r1, [sl], #4
 80082d0:	fa90 f023 	shadd16	r0, r0, r3
 80082d4:	682e      	ldr	r6, [r5, #0]
 80082d6:	fa90 f023 	shadd16	r0, r0, r3
 80082da:	fa96 f623 	shadd16	r6, r6, r3
 80082de:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80082e2:	fa96 f623 	shadd16	r6, r6, r3
 80082e6:	fad0 f016 	qsub16	r0, r0, r6
 80082ea:	fae2 f610 	qsax	r6, r2, r0
 80082ee:	faa2 f210 	qasx	r2, r2, r0
 80082f2:	fb41 fb02 	smusd	fp, r1, r2
 80082f6:	fb21 f212 	smuadx	r2, r1, r2
 80082fa:	ea02 020e 	and.w	r2, r2, lr
 80082fe:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8008302:	f84c 2b04 	str.w	r2, [ip], #4
 8008306:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800830a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800830e:	fb42 f106 	smusd	r1, r2, r6
 8008312:	fb22 f216 	smuadx	r2, r2, r6
 8008316:	ea02 020e 	and.w	r2, r2, lr
 800831a:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800831e:	f845 2b04 	str.w	r2, [r5], #4
 8008322:	9a03      	ldr	r2, [sp, #12]
 8008324:	f1b9 0901 	subs.w	r9, r9, #1
 8008328:	4414      	add	r4, r2
 800832a:	d1a0      	bne.n	800826e <arm_radix4_butterfly_inverse_q15+0x27e>
 800832c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	2a04      	cmp	r2, #4
 8008332:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008336:	f63f aed9 	bhi.w	80080ec <arm_radix4_butterfly_inverse_q15+0xfc>
 800833a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800833c:	4614      	mov	r4, r2
 800833e:	e76c      	b.n	800821a <arm_radix4_butterfly_inverse_q15+0x22a>
 8008340:	ffff0000 	.word	0xffff0000

08008344 <arm_bitreversal_16>:
 8008344:	b1f1      	cbz	r1, 8008384 <arm_bitreversal_16+0x40>
 8008346:	b4f0      	push	{r4, r5, r6, r7}
 8008348:	2400      	movs	r4, #0
 800834a:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 800834e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8008352:	886d      	ldrh	r5, [r5, #2]
 8008354:	08ad      	lsrs	r5, r5, #2
 8008356:	089b      	lsrs	r3, r3, #2
 8008358:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 800835c:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 8008360:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8008364:	006e      	lsls	r6, r5, #1
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 800836c:	3302      	adds	r3, #2
 800836e:	1cb5      	adds	r5, r6, #2
 8008370:	3402      	adds	r4, #2
 8008372:	b2a4      	uxth	r4, r4
 8008374:	5ac6      	ldrh	r6, [r0, r3]
 8008376:	5b47      	ldrh	r7, [r0, r5]
 8008378:	52c7      	strh	r7, [r0, r3]
 800837a:	42a1      	cmp	r1, r4
 800837c:	5346      	strh	r6, [r0, r5]
 800837e:	d8e4      	bhi.n	800834a <arm_bitreversal_16+0x6>
 8008380:	bcf0      	pop	{r4, r5, r6, r7}
 8008382:	4770      	bx	lr
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop

08008388 <malloc>:
 8008388:	4b02      	ldr	r3, [pc, #8]	@ (8008394 <malloc+0xc>)
 800838a:	4601      	mov	r1, r0
 800838c:	6818      	ldr	r0, [r3, #0]
 800838e:	f000 b82d 	b.w	80083ec <_malloc_r>
 8008392:	bf00      	nop
 8008394:	20000418 	.word	0x20000418

08008398 <free>:
 8008398:	4b02      	ldr	r3, [pc, #8]	@ (80083a4 <free+0xc>)
 800839a:	4601      	mov	r1, r0
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	f000 bc09 	b.w	8008bb4 <_free_r>
 80083a2:	bf00      	nop
 80083a4:	20000418 	.word	0x20000418

080083a8 <sbrk_aligned>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	4e0f      	ldr	r6, [pc, #60]	@ (80083e8 <sbrk_aligned+0x40>)
 80083ac:	460c      	mov	r4, r1
 80083ae:	6831      	ldr	r1, [r6, #0]
 80083b0:	4605      	mov	r5, r0
 80083b2:	b911      	cbnz	r1, 80083ba <sbrk_aligned+0x12>
 80083b4:	f000 fba0 	bl	8008af8 <_sbrk_r>
 80083b8:	6030      	str	r0, [r6, #0]
 80083ba:	4621      	mov	r1, r4
 80083bc:	4628      	mov	r0, r5
 80083be:	f000 fb9b 	bl	8008af8 <_sbrk_r>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	d103      	bne.n	80083ce <sbrk_aligned+0x26>
 80083c6:	f04f 34ff 	mov.w	r4, #4294967295
 80083ca:	4620      	mov	r0, r4
 80083cc:	bd70      	pop	{r4, r5, r6, pc}
 80083ce:	1cc4      	adds	r4, r0, #3
 80083d0:	f024 0403 	bic.w	r4, r4, #3
 80083d4:	42a0      	cmp	r0, r4
 80083d6:	d0f8      	beq.n	80083ca <sbrk_aligned+0x22>
 80083d8:	1a21      	subs	r1, r4, r0
 80083da:	4628      	mov	r0, r5
 80083dc:	f000 fb8c 	bl	8008af8 <_sbrk_r>
 80083e0:	3001      	adds	r0, #1
 80083e2:	d1f2      	bne.n	80083ca <sbrk_aligned+0x22>
 80083e4:	e7ef      	b.n	80083c6 <sbrk_aligned+0x1e>
 80083e6:	bf00      	nop
 80083e8:	2000fa20 	.word	0x2000fa20

080083ec <_malloc_r>:
 80083ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f0:	1ccd      	adds	r5, r1, #3
 80083f2:	f025 0503 	bic.w	r5, r5, #3
 80083f6:	3508      	adds	r5, #8
 80083f8:	2d0c      	cmp	r5, #12
 80083fa:	bf38      	it	cc
 80083fc:	250c      	movcc	r5, #12
 80083fe:	2d00      	cmp	r5, #0
 8008400:	4606      	mov	r6, r0
 8008402:	db01      	blt.n	8008408 <_malloc_r+0x1c>
 8008404:	42a9      	cmp	r1, r5
 8008406:	d904      	bls.n	8008412 <_malloc_r+0x26>
 8008408:	230c      	movs	r3, #12
 800840a:	6033      	str	r3, [r6, #0]
 800840c:	2000      	movs	r0, #0
 800840e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084e8 <_malloc_r+0xfc>
 8008416:	f000 f869 	bl	80084ec <__malloc_lock>
 800841a:	f8d8 3000 	ldr.w	r3, [r8]
 800841e:	461c      	mov	r4, r3
 8008420:	bb44      	cbnz	r4, 8008474 <_malloc_r+0x88>
 8008422:	4629      	mov	r1, r5
 8008424:	4630      	mov	r0, r6
 8008426:	f7ff ffbf 	bl	80083a8 <sbrk_aligned>
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	4604      	mov	r4, r0
 800842e:	d158      	bne.n	80084e2 <_malloc_r+0xf6>
 8008430:	f8d8 4000 	ldr.w	r4, [r8]
 8008434:	4627      	mov	r7, r4
 8008436:	2f00      	cmp	r7, #0
 8008438:	d143      	bne.n	80084c2 <_malloc_r+0xd6>
 800843a:	2c00      	cmp	r4, #0
 800843c:	d04b      	beq.n	80084d6 <_malloc_r+0xea>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	4639      	mov	r1, r7
 8008442:	4630      	mov	r0, r6
 8008444:	eb04 0903 	add.w	r9, r4, r3
 8008448:	f000 fb56 	bl	8008af8 <_sbrk_r>
 800844c:	4581      	cmp	r9, r0
 800844e:	d142      	bne.n	80084d6 <_malloc_r+0xea>
 8008450:	6821      	ldr	r1, [r4, #0]
 8008452:	1a6d      	subs	r5, r5, r1
 8008454:	4629      	mov	r1, r5
 8008456:	4630      	mov	r0, r6
 8008458:	f7ff ffa6 	bl	80083a8 <sbrk_aligned>
 800845c:	3001      	adds	r0, #1
 800845e:	d03a      	beq.n	80084d6 <_malloc_r+0xea>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	442b      	add	r3, r5
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	f8d8 3000 	ldr.w	r3, [r8]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	bb62      	cbnz	r2, 80084c8 <_malloc_r+0xdc>
 800846e:	f8c8 7000 	str.w	r7, [r8]
 8008472:	e00f      	b.n	8008494 <_malloc_r+0xa8>
 8008474:	6822      	ldr	r2, [r4, #0]
 8008476:	1b52      	subs	r2, r2, r5
 8008478:	d420      	bmi.n	80084bc <_malloc_r+0xd0>
 800847a:	2a0b      	cmp	r2, #11
 800847c:	d917      	bls.n	80084ae <_malloc_r+0xc2>
 800847e:	1961      	adds	r1, r4, r5
 8008480:	42a3      	cmp	r3, r4
 8008482:	6025      	str	r5, [r4, #0]
 8008484:	bf18      	it	ne
 8008486:	6059      	strne	r1, [r3, #4]
 8008488:	6863      	ldr	r3, [r4, #4]
 800848a:	bf08      	it	eq
 800848c:	f8c8 1000 	streq.w	r1, [r8]
 8008490:	5162      	str	r2, [r4, r5]
 8008492:	604b      	str	r3, [r1, #4]
 8008494:	4630      	mov	r0, r6
 8008496:	f000 f82f 	bl	80084f8 <__malloc_unlock>
 800849a:	f104 000b 	add.w	r0, r4, #11
 800849e:	1d23      	adds	r3, r4, #4
 80084a0:	f020 0007 	bic.w	r0, r0, #7
 80084a4:	1ac2      	subs	r2, r0, r3
 80084a6:	bf1c      	itt	ne
 80084a8:	1a1b      	subne	r3, r3, r0
 80084aa:	50a3      	strne	r3, [r4, r2]
 80084ac:	e7af      	b.n	800840e <_malloc_r+0x22>
 80084ae:	6862      	ldr	r2, [r4, #4]
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	bf0c      	ite	eq
 80084b4:	f8c8 2000 	streq.w	r2, [r8]
 80084b8:	605a      	strne	r2, [r3, #4]
 80084ba:	e7eb      	b.n	8008494 <_malloc_r+0xa8>
 80084bc:	4623      	mov	r3, r4
 80084be:	6864      	ldr	r4, [r4, #4]
 80084c0:	e7ae      	b.n	8008420 <_malloc_r+0x34>
 80084c2:	463c      	mov	r4, r7
 80084c4:	687f      	ldr	r7, [r7, #4]
 80084c6:	e7b6      	b.n	8008436 <_malloc_r+0x4a>
 80084c8:	461a      	mov	r2, r3
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d1fb      	bne.n	80084c8 <_malloc_r+0xdc>
 80084d0:	2300      	movs	r3, #0
 80084d2:	6053      	str	r3, [r2, #4]
 80084d4:	e7de      	b.n	8008494 <_malloc_r+0xa8>
 80084d6:	230c      	movs	r3, #12
 80084d8:	6033      	str	r3, [r6, #0]
 80084da:	4630      	mov	r0, r6
 80084dc:	f000 f80c 	bl	80084f8 <__malloc_unlock>
 80084e0:	e794      	b.n	800840c <_malloc_r+0x20>
 80084e2:	6005      	str	r5, [r0, #0]
 80084e4:	e7d6      	b.n	8008494 <_malloc_r+0xa8>
 80084e6:	bf00      	nop
 80084e8:	2000fa24 	.word	0x2000fa24

080084ec <__malloc_lock>:
 80084ec:	4801      	ldr	r0, [pc, #4]	@ (80084f4 <__malloc_lock+0x8>)
 80084ee:	f000 bb50 	b.w	8008b92 <__retarget_lock_acquire_recursive>
 80084f2:	bf00      	nop
 80084f4:	2000fb68 	.word	0x2000fb68

080084f8 <__malloc_unlock>:
 80084f8:	4801      	ldr	r0, [pc, #4]	@ (8008500 <__malloc_unlock+0x8>)
 80084fa:	f000 bb4b 	b.w	8008b94 <__retarget_lock_release_recursive>
 80084fe:	bf00      	nop
 8008500:	2000fb68 	.word	0x2000fb68

08008504 <std>:
 8008504:	2300      	movs	r3, #0
 8008506:	b510      	push	{r4, lr}
 8008508:	4604      	mov	r4, r0
 800850a:	e9c0 3300 	strd	r3, r3, [r0]
 800850e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008512:	6083      	str	r3, [r0, #8]
 8008514:	8181      	strh	r1, [r0, #12]
 8008516:	6643      	str	r3, [r0, #100]	@ 0x64
 8008518:	81c2      	strh	r2, [r0, #14]
 800851a:	6183      	str	r3, [r0, #24]
 800851c:	4619      	mov	r1, r3
 800851e:	2208      	movs	r2, #8
 8008520:	305c      	adds	r0, #92	@ 0x5c
 8008522:	f000 faad 	bl	8008a80 <memset>
 8008526:	4b0d      	ldr	r3, [pc, #52]	@ (800855c <std+0x58>)
 8008528:	6263      	str	r3, [r4, #36]	@ 0x24
 800852a:	4b0d      	ldr	r3, [pc, #52]	@ (8008560 <std+0x5c>)
 800852c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800852e:	4b0d      	ldr	r3, [pc, #52]	@ (8008564 <std+0x60>)
 8008530:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008532:	4b0d      	ldr	r3, [pc, #52]	@ (8008568 <std+0x64>)
 8008534:	6323      	str	r3, [r4, #48]	@ 0x30
 8008536:	4b0d      	ldr	r3, [pc, #52]	@ (800856c <std+0x68>)
 8008538:	6224      	str	r4, [r4, #32]
 800853a:	429c      	cmp	r4, r3
 800853c:	d006      	beq.n	800854c <std+0x48>
 800853e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008542:	4294      	cmp	r4, r2
 8008544:	d002      	beq.n	800854c <std+0x48>
 8008546:	33d0      	adds	r3, #208	@ 0xd0
 8008548:	429c      	cmp	r4, r3
 800854a:	d105      	bne.n	8008558 <std+0x54>
 800854c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008554:	f000 bb1c 	b.w	8008b90 <__retarget_lock_init_recursive>
 8008558:	bd10      	pop	{r4, pc}
 800855a:	bf00      	nop
 800855c:	080088d1 	.word	0x080088d1
 8008560:	080088f3 	.word	0x080088f3
 8008564:	0800892b 	.word	0x0800892b
 8008568:	0800894f 	.word	0x0800894f
 800856c:	2000fa28 	.word	0x2000fa28

08008570 <stdio_exit_handler>:
 8008570:	4a02      	ldr	r2, [pc, #8]	@ (800857c <stdio_exit_handler+0xc>)
 8008572:	4903      	ldr	r1, [pc, #12]	@ (8008580 <stdio_exit_handler+0x10>)
 8008574:	4803      	ldr	r0, [pc, #12]	@ (8008584 <stdio_exit_handler+0x14>)
 8008576:	f000 b869 	b.w	800864c <_fwalk_sglue>
 800857a:	bf00      	nop
 800857c:	2000040c 	.word	0x2000040c
 8008580:	080092f1 	.word	0x080092f1
 8008584:	2000041c 	.word	0x2000041c

08008588 <cleanup_stdio>:
 8008588:	6841      	ldr	r1, [r0, #4]
 800858a:	4b0c      	ldr	r3, [pc, #48]	@ (80085bc <cleanup_stdio+0x34>)
 800858c:	4299      	cmp	r1, r3
 800858e:	b510      	push	{r4, lr}
 8008590:	4604      	mov	r4, r0
 8008592:	d001      	beq.n	8008598 <cleanup_stdio+0x10>
 8008594:	f000 feac 	bl	80092f0 <_fflush_r>
 8008598:	68a1      	ldr	r1, [r4, #8]
 800859a:	4b09      	ldr	r3, [pc, #36]	@ (80085c0 <cleanup_stdio+0x38>)
 800859c:	4299      	cmp	r1, r3
 800859e:	d002      	beq.n	80085a6 <cleanup_stdio+0x1e>
 80085a0:	4620      	mov	r0, r4
 80085a2:	f000 fea5 	bl	80092f0 <_fflush_r>
 80085a6:	68e1      	ldr	r1, [r4, #12]
 80085a8:	4b06      	ldr	r3, [pc, #24]	@ (80085c4 <cleanup_stdio+0x3c>)
 80085aa:	4299      	cmp	r1, r3
 80085ac:	d004      	beq.n	80085b8 <cleanup_stdio+0x30>
 80085ae:	4620      	mov	r0, r4
 80085b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b4:	f000 be9c 	b.w	80092f0 <_fflush_r>
 80085b8:	bd10      	pop	{r4, pc}
 80085ba:	bf00      	nop
 80085bc:	2000fa28 	.word	0x2000fa28
 80085c0:	2000fa90 	.word	0x2000fa90
 80085c4:	2000faf8 	.word	0x2000faf8

080085c8 <global_stdio_init.part.0>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	4b0b      	ldr	r3, [pc, #44]	@ (80085f8 <global_stdio_init.part.0+0x30>)
 80085cc:	4c0b      	ldr	r4, [pc, #44]	@ (80085fc <global_stdio_init.part.0+0x34>)
 80085ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008600 <global_stdio_init.part.0+0x38>)
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	4620      	mov	r0, r4
 80085d4:	2200      	movs	r2, #0
 80085d6:	2104      	movs	r1, #4
 80085d8:	f7ff ff94 	bl	8008504 <std>
 80085dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085e0:	2201      	movs	r2, #1
 80085e2:	2109      	movs	r1, #9
 80085e4:	f7ff ff8e 	bl	8008504 <std>
 80085e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085ec:	2202      	movs	r2, #2
 80085ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f2:	2112      	movs	r1, #18
 80085f4:	f7ff bf86 	b.w	8008504 <std>
 80085f8:	2000fb60 	.word	0x2000fb60
 80085fc:	2000fa28 	.word	0x2000fa28
 8008600:	08008571 	.word	0x08008571

08008604 <__sfp_lock_acquire>:
 8008604:	4801      	ldr	r0, [pc, #4]	@ (800860c <__sfp_lock_acquire+0x8>)
 8008606:	f000 bac4 	b.w	8008b92 <__retarget_lock_acquire_recursive>
 800860a:	bf00      	nop
 800860c:	2000fb69 	.word	0x2000fb69

08008610 <__sfp_lock_release>:
 8008610:	4801      	ldr	r0, [pc, #4]	@ (8008618 <__sfp_lock_release+0x8>)
 8008612:	f000 babf 	b.w	8008b94 <__retarget_lock_release_recursive>
 8008616:	bf00      	nop
 8008618:	2000fb69 	.word	0x2000fb69

0800861c <__sinit>:
 800861c:	b510      	push	{r4, lr}
 800861e:	4604      	mov	r4, r0
 8008620:	f7ff fff0 	bl	8008604 <__sfp_lock_acquire>
 8008624:	6a23      	ldr	r3, [r4, #32]
 8008626:	b11b      	cbz	r3, 8008630 <__sinit+0x14>
 8008628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800862c:	f7ff bff0 	b.w	8008610 <__sfp_lock_release>
 8008630:	4b04      	ldr	r3, [pc, #16]	@ (8008644 <__sinit+0x28>)
 8008632:	6223      	str	r3, [r4, #32]
 8008634:	4b04      	ldr	r3, [pc, #16]	@ (8008648 <__sinit+0x2c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f5      	bne.n	8008628 <__sinit+0xc>
 800863c:	f7ff ffc4 	bl	80085c8 <global_stdio_init.part.0>
 8008640:	e7f2      	b.n	8008628 <__sinit+0xc>
 8008642:	bf00      	nop
 8008644:	08008589 	.word	0x08008589
 8008648:	2000fb60 	.word	0x2000fb60

0800864c <_fwalk_sglue>:
 800864c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008650:	4607      	mov	r7, r0
 8008652:	4688      	mov	r8, r1
 8008654:	4614      	mov	r4, r2
 8008656:	2600      	movs	r6, #0
 8008658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800865c:	f1b9 0901 	subs.w	r9, r9, #1
 8008660:	d505      	bpl.n	800866e <_fwalk_sglue+0x22>
 8008662:	6824      	ldr	r4, [r4, #0]
 8008664:	2c00      	cmp	r4, #0
 8008666:	d1f7      	bne.n	8008658 <_fwalk_sglue+0xc>
 8008668:	4630      	mov	r0, r6
 800866a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800866e:	89ab      	ldrh	r3, [r5, #12]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d907      	bls.n	8008684 <_fwalk_sglue+0x38>
 8008674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008678:	3301      	adds	r3, #1
 800867a:	d003      	beq.n	8008684 <_fwalk_sglue+0x38>
 800867c:	4629      	mov	r1, r5
 800867e:	4638      	mov	r0, r7
 8008680:	47c0      	blx	r8
 8008682:	4306      	orrs	r6, r0
 8008684:	3568      	adds	r5, #104	@ 0x68
 8008686:	e7e9      	b.n	800865c <_fwalk_sglue+0x10>

08008688 <iprintf>:
 8008688:	b40f      	push	{r0, r1, r2, r3}
 800868a:	b507      	push	{r0, r1, r2, lr}
 800868c:	4906      	ldr	r1, [pc, #24]	@ (80086a8 <iprintf+0x20>)
 800868e:	ab04      	add	r3, sp, #16
 8008690:	6808      	ldr	r0, [r1, #0]
 8008692:	f853 2b04 	ldr.w	r2, [r3], #4
 8008696:	6881      	ldr	r1, [r0, #8]
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	f000 faff 	bl	8008c9c <_vfiprintf_r>
 800869e:	b003      	add	sp, #12
 80086a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086a4:	b004      	add	sp, #16
 80086a6:	4770      	bx	lr
 80086a8:	20000418 	.word	0x20000418

080086ac <_puts_r>:
 80086ac:	6a03      	ldr	r3, [r0, #32]
 80086ae:	b570      	push	{r4, r5, r6, lr}
 80086b0:	6884      	ldr	r4, [r0, #8]
 80086b2:	4605      	mov	r5, r0
 80086b4:	460e      	mov	r6, r1
 80086b6:	b90b      	cbnz	r3, 80086bc <_puts_r+0x10>
 80086b8:	f7ff ffb0 	bl	800861c <__sinit>
 80086bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086be:	07db      	lsls	r3, r3, #31
 80086c0:	d405      	bmi.n	80086ce <_puts_r+0x22>
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	0598      	lsls	r0, r3, #22
 80086c6:	d402      	bmi.n	80086ce <_puts_r+0x22>
 80086c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ca:	f000 fa62 	bl	8008b92 <__retarget_lock_acquire_recursive>
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	0719      	lsls	r1, r3, #28
 80086d2:	d502      	bpl.n	80086da <_puts_r+0x2e>
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d135      	bne.n	8008746 <_puts_r+0x9a>
 80086da:	4621      	mov	r1, r4
 80086dc:	4628      	mov	r0, r5
 80086de:	f000 f979 	bl	80089d4 <__swsetup_r>
 80086e2:	b380      	cbz	r0, 8008746 <_puts_r+0x9a>
 80086e4:	f04f 35ff 	mov.w	r5, #4294967295
 80086e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086ea:	07da      	lsls	r2, r3, #31
 80086ec:	d405      	bmi.n	80086fa <_puts_r+0x4e>
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	059b      	lsls	r3, r3, #22
 80086f2:	d402      	bmi.n	80086fa <_puts_r+0x4e>
 80086f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086f6:	f000 fa4d 	bl	8008b94 <__retarget_lock_release_recursive>
 80086fa:	4628      	mov	r0, r5
 80086fc:	bd70      	pop	{r4, r5, r6, pc}
 80086fe:	2b00      	cmp	r3, #0
 8008700:	da04      	bge.n	800870c <_puts_r+0x60>
 8008702:	69a2      	ldr	r2, [r4, #24]
 8008704:	429a      	cmp	r2, r3
 8008706:	dc17      	bgt.n	8008738 <_puts_r+0x8c>
 8008708:	290a      	cmp	r1, #10
 800870a:	d015      	beq.n	8008738 <_puts_r+0x8c>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	6022      	str	r2, [r4, #0]
 8008712:	7019      	strb	r1, [r3, #0]
 8008714:	68a3      	ldr	r3, [r4, #8]
 8008716:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800871a:	3b01      	subs	r3, #1
 800871c:	60a3      	str	r3, [r4, #8]
 800871e:	2900      	cmp	r1, #0
 8008720:	d1ed      	bne.n	80086fe <_puts_r+0x52>
 8008722:	2b00      	cmp	r3, #0
 8008724:	da11      	bge.n	800874a <_puts_r+0x9e>
 8008726:	4622      	mov	r2, r4
 8008728:	210a      	movs	r1, #10
 800872a:	4628      	mov	r0, r5
 800872c:	f000 f913 	bl	8008956 <__swbuf_r>
 8008730:	3001      	adds	r0, #1
 8008732:	d0d7      	beq.n	80086e4 <_puts_r+0x38>
 8008734:	250a      	movs	r5, #10
 8008736:	e7d7      	b.n	80086e8 <_puts_r+0x3c>
 8008738:	4622      	mov	r2, r4
 800873a:	4628      	mov	r0, r5
 800873c:	f000 f90b 	bl	8008956 <__swbuf_r>
 8008740:	3001      	adds	r0, #1
 8008742:	d1e7      	bne.n	8008714 <_puts_r+0x68>
 8008744:	e7ce      	b.n	80086e4 <_puts_r+0x38>
 8008746:	3e01      	subs	r6, #1
 8008748:	e7e4      	b.n	8008714 <_puts_r+0x68>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	6022      	str	r2, [r4, #0]
 8008750:	220a      	movs	r2, #10
 8008752:	701a      	strb	r2, [r3, #0]
 8008754:	e7ee      	b.n	8008734 <_puts_r+0x88>
	...

08008758 <puts>:
 8008758:	4b02      	ldr	r3, [pc, #8]	@ (8008764 <puts+0xc>)
 800875a:	4601      	mov	r1, r0
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	f7ff bfa5 	b.w	80086ac <_puts_r>
 8008762:	bf00      	nop
 8008764:	20000418 	.word	0x20000418

08008768 <setvbuf>:
 8008768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800876c:	461d      	mov	r5, r3
 800876e:	4b57      	ldr	r3, [pc, #348]	@ (80088cc <setvbuf+0x164>)
 8008770:	681f      	ldr	r7, [r3, #0]
 8008772:	4604      	mov	r4, r0
 8008774:	460e      	mov	r6, r1
 8008776:	4690      	mov	r8, r2
 8008778:	b127      	cbz	r7, 8008784 <setvbuf+0x1c>
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	b913      	cbnz	r3, 8008784 <setvbuf+0x1c>
 800877e:	4638      	mov	r0, r7
 8008780:	f7ff ff4c 	bl	800861c <__sinit>
 8008784:	f1b8 0f02 	cmp.w	r8, #2
 8008788:	d006      	beq.n	8008798 <setvbuf+0x30>
 800878a:	f1b8 0f01 	cmp.w	r8, #1
 800878e:	f200 809a 	bhi.w	80088c6 <setvbuf+0x15e>
 8008792:	2d00      	cmp	r5, #0
 8008794:	f2c0 8097 	blt.w	80088c6 <setvbuf+0x15e>
 8008798:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800879a:	07d9      	lsls	r1, r3, #31
 800879c:	d405      	bmi.n	80087aa <setvbuf+0x42>
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	059a      	lsls	r2, r3, #22
 80087a2:	d402      	bmi.n	80087aa <setvbuf+0x42>
 80087a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087a6:	f000 f9f4 	bl	8008b92 <__retarget_lock_acquire_recursive>
 80087aa:	4621      	mov	r1, r4
 80087ac:	4638      	mov	r0, r7
 80087ae:	f000 fd9f 	bl	80092f0 <_fflush_r>
 80087b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087b4:	b141      	cbz	r1, 80087c8 <setvbuf+0x60>
 80087b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087ba:	4299      	cmp	r1, r3
 80087bc:	d002      	beq.n	80087c4 <setvbuf+0x5c>
 80087be:	4638      	mov	r0, r7
 80087c0:	f000 f9f8 	bl	8008bb4 <_free_r>
 80087c4:	2300      	movs	r3, #0
 80087c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80087c8:	2300      	movs	r3, #0
 80087ca:	61a3      	str	r3, [r4, #24]
 80087cc:	6063      	str	r3, [r4, #4]
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	061b      	lsls	r3, r3, #24
 80087d2:	d503      	bpl.n	80087dc <setvbuf+0x74>
 80087d4:	6921      	ldr	r1, [r4, #16]
 80087d6:	4638      	mov	r0, r7
 80087d8:	f000 f9ec 	bl	8008bb4 <_free_r>
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80087e2:	f023 0303 	bic.w	r3, r3, #3
 80087e6:	f1b8 0f02 	cmp.w	r8, #2
 80087ea:	81a3      	strh	r3, [r4, #12]
 80087ec:	d061      	beq.n	80088b2 <setvbuf+0x14a>
 80087ee:	ab01      	add	r3, sp, #4
 80087f0:	466a      	mov	r2, sp
 80087f2:	4621      	mov	r1, r4
 80087f4:	4638      	mov	r0, r7
 80087f6:	f000 fda3 	bl	8009340 <__swhatbuf_r>
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	4318      	orrs	r0, r3
 80087fe:	81a0      	strh	r0, [r4, #12]
 8008800:	bb2d      	cbnz	r5, 800884e <setvbuf+0xe6>
 8008802:	9d00      	ldr	r5, [sp, #0]
 8008804:	4628      	mov	r0, r5
 8008806:	f7ff fdbf 	bl	8008388 <malloc>
 800880a:	4606      	mov	r6, r0
 800880c:	2800      	cmp	r0, #0
 800880e:	d152      	bne.n	80088b6 <setvbuf+0x14e>
 8008810:	f8dd 9000 	ldr.w	r9, [sp]
 8008814:	45a9      	cmp	r9, r5
 8008816:	d140      	bne.n	800889a <setvbuf+0x132>
 8008818:	f04f 35ff 	mov.w	r5, #4294967295
 800881c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008820:	f043 0202 	orr.w	r2, r3, #2
 8008824:	81a2      	strh	r2, [r4, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	60a2      	str	r2, [r4, #8]
 800882a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	6122      	str	r2, [r4, #16]
 8008832:	2201      	movs	r2, #1
 8008834:	6162      	str	r2, [r4, #20]
 8008836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008838:	07d6      	lsls	r6, r2, #31
 800883a:	d404      	bmi.n	8008846 <setvbuf+0xde>
 800883c:	0598      	lsls	r0, r3, #22
 800883e:	d402      	bmi.n	8008846 <setvbuf+0xde>
 8008840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008842:	f000 f9a7 	bl	8008b94 <__retarget_lock_release_recursive>
 8008846:	4628      	mov	r0, r5
 8008848:	b003      	add	sp, #12
 800884a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800884e:	2e00      	cmp	r6, #0
 8008850:	d0d8      	beq.n	8008804 <setvbuf+0x9c>
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	b913      	cbnz	r3, 800885c <setvbuf+0xf4>
 8008856:	4638      	mov	r0, r7
 8008858:	f7ff fee0 	bl	800861c <__sinit>
 800885c:	f1b8 0f01 	cmp.w	r8, #1
 8008860:	bf08      	it	eq
 8008862:	89a3      	ldrheq	r3, [r4, #12]
 8008864:	6026      	str	r6, [r4, #0]
 8008866:	bf04      	itt	eq
 8008868:	f043 0301 	orreq.w	r3, r3, #1
 800886c:	81a3      	strheq	r3, [r4, #12]
 800886e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008872:	f013 0208 	ands.w	r2, r3, #8
 8008876:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800887a:	d01e      	beq.n	80088ba <setvbuf+0x152>
 800887c:	07d9      	lsls	r1, r3, #31
 800887e:	bf41      	itttt	mi
 8008880:	2200      	movmi	r2, #0
 8008882:	426d      	negmi	r5, r5
 8008884:	60a2      	strmi	r2, [r4, #8]
 8008886:	61a5      	strmi	r5, [r4, #24]
 8008888:	bf58      	it	pl
 800888a:	60a5      	strpl	r5, [r4, #8]
 800888c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800888e:	07d2      	lsls	r2, r2, #31
 8008890:	d401      	bmi.n	8008896 <setvbuf+0x12e>
 8008892:	059b      	lsls	r3, r3, #22
 8008894:	d513      	bpl.n	80088be <setvbuf+0x156>
 8008896:	2500      	movs	r5, #0
 8008898:	e7d5      	b.n	8008846 <setvbuf+0xde>
 800889a:	4648      	mov	r0, r9
 800889c:	f7ff fd74 	bl	8008388 <malloc>
 80088a0:	4606      	mov	r6, r0
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d0b8      	beq.n	8008818 <setvbuf+0xb0>
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ac:	81a3      	strh	r3, [r4, #12]
 80088ae:	464d      	mov	r5, r9
 80088b0:	e7cf      	b.n	8008852 <setvbuf+0xea>
 80088b2:	2500      	movs	r5, #0
 80088b4:	e7b2      	b.n	800881c <setvbuf+0xb4>
 80088b6:	46a9      	mov	r9, r5
 80088b8:	e7f5      	b.n	80088a6 <setvbuf+0x13e>
 80088ba:	60a2      	str	r2, [r4, #8]
 80088bc:	e7e6      	b.n	800888c <setvbuf+0x124>
 80088be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088c0:	f000 f968 	bl	8008b94 <__retarget_lock_release_recursive>
 80088c4:	e7e7      	b.n	8008896 <setvbuf+0x12e>
 80088c6:	f04f 35ff 	mov.w	r5, #4294967295
 80088ca:	e7bc      	b.n	8008846 <setvbuf+0xde>
 80088cc:	20000418 	.word	0x20000418

080088d0 <__sread>:
 80088d0:	b510      	push	{r4, lr}
 80088d2:	460c      	mov	r4, r1
 80088d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d8:	f000 f8fc 	bl	8008ad4 <_read_r>
 80088dc:	2800      	cmp	r0, #0
 80088de:	bfab      	itete	ge
 80088e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088e2:	89a3      	ldrhlt	r3, [r4, #12]
 80088e4:	181b      	addge	r3, r3, r0
 80088e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088ea:	bfac      	ite	ge
 80088ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088ee:	81a3      	strhlt	r3, [r4, #12]
 80088f0:	bd10      	pop	{r4, pc}

080088f2 <__swrite>:
 80088f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f6:	461f      	mov	r7, r3
 80088f8:	898b      	ldrh	r3, [r1, #12]
 80088fa:	05db      	lsls	r3, r3, #23
 80088fc:	4605      	mov	r5, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	4616      	mov	r6, r2
 8008902:	d505      	bpl.n	8008910 <__swrite+0x1e>
 8008904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008908:	2302      	movs	r3, #2
 800890a:	2200      	movs	r2, #0
 800890c:	f000 f8d0 	bl	8008ab0 <_lseek_r>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008916:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	4632      	mov	r2, r6
 800891e:	463b      	mov	r3, r7
 8008920:	4628      	mov	r0, r5
 8008922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008926:	f000 b8f7 	b.w	8008b18 <_write_r>

0800892a <__sseek>:
 800892a:	b510      	push	{r4, lr}
 800892c:	460c      	mov	r4, r1
 800892e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008932:	f000 f8bd 	bl	8008ab0 <_lseek_r>
 8008936:	1c43      	adds	r3, r0, #1
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	bf15      	itete	ne
 800893c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800893e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008942:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008946:	81a3      	strheq	r3, [r4, #12]
 8008948:	bf18      	it	ne
 800894a:	81a3      	strhne	r3, [r4, #12]
 800894c:	bd10      	pop	{r4, pc}

0800894e <__sclose>:
 800894e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008952:	f000 b89d 	b.w	8008a90 <_close_r>

08008956 <__swbuf_r>:
 8008956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008958:	460e      	mov	r6, r1
 800895a:	4614      	mov	r4, r2
 800895c:	4605      	mov	r5, r0
 800895e:	b118      	cbz	r0, 8008968 <__swbuf_r+0x12>
 8008960:	6a03      	ldr	r3, [r0, #32]
 8008962:	b90b      	cbnz	r3, 8008968 <__swbuf_r+0x12>
 8008964:	f7ff fe5a 	bl	800861c <__sinit>
 8008968:	69a3      	ldr	r3, [r4, #24]
 800896a:	60a3      	str	r3, [r4, #8]
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	071a      	lsls	r2, r3, #28
 8008970:	d501      	bpl.n	8008976 <__swbuf_r+0x20>
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	b943      	cbnz	r3, 8008988 <__swbuf_r+0x32>
 8008976:	4621      	mov	r1, r4
 8008978:	4628      	mov	r0, r5
 800897a:	f000 f82b 	bl	80089d4 <__swsetup_r>
 800897e:	b118      	cbz	r0, 8008988 <__swbuf_r+0x32>
 8008980:	f04f 37ff 	mov.w	r7, #4294967295
 8008984:	4638      	mov	r0, r7
 8008986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	6922      	ldr	r2, [r4, #16]
 800898c:	1a98      	subs	r0, r3, r2
 800898e:	6963      	ldr	r3, [r4, #20]
 8008990:	b2f6      	uxtb	r6, r6
 8008992:	4283      	cmp	r3, r0
 8008994:	4637      	mov	r7, r6
 8008996:	dc05      	bgt.n	80089a4 <__swbuf_r+0x4e>
 8008998:	4621      	mov	r1, r4
 800899a:	4628      	mov	r0, r5
 800899c:	f000 fca8 	bl	80092f0 <_fflush_r>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d1ed      	bne.n	8008980 <__swbuf_r+0x2a>
 80089a4:	68a3      	ldr	r3, [r4, #8]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	60a3      	str	r3, [r4, #8]
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	1c5a      	adds	r2, r3, #1
 80089ae:	6022      	str	r2, [r4, #0]
 80089b0:	701e      	strb	r6, [r3, #0]
 80089b2:	6962      	ldr	r2, [r4, #20]
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d004      	beq.n	80089c4 <__swbuf_r+0x6e>
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	07db      	lsls	r3, r3, #31
 80089be:	d5e1      	bpl.n	8008984 <__swbuf_r+0x2e>
 80089c0:	2e0a      	cmp	r6, #10
 80089c2:	d1df      	bne.n	8008984 <__swbuf_r+0x2e>
 80089c4:	4621      	mov	r1, r4
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 fc92 	bl	80092f0 <_fflush_r>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d0d9      	beq.n	8008984 <__swbuf_r+0x2e>
 80089d0:	e7d6      	b.n	8008980 <__swbuf_r+0x2a>
	...

080089d4 <__swsetup_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4b29      	ldr	r3, [pc, #164]	@ (8008a7c <__swsetup_r+0xa8>)
 80089d8:	4605      	mov	r5, r0
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	460c      	mov	r4, r1
 80089de:	b118      	cbz	r0, 80089e8 <__swsetup_r+0x14>
 80089e0:	6a03      	ldr	r3, [r0, #32]
 80089e2:	b90b      	cbnz	r3, 80089e8 <__swsetup_r+0x14>
 80089e4:	f7ff fe1a 	bl	800861c <__sinit>
 80089e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ec:	0719      	lsls	r1, r3, #28
 80089ee:	d422      	bmi.n	8008a36 <__swsetup_r+0x62>
 80089f0:	06da      	lsls	r2, r3, #27
 80089f2:	d407      	bmi.n	8008a04 <__swsetup_r+0x30>
 80089f4:	2209      	movs	r2, #9
 80089f6:	602a      	str	r2, [r5, #0]
 80089f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008a02:	e033      	b.n	8008a6c <__swsetup_r+0x98>
 8008a04:	0758      	lsls	r0, r3, #29
 8008a06:	d512      	bpl.n	8008a2e <__swsetup_r+0x5a>
 8008a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a0a:	b141      	cbz	r1, 8008a1e <__swsetup_r+0x4a>
 8008a0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a10:	4299      	cmp	r1, r3
 8008a12:	d002      	beq.n	8008a1a <__swsetup_r+0x46>
 8008a14:	4628      	mov	r0, r5
 8008a16:	f000 f8cd 	bl	8008bb4 <_free_r>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a24:	81a3      	strh	r3, [r4, #12]
 8008a26:	2300      	movs	r3, #0
 8008a28:	6063      	str	r3, [r4, #4]
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f043 0308 	orr.w	r3, r3, #8
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	6923      	ldr	r3, [r4, #16]
 8008a38:	b94b      	cbnz	r3, 8008a4e <__swsetup_r+0x7a>
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a44:	d003      	beq.n	8008a4e <__swsetup_r+0x7a>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f000 fc9f 	bl	800938c <__smakebuf_r>
 8008a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a52:	f013 0201 	ands.w	r2, r3, #1
 8008a56:	d00a      	beq.n	8008a6e <__swsetup_r+0x9a>
 8008a58:	2200      	movs	r2, #0
 8008a5a:	60a2      	str	r2, [r4, #8]
 8008a5c:	6962      	ldr	r2, [r4, #20]
 8008a5e:	4252      	negs	r2, r2
 8008a60:	61a2      	str	r2, [r4, #24]
 8008a62:	6922      	ldr	r2, [r4, #16]
 8008a64:	b942      	cbnz	r2, 8008a78 <__swsetup_r+0xa4>
 8008a66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a6a:	d1c5      	bne.n	80089f8 <__swsetup_r+0x24>
 8008a6c:	bd38      	pop	{r3, r4, r5, pc}
 8008a6e:	0799      	lsls	r1, r3, #30
 8008a70:	bf58      	it	pl
 8008a72:	6962      	ldrpl	r2, [r4, #20]
 8008a74:	60a2      	str	r2, [r4, #8]
 8008a76:	e7f4      	b.n	8008a62 <__swsetup_r+0x8e>
 8008a78:	2000      	movs	r0, #0
 8008a7a:	e7f7      	b.n	8008a6c <__swsetup_r+0x98>
 8008a7c:	20000418 	.word	0x20000418

08008a80 <memset>:
 8008a80:	4402      	add	r2, r0
 8008a82:	4603      	mov	r3, r0
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d100      	bne.n	8008a8a <memset+0xa>
 8008a88:	4770      	bx	lr
 8008a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a8e:	e7f9      	b.n	8008a84 <memset+0x4>

08008a90 <_close_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d06      	ldr	r5, [pc, #24]	@ (8008aac <_close_r+0x1c>)
 8008a94:	2300      	movs	r3, #0
 8008a96:	4604      	mov	r4, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	602b      	str	r3, [r5, #0]
 8008a9c:	f7f8 fafc 	bl	8001098 <_close>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_close_r+0x1a>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_close_r+0x1a>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	2000fb64 	.word	0x2000fb64

08008ab0 <_lseek_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d07      	ldr	r5, [pc, #28]	@ (8008ad0 <_lseek_r+0x20>)
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	4608      	mov	r0, r1
 8008ab8:	4611      	mov	r1, r2
 8008aba:	2200      	movs	r2, #0
 8008abc:	602a      	str	r2, [r5, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f7f8 faf6 	bl	80010b0 <_lseek>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_lseek_r+0x1e>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_lseek_r+0x1e>
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	2000fb64 	.word	0x2000fb64

08008ad4 <_read_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d07      	ldr	r5, [pc, #28]	@ (8008af4 <_read_r+0x20>)
 8008ad8:	4604      	mov	r4, r0
 8008ada:	4608      	mov	r0, r1
 8008adc:	4611      	mov	r1, r2
 8008ade:	2200      	movs	r2, #0
 8008ae0:	602a      	str	r2, [r5, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f7f8 faec 	bl	80010c0 <_read>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_read_r+0x1e>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_read_r+0x1e>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	2000fb64 	.word	0x2000fb64

08008af8 <_sbrk_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d06      	ldr	r5, [pc, #24]	@ (8008b14 <_sbrk_r+0x1c>)
 8008afc:	2300      	movs	r3, #0
 8008afe:	4604      	mov	r4, r0
 8008b00:	4608      	mov	r0, r1
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	f7f9 fee8 	bl	80028d8 <_sbrk>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_sbrk_r+0x1a>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_sbrk_r+0x1a>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	2000fb64 	.word	0x2000fb64

08008b18 <_write_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	@ (8008b38 <_write_r+0x20>)
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	4608      	mov	r0, r1
 8008b20:	4611      	mov	r1, r2
 8008b22:	2200      	movs	r2, #0
 8008b24:	602a      	str	r2, [r5, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	f7f8 fa9c 	bl	8001064 <_write>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_write_r+0x1e>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_write_r+0x1e>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	2000fb64 	.word	0x2000fb64

08008b3c <__errno>:
 8008b3c:	4b01      	ldr	r3, [pc, #4]	@ (8008b44 <__errno+0x8>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000418 	.word	0x20000418

08008b48 <__libc_init_array>:
 8008b48:	b570      	push	{r4, r5, r6, lr}
 8008b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8008b80 <__libc_init_array+0x38>)
 8008b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8008b84 <__libc_init_array+0x3c>)
 8008b4e:	1b64      	subs	r4, r4, r5
 8008b50:	10a4      	asrs	r4, r4, #2
 8008b52:	2600      	movs	r6, #0
 8008b54:	42a6      	cmp	r6, r4
 8008b56:	d109      	bne.n	8008b6c <__libc_init_array+0x24>
 8008b58:	4d0b      	ldr	r5, [pc, #44]	@ (8008b88 <__libc_init_array+0x40>)
 8008b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8008b8c <__libc_init_array+0x44>)
 8008b5c:	f000 fc74 	bl	8009448 <_init>
 8008b60:	1b64      	subs	r4, r4, r5
 8008b62:	10a4      	asrs	r4, r4, #2
 8008b64:	2600      	movs	r6, #0
 8008b66:	42a6      	cmp	r6, r4
 8008b68:	d105      	bne.n	8008b76 <__libc_init_array+0x2e>
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b70:	4798      	blx	r3
 8008b72:	3601      	adds	r6, #1
 8008b74:	e7ee      	b.n	8008b54 <__libc_init_array+0xc>
 8008b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7a:	4798      	blx	r3
 8008b7c:	3601      	adds	r6, #1
 8008b7e:	e7f2      	b.n	8008b66 <__libc_init_array+0x1e>
 8008b80:	0801c164 	.word	0x0801c164
 8008b84:	0801c164 	.word	0x0801c164
 8008b88:	0801c164 	.word	0x0801c164
 8008b8c:	0801c168 	.word	0x0801c168

08008b90 <__retarget_lock_init_recursive>:
 8008b90:	4770      	bx	lr

08008b92 <__retarget_lock_acquire_recursive>:
 8008b92:	4770      	bx	lr

08008b94 <__retarget_lock_release_recursive>:
 8008b94:	4770      	bx	lr

08008b96 <memcpy>:
 8008b96:	440a      	add	r2, r1
 8008b98:	4291      	cmp	r1, r2
 8008b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b9e:	d100      	bne.n	8008ba2 <memcpy+0xc>
 8008ba0:	4770      	bx	lr
 8008ba2:	b510      	push	{r4, lr}
 8008ba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bac:	4291      	cmp	r1, r2
 8008bae:	d1f9      	bne.n	8008ba4 <memcpy+0xe>
 8008bb0:	bd10      	pop	{r4, pc}
	...

08008bb4 <_free_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	2900      	cmp	r1, #0
 8008bba:	d041      	beq.n	8008c40 <_free_r+0x8c>
 8008bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc0:	1f0c      	subs	r4, r1, #4
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	bfb8      	it	lt
 8008bc6:	18e4      	addlt	r4, r4, r3
 8008bc8:	f7ff fc90 	bl	80084ec <__malloc_lock>
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8008c44 <_free_r+0x90>)
 8008bce:	6813      	ldr	r3, [r2, #0]
 8008bd0:	b933      	cbnz	r3, 8008be0 <_free_r+0x2c>
 8008bd2:	6063      	str	r3, [r4, #4]
 8008bd4:	6014      	str	r4, [r2, #0]
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bdc:	f7ff bc8c 	b.w	80084f8 <__malloc_unlock>
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d908      	bls.n	8008bf6 <_free_r+0x42>
 8008be4:	6820      	ldr	r0, [r4, #0]
 8008be6:	1821      	adds	r1, r4, r0
 8008be8:	428b      	cmp	r3, r1
 8008bea:	bf01      	itttt	eq
 8008bec:	6819      	ldreq	r1, [r3, #0]
 8008bee:	685b      	ldreq	r3, [r3, #4]
 8008bf0:	1809      	addeq	r1, r1, r0
 8008bf2:	6021      	streq	r1, [r4, #0]
 8008bf4:	e7ed      	b.n	8008bd2 <_free_r+0x1e>
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	b10b      	cbz	r3, 8008c00 <_free_r+0x4c>
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	d9fa      	bls.n	8008bf6 <_free_r+0x42>
 8008c00:	6811      	ldr	r1, [r2, #0]
 8008c02:	1850      	adds	r0, r2, r1
 8008c04:	42a0      	cmp	r0, r4
 8008c06:	d10b      	bne.n	8008c20 <_free_r+0x6c>
 8008c08:	6820      	ldr	r0, [r4, #0]
 8008c0a:	4401      	add	r1, r0
 8008c0c:	1850      	adds	r0, r2, r1
 8008c0e:	4283      	cmp	r3, r0
 8008c10:	6011      	str	r1, [r2, #0]
 8008c12:	d1e0      	bne.n	8008bd6 <_free_r+0x22>
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	6053      	str	r3, [r2, #4]
 8008c1a:	4408      	add	r0, r1
 8008c1c:	6010      	str	r0, [r2, #0]
 8008c1e:	e7da      	b.n	8008bd6 <_free_r+0x22>
 8008c20:	d902      	bls.n	8008c28 <_free_r+0x74>
 8008c22:	230c      	movs	r3, #12
 8008c24:	602b      	str	r3, [r5, #0]
 8008c26:	e7d6      	b.n	8008bd6 <_free_r+0x22>
 8008c28:	6820      	ldr	r0, [r4, #0]
 8008c2a:	1821      	adds	r1, r4, r0
 8008c2c:	428b      	cmp	r3, r1
 8008c2e:	bf04      	itt	eq
 8008c30:	6819      	ldreq	r1, [r3, #0]
 8008c32:	685b      	ldreq	r3, [r3, #4]
 8008c34:	6063      	str	r3, [r4, #4]
 8008c36:	bf04      	itt	eq
 8008c38:	1809      	addeq	r1, r1, r0
 8008c3a:	6021      	streq	r1, [r4, #0]
 8008c3c:	6054      	str	r4, [r2, #4]
 8008c3e:	e7ca      	b.n	8008bd6 <_free_r+0x22>
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	2000fa24 	.word	0x2000fa24

08008c48 <__sfputc_r>:
 8008c48:	6893      	ldr	r3, [r2, #8]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	b410      	push	{r4}
 8008c50:	6093      	str	r3, [r2, #8]
 8008c52:	da08      	bge.n	8008c66 <__sfputc_r+0x1e>
 8008c54:	6994      	ldr	r4, [r2, #24]
 8008c56:	42a3      	cmp	r3, r4
 8008c58:	db01      	blt.n	8008c5e <__sfputc_r+0x16>
 8008c5a:	290a      	cmp	r1, #10
 8008c5c:	d103      	bne.n	8008c66 <__sfputc_r+0x1e>
 8008c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c62:	f7ff be78 	b.w	8008956 <__swbuf_r>
 8008c66:	6813      	ldr	r3, [r2, #0]
 8008c68:	1c58      	adds	r0, r3, #1
 8008c6a:	6010      	str	r0, [r2, #0]
 8008c6c:	7019      	strb	r1, [r3, #0]
 8008c6e:	4608      	mov	r0, r1
 8008c70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <__sfputs_r>:
 8008c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c78:	4606      	mov	r6, r0
 8008c7a:	460f      	mov	r7, r1
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	18d5      	adds	r5, r2, r3
 8008c80:	42ac      	cmp	r4, r5
 8008c82:	d101      	bne.n	8008c88 <__sfputs_r+0x12>
 8008c84:	2000      	movs	r0, #0
 8008c86:	e007      	b.n	8008c98 <__sfputs_r+0x22>
 8008c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c8c:	463a      	mov	r2, r7
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f7ff ffda 	bl	8008c48 <__sfputc_r>
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	d1f3      	bne.n	8008c80 <__sfputs_r+0xa>
 8008c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c9c <_vfiprintf_r>:
 8008c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca0:	460d      	mov	r5, r1
 8008ca2:	b09d      	sub	sp, #116	@ 0x74
 8008ca4:	4614      	mov	r4, r2
 8008ca6:	4698      	mov	r8, r3
 8008ca8:	4606      	mov	r6, r0
 8008caa:	b118      	cbz	r0, 8008cb4 <_vfiprintf_r+0x18>
 8008cac:	6a03      	ldr	r3, [r0, #32]
 8008cae:	b90b      	cbnz	r3, 8008cb4 <_vfiprintf_r+0x18>
 8008cb0:	f7ff fcb4 	bl	800861c <__sinit>
 8008cb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cb6:	07d9      	lsls	r1, r3, #31
 8008cb8:	d405      	bmi.n	8008cc6 <_vfiprintf_r+0x2a>
 8008cba:	89ab      	ldrh	r3, [r5, #12]
 8008cbc:	059a      	lsls	r2, r3, #22
 8008cbe:	d402      	bmi.n	8008cc6 <_vfiprintf_r+0x2a>
 8008cc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cc2:	f7ff ff66 	bl	8008b92 <__retarget_lock_acquire_recursive>
 8008cc6:	89ab      	ldrh	r3, [r5, #12]
 8008cc8:	071b      	lsls	r3, r3, #28
 8008cca:	d501      	bpl.n	8008cd0 <_vfiprintf_r+0x34>
 8008ccc:	692b      	ldr	r3, [r5, #16]
 8008cce:	b99b      	cbnz	r3, 8008cf8 <_vfiprintf_r+0x5c>
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f7ff fe7e 	bl	80089d4 <__swsetup_r>
 8008cd8:	b170      	cbz	r0, 8008cf8 <_vfiprintf_r+0x5c>
 8008cda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cdc:	07dc      	lsls	r4, r3, #31
 8008cde:	d504      	bpl.n	8008cea <_vfiprintf_r+0x4e>
 8008ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce4:	b01d      	add	sp, #116	@ 0x74
 8008ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cea:	89ab      	ldrh	r3, [r5, #12]
 8008cec:	0598      	lsls	r0, r3, #22
 8008cee:	d4f7      	bmi.n	8008ce0 <_vfiprintf_r+0x44>
 8008cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cf2:	f7ff ff4f 	bl	8008b94 <__retarget_lock_release_recursive>
 8008cf6:	e7f3      	b.n	8008ce0 <_vfiprintf_r+0x44>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cfc:	2320      	movs	r3, #32
 8008cfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d06:	2330      	movs	r3, #48	@ 0x30
 8008d08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008eb8 <_vfiprintf_r+0x21c>
 8008d0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d10:	f04f 0901 	mov.w	r9, #1
 8008d14:	4623      	mov	r3, r4
 8008d16:	469a      	mov	sl, r3
 8008d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d1c:	b10a      	cbz	r2, 8008d22 <_vfiprintf_r+0x86>
 8008d1e:	2a25      	cmp	r2, #37	@ 0x25
 8008d20:	d1f9      	bne.n	8008d16 <_vfiprintf_r+0x7a>
 8008d22:	ebba 0b04 	subs.w	fp, sl, r4
 8008d26:	d00b      	beq.n	8008d40 <_vfiprintf_r+0xa4>
 8008d28:	465b      	mov	r3, fp
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f7ff ffa1 	bl	8008c76 <__sfputs_r>
 8008d34:	3001      	adds	r0, #1
 8008d36:	f000 80a7 	beq.w	8008e88 <_vfiprintf_r+0x1ec>
 8008d3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d3c:	445a      	add	r2, fp
 8008d3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d40:	f89a 3000 	ldrb.w	r3, [sl]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 809f 	beq.w	8008e88 <_vfiprintf_r+0x1ec>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d54:	f10a 0a01 	add.w	sl, sl, #1
 8008d58:	9304      	str	r3, [sp, #16]
 8008d5a:	9307      	str	r3, [sp, #28]
 8008d5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d60:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d62:	4654      	mov	r4, sl
 8008d64:	2205      	movs	r2, #5
 8008d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d6a:	4853      	ldr	r0, [pc, #332]	@ (8008eb8 <_vfiprintf_r+0x21c>)
 8008d6c:	f7f7 fa40 	bl	80001f0 <memchr>
 8008d70:	9a04      	ldr	r2, [sp, #16]
 8008d72:	b9d8      	cbnz	r0, 8008dac <_vfiprintf_r+0x110>
 8008d74:	06d1      	lsls	r1, r2, #27
 8008d76:	bf44      	itt	mi
 8008d78:	2320      	movmi	r3, #32
 8008d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d7e:	0713      	lsls	r3, r2, #28
 8008d80:	bf44      	itt	mi
 8008d82:	232b      	movmi	r3, #43	@ 0x2b
 8008d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d88:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d8e:	d015      	beq.n	8008dbc <_vfiprintf_r+0x120>
 8008d90:	9a07      	ldr	r2, [sp, #28]
 8008d92:	4654      	mov	r4, sl
 8008d94:	2000      	movs	r0, #0
 8008d96:	f04f 0c0a 	mov.w	ip, #10
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008da0:	3b30      	subs	r3, #48	@ 0x30
 8008da2:	2b09      	cmp	r3, #9
 8008da4:	d94b      	bls.n	8008e3e <_vfiprintf_r+0x1a2>
 8008da6:	b1b0      	cbz	r0, 8008dd6 <_vfiprintf_r+0x13a>
 8008da8:	9207      	str	r2, [sp, #28]
 8008daa:	e014      	b.n	8008dd6 <_vfiprintf_r+0x13a>
 8008dac:	eba0 0308 	sub.w	r3, r0, r8
 8008db0:	fa09 f303 	lsl.w	r3, r9, r3
 8008db4:	4313      	orrs	r3, r2
 8008db6:	9304      	str	r3, [sp, #16]
 8008db8:	46a2      	mov	sl, r4
 8008dba:	e7d2      	b.n	8008d62 <_vfiprintf_r+0xc6>
 8008dbc:	9b03      	ldr	r3, [sp, #12]
 8008dbe:	1d19      	adds	r1, r3, #4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	9103      	str	r1, [sp, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	bfbb      	ittet	lt
 8008dc8:	425b      	neglt	r3, r3
 8008dca:	f042 0202 	orrlt.w	r2, r2, #2
 8008dce:	9307      	strge	r3, [sp, #28]
 8008dd0:	9307      	strlt	r3, [sp, #28]
 8008dd2:	bfb8      	it	lt
 8008dd4:	9204      	strlt	r2, [sp, #16]
 8008dd6:	7823      	ldrb	r3, [r4, #0]
 8008dd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dda:	d10a      	bne.n	8008df2 <_vfiprintf_r+0x156>
 8008ddc:	7863      	ldrb	r3, [r4, #1]
 8008dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8008de0:	d132      	bne.n	8008e48 <_vfiprintf_r+0x1ac>
 8008de2:	9b03      	ldr	r3, [sp, #12]
 8008de4:	1d1a      	adds	r2, r3, #4
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	9203      	str	r2, [sp, #12]
 8008dea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dee:	3402      	adds	r4, #2
 8008df0:	9305      	str	r3, [sp, #20]
 8008df2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ec8 <_vfiprintf_r+0x22c>
 8008df6:	7821      	ldrb	r1, [r4, #0]
 8008df8:	2203      	movs	r2, #3
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	f7f7 f9f8 	bl	80001f0 <memchr>
 8008e00:	b138      	cbz	r0, 8008e12 <_vfiprintf_r+0x176>
 8008e02:	9b04      	ldr	r3, [sp, #16]
 8008e04:	eba0 000a 	sub.w	r0, r0, sl
 8008e08:	2240      	movs	r2, #64	@ 0x40
 8008e0a:	4082      	lsls	r2, r0
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	3401      	adds	r4, #1
 8008e10:	9304      	str	r3, [sp, #16]
 8008e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e16:	4829      	ldr	r0, [pc, #164]	@ (8008ebc <_vfiprintf_r+0x220>)
 8008e18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e1c:	2206      	movs	r2, #6
 8008e1e:	f7f7 f9e7 	bl	80001f0 <memchr>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d03f      	beq.n	8008ea6 <_vfiprintf_r+0x20a>
 8008e26:	4b26      	ldr	r3, [pc, #152]	@ (8008ec0 <_vfiprintf_r+0x224>)
 8008e28:	bb1b      	cbnz	r3, 8008e72 <_vfiprintf_r+0x1d6>
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	3307      	adds	r3, #7
 8008e2e:	f023 0307 	bic.w	r3, r3, #7
 8008e32:	3308      	adds	r3, #8
 8008e34:	9303      	str	r3, [sp, #12]
 8008e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e38:	443b      	add	r3, r7
 8008e3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e3c:	e76a      	b.n	8008d14 <_vfiprintf_r+0x78>
 8008e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e42:	460c      	mov	r4, r1
 8008e44:	2001      	movs	r0, #1
 8008e46:	e7a8      	b.n	8008d9a <_vfiprintf_r+0xfe>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	3401      	adds	r4, #1
 8008e4c:	9305      	str	r3, [sp, #20]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	f04f 0c0a 	mov.w	ip, #10
 8008e54:	4620      	mov	r0, r4
 8008e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e5a:	3a30      	subs	r2, #48	@ 0x30
 8008e5c:	2a09      	cmp	r2, #9
 8008e5e:	d903      	bls.n	8008e68 <_vfiprintf_r+0x1cc>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d0c6      	beq.n	8008df2 <_vfiprintf_r+0x156>
 8008e64:	9105      	str	r1, [sp, #20]
 8008e66:	e7c4      	b.n	8008df2 <_vfiprintf_r+0x156>
 8008e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e7f0      	b.n	8008e54 <_vfiprintf_r+0x1b8>
 8008e72:	ab03      	add	r3, sp, #12
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	462a      	mov	r2, r5
 8008e78:	4b12      	ldr	r3, [pc, #72]	@ (8008ec4 <_vfiprintf_r+0x228>)
 8008e7a:	a904      	add	r1, sp, #16
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f3af 8000 	nop.w
 8008e82:	4607      	mov	r7, r0
 8008e84:	1c78      	adds	r0, r7, #1
 8008e86:	d1d6      	bne.n	8008e36 <_vfiprintf_r+0x19a>
 8008e88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e8a:	07d9      	lsls	r1, r3, #31
 8008e8c:	d405      	bmi.n	8008e9a <_vfiprintf_r+0x1fe>
 8008e8e:	89ab      	ldrh	r3, [r5, #12]
 8008e90:	059a      	lsls	r2, r3, #22
 8008e92:	d402      	bmi.n	8008e9a <_vfiprintf_r+0x1fe>
 8008e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e96:	f7ff fe7d 	bl	8008b94 <__retarget_lock_release_recursive>
 8008e9a:	89ab      	ldrh	r3, [r5, #12]
 8008e9c:	065b      	lsls	r3, r3, #25
 8008e9e:	f53f af1f 	bmi.w	8008ce0 <_vfiprintf_r+0x44>
 8008ea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ea4:	e71e      	b.n	8008ce4 <_vfiprintf_r+0x48>
 8008ea6:	ab03      	add	r3, sp, #12
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	462a      	mov	r2, r5
 8008eac:	4b05      	ldr	r3, [pc, #20]	@ (8008ec4 <_vfiprintf_r+0x228>)
 8008eae:	a904      	add	r1, sp, #16
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f000 f879 	bl	8008fa8 <_printf_i>
 8008eb6:	e7e4      	b.n	8008e82 <_vfiprintf_r+0x1e6>
 8008eb8:	0801c128 	.word	0x0801c128
 8008ebc:	0801c132 	.word	0x0801c132
 8008ec0:	00000000 	.word	0x00000000
 8008ec4:	08008c77 	.word	0x08008c77
 8008ec8:	0801c12e 	.word	0x0801c12e

08008ecc <_printf_common>:
 8008ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed0:	4616      	mov	r6, r2
 8008ed2:	4698      	mov	r8, r3
 8008ed4:	688a      	ldr	r2, [r1, #8]
 8008ed6:	690b      	ldr	r3, [r1, #16]
 8008ed8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008edc:	4293      	cmp	r3, r2
 8008ede:	bfb8      	it	lt
 8008ee0:	4613      	movlt	r3, r2
 8008ee2:	6033      	str	r3, [r6, #0]
 8008ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ee8:	4607      	mov	r7, r0
 8008eea:	460c      	mov	r4, r1
 8008eec:	b10a      	cbz	r2, 8008ef2 <_printf_common+0x26>
 8008eee:	3301      	adds	r3, #1
 8008ef0:	6033      	str	r3, [r6, #0]
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	0699      	lsls	r1, r3, #26
 8008ef6:	bf42      	ittt	mi
 8008ef8:	6833      	ldrmi	r3, [r6, #0]
 8008efa:	3302      	addmi	r3, #2
 8008efc:	6033      	strmi	r3, [r6, #0]
 8008efe:	6825      	ldr	r5, [r4, #0]
 8008f00:	f015 0506 	ands.w	r5, r5, #6
 8008f04:	d106      	bne.n	8008f14 <_printf_common+0x48>
 8008f06:	f104 0a19 	add.w	sl, r4, #25
 8008f0a:	68e3      	ldr	r3, [r4, #12]
 8008f0c:	6832      	ldr	r2, [r6, #0]
 8008f0e:	1a9b      	subs	r3, r3, r2
 8008f10:	42ab      	cmp	r3, r5
 8008f12:	dc26      	bgt.n	8008f62 <_printf_common+0x96>
 8008f14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	3b00      	subs	r3, #0
 8008f1c:	bf18      	it	ne
 8008f1e:	2301      	movne	r3, #1
 8008f20:	0692      	lsls	r2, r2, #26
 8008f22:	d42b      	bmi.n	8008f7c <_printf_common+0xb0>
 8008f24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f28:	4641      	mov	r1, r8
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	47c8      	blx	r9
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d01e      	beq.n	8008f70 <_printf_common+0xa4>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	6922      	ldr	r2, [r4, #16]
 8008f36:	f003 0306 	and.w	r3, r3, #6
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	bf02      	ittt	eq
 8008f3e:	68e5      	ldreq	r5, [r4, #12]
 8008f40:	6833      	ldreq	r3, [r6, #0]
 8008f42:	1aed      	subeq	r5, r5, r3
 8008f44:	68a3      	ldr	r3, [r4, #8]
 8008f46:	bf0c      	ite	eq
 8008f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f4c:	2500      	movne	r5, #0
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	bfc4      	itt	gt
 8008f52:	1a9b      	subgt	r3, r3, r2
 8008f54:	18ed      	addgt	r5, r5, r3
 8008f56:	2600      	movs	r6, #0
 8008f58:	341a      	adds	r4, #26
 8008f5a:	42b5      	cmp	r5, r6
 8008f5c:	d11a      	bne.n	8008f94 <_printf_common+0xc8>
 8008f5e:	2000      	movs	r0, #0
 8008f60:	e008      	b.n	8008f74 <_printf_common+0xa8>
 8008f62:	2301      	movs	r3, #1
 8008f64:	4652      	mov	r2, sl
 8008f66:	4641      	mov	r1, r8
 8008f68:	4638      	mov	r0, r7
 8008f6a:	47c8      	blx	r9
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d103      	bne.n	8008f78 <_printf_common+0xac>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f78:	3501      	adds	r5, #1
 8008f7a:	e7c6      	b.n	8008f0a <_printf_common+0x3e>
 8008f7c:	18e1      	adds	r1, r4, r3
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	2030      	movs	r0, #48	@ 0x30
 8008f82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f86:	4422      	add	r2, r4
 8008f88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f90:	3302      	adds	r3, #2
 8008f92:	e7c7      	b.n	8008f24 <_printf_common+0x58>
 8008f94:	2301      	movs	r3, #1
 8008f96:	4622      	mov	r2, r4
 8008f98:	4641      	mov	r1, r8
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	47c8      	blx	r9
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d0e6      	beq.n	8008f70 <_printf_common+0xa4>
 8008fa2:	3601      	adds	r6, #1
 8008fa4:	e7d9      	b.n	8008f5a <_printf_common+0x8e>
	...

08008fa8 <_printf_i>:
 8008fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fac:	7e0f      	ldrb	r7, [r1, #24]
 8008fae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fb0:	2f78      	cmp	r7, #120	@ 0x78
 8008fb2:	4691      	mov	r9, r2
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	469a      	mov	sl, r3
 8008fba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fbe:	d807      	bhi.n	8008fd0 <_printf_i+0x28>
 8008fc0:	2f62      	cmp	r7, #98	@ 0x62
 8008fc2:	d80a      	bhi.n	8008fda <_printf_i+0x32>
 8008fc4:	2f00      	cmp	r7, #0
 8008fc6:	f000 80d2 	beq.w	800916e <_printf_i+0x1c6>
 8008fca:	2f58      	cmp	r7, #88	@ 0x58
 8008fcc:	f000 80b9 	beq.w	8009142 <_printf_i+0x19a>
 8008fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fd8:	e03a      	b.n	8009050 <_printf_i+0xa8>
 8008fda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fde:	2b15      	cmp	r3, #21
 8008fe0:	d8f6      	bhi.n	8008fd0 <_printf_i+0x28>
 8008fe2:	a101      	add	r1, pc, #4	@ (adr r1, 8008fe8 <_printf_i+0x40>)
 8008fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fe8:	08009041 	.word	0x08009041
 8008fec:	08009055 	.word	0x08009055
 8008ff0:	08008fd1 	.word	0x08008fd1
 8008ff4:	08008fd1 	.word	0x08008fd1
 8008ff8:	08008fd1 	.word	0x08008fd1
 8008ffc:	08008fd1 	.word	0x08008fd1
 8009000:	08009055 	.word	0x08009055
 8009004:	08008fd1 	.word	0x08008fd1
 8009008:	08008fd1 	.word	0x08008fd1
 800900c:	08008fd1 	.word	0x08008fd1
 8009010:	08008fd1 	.word	0x08008fd1
 8009014:	08009155 	.word	0x08009155
 8009018:	0800907f 	.word	0x0800907f
 800901c:	0800910f 	.word	0x0800910f
 8009020:	08008fd1 	.word	0x08008fd1
 8009024:	08008fd1 	.word	0x08008fd1
 8009028:	08009177 	.word	0x08009177
 800902c:	08008fd1 	.word	0x08008fd1
 8009030:	0800907f 	.word	0x0800907f
 8009034:	08008fd1 	.word	0x08008fd1
 8009038:	08008fd1 	.word	0x08008fd1
 800903c:	08009117 	.word	0x08009117
 8009040:	6833      	ldr	r3, [r6, #0]
 8009042:	1d1a      	adds	r2, r3, #4
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6032      	str	r2, [r6, #0]
 8009048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800904c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009050:	2301      	movs	r3, #1
 8009052:	e09d      	b.n	8009190 <_printf_i+0x1e8>
 8009054:	6833      	ldr	r3, [r6, #0]
 8009056:	6820      	ldr	r0, [r4, #0]
 8009058:	1d19      	adds	r1, r3, #4
 800905a:	6031      	str	r1, [r6, #0]
 800905c:	0606      	lsls	r6, r0, #24
 800905e:	d501      	bpl.n	8009064 <_printf_i+0xbc>
 8009060:	681d      	ldr	r5, [r3, #0]
 8009062:	e003      	b.n	800906c <_printf_i+0xc4>
 8009064:	0645      	lsls	r5, r0, #25
 8009066:	d5fb      	bpl.n	8009060 <_printf_i+0xb8>
 8009068:	f9b3 5000 	ldrsh.w	r5, [r3]
 800906c:	2d00      	cmp	r5, #0
 800906e:	da03      	bge.n	8009078 <_printf_i+0xd0>
 8009070:	232d      	movs	r3, #45	@ 0x2d
 8009072:	426d      	negs	r5, r5
 8009074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009078:	4859      	ldr	r0, [pc, #356]	@ (80091e0 <_printf_i+0x238>)
 800907a:	230a      	movs	r3, #10
 800907c:	e011      	b.n	80090a2 <_printf_i+0xfa>
 800907e:	6821      	ldr	r1, [r4, #0]
 8009080:	6833      	ldr	r3, [r6, #0]
 8009082:	0608      	lsls	r0, r1, #24
 8009084:	f853 5b04 	ldr.w	r5, [r3], #4
 8009088:	d402      	bmi.n	8009090 <_printf_i+0xe8>
 800908a:	0649      	lsls	r1, r1, #25
 800908c:	bf48      	it	mi
 800908e:	b2ad      	uxthmi	r5, r5
 8009090:	2f6f      	cmp	r7, #111	@ 0x6f
 8009092:	4853      	ldr	r0, [pc, #332]	@ (80091e0 <_printf_i+0x238>)
 8009094:	6033      	str	r3, [r6, #0]
 8009096:	bf14      	ite	ne
 8009098:	230a      	movne	r3, #10
 800909a:	2308      	moveq	r3, #8
 800909c:	2100      	movs	r1, #0
 800909e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090a2:	6866      	ldr	r6, [r4, #4]
 80090a4:	60a6      	str	r6, [r4, #8]
 80090a6:	2e00      	cmp	r6, #0
 80090a8:	bfa2      	ittt	ge
 80090aa:	6821      	ldrge	r1, [r4, #0]
 80090ac:	f021 0104 	bicge.w	r1, r1, #4
 80090b0:	6021      	strge	r1, [r4, #0]
 80090b2:	b90d      	cbnz	r5, 80090b8 <_printf_i+0x110>
 80090b4:	2e00      	cmp	r6, #0
 80090b6:	d04b      	beq.n	8009150 <_printf_i+0x1a8>
 80090b8:	4616      	mov	r6, r2
 80090ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80090be:	fb03 5711 	mls	r7, r3, r1, r5
 80090c2:	5dc7      	ldrb	r7, [r0, r7]
 80090c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090c8:	462f      	mov	r7, r5
 80090ca:	42bb      	cmp	r3, r7
 80090cc:	460d      	mov	r5, r1
 80090ce:	d9f4      	bls.n	80090ba <_printf_i+0x112>
 80090d0:	2b08      	cmp	r3, #8
 80090d2:	d10b      	bne.n	80090ec <_printf_i+0x144>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	07df      	lsls	r7, r3, #31
 80090d8:	d508      	bpl.n	80090ec <_printf_i+0x144>
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	6861      	ldr	r1, [r4, #4]
 80090de:	4299      	cmp	r1, r3
 80090e0:	bfde      	ittt	le
 80090e2:	2330      	movle	r3, #48	@ 0x30
 80090e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090ec:	1b92      	subs	r2, r2, r6
 80090ee:	6122      	str	r2, [r4, #16]
 80090f0:	f8cd a000 	str.w	sl, [sp]
 80090f4:	464b      	mov	r3, r9
 80090f6:	aa03      	add	r2, sp, #12
 80090f8:	4621      	mov	r1, r4
 80090fa:	4640      	mov	r0, r8
 80090fc:	f7ff fee6 	bl	8008ecc <_printf_common>
 8009100:	3001      	adds	r0, #1
 8009102:	d14a      	bne.n	800919a <_printf_i+0x1f2>
 8009104:	f04f 30ff 	mov.w	r0, #4294967295
 8009108:	b004      	add	sp, #16
 800910a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	f043 0320 	orr.w	r3, r3, #32
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	4833      	ldr	r0, [pc, #204]	@ (80091e4 <_printf_i+0x23c>)
 8009118:	2778      	movs	r7, #120	@ 0x78
 800911a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	6831      	ldr	r1, [r6, #0]
 8009122:	061f      	lsls	r7, r3, #24
 8009124:	f851 5b04 	ldr.w	r5, [r1], #4
 8009128:	d402      	bmi.n	8009130 <_printf_i+0x188>
 800912a:	065f      	lsls	r7, r3, #25
 800912c:	bf48      	it	mi
 800912e:	b2ad      	uxthmi	r5, r5
 8009130:	6031      	str	r1, [r6, #0]
 8009132:	07d9      	lsls	r1, r3, #31
 8009134:	bf44      	itt	mi
 8009136:	f043 0320 	orrmi.w	r3, r3, #32
 800913a:	6023      	strmi	r3, [r4, #0]
 800913c:	b11d      	cbz	r5, 8009146 <_printf_i+0x19e>
 800913e:	2310      	movs	r3, #16
 8009140:	e7ac      	b.n	800909c <_printf_i+0xf4>
 8009142:	4827      	ldr	r0, [pc, #156]	@ (80091e0 <_printf_i+0x238>)
 8009144:	e7e9      	b.n	800911a <_printf_i+0x172>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	f023 0320 	bic.w	r3, r3, #32
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	e7f6      	b.n	800913e <_printf_i+0x196>
 8009150:	4616      	mov	r6, r2
 8009152:	e7bd      	b.n	80090d0 <_printf_i+0x128>
 8009154:	6833      	ldr	r3, [r6, #0]
 8009156:	6825      	ldr	r5, [r4, #0]
 8009158:	6961      	ldr	r1, [r4, #20]
 800915a:	1d18      	adds	r0, r3, #4
 800915c:	6030      	str	r0, [r6, #0]
 800915e:	062e      	lsls	r6, r5, #24
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	d501      	bpl.n	8009168 <_printf_i+0x1c0>
 8009164:	6019      	str	r1, [r3, #0]
 8009166:	e002      	b.n	800916e <_printf_i+0x1c6>
 8009168:	0668      	lsls	r0, r5, #25
 800916a:	d5fb      	bpl.n	8009164 <_printf_i+0x1bc>
 800916c:	8019      	strh	r1, [r3, #0]
 800916e:	2300      	movs	r3, #0
 8009170:	6123      	str	r3, [r4, #16]
 8009172:	4616      	mov	r6, r2
 8009174:	e7bc      	b.n	80090f0 <_printf_i+0x148>
 8009176:	6833      	ldr	r3, [r6, #0]
 8009178:	1d1a      	adds	r2, r3, #4
 800917a:	6032      	str	r2, [r6, #0]
 800917c:	681e      	ldr	r6, [r3, #0]
 800917e:	6862      	ldr	r2, [r4, #4]
 8009180:	2100      	movs	r1, #0
 8009182:	4630      	mov	r0, r6
 8009184:	f7f7 f834 	bl	80001f0 <memchr>
 8009188:	b108      	cbz	r0, 800918e <_printf_i+0x1e6>
 800918a:	1b80      	subs	r0, r0, r6
 800918c:	6060      	str	r0, [r4, #4]
 800918e:	6863      	ldr	r3, [r4, #4]
 8009190:	6123      	str	r3, [r4, #16]
 8009192:	2300      	movs	r3, #0
 8009194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009198:	e7aa      	b.n	80090f0 <_printf_i+0x148>
 800919a:	6923      	ldr	r3, [r4, #16]
 800919c:	4632      	mov	r2, r6
 800919e:	4649      	mov	r1, r9
 80091a0:	4640      	mov	r0, r8
 80091a2:	47d0      	blx	sl
 80091a4:	3001      	adds	r0, #1
 80091a6:	d0ad      	beq.n	8009104 <_printf_i+0x15c>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	079b      	lsls	r3, r3, #30
 80091ac:	d413      	bmi.n	80091d6 <_printf_i+0x22e>
 80091ae:	68e0      	ldr	r0, [r4, #12]
 80091b0:	9b03      	ldr	r3, [sp, #12]
 80091b2:	4298      	cmp	r0, r3
 80091b4:	bfb8      	it	lt
 80091b6:	4618      	movlt	r0, r3
 80091b8:	e7a6      	b.n	8009108 <_printf_i+0x160>
 80091ba:	2301      	movs	r3, #1
 80091bc:	4632      	mov	r2, r6
 80091be:	4649      	mov	r1, r9
 80091c0:	4640      	mov	r0, r8
 80091c2:	47d0      	blx	sl
 80091c4:	3001      	adds	r0, #1
 80091c6:	d09d      	beq.n	8009104 <_printf_i+0x15c>
 80091c8:	3501      	adds	r5, #1
 80091ca:	68e3      	ldr	r3, [r4, #12]
 80091cc:	9903      	ldr	r1, [sp, #12]
 80091ce:	1a5b      	subs	r3, r3, r1
 80091d0:	42ab      	cmp	r3, r5
 80091d2:	dcf2      	bgt.n	80091ba <_printf_i+0x212>
 80091d4:	e7eb      	b.n	80091ae <_printf_i+0x206>
 80091d6:	2500      	movs	r5, #0
 80091d8:	f104 0619 	add.w	r6, r4, #25
 80091dc:	e7f5      	b.n	80091ca <_printf_i+0x222>
 80091de:	bf00      	nop
 80091e0:	0801c139 	.word	0x0801c139
 80091e4:	0801c14a 	.word	0x0801c14a

080091e8 <__sflush_r>:
 80091e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f0:	0716      	lsls	r6, r2, #28
 80091f2:	4605      	mov	r5, r0
 80091f4:	460c      	mov	r4, r1
 80091f6:	d454      	bmi.n	80092a2 <__sflush_r+0xba>
 80091f8:	684b      	ldr	r3, [r1, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dc02      	bgt.n	8009204 <__sflush_r+0x1c>
 80091fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009200:	2b00      	cmp	r3, #0
 8009202:	dd48      	ble.n	8009296 <__sflush_r+0xae>
 8009204:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009206:	2e00      	cmp	r6, #0
 8009208:	d045      	beq.n	8009296 <__sflush_r+0xae>
 800920a:	2300      	movs	r3, #0
 800920c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009210:	682f      	ldr	r7, [r5, #0]
 8009212:	6a21      	ldr	r1, [r4, #32]
 8009214:	602b      	str	r3, [r5, #0]
 8009216:	d030      	beq.n	800927a <__sflush_r+0x92>
 8009218:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800921a:	89a3      	ldrh	r3, [r4, #12]
 800921c:	0759      	lsls	r1, r3, #29
 800921e:	d505      	bpl.n	800922c <__sflush_r+0x44>
 8009220:	6863      	ldr	r3, [r4, #4]
 8009222:	1ad2      	subs	r2, r2, r3
 8009224:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009226:	b10b      	cbz	r3, 800922c <__sflush_r+0x44>
 8009228:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800922a:	1ad2      	subs	r2, r2, r3
 800922c:	2300      	movs	r3, #0
 800922e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009230:	6a21      	ldr	r1, [r4, #32]
 8009232:	4628      	mov	r0, r5
 8009234:	47b0      	blx	r6
 8009236:	1c43      	adds	r3, r0, #1
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	d106      	bne.n	800924a <__sflush_r+0x62>
 800923c:	6829      	ldr	r1, [r5, #0]
 800923e:	291d      	cmp	r1, #29
 8009240:	d82b      	bhi.n	800929a <__sflush_r+0xb2>
 8009242:	4a2a      	ldr	r2, [pc, #168]	@ (80092ec <__sflush_r+0x104>)
 8009244:	410a      	asrs	r2, r1
 8009246:	07d6      	lsls	r6, r2, #31
 8009248:	d427      	bmi.n	800929a <__sflush_r+0xb2>
 800924a:	2200      	movs	r2, #0
 800924c:	6062      	str	r2, [r4, #4]
 800924e:	04d9      	lsls	r1, r3, #19
 8009250:	6922      	ldr	r2, [r4, #16]
 8009252:	6022      	str	r2, [r4, #0]
 8009254:	d504      	bpl.n	8009260 <__sflush_r+0x78>
 8009256:	1c42      	adds	r2, r0, #1
 8009258:	d101      	bne.n	800925e <__sflush_r+0x76>
 800925a:	682b      	ldr	r3, [r5, #0]
 800925c:	b903      	cbnz	r3, 8009260 <__sflush_r+0x78>
 800925e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009262:	602f      	str	r7, [r5, #0]
 8009264:	b1b9      	cbz	r1, 8009296 <__sflush_r+0xae>
 8009266:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800926a:	4299      	cmp	r1, r3
 800926c:	d002      	beq.n	8009274 <__sflush_r+0x8c>
 800926e:	4628      	mov	r0, r5
 8009270:	f7ff fca0 	bl	8008bb4 <_free_r>
 8009274:	2300      	movs	r3, #0
 8009276:	6363      	str	r3, [r4, #52]	@ 0x34
 8009278:	e00d      	b.n	8009296 <__sflush_r+0xae>
 800927a:	2301      	movs	r3, #1
 800927c:	4628      	mov	r0, r5
 800927e:	47b0      	blx	r6
 8009280:	4602      	mov	r2, r0
 8009282:	1c50      	adds	r0, r2, #1
 8009284:	d1c9      	bne.n	800921a <__sflush_r+0x32>
 8009286:	682b      	ldr	r3, [r5, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0c6      	beq.n	800921a <__sflush_r+0x32>
 800928c:	2b1d      	cmp	r3, #29
 800928e:	d001      	beq.n	8009294 <__sflush_r+0xac>
 8009290:	2b16      	cmp	r3, #22
 8009292:	d11e      	bne.n	80092d2 <__sflush_r+0xea>
 8009294:	602f      	str	r7, [r5, #0]
 8009296:	2000      	movs	r0, #0
 8009298:	e022      	b.n	80092e0 <__sflush_r+0xf8>
 800929a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800929e:	b21b      	sxth	r3, r3
 80092a0:	e01b      	b.n	80092da <__sflush_r+0xf2>
 80092a2:	690f      	ldr	r7, [r1, #16]
 80092a4:	2f00      	cmp	r7, #0
 80092a6:	d0f6      	beq.n	8009296 <__sflush_r+0xae>
 80092a8:	0793      	lsls	r3, r2, #30
 80092aa:	680e      	ldr	r6, [r1, #0]
 80092ac:	bf08      	it	eq
 80092ae:	694b      	ldreq	r3, [r1, #20]
 80092b0:	600f      	str	r7, [r1, #0]
 80092b2:	bf18      	it	ne
 80092b4:	2300      	movne	r3, #0
 80092b6:	eba6 0807 	sub.w	r8, r6, r7
 80092ba:	608b      	str	r3, [r1, #8]
 80092bc:	f1b8 0f00 	cmp.w	r8, #0
 80092c0:	dde9      	ble.n	8009296 <__sflush_r+0xae>
 80092c2:	6a21      	ldr	r1, [r4, #32]
 80092c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092c6:	4643      	mov	r3, r8
 80092c8:	463a      	mov	r2, r7
 80092ca:	4628      	mov	r0, r5
 80092cc:	47b0      	blx	r6
 80092ce:	2800      	cmp	r0, #0
 80092d0:	dc08      	bgt.n	80092e4 <__sflush_r+0xfc>
 80092d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092da:	81a3      	strh	r3, [r4, #12]
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e4:	4407      	add	r7, r0
 80092e6:	eba8 0800 	sub.w	r8, r8, r0
 80092ea:	e7e7      	b.n	80092bc <__sflush_r+0xd4>
 80092ec:	dfbffffe 	.word	0xdfbffffe

080092f0 <_fflush_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	690b      	ldr	r3, [r1, #16]
 80092f4:	4605      	mov	r5, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	b913      	cbnz	r3, 8009300 <_fflush_r+0x10>
 80092fa:	2500      	movs	r5, #0
 80092fc:	4628      	mov	r0, r5
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	b118      	cbz	r0, 800930a <_fflush_r+0x1a>
 8009302:	6a03      	ldr	r3, [r0, #32]
 8009304:	b90b      	cbnz	r3, 800930a <_fflush_r+0x1a>
 8009306:	f7ff f989 	bl	800861c <__sinit>
 800930a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0f3      	beq.n	80092fa <_fflush_r+0xa>
 8009312:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009314:	07d0      	lsls	r0, r2, #31
 8009316:	d404      	bmi.n	8009322 <_fflush_r+0x32>
 8009318:	0599      	lsls	r1, r3, #22
 800931a:	d402      	bmi.n	8009322 <_fflush_r+0x32>
 800931c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800931e:	f7ff fc38 	bl	8008b92 <__retarget_lock_acquire_recursive>
 8009322:	4628      	mov	r0, r5
 8009324:	4621      	mov	r1, r4
 8009326:	f7ff ff5f 	bl	80091e8 <__sflush_r>
 800932a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800932c:	07da      	lsls	r2, r3, #31
 800932e:	4605      	mov	r5, r0
 8009330:	d4e4      	bmi.n	80092fc <_fflush_r+0xc>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	059b      	lsls	r3, r3, #22
 8009336:	d4e1      	bmi.n	80092fc <_fflush_r+0xc>
 8009338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800933a:	f7ff fc2b 	bl	8008b94 <__retarget_lock_release_recursive>
 800933e:	e7dd      	b.n	80092fc <_fflush_r+0xc>

08009340 <__swhatbuf_r>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	460c      	mov	r4, r1
 8009344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009348:	2900      	cmp	r1, #0
 800934a:	b096      	sub	sp, #88	@ 0x58
 800934c:	4615      	mov	r5, r2
 800934e:	461e      	mov	r6, r3
 8009350:	da0d      	bge.n	800936e <__swhatbuf_r+0x2e>
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009358:	f04f 0100 	mov.w	r1, #0
 800935c:	bf14      	ite	ne
 800935e:	2340      	movne	r3, #64	@ 0x40
 8009360:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009364:	2000      	movs	r0, #0
 8009366:	6031      	str	r1, [r6, #0]
 8009368:	602b      	str	r3, [r5, #0]
 800936a:	b016      	add	sp, #88	@ 0x58
 800936c:	bd70      	pop	{r4, r5, r6, pc}
 800936e:	466a      	mov	r2, sp
 8009370:	f000 f848 	bl	8009404 <_fstat_r>
 8009374:	2800      	cmp	r0, #0
 8009376:	dbec      	blt.n	8009352 <__swhatbuf_r+0x12>
 8009378:	9901      	ldr	r1, [sp, #4]
 800937a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800937e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009382:	4259      	negs	r1, r3
 8009384:	4159      	adcs	r1, r3
 8009386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800938a:	e7eb      	b.n	8009364 <__swhatbuf_r+0x24>

0800938c <__smakebuf_r>:
 800938c:	898b      	ldrh	r3, [r1, #12]
 800938e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009390:	079d      	lsls	r5, r3, #30
 8009392:	4606      	mov	r6, r0
 8009394:	460c      	mov	r4, r1
 8009396:	d507      	bpl.n	80093a8 <__smakebuf_r+0x1c>
 8009398:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	6123      	str	r3, [r4, #16]
 80093a0:	2301      	movs	r3, #1
 80093a2:	6163      	str	r3, [r4, #20]
 80093a4:	b003      	add	sp, #12
 80093a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093a8:	ab01      	add	r3, sp, #4
 80093aa:	466a      	mov	r2, sp
 80093ac:	f7ff ffc8 	bl	8009340 <__swhatbuf_r>
 80093b0:	9f00      	ldr	r7, [sp, #0]
 80093b2:	4605      	mov	r5, r0
 80093b4:	4639      	mov	r1, r7
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7ff f818 	bl	80083ec <_malloc_r>
 80093bc:	b948      	cbnz	r0, 80093d2 <__smakebuf_r+0x46>
 80093be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c2:	059a      	lsls	r2, r3, #22
 80093c4:	d4ee      	bmi.n	80093a4 <__smakebuf_r+0x18>
 80093c6:	f023 0303 	bic.w	r3, r3, #3
 80093ca:	f043 0302 	orr.w	r3, r3, #2
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	e7e2      	b.n	8009398 <__smakebuf_r+0xc>
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	6020      	str	r0, [r4, #0]
 80093d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	9b01      	ldr	r3, [sp, #4]
 80093de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093e2:	b15b      	cbz	r3, 80093fc <__smakebuf_r+0x70>
 80093e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e8:	4630      	mov	r0, r6
 80093ea:	f000 f81d 	bl	8009428 <_isatty_r>
 80093ee:	b128      	cbz	r0, 80093fc <__smakebuf_r+0x70>
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	f023 0303 	bic.w	r3, r3, #3
 80093f6:	f043 0301 	orr.w	r3, r3, #1
 80093fa:	81a3      	strh	r3, [r4, #12]
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	431d      	orrs	r5, r3
 8009400:	81a5      	strh	r5, [r4, #12]
 8009402:	e7cf      	b.n	80093a4 <__smakebuf_r+0x18>

08009404 <_fstat_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d07      	ldr	r5, [pc, #28]	@ (8009424 <_fstat_r+0x20>)
 8009408:	2300      	movs	r3, #0
 800940a:	4604      	mov	r4, r0
 800940c:	4608      	mov	r0, r1
 800940e:	4611      	mov	r1, r2
 8009410:	602b      	str	r3, [r5, #0]
 8009412:	f7f7 fe6d 	bl	80010f0 <_fstat>
 8009416:	1c43      	adds	r3, r0, #1
 8009418:	d102      	bne.n	8009420 <_fstat_r+0x1c>
 800941a:	682b      	ldr	r3, [r5, #0]
 800941c:	b103      	cbz	r3, 8009420 <_fstat_r+0x1c>
 800941e:	6023      	str	r3, [r4, #0]
 8009420:	bd38      	pop	{r3, r4, r5, pc}
 8009422:	bf00      	nop
 8009424:	2000fb64 	.word	0x2000fb64

08009428 <_isatty_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4d06      	ldr	r5, [pc, #24]	@ (8009444 <_isatty_r+0x1c>)
 800942c:	2300      	movs	r3, #0
 800942e:	4604      	mov	r4, r0
 8009430:	4608      	mov	r0, r1
 8009432:	602b      	str	r3, [r5, #0]
 8009434:	f7f7 fe0a 	bl	800104c <_isatty>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d102      	bne.n	8009442 <_isatty_r+0x1a>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	b103      	cbz	r3, 8009442 <_isatty_r+0x1a>
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	2000fb64 	.word	0x2000fb64

08009448 <_init>:
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	bf00      	nop
 800944c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800944e:	bc08      	pop	{r3}
 8009450:	469e      	mov	lr, r3
 8009452:	4770      	bx	lr

08009454 <_fini>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	bf00      	nop
 8009458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945a:	bc08      	pop	{r3}
 800945c:	469e      	mov	lr, r3
 800945e:	4770      	bx	lr
