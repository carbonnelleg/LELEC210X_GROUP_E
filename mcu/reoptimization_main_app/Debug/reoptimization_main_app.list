
reoptimization_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097e8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012da0  08009998  08009998  0000a998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c738  0801c738  0001e468  2**0
                  CONTENTS
  4 .ARM          00000008  0801c738  0801c738  0001d738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c740  0801c740  0001e468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c740  0801c740  0001d740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c744  0801c744  0001d744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  0801c748  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f76c  20000468  0801cbb0  0001e468  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000fbd4  0801cbb0  0001ebd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e468  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e86c  00000000  00000000  0001e498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007217  00000000  00000000  0005cd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001b3b6  00000000  00000000  00063f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c0  00000000  00000000  0007f2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00005f1c  00000000  00000000  00080b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030dce  00000000  00000000  00086ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00049e62  00000000  00000000  000b7882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001238b3  00000000  00000000  001016e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  00224f97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051e0  00000000  00000000  00225054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0022a234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000715e  00000000  00000000  0022a29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000010f8  00000000  00000000  002313f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000468 	.word	0x20000468
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009980 	.word	0x08009980

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000046c 	.word	0x2000046c
 80001ec:	08009980 	.word	0x08009980

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000582:	4827      	ldr	r0, [pc, #156]	@ (8000620 <MX_ADC1_Init+0xa0>)
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <MX_ADC1_Init+0xa4>)
 8000586:	6002      	str	r2, [r0, #0]
{
 8000588:	b08a      	sub	sp, #40	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800058a:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
  ADC_MultiModeTypeDef multimode = {0};
 800058e:	2300      	movs	r3, #0
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000590:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000592:	6041      	str	r1, [r0, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000594:	2404      	movs	r4, #4
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000596:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 800059a:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
  ADC_MultiModeTypeDef multimode = {0};
 800059e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80005a6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80005aa:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b2:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005b6:	e9c0 1c0a 	strd	r1, ip, [r0, #40]	@ 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	9309      	str	r3, [sp, #36]	@ 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005bc:	8303      	strh	r3, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 80005be:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c0:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c4:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c8:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ca:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ce:	f002 fcf5 	bl	8002fbc <HAL_ADC_Init>
 80005d2:	b9d0      	cbnz	r0, 800060a <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d4:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005d6:	4812      	ldr	r0, [pc, #72]	@ (8000620 <MX_ADC1_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d8:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005da:	a901      	add	r1, sp, #4
 80005dc:	f003 fcb0 	bl	8003f40 <HAL_ADCEx_MultiModeConfigChannel>
 80005e0:	b9d0      	cbnz	r0, 8000618 <MX_ADC1_Init+0x98>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005e2:	f04f 0e00 	mov.w	lr, #0
  sConfig.Channel = ADC_CHANNEL_5;
 80005e6:	4a10      	ldr	r2, [pc, #64]	@ (8000628 <MX_ADC1_Init+0xa8>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e8:	480d      	ldr	r0, [pc, #52]	@ (8000620 <MX_ADC1_Init+0xa0>)
  sConfig.Channel = ADC_CHANNEL_5;
 80005ea:	9204      	str	r2, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ec:	2406      	movs	r4, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ee:	237f      	movs	r3, #127	@ 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f0:	f04f 0c04 	mov.w	ip, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	a904      	add	r1, sp, #16
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005f6:	e9cd 4e05 	strd	r4, lr, [sp, #20]
  sConfig.Offset = 0;
 80005fa:	e9cd ce08 	strd	ip, lr, [sp, #32]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005fe:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	f002 fec2 	bl	8003388 <HAL_ADC_ConfigChannel>
 8000604:	b920      	cbnz	r0, 8000610 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000606:	b00a      	add	sp, #40	@ 0x28
 8000608:	bd10      	pop	{r4, pc}
    Error_Handler();
 800060a:	f000 fc21 	bl	8000e50 <Error_Handler>
 800060e:	e7e1      	b.n	80005d4 <MX_ADC1_Init+0x54>
    Error_Handler();
 8000610:	f000 fc1e 	bl	8000e50 <Error_Handler>
}
 8000614:	b00a      	add	sp, #40	@ 0x28
 8000616:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000618:	f000 fc1a 	bl	8000e50 <Error_Handler>
 800061c:	e7e1      	b.n	80005e2 <MX_ADC1_Init+0x62>
 800061e:	bf00      	nop
 8000620:	20000538 	.word	0x20000538
 8000624:	50040000 	.word	0x50040000
 8000628:	14f00020 	.word	0x14f00020

0800062c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800062c:	b510      	push	{r4, lr}

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800062e:	481f      	ldr	r0, [pc, #124]	@ (80006ac <MX_ADC2_Init+0x80>)
 8000630:	491f      	ldr	r1, [pc, #124]	@ (80006b0 <MX_ADC2_Init+0x84>)
 8000632:	6001      	str	r1, [r0, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000634:	2300      	movs	r3, #0
{
 8000636:	b086      	sub	sp, #24
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
  hadc2.Init.Resolution = ADC_RESOLUTION_6B;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc2.Init.LowPowerAutoWait = ENABLE;
 8000638:	2201      	movs	r2, #1
  hadc2.Init.Resolution = ADC_RESOLUTION_6B;
 800063a:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 800063e:	f04f 0c18 	mov.w	ip, #24
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	2104      	movs	r1, #4
  ADC_ChannelConfTypeDef sConfig = {0};
 8000644:	e9cd 3300 	strd	r3, r3, [sp]
 8000648:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800064c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  hadc2.Init.Resolution = ADC_RESOLUTION_6B;
 8000650:	e9c0 4c01 	strd	r4, ip, [r0, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000654:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065c:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = ENABLE;
 800065e:	8302      	strh	r2, [r0, #24]
  hadc2.Init.NbrOfConversion = 1;
 8000660:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000662:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000666:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066a:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800066c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000670:	f002 fca4 	bl	8002fbc <HAL_ADC_Init>
 8000674:	b990      	cbnz	r0, 800069c <MX_ADC2_Init+0x70>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000676:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_ADC2_Init+0x88>)
 8000678:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800067a:	f04f 0e00 	mov.w	lr, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067e:	2406      	movs	r4, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000680:	227f      	movs	r2, #127	@ 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000682:	2304      	movs	r3, #4
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000684:	4809      	ldr	r0, [pc, #36]	@ (80006ac <MX_ADC2_Init+0x80>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000686:	9203      	str	r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000688:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068a:	e9cd 4e01 	strd	r4, lr, [sp, #4]
  sConfig.Offset = 0;
 800068e:	e9cd 3e04 	strd	r3, lr, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000692:	f002 fe79 	bl	8003388 <HAL_ADC_ConfigChannel>
 8000696:	b920      	cbnz	r0, 80006a2 <MX_ADC2_Init+0x76>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000698:	b006      	add	sp, #24
 800069a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800069c:	f000 fbd8 	bl	8000e50 <Error_Handler>
 80006a0:	e7e9      	b.n	8000676 <MX_ADC2_Init+0x4a>
    Error_Handler();
 80006a2:	f000 fbd5 	bl	8000e50 <Error_Handler>
}
 80006a6:	b006      	add	sp, #24
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	200004d0 	.word	0x200004d0
 80006b0:	50040100 	.word	0x50040100
 80006b4:	3ef08000 	.word	0x3ef08000

080006b8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	4604      	mov	r4, r0
 80006bc:	b0ac      	sub	sp, #176	@ 0xb0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	228c      	movs	r2, #140	@ 0x8c
 80006c2:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80006c8:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80006cc:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ce:	f008 fc73 	bl	8008fb8 <memset>
  if(adcHandle->Instance==ADC1)
 80006d2:	6823      	ldr	r3, [r4, #0]
 80006d4:	4a45      	ldr	r2, [pc, #276]	@ (80007ec <HAL_ADC_MspInit+0x134>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d004      	beq.n	80006e4 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80006da:	4845      	ldr	r0, [pc, #276]	@ (80007f0 <HAL_ADC_MspInit+0x138>)
 80006dc:	4283      	cmp	r3, r0
 80006de:	d04b      	beq.n	8000778 <HAL_ADC_MspInit+0xc0>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80006e0:	b02c      	add	sp, #176	@ 0xb0
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80006e8:	f04f 5640 	mov.w	r6, #805306368	@ 0x30000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ec:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006ee:	9109      	str	r1, [sp, #36]	@ 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80006f0:	9628      	str	r6, [sp, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f2:	f005 f8ed 	bl	80058d0 <HAL_RCCEx_PeriphCLKConfig>
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d16e      	bne.n	80007d8 <HAL_ADC_MspInit+0x120>
    HAL_RCC_ADC_CLK_ENABLED++;
 80006fa:	4a3e      	ldr	r2, [pc, #248]	@ (80007f4 <HAL_ADC_MspInit+0x13c>)
 80006fc:	6813      	ldr	r3, [r2, #0]
 80006fe:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000700:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 8000702:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000704:	d109      	bne.n	800071a <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000706:	483c      	ldr	r0, [pc, #240]	@ (80007f8 <HAL_ADC_MspInit+0x140>)
 8000708:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 800070a:	f445 5100 	orr.w	r1, r5, #8192	@ 0x2000
 800070e:	64c1      	str	r1, [r0, #76]	@ 0x4c
 8000710:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
 8000712:	f406 5200 	and.w	r2, r6, #8192	@ 0x2000
 8000716:	9200      	str	r2, [sp, #0]
 8000718:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b37      	ldr	r3, [pc, #220]	@ (80007f8 <HAL_ADC_MspInit+0x140>)
 800071c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800071e:	f040 0501 	orr.w	r5, r0, #1
 8000722:	64dd      	str	r5, [r3, #76]	@ 0x4c
 8000724:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 8000726:	4d35      	ldr	r5, [pc, #212]	@ (80007fc <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	f006 0201 	and.w	r2, r6, #1
 800072c:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000730:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	a904      	add	r1, sp, #16
 8000734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000738:	2303      	movs	r3, #3
 800073a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f004 f8c3 	bl	80048cc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000746:	492e      	ldr	r1, [pc, #184]	@ (8000800 <HAL_ADC_MspInit+0x148>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000748:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800074c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000750:	e9c5 1600 	strd	r1, r6, [r5]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000754:	e9c5 0205 	strd	r0, r2, [r5, #20]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000758:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800075a:	2120      	movs	r1, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800075c:	4628      	mov	r0, r5
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800075e:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000762:	e9c5 1607 	strd	r1, r6, [r5, #28]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000766:	612b      	str	r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000768:	f003 ffb0 	bl	80046cc <HAL_DMA_Init>
 800076c:	2800      	cmp	r0, #0
 800076e:	d136      	bne.n	80007de <HAL_ADC_MspInit+0x126>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000770:	6525      	str	r5, [r4, #80]	@ 0x50
 8000772:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8000774:	b02c      	add	sp, #176	@ 0xb0
 8000776:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000778:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800077c:	f04f 5540 	mov.w	r5, #805306368	@ 0x30000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000780:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000782:	9109      	str	r1, [sp, #36]	@ 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000784:	9528      	str	r5, [sp, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000786:	f005 f8a3 	bl	80058d0 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	bb58      	cbnz	r0, 80007e4 <HAL_ADC_MspInit+0x12c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800078c:	4e19      	ldr	r6, [pc, #100]	@ (80007f4 <HAL_ADC_MspInit+0x13c>)
 800078e:	6834      	ldr	r4, [r6, #0]
 8000790:	3401      	adds	r4, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000792:	2c01      	cmp	r4, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 8000794:	6034      	str	r4, [r6, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000796:	d109      	bne.n	80007ac <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <HAL_ADC_MspInit+0x140>)
 800079a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800079c:	f442 5000 	orr.w	r0, r2, #8192	@ 0x2000
 80007a0:	64d8      	str	r0, [r3, #76]	@ 0x4c
 80007a2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80007a4:	f401 5500 	and.w	r5, r1, #8192	@ 0x2000
 80007a8:	9502      	str	r5, [sp, #8]
 80007aa:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	4e12      	ldr	r6, [pc, #72]	@ (80007f8 <HAL_ADC_MspInit+0x140>)
 80007ae:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 80007b0:	f043 0202 	orr.w	r2, r3, #2
 80007b4:	64f2      	str	r2, [r6, #76]	@ 0x4c
 80007b6:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b8:	2401      	movs	r4, #1
 80007ba:	2503      	movs	r5, #3
 80007bc:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	f000 0402 	and.w	r4, r0, #2
 80007c4:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	480f      	ldr	r0, [pc, #60]	@ (8000804 <HAL_ADC_MspInit+0x14c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2500      	movs	r5, #0
 80007ce:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f004 f87c 	bl	80048cc <HAL_GPIO_Init>
}
 80007d4:	b02c      	add	sp, #176	@ 0xb0
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80007d8:	f000 fb3a 	bl	8000e50 <Error_Handler>
 80007dc:	e78d      	b.n	80006fa <HAL_ADC_MspInit+0x42>
      Error_Handler();
 80007de:	f000 fb37 	bl	8000e50 <Error_Handler>
 80007e2:	e7c5      	b.n	8000770 <HAL_ADC_MspInit+0xb8>
      Error_Handler();
 80007e4:	f000 fb34 	bl	8000e50 <Error_Handler>
 80007e8:	e7d0      	b.n	800078c <HAL_ADC_MspInit+0xd4>
 80007ea:	bf00      	nop
 80007ec:	50040000 	.word	0x50040000
 80007f0:	50040100 	.word	0x50040100
 80007f4:	20000484 	.word	0x20000484
 80007f8:	40021000 	.word	0x40021000
 80007fc:	20000488 	.word	0x20000488
 8000800:	40020008 	.word	0x40020008
 8000804:	48000400 	.word	0x48000400

08000808 <send_spectrogram>:
	}
}
#endif

// Function to create and send the packet
static void send_spectrogram() {
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	4b50      	ldr	r3, [pc, #320]	@ (8000950 <send_spectrogram+0x148>)
 800080e:	f5ad 6d1b 	sub.w	sp, sp, #2480	@ 0x9b0
    uint8_t *ptr = packet + PACKET_HEADER_LENGTH;
 8000812:	aa03      	add	r2, sp, #12
 8000814:	afcb      	add	r7, sp, #812	@ 0x32c
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 8000816:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800081a:	f9b3 a000 	ldrsh.w	sl, [r3]
 800081e:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8000822:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8000826:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 800082a:	f9b3 e00e 	ldrsh.w	lr, [r3, #14]
 800082e:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8000832:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
 8000836:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 800083a:	f9b3 801e 	ldrsh.w	r8, [r3, #30]
 800083e:	b2b6      	uxth	r6, r6
 8000840:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8000844:	ba36      	rev	r6, r6
 8000846:	fa1f fa85 	uxth.w	sl, r5
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 800084a:	f842 6b28 	str.w	r6, [r2], #40
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 800084e:	ea4a 4509 	orr.w	r5, sl, r9, lsl #16
 8000852:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8000856:	f9b3 a00c 	ldrsh.w	sl, [r3, #12]
 800085a:	fa1f fe8e 	uxth.w	lr, lr
 800085e:	b2a4      	uxth	r4, r4
 8000860:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000864:	ea4e 460a 	orr.w	r6, lr, sl, lsl #16
 8000868:	fa96 fa86 	rev.w	sl, r6
 800086c:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8000870:	f9b3 e010 	ldrsh.w	lr, [r3, #16]
 8000874:	b280      	uxth	r0, r0
 8000876:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800087a:	f9b3 6018 	ldrsh.w	r6, [r3, #24]
 800087e:	fa1f fc8c 	uxth.w	ip, ip
 8000882:	b289      	uxth	r1, r1
 8000884:	fa95 f985 	rev.w	r9, r5
 8000888:	ea4c 450e 	orr.w	r5, ip, lr, lsl #16
 800088c:	ea41 4c06 	orr.w	ip, r1, r6, lsl #16
 8000890:	f9b3 e026 	ldrsh.w	lr, [r3, #38]	@ 0x26
 8000894:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 8000898:	f842 9c24 	str.w	r9, [r2, #-36]
 800089c:	fa9c f68c 	rev.w	r6, ip
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 80008a0:	f9b3 c022 	ldrsh.w	ip, [r3, #34]	@ 0x22
 80008a4:	f9b3 9020 	ldrsh.w	r9, [r3, #32]
 80008a8:	fa1f f888 	uxth.w	r8, r8
 80008ac:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
 80008b0:	fa1f f18c 	uxth.w	r1, ip
 80008b4:	fa1f fc8e 	uxth.w	ip, lr
 80008b8:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	@ 0x24
 80008bc:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80008c0:	ea4c 490e 	orr.w	r9, ip, lr, lsl #16
 80008c4:	ba24      	rev	r4, r4
            *ptr++ = pair & 0xFF;                // Second value low byte
 80008c6:	ba2d      	rev	r5, r5
 80008c8:	ba00      	rev	r0, r0
 80008ca:	fa98 f888 	rev.w	r8, r8
 80008ce:	ba09      	rev	r1, r1
 80008d0:	fa99 fc89 	rev.w	ip, r9
    for (size_t i=0; i<MEL_NUM_VEC; i++) {
 80008d4:	42ba      	cmp	r2, r7
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 80008d6:	e942 4a08 	strd	r4, sl, [r2, #-32]
 80008da:	e942 5006 	strd	r5, r0, [r2, #-24]
 80008de:	e942 6804 	strd	r6, r8, [r2, #-16]
 80008e2:	e942 1c02 	strd	r1, ip, [r2, #-8]
    for (size_t i=0; i<MEL_NUM_VEC; i++) {
 80008e6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80008ea:	d194      	bne.n	8000816 <send_spectrogram+0xe>
	make_packet(packet, PAYLOAD_LENGTH, SENDER_ID, *packet_cnt);
 80008ec:	4f19      	ldr	r7, [pc, #100]	@ (8000954 <send_spectrogram+0x14c>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80008f6:	a801      	add	r0, sp, #4
 80008f8:	f000 fc22 	bl	8001140 <make_packet>
	*packet_cnt += 1;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	603b      	str	r3, [r7, #0]
	if (*packet_cnt == 0) {
 8000902:	b1fb      	cbz	r3, 8000944 <send_spectrogram+0x13c>
	// Encode the packet
	encode_packet(packet, &packet_cnt);

	// Wakup, send, and standby of the S2LP
	#if (NO_S2LP_SLEEP == 0)
		S2LP_WakeUp();
 8000904:	f001 fcfc 	bl	8002300 <S2LP_WakeUp>
	#endif
	S2LP_Send(packet, PACKET_LENGTH);
 8000908:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800090c:	a801      	add	r0, sp, #4
 800090e:	f000 fdc9 	bl	80014a4 <S2LP_Send>
	// Wait for the transmission to finish
	#if (NO_S2LP_SLEEP == 0)
		S2LP_Standby();
 8000912:	f001 fccd 	bl	80022b0 <S2LP_Standby>
		hex_encode(hex_encoded_packet, packet, PACKET_LENGTH);
 8000916:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800091a:	a901      	add	r1, sp, #4
 800091c:	a8cf      	add	r0, sp, #828	@ 0x33c
 800091e:	f002 fa09 	bl	8002d34 <hex_encode>
			DEBUG_PRINT_FAST("DF:HEX:", 7);
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <send_spectrogram+0x150>)
 8000924:	2107      	movs	r1, #7
 8000926:	f002 fa97 	bl	8002e58 <fast_debug_print>
			DEBUG_PRINT_FAST(hex_encoded_packet, 2*PACKET_LENGTH);
 800092a:	a8cf      	add	r0, sp, #828	@ 0x33c
 800092c:	f44f 61ce 	mov.w	r1, #1648	@ 0x670
 8000930:	f002 fa92 	bl	8002e58 <fast_debug_print>
			DEBUG_PRINT_FAST("\r\n", 2);
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <send_spectrogram+0x154>)
 8000936:	2102      	movs	r1, #2
 8000938:	f002 fa8e 	bl	8002e58 <fast_debug_print>
	#endif

	// Print the encoded packet
	print_encoded_packet(packet);
}
 800093c:	f50d 6d1b 	add.w	sp, sp, #2480	@ 0x9b0
 8000940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		DEBUG_PRINT("Packet counter overflow.\r\n");
 8000944:	4806      	ldr	r0, [pc, #24]	@ (8000960 <send_spectrogram+0x158>)
 8000946:	f008 f9a3 	bl	8008c90 <puts>
		Error_Handler();
 800094a:	f000 fa81 	bl	8000e50 <Error_Handler>
 800094e:	e7d9      	b.n	8000904 <send_spectrogram+0xfc>
 8000950:	200005a8 	.word	0x200005a8
 8000954:	200005a0 	.word	0x200005a0
 8000958:	08009c68 	.word	0x08009c68
 800095c:	0800a884 	.word	0x0800a884
 8000960:	08009c4c 	.word	0x08009c4c

08000964 <StartADCAcq>:
int StartADCAcq() {
 8000964:	b538      	push	{r3, r4, r5, lr}
	buffer_ready = 0;
 8000966:	4808      	ldr	r0, [pc, #32]	@ (8000988 <StartADCAcq+0x24>)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 8000968:	4d08      	ldr	r5, [pc, #32]	@ (800098c <StartADCAcq+0x28>)
	packet_cnt = 0;
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <StartADCAcq+0x2c>)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 800096c:	4909      	ldr	r1, [pc, #36]	@ (8000994 <StartADCAcq+0x30>)
	buffer_ready = 0;
 800096e:	2400      	movs	r4, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 8000970:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
	buffer_ready = 0;
 8000974:	7004      	strb	r4, [r0, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 8000976:	4628      	mov	r0, r5
	packet_cnt = 0;
 8000978:	601c      	str	r4, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 800097a:	f003 f9b9 	bl	8003cf0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 800097e:	4628      	mov	r0, r5
 8000980:	f003 f914 	bl	8003bac <HAL_ADC_Start_IT>
}
 8000984:	4620      	mov	r0, r4
 8000986:	bd38      	pop	{r3, r4, r5, pc}
 8000988:	200005a4 	.word	0x200005a4
 800098c:	20000538 	.word	0x20000538
 8000990:	200005a0 	.word	0x200005a0
 8000994:	200058c8 	.word	0x200058c8

08000998 <ProcessADCData>:
	
    return 1; // Default to 1 (threshold reached)
}

// Function to process the ADC data
void ProcessADCData() {
 8000998:	b510      	push	{r4, lr}
	// Check if the buffer is ready
	if (buffer_ready) {
 800099a:	4c12      	ldr	r4, [pc, #72]	@ (80009e4 <ProcessADCData+0x4c>)
 800099c:	7823      	ldrb	r3, [r4, #0]
 800099e:	b903      	cbnz	r3, 80009a2 <ProcessADCData+0xa>
		send_spectrogram();

		// Reset the buffer ready flag (Avoid Race Condition)
		buffer_ready = 0;
	}
}
 80009a0:	bd10      	pop	{r4, pc}
		Full_spectrogram_compute((q15_t*) ADCWorkingBuf, MELWorkingBuf);
 80009a2:	4911      	ldr	r1, [pc, #68]	@ (80009e8 <ProcessADCData+0x50>)
 80009a4:	4811      	ldr	r0, [pc, #68]	@ (80009ec <ProcessADCData+0x54>)
 80009a6:	f001 fee5 	bl	8002774 <Full_spectrogram_compute>
			uint8_t capa_lvl = analogRead_CapaLvl();
 80009aa:	f000 fa23 	bl	8000df4 <analogRead_CapaLvl>
			if (capa_lvl == 0) {
 80009ae:	b1a0      	cbz	r0, 80009da <ProcessADCData+0x42>
			} else if (capa_lvl == 1) {
 80009b0:	2801      	cmp	r0, #1
 80009b2:	d00a      	beq.n	80009ca <ProcessADCData+0x32>
				DEBUG_PRINT("Full power mode, sending at PA_LEVEL\r\n");
 80009b4:	480e      	ldr	r0, [pc, #56]	@ (80009f0 <ProcessADCData+0x58>)
 80009b6:	f008 f96b 	bl	8008c90 <puts>
				S2LP_SetPALeveldBm(PA_LEVEL);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f001 fc4e 	bl	800225c <S2LP_SetPALeveldBm>
		send_spectrogram();
 80009c0:	f7ff ff22 	bl	8000808 <send_spectrogram>
		buffer_ready = 0;
 80009c4:	2000      	movs	r0, #0
 80009c6:	7020      	strb	r0, [r4, #0]
}
 80009c8:	bd10      	pop	{r4, pc}
				DEBUG_PRINT("Medium power mode, sending at -10dBm\r\n");
 80009ca:	480a      	ldr	r0, [pc, #40]	@ (80009f4 <ProcessADCData+0x5c>)
 80009cc:	f008 f960 	bl	8008c90 <puts>
				S2LP_SetPALeveldBm(-10);
 80009d0:	f06f 0009 	mvn.w	r0, #9
 80009d4:	f001 fc42 	bl	800225c <S2LP_SetPALeveldBm>
 80009d8:	e7f2      	b.n	80009c0 <ProcessADCData+0x28>
}
 80009da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				DEBUG_PRINT("Low power mode, skipping\r\n");
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <ProcessADCData+0x60>)
 80009e0:	f008 b956 	b.w	8008c90 <puts>
 80009e4:	200005a4 	.word	0x200005a4
 80009e8:	200005a8 	.word	0x200005a8
 80009ec:	200008c8 	.word	0x200008c8
 80009f0:	08009cb4 	.word	0x08009cb4
 80009f4:	08009c8c 	.word	0x08009c8c
 80009f8:	08009c70 	.word	0x08009c70

080009fc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80009fc:	b510      	push	{r4, lr}
    if (buffer_ready) return; // Prevent overwrite if still processing
 80009fe:	4c06      	ldr	r4, [pc, #24]	@ (8000a18 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000a00:	7823      	ldrb	r3, [r4, #0]
 8000a02:	b93b      	cbnz	r3, 8000a14 <HAL_ADC_ConvHalfCpltCallback+0x18>

    memcpy(ADCWorkingBuf, &ADCDoubleBuf[0], ADC_BUF_SIZE * sizeof(uint16_t));
 8000a04:	4905      	ldr	r1, [pc, #20]	@ (8000a1c <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000a06:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000a08:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000a0c:	f008 fb5f 	bl	80090ce <memcpy>
    buffer_ready = 1;
 8000a10:	2001      	movs	r0, #1
 8000a12:	7020      	strb	r0, [r4, #0]
    current_proc_buf = 0;
}
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	200005a4 	.word	0x200005a4
 8000a1c:	200058c8 	.word	0x200058c8
 8000a20:	200008c8 	.word	0x200008c8

08000a24 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000a24:	b510      	push	{r4, lr}
    if (buffer_ready) return;
 8000a26:	4c06      	ldr	r4, [pc, #24]	@ (8000a40 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000a28:	7823      	ldrb	r3, [r4, #0]
 8000a2a:	b93b      	cbnz	r3, 8000a3c <HAL_ADC_ConvCpltCallback+0x18>

    memcpy(ADCWorkingBuf, &ADCDoubleBuf[ADC_BUF_SIZE], ADC_BUF_SIZE * sizeof(uint16_t));
 8000a2c:	4905      	ldr	r1, [pc, #20]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x20>)
 8000a2e:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x24>)
 8000a30:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000a34:	f008 fb4b 	bl	80090ce <memcpy>
    buffer_ready = 1;
 8000a38:	2001      	movs	r0, #1
 8000a3a:	7020      	strb	r0, [r4, #0]
    current_proc_buf = 1;
 8000a3c:	bd10      	pop	{r4, pc}
 8000a3e:	bf00      	nop
 8000a40:	200005a4 	.word	0x200005a4
 8000a44:	2000a8c8 	.word	0x2000a8c8
 8000a48:	200008c8 	.word	0x200008c8
 8000a4c:	00000000 	.word	0x00000000

08000a50 <MX_AES_Init>:
/* AES init function */
void MX_AES_Init(void)
{

  /* USER CODE BEGIN AES_Init 0 */
  __HAL_RCC_AES_CLK_ENABLE();
 8000a50:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <MX_AES_Init+0x60>)

  // only possible configuration for CMAC
  //hcryp.Init.OperatingMode = CRYP_ALGOMODE_TAG_GENERATION;

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 8000a52:	4818      	ldr	r0, [pc, #96]	@ (8000ab4 <MX_AES_Init+0x64>)
  __HAL_RCC_AES_CLK_ENABLE();
 8000a54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  hcryp.Instance = AES;
 8000a56:	4918      	ldr	r1, [pc, #96]	@ (8000ab8 <MX_AES_Init+0x68>)
{
 8000a58:	b510      	push	{r4, lr}
  __HAL_RCC_AES_CLK_ENABLE();
 8000a5a:	f442 3480 	orr.w	r4, r2, #65536	@ 0x10000
 8000a5e:	64dc      	str	r4, [r3, #76]	@ 0x4c
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  hcryp.Instance = AES;
 8000a62:	6001      	str	r1, [r0, #0]
{
 8000a64:	b082      	sub	sp, #8
  __HAL_RCC_AES_CLK_ENABLE();
 8000a66:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000a6a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8000aa0 <MX_AES_Init+0x50>
 8000a6e:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8000aa8 <MX_AES_Init+0x58>
  __HAL_RCC_AES_CLK_ENABLE();
 8000a72:	9201      	str	r2, [sp, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
  hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
  hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_AES_Init+0x6c>)
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 8000a76:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <MX_AES_Init+0x70>)
  __HAL_RCC_AES_CLK_ENABLE();
 8000a78:	9c01      	ldr	r4, [sp, #4]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8000a7a:	2100      	movs	r1, #0
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000a7c:	ed80 7b02 	vstr	d7, [r0, #8]
 8000a80:	ed80 0b04 	vstr	d0, [r0, #16]
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 8000a84:	e9c0 2308 	strd	r2, r3, [r0, #32]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8000a88:	6181      	str	r1, [r0, #24]
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000a8a:	f003 fb67 	bl	800415c <HAL_CRYP_Init>
 8000a8e:	b908      	cbnz	r0, 8000a94 <MX_AES_Init+0x44>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8000a90:	b002      	add	sp, #8
 8000a92:	bd10      	pop	{r4, pc}
 8000a94:	b002      	add	sp, #8
 8000a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000a9a:	f000 b9d9 	b.w	8000e50 <Error_Handler>
 8000a9e:	bf00      	nop
 8000aa0:	00000004 	.word	0x00000004
	...
 8000aac:	00000020 	.word	0x00000020
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	2000f8c8 	.word	0x2000f8c8
 8000ab8:	50060000 	.word	0x50060000
 8000abc:	08009cdc 	.word	0x08009cdc
 8000ac0:	08009cec 	.word	0x08009cec

08000ac4 <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <HAL_CRYP_MspInit+0x2c>)
 8000ac6:	6802      	ldr	r2, [r0, #0]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d000      	beq.n	8000ace <HAL_CRYP_MspInit+0xa>
 8000acc:	4770      	bx	lr
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8000ace:	f103 4070 	add.w	r0, r3, #4026531840	@ 0xf0000000
 8000ad2:	f5a0 317c 	sub.w	r1, r0, #258048	@ 0x3f000
{
 8000ad6:	b082      	sub	sp, #8
    __HAL_RCC_AES_CLK_ENABLE();
 8000ad8:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8000ada:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000ade:	64ca      	str	r2, [r1, #76]	@ 0x4c
 8000ae0:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 8000ae2:	f400 3180 	and.w	r1, r0, #65536	@ 0x10000
 8000ae6:	9101      	str	r1, [sp, #4]
 8000ae8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8000aea:	b002      	add	sp, #8
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	50060000 	.word	0x50060000

08000af4 <HAL_CRYP_MspDeInit>:

void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <HAL_CRYP_MspDeInit+0x18>)
 8000af6:	6802      	ldr	r2, [r0, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d000      	beq.n	8000afe <HAL_CRYP_MspDeInit+0xa>
    __HAL_RCC_AES_CLK_DISABLE();
  /* USER CODE BEGIN AES_MspDeInit 1 */

  /* USER CODE END AES_MspDeInit 1 */
  }
}
 8000afc:	4770      	bx	lr
    __HAL_RCC_AES_CLK_DISABLE();
 8000afe:	4804      	ldr	r0, [pc, #16]	@ (8000b10 <HAL_CRYP_MspDeInit+0x1c>)
 8000b00:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8000b02:	f421 3380 	bic.w	r3, r1, #65536	@ 0x10000
 8000b06:	64c3      	str	r3, [r0, #76]	@ 0x4c
}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	50060000 	.word	0x50060000
 8000b10:	40021000 	.word	0x40021000

08000b14 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b14:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <MX_DMA_Init+0x2c>)
{
 8000b16:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b18:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000b1a:	f041 0101 	orr.w	r1, r1, #1
 8000b1e:	6499      	str	r1, [r3, #72]	@ 0x48
 8000b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 8000b22:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000b24:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b26:	400b      	ands	r3, r1
 8000b28:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b2e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000b30:	f003 fa86 	bl	8004040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b34:	200b      	movs	r0, #11

}
 8000b36:	b003      	add	sp, #12
 8000b38:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b3c:	f003 babc 	b.w	80040b8 <HAL_NVIC_EnableIRQ>
 8000b40:	40021000 	.word	0x40021000

08000b44 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	2400      	movs	r4, #0
{
 8000b4a:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000b50:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b54:	4b98      	ldr	r3, [pc, #608]	@ (8000db8 <MX_GPIO_Init+0x274>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8000b5a:	4f98      	ldr	r7, [pc, #608]	@ (8000dbc <MX_GPIO_Init+0x278>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8000b5c:	f8df a26c 	ldr.w	sl, [pc, #620]	@ 8000dcc <MX_GPIO_Init+0x288>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8000b60:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 8000dd0 <MX_GPIO_Init+0x28c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b64:	f8df 826c 	ldr.w	r8, [pc, #620]	@ 8000dd4 <MX_GPIO_Init+0x290>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b68:	f042 0010 	orr.w	r0, r2, #16
 8000b6c:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8000b6e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000b70:	f001 0510 	and.w	r5, r1, #16
 8000b74:	9500      	str	r5, [sp, #0]
 8000b76:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b78:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8000b7a:	f046 0204 	orr.w	r2, r6, #4
 8000b7e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b80:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000b82:	f000 0104 	and.w	r1, r0, #4
 8000b86:	9101      	str	r1, [sp, #4]
 8000b88:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8a:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000b8c:	f045 0620 	orr.w	r6, r5, #32
 8000b90:	64de      	str	r6, [r3, #76]	@ 0x4c
 8000b92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b94:	f002 0020 	and.w	r0, r2, #32
 8000b98:	9002      	str	r0, [sp, #8]
 8000b9a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000b9e:	f041 0580 	orr.w	r5, r1, #128	@ 0x80
 8000ba2:	64dd      	str	r5, [r3, #76]	@ 0x4c
 8000ba4:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8000ba6:	f006 0280 	and.w	r2, r6, #128	@ 0x80
 8000baa:	9203      	str	r2, [sp, #12]
 8000bac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000bb0:	f040 0101 	orr.w	r1, r0, #1
 8000bb4:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8000bb6:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000bb8:	f005 0601 	and.w	r6, r5, #1
 8000bbc:	9604      	str	r6, [sp, #16]
 8000bbe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bc2:	f042 0002 	orr.w	r0, r2, #2
 8000bc6:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8000bc8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000bca:	f001 0502 	and.w	r5, r1, #2
 8000bce:	9505      	str	r5, [sp, #20]
 8000bd0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8000bd4:	f046 0240 	orr.w	r2, r6, #64	@ 0x40
 8000bd8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000bda:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000bdc:	f000 0140 	and.w	r1, r0, #64	@ 0x40
 8000be0:	9106      	str	r1, [sp, #24]
 8000be2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be4:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000be6:	f045 0608 	orr.w	r6, r5, #8
 8000bea:	64de      	str	r6, [r3, #76]	@ 0x4c
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bee:	4e74      	ldr	r6, [pc, #464]	@ (8000dc0 <MX_GPIO_Init+0x27c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf0:	f003 0208 	and.w	r2, r3, #8
 8000bf4:	9207      	str	r2, [sp, #28]
 8000bf6:	9b07      	ldr	r3, [sp, #28]
  HAL_PWREx_EnableVddIO2();
 8000bf8:	f004 f842 	bl	8004c80 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4638      	mov	r0, r7
 8000c02:	f003 ff7f 	bl	8004b04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8000c06:	4650      	mov	r0, sl
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0e:	f003 ff79 	bl	8004b04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8000c12:	4648      	mov	r0, r9
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c1a:	f003 ff73 	bl	8004b04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c1e:	4622      	mov	r2, r4
 8000c20:	4640      	mov	r0, r8
 8000c22:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000c26:	f003 ff6d 	bl	8004b04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c2a:	4622      	mov	r2, r4
 8000c2c:	4630      	mov	r0, r6
 8000c2e:	2140      	movs	r1, #64	@ 0x40
 8000c30:	f003 ff68 	bl	8004b04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c34:	a908      	add	r1, sp, #32
 8000c36:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000c38:	f24d 72ff 	movw	r2, #55295	@ 0xd7ff
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c44:	f003 fe42 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c48:	a908      	add	r1, sp, #32
 8000c4a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin;
 8000c4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c54:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f003 fe37 	bl	80048cc <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c5e:	a908      	add	r1, sp, #32
 8000c60:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c62:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 8000c66:	2303      	movs	r3, #3
 8000c68:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c6e:	f003 fe2d 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c72:	2209      	movs	r2, #9
 8000c74:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	a908      	add	r1, sp, #32
 8000c78:	4852      	ldr	r0, [pc, #328]	@ (8000dc4 <MX_GPIO_Init+0x280>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 8000c7c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	f04f 0b03 	mov.w	fp, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c86:	f003 fe21 	bl	80048cc <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	a908      	add	r1, sp, #32
 8000c8c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	e9cd 5508 	strd	r5, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f003 fe19 	bl	80048cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000c9e:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f003 fe0f 	bl	80048cc <HAL_GPIO_Init>
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000cb0:	f248 0236 	movw	r2, #32822	@ 0x8036
 8000cb4:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000cba:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f003 fe04 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000cd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f003 fdf9 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000cda:	f64b 7276 	movw	r2, #49014	@ 0xbf76
 8000cde:	2303      	movs	r3, #3
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	a908      	add	r1, sp, #32
 8000ce2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000ce4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8000cea:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f003 fded 	bl	80048cc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	4650      	mov	r0, sl
 8000cf4:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8000cfa:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f003 fde5 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d02:	f64f 621f 	movw	r2, #65055	@ 0xfe1f
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d06:	a908      	add	r1, sp, #32
 8000d08:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d12:	f003 fddb 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8000d16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	4648      	mov	r0, r9
 8000d1c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8000d1e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f003 fdd1 	bl	80048cc <HAL_GPIO_Init>
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	4640      	mov	r0, r8
 8000d2c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d2e:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d36:	9208      	str	r2, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f003 fdc7 	bl	80048cc <HAL_GPIO_Init>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d44:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d46:	4820      	ldr	r0, [pc, #128]	@ (8000dc8 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4e:	f003 fdbd 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d52:	2220      	movs	r2, #32
 8000d54:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d56:	a908      	add	r1, sp, #32
 8000d58:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f003 fdb4 	bl	80048cc <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d64:	a908      	add	r1, sp, #32
 8000d66:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d68:	2640      	movs	r6, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d70:	9608      	str	r6, [sp, #32]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d72:	f44f 55e8 	mov.w	r5, #7424	@ 0x1d00
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f003 fda9 	bl	80048cc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d7c:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	a908      	add	r1, sp, #32
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d84:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d8a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	9709      	str	r7, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f003 fd9d 	bl	80048cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d92:	4622      	mov	r2, r4
 8000d94:	4621      	mov	r1, r4
 8000d96:	2009      	movs	r0, #9
 8000d98:	f003 f952 	bl	8004040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d9c:	2009      	movs	r0, #9
 8000d9e:	f003 f98b 	bl	80040b8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000da2:	4622      	mov	r2, r4
 8000da4:	4621      	mov	r1, r4
 8000da6:	2028      	movs	r0, #40	@ 0x28
 8000da8:	f003 f94a 	bl	8004040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dac:	2028      	movs	r0, #40	@ 0x28
 8000dae:	f003 f983 	bl	80040b8 <HAL_NVIC_EnableIRQ>

}
 8000db2:	b00f      	add	sp, #60	@ 0x3c
 8000db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000800 	.word	0x48000800
 8000dc0:	48001800 	.word	0x48001800
 8000dc4:	48001c00 	.word	0x48001c00
 8000dc8:	48000c00 	.word	0x48000c00
 8000dcc:	48001400 	.word	0x48001400
 8000dd0:	48001000 	.word	0x48001000
 8000dd4:	48000400 	.word	0x48000400

08000dd8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin) {
 8000dd8:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8000ddc:	d002      	beq.n	8000de4 <HAL_GPIO_EXTI_Callback+0xc>
		btn_press = 1;
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
 8000dde:	2808      	cmp	r0, #8
 8000de0:	d004      	beq.n	8000dec <HAL_GPIO_EXTI_Callback+0x14>
		S2LP_IRQ_Handler();
}
 8000de2:	4770      	bx	lr
		btn_press = 1;
 8000de4:	4b02      	ldr	r3, [pc, #8]	@ (8000df0 <HAL_GPIO_EXTI_Callback+0x18>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	4770      	bx	lr
		S2LP_IRQ_Handler();
 8000dec:	f001 bb6a 	b.w	80024c4 <S2LP_IRQ_Handler>
 8000df0:	2000f928 	.word	0x2000f928

08000df4 <analogRead_CapaLvl>:

    return value;
}

uint8_t analogRead_CapaLvl(void)
{
 8000df4:	b510      	push	{r4, lr}
    HAL_ADC_Start(&hadc2);
 8000df6:	4812      	ldr	r0, [pc, #72]	@ (8000e40 <analogRead_CapaLvl+0x4c>)
 8000df8:	f002 fe6e 	bl	8003ad8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	480f      	ldr	r0, [pc, #60]	@ (8000e40 <analogRead_CapaLvl+0x4c>)
 8000e02:	f002 f9e1 	bl	80031c8 <HAL_ADC_PollForConversion>
    uint32_t value = HAL_ADC_GetValue(&hadc2);
 8000e06:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <analogRead_CapaLvl+0x4c>)
 8000e08:	f002 fa6e 	bl	80032e8 <HAL_ADC_GetValue>
  // ADC is 6 bit -> 0-63
  // Vdd can be 3.3V to 1.8V
  // The 4.5V max goes through a voltage divider to 1.72V (safe for 1.8V)
  // 4.5V -> 1.72V -> 60 ; 3.6V -> 1.35V -> 48

  uint8_t value = (uint8_t)analogRead_LowPower();
 8000e0c:	b2c4      	uxtb	r4, r0
    HAL_ADC_Stop(&hadc2);
 8000e0e:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <analogRead_CapaLvl+0x4c>)
 8000e10:	f003 f826 	bl	8003e60 <HAL_ADC_Stop>

  // CAPAC_LVL_X are the percentage of the battery level
  // True value = value * 12 + 48
  // 0% = 48 ; 100% = 60

  DEBUG_PRINT("Battery Level: %d\r\n", value);
 8000e14:	4621      	mov	r1, r4
 8000e16:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <analogRead_CapaLvl+0x50>)
 8000e18:	f007 fed2 	bl	8008bc0 <iprintf>
  DEBUG_PRINT("CAPAC_LVL_1: %d\r\n", ((uint8_t)( CAPA_LVL_1*12.0f) + 48));
 8000e1c:	2134      	movs	r1, #52	@ 0x34
 8000e1e:	480a      	ldr	r0, [pc, #40]	@ (8000e48 <analogRead_CapaLvl+0x54>)
 8000e20:	f007 fece 	bl	8008bc0 <iprintf>
  DEBUG_PRINT("CAPAC_LVL_2: %d\r\n", ((uint8_t)( CAPA_LVL_2*12.0f) + 48));
 8000e24:	4809      	ldr	r0, [pc, #36]	@ (8000e4c <analogRead_CapaLvl+0x58>)
 8000e26:	2139      	movs	r1, #57	@ 0x39
 8000e28:	f007 feca 	bl	8008bc0 <iprintf>

  // Give a level depending on the threshold reached
  if (value < ((uint8_t)(CAPA_LVL_1*12.0f) + 48)) {
 8000e2c:	2c33      	cmp	r4, #51	@ 0x33
 8000e2e:	d904      	bls.n	8000e3a <analogRead_CapaLvl+0x46>
    return 0; // Low
  } else if (value < ((uint8_t)(CAPA_LVL_2*12.0f) + 48)) {
    return 1; // Medium
 8000e30:	2c38      	cmp	r4, #56	@ 0x38
 8000e32:	bf8c      	ite	hi
 8000e34:	2002      	movhi	r0, #2
 8000e36:	2001      	movls	r0, #1
  } else {
    return 2; // Full
  }
}
 8000e38:	bd10      	pop	{r4, pc}
    return 0; // Low
 8000e3a:	2000      	movs	r0, #0
}
 8000e3c:	bd10      	pop	{r4, pc}
 8000e3e:	bf00      	nop
 8000e40:	200004d0 	.word	0x200004d0
 8000e44:	08009cfc 	.word	0x08009cfc
 8000e48:	08009d10 	.word	0x08009d10
 8000e4c:	08009d24 	.word	0x08009d24

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
 8000e56:	4844      	ldr	r0, [pc, #272]	@ (8000f68 <Error_Handler+0x118>)
 8000e58:	4f44      	ldr	r7, [pc, #272]	@ (8000f6c <Error_Handler+0x11c>)
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000e5a:	4e45      	ldr	r6, [pc, #276]	@ (8000f70 <Error_Handler+0x120>)
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000e5c:	4d45      	ldr	r5, [pc, #276]	@ (8000f74 <Error_Handler+0x124>)
  DEBUG_PRINT("Entering error Handler\r\n");
 8000e5e:	f007 ff17 	bl	8008c90 <puts>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000e62:	2400      	movs	r4, #0
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	f003 fe4a 	bl	8004b04 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	9400      	str	r4, [sp, #0]
 8000e74:	9900      	ldr	r1, [sp, #0]
 8000e76:	fba5 3002 	umull	r3, r0, r5, r2
 8000e7a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
 8000e7e:	ea4f 1390 	mov.w	r3, r0, lsr #6
 8000e82:	d22f      	bcs.n	8000ee4 <Error_Handler+0x94>
 8000e84:	9a00      	ldr	r2, [sp, #0]
 8000e86:	3201      	adds	r2, #1
 8000e88:	9200      	str	r2, [sp, #0]
 8000e8a:	9900      	ldr	r1, [sp, #0]
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d229      	bcs.n	8000ee4 <Error_Handler+0x94>
 8000e90:	9800      	ldr	r0, [sp, #0]
 8000e92:	3001      	adds	r0, #1
 8000e94:	9000      	str	r0, [sp, #0]
 8000e96:	9a00      	ldr	r2, [sp, #0]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d223      	bcs.n	8000ee4 <Error_Handler+0x94>
 8000e9c:	9900      	ldr	r1, [sp, #0]
 8000e9e:	3101      	adds	r1, #1
 8000ea0:	9100      	str	r1, [sp, #0]
 8000ea2:	9800      	ldr	r0, [sp, #0]
 8000ea4:	4298      	cmp	r0, r3
 8000ea6:	d21d      	bcs.n	8000ee4 <Error_Handler+0x94>
 8000ea8:	9a00      	ldr	r2, [sp, #0]
 8000eaa:	3201      	adds	r2, #1
 8000eac:	9200      	str	r2, [sp, #0]
 8000eae:	9900      	ldr	r1, [sp, #0]
 8000eb0:	4299      	cmp	r1, r3
 8000eb2:	d217      	bcs.n	8000ee4 <Error_Handler+0x94>
 8000eb4:	9800      	ldr	r0, [sp, #0]
 8000eb6:	3001      	adds	r0, #1
 8000eb8:	9000      	str	r0, [sp, #0]
 8000eba:	9a00      	ldr	r2, [sp, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d211      	bcs.n	8000ee4 <Error_Handler+0x94>
 8000ec0:	9900      	ldr	r1, [sp, #0]
 8000ec2:	3101      	adds	r1, #1
 8000ec4:	9100      	str	r1, [sp, #0]
 8000ec6:	9800      	ldr	r0, [sp, #0]
 8000ec8:	4298      	cmp	r0, r3
 8000eca:	d20b      	bcs.n	8000ee4 <Error_Handler+0x94>
 8000ecc:	9a00      	ldr	r2, [sp, #0]
 8000ece:	3201      	adds	r2, #1
 8000ed0:	9200      	str	r2, [sp, #0]
 8000ed2:	9900      	ldr	r1, [sp, #0]
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	d205      	bcs.n	8000ee4 <Error_Handler+0x94>
 8000ed8:	9800      	ldr	r0, [sp, #0]
 8000eda:	3001      	adds	r0, #1
 8000edc:	9000      	str	r0, [sp, #0]
 8000ede:	9a00      	ldr	r2, [sp, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d3cf      	bcc.n	8000e84 <Error_Handler+0x34>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000ee4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4630      	mov	r0, r6
 8000eec:	f003 fe0a 	bl	8004b04 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	9401      	str	r4, [sp, #4]
 8000ef4:	9801      	ldr	r0, [sp, #4]
 8000ef6:	fba5 1203 	umull	r1, r2, r5, r3
 8000efa:	ebb0 1f92 	cmp.w	r0, r2, lsr #6
 8000efe:	ea4f 1192 	mov.w	r1, r2, lsr #6
 8000f02:	d2af      	bcs.n	8000e64 <Error_Handler+0x14>
 8000f04:	9b01      	ldr	r3, [sp, #4]
 8000f06:	3301      	adds	r3, #1
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	9801      	ldr	r0, [sp, #4]
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	d2a9      	bcs.n	8000e64 <Error_Handler+0x14>
 8000f10:	9a01      	ldr	r2, [sp, #4]
 8000f12:	3201      	adds	r2, #1
 8000f14:	9201      	str	r2, [sp, #4]
 8000f16:	9b01      	ldr	r3, [sp, #4]
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	d2a3      	bcs.n	8000e64 <Error_Handler+0x14>
 8000f1c:	9801      	ldr	r0, [sp, #4]
 8000f1e:	3001      	adds	r0, #1
 8000f20:	9001      	str	r0, [sp, #4]
 8000f22:	9a01      	ldr	r2, [sp, #4]
 8000f24:	428a      	cmp	r2, r1
 8000f26:	d29d      	bcs.n	8000e64 <Error_Handler+0x14>
 8000f28:	9b01      	ldr	r3, [sp, #4]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	9801      	ldr	r0, [sp, #4]
 8000f30:	4288      	cmp	r0, r1
 8000f32:	d297      	bcs.n	8000e64 <Error_Handler+0x14>
 8000f34:	9a01      	ldr	r2, [sp, #4]
 8000f36:	3201      	adds	r2, #1
 8000f38:	9201      	str	r2, [sp, #4]
 8000f3a:	9b01      	ldr	r3, [sp, #4]
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d291      	bcs.n	8000e64 <Error_Handler+0x14>
 8000f40:	9801      	ldr	r0, [sp, #4]
 8000f42:	3001      	adds	r0, #1
 8000f44:	9001      	str	r0, [sp, #4]
 8000f46:	9a01      	ldr	r2, [sp, #4]
 8000f48:	428a      	cmp	r2, r1
 8000f4a:	d28b      	bcs.n	8000e64 <Error_Handler+0x14>
 8000f4c:	9b01      	ldr	r3, [sp, #4]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	9801      	ldr	r0, [sp, #4]
 8000f54:	4288      	cmp	r0, r1
 8000f56:	d285      	bcs.n	8000e64 <Error_Handler+0x14>
 8000f58:	9a01      	ldr	r2, [sp, #4]
 8000f5a:	3201      	adds	r2, #1
 8000f5c:	9201      	str	r2, [sp, #4]
 8000f5e:	9b01      	ldr	r3, [sp, #4]
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d3cf      	bcc.n	8000f04 <Error_Handler+0xb4>
 8000f64:	e77e      	b.n	8000e64 <Error_Handler+0x14>
 8000f66:	bf00      	nop
 8000f68:	08009d38 	.word	0x08009d38
 8000f6c:	20000400 	.word	0x20000400
 8000f70:	48000400 	.word	0x48000400
 8000f74:	51eb851f 	.word	0x51eb851f

08000f78 <run>:
{
 8000f78:	b508      	push	{r3, lr}
	btn_press = 0;
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001028 <run+0xb0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
    int s2lp_Check = S2LP_Standby();
 8000f80:	f001 f996 	bl	80022b0 <S2LP_Standby>
    if (s2lp_Check != HAL_OK) {
 8000f84:	b128      	cbz	r0, 8000f92 <run+0x1a>
      DEBUG_PRINT("[S2LP] Error while putting the S2LP to sleep: %d\r\n", s2lp_Check);
 8000f86:	4601      	mov	r1, r0
 8000f88:	4828      	ldr	r0, [pc, #160]	@ (800102c <run+0xb4>)
 8000f8a:	f007 fe19 	bl	8008bc0 <iprintf>
      Error_Handler();
 8000f8e:	f7ff ff5f 	bl	8000e50 <Error_Handler>
      if (StartADCAcq() != HAL_OK) {
 8000f92:	f7ff fce7 	bl	8000964 <StartADCAcq>
 8000f96:	2800      	cmp	r0, #0
 8000f98:	d140      	bne.n	800101c <run+0xa4>
        ProcessADCData();
 8000f9a:	f7ff fcfd 	bl	8000998 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000fa4:	f003 fdc0 	bl	8004b28 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000fa8:	bf30      	wfi
        ProcessADCData();
 8000faa:	f7ff fcf5 	bl	8000998 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000fae:	2101      	movs	r1, #1
 8000fb0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000fb4:	f003 fdb8 	bl	8004b28 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000fb8:	bf30      	wfi
        ProcessADCData();
 8000fba:	f7ff fced 	bl	8000998 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000fc4:	f003 fdb0 	bl	8004b28 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000fc8:	bf30      	wfi
        ProcessADCData();
 8000fca:	f7ff fce5 	bl	8000998 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000fce:	2101      	movs	r1, #1
 8000fd0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000fd4:	f003 fda8 	bl	8004b28 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000fd8:	bf30      	wfi
        ProcessADCData();
 8000fda:	f7ff fcdd 	bl	8000998 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000fde:	2101      	movs	r1, #1
 8000fe0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000fe4:	f003 fda0 	bl	8004b28 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000fe8:	bf30      	wfi
        ProcessADCData();
 8000fea:	f7ff fcd5 	bl	8000998 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000fee:	2101      	movs	r1, #1
 8000ff0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000ff4:	f003 fd98 	bl	8004b28 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000ff8:	bf30      	wfi
        ProcessADCData();
 8000ffa:	f7ff fccd 	bl	8000998 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000ffe:	2101      	movs	r1, #1
 8001000:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001004:	f003 fd90 	bl	8004b28 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8001008:	bf30      	wfi
        ProcessADCData();
 800100a:	f7ff fcc5 	bl	8000998 <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800100e:	2101      	movs	r1, #1
 8001010:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001014:	f003 fd88 	bl	8004b28 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8001018:	bf30      	wfi
      while (1) {
 800101a:	e7be      	b.n	8000f9a <run+0x22>
        DEBUG_PRINT("Error while starting the ADC acquisition\r\n");
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <run+0xb8>)
 800101e:	f007 fe37 	bl	8008c90 <puts>
        Error_Handler();
 8001022:	f7ff ff15 	bl	8000e50 <Error_Handler>
 8001026:	bf00      	nop
 8001028:	2000f928 	.word	0x2000f928
 800102c:	08009d50 	.word	0x08009d50
 8001030:	08009d84 	.word	0x08009d84
 8001034:	00000000 	.word	0x00000000

08001038 <SystemClock_Config>:
{
 8001038:	b500      	push	{lr}
 800103a:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103c:	2244      	movs	r2, #68	@ 0x44
 800103e:	2100      	movs	r1, #0
 8001040:	a806      	add	r0, sp, #24
 8001042:	f007 ffb9 	bl	8008fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001046:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001048:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001050:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001054:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001056:	f003 fd91 	bl	8004b7c <HAL_PWREx_ControlVoltageScaling>
 800105a:	b9d8      	cbnz	r0, 8001094 <SystemClock_Config+0x5c>
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800105c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8001098 <SystemClock_Config+0x60>
 8001060:	4601      	mov	r1, r0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001062:	2210      	movs	r2, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001064:	2350      	movs	r3, #80	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001066:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001068:	9110      	str	r1, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800106a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800106e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001070:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001072:	f003 ff25 	bl	8004ec0 <HAL_RCC_OscConfig>
 8001076:	4601      	mov	r1, r0
 8001078:	b960      	cbnz	r0, 8001094 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107a:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800107c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800107e:	e9cd 2101 	strd	r2, r1, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001082:	e9cd 1103 	strd	r1, r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001086:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001088:	f004 fa30 	bl	80054ec <HAL_RCC_ClockConfig>
 800108c:	b910      	cbnz	r0, 8001094 <SystemClock_Config+0x5c>
}
 800108e:	b019      	add	sp, #100	@ 0x64
 8001090:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001094:	f7ff fedc 	bl	8000e50 <Error_Handler>
 8001098:	00000001 	.word	0x00000001
 800109c:	00000000 	.word	0x00000000

080010a0 <main>:
{
 80010a0:	b508      	push	{r3, lr}
  HAL_Init();
 80010a2:	f001 ff33 	bl	8002f0c <HAL_Init>
  SystemClock_Config();
 80010a6:	f7ff ffc7 	bl	8001038 <SystemClock_Config>
  MX_GPIO_Init();
 80010aa:	f7ff fd4b 	bl	8000b44 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ae:	f7ff fd31 	bl	8000b14 <MX_DMA_Init>
  MX_SPI1_Init();
 80010b2:	f001 fc3d 	bl	8002930 <MX_SPI1_Init>
  MX_TIM3_Init();
 80010b6:	f001 fd2f 	bl	8002b18 <MX_TIM3_Init>
  MX_ADC1_Init();
 80010ba:	f7ff fa61 	bl	8000580 <MX_ADC1_Init>
  MX_AES_Init();
 80010be:	f7ff fcc7 	bl	8000a50 <MX_AES_Init>
  MX_ADC2_Init();
 80010c2:	f7ff fab3 	bl	800062c <MX_ADC2_Init>
	  MX_LPUART1_UART_Init();
 80010c6:	f001 fd87 	bl	8002bd8 <MX_LPUART1_UART_Init>
  RetargetInit(&hlpuart1);
 80010ca:	4814      	ldr	r0, [pc, #80]	@ (800111c <main+0x7c>)
 80010cc:	f000 f88a 	bl	80011e4 <RetargetInit>
  DEBUG_PRINT("Hello world\r\n");
 80010d0:	4813      	ldr	r0, [pc, #76]	@ (8001120 <main+0x80>)
 80010d2:	f007 fddd 	bl	8008c90 <puts>
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 80010d6:	4813      	ldr	r0, [pc, #76]	@ (8001124 <main+0x84>)
 80010d8:	f001 f952 	bl	8002380 <S2LP_Init>
  if (err)  {
 80010dc:	b128      	cbz	r0, 80010ea <main+0x4a>
 80010de:	4601      	mov	r1, r0
	  DEBUG_PRINT("[S2LP] Error while initializing: %u\r\n", err);
 80010e0:	4811      	ldr	r0, [pc, #68]	@ (8001128 <main+0x88>)
 80010e2:	f007 fd6d 	bl	8008bc0 <iprintf>
	  Error_Handler();
 80010e6:	f7ff feb3 	bl	8000e50 <Error_Handler>
	  DEBUG_PRINT("[S2LP] Init OK\r\n");
 80010ea:	4810      	ldr	r0, [pc, #64]	@ (800112c <main+0x8c>)
 80010ec:	f007 fdd0 	bl	8008c90 <puts>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 80010f0:	480f      	ldr	r0, [pc, #60]	@ (8001130 <main+0x90>)
 80010f2:	217f      	movs	r1, #127	@ 0x7f
 80010f4:	f002 fed8 	bl	8003ea8 <HAL_ADCEx_Calibration_Start>
 80010f8:	b120      	cbz	r0, 8001104 <main+0x64>
	  DEBUG_PRINT("Error while calibrating the ADC\r\n");
 80010fa:	480e      	ldr	r0, [pc, #56]	@ (8001134 <main+0x94>)
 80010fc:	f007 fdc8 	bl	8008c90 <puts>
	  Error_Handler();
 8001100:	f7ff fea6 	bl	8000e50 <Error_Handler>
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 8001104:	480c      	ldr	r0, [pc, #48]	@ (8001138 <main+0x98>)
 8001106:	f005 fa75 	bl	80065f4 <HAL_TIM_Base_Start>
 800110a:	b120      	cbz	r0, 8001116 <main+0x76>
	  DEBUG_PRINT("Error while enabling timer TIM3\r\n");
 800110c:	480b      	ldr	r0, [pc, #44]	@ (800113c <main+0x9c>)
 800110e:	f007 fdbf 	bl	8008c90 <puts>
	  Error_Handler();
 8001112:	f7ff fe9d 	bl	8000e50 <Error_Handler>
    run();
 8001116:	f7ff ff2f 	bl	8000f78 <run>
 800111a:	bf00      	nop
 800111c:	2000f9f8 	.word	0x2000f9f8
 8001120:	08009db0 	.word	0x08009db0
 8001124:	2000f940 	.word	0x2000f940
 8001128:	08009dc0 	.word	0x08009dc0
 800112c:	08009de8 	.word	0x08009de8
 8001130:	20000538 	.word	0x20000538
 8001134:	08009df8 	.word	0x08009df8
 8001138:	2000f9a8 	.word	0x2000f9a8
 800113c:	08009e1c 	.word	0x08009e1c

08001140 <make_packet>:
    // Clean up
    free(tmp_out);
}

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8001140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
    // So is the tag
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001144:	f101 0708 	add.w	r7, r1, #8
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8001148:	4604      	mov	r4, r0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 800114a:	19c6      	adds	r6, r0, r7
 800114c:	2000      	movs	r0, #0
 800114e:	51e0      	str	r0, [r4, r7]
    size_t num_blocks = (msg_len + 15) / 16;
 8001150:	f101 0517 	add.w	r5, r1, #23
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001154:	6070      	str	r0, [r6, #4]
 8001156:	60b0      	str	r0, [r6, #8]
 8001158:	60f0      	str	r0, [r6, #12]
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
 800115a:	f101 0818 	add.w	r8, r1, #24

	// Set the reserved field to 0
	packet[0] = 0x00;
 800115e:	7020      	strb	r0, [r4, #0]
	// Set the emitter_id field
	packet[1] = sender_id;
 8001160:	7062      	strb	r2, [r4, #1]
	// Set the payload_length field
	packet[2] = (payload_len >> 8) & 0xFF;
	packet[3] = payload_len & 0xFF;
	// Set the packet_serial field
	packet[4] = (serial >> 24) & 0xFF;
	packet[5] = (serial >> 16) & 0xFF;
 8001162:	0c18      	lsrs	r0, r3, #16
	packet[2] = (payload_len >> 8) & 0xFF;
 8001164:	0a0a      	lsrs	r2, r1, #8
	packet[3] = payload_len & 0xFF;
 8001166:	70e1      	strb	r1, [r4, #3]
	packet[6] = (serial >> 8) & 0xFF;
	packet[7] = serial & 0xFF;
 8001168:	71e3      	strb	r3, [r4, #7]
	packet[4] = (serial >> 24) & 0xFF;
 800116a:	0e19      	lsrs	r1, r3, #24
	packet[6] = (serial >> 8) & 0xFF;
 800116c:	0a1b      	lsrs	r3, r3, #8
	packet[5] = (serial >> 16) & 0xFF;
 800116e:	7160      	strb	r0, [r4, #5]
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8001170:	b083      	sub	sp, #12
	packet[2] = (payload_len >> 8) & 0xFF;
 8001172:	70a2      	strb	r2, [r4, #2]
	packet[4] = (serial >> 24) & 0xFF;
 8001174:	7121      	strb	r1, [r4, #4]
	packet[6] = (serial >> 8) & 0xFF;
 8001176:	71a3      	strb	r3, [r4, #6]
    tmp_out = malloc(total_size);
 8001178:	f025 000f 	bic.w	r0, r5, #15
 800117c:	f007 fba0 	bl	80088c0 <malloc>
 8001180:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 80011e0 <make_packet+0xa0>
 8001184:	f8c9 0000 	str.w	r0, [r9]
    if (tmp_out == NULL) {
 8001188:	b310      	cbz	r0, 80011d0 <make_packet+0x90>
    if (HAL_CRYP_AESCBC_Encrypt(&hcryp, (uint8_t *)msg, msg_len, tmp_out, 1000) != HAL_OK) {
 800118a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800118e:	4603      	mov	r3, r0
 8001190:	9200      	str	r2, [sp, #0]
 8001192:	4812      	ldr	r0, [pc, #72]	@ (80011dc <make_packet+0x9c>)
 8001194:	b2ba      	uxth	r2, r7
 8001196:	4621      	mov	r1, r4
 8001198:	f003 f892 	bl	80042c0 <HAL_CRYP_AESCBC_Encrypt>
 800119c:	b9a0      	cbnz	r0, 80011c8 <make_packet+0x88>
    memcpy(tag, tmp_out + ((num_blocks - 1) * 16), 16);
 800119e:	f8d9 0000 	ldr.w	r0, [r9]
 80011a2:	f025 0c0f 	bic.w	ip, r5, #15
 80011a6:	f1ac 0510 	sub.w	r5, ip, #16
 80011aa:	1943      	adds	r3, r0, r5
 80011ac:	5945      	ldr	r5, [r0, r5]
 80011ae:	6859      	ldr	r1, [r3, #4]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	51e5      	str	r5, [r4, r7]
 80011b6:	6071      	str	r1, [r6, #4]
 80011b8:	60b2      	str	r2, [r6, #8]
 80011ba:	60f3      	str	r3, [r6, #12]
    free(tmp_out);
 80011bc:	f007 fb88 	bl	80088d0 <free>
	#else
		tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
	#endif

    return packet_len;
}
 80011c0:	4640      	mov	r0, r8
 80011c2:	b003      	add	sp, #12
 80011c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        free(tmp_out);
 80011c8:	f8d9 0000 	ldr.w	r0, [r9]
 80011cc:	f007 fb80 	bl	80088d0 <free>
        Error_Handler();
 80011d0:	f7ff fe3e 	bl	8000e50 <Error_Handler>
}
 80011d4:	4640      	mov	r0, r8
 80011d6:	b003      	add	sp, #12
 80011d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011dc:	2000f8c8 	.word	0x2000f8c8
 80011e0:	2000f92c 	.word	0x2000f92c

080011e4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80011e4:	b430      	push	{r4, r5}
  gHuart = huart;

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <RetargetInit+0x1c>)
  gHuart = huart;
 80011e8:	4906      	ldr	r1, [pc, #24]	@ (8001204 <RetargetInit+0x20>)
  setvbuf(stdout, NULL, _IONBF, 0);
 80011ea:	681d      	ldr	r5, [r3, #0]
void RetargetInit(UART_HandleTypeDef *huart) {
 80011ec:	4604      	mov	r4, r0
  setvbuf(stdout, NULL, _IONBF, 0);
 80011ee:	2300      	movs	r3, #0
  gHuart = huart;
 80011f0:	600c      	str	r4, [r1, #0]
  setvbuf(stdout, NULL, _IONBF, 0);
 80011f2:	68a8      	ldr	r0, [r5, #8]
 80011f4:	2202      	movs	r2, #2
}
 80011f6:	bc30      	pop	{r4, r5}
  setvbuf(stdout, NULL, _IONBF, 0);
 80011f8:	4619      	mov	r1, r3
 80011fa:	f007 bd51 	b.w	8008ca0 <setvbuf>
 80011fe:	bf00      	nop
 8001200:	20000418 	.word	0x20000418
 8001204:	2000f930 	.word	0x2000f930

08001208 <_isatty>:

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001208:	2802      	cmp	r0, #2
 800120a:	d801      	bhi.n	8001210 <_isatty+0x8>
    return 1;
 800120c:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 800120e:	4770      	bx	lr
int _isatty(int fd) {
 8001210:	b508      	push	{r3, lr}
  errno = EBADF;
 8001212:	f007 ff2f 	bl	8009074 <__errno>
 8001216:	2309      	movs	r3, #9
 8001218:	6003      	str	r3, [r0, #0]
  return 0;
 800121a:	2000      	movs	r0, #0
}
 800121c:	bd08      	pop	{r3, pc}
 800121e:	bf00      	nop

08001220 <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001220:	3801      	subs	r0, #1
 8001222:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 8001224:	b510      	push	{r4, lr}
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001226:	d80c      	bhi.n	8001242 <_write+0x22>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001228:	4614      	mov	r4, r2
 800122a:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <_write+0x30>)
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	6810      	ldr	r0, [r2, #0]
 8001232:	b2a2      	uxth	r2, r4
 8001234:	f005 fbcc 	bl	80069d0 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
 8001238:	2800      	cmp	r0, #0
 800123a:	bf0c      	ite	eq
 800123c:	4620      	moveq	r0, r4
 800123e:	2005      	movne	r0, #5
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8001240:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8001242:	f007 ff17 	bl	8009074 <__errno>
 8001246:	2309      	movs	r3, #9
 8001248:	6003      	str	r3, [r0, #0]
  return -1;
 800124a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800124e:	bd10      	pop	{r4, pc}
 8001250:	2000f930 	.word	0x2000f930

08001254 <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001254:	2802      	cmp	r0, #2
 8001256:	d801      	bhi.n	800125c <_close+0x8>
    return 0;
 8001258:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 800125a:	4770      	bx	lr
int _close(int fd) {
 800125c:	b508      	push	{r3, lr}
  errno = EBADF;
 800125e:	f007 ff09 	bl	8009074 <__errno>
 8001262:	2309      	movs	r3, #9
 8001264:	6003      	str	r3, [r0, #0]
  return -1;
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
}
 800126a:	bd08      	pop	{r3, pc}

0800126c <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800126c:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800126e:	f007 ff01 	bl	8009074 <__errno>
 8001272:	2309      	movs	r3, #9
 8001274:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001276:	f04f 30ff 	mov.w	r0, #4294967295
 800127a:	bd08      	pop	{r3, pc}

0800127c <_read>:

int _read(int fd, char* ptr, int len) {
 800127c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800127e:	b958      	cbnz	r0, 8001298 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001280:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <_read+0x2c>)
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	6810      	ldr	r0, [r2, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	f005 fc3f 	bl	8006b0c <HAL_UART_Receive>
    if (hstatus == HAL_OK)
      return 1;
 800128e:	2800      	cmp	r0, #0
 8001290:	bf14      	ite	ne
 8001292:	2005      	movne	r0, #5
 8001294:	2001      	moveq	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8001296:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001298:	f007 feec 	bl	8009074 <__errno>
 800129c:	2309      	movs	r3, #9
 800129e:	6003      	str	r3, [r0, #0]
  return -1;
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80012a4:	bd08      	pop	{r3, pc}
 80012a6:	bf00      	nop
 80012a8:	2000f930 	.word	0x2000f930

080012ac <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80012ac:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 80012ae:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80012b0:	d804      	bhi.n	80012bc <_fstat+0x10>
    st->st_mode = S_IFCHR;
 80012b2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012b6:	6048      	str	r0, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 80012b8:	2000      	movs	r0, #0
 80012ba:	bd08      	pop	{r3, pc}
  errno = EBADF;
 80012bc:	f007 feda 	bl	8009074 <__errno>
 80012c0:	2309      	movs	r3, #9
 80012c2:	6003      	str	r3, [r0, #0]
}
 80012c4:	2000      	movs	r0, #0
 80012c6:	bd08      	pop	{r3, pc}

080012c8 <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	733b      	strb	r3, [r7, #12]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	737b      	strb	r3, [r7, #13]
 80012dc:	b672      	cpsid	i
}
 80012de:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2101      	movs	r1, #1
 80012e4:	480f      	ldr	r0, [pc, #60]	@ (8001324 <S2LP_Command+0x5c>)
 80012e6:	f003 fc0d 	bl	8004b04 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <S2LP_Command+0x60>)
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f107 0208 	add.w	r2, r7, #8
 80012f2:	f107 010c 	add.w	r1, r7, #12
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2302      	movs	r3, #2
 80012fe:	f004 ff2f 	bl	8006160 <HAL_SPI_TransmitReceive>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001306:	2201      	movs	r2, #1
 8001308:	2101      	movs	r1, #1
 800130a:	4806      	ldr	r0, [pc, #24]	@ (8001324 <S2LP_Command+0x5c>)
 800130c:	f003 fbfa 	bl	8004b04 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001310:	b662      	cpsie	i
}
 8001312:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 8001314:	893a      	ldrh	r2, [r7, #8]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	801a      	strh	r2, [r3, #0]
	return err;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	48000800 	.word	0x48000800
 8001328:	2000f938 	.word	0x2000f938

0800132c <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af02      	add	r7, sp, #8
 8001332:	4603      	mov	r3, r0
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 800133a:	2301      	movs	r3, #1
 800133c:	753b      	strb	r3, [r7, #20]
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	757b      	strb	r3, [r7, #21]
 8001342:	2300      	movs	r3, #0
 8001344:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 8001346:	b672      	cpsid	i
}
 8001348:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2101      	movs	r1, #1
 800134e:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <S2LP_ReadReg+0x74>)
 8001350:	f003 fbd8 	bl	8004b04 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <S2LP_ReadReg+0x78>)
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	f107 0210 	add.w	r2, r7, #16
 800135c:	f107 0114 	add.w	r1, r7, #20
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2303      	movs	r3, #3
 8001368:	f004 fefa 	bl	8006160 <HAL_SPI_TransmitReceive>
 800136c:	4603      	mov	r3, r0
 800136e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2101      	movs	r1, #1
 8001374:	480a      	ldr	r0, [pc, #40]	@ (80013a0 <S2LP_ReadReg+0x74>)
 8001376:	f003 fbc5 	bl	8004b04 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800137a:	b662      	cpsie	i
}
 800137c:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 8001384:	8a3a      	ldrh	r2, [r7, #16]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 8001390:	7cba      	ldrb	r2, [r7, #18]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	701a      	strb	r2, [r3, #0]
	return err;
 8001396:	7dfb      	ldrb	r3, [r7, #23]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	48000800 	.word	0x48000800
 80013a4:	2000f938 	.word	0x2000f938

080013a8 <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	4603      	mov	r3, r0
 80013b0:	603a      	str	r2, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	460b      	mov	r3, r1
 80013b6:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 80013b8:	2300      	movs	r3, #0
 80013ba:	733b      	strb	r3, [r7, #12]
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	737b      	strb	r3, [r7, #13]
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2101      	movs	r1, #1
 80013cc:	4811      	ldr	r0, [pc, #68]	@ (8001414 <S2LP_WriteReg+0x6c>)
 80013ce:	f003 fb99 	bl	8004b04 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <S2LP_WriteReg+0x70>)
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	f107 0208 	add.w	r2, r7, #8
 80013da:	f107 010c 	add.w	r1, r7, #12
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2303      	movs	r3, #3
 80013e6:	f004 febb 	bl	8006160 <HAL_SPI_TransmitReceive>
 80013ea:	4603      	mov	r3, r0
 80013ec:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2101      	movs	r1, #1
 80013f2:	4808      	ldr	r0, [pc, #32]	@ (8001414 <S2LP_WriteReg+0x6c>)
 80013f4:	f003 fb86 	bl	8004b04 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80013f8:	b662      	cpsie	i
}
 80013fa:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 8001402:	893a      	ldrh	r2, [r7, #8]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	801a      	strh	r2, [r3, #0]
	return err;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	48000800 	.word	0x48000800
 8001418:	2000f938 	.word	0x2000f938

0800141c <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08d      	sub	sp, #52	@ 0x34
 8001420:	af02      	add	r7, sp, #8
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	460b      	mov	r3, r1
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 800142e:	23ff      	movs	r3, #255	@ 0xff
 8001430:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 8001432:	7afa      	ldrb	r2, [r7, #11]
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	3302      	adds	r3, #2
 800143a:	68f9      	ldr	r1, [r7, #12]
 800143c:	4618      	mov	r0, r3
 800143e:	f007 fe46 	bl	80090ce <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 8001442:	b672      	cpsid	i
}
 8001444:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2101      	movs	r1, #1
 800144a:	4814      	ldr	r0, [pc, #80]	@ (800149c <S2LP_WriteTxFIFO+0x80>)
 800144c:	f003 fb5a 	bl	8004b04 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <S2LP_WriteTxFIFO+0x84>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	7afb      	ldrb	r3, [r7, #11]
 8001456:	b29b      	uxth	r3, r3
 8001458:	3302      	adds	r3, #2
 800145a:	b29b      	uxth	r3, r3
 800145c:	f107 0210 	add.w	r2, r7, #16
 8001460:	f107 011c 	add.w	r1, r7, #28
 8001464:	f04f 34ff 	mov.w	r4, #4294967295
 8001468:	9400      	str	r4, [sp, #0]
 800146a:	f004 fe79 	bl	8006160 <HAL_SPI_TransmitReceive>
 800146e:	4603      	mov	r3, r0
 8001470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2101      	movs	r1, #1
 8001478:	4808      	ldr	r0, [pc, #32]	@ (800149c <S2LP_WriteTxFIFO+0x80>)
 800147a:	f003 fb43 	bl	8004b04 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800147e:	b662      	cpsie	i
}
 8001480:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 8001488:	8a3a      	ldrh	r2, [r7, #16]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	801a      	strh	r2, [r3, #0]
	return err;
 800148e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001492:	4618      	mov	r0, r3
 8001494:	372c      	adds	r7, #44	@ 0x2c
 8001496:	46bd      	mov	sp, r7
 8001498:	bd90      	pop	{r4, r7, pc}
 800149a:	bf00      	nop
 800149c:	48000800 	.word	0x48000800
 80014a0:	2000f938 	.word	0x2000f938

080014a4 <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	2072      	movs	r0, #114	@ 0x72
 80014b8:	f7ff ff06 	bl	80012c8 <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 80014bc:	7b7b      	ldrb	r3, [r7, #13]
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <S2LP_Send+0x2e>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
 80014c8:	4864      	ldr	r0, [pc, #400]	@ (800165c <S2LP_Send+0x1b8>)
 80014ca:	f007 fbe1 	bl	8008c90 <puts>
		return HAL_BUSY;
 80014ce:	2302      	movs	r3, #2
 80014d0:	e0c0      	b.n	8001654 <S2LP_Send+0x1b0>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 80014d2:	4b63      	ldr	r3, [pc, #396]	@ (8001660 <S2LP_Send+0x1bc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 80014d8:	4b62      	ldr	r3, [pc, #392]	@ (8001664 <S2LP_Send+0x1c0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 80014de:	4b62      	ldr	r3, [pc, #392]	@ (8001668 <S2LP_Send+0x1c4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2200      	movs	r2, #0
 80014ee:	4619      	mov	r1, r3
 80014f0:	2031      	movs	r0, #49	@ 0x31
 80014f2:	f7ff ff59 	bl	80013a8 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	4619      	mov	r1, r3
 80014fe:	2032      	movs	r0, #50	@ 0x32
 8001500:	f7ff ff52 	bl	80013a8 <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001504:	e00f      	b.n	8001526 <S2LP_Send+0x82>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	4619      	mov	r1, r3
 800150c:	2066      	movs	r0, #102	@ 0x66
 800150e:	f7ff fedb 	bl	80012c8 <S2LP_Command>
 8001512:	4603      	mov	r3, r0
 8001514:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001516:	7bbb      	ldrb	r3, [r7, #14]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <S2LP_Send+0x82>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
 800151c:	4853      	ldr	r0, [pc, #332]	@ (800166c <S2LP_Send+0x1c8>)
 800151e:	f007 fbb7 	bl	8008c90 <puts>
			return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e096      	b.n	8001654 <S2LP_Send+0x1b0>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001526:	7b7b      	ldrb	r3, [r7, #13]
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b18      	cmp	r3, #24
 8001530:	d1e9      	bne.n	8001506 <S2LP_Send+0x62>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	08db      	lsrs	r3, r3, #3
 800153a:	b29b      	uxth	r3, r3
 800153c:	887a      	ldrh	r2, [r7, #2]
 800153e:	f002 0207 	and.w	r2, r2, #7
 8001542:	b292      	uxth	r2, r2
 8001544:	2a00      	cmp	r2, #0
 8001546:	bf14      	ite	ne
 8001548:	2201      	movne	r2, #1
 800154a:	2200      	moveq	r2, #0
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	4413      	add	r3, r2
 8001550:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 8001552:	2310      	movs	r3, #16
 8001554:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 8001556:	2300      	movs	r3, #0
 8001558:	827b      	strh	r3, [r7, #18]
 800155a:	e063      	b.n	8001624 <S2LP_Send+0x180>
		if (underflow) {
 800155c:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <S2LP_Send+0x1c0>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d02f      	beq.n	80015c6 <S2LP_Send+0x122>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
 8001566:	4842      	ldr	r0, [pc, #264]	@ (8001670 <S2LP_Send+0x1cc>)
 8001568:	f007 fb92 	bl	8008c90 <puts>
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	461a      	mov	r2, r3
 8001572:	2100      	movs	r1, #0
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fed9 	bl	800132c <S2LP_ReadReg>
 800157a:	4603      	mov	r3, r0
 800157c:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 800157e:	7bbb      	ldrb	r3, [r7, #14]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d105      	bne.n	8001590 <S2LP_Send+0xec>
				S2LP_PrintStatus(&radio_status);
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f879 	bl	8001680 <S2LP_PrintStatus>
 800158e:	e002      	b.n	8001596 <S2LP_Send+0xf2>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
 8001590:	4838      	ldr	r0, [pc, #224]	@ (8001674 <S2LP_Send+0x1d0>)
 8001592:	f007 fb7d 	bl	8008c90 <puts>
			}
			return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e05c      	b.n	8001654 <S2LP_Send+0x1b0>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d107      	bne.n	80015b0 <S2LP_Send+0x10c>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	2060      	movs	r0, #96	@ 0x60
 80015a8:	f7ff fe8e 	bl	80012c8 <S2LP_Command>
				sending = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	75fb      	strb	r3, [r7, #23]
			}

			__WFI();
 80015b0:	bf30      	wfi
			if (fifo_almost_empty) {
 80015b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <S2LP_Send+0x1c4>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d004      	beq.n	80015c6 <S2LP_Send+0x122>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 80015bc:	230c      	movs	r3, #12
 80015be:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 80015c0:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <S2LP_Send+0x1c4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 80015c6:	8abb      	ldrh	r3, [r7, #20]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0e6      	beq.n	800159a <S2LP_Send+0xf6>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 80015cc:	8a7a      	ldrh	r2, [r7, #18]
 80015ce:	8a3b      	ldrh	r3, [r7, #16]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d109      	bne.n	80015ea <S2LP_Send+0x146>
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	8a3b      	ldrh	r3, [r7, #16]
 80015dc:	3b01      	subs	r3, #1
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	e000      	b.n	80015ec <S2LP_Send+0x148>
 80015ea:	2308      	movs	r3, #8
 80015ec:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 80015ee:	8a7b      	ldrh	r3, [r7, #18]
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	461a      	mov	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	f107 020c 	add.w	r2, r7, #12
 80015fc:	7bf9      	ldrb	r1, [r7, #15]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff0c 	bl	800141c <S2LP_WriteTxFIFO>
 8001604:	4603      	mov	r3, r0
 8001606:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <S2LP_Send+0x174>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
 800160e:	481a      	ldr	r0, [pc, #104]	@ (8001678 <S2LP_Send+0x1d4>)
 8001610:	f007 fb3e 	bl	8008c90 <puts>
			return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e01d      	b.n	8001654 <S2LP_Send+0x1b0>
		}
		free_chunks--;
 8001618:	8abb      	ldrh	r3, [r7, #20]
 800161a:	3b01      	subs	r3, #1
 800161c:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 800161e:	8a7b      	ldrh	r3, [r7, #18]
 8001620:	3301      	adds	r3, #1
 8001622:	827b      	strh	r3, [r7, #18]
 8001624:	8a7a      	ldrh	r2, [r7, #18]
 8001626:	8a3b      	ldrh	r3, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d397      	bcc.n	800155c <S2LP_Send+0xb8>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d107      	bne.n	8001642 <S2LP_Send+0x19e>
		S2LP_Command(CMD_TX, &radio_status);
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4619      	mov	r1, r3
 8001638:	2060      	movs	r0, #96	@ 0x60
 800163a:	f7ff fe45 	bl	80012c8 <S2LP_Command>
	}

	while (!packet_sent) {
 800163e:	e000      	b.n	8001642 <S2LP_Send+0x19e>
		__WFI(); // wait until packet has been fully transmitted
 8001640:	bf30      	wfi
	while (!packet_sent) {
 8001642:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <S2LP_Send+0x1bc>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f9      	beq.n	8001640 <S2LP_Send+0x19c>
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
 800164c:	480b      	ldr	r0, [pc, #44]	@ (800167c <S2LP_Send+0x1d8>)
 800164e:	f007 fb1f 	bl	8008c90 <puts>
	return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	08009998 	.word	0x08009998
 8001660:	2000f934 	.word	0x2000f934
 8001664:	2000f936 	.word	0x2000f936
 8001668:	2000f935 	.word	0x2000f935
 800166c:	080099bc 	.word	0x080099bc
 8001670:	080099e0 	.word	0x080099e0
 8001674:	08009a10 	.word	0x08009a10
 8001678:	08009a40 	.word	0x08009a40
 800167c:	08009a64 	.word	0x08009a64

08001680 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af02      	add	r7, sp, #8
 8001686:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
 8001688:	486f      	ldr	r0, [pc, #444]	@ (8001848 <S2LP_PrintStatus+0x1c8>)
 800168a:	f007 fb01 	bl	8008c90 <puts>
	DEBUG_PRINT("  MC_STATE: ");
 800168e:	486f      	ldr	r0, [pc, #444]	@ (800184c <S2LP_PrintStatus+0x1cc>)
 8001690:	f007 fa96 	bl	8008bc0 <iprintf>
	switch (status->MC_STATE) {
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	785b      	ldrb	r3, [r3, #1]
 8001698:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b5c      	cmp	r3, #92	@ 0x5c
 80016a0:	f000 808f 	beq.w	80017c2 <S2LP_PrintStatus+0x142>
 80016a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80016a6:	f300 8094 	bgt.w	80017d2 <S2LP_PrintStatus+0x152>
 80016aa:	2b30      	cmp	r3, #48	@ 0x30
 80016ac:	dc6a      	bgt.n	8001784 <S2LP_PrintStatus+0x104>
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f2c0 808f 	blt.w	80017d2 <S2LP_PrintStatus+0x152>
 80016b4:	2b30      	cmp	r3, #48	@ 0x30
 80016b6:	f200 808c 	bhi.w	80017d2 <S2LP_PrintStatus+0x152>
 80016ba:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <S2LP_PrintStatus+0x40>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	0800178b 	.word	0x0800178b
 80016c4:	080017a3 	.word	0x080017a3
 80016c8:	08001793 	.word	0x08001793
 80016cc:	0800179b 	.word	0x0800179b
 80016d0:	080017d3 	.word	0x080017d3
 80016d4:	080017d3 	.word	0x080017d3
 80016d8:	080017d3 	.word	0x080017d3
 80016dc:	080017d3 	.word	0x080017d3
 80016e0:	080017d3 	.word	0x080017d3
 80016e4:	080017d3 	.word	0x080017d3
 80016e8:	080017d3 	.word	0x080017d3
 80016ec:	080017d3 	.word	0x080017d3
 80016f0:	080017ab 	.word	0x080017ab
 80016f4:	080017d3 	.word	0x080017d3
 80016f8:	080017d3 	.word	0x080017d3
 80016fc:	080017d3 	.word	0x080017d3
 8001700:	080017d3 	.word	0x080017d3
 8001704:	080017d3 	.word	0x080017d3
 8001708:	080017d3 	.word	0x080017d3
 800170c:	080017d3 	.word	0x080017d3
 8001710:	080017bb 	.word	0x080017bb
 8001714:	080017d3 	.word	0x080017d3
 8001718:	080017d3 	.word	0x080017d3
 800171c:	080017d3 	.word	0x080017d3
 8001720:	080017d3 	.word	0x080017d3
 8001724:	080017d3 	.word	0x080017d3
 8001728:	080017d3 	.word	0x080017d3
 800172c:	080017d3 	.word	0x080017d3
 8001730:	080017d3 	.word	0x080017d3
 8001734:	080017d3 	.word	0x080017d3
 8001738:	080017d3 	.word	0x080017d3
 800173c:	080017d3 	.word	0x080017d3
 8001740:	080017d3 	.word	0x080017d3
 8001744:	080017d3 	.word	0x080017d3
 8001748:	080017d3 	.word	0x080017d3
 800174c:	080017d3 	.word	0x080017d3
 8001750:	080017d3 	.word	0x080017d3
 8001754:	080017d3 	.word	0x080017d3
 8001758:	080017d3 	.word	0x080017d3
 800175c:	080017d3 	.word	0x080017d3
 8001760:	080017d3 	.word	0x080017d3
 8001764:	080017d3 	.word	0x080017d3
 8001768:	080017d3 	.word	0x080017d3
 800176c:	080017d3 	.word	0x080017d3
 8001770:	080017d3 	.word	0x080017d3
 8001774:	080017d3 	.word	0x080017d3
 8001778:	080017d3 	.word	0x080017d3
 800177c:	080017d3 	.word	0x080017d3
 8001780:	080017b3 	.word	0x080017b3
 8001784:	2b50      	cmp	r3, #80	@ 0x50
 8001786:	d020      	beq.n	80017ca <S2LP_PrintStatus+0x14a>
 8001788:	e023      	b.n	80017d2 <S2LP_PrintStatus+0x152>
		case (MC_STATE_READY):
			DEBUG_PRINT("READY");
 800178a:	4831      	ldr	r0, [pc, #196]	@ (8001850 <S2LP_PrintStatus+0x1d0>)
 800178c:	f007 fa18 	bl	8008bc0 <iprintf>
			break;
 8001790:	e023      	b.n	80017da <S2LP_PrintStatus+0x15a>
		case (MC_STATE_STANDBY):
			DEBUG_PRINT("STANDBY");
 8001792:	4830      	ldr	r0, [pc, #192]	@ (8001854 <S2LP_PrintStatus+0x1d4>)
 8001794:	f007 fa14 	bl	8008bc0 <iprintf>
			break;
 8001798:	e01f      	b.n	80017da <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP):
			DEBUG_PRINT("SLEEP");
 800179a:	482f      	ldr	r0, [pc, #188]	@ (8001858 <S2LP_PrintStatus+0x1d8>)
 800179c:	f007 fa10 	bl	8008bc0 <iprintf>
			break;
 80017a0:	e01b      	b.n	80017da <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP_NOFIFO):
			DEBUG_PRINT("SLEEP");
 80017a2:	482d      	ldr	r0, [pc, #180]	@ (8001858 <S2LP_PrintStatus+0x1d8>)
 80017a4:	f007 fa0c 	bl	8008bc0 <iprintf>
			break;
 80017a8:	e017      	b.n	80017da <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCKON):
			DEBUG_PRINT("LOCKON");
 80017aa:	482c      	ldr	r0, [pc, #176]	@ (800185c <S2LP_PrintStatus+0x1dc>)
 80017ac:	f007 fa08 	bl	8008bc0 <iprintf>
			break;
 80017b0:	e013      	b.n	80017da <S2LP_PrintStatus+0x15a>
		case (MC_STATE_RX):
			DEBUG_PRINT("RX");
 80017b2:	482b      	ldr	r0, [pc, #172]	@ (8001860 <S2LP_PrintStatus+0x1e0>)
 80017b4:	f007 fa04 	bl	8008bc0 <iprintf>
			break;
 80017b8:	e00f      	b.n	80017da <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCK_ST):
			DEBUG_PRINT("LOCK_ST");
 80017ba:	482a      	ldr	r0, [pc, #168]	@ (8001864 <S2LP_PrintStatus+0x1e4>)
 80017bc:	f007 fa00 	bl	8008bc0 <iprintf>
			break;
 80017c0:	e00b      	b.n	80017da <S2LP_PrintStatus+0x15a>
		case (MC_STATE_TX):
			DEBUG_PRINT("TX");
 80017c2:	4829      	ldr	r0, [pc, #164]	@ (8001868 <S2LP_PrintStatus+0x1e8>)
 80017c4:	f007 f9fc 	bl	8008bc0 <iprintf>
			break;
 80017c8:	e007      	b.n	80017da <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
 80017ca:	4828      	ldr	r0, [pc, #160]	@ (800186c <S2LP_PrintStatus+0x1ec>)
 80017cc:	f007 f9f8 	bl	8008bc0 <iprintf>
			break;
 80017d0:	e003      	b.n	80017da <S2LP_PrintStatus+0x15a>
		default:
			DEBUG_PRINT("UNKNOWN");
 80017d2:	4827      	ldr	r0, [pc, #156]	@ (8001870 <S2LP_PrintStatus+0x1f0>)
 80017d4:	f007 f9f4 	bl	8008bc0 <iprintf>
			break;
 80017d8:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
 80017da:	4826      	ldr	r0, [pc, #152]	@ (8001874 <S2LP_PrintStatus+0x1f4>)
 80017dc:	f007 fa58 	bl	8008c90 <puts>
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	4619      	mov	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4603      	mov	r3, r0
 8001812:	4819      	ldr	r0, [pc, #100]	@ (8001878 <S2LP_PrintStatus+0x1f8>)
 8001814:	f007 f9d4 	bl	8008bc0 <iprintf>
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	4619      	mov	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4810      	ldr	r0, [pc, #64]	@ (800187c <S2LP_PrintStatus+0x1fc>)
 800183c:	f007 f9c0 	bl	8008bc0 <iprintf>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	08009a80 	.word	0x08009a80
 800184c:	08009a98 	.word	0x08009a98
 8001850:	08009aa8 	.word	0x08009aa8
 8001854:	08009ab0 	.word	0x08009ab0
 8001858:	08009ab8 	.word	0x08009ab8
 800185c:	08009ac0 	.word	0x08009ac0
 8001860:	08009ac8 	.word	0x08009ac8
 8001864:	08009acc 	.word	0x08009acc
 8001868:	08009ad4 	.word	0x08009ad4
 800186c:	08009ad8 	.word	0x08009ad8
 8001870:	08009ae4 	.word	0x08009ae4
 8001874:	08009aec 	.word	0x08009aec
 8001878:	08009af0 	.word	0x08009af0
 800187c:	08009b30 	.word	0x08009b30

08001880 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 8001880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001884:	b09e      	sub	sp, #120	@ 0x78
 8001886:	af00      	add	r7, sp, #0
 8001888:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 800188a:	2304      	movs	r3, #4
 800188c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 8001890:	2301      	movs	r3, #1
 8001892:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 8001896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001898:	17da      	asrs	r2, r3, #31
 800189a:	469a      	mov	sl, r3
 800189c:	4693      	mov	fp, r2
 800189e:	ea4f 396a 	mov.w	r9, sl, asr #13
 80018a2:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 80018a6:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80018aa:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	17da      	asrs	r2, r3, #31
 80018b4:	623b      	str	r3, [r7, #32]
 80018b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80018b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018bc:	4603      	mov	r3, r0
 80018be:	fb03 f209 	mul.w	r2, r3, r9
 80018c2:	460b      	mov	r3, r1
 80018c4:	fb08 f303 	mul.w	r3, r8, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	4602      	mov	r2, r0
 80018cc:	fba8 4502 	umull	r4, r5, r8, r2
 80018d0:	442b      	add	r3, r5
 80018d2:	461d      	mov	r5, r3
 80018d4:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 80018d8:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 80018dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80018e0:	a374      	add	r3, pc, #464	@ (adr r3, 8001ab4 <S2LP_PLLConf+0x234>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fcd3 	bl	8000290 <__aeabi_uldivmod>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4613      	mov	r3, r2
 80018f0:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 80018f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018f4:	2200      	movs	r2, #0
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	61fa      	str	r2, [r7, #28]
 80018fa:	4b6b      	ldr	r3, [pc, #428]	@ (8001aa8 <S2LP_PLLConf+0x228>)
 80018fc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001900:	462a      	mov	r2, r5
 8001902:	fb03 f202 	mul.w	r2, r3, r2
 8001906:	2300      	movs	r3, #0
 8001908:	4621      	mov	r1, r4
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	4a65      	ldr	r2, [pc, #404]	@ (8001aa8 <S2LP_PLLConf+0x228>)
 8001912:	4621      	mov	r1, r4
 8001914:	fba1 1202 	umull	r1, r2, r1, r2
 8001918:	637a      	str	r2, [r7, #52]	@ 0x34
 800191a:	460a      	mov	r2, r1
 800191c:	633a      	str	r2, [r7, #48]	@ 0x30
 800191e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001920:	4413      	add	r3, r2
 8001922:	637b      	str	r3, [r7, #52]	@ 0x34
 8001924:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001928:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 800192c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8001930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001932:	3301      	adds	r3, #1
 8001934:	2200      	movs	r2, #0
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	617a      	str	r2, [r7, #20]
 800193a:	4b5b      	ldr	r3, [pc, #364]	@ (8001aa8 <S2LP_PLLConf+0x228>)
 800193c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001940:	462a      	mov	r2, r5
 8001942:	fb03 f202 	mul.w	r2, r3, r2
 8001946:	2300      	movs	r3, #0
 8001948:	4621      	mov	r1, r4
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	4a55      	ldr	r2, [pc, #340]	@ (8001aa8 <S2LP_PLLConf+0x228>)
 8001952:	4621      	mov	r1, r4
 8001954:	fba1 1202 	umull	r1, r2, r1, r2
 8001958:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800195a:	460a      	mov	r2, r1
 800195c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800195e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001960:	4413      	add	r3, r2
 8001962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001964:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001968:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 800196c:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 8001970:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001974:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001978:	1a84      	subs	r4, r0, r2
 800197a:	60bc      	str	r4, [r7, #8]
 800197c:	eb61 0303 	sbc.w	r3, r1, r3
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001986:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800198a:	1a84      	subs	r4, r0, r2
 800198c:	603c      	str	r4, [r7, #0]
 800198e:	eb61 0303 	sbc.w	r3, r1, r3
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001998:	4623      	mov	r3, r4
 800199a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800199e:	4602      	mov	r2, r0
 80019a0:	4293      	cmp	r3, r2
 80019a2:	462b      	mov	r3, r5
 80019a4:	460a      	mov	r2, r1
 80019a6:	4193      	sbcs	r3, r2
 80019a8:	d202      	bcs.n	80019b0 <S2LP_PLLConf+0x130>
 80019aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019ac:	3301      	adds	r3, #1
 80019ae:	e000      	b.n	80019b2 <S2LP_PLLConf+0x132>
 80019b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019b2:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 80019b4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80019b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 80019c0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80019c4:	4a38      	ldr	r2, [pc, #224]	@ (8001aa8 <S2LP_PLLConf+0x228>)
 80019c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80019ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 80019cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019ce:	4a37      	ldr	r2, [pc, #220]	@ (8001aac <S2LP_PLLConf+0x22c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d911      	bls.n	80019f8 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80019d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019d6:	4a36      	ldr	r2, [pc, #216]	@ (8001ab0 <S2LP_PLLConf+0x230>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d906      	bls.n	80019ea <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 80019dc:	2302      	movs	r3, #2
 80019de:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80019e8:	e017      	b.n	8001a1a <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80019f6:	e010      	b.n	8001a1a <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80019f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019fa:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab0 <S2LP_PLLConf+0x230>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d906      	bls.n	8001a0e <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 8001a00:	2303      	movs	r3, #3
 8001a02:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001a0c:	e005      	b.n	8001a1a <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8001a14:	2301      	movs	r3, #1
 8001a16:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 8001a1a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001a1e:	015b      	lsls	r3, r3, #5
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a24:	0e1b      	lsrs	r3, r3, #24
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 8001a2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a30:	0c1b      	lsrs	r3, r3, #16
 8001a32:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 8001a36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 8001a3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a40:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 8001a44:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	3b30      	subs	r3, #48	@ 0x30
 8001a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 8001a52:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001a56:	2200      	movs	r2, #0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	2005      	movs	r0, #5
 8001a5c:	f7ff fca4 	bl	80013a8 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 8001a60:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001a64:	2200      	movs	r2, #0
 8001a66:	4619      	mov	r1, r3
 8001a68:	2006      	movs	r0, #6
 8001a6a:	f7ff fc9d 	bl	80013a8 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 8001a6e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001a72:	2200      	movs	r2, #0
 8001a74:	4619      	mov	r1, r3
 8001a76:	2007      	movs	r0, #7
 8001a78:	f7ff fc96 	bl	80013a8 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 8001a7c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001a80:	2200      	movs	r2, #0
 8001a82:	4619      	mov	r1, r3
 8001a84:	2008      	movs	r0, #8
 8001a86:	f7ff fc8f 	bl	80013a8 <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 8001a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4619      	mov	r1, r3
 8001a92:	2065      	movs	r0, #101	@ 0x65
 8001a94:	f7ff fc88 	bl	80013a8 <S2LP_WriteReg>
}
 8001a98:	bf00      	nop
 8001a9a:	3778      	adds	r7, #120	@ 0x78
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	02faf080 	.word	0x02faf080
 8001aac:	d693a3ff 	.word	0xd693a3ff
 8001ab0:	01c9c380 	.word	0x01c9c380
 8001ab4:	02faf080 	.word	0x02faf080
 8001ab8:	00000000 	.word	0x00000000

08001abc <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 8001abc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001ac0:	b091      	sub	sp, #68	@ 0x44
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	460a      	mov	r2, r1
 8001ac8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001aca:	4613      	mov	r3, r2
 8001acc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 8001ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd0 <ComputeDatarate+0x114>)
 8001ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001ad4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd4 <ComputeDatarate+0x118>)
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d902      	bls.n	8001ae2 <ComputeDatarate+0x26>
    f_dig >>= 1;
 8001adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 8001ae2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d128      	bne.n	8001b3c <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 8001aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aec:	2200      	movs	r2, #0
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	61fa      	str	r2, [r7, #28]
 8001af2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001af4:	2200      	movs	r2, #0
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	617a      	str	r2, [r7, #20]
 8001afa:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001afe:	462b      	mov	r3, r5
 8001b00:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b04:	4642      	mov	r2, r8
 8001b06:	fb02 f203 	mul.w	r2, r2, r3
 8001b0a:	464b      	mov	r3, r9
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	4622      	mov	r2, r4
 8001b16:	4641      	mov	r1, r8
 8001b18:	fba2 ab01 	umull	sl, fp, r2, r1
 8001b1c:	445b      	add	r3, fp
 8001b1e:	469b      	mov	fp, r3
 8001b20:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 8001b24:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 8001b28:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	000a      	movs	r2, r1
 8001b36:	2300      	movs	r3, #0
 8001b38:	4613      	mov	r3, r2
 8001b3a:	e043      	b.n	8001bc4 <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 8001b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	60fa      	str	r2, [r7, #12]
 8001b44:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001b46:	2200      	movs	r2, #0
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b50:	460b      	mov	r3, r1
 8001b52:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	f143 0300 	adc.w	r3, r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8001b6a:	4652      	mov	r2, sl
 8001b6c:	fb02 f203 	mul.w	r2, r2, r3
 8001b70:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8001b74:	465b      	mov	r3, fp
 8001b76:	4682      	mov	sl, r0
 8001b78:	468b      	mov	fp, r1
 8001b7a:	4651      	mov	r1, sl
 8001b7c:	fb01 f303 	mul.w	r3, r1, r3
 8001b80:	4413      	add	r3, r2
 8001b82:	4652      	mov	r2, sl
 8001b84:	6a39      	ldr	r1, [r7, #32]
 8001b86:	fba2 4501 	umull	r4, r5, r2, r1
 8001b8a:	442b      	add	r3, r5
 8001b8c:	461d      	mov	r5, r3
 8001b8e:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 8001b92:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 8001b96:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b9a:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8001b9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ba2:	f1c1 0420 	rsb	r4, r1, #32
 8001ba6:	f1a1 0020 	sub.w	r0, r1, #32
 8001baa:	fa22 f801 	lsr.w	r8, r2, r1
 8001bae:	fa03 f404 	lsl.w	r4, r3, r4
 8001bb2:	ea48 0804 	orr.w	r8, r8, r4
 8001bb6:	fa23 f000 	lsr.w	r0, r3, r0
 8001bba:	ea48 0800 	orr.w	r8, r8, r0
 8001bbe:	fa23 f901 	lsr.w	r9, r3, r1
 8001bc2:	4643      	mov	r3, r8
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3744      	adds	r7, #68	@ 0x44
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001bce:	4770      	bx	lr
 8001bd0:	02faf080 	.word	0x02faf080
 8001bd4:	01c9c380 	.word	0x01c9c380

08001bd8 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 8001bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bdc:	b0ae      	sub	sp, #184	@ 0xb8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8001be4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001be8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 8001bec:	4ba5      	ldr	r3, [pc, #660]	@ (8001e84 <SearchDatarateME+0x2ac>)
 8001bee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001bf6:	4ba4      	ldr	r3, [pc, #656]	@ (8001e88 <SearchDatarateME+0x2b0>)
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d904      	bls.n	8001c06 <SearchDatarateME+0x2e>
    f_dig >>= 1;
 8001bfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001c0c:	e013      	b.n	8001c36 <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 8001c0e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001c12:	4619      	mov	r1, r3
 8001c14:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c18:	f7ff ff50 	bl	8001abc <ComputeDatarate>
 8001c1c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 8001c20:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d909      	bls.n	8001c40 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8001c2c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001c30:	3301      	adds	r3, #1
 8001c32:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001c36:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001c3a:	2b0c      	cmp	r3, #12
 8001c3c:	d1e7      	bne.n	8001c0e <SearchDatarateME+0x36>
 8001c3e:	e000      	b.n	8001c42 <SearchDatarateME+0x6a>
      break;
 8001c40:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8001c42:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001c46:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001c4a:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 8001c4c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d16b      	bne.n	8001d2c <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 8001c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c58:	2200      	movs	r2, #0
 8001c5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c5c:	667a      	str	r2, [r7, #100]	@ 0x64
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001c68:	000b      	movs	r3, r1
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8001c70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c74:	2200      	movs	r2, #0
 8001c76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c78:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c7e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001c82:	f7fe fb05 	bl	8000290 <__aeabi_uldivmod>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	b293      	uxth	r3, r2
 8001c8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001c90:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 8001c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c96:	2200      	movs	r2, #0
 8001c98:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c9a:	657a      	str	r2, [r7, #84]	@ 0x54
 8001c9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ca8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001caa:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001cae:	462b      	mov	r3, r5
 8001cb0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001cb4:	4642      	mov	r2, r8
 8001cb6:	fb02 f203 	mul.w	r2, r2, r3
 8001cba:	464b      	mov	r3, r9
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4622      	mov	r2, r4
 8001cc6:	4641      	mov	r1, r8
 8001cc8:	fba2 1201 	umull	r1, r2, r2, r1
 8001ccc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001cce:	460a      	mov	r2, r1
 8001cd0:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001cd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001cd4:	4413      	add	r3, r2
 8001cd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001cd8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8001cdc:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8001ce0:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 8001ce4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ce8:	2200      	movs	r2, #0
 8001cea:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cec:	647a      	str	r2, [r7, #68]	@ 0x44
 8001cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	17da      	asrs	r2, r3, #31
 8001cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cfa:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cfc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001d00:	462b      	mov	r3, r5
 8001d02:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001d06:	4642      	mov	r2, r8
 8001d08:	fb02 f203 	mul.w	r2, r2, r3
 8001d0c:	464b      	mov	r3, r9
 8001d0e:	4621      	mov	r1, r4
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	4622      	mov	r2, r4
 8001d18:	4641      	mov	r1, r8
 8001d1a:	fba2 ab01 	umull	sl, fp, r2, r1
 8001d1e:	445b      	add	r3, fp
 8001d20:	469b      	mov	fp, r3
 8001d22:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8001d26:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8001d2a:	e07d      	b.n	8001e28 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 8001d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d30:	2200      	movs	r2, #0
 8001d32:	4698      	mov	r8, r3
 8001d34:	4691      	mov	r9, r2
 8001d36:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001d3a:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8001d3e:	f1a1 0320 	sub.w	r3, r1, #32
 8001d42:	f1c1 0220 	rsb	r2, r1, #32
 8001d46:	fa09 f501 	lsl.w	r5, r9, r1
 8001d4a:	fa08 f303 	lsl.w	r3, r8, r3
 8001d4e:	431d      	orrs	r5, r3
 8001d50:	fa28 f202 	lsr.w	r2, r8, r2
 8001d54:	4315      	orrs	r5, r2
 8001d56:	fa08 f401 	lsl.w	r4, r8, r1
 8001d5a:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 8001d5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d62:	2200      	movs	r2, #0
 8001d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d66:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001d70:	f7fe fa8e 	bl	8000290 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	b293      	uxth	r3, r2
 8001d7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001d7e:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8001d80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d84:	2200      	movs	r2, #0
 8001d86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001d94:	17da      	asrs	r2, r3, #31
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d9a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001d9e:	462b      	mov	r3, r5
 8001da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001da4:	4642      	mov	r2, r8
 8001da6:	fb02 f203 	mul.w	r2, r2, r3
 8001daa:	464b      	mov	r3, r9
 8001dac:	4621      	mov	r1, r4
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	4622      	mov	r2, r4
 8001db6:	4641      	mov	r1, r8
 8001db8:	fba2 1201 	umull	r1, r2, r2, r1
 8001dbc:	677a      	str	r2, [r7, #116]	@ 0x74
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	673a      	str	r2, [r7, #112]	@ 0x70
 8001dc2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001dc4:	4413      	add	r3, r2
 8001dc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dc8:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8001dcc:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8001dd0:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 8001dd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	61fa      	str	r2, [r7, #28]
 8001dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8001de8:	17da      	asrs	r2, r3, #31
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	617a      	str	r2, [r7, #20]
 8001dee:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001df2:	462b      	mov	r3, r5
 8001df4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001df8:	4642      	mov	r2, r8
 8001dfa:	fb02 f203 	mul.w	r2, r2, r3
 8001dfe:	464b      	mov	r3, r9
 8001e00:	4621      	mov	r1, r4
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	4622      	mov	r2, r4
 8001e0a:	4641      	mov	r1, r8
 8001e0c:	fba2 1201 	umull	r1, r2, r2, r1
 8001e10:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e12:	460a      	mov	r2, r1
 8001e14:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001e16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001e18:	4413      	add	r3, r2
 8001e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e1c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8001e20:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 8001e24:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8001e28:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001e2c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001e30:	1a84      	subs	r4, r0, r2
 8001e32:	60bc      	str	r4, [r7, #8]
 8001e34:	eb61 0303 	sbc.w	r3, r1, r3
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001e3e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001e42:	1a84      	subs	r4, r0, r2
 8001e44:	603c      	str	r4, [r7, #0]
 8001e46:	eb61 0303 	sbc.w	r3, r1, r3
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e50:	4623      	mov	r3, r4
 8001e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e56:	4602      	mov	r2, r0
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	462b      	mov	r3, r5
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	4193      	sbcs	r3, r2
 8001e60:	d205      	bcs.n	8001e6e <SearchDatarateME+0x296>
 8001e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	e002      	b.n	8001e74 <SearchDatarateME+0x29c>
 8001e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001e78:	8013      	strh	r3, [r2, #0]

}
 8001e7a:	bf00      	nop
 8001e7c:	37b8      	adds	r7, #184	@ 0xb8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e84:	02faf080 	.word	0x02faf080
 8001e88:	01c9c380 	.word	0x01c9c380

08001e8c <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 8001e8c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e90:	b08c      	sub	sp, #48	@ 0x30
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	461e      	mov	r6, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001ea8:	4633      	mov	r3, r6
 8001eaa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 8001eae:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <ComputeFreqDeviation+0xf8>)
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 8001eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d127      	bne.n	8001f0a <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 8001eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	617a      	str	r2, [r7, #20]
 8001ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	60fa      	str	r2, [r7, #12]
 8001ecc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ed0:	462b      	mov	r3, r5
 8001ed2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001ed6:	4642      	mov	r2, r8
 8001ed8:	fb02 f203 	mul.w	r2, r2, r3
 8001edc:	464b      	mov	r3, r9
 8001ede:	4621      	mov	r1, r4
 8001ee0:	fb01 f303 	mul.w	r3, r1, r3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4622      	mov	r2, r4
 8001ee8:	4641      	mov	r1, r8
 8001eea:	fba2 ab01 	umull	sl, fp, r2, r1
 8001eee:	445b      	add	r3, fp
 8001ef0:	469b      	mov	fp, r3
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	ea4f 529a 	mov.w	r2, sl, lsr #22
 8001efe:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 8001f02:	ea4f 539b 	mov.w	r3, fp, lsr #22
 8001f06:	4613      	mov	r3, r2
 8001f08:	e036      	b.n	8001f78 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 8001f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f16:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f1a:	17da      	asrs	r2, r3, #31
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	61fa      	str	r2, [r7, #28]
 8001f20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f24:	460b      	mov	r3, r1
 8001f26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f2a:	4652      	mov	r2, sl
 8001f2c:	fb02 f203 	mul.w	r2, r2, r3
 8001f30:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8001f34:	465b      	mov	r3, fp
 8001f36:	4682      	mov	sl, r0
 8001f38:	468b      	mov	fp, r1
 8001f3a:	4651      	mov	r1, sl
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	4652      	mov	r2, sl
 8001f44:	69b9      	ldr	r1, [r7, #24]
 8001f46:	fba2 4501 	umull	r4, r5, r2, r1
 8001f4a:	442b      	add	r3, r5
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f52:	f1c3 0317 	rsb	r3, r3, #23
 8001f56:	f1c3 0120 	rsb	r1, r3, #32
 8001f5a:	f1a3 0220 	sub.w	r2, r3, #32
 8001f5e:	fa24 f803 	lsr.w	r8, r4, r3
 8001f62:	fa05 f101 	lsl.w	r1, r5, r1
 8001f66:	ea48 0801 	orr.w	r8, r8, r1
 8001f6a:	fa25 f202 	lsr.w	r2, r5, r2
 8001f6e:	ea48 0802 	orr.w	r8, r8, r2
 8001f72:	fa25 f903 	lsr.w	r9, r5, r3
 8001f76:	4643      	mov	r3, r8
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3730      	adds	r7, #48	@ 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f82:	4770      	bx	lr
 8001f84:	02faf080 	.word	0x02faf080

08001f88 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8001f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f8c:	b0a2      	sub	sp, #136	@ 0x88
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8001f92:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f94:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 8001f96:	2304      	movs	r3, #4
 8001f98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001fa8:	e012      	b.n	8001fd0 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 8001faa:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001fae:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001fb2:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 8001fb6:	20ff      	movs	r0, #255	@ 0xff
 8001fb8:	f7ff ff68 	bl	8001e8c <ComputeFreqDeviation>
 8001fbc:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 8001fbe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001fc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d309      	bcc.n	8001fda <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001fc6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001fd0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d1e8      	bne.n	8001faa <SearchFreqDevME+0x22>
 8001fd8:	e000      	b.n	8001fdc <SearchFreqDevME+0x54>
      break;
 8001fda:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 8001fdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001fde:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001fe2:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 8001fe4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d155      	bne.n	8002098 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 8001fec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fee:	2200      	movs	r2, #0
 8001ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ff2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002000:	4629      	mov	r1, r5
 8002002:	058b      	lsls	r3, r1, #22
 8002004:	4621      	mov	r1, r4
 8002006:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 800200a:	4621      	mov	r1, r4
 800200c:	058a      	lsls	r2, r1, #22
 800200e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 8002012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002016:	a36e      	add	r3, pc, #440	@ (adr r3, 80021d0 <SearchFreqDevME+0x248>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe f938 	bl	8000290 <__aeabi_uldivmod>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	b2d3      	uxtb	r3, r2
 8002026:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002028:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 800202a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2200      	movs	r2, #0
 8002032:	633b      	str	r3, [r7, #48]	@ 0x30
 8002034:	637a      	str	r2, [r7, #52]	@ 0x34
 8002036:	4b68      	ldr	r3, [pc, #416]	@ (80021d8 <SearchFreqDevME+0x250>)
 8002038:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800203c:	462a      	mov	r2, r5
 800203e:	fb03 f202 	mul.w	r2, r3, r2
 8002042:	2300      	movs	r3, #0
 8002044:	4621      	mov	r1, r4
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	4a62      	ldr	r2, [pc, #392]	@ (80021d8 <SearchFreqDevME+0x250>)
 800204e:	4621      	mov	r1, r4
 8002050:	fba1 ab02 	umull	sl, fp, r1, r2
 8002054:	445b      	add	r3, fp
 8002056:	469b      	mov	fp, r3
 8002058:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 800205c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8002060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	17da      	asrs	r2, r3, #31
 8002068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800206a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800206c:	4b5a      	ldr	r3, [pc, #360]	@ (80021d8 <SearchFreqDevME+0x250>)
 800206e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002072:	462a      	mov	r2, r5
 8002074:	fb03 f202 	mul.w	r2, r3, r2
 8002078:	2300      	movs	r3, #0
 800207a:	4621      	mov	r1, r4
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	4a55      	ldr	r2, [pc, #340]	@ (80021d8 <SearchFreqDevME+0x250>)
 8002084:	4621      	mov	r1, r4
 8002086:	fba1 8902 	umull	r8, r9, r1, r2
 800208a:	444b      	add	r3, r9
 800208c:	4699      	mov	r9, r3
 800208e:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8002092:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8002096:	e06d      	b.n	8002174 <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8002098:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800209a:	2200      	movs	r2, #0
 800209c:	623b      	str	r3, [r7, #32]
 800209e:	627a      	str	r2, [r7, #36]	@ 0x24
 80020a0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80020a4:	f1c3 0117 	rsb	r1, r3, #23
 80020a8:	f1a1 0320 	sub.w	r3, r1, #32
 80020ac:	f1c1 0220 	rsb	r2, r1, #32
 80020b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020b4:	4648      	mov	r0, r9
 80020b6:	fa00 f501 	lsl.w	r5, r0, r1
 80020ba:	4640      	mov	r0, r8
 80020bc:	fa00 f303 	lsl.w	r3, r0, r3
 80020c0:	431d      	orrs	r5, r3
 80020c2:	4643      	mov	r3, r8
 80020c4:	fa23 f202 	lsr.w	r2, r3, r2
 80020c8:	4315      	orrs	r5, r2
 80020ca:	4643      	mov	r3, r8
 80020cc:	408b      	lsls	r3, r1
 80020ce:	461c      	mov	r4, r3
 80020d0:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 80020d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80020d8:	a33d      	add	r3, pc, #244	@ (adr r3, 80021d0 <SearchFreqDevME+0x248>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe f8d7 	bl	8000290 <__aeabi_uldivmod>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	b2d3      	uxtb	r3, r2
 80020e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020ea:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 80020ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80020f4:	17da      	asrs	r2, r3, #31
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	61fa      	str	r2, [r7, #28]
 80020fa:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <SearchFreqDevME+0x250>)
 80020fc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002100:	462a      	mov	r2, r5
 8002102:	fb03 f202 	mul.w	r2, r3, r2
 8002106:	2300      	movs	r3, #0
 8002108:	4621      	mov	r1, r4
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	4a31      	ldr	r2, [pc, #196]	@ (80021d8 <SearchFreqDevME+0x250>)
 8002112:	4621      	mov	r1, r4
 8002114:	fba1 1202 	umull	r1, r2, r1, r2
 8002118:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800211a:	460a      	mov	r2, r1
 800211c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800211e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002120:	4413      	add	r3, r2
 8002122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002124:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002128:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 800212c:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8002130:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8002138:	17da      	asrs	r2, r3, #31
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	617a      	str	r2, [r7, #20]
 800213e:	4b26      	ldr	r3, [pc, #152]	@ (80021d8 <SearchFreqDevME+0x250>)
 8002140:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002144:	462a      	mov	r2, r5
 8002146:	fb03 f202 	mul.w	r2, r3, r2
 800214a:	2300      	movs	r3, #0
 800214c:	4621      	mov	r1, r4
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	4a20      	ldr	r2, [pc, #128]	@ (80021d8 <SearchFreqDevME+0x250>)
 8002156:	4621      	mov	r1, r4
 8002158:	fba1 1202 	umull	r1, r2, r1, r2
 800215c:	647a      	str	r2, [r7, #68]	@ 0x44
 800215e:	460a      	mov	r2, r1
 8002160:	643a      	str	r2, [r7, #64]	@ 0x40
 8002162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002164:	4413      	add	r3, r2
 8002166:	647b      	str	r3, [r7, #68]	@ 0x44
 8002168:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800216c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8002170:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8002174:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002178:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800217c:	1a84      	subs	r4, r0, r2
 800217e:	60bc      	str	r4, [r7, #8]
 8002180:	eb61 0303 	sbc.w	r3, r1, r3
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800218a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800218e:	1a84      	subs	r4, r0, r2
 8002190:	603c      	str	r4, [r7, #0]
 8002192:	eb61 0303 	sbc.w	r3, r1, r3
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800219c:	4623      	mov	r3, r4
 800219e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021a2:	4602      	mov	r2, r0
 80021a4:	4293      	cmp	r3, r2
 80021a6:	462b      	mov	r3, r5
 80021a8:	460a      	mov	r2, r1
 80021aa:	4193      	sbcs	r3, r2
 80021ac:	d204      	bcs.n	80021b8 <SearchFreqDevME+0x230>
 80021ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e001      	b.n	80021bc <SearchFreqDevME+0x234>
 80021b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021be:	7013      	strb	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	3788      	adds	r7, #136	@ 0x88
 80021c4:	46bd      	mov	sp, r7
 80021c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ca:	bf00      	nop
 80021cc:	f3af 8000 	nop.w
 80021d0:	02faf080 	.word	0x02faf080
 80021d4:	00000000 	.word	0x00000000
 80021d8:	02faf080 	.word	0x02faf080

080021dc <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 80021ea:	f107 0217 	add.w	r2, r7, #23
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	68b8      	ldr	r0, [r7, #8]
 80021f6:	f7ff fcef 	bl	8001bd8 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 80021fa:	f107 0212 	add.w	r2, r7, #18
 80021fe:	f107 0313 	add.w	r3, r7, #19
 8002202:	4619      	mov	r1, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff febf 	bl	8001f88 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 800220a:	8abb      	ldrh	r3, [r7, #20]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	b29b      	uxth	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2200      	movs	r2, #0
 8002214:	4619      	mov	r1, r3
 8002216:	200e      	movs	r0, #14
 8002218:	f7ff f8c6 	bl	80013a8 <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 800221c:	8abb      	ldrh	r3, [r7, #20]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	200f      	movs	r0, #15
 8002226:	f7ff f8bf 	bl	80013a8 <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 800222a:	7dfa      	ldrb	r2, [r7, #23]
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	4313      	orrs	r3, r2
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2200      	movs	r2, #0
 8002234:	4619      	mov	r1, r3
 8002236:	2010      	movs	r0, #16
 8002238:	f7ff f8b6 	bl	80013a8 <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2200      	movs	r2, #0
 8002240:	4619      	mov	r1, r3
 8002242:	2012      	movs	r0, #18
 8002244:	f7ff f8b0 	bl	80013a8 <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8002248:	7cbb      	ldrb	r3, [r7, #18]
 800224a:	2200      	movs	r2, #0
 800224c:	4619      	mov	r1, r3
 800224e:	2011      	movs	r0, #17
 8002250:	f7ff f8aa 	bl	80013a8 <S2LP_WriteReg>
}
 8002254:	bf00      	nop
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b0e      	cmp	r3, #14
 8002268:	dd02      	ble.n	8002270 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e006      	b.n	800227e <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f1c3 031d 	rsb	r3, r3, #29
 800227c:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2062      	movs	r0, #98	@ 0x62
 8002284:	f7ff f890 	bl	80013a8 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 8002288:	2200      	movs	r2, #0
 800228a:	2100      	movs	r1, #0
 800228c:	2064      	movs	r0, #100	@ 0x64
 800228e:	f7ff f88b 	bl	80013a8 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	2063      	movs	r0, #99	@ 0x63
 8002298:	f7ff f886 	bl	80013a8 <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2200      	movs	r2, #0
 80022a0:	4619      	mov	r1, r3
 80022a2:	2061      	movs	r0, #97	@ 0x61
 80022a4:	f7ff f880 	bl	80013a8 <S2LP_WriteReg>
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <S2LP_Standby>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Standby(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
	S2LPStatus radio_status;
	HAL_StatusTypeDef err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	461a      	mov	r2, r3
 80022ba:	2100      	movs	r1, #0
 80022bc:	2000      	movs	r0, #0
 80022be:	f7ff f835 	bl	800132c <S2LP_ReadReg>
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]

	while (radio_status.MC_STATE != MC_STATE_STANDBY) {
 80022c6:	e00e      	b.n	80022e6 <S2LP_Standby+0x36>
		err = S2LP_Command(CMD_STANDBY, &radio_status);
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	2063      	movs	r0, #99	@ 0x63
 80022ce:	f7fe fffb 	bl	80012c8 <S2LP_Command>
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
		if (err) {
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <S2LP_Standby+0x36>
			DEBUG_PRINT("[S2LP] Error: cannot enter sleep mode\r\n");
 80022dc:	4807      	ldr	r0, [pc, #28]	@ (80022fc <S2LP_Standby+0x4c>)
 80022de:	f006 fcd7 	bl	8008c90 <puts>
			return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e006      	b.n	80022f4 <S2LP_Standby+0x44>
	while (radio_status.MC_STATE != MC_STATE_STANDBY) {
 80022e6:	797b      	ldrb	r3, [r7, #5]
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d1ea      	bne.n	80022c8 <S2LP_Standby+0x18>
		}
	}

	return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	08009b58 	.word	0x08009b58

08002300 <S2LP_WakeUp>:

HAL_StatusTypeDef S2LP_WakeUp(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
	S2LPStatus radio_status;
	HAL_StatusTypeDef err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8002306:	463b      	mov	r3, r7
 8002308:	461a      	mov	r2, r3
 800230a:	2100      	movs	r1, #0
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff f80d 	bl	800132c <S2LP_ReadReg>
 8002312:	4603      	mov	r3, r0
 8002314:	70fb      	strb	r3, [r7, #3]

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8002316:	463b      	mov	r3, r7
 8002318:	4619      	mov	r1, r3
 800231a:	2072      	movs	r0, #114	@ 0x72
 800231c:	f7fe ffd4 	bl	80012c8 <S2LP_Command>

	// Ensure the radio is in READY mode before trying to lock for Tx
	uint32_t ready_timeout = 100000;
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <S2LP_WakeUp+0x78>)
 8002322:	607b      	str	r3, [r7, #4]
	while (radio_status.MC_STATE != MC_STATE_READY && ready_timeout--) {
 8002324:	e007      	b.n	8002336 <S2LP_WakeUp+0x36>
		S2LP_Command(CMD_READY, &radio_status);
 8002326:	463b      	mov	r3, r7
 8002328:	4619      	mov	r1, r3
 800232a:	2062      	movs	r0, #98	@ 0x62
 800232c:	f7fe ffcc 	bl	80012c8 <S2LP_Command>
		HAL_Delay(1);
 8002330:	2001      	movs	r0, #1
 8002332:	f000 fe0d 	bl	8002f50 <HAL_Delay>
	while (radio_status.MC_STATE != MC_STATE_READY && ready_timeout--) {
 8002336:	787b      	ldrb	r3, [r7, #1]
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <S2LP_WakeUp+0x4c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	1e5a      	subs	r2, r3, #1
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1ec      	bne.n	8002326 <S2LP_WakeUp+0x26>
	}
	if (radio_status.MC_STATE != MC_STATE_READY) {
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <S2LP_WakeUp+0x6c>
		DEBUG_PRINT("[S2LP] Error: radio did not become READY, state: 0x%X\r\n", radio_status.MC_STATE);
 8002358:	787b      	ldrb	r3, [r7, #1]
 800235a:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4619      	mov	r1, r3
 8002362:	4806      	ldr	r0, [pc, #24]	@ (800237c <S2LP_WakeUp+0x7c>)
 8002364:	f006 fc2c 	bl	8008bc0 <iprintf>
		return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
 800236a:	e000      	b.n	800236e <S2LP_WakeUp+0x6e>
	}

	return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	000186a0 	.word	0x000186a0
 800237c:	08009b80 	.word	0x08009b80

08002380 <S2LP_Init>:

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 8002388:	4a48      	ldr	r2, [pc, #288]	@ (80024ac <S2LP_Init+0x12c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 800238e:	f003 f963 	bl	8005658 <HAL_RCC_GetHCLKFreq>
 8002392:	4603      	mov	r3, r0
 8002394:	4a46      	ldr	r2, [pc, #280]	@ (80024b0 <S2LP_Init+0x130>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0a9b      	lsrs	r3, r3, #10
 800239c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800239e:	b672      	cpsid	i
}
 80023a0:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 80023a2:	2200      	movs	r2, #0
 80023a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023a8:	4842      	ldr	r0, [pc, #264]	@ (80024b4 <S2LP_Init+0x134>)
 80023aa:	f002 fbab 	bl	8004b04 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e003      	b.n	80023bc <S2LP_Init+0x3c>
		asm volatile("nop");
 80023b4:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3301      	adds	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d3f7      	bcc.n	80023b4 <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 80023c4:	b662      	cpsie	i
}
 80023c6:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 80023c8:	2200      	movs	r2, #0
 80023ca:	2103      	movs	r1, #3
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7fe ffeb 	bl	80013a8 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 80023d2:	2200      	movs	r2, #0
 80023d4:	21a4      	movs	r1, #164	@ 0xa4
 80023d6:	2053      	movs	r0, #83	@ 0x53
 80023d8:	f7fe ffe6 	bl	80013a8 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 80023dc:	2200      	movs	r2, #0
 80023de:	2101      	movs	r1, #1
 80023e0:	2052      	movs	r0, #82	@ 0x52
 80023e2:	f7fe ffe1 	bl	80013a8 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	2051      	movs	r0, #81	@ 0x51
 80023ec:	f7fe ffdc 	bl	80013a8 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	2050      	movs	r0, #80	@ 0x50
 80023f6:	f7fe ffd7 	bl	80013a8 <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2120      	movs	r1, #32
 80023fe:	203f      	movs	r0, #63	@ 0x3f
 8002400:	f7fe ffd2 	bl	80013a8 <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 8002404:	2200      	movs	r2, #0
 8002406:	21b7      	movs	r1, #183	@ 0xb7
 8002408:	2033      	movs	r0, #51	@ 0x33
 800240a:	f7fe ffcd 	bl	80013a8 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 800240e:	2200      	movs	r2, #0
 8002410:	2154      	movs	r1, #84	@ 0x54
 8002412:	2034      	movs	r0, #52	@ 0x34
 8002414:	f7fe ffc8 	bl	80013a8 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8002418:	2200      	movs	r2, #0
 800241a:	212a      	movs	r1, #42	@ 0x2a
 800241c:	2035      	movs	r0, #53	@ 0x35
 800241e:	f7fe ffc3 	bl	80013a8 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 8002422:	2200      	movs	r2, #0
 8002424:	213e      	movs	r1, #62	@ 0x3e
 8002426:	2036      	movs	r0, #54	@ 0x36
 8002428:	f7fe ffbe 	bl	80013a8 <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 800242c:	4822      	ldr	r0, [pc, #136]	@ (80024b8 <S2LP_Init+0x138>)
 800242e:	f7ff fa27 	bl	8001880 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 8002432:	2000      	movs	r0, #0
 8002434:	f7ff ff12 	bl	800225c <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 8002438:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800243c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002440:	2000      	movs	r0, #0
 8002442:	f7ff fecb 	bl	80021dc <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 8002446:	2200      	movs	r2, #0
 8002448:	2120      	movs	r1, #32
 800244a:	2030      	movs	r0, #48	@ 0x30
 800244c:	f7fe ffac 	bl	80013a8 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 8002450:	2200      	movs	r2, #0
 8002452:	2100      	movs	r1, #0
 8002454:	202e      	movs	r0, #46	@ 0x2e
 8002456:	f7fe ffa7 	bl	80013a8 <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 800245a:	f107 020c 	add.w	r2, r7, #12
 800245e:	f107 030b 	add.w	r3, r7, #11
 8002462:	4619      	mov	r1, r3
 8002464:	206c      	movs	r0, #108	@ 0x6c
 8002466:	f7fe ff61 	bl	800132c <S2LP_ReadReg>
 800246a:	4603      	mov	r3, r0
 800246c:	73fb      	strb	r3, [r7, #15]
	if (err) {
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <S2LP_Init+0xf8>
		return err;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	e015      	b.n	80024a4 <S2LP_Init+0x124>
	} else if (rco_conf != 0x45) {
 8002478:	7afb      	ldrb	r3, [r7, #11]
 800247a:	2b45      	cmp	r3, #69	@ 0x45
 800247c:	d006      	beq.n	800248c <S2LP_Init+0x10c>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
 800247e:	7afb      	ldrb	r3, [r7, #11]
 8002480:	4619      	mov	r1, r3
 8002482:	480e      	ldr	r0, [pc, #56]	@ (80024bc <S2LP_Init+0x13c>)
 8002484:	f006 fb9c 	bl	8008bc0 <iprintf>
		return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e00b      	b.n	80024a4 <S2LP_Init+0x124>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 800248c:	7b7b      	ldrb	r3, [r7, #13]
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <S2LP_Init+0x122>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
 8002498:	4809      	ldr	r0, [pc, #36]	@ (80024c0 <S2LP_Init+0x140>)
 800249a:	f006 fbf9 	bl	8008c90 <puts>
		return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <S2LP_Init+0x124>
	}

	return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	2000f938 	.word	0x2000f938
 80024b0:	1b4e81b5 	.word	0x1b4e81b5
 80024b4:	48001400 	.word	0x48001400
 80024b8:	33bca100 	.word	0x33bca100
 80024bc:	08009bb8 	.word	0x08009bb8
 80024c0:	08009c14 	.word	0x08009c14

080024c4 <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 80024ca:	1dfb      	adds	r3, r7, #7
 80024cc:	2200      	movs	r2, #0
 80024ce:	4619      	mov	r1, r3
 80024d0:	20fc      	movs	r0, #252	@ 0xfc
 80024d2:	f7fe ff2b 	bl	800132c <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 80024d6:	1dbb      	adds	r3, r7, #6
 80024d8:	2200      	movs	r2, #0
 80024da:	4619      	mov	r1, r3
 80024dc:	20fd      	movs	r0, #253	@ 0xfd
 80024de:	f7fe ff25 	bl	800132c <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <S2LP_IRQ_Handler+0x58>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <S2LP_IRQ_Handler+0x5c>)
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 8002502:	79bb      	ldrb	r3, [r7, #6]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <S2LP_IRQ_Handler+0x60>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000f935 	.word	0x2000f935
 8002520:	2000f936 	.word	0x2000f936
 8002524:	2000f934 	.word	0x2000f934

08002528 <step23_batch_fft>:

// Step 2 & 3 : Compute the full spectrogram and take the absolute value
// This function takes in a buffer of MEL_NUM_VEC * SAMPLES_NUM, and outputs the mel vectors in mel_vectors.
// The function computes the FFT of each vector in the buffer, and then computes the complex magnitude of each FFT.
void step23_batch_fft(q15_t *buffer)
{
 8002528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800252c:	f500 459f 	add.w	r5, r0, #20352	@ 0x4f80
 8002530:	f6ad 0d18 	subw	sp, sp, #2072	@ 0x818
 8002534:	1e84      	subs	r4, r0, #2
 8002536:	357e      	adds	r5, #126	@ 0x7e
	q15_t fft_buffer[SAMPLES_NUM*2];
	// 2.1 : Compute each FFT of size SAMPLES_NUM
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
		// Compute the FFT of each vector in the buffer
		arm_rfft_instance_q15 rfft_inst;
		arm_rfft_init_q15(&rfft_inst, SAMPLES_NUM, 0, 1);
 8002538:	2301      	movs	r3, #1
		arm_rfft_q15(&rfft_inst, &buffer[i*SAMPLES_NUM], fft_buffer);
 800253a:	f104 0802 	add.w	r8, r4, #2
		arm_rfft_init_q15(&rfft_inst, SAMPLES_NUM, 0, 1);
 800253e:	2200      	movs	r2, #0
 8002540:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002544:	4668      	mov	r0, sp
 8002546:	f005 fc11 	bl	8007d6c <arm_rfft_init_q15>
		arm_rfft_q15(&rfft_inst, &buffer[i*SAMPLES_NUM], fft_buffer);
 800254a:	4641      	mov	r1, r8
 800254c:	aa06      	add	r2, sp, #24
 800254e:	4668      	mov	r0, sp
 8002550:	f005 fb90 	bl	8007c74 <arm_rfft_q15>
			real = real > 0 ? real : -real; // abs(real)
 8002554:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002558:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
			real = real > 0 ? real : -real; // abs(real)
 800255c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002560:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
			real = real > 0 ? real : -real; // abs(real)
 8002564:	2a00      	cmp	r2, #0
 8002566:	bfb8      	it	lt
 8002568:	4252      	neglt	r2, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800256a:	2800      	cmp	r0, #0
 800256c:	bfb8      	it	lt
 800256e:	4240      	neglt	r0, r0
			real = real > 0 ? real : -real; // abs(real)
 8002570:	2b00      	cmp	r3, #0
 8002572:	bfb8      	it	lt
 8002574:	425b      	neglt	r3, r3
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002576:	2900      	cmp	r1, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002578:	b216      	sxth	r6, r2
 800257a:	fa0f f880 	sxth.w	r8, r0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800257e:	bfb8      	it	lt
 8002580:	4249      	neglt	r1, r1
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002582:	b21a      	sxth	r2, r3
 8002584:	4546      	cmp	r6, r8
 8002586:	b208      	sxth	r0, r1
 8002588:	bfb8      	it	lt
 800258a:	4646      	movlt	r6, r8
 800258c:	4282      	cmp	r2, r0
 800258e:	bfb8      	it	lt
 8002590:	4602      	movlt	r2, r0
 8002592:	8066      	strh	r6, [r4, #2]
 8002594:	f60d 0718 	addw	r7, sp, #2072	@ 0x818
 8002598:	1d26      	adds	r6, r4, #4
 800259a:	80a2      	strh	r2, [r4, #4]
	for (int i = 0; i < SAMPLES_NUM; i++)
 800259c:	ab08      	add	r3, sp, #32
			real = real > 0 ? real : -real; // abs(real)
 800259e:	f9b3 e000 	ldrsh.w	lr, [r3]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80025a2:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
			real = real > 0 ? real : -real; // abs(real)
 80025a6:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80025aa:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
			real = real > 0 ? real : -real; // abs(real)
 80025ae:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80025b2:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
			real = real > 0 ? real : -real; // abs(real)
 80025b6:	f1be 0f00 	cmp.w	lr, #0
 80025ba:	bfb8      	it	lt
 80025bc:	f1ce 0e00 	rsblt	lr, lr, #0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80025c0:	2900      	cmp	r1, #0
 80025c2:	bfb8      	it	lt
 80025c4:	4249      	neglt	r1, r1
			real = real > 0 ? real : -real; // abs(real)
 80025c6:	f1bc 0f00 	cmp.w	ip, #0
 80025ca:	bfb8      	it	lt
 80025cc:	f1cc 0c00 	rsblt	ip, ip, #0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80025d0:	2a00      	cmp	r2, #0
 80025d2:	bfb8      	it	lt
 80025d4:	4252      	neglt	r2, r2
			real = real > 0 ? real : -real; // abs(real)
 80025d6:	2800      	cmp	r0, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80025d8:	fa0f fe8e 	sxth.w	lr, lr
 80025dc:	b209      	sxth	r1, r1
			real = real > 0 ? real : -real; // abs(real)
 80025de:	bfb8      	it	lt
 80025e0:	4240      	neglt	r0, r0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80025e2:	f1b8 0f00 	cmp.w	r8, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80025e6:	fa0f fc8c 	sxth.w	ip, ip
 80025ea:	b212      	sxth	r2, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80025ec:	bfb8      	it	lt
 80025ee:	f1c8 0800 	rsblt	r8, r8, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80025f2:	458e      	cmp	lr, r1
 80025f4:	bfb8      	it	lt
 80025f6:	468e      	movlt	lr, r1
			real = real > 0 ? real : -real; // abs(real)
 80025f8:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80025fc:	f8a6 e002 	strh.w	lr, [r6, #2]
 8002600:	4594      	cmp	ip, r2
 8002602:	bfb8      	it	lt
 8002604:	4694      	movlt	ip, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002606:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 800260a:	f8a6 c004 	strh.w	ip, [r6, #4]
			real = real > 0 ? real : -real; // abs(real)
 800260e:	2900      	cmp	r1, #0
 8002610:	bfb8      	it	lt
 8002612:	4249      	neglt	r1, r1
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002614:	2a00      	cmp	r2, #0
 8002616:	bfb8      	it	lt
 8002618:	4252      	neglt	r2, r2
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 800261a:	b209      	sxth	r1, r1
 800261c:	b212      	sxth	r2, r2
 800261e:	b200      	sxth	r0, r0
 8002620:	fa0f f888 	sxth.w	r8, r8
 8002624:	4291      	cmp	r1, r2
 8002626:	bfb8      	it	lt
 8002628:	4611      	movlt	r1, r2
 800262a:	4540      	cmp	r0, r8
			real = real > 0 ? real : -real; // abs(real)
 800262c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002630:	8131      	strh	r1, [r6, #8]
 8002632:	bfb8      	it	lt
 8002634:	4640      	movlt	r0, r8
 8002636:	80f0      	strh	r0, [r6, #6]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002638:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
			real = real > 0 ? real : -real; // abs(real)
 800263c:	2a00      	cmp	r2, #0
 800263e:	bfb8      	it	lt
 8002640:	4252      	neglt	r2, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002642:	2800      	cmp	r0, #0
 8002644:	bfb8      	it	lt
 8002646:	4240      	neglt	r0, r0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002648:	fa0f f882 	sxth.w	r8, r2
 800264c:	fa0f fc80 	sxth.w	ip, r0
 8002650:	45e0      	cmp	r8, ip
	for (int i = 0; i < SAMPLES_NUM; i++)
 8002652:	f103 0314 	add.w	r3, r3, #20
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002656:	bfb8      	it	lt
 8002658:	46e0      	movlt	r8, ip
	for (int i = 0; i < SAMPLES_NUM; i++)
 800265a:	429f      	cmp	r7, r3
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 800265c:	f826 8f0a 	strh.w	r8, [r6, #10]!
	for (int i = 0; i < SAMPLES_NUM; i++)
 8002660:	d19d      	bne.n	800259e <step23_batch_fft+0x76>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002662:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002666:	42a5      	cmp	r5, r4
 8002668:	f47f af66 	bne.w	8002538 <step23_batch_fft+0x10>

		// 2.2 : Compute the complex magnitude of each FFT
		step3_approximate_magnitude(fft_buffer, &buffer[i*SAMPLES_NUM]);
	}
}
 800266c:	f60d 0d18 	addw	sp, sp, #2072	@ 0x818
 8002670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002674 <step4_mel_filter_apply>:

// Step 4 : Compute the mel vectors of each FFT (parallel processing)
// This function takes in a buffer of MEL_NUM_VEC * SAMPLES_NUM, and outputs the mel vectors in mel_vectors.
void step4_mel_filter_apply(q15_t *buffer, q15_t mel_vectors[MEL_NUM_VEC][MEL_VEC_LENGTH])
{
 8002674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002678:	f101 0b28 	add.w	fp, r1, #40	@ 0x28
 800267c:	b08b      	sub	sp, #44	@ 0x2c
 800267e:	460d      	mov	r5, r1
 8002680:	465f      	mov	r7, fp
 8002682:	4606      	mov	r6, r0
 8002684:	f501 7352 	add.w	r3, r1, #840	@ 0x348
   */
  __STATIC_FORCEINLINE q15_t clip_q63_to_q15(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 8002688:	f647 7aff 	movw	sl, #32767	@ 0x7fff
	// 4.1 : Compute the mel vectors of each FFT (parallel processing)
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
		mel_filter_apply(&buffer[i*SAMPLES_NUM], &mel_vectors[i][0], SAMPLES_NUM/2, MEL_VEC_LENGTH);
 800268c:	e9cd 3b00 	strd	r3, fp, [sp]
 8002690:	4c37      	ldr	r4, [pc, #220]	@ (8002770 <step4_mel_filter_apply+0xfc>)
		q15_t* fft_samples_1 = &fft_array[mel_triangles[i+1].idx_offset];
 8002692:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
		q15_t* fft_samples_2 = &fft_array[mel_triangles[i+2].idx_offset];
 8002694:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
		q15_t* fft_samples_3 = &fft_array[mel_triangles[i+3].idx_offset];
 8002698:	f8d4 1170 	ldr.w	r1, [r4, #368]	@ 0x170
		q15_t* fft_samples_0 = &fft_array[mel_triangles[i].idx_offset];
 800269c:	f854 0c04 	ldr.w	r0, [r4, #-4]
		q15_t* fft_samples_1 = &fft_array[mel_triangles[i+1].idx_offset];
 80026a0:	eb06 0b42 	add.w	fp, r6, r2, lsl #1
		q15_t* fft_samples_2 = &fft_array[mel_triangles[i+2].idx_offset];
 80026a4:	eb06 0843 	add.w	r8, r6, r3, lsl #1
		arm_dot_prod_q15(fft_samples_0, mel_values_0, mel_triangles[i].triangle_len, &mel_result_0);
 80026a8:	f854 2c08 	ldr.w	r2, [r4, #-8]
 80026ac:	eb06 0040 	add.w	r0, r6, r0, lsl #1
		q15_t* fft_samples_3 = &fft_array[mel_triangles[i+3].idx_offset];
 80026b0:	eb06 0941 	add.w	r9, r6, r1, lsl #1
		arm_dot_prod_q15(fft_samples_0, mel_values_0, mel_triangles[i].triangle_len, &mel_result_0);
 80026b4:	ab02      	add	r3, sp, #8
 80026b6:	4621      	mov	r1, r4
 80026b8:	f005 fc32 	bl	8007f20 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_1, mel_values_1, mel_triangles[i+1].triangle_len, &mel_result_1);
 80026bc:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80026be:	ab04      	add	r3, sp, #16
 80026c0:	4658      	mov	r0, fp
 80026c2:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
 80026c6:	f005 fc2b 	bl	8007f20 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_2, mel_values_2, mel_triangles[i+2].triangle_len, &mel_result_2);
 80026ca:	f8d4 20f0 	ldr.w	r2, [r4, #240]	@ 0xf0
 80026ce:	ab06      	add	r3, sp, #24
 80026d0:	4640      	mov	r0, r8
 80026d2:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80026d6:	f005 fc23 	bl	8007f20 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_3, mel_values_3, mel_triangles[i+3].triangle_len, &mel_result_3);
 80026da:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
 80026de:	ab08      	add	r3, sp, #32
 80026e0:	4648      	mov	r0, r9
 80026e2:	f504 71ba 	add.w	r1, r4, #372	@ 0x174
 80026e6:	f005 fc1b 	bl	8007f20 <arm_dot_prod_q15>
		mel_array[i]   = clip_q63_to_q15(mel_result_0);
 80026ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
		mel_array[i+1] = clip_q63_to_q15(mel_result_1);
 80026ee:	9905      	ldr	r1, [sp, #20]
 80026f0:	9804      	ldr	r0, [sp, #16]
 80026f2:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 80026f6:	bf0c      	ite	eq
 80026f8:	f342 33cf 	sbfxeq	r3, r2, #15, #16
 80026fc:	ea8a 73e3 	eorne.w	r3, sl, r3, asr #31
 8002700:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8002704:	bf0c      	ite	eq
 8002706:	f340 31cf 	sbfxeq	r1, r0, #15, #16
 800270a:	ea8a 71e1 	eorne.w	r1, sl, r1, asr #31
		mel_array[i+2] = clip_q63_to_q15(mel_result_2);
 800270e:	9a06      	ldr	r2, [sp, #24]
		mel_array[i]   = clip_q63_to_q15(mel_result_0);
 8002710:	802b      	strh	r3, [r5, #0]
		mel_array[i+2] = clip_q63_to_q15(mel_result_2);
 8002712:	9b07      	ldr	r3, [sp, #28]
		mel_array[i+3] = clip_q63_to_q15(mel_result_3);
 8002714:	9808      	ldr	r0, [sp, #32]
		mel_array[i+1] = clip_q63_to_q15(mel_result_1);
 8002716:	8069      	strh	r1, [r5, #2]
		mel_array[i+3] = clip_q63_to_q15(mel_result_3);
 8002718:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800271a:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 800271e:	bf14      	ite	ne
 8002720:	ea8a 73e3 	eorne.w	r3, sl, r3, asr #31
 8002724:	f342 33cf 	sbfxeq	r3, r2, #15, #16
 8002728:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
		mel_array[i+2] = clip_q63_to_q15(mel_result_2);
 800272c:	80ab      	strh	r3, [r5, #4]
 800272e:	d013      	beq.n	8002758 <step4_mel_filter_apply+0xe4>
 8002730:	ea8a 7ce1 	eor.w	ip, sl, r1, asr #31
		mel_array[i+3] = clip_q63_to_q15(mel_result_3);
 8002734:	f8a5 c006 	strh.w	ip, [r5, #6]
	for (size_t i = 0; i < mel_len; i += 4) {
 8002738:	3508      	adds	r5, #8
 800273a:	42bd      	cmp	r5, r7
 800273c:	f504 74f8 	add.w	r4, r4, #496	@ 0x1f0
 8002740:	d1a7      	bne.n	8002692 <step4_mel_filter_apply+0x1e>
 8002742:	e9dd 3e00 	ldrd	r3, lr, [sp]
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002746:	3728      	adds	r7, #40	@ 0x28
 8002748:	42bb      	cmp	r3, r7
 800274a:	4675      	mov	r5, lr
 800274c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002750:	d00a      	beq.n	8002768 <step4_mel_filter_apply+0xf4>
 8002752:	f10e 0b28 	add.w	fp, lr, #40	@ 0x28
 8002756:	e799      	b.n	800268c <step4_mel_filter_apply+0x18>
 8002758:	0bc2      	lsrs	r2, r0, #15
 800275a:	80ea      	strh	r2, [r5, #6]
	for (size_t i = 0; i < mel_len; i += 4) {
 800275c:	3508      	adds	r5, #8
 800275e:	42af      	cmp	r7, r5
 8002760:	f504 74f8 	add.w	r4, r4, #496	@ 0x1f0
 8002764:	d195      	bne.n	8002692 <step4_mel_filter_apply+0x1e>
 8002766:	e7ec      	b.n	8002742 <step4_mel_filter_apply+0xce>
	}
}
 8002768:	b00b      	add	sp, #44	@ 0x2c
 800276a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800276e:	bf00      	nop
 8002770:	08009e5c 	.word	0x08009e5c

08002774 <Full_spectrogram_compute>:

void Full_spectrogram_compute(q15_t* buffer, q15_t mel_vectors[MEL_NUM_VEC][MEL_VEC_LENGTH])
{
 8002774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002778:	4605      	mov	r5, r0
 800277a:	460e      	mov	r6, r1
	//    3. Compute the complex magnitude
	//    4. Compute the mel vectors

	// This function takes in a buffer of MEL_NUM_VEC * SAMPLES_NUM, and outputs the mel vectors in mel_vectors.

	start_cycle_count();
 800277c:	f000 fa9e 	bl	8002cbc <start_cycle_count>
	for (int i = 0; i < SAMPLES_NUM*MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002780:	f505 409f 	add.w	r0, r5, #20352	@ 0x4f80
 8002784:	1eab      	subs	r3, r5, #2
 8002786:	462c      	mov	r4, r5
 8002788:	307e      	adds	r0, #126	@ 0x7e
		buffer[i] = ((q15_t)buffer[i]<<3) - ((q15_t)(1<<14));
 800278a:	885a      	ldrh	r2, [r3, #2]
 800278c:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 8002790:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 8002794:	00d1      	lsls	r1, r2, #3
 8002796:	889a      	ldrh	r2, [r3, #4]
 8002798:	f5a1 4780 	sub.w	r7, r1, #16384	@ 0x4000
 800279c:	00d1      	lsls	r1, r2, #3
 800279e:	805f      	strh	r7, [r3, #2]
 80027a0:	f5a1 4780 	sub.w	r7, r1, #16384	@ 0x4000
 80027a4:	89da      	ldrh	r2, [r3, #14]
 80027a6:	8999      	ldrh	r1, [r3, #12]
 80027a8:	809f      	strh	r7, [r3, #4]
 80027aa:	88df      	ldrh	r7, [r3, #6]
 80027ac:	ea4f 08ce 	mov.w	r8, lr, lsl #3
 80027b0:	00c9      	lsls	r1, r1, #3
 80027b2:	00d2      	lsls	r2, r2, #3
 80027b4:	00ff      	lsls	r7, r7, #3
 80027b6:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80027ba:	f5a7 4780 	sub.w	r7, r7, #16384	@ 0x4000
 80027be:	f5a8 4e80 	sub.w	lr, r8, #16384	@ 0x4000
 80027c2:	f5a9 4c80 	sub.w	ip, r9, #16384	@ 0x4000
 80027c6:	f5a1 4880 	sub.w	r8, r1, #16384	@ 0x4000
 80027ca:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80027ce:	80df      	strh	r7, [r3, #6]
 80027d0:	81d9      	strh	r1, [r3, #14]
 80027d2:	f8a3 e008 	strh.w	lr, [r3, #8]
 80027d6:	f8a3 c00a 	strh.w	ip, [r3, #10]
 80027da:	f8a3 800c 	strh.w	r8, [r3, #12]
 80027de:	f833 2f10 	ldrh.w	r2, [r3, #16]!
 80027e2:	00d7      	lsls	r7, r2, #3
 80027e4:	f5a7 4180 	sub.w	r1, r7, #16384	@ 0x4000
	for (int i = 0; i < SAMPLES_NUM*MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80027e8:	4298      	cmp	r0, r3
		buffer[i] = ((q15_t)buffer[i]<<3) - ((q15_t)(1<<14));
 80027ea:	8019      	strh	r1, [r3, #0]
	for (int i = 0; i < SAMPLES_NUM*MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80027ec:	d1cd      	bne.n	800278a <Full_spectrogram_compute+0x16>
 80027ee:	2004      	movs	r0, #4
 80027f0:	2801      	cmp	r0, #1
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80027f2:	4f4d      	ldr	r7, [pc, #308]	@ (8002928 <Full_spectrogram_compute+0x1b4>)
 80027f4:	f505 49a0 	add.w	r9, r5, #20480	@ 0x5000
 80027f8:	d03a      	beq.n	8002870 <Full_spectrogram_compute+0xfc>
 80027fa:	2802      	cmp	r0, #2
 80027fc:	d02f      	beq.n	800285e <Full_spectrogram_compute+0xea>
 80027fe:	2803      	cmp	r0, #3
 8002800:	d024      	beq.n	800284c <Full_spectrogram_compute+0xd8>
 8002802:	b9d0      	cbnz	r0, 800283a <Full_spectrogram_compute+0xc6>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002804:	f505 6480 	add.w	r4, r5, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002808:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800280c:	462a      	mov	r2, r5
 800280e:	4639      	mov	r1, r7
 8002810:	4628      	mov	r0, r5
 8002812:	f005 fb27 	bl	8007e64 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002816:	f505 6800 	add.w	r8, r5, #2048	@ 0x800
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 800281a:	4622      	mov	r2, r4
 800281c:	4620      	mov	r0, r4
 800281e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002822:	4639      	mov	r1, r7
 8002824:	f005 fb1e 	bl	8007e64 <arm_mult_q15>
 8002828:	4642      	mov	r2, r8
 800282a:	4640      	mov	r0, r8
 800282c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002830:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002832:	f508 6480 	add.w	r4, r8, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002836:	f005 fb15 	bl	8007e64 <arm_mult_q15>
 800283a:	4622      	mov	r2, r4
 800283c:	4620      	mov	r0, r4
 800283e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002842:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002844:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002848:	f005 fb0c 	bl	8007e64 <arm_mult_q15>
 800284c:	4622      	mov	r2, r4
 800284e:	4620      	mov	r0, r4
 8002850:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002854:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002856:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 800285a:	f005 fb03 	bl	8007e64 <arm_mult_q15>
 800285e:	4622      	mov	r2, r4
 8002860:	4620      	mov	r0, r4
 8002862:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002866:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002868:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 800286c:	f005 fafa 	bl	8007e64 <arm_mult_q15>
 8002870:	4622      	mov	r2, r4
 8002872:	4620      	mov	r0, r4
 8002874:	f44f 7300 	mov.w	r3, #512	@ 0x200
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002878:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 800287c:	4639      	mov	r1, r7
 800287e:	f005 faf1 	bl	8007e64 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002882:	45a1      	cmp	r9, r4
 8002884:	d043      	beq.n	800290e <Full_spectrogram_compute+0x19a>
 8002886:	f504 6880 	add.w	r8, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 800288a:	4622      	mov	r2, r4
 800288c:	4620      	mov	r0, r4
 800288e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002892:	4639      	mov	r1, r7
 8002894:	f005 fae6 	bl	8007e64 <arm_mult_q15>
 8002898:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800289c:	4642      	mov	r2, r8
 800289e:	4639      	mov	r1, r7
 80028a0:	4640      	mov	r0, r8
 80028a2:	f005 fadf 	bl	8007e64 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80028a6:	f504 6200 	add.w	r2, r4, #2048	@ 0x800
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80028aa:	4610      	mov	r0, r2
 80028ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028b0:	4639      	mov	r1, r7
 80028b2:	f005 fad7 	bl	8007e64 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80028b6:	f504 6240 	add.w	r2, r4, #3072	@ 0xc00
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80028ba:	4610      	mov	r0, r2
 80028bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028c0:	4639      	mov	r1, r7
 80028c2:	f005 facf 	bl	8007e64 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80028c6:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80028ca:	4610      	mov	r0, r2
 80028cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028d0:	4639      	mov	r1, r7
 80028d2:	f005 fac7 	bl	8007e64 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80028d6:	f504 52a0 	add.w	r2, r4, #5120	@ 0x1400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80028da:	4610      	mov	r0, r2
 80028dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028e0:	4639      	mov	r1, r7
 80028e2:	f005 fabf 	bl	8007e64 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80028e6:	f504 52c0 	add.w	r2, r4, #6144	@ 0x1800
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80028ea:	4610      	mov	r0, r2
 80028ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028f0:	4639      	mov	r1, r7
 80028f2:	f005 fab7 	bl	8007e64 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80028f6:	f504 52e0 	add.w	r2, r4, #7168	@ 0x1c00
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80028fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028fe:	4639      	mov	r1, r7
 8002900:	4610      	mov	r0, r2
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002902:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002906:	f005 faad 	bl	8007e64 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800290a:	45a1      	cmp	r9, r4
 800290c:	d1bb      	bne.n	8002886 <Full_spectrogram_compute+0x112>

	// 1   : Format the signal (expand to 16-bit, remove DC, windowing)
	step1_123_batch_pre_process(buffer);

	// 2 & 3 : Compute each FFT of size SAMPLES_NUM and take the absolute value
	step23_batch_fft(buffer);
 800290e:	4628      	mov	r0, r5
 8002910:	f7ff fe0a 	bl	8002528 <step23_batch_fft>

	// 4   : Compute the mel vectors of each FFT (parallel processing)
	step4_mel_filter_apply(buffer, mel_vectors);
 8002914:	4628      	mov	r0, r5
 8002916:	4631      	mov	r1, r6
 8002918:	f7ff feac 	bl	8002674 <step4_mel_filter_apply>

	stop_cycle_count("Spectrogram compute");
 800291c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	stop_cycle_count("Spectrogram compute");
 8002920:	4802      	ldr	r0, [pc, #8]	@ (800292c <Full_spectrogram_compute+0x1b8>)
 8002922:	f000 b9eb 	b.w	8002cfc <stop_cycle_count>
 8002926:	bf00      	nop
 8002928:	20000000 	.word	0x20000000
 800292c:	08009e40 	.word	0x08009e40

08002930 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002930:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002932:	4811      	ldr	r0, [pc, #68]	@ (8002978 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002934:	4c11      	ldr	r4, [pc, #68]	@ (800297c <MX_SPI1_Init+0x4c>)
 8002936:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800293a:	2300      	movs	r3, #0
 800293c:	2208      	movs	r2, #8
 800293e:	e9c0 4100 	strd	r4, r1, [r0]
 8002942:	f44f 6ce0 	mov.w	ip, #1792	@ 0x700
 8002946:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800294a:	f04f 0e07 	mov.w	lr, #7
 800294e:	e9c0 3c02 	strd	r3, ip, [r0, #8]
 8002952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002956:	e9c0 2307 	strd	r2, r3, [r0, #28]
 800295a:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 800295e:	e9c0 e30b 	strd	lr, r3, [r0, #44]	@ 0x2c
 8002962:	6184      	str	r4, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002964:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002966:	f003 fb7f 	bl	8006068 <HAL_SPI_Init>
 800296a:	b900      	cbnz	r0, 800296e <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800296c:	bd10      	pop	{r4, pc}
 800296e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002972:	f7fe ba6d 	b.w	8000e50 <Error_Handler>
 8002976:	bf00      	nop
 8002978:	2000f940 	.word	0x2000f940
 800297c:	40013000 	.word	0x40013000

08002980 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002980:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8002982:	4b22      	ldr	r3, [pc, #136]	@ (8002a0c <HAL_SPI_MspInit+0x8c>)
 8002984:	6802      	ldr	r2, [r0, #0]
{
 8002986:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 800298a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002990:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002994:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 8002996:	d001      	beq.n	800299c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002998:	b00a      	add	sp, #40	@ 0x28
 800299a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800299c:	f503 4060 	add.w	r0, r3, #57344	@ 0xe000
 80029a0:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 80029a2:	f441 5580 	orr.w	r5, r1, #4096	@ 0x1000
 80029a6:	6605      	str	r5, [r0, #96]	@ 0x60
 80029a8:	6e06      	ldr	r6, [r0, #96]	@ 0x60
 80029aa:	f406 5380 	and.w	r3, r6, #4096	@ 0x1000
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80029b4:	f042 0101 	orr.w	r1, r2, #1
 80029b8:	64c1      	str	r1, [r0, #76]	@ 0x4c
 80029ba:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 80029bc:	f005 0601 	and.w	r6, r5, #1
 80029c0:	9602      	str	r6, [sp, #8]
 80029c2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029c4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80029c6:	f043 0210 	orr.w	r2, r3, #16
 80029ca:	64c2      	str	r2, [r0, #76]	@ 0x4c
 80029cc:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80029ce:	f000 0110 	and.w	r1, r0, #16
 80029d2:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2603      	movs	r6, #3
 80029d6:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029da:	22c0      	movs	r2, #192	@ 0xc0
 80029dc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ea:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ec:	f001 ff6e 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f6:	4806      	ldr	r0, [pc, #24]	@ (8002a10 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029f8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029fa:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a02:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a04:	f001 ff62 	bl	80048cc <HAL_GPIO_Init>
}
 8002a08:	b00a      	add	sp, #40	@ 0x28
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	40013000 	.word	0x40013000
 8002a10:	48001000 	.word	0x48001000

08002a14 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a14:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <HAL_MspInit+0x2c>)
 8002a16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a18:	f042 0001 	orr.w	r0, r2, #1
 8002a1c:	6618      	str	r0, [r3, #96]	@ 0x60
 8002a1e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
{
 8002a20:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	f001 0201 	and.w	r2, r1, #1
 8002a26:	9200      	str	r2, [sp, #0]
 8002a28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002a2c:	f040 5180 	orr.w	r1, r0, #268435456	@ 0x10000000
 8002a30:	6599      	str	r1, [r3, #88]	@ 0x58
 8002a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a34:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002a38:	9201      	str	r2, [sp, #4]
 8002a3a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a3c:	b002      	add	sp, #8
 8002a3e:	4770      	bx	lr
 8002a40:	40021000 	.word	0x40021000

08002a44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <NMI_Handler>
 8002a46:	bf00      	nop

08002a48 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <HardFault_Handler>
 8002a4a:	bf00      	nop

08002a4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <MemManage_Handler>
 8002a4e:	bf00      	nop

08002a50 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <BusFault_Handler>
 8002a52:	bf00      	nop

08002a54 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <UsageFault_Handler>
 8002a56:	bf00      	nop

08002a58 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop

08002a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop

08002a60 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop

08002a64 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a64:	f000 ba62 	b.w	8002f2c <HAL_IncTick>

08002a68 <EXTI3_IRQHandler>:
  */
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 8002a68:	2008      	movs	r0, #8
 8002a6a:	f002 b851 	b.w	8004b10 <HAL_GPIO_EXTI_IRQHandler>
 8002a6e:	bf00      	nop

08002a70 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a70:	4801      	ldr	r0, [pc, #4]	@ (8002a78 <DMA1_Channel1_IRQHandler+0x8>)
 8002a72:	f001 bedd 	b.w	8004830 <HAL_DMA_IRQHandler>
 8002a76:	bf00      	nop
 8002a78:	20000488 	.word	0x20000488

08002a7c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a7c:	4801      	ldr	r0, [pc, #4]	@ (8002a84 <TIM3_IRQHandler+0x8>)
 8002a7e:	f003 bea5 	b.w	80067cc <HAL_TIM_IRQHandler>
 8002a82:	bf00      	nop
 8002a84:	2000f9a8 	.word	0x2000f9a8

08002a88 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002a88:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a8c:	f002 b840 	b.w	8004b10 <HAL_GPIO_EXTI_IRQHandler>

08002a90 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a90:	490c      	ldr	r1, [pc, #48]	@ (8002ac4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a92:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac8 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002a94:	680b      	ldr	r3, [r1, #0]
{
 8002a96:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a98:	4c0c      	ldr	r4, [pc, #48]	@ (8002acc <_sbrk+0x3c>)
 8002a9a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002a9c:	b12b      	cbz	r3, 8002aaa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a9e:	4418      	add	r0, r3
 8002aa0:	4290      	cmp	r0, r2
 8002aa2:	d807      	bhi.n	8002ab4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002aa4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <_sbrk+0x40>)
 8002aac:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002aae:	4418      	add	r0, r3
 8002ab0:	4290      	cmp	r0, r2
 8002ab2:	d9f7      	bls.n	8002aa4 <_sbrk+0x14>
    errno = ENOMEM;
 8002ab4:	f006 fade 	bl	8009074 <__errno>
 8002ab8:	210c      	movs	r1, #12
    return (void *)-1;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
    errno = ENOMEM;
 8002abe:	6001      	str	r1, [r0, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd10      	pop	{r4, pc}
 8002ac4:	2000f9a4 	.word	0x2000f9a4
 8002ac8:	20050000 	.word	0x20050000
 8002acc:	00000400 	.word	0x00000400
 8002ad0:	2000fbd8 	.word	0x2000fbd8

08002ad4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ad4:	480e      	ldr	r0, [pc, #56]	@ (8002b10 <SystemInit+0x3c>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <SystemInit+0x40>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ad8:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8002adc:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8002ae0:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 8002ae4:	6818      	ldr	r0, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002ae6:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8002ae8:	f040 0201 	orr.w	r2, r0, #1
 8002aec:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002aee:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	f022 5ca8 	bic.w	ip, r2, #352321536	@ 0x15000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002af6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8002afa:	f42c 2210 	bic.w	r2, ip, #589824	@ 0x90000
 8002afe:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8002b00:	60d8      	str	r0, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	f420 2280 	bic.w	r2, r0, #262144	@ 0x40000
 8002b08:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002b0a:	6199      	str	r1, [r3, #24]
}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000ed00 	.word	0xe000ed00
 8002b14:	40021000 	.word	0x40021000

08002b18 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b18:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b1a:	481b      	ldr	r0, [pc, #108]	@ (8002b88 <MX_TIM3_Init+0x70>)
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b8c <MX_TIM3_Init+0x74>)
 8002b1e:	6002      	str	r2, [r0, #0]
{
 8002b20:	b089      	sub	sp, #36	@ 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b22:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 23;
 8002b24:	2117      	movs	r1, #23
 8002b26:	f04f 0c08 	mov.w	ip, #8
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002b2e:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b32:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.Prescaler = 23;
 8002b36:	e9c0 3c02 	strd	r3, ip, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3a:	9303      	str	r3, [sp, #12]
  htim3.Init.Prescaler = 23;
 8002b3c:	6041      	str	r1, [r0, #4]
 8002b3e:	6103      	str	r3, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 8;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b40:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b42:	f003 fcc1 	bl	80064c8 <HAL_TIM_Base_Init>
 8002b46:	b998      	cbnz	r0, 8002b70 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b4c:	480e      	ldr	r0, [pc, #56]	@ (8002b88 <MX_TIM3_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b4e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b50:	a904      	add	r1, sp, #16
 8002b52:	f003 fd87 	bl	8006664 <HAL_TIM_ConfigClockSource>
 8002b56:	b998      	cbnz	r0, 8002b80 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b58:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b5c:	480a      	ldr	r0, [pc, #40]	@ (8002b88 <MX_TIM3_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b5e:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b60:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b62:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b64:	f003 fede 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 8002b68:	b928      	cbnz	r0, 8002b76 <MX_TIM3_Init+0x5e>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b6a:	b009      	add	sp, #36	@ 0x24
 8002b6c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002b70:	f7fe f96e 	bl	8000e50 <Error_Handler>
 8002b74:	e7e8      	b.n	8002b48 <MX_TIM3_Init+0x30>
    Error_Handler();
 8002b76:	f7fe f96b 	bl	8000e50 <Error_Handler>
}
 8002b7a:	b009      	add	sp, #36	@ 0x24
 8002b7c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002b80:	f7fe f966 	bl	8000e50 <Error_Handler>
 8002b84:	e7e8      	b.n	8002b58 <MX_TIM3_Init+0x40>
 8002b86:	bf00      	nop
 8002b88:	2000f9a8 	.word	0x2000f9a8
 8002b8c:	40000400 	.word	0x40000400

08002b90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8002b90:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x40>)
 8002b92:	6802      	ldr	r2, [r0, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d000      	beq.n	8002b9a <HAL_TIM_Base_MspInit+0xa>
 8002b98:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b9a:	f503 3c03 	add.w	ip, r3, #134144	@ 0x20c00
{
 8002b9e:	b500      	push	{lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba0:	f8dc 1058 	ldr.w	r1, [ip, #88]	@ 0x58
 8002ba4:	f041 0302 	orr.w	r3, r1, #2
 8002ba8:	f8cc 3058 	str.w	r3, [ip, #88]	@ 0x58
 8002bac:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
{
 8002bb0:	b083      	sub	sp, #12

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bb2:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bba:	201d      	movs	r0, #29
 8002bbc:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bbe:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bc0:	f001 fa3e 	bl	8004040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bc4:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002bc6:	b003      	add	sp, #12
 8002bc8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bcc:	f001 ba74 	b.w	80040b8 <HAL_NVIC_EnableIRQ>
 8002bd0:	40000400 	.word	0x40000400
 8002bd4:	00000000 	.word	0x00000000

08002bd8 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bd8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8002c10 <MX_LPUART1_UART_Init+0x38>
{
 8002bdc:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 8002bde:	480e      	ldr	r0, [pc, #56]	@ (8002c18 <MX_LPUART1_UART_Init+0x40>)
 8002be0:	4c0e      	ldr	r4, [pc, #56]	@ (8002c1c <MX_LPUART1_UART_Init+0x44>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002be2:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 115200;
 8002be4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002be8:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = 115200;
 8002bea:	e9c0 4100 	strd	r4, r1, [r0]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bee:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002bf2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002bf6:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8002bfa:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002bfc:	f004 ff82 	bl	8007b04 <HAL_UART_Init>
 8002c00:	b900      	cbnz	r0, 8002c04 <MX_LPUART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002c02:	bd10      	pop	{r4, pc}
 8002c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002c08:	f7fe b922 	b.w	8000e50 <Error_Handler>
 8002c0c:	f3af 8000 	nop.w
	...
 8002c18:	2000f9f8 	.word	0x2000f9f8
 8002c1c:	40008000 	.word	0x40008000

08002c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c20:	b510      	push	{r4, lr}
 8002c22:	4604      	mov	r4, r0
 8002c24:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c26:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c28:	228c      	movs	r2, #140	@ 0x8c
 8002c2a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002c30:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002c34:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c36:	f006 f9bf 	bl	8008fb8 <memset>
  if(uartHandle->Instance==LPUART1)
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <HAL_UART_MspInit+0x90>)
 8002c3c:	6822      	ldr	r2, [r4, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d001      	beq.n	8002c46 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002c42:	b02a      	add	sp, #168	@ 0xa8
 8002c44:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002c46:	2120      	movs	r1, #32
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002c48:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c4c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002c4e:	9107      	str	r1, [sp, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002c50:	941a      	str	r4, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c52:	f002 fe3d 	bl	80058d0 <HAL_RCCEx_PeriphCLKConfig>
 8002c56:	bb20      	cbnz	r0, 8002ca2 <HAL_UART_MspInit+0x82>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002c58:	4816      	ldr	r0, [pc, #88]	@ (8002cb4 <HAL_UART_MspInit+0x94>)
 8002c5a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	65c2      	str	r2, [r0, #92]	@ 0x5c
 8002c62:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8002c64:	f001 0401 	and.w	r4, r1, #1
 8002c68:	9400      	str	r4, [sp, #0]
 8002c6a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c6c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002c6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c72:	64c2      	str	r2, [r0, #76]	@ 0x4c
 8002c74:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8002c76:	f000 0140 	and.w	r1, r0, #64	@ 0x40
 8002c7a:	9101      	str	r1, [sp, #4]
 8002c7c:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 8002c7e:	f001 ffff 	bl	8004c80 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c82:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8002ca8 <HAL_UART_MspInit+0x88>
 8002c86:	2200      	movs	r2, #0
 8002c88:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c8a:	480b      	ldr	r0, [pc, #44]	@ (8002cb8 <HAL_UART_MspInit+0x98>)
 8002c8c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c8e:	2408      	movs	r4, #8
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c94:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c98:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c9a:	f001 fe17 	bl	80048cc <HAL_GPIO_Init>
}
 8002c9e:	b02a      	add	sp, #168	@ 0xa8
 8002ca0:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002ca2:	f7fe f8d5 	bl	8000e50 <Error_Handler>
 8002ca6:	e7d7      	b.n	8002c58 <HAL_UART_MspInit+0x38>
 8002ca8:	00000180 	.word	0x00000180
 8002cac:	00000002 	.word	0x00000002
 8002cb0:	40008000 	.word	0x40008000
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	48001800 	.word	0x48001800

08002cbc <start_cycle_count>:

#if (NO_PERF == 0)

volatile uint8_t counting_cycles = 0;

void start_cycle_count() {
 8002cbc:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cbe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc2:	b672      	cpsid	i
	uint32_t prim = __get_PRIMASK();
	__disable_irq();
	if (counting_cycles) {
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <start_cycle_count+0x34>)
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	b95a      	cbnz	r2, 8002ce2 <start_cycle_count+0x26>
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
		Error_Handler();
	} else {
		counting_cycles = 1;
 8002cca:	2001      	movs	r0, #1
 8002ccc:	7018      	strb	r0, [r3, #0]
	}
	if (!prim) {
 8002cce:	b904      	cbnz	r4, 8002cd2 <start_cycle_count+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 8002cd0:	b662      	cpsie	i
		__enable_irq();
	}
	DWT->CTRL |= 1 ; // enable the counter
 8002cd2:	4c08      	ldr	r4, [pc, #32]	@ (8002cf4 <start_cycle_count+0x38>)
 8002cd4:	6823      	ldr	r3, [r4, #0]
	DWT->CYCCNT = 0; // reset the counter
 8002cd6:	2100      	movs	r1, #0
	DWT->CTRL |= 1 ; // enable the counter
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	6022      	str	r2, [r4, #0]
	DWT->CYCCNT = 0; // reset the counter
 8002cde:	6061      	str	r1, [r4, #4]
}
 8002ce0:	bd10      	pop	{r4, pc}
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
 8002ce2:	4805      	ldr	r0, [pc, #20]	@ (8002cf8 <start_cycle_count+0x3c>)
 8002ce4:	f005 ffd4 	bl	8008c90 <puts>
		Error_Handler();
 8002ce8:	f7fe f8b2 	bl	8000e50 <Error_Handler>
 8002cec:	e7ef      	b.n	8002cce <start_cycle_count+0x12>
 8002cee:	bf00      	nop
 8002cf0:	2000fa80 	.word	0x2000fa80
 8002cf4:	e0001000 	.word	0xe0001000
 8002cf8:	0800a84c 	.word	0x0800a84c

08002cfc <stop_cycle_count>:
void stop_cycle_count(char *s) {
 8002cfc:	b538      	push	{r3, r4, r5, lr}
	uint32_t res = DWT->CYCCNT;
 8002cfe:	4909      	ldr	r1, [pc, #36]	@ (8002d24 <stop_cycle_count+0x28>)
	counting_cycles = 0;
 8002d00:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <stop_cycle_count+0x2c>)
	uint32_t res = DWT->CYCCNT;
 8002d02:	684d      	ldr	r5, [r1, #4]
void stop_cycle_count(char *s) {
 8002d04:	4604      	mov	r4, r0
	counting_cycles = 0;
 8002d06:	2200      	movs	r2, #0
	printf("[PERF] ");
 8002d08:	4808      	ldr	r0, [pc, #32]	@ (8002d2c <stop_cycle_count+0x30>)
	counting_cycles = 0;
 8002d0a:	701a      	strb	r2, [r3, #0]
	printf("[PERF] ");
 8002d0c:	f005 ff58 	bl	8008bc0 <iprintf>
	printf(s);
 8002d10:	4620      	mov	r0, r4
 8002d12:	f005 ff55 	bl	8008bc0 <iprintf>
	printf(" %lu cycles.\r\n", res);
 8002d16:	4629      	mov	r1, r5
 8002d18:	4805      	ldr	r0, [pc, #20]	@ (8002d30 <stop_cycle_count+0x34>)
}
 8002d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf(" %lu cycles.\r\n", res);
 8002d1e:	f005 bf4f 	b.w	8008bc0 <iprintf>
 8002d22:	bf00      	nop
 8002d24:	e0001000 	.word	0xe0001000
 8002d28:	2000fa80 	.word	0x2000fa80
 8002d2c:	0800a870 	.word	0x0800a870
 8002d30:	0800a878 	.word	0x0800a878

08002d34 <hex_encode>:


// Encode the binary buffer buf of length len in the null-terminated string s
// (which must have length at least 2*len+1).
void hex_encode(char* s, const uint8_t* buf, size_t len) {
    s[2*len] = '\0';
 8002d34:	2300      	movs	r3, #0
 8002d36:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
    for (size_t i=0; i<len; i++) {
 8002d3a:	2a00      	cmp	r2, #0
 8002d3c:	f000 8088 	beq.w	8002e50 <hex_encode+0x11c>
 8002d40:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8002d44:	f1ac 0202 	sub.w	r2, ip, #2
void hex_encode(char* s, const uint8_t* buf, size_t len) {
 8002d48:	b500      	push	{lr}
 8002d4a:	eb00 0e0c 	add.w	lr, r0, ip
 8002d4e:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8002d52:	f10c 0c01 	add.w	ip, ip, #1
 8002d56:	f01c 0c03 	ands.w	ip, ip, #3
 8002d5a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e54 <hex_encode+0x120>)
 8002d5c:	f101 33ff 	add.w	r3, r1, #4294967295
 8002d60:	d031      	beq.n	8002dc6 <hex_encode+0x92>
 8002d62:	f1bc 0f01 	cmp.w	ip, #1
 8002d66:	d01e      	beq.n	8002da6 <hex_encode+0x72>
 8002d68:	f1bc 0f02 	cmp.w	ip, #2
 8002d6c:	d00d      	beq.n	8002d8a <hex_encode+0x56>
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002d6e:	460b      	mov	r3, r1
 8002d70:	7809      	ldrb	r1, [r1, #0]
 8002d72:	0909      	lsrs	r1, r1, #4
    for (size_t i=0; i<len; i++) {
 8002d74:	3002      	adds	r0, #2
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002d76:	5c51      	ldrb	r1, [r2, r1]
 8002d78:	f800 1c02 	strb.w	r1, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002d7c:	f893 c000 	ldrb.w	ip, [r3]
 8002d80:	f00c 010f 	and.w	r1, ip, #15
 8002d84:	5c51      	ldrb	r1, [r2, r1]
 8002d86:	f800 1c01 	strb.w	r1, [r0, #-1]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002d8a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002d8e:	0909      	lsrs	r1, r1, #4
    for (size_t i=0; i<len; i++) {
 8002d90:	3002      	adds	r0, #2
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002d92:	5c51      	ldrb	r1, [r2, r1]
 8002d94:	f800 1c02 	strb.w	r1, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002d98:	f893 c000 	ldrb.w	ip, [r3]
 8002d9c:	f00c 010f 	and.w	r1, ip, #15
 8002da0:	5c51      	ldrb	r1, [r2, r1]
 8002da2:	f800 1c01 	strb.w	r1, [r0, #-1]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002da6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002daa:	0909      	lsrs	r1, r1, #4
    for (size_t i=0; i<len; i++) {
 8002dac:	3002      	adds	r0, #2
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002dae:	5c51      	ldrb	r1, [r2, r1]
 8002db0:	f800 1c02 	strb.w	r1, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002db4:	f893 c000 	ldrb.w	ip, [r3]
 8002db8:	f00c 010f 	and.w	r1, ip, #15
 8002dbc:	5c51      	ldrb	r1, [r2, r1]
 8002dbe:	f800 1c01 	strb.w	r1, [r0, #-1]
    for (size_t i=0; i<len; i++) {
 8002dc2:	4586      	cmp	lr, r0
 8002dc4:	d042      	beq.n	8002e4c <hex_encode+0x118>
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002dc6:	f893 c001 	ldrb.w	ip, [r3, #1]
 8002dca:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    for (size_t i=0; i<len; i++) {
 8002dce:	1c81      	adds	r1, r0, #2
 8002dd0:	3008      	adds	r0, #8
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002dd2:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002dd6:	f800 cc08 	strb.w	ip, [r0, #-8]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002dda:	f893 c001 	ldrb.w	ip, [r3, #1]
 8002dde:	f00c 0c0f 	and.w	ip, ip, #15
    for (size_t i=0; i<len; i++) {
 8002de2:	4586      	cmp	lr, r0
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002de4:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002de8:	f800 cc07 	strb.w	ip, [r0, #-7]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002dec:	f893 c002 	ldrb.w	ip, [r3, #2]
 8002df0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8002df4:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002df8:	f800 cc06 	strb.w	ip, [r0, #-6]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002dfc:	f893 c002 	ldrb.w	ip, [r3, #2]
 8002e00:	f00c 0c0f 	and.w	ip, ip, #15
 8002e04:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002e08:	f881 c001 	strb.w	ip, [r1, #1]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002e0c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8002e10:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8002e14:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002e18:	f881 c002 	strb.w	ip, [r1, #2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002e1c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8002e20:	f00c 0c0f 	and.w	ip, ip, #15
 8002e24:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002e28:	f881 c003 	strb.w	ip, [r1, #3]
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 8002e2c:	f813 1f04 	ldrb.w	r1, [r3, #4]!
 8002e30:	ea4f 1111 	mov.w	r1, r1, lsr #4
 8002e34:	f812 c001 	ldrb.w	ip, [r2, r1]
 8002e38:	f800 cc02 	strb.w	ip, [r0, #-2]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 8002e3c:	7819      	ldrb	r1, [r3, #0]
 8002e3e:	f001 0c0f 	and.w	ip, r1, #15
 8002e42:	f812 100c 	ldrb.w	r1, [r2, ip]
 8002e46:	f800 1c01 	strb.w	r1, [r0, #-1]
    for (size_t i=0; i<len; i++) {
 8002e4a:	d1bc      	bne.n	8002dc6 <hex_encode+0x92>
    }
}
 8002e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	0800a888 	.word	0x0800a888

08002e58 <fast_debug_print>:

extern UART_HandleTypeDef hlpuart1; // Declared in main.c

void fast_debug_print(const char* data, size_t size) {
 8002e58:	4684      	mov	ip, r0
	// Send the data to the UART
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)data, size, HAL_MAX_DELAY);
 8002e5a:	b28a      	uxth	r2, r1
 8002e5c:	4802      	ldr	r0, [pc, #8]	@ (8002e68 <fast_debug_print+0x10>)
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	4661      	mov	r1, ip
 8002e64:	f003 bdb4 	b.w	80069d0 <HAL_UART_Transmit>
 8002e68:	2000f9f8 	.word	0x2000f9f8

08002e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ea4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e70:	f7ff fe30 	bl	8002ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e74:	480c      	ldr	r0, [pc, #48]	@ (8002ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e76:	490d      	ldr	r1, [pc, #52]	@ (8002eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e78:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb0 <LoopForever+0xe>)
  movs r3, #0
 8002e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e7c:	e002      	b.n	8002e84 <LoopCopyDataInit>

08002e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e82:	3304      	adds	r3, #4

08002e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e88:	d3f9      	bcc.n	8002e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002eb8 <LoopForever+0x16>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e90:	e001      	b.n	8002e96 <LoopFillZerobss>

08002e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e94:	3204      	adds	r2, #4

08002e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e98:	d3fb      	bcc.n	8002e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e9a:	f006 f8f1 	bl	8009080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e9e:	f7fe f8ff 	bl	80010a0 <main>

08002ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ea2:	e7fe      	b.n	8002ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ea4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eac:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8002eb0:	0801c748 	.word	0x0801c748
  ldr r2, =_sbss
 8002eb4:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 8002eb8:	2000fbd4 	.word	0x2000fbd4

08002ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ebc:	e7fe      	b.n	8002ebc <ADC1_2_IRQHandler>
	...

08002ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <HAL_InitTick+0x40>)
 8002ec4:	781c      	ldrb	r4, [r3, #0]
 8002ec6:	b90c      	cbnz	r4, 8002ecc <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ec8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002eca:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ecc:	490d      	ldr	r1, [pc, #52]	@ (8002f04 <HAL_InitTick+0x44>)
 8002ece:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ed2:	4605      	mov	r5, r0
 8002ed4:	fbb2 fcf4 	udiv	ip, r2, r4
 8002ed8:	6808      	ldr	r0, [r1, #0]
 8002eda:	fbb0 f0fc 	udiv	r0, r0, ip
 8002ede:	f001 f8f9 	bl	80040d4 <HAL_SYSTICK_Config>
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d1ef      	bne.n	8002ec8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee8:	2d0f      	cmp	r5, #15
 8002eea:	d8ed      	bhi.n	8002ec8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eec:	4602      	mov	r2, r0
 8002eee:	4629      	mov	r1, r5
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	f001 f8a4 	bl	8004040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	@ (8002f08 <HAL_InitTick+0x48>)
 8002efa:	4620      	mov	r0, r4
 8002efc:	601d      	str	r5, [r3, #0]
}
 8002efe:	bd38      	pop	{r3, r4, r5, pc}
 8002f00:	20000404 	.word	0x20000404
 8002f04:	20000400 	.word	0x20000400
 8002f08:	20000408 	.word	0x20000408

08002f0c <HAL_Init>:
{
 8002f0c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0e:	2003      	movs	r0, #3
 8002f10:	f001 f884 	bl	800401c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7ff ffd3 	bl	8002ec0 <HAL_InitTick>
 8002f1a:	b110      	cbz	r0, 8002f22 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002f1c:	2401      	movs	r4, #1
}
 8002f1e:	4620      	mov	r0, r4
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	4604      	mov	r4, r0
    HAL_MspInit();
 8002f24:	f7ff fd76 	bl	8002a14 <HAL_MspInit>
}
 8002f28:	4620      	mov	r0, r4
 8002f2a:	bd10      	pop	{r4, pc}

08002f2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002f2c:	4a03      	ldr	r2, [pc, #12]	@ (8002f3c <HAL_IncTick+0x10>)
 8002f2e:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <HAL_IncTick+0x14>)
 8002f30:	6811      	ldr	r1, [r2, #0]
 8002f32:	7818      	ldrb	r0, [r3, #0]
 8002f34:	4408      	add	r0, r1
 8002f36:	6010      	str	r0, [r2, #0]
}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	2000fa84 	.word	0x2000fa84
 8002f40:	20000404 	.word	0x20000404

08002f44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f44:	4b01      	ldr	r3, [pc, #4]	@ (8002f4c <HAL_GetTick+0x8>)
 8002f46:	6818      	ldr	r0, [r3, #0]
}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	2000fa84 	.word	0x2000fa84

08002f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f50:	b538      	push	{r3, r4, r5, lr}
 8002f52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff fff6 	bl	8002f44 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f58:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002f5a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002f5c:	d002      	beq.n	8002f64 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8002f5e:	4b16      	ldr	r3, [pc, #88]	@ (8002fb8 <HAL_Delay+0x68>)
 8002f60:	7818      	ldrb	r0, [r3, #0]
 8002f62:	4404      	add	r4, r0
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f64:	f7ff ffee 	bl	8002f44 <HAL_GetTick>
 8002f68:	1b41      	subs	r1, r0, r5
 8002f6a:	42a1      	cmp	r1, r4
 8002f6c:	d222      	bcs.n	8002fb4 <HAL_Delay+0x64>
 8002f6e:	f7ff ffe9 	bl	8002f44 <HAL_GetTick>
 8002f72:	1b42      	subs	r2, r0, r5
 8002f74:	42a2      	cmp	r2, r4
 8002f76:	d21d      	bcs.n	8002fb4 <HAL_Delay+0x64>
 8002f78:	f7ff ffe4 	bl	8002f44 <HAL_GetTick>
 8002f7c:	1b43      	subs	r3, r0, r5
 8002f7e:	42a3      	cmp	r3, r4
 8002f80:	d218      	bcs.n	8002fb4 <HAL_Delay+0x64>
 8002f82:	f7ff ffdf 	bl	8002f44 <HAL_GetTick>
 8002f86:	1b40      	subs	r0, r0, r5
 8002f88:	42a0      	cmp	r0, r4
 8002f8a:	d213      	bcs.n	8002fb4 <HAL_Delay+0x64>
 8002f8c:	f7ff ffda 	bl	8002f44 <HAL_GetTick>
 8002f90:	1b41      	subs	r1, r0, r5
 8002f92:	42a1      	cmp	r1, r4
 8002f94:	d20e      	bcs.n	8002fb4 <HAL_Delay+0x64>
 8002f96:	f7ff ffd5 	bl	8002f44 <HAL_GetTick>
 8002f9a:	1b42      	subs	r2, r0, r5
 8002f9c:	42a2      	cmp	r2, r4
 8002f9e:	d209      	bcs.n	8002fb4 <HAL_Delay+0x64>
 8002fa0:	f7ff ffd0 	bl	8002f44 <HAL_GetTick>
 8002fa4:	1b43      	subs	r3, r0, r5
 8002fa6:	42a3      	cmp	r3, r4
 8002fa8:	d204      	bcs.n	8002fb4 <HAL_Delay+0x64>
 8002faa:	f7ff ffcb 	bl	8002f44 <HAL_GetTick>
 8002fae:	1b40      	subs	r0, r0, r5
 8002fb0:	42a0      	cmp	r0, r4
 8002fb2:	d3d7      	bcc.n	8002f64 <HAL_Delay+0x14>
  {
  }
}
 8002fb4:	bd38      	pop	{r3, r4, r5, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000404 	.word	0x20000404

08002fbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b530      	push	{r4, r5, lr}
 8002fbe:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d062      	beq.n	800308e <HAL_ADC_Init+0xd2>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fc8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8002fca:	4604      	mov	r4, r0
 8002fcc:	2d00      	cmp	r5, #0
 8002fce:	f000 80c8 	beq.w	8003162 <HAL_ADC_Init+0x1a6>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fd2:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	0092      	lsls	r2, r2, #2
 8002fd8:	d505      	bpl.n	8002fe6 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fda:	6898      	ldr	r0, [r3, #8]
 8002fdc:	f020 4120 	bic.w	r1, r0, #2684354560	@ 0xa0000000
 8002fe0:	f021 053f 	bic.w	r5, r1, #63	@ 0x3f
 8002fe4:	609d      	str	r5, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	00d5      	lsls	r5, r2, #3
 8002fea:	d43d      	bmi.n	8003068 <HAL_ADC_Init+0xac>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fec:	496f      	ldr	r1, [pc, #444]	@ (80031ac <HAL_ADC_Init+0x1f0>)
 8002fee:	4870      	ldr	r0, [pc, #448]	@ (80031b0 <HAL_ADC_Init+0x1f4>)
 8002ff0:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CR,
 8002ff2:	6899      	ldr	r1, [r3, #8]
 8002ff4:	09aa      	lsrs	r2, r5, #6
 8002ff6:	fba0 0502 	umull	r0, r5, r0, r2
 8002ffa:	09aa      	lsrs	r2, r5, #6
 8002ffc:	f021 4010 	bic.w	r0, r1, #2415919104	@ 0x90000000
 8003000:	f020 0c3f 	bic.w	ip, r0, #63	@ 0x3f
 8003004:	3201      	adds	r2, #1
 8003006:	f04c 5180 	orr.w	r1, ip, #268435456	@ 0x10000000
 800300a:	0055      	lsls	r5, r2, #1
 800300c:	6099      	str	r1, [r3, #8]
 800300e:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 8003010:	9801      	ldr	r0, [sp, #4]
 8003012:	2800      	cmp	r0, #0
 8003014:	d028      	beq.n	8003068 <HAL_ADC_Init+0xac>
    {
      wait_loop_index--;
 8003016:	9a01      	ldr	r2, [sp, #4]
 8003018:	1e51      	subs	r1, r2, #1
 800301a:	9101      	str	r1, [sp, #4]
    while (wait_loop_index != 0UL)
 800301c:	9d01      	ldr	r5, [sp, #4]
 800301e:	b31d      	cbz	r5, 8003068 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8003020:	9801      	ldr	r0, [sp, #4]
 8003022:	1e42      	subs	r2, r0, #1
 8003024:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8003026:	9901      	ldr	r1, [sp, #4]
 8003028:	b1f1      	cbz	r1, 8003068 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 800302a:	9d01      	ldr	r5, [sp, #4]
 800302c:	1e68      	subs	r0, r5, #1
 800302e:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8003030:	9a01      	ldr	r2, [sp, #4]
 8003032:	b1ca      	cbz	r2, 8003068 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8003034:	9901      	ldr	r1, [sp, #4]
 8003036:	1e4d      	subs	r5, r1, #1
 8003038:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 800303a:	9801      	ldr	r0, [sp, #4]
 800303c:	b1a0      	cbz	r0, 8003068 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 800303e:	9a01      	ldr	r2, [sp, #4]
 8003040:	1e51      	subs	r1, r2, #1
 8003042:	9101      	str	r1, [sp, #4]
    while (wait_loop_index != 0UL)
 8003044:	9d01      	ldr	r5, [sp, #4]
 8003046:	b17d      	cbz	r5, 8003068 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8003048:	9801      	ldr	r0, [sp, #4]
 800304a:	1e42      	subs	r2, r0, #1
 800304c:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 800304e:	9901      	ldr	r1, [sp, #4]
 8003050:	b151      	cbz	r1, 8003068 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8003052:	9d01      	ldr	r5, [sp, #4]
 8003054:	1e68      	subs	r0, r5, #1
 8003056:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8003058:	9a01      	ldr	r2, [sp, #4]
 800305a:	b12a      	cbz	r2, 8003068 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 800305c:	9901      	ldr	r1, [sp, #4]
 800305e:	1e4d      	subs	r5, r1, #1
 8003060:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 8003062:	9801      	ldr	r0, [sp, #4]
 8003064:	2800      	cmp	r0, #0
 8003066:	d1d6      	bne.n	8003016 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	00d0      	lsls	r0, r2, #3
 800306c:	d412      	bmi.n	8003094 <HAL_ADC_Init+0xd8>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003070:	f041 0510 	orr.w	r5, r1, #16
 8003074:	65a5      	str	r5, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003076:	6de2      	ldr	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003078:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307a:	4302      	orrs	r2, r0
 800307c:	65e2      	str	r2, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	0749      	lsls	r1, r1, #29
 8003082:	d50c      	bpl.n	800309e <HAL_ADC_Init+0xe2>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003084:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003086:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003088:	f040 0210 	orr.w	r2, r0, #16
 800308c:	65a2      	str	r2, [r4, #88]	@ 0x58
    return HAL_ERROR;
 800308e:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003090:	b003      	add	sp, #12
 8003092:	bd30      	pop	{r4, r5, pc}
 8003094:	6899      	ldr	r1, [r3, #8]
 8003096:	0749      	lsls	r1, r1, #29
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003098:	f04f 0000 	mov.w	r0, #0
 800309c:	d4f2      	bmi.n	8003084 <HAL_ADC_Init+0xc8>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800309e:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 80030a0:	06ea      	lsls	r2, r5, #27
 80030a2:	d4f0      	bmi.n	8003086 <HAL_ADC_Init+0xca>
    ADC_STATE_CLR_SET(hadc->State,
 80030a4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80030a6:	f422 7181 	bic.w	r1, r2, #258	@ 0x102
 80030aa:	f041 0502 	orr.w	r5, r1, #2
 80030ae:	65a5      	str	r5, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	07d5      	lsls	r5, r2, #31
 80030b4:	d410      	bmi.n	80030d8 <HAL_ADC_Init+0x11c>
 80030b6:	4d3f      	ldr	r5, [pc, #252]	@ (80031b4 <HAL_ADC_Init+0x1f8>)
 80030b8:	493f      	ldr	r1, [pc, #252]	@ (80031b8 <HAL_ADC_Init+0x1fc>)
 80030ba:	6889      	ldr	r1, [r1, #8]
 80030bc:	68aa      	ldr	r2, [r5, #8]
 80030be:	4d3f      	ldr	r5, [pc, #252]	@ (80031bc <HAL_ADC_Init+0x200>)
 80030c0:	430a      	orrs	r2, r1
 80030c2:	68a9      	ldr	r1, [r5, #8]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	07d1      	lsls	r1, r2, #31
 80030c8:	d406      	bmi.n	80030d8 <HAL_ADC_Init+0x11c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030ca:	493d      	ldr	r1, [pc, #244]	@ (80031c0 <HAL_ADC_Init+0x204>)
 80030cc:	6865      	ldr	r5, [r4, #4]
 80030ce:	688a      	ldr	r2, [r1, #8]
 80030d0:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 80030d4:	432a      	orrs	r2, r5
 80030d6:	608a      	str	r2, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 80030d8:	68e5      	ldr	r5, [r4, #12]
 80030da:	6b62      	ldr	r2, [r4, #52]	@ 0x34
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030dc:	f894 1020 	ldrb.w	r1, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030e0:	f894 c019 	ldrb.w	ip, [r4, #25]
                 hadc->Init.DataAlign                                                   |
 80030e4:	432a      	orrs	r2, r5
 80030e6:	68a5      	ldr	r5, [r4, #8]
 80030e8:	432a      	orrs	r2, r5
 80030ea:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030ee:	2901      	cmp	r1, #1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030f4:	d043      	beq.n	800317e <HAL_ADC_Init+0x1c2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030f6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80030f8:	b121      	cbz	r1, 8003104 <HAL_ADC_Init+0x148>
                   | hadc->Init.ExternalTrigConvEdge
 80030fa:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030fc:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003100:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003102:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003104:	68dd      	ldr	r5, [r3, #12]
 8003106:	492f      	ldr	r1, [pc, #188]	@ (80031c4 <HAL_ADC_Init+0x208>)
 8003108:	4029      	ands	r1, r5
 800310a:	4311      	orrs	r1, r2
 800310c:	60d9      	str	r1, [r3, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	0712      	lsls	r2, r2, #28
 8003112:	d417      	bmi.n	8003144 <HAL_ADC_Init+0x188>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003114:	68d9      	ldr	r1, [r3, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003116:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800311a:	f894 c018 	ldrb.w	ip, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800311e:	f421 4580 	bic.w	r5, r1, #16384	@ 0x4000
 8003122:	f025 0106 	bic.w	r1, r5, #6
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003126:	0055      	lsls	r5, r2, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003128:	ea45 328c 	orr.w	r2, r5, ip, lsl #14
 800312c:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 800312e:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003130:	430a      	orrs	r2, r1
 8003132:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003134:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8003138:	2901      	cmp	r1, #1
 800313a:	d025      	beq.n	8003188 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	f022 0501 	bic.w	r5, r2, #1
 8003142:	611d      	str	r5, [r3, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003144:	6921      	ldr	r1, [r4, #16]
 8003146:	2901      	cmp	r1, #1
 8003148:	d011      	beq.n	800316e <HAL_ADC_Init+0x1b2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800314a:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 800314c:	f025 020f 	bic.w	r2, r5, #15
 8003150:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003152:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003154:	f023 0503 	bic.w	r5, r3, #3
 8003158:	f045 0101 	orr.w	r1, r5, #1
 800315c:	65a1      	str	r1, [r4, #88]	@ 0x58
}
 800315e:	b003      	add	sp, #12
 8003160:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003162:	f7fd faa9 	bl	80006b8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003166:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003168:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 800316c:	e731      	b.n	8002fd2 <HAL_ADC_Init+0x16>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800316e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003170:	69e5      	ldr	r5, [r4, #28]
 8003172:	f021 010f 	bic.w	r1, r1, #15
 8003176:	1e6a      	subs	r2, r5, #1
 8003178:	430a      	orrs	r2, r1
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
 800317c:	e7e9      	b.n	8003152 <HAL_ADC_Init+0x196>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800317e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003180:	1e4d      	subs	r5, r1, #1
 8003182:	ea42 4245 	orr.w	r2, r2, r5, lsl #17
 8003186:	e7b6      	b.n	80030f6 <HAL_ADC_Init+0x13a>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003188:	6919      	ldr	r1, [r3, #16]
 800318a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800318c:	f421 65ff 	bic.w	r5, r1, #2040	@ 0x7f8
 8003190:	f025 0104 	bic.w	r1, r5, #4
 8003194:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8003196:	432a      	orrs	r2, r5
 8003198:	430a      	orrs	r2, r1
 800319a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800319c:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800319e:	430a      	orrs	r2, r1
 80031a0:	432a      	orrs	r2, r5
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	611a      	str	r2, [r3, #16]
 80031a8:	e7cc      	b.n	8003144 <HAL_ADC_Init+0x188>
 80031aa:	bf00      	nop
 80031ac:	20000400 	.word	0x20000400
 80031b0:	053e2d63 	.word	0x053e2d63
 80031b4:	50040100 	.word	0x50040100
 80031b8:	50040000 	.word	0x50040000
 80031bc:	50040200 	.word	0x50040200
 80031c0:	50040300 	.word	0x50040300
 80031c4:	fff0c007 	.word	0xfff0c007

080031c8 <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031c8:	4a44      	ldr	r2, [pc, #272]	@ (80032dc <HAL_ADC_PollForConversion+0x114>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80031ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031ce:	6944      	ldr	r4, [r0, #20]
 80031d0:	6897      	ldr	r7, [r2, #8]
 80031d2:	2c08      	cmp	r4, #8
{
 80031d4:	4605      	mov	r5, r0
 80031d6:	460e      	mov	r6, r1
 80031d8:	f007 071f 	and.w	r7, r7, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031dc:	d009      	beq.n	80031f2 <HAL_ADC_PollForConversion+0x2a>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031de:	f240 2321 	movw	r3, #545	@ 0x221
 80031e2:	40fb      	lsrs	r3, r7
 80031e4:	07d8      	lsls	r0, r3, #31
 80031e6:	d464      	bmi.n	80032b2 <HAL_ADC_PollForConversion+0xea>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80031e8:	6894      	ldr	r4, [r2, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031ea:	f414 4f60 	tst.w	r4, #57344	@ 0xe000
 80031ee:	d164      	bne.n	80032ba <HAL_ADC_PollForConversion+0xf2>
        tmp_Flag_End = (ADC_FLAG_EOC);
 80031f0:	2404      	movs	r4, #4
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80031f2:	f7ff fea7 	bl	8002f44 <HAL_GetTick>
 80031f6:	1c72      	adds	r2, r6, #1

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031f8:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80031fa:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031fc:	d140      	bne.n	8003280 <HAL_ADC_PollForConversion+0xb8>
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	420c      	tst	r4, r1
 8003202:	d114      	bne.n	800322e <HAL_ADC_PollForConversion+0x66>
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4214      	tst	r4, r2
 8003208:	d111      	bne.n	800322e <HAL_ADC_PollForConversion+0x66>
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	4204      	tst	r4, r0
 800320e:	d10e      	bne.n	800322e <HAL_ADC_PollForConversion+0x66>
 8003210:	681e      	ldr	r6, [r3, #0]
 8003212:	4234      	tst	r4, r6
 8003214:	d10b      	bne.n	800322e <HAL_ADC_PollForConversion+0x66>
 8003216:	6819      	ldr	r1, [r3, #0]
 8003218:	420c      	tst	r4, r1
 800321a:	d108      	bne.n	800322e <HAL_ADC_PollForConversion+0x66>
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4214      	tst	r4, r2
 8003220:	d105      	bne.n	800322e <HAL_ADC_PollForConversion+0x66>
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	4204      	tst	r4, r0
 8003226:	d102      	bne.n	800322e <HAL_ADC_PollForConversion+0x66>
 8003228:	681e      	ldr	r6, [r3, #0]
 800322a:	4234      	tst	r4, r6
 800322c:	d0e7      	beq.n	80031fe <HAL_ADC_PollForConversion+0x36>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800322e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8003230:	f441 7200 	orr.w	r2, r1, #512	@ 0x200
 8003234:	65aa      	str	r2, [r5, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003236:	68d8      	ldr	r0, [r3, #12]
 8003238:	f410 6f40 	tst.w	r0, #3072	@ 0xc00
 800323c:	d10f      	bne.n	800325e <HAL_ADC_PollForConversion+0x96>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800323e:	7e6e      	ldrb	r6, [r5, #25]
 8003240:	b96e      	cbnz	r6, 800325e <HAL_ADC_PollForConversion+0x96>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	070e      	lsls	r6, r1, #28
 8003246:	d50a      	bpl.n	800325e <HAL_ADC_PollForConversion+0x96>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003248:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 800324a:	f422 7080 	bic.w	r0, r2, #256	@ 0x100
 800324e:	65a8      	str	r0, [r5, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003250:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8003252:	04f0      	lsls	r0, r6, #19
 8003254:	d403      	bmi.n	800325e <HAL_ADC_PollForConversion+0x96>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003256:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8003258:	f041 0201 	orr.w	r2, r1, #1
 800325c:	65aa      	str	r2, [r5, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800325e:	4d20      	ldr	r5, [pc, #128]	@ (80032e0 <HAL_ADC_PollForConversion+0x118>)
 8003260:	42ab      	cmp	r3, r5
 8003262:	d01b      	beq.n	800329c <HAL_ADC_PollForConversion+0xd4>
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003264:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003266:	68de      	ldr	r6, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003268:	d021      	beq.n	80032ae <HAL_ADC_PollForConversion+0xe6>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800326a:	0472      	lsls	r2, r6, #17
 800326c:	d401      	bmi.n	8003272 <HAL_ADC_PollForConversion+0xaa>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800326e:	240c      	movs	r4, #12
 8003270:	601c      	str	r4, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003272:	2000      	movs	r0, #0
}
 8003274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003278:	b916      	cbnz	r6, 8003280 <HAL_ADC_PollForConversion+0xb8>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4214      	tst	r4, r2
 800327e:	d023      	beq.n	80032c8 <HAL_ADC_PollForConversion+0x100>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	4220      	tst	r0, r4
 8003284:	d1d3      	bne.n	800322e <HAL_ADC_PollForConversion+0x66>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003286:	f7ff fe5d 	bl	8002f44 <HAL_GetTick>
 800328a:	eba0 0108 	sub.w	r1, r0, r8
 800328e:	42b1      	cmp	r1, r6
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003290:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003292:	d9f1      	bls.n	8003278 <HAL_ADC_PollForConversion+0xb0>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4214      	tst	r4, r2
 8003298:	d1f2      	bne.n	8003280 <HAL_ADC_PollForConversion+0xb8>
 800329a:	e015      	b.n	80032c8 <HAL_ADC_PollForConversion+0x100>
 800329c:	f240 2021 	movw	r0, #545	@ 0x221
 80032a0:	40f8      	lsrs	r0, r7
 80032a2:	07c1      	lsls	r1, r0, #31
 80032a4:	d4de      	bmi.n	8003264 <HAL_ADC_PollForConversion+0x9c>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032a6:	4f0f      	ldr	r7, [pc, #60]	@ (80032e4 <HAL_ADC_PollForConversion+0x11c>)
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80032a8:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032aa:	68fe      	ldr	r6, [r7, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80032ac:	d1dd      	bne.n	800326a <HAL_ADC_PollForConversion+0xa2>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80032ae:	601c      	str	r4, [r3, #0]
 80032b0:	e7df      	b.n	8003272 <HAL_ADC_PollForConversion+0xaa>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80032b2:	6828      	ldr	r0, [r5, #0]
 80032b4:	68c1      	ldr	r1, [r0, #12]
 80032b6:	07c9      	lsls	r1, r1, #31
 80032b8:	d59a      	bpl.n	80031f0 <HAL_ADC_PollForConversion+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ba:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80032bc:	f046 0220 	orr.w	r2, r6, #32
 80032c0:	65aa      	str	r2, [r5, #88]	@ 0x58
        return HAL_ERROR;
 80032c2:	2001      	movs	r0, #1
}
 80032c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 80032ca:	2400      	movs	r4, #0
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032cc:	f040 0604 	orr.w	r6, r0, #4
 80032d0:	65ae      	str	r6, [r5, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 80032d2:	f885 4054 	strb.w	r4, [r5, #84]	@ 0x54
          return HAL_TIMEOUT;
 80032d6:	2003      	movs	r0, #3
 80032d8:	e7cc      	b.n	8003274 <HAL_ADC_PollForConversion+0xac>
 80032da:	bf00      	nop
 80032dc:	50040300 	.word	0x50040300
 80032e0:	50040100 	.word	0x50040100
 80032e4:	50040000 	.word	0x50040000

080032e8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032e8:	6803      	ldr	r3, [r0, #0]
 80032ea:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop

080032f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032f0:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032f2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80032f4:	f7fd fb82 	bl	80009fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032f8:	bd08      	pop	{r3, pc}
 80032fa:	bf00      	nop

080032fc <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop

08003300 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003300:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003302:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003304:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8003308:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800330a:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800330c:	d11d      	bne.n	800334a <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800330e:	6818      	ldr	r0, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003310:	f444 7200 	orr.w	r2, r4, #512	@ 0x200
 8003314:	659a      	str	r2, [r3, #88]	@ 0x58
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003316:	6804      	ldr	r4, [r0, #0]
 8003318:	68c1      	ldr	r1, [r0, #12]
 800331a:	f014 0f08 	tst.w	r4, #8
 800331e:	d01b      	beq.n	8003358 <ADC_DMAConvCplt+0x58>
 8003320:	f411 6f40 	tst.w	r1, #3072	@ 0xc00
 8003324:	d10d      	bne.n	8003342 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003326:	68c0      	ldr	r0, [r0, #12]
 8003328:	0484      	lsls	r4, r0, #18
 800332a:	d40a      	bmi.n	8003342 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800332c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800332e:	f422 7480 	bic.w	r4, r2, #256	@ 0x100
 8003332:	659c      	str	r4, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003334:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8003336:	04c9      	lsls	r1, r1, #19
 8003338:	d403      	bmi.n	8003342 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800333a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800333c:	f040 0201 	orr.w	r2, r0, #1
 8003340:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fb6e 	bl	8000a24 <HAL_ADC_ConvCpltCallback>
}
 8003348:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800334a:	06e2      	lsls	r2, r4, #27
 800334c:	d40a      	bmi.n	8003364 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800334e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
}
 8003350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003354:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8003356:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003358:	0788      	lsls	r0, r1, #30
 800335a:	d5e7      	bpl.n	800332c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd fb61 	bl	8000a24 <HAL_ADC_ConvCpltCallback>
 8003362:	e7f1      	b.n	8003348 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ffc9 	bl	80032fc <HAL_ADC_ErrorCallback>
}
 800336a:	bd10      	pop	{r4, pc}

0800336c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800336c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 800336e:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003370:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003372:	f043 0140 	orr.w	r1, r3, #64	@ 0x40
 8003376:	6581      	str	r1, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003378:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800337a:	f042 0304 	orr.w	r3, r2, #4
 800337e:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003380:	f7ff ffbc 	bl	80032fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003384:	bd08      	pop	{r3, pc}
 8003386:	bf00      	nop

08003388 <HAL_ADC_ConfigChannel>:
{
 8003388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 800338c:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
{
 8003390:	b082      	sub	sp, #8
 8003392:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003394:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003396:	f04f 0000 	mov.w	r0, #0
 800339a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800339c:	f000 8162 	beq.w	8003664 <HAL_ADC_ConfigChannel+0x2dc>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033a0:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 80033a2:	2001      	movs	r0, #1
 80033a4:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033a8:	68a5      	ldr	r5, [r4, #8]
 80033aa:	f015 0604 	ands.w	r6, r5, #4
 80033ae:	d154      	bne.n	800345a <HAL_ADC_ConfigChannel+0xd2>
    uint32_t config_rank = pConfig->Rank;
 80033b0:	684f      	ldr	r7, [r1, #4]
    if (pConfig->Rank <= 5U)
 80033b2:	2f05      	cmp	r7, #5
 80033b4:	f240 8097 	bls.w	80034e6 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 80033b8:	f007 051f 	and.w	r5, r7, #31
 80033bc:	201f      	movs	r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80033be:	09ba      	lsrs	r2, r7, #6
  MODIFY_REG(*preg,
 80033c0:	fa00 f705 	lsl.w	r7, r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80033c4:	f002 060c 	and.w	r6, r2, #12
  MODIFY_REG(*preg,
 80033c8:	ea6f 0e07 	mvn.w	lr, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80033cc:	f104 0830 	add.w	r8, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 80033d0:	680a      	ldr	r2, [r1, #0]
 80033d2:	f858 0006 	ldr.w	r0, [r8, r6]
 80033d6:	f3c2 6784 	ubfx	r7, r2, #26, #5
 80033da:	40af      	lsls	r7, r5
 80033dc:	ea00 050e 	and.w	r5, r0, lr
 80033e0:	432f      	orrs	r7, r5
 80033e2:	f848 7006 	str.w	r7, [r8, r6]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033e6:	68a6      	ldr	r6, [r4, #8]
 80033e8:	0777      	lsls	r7, r6, #29
 80033ea:	d540      	bpl.n	800346e <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033ec:	68a2      	ldr	r2, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033ee:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033f0:	68a6      	ldr	r6, [r4, #8]
 80033f2:	07f5      	lsls	r5, r6, #31
 80033f4:	d412      	bmi.n	800341c <HAL_ADC_ConfigChannel+0x94>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80033f6:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80033f8:	48b0      	ldr	r0, [pc, #704]	@ (80036bc <HAL_ADC_ConfigChannel+0x334>)
 80033fa:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 80033fe:	f006 0718 	and.w	r7, r6, #24
 8003402:	40f8      	lsrs	r0, r7
 8003404:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8003408:	4010      	ands	r0, r2
 800340a:	ea25 0507 	bic.w	r5, r5, r7
 800340e:	4328      	orrs	r0, r5
 8003410:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003414:	48aa      	ldr	r0, [pc, #680]	@ (80036c0 <HAL_ADC_ConfigChannel+0x338>)
 8003416:	4286      	cmp	r6, r0
 8003418:	f000 80d2 	beq.w	80035c0 <HAL_ADC_ConfigChannel+0x238>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800341c:	49a9      	ldr	r1, [pc, #676]	@ (80036c4 <HAL_ADC_ConfigChannel+0x33c>)
 800341e:	420a      	tst	r2, r1
 8003420:	d019      	beq.n	8003456 <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003422:	48a9      	ldr	r0, [pc, #676]	@ (80036c8 <HAL_ADC_ConfigChannel+0x340>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003424:	4da9      	ldr	r5, [pc, #676]	@ (80036cc <HAL_ADC_ConfigChannel+0x344>)
 8003426:	6887      	ldr	r7, [r0, #8]
 8003428:	42aa      	cmp	r2, r5
 800342a:	f007 76e0 	and.w	r6, r7, #29360128	@ 0x1c00000
 800342e:	d06f      	beq.n	8003510 <HAL_ADC_ConfigChannel+0x188>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003430:	49a7      	ldr	r1, [pc, #668]	@ (80036d0 <HAL_ADC_ConfigChannel+0x348>)
 8003432:	428a      	cmp	r2, r1
 8003434:	f000 811a 	beq.w	800366c <HAL_ADC_ConfigChannel+0x2e4>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003438:	4da6      	ldr	r5, [pc, #664]	@ (80036d4 <HAL_ADC_ConfigChannel+0x34c>)
 800343a:	42aa      	cmp	r2, r5
 800343c:	d10b      	bne.n	8003456 <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800343e:	027a      	lsls	r2, r7, #9
 8003440:	d409      	bmi.n	8003456 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003442:	4aa5      	ldr	r2, [pc, #660]	@ (80036d8 <HAL_ADC_ConfigChannel+0x350>)
 8003444:	4294      	cmp	r4, r2
 8003446:	d106      	bne.n	8003456 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003448:	6884      	ldr	r4, [r0, #8]
 800344a:	f024 77e0 	bic.w	r7, r4, #29360128	@ 0x1c00000
 800344e:	4337      	orrs	r7, r6
 8003450:	f447 0680 	orr.w	r6, r7, #4194304	@ 0x400000
 8003454:	6086      	str	r6, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003456:	2000      	movs	r0, #0
 8003458:	e003      	b.n	8003462 <HAL_ADC_ConfigChannel+0xda>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800345a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800345c:	f042 0720 	orr.w	r7, r2, #32
 8003460:	659f      	str	r7, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003462:	2600      	movs	r6, #0
 8003464:	f883 6054 	strb.w	r6, [r3, #84]	@ 0x54
}
 8003468:	b002      	add	sp, #8
 800346a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800346e:	68a7      	ldr	r7, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003470:	680a      	ldr	r2, [r1, #0]
 8003472:	073e      	lsls	r6, r7, #28
 8003474:	d4bc      	bmi.n	80033f0 <HAL_ADC_ConfigChannel+0x68>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003476:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8003478:	f3c2 5604 	ubfx	r6, r2, #20, #5
 800347c:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800347e:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 8003480:	40b0      	lsls	r0, r6
 8003482:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003486:	f002 0c04 	and.w	ip, r2, #4
 800348a:	f104 0814 	add.w	r8, r4, #20
  MODIFY_REG(*preg,
 800348e:	ea6f 0200 	mvn.w	r2, r0
 8003492:	f000 8152 	beq.w	800373a <HAL_ADC_ConfigChannel+0x3b2>
 8003496:	f858 700c 	ldr.w	r7, [r8, ip]
 800349a:	40b5      	lsls	r5, r6
 800349c:	403a      	ands	r2, r7
 800349e:	432a      	orrs	r2, r5
 80034a0:	f848 200c 	str.w	r2, [r8, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80034a4:	6965      	ldr	r5, [r4, #20]
 80034a6:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80034aa:	6166      	str	r6, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80034ac:	e9d1 7004 	ldrd	r7, r0, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80034b0:	680a      	ldr	r2, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80034b2:	68e5      	ldr	r5, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034b4:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034b6:	f104 0660 	add.w	r6, r4, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80034ba:	4694      	mov	ip, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034bc:	f000 8116 	beq.w	80036ec <HAL_ADC_ConfigChannel+0x364>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80034c0:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 80034c4:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 80034c6:	f856 c027 	ldr.w	ip, [r6, r7, lsl #2]
 80034ca:	40a8      	lsls	r0, r5
 80034cc:	4d83      	ldr	r5, [pc, #524]	@ (80036dc <HAL_ADC_ConfigChannel+0x354>)
 80034ce:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80034d2:	ea0c 0505 	and.w	r5, ip, r5
 80034d6:	4315      	orrs	r5, r2
 80034d8:	4328      	orrs	r0, r5
 80034da:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80034de:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034e2:	680a      	ldr	r2, [r1, #0]
}
 80034e4:	e784      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x68>
      switch (pConfig->Rank)
 80034e6:	1ebd      	subs	r5, r7, #2
 80034e8:	2d03      	cmp	r5, #3
 80034ea:	d903      	bls.n	80034f4 <HAL_ADC_ConfigChannel+0x16c>
    if (pConfig->Rank <= 5U)
 80034ec:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 80034f0:	2506      	movs	r5, #6
 80034f2:	e76b      	b.n	80033cc <HAL_ADC_ConfigChannel+0x44>
 80034f4:	4e7a      	ldr	r6, [pc, #488]	@ (80036e0 <HAL_ADC_ConfigChannel+0x358>)
 80034f6:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
  MODIFY_REG(*preg,
 80034fa:	271f      	movs	r7, #31
 80034fc:	f000 051f 	and.w	r5, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003500:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8003502:	fa07 f005 	lsl.w	r0, r7, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003506:	f002 060c 	and.w	r6, r2, #12
  MODIFY_REG(*preg,
 800350a:	ea6f 0e00 	mvn.w	lr, r0
 800350e:	e75d      	b.n	80033cc <HAL_ADC_ConfigChannel+0x44>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003510:	0238      	lsls	r0, r7, #8
 8003512:	d4a0      	bmi.n	8003456 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003514:	4870      	ldr	r0, [pc, #448]	@ (80036d8 <HAL_ADC_ConfigChannel+0x350>)
 8003516:	4284      	cmp	r4, r0
 8003518:	d003      	beq.n	8003522 <HAL_ADC_ConfigChannel+0x19a>
 800351a:	f500 7100 	add.w	r1, r0, #512	@ 0x200
 800351e:	428c      	cmp	r4, r1
 8003520:	d199      	bne.n	8003456 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003522:	4d69      	ldr	r5, [pc, #420]	@ (80036c8 <HAL_ADC_ConfigChannel+0x340>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003524:	4c6f      	ldr	r4, [pc, #444]	@ (80036e4 <HAL_ADC_ConfigChannel+0x35c>)
 8003526:	68aa      	ldr	r2, [r5, #8]
 8003528:	496f      	ldr	r1, [pc, #444]	@ (80036e8 <HAL_ADC_ConfigChannel+0x360>)
 800352a:	f022 77e0 	bic.w	r7, r2, #29360128	@ 0x1c00000
 800352e:	4337      	orrs	r7, r6
 8003530:	f447 0600 	orr.w	r6, r7, #8388608	@ 0x800000
 8003534:	60ae      	str	r6, [r5, #8]
 8003536:	6820      	ldr	r0, [r4, #0]
 8003538:	0985      	lsrs	r5, r0, #6
 800353a:	fba1 1405 	umull	r1, r4, r1, r5
 800353e:	09a2      	lsrs	r2, r4, #6
 8003540:	3201      	adds	r2, #1
 8003542:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8003546:	00be      	lsls	r6, r7, #2
 8003548:	9601      	str	r6, [sp, #4]
          while (wait_loop_index != 0UL)
 800354a:	9801      	ldr	r0, [sp, #4]
 800354c:	2800      	cmp	r0, #0
 800354e:	d082      	beq.n	8003456 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003550:	9901      	ldr	r1, [sp, #4]
 8003552:	1e4d      	subs	r5, r1, #1
 8003554:	9501      	str	r5, [sp, #4]
          while (wait_loop_index != 0UL)
 8003556:	9c01      	ldr	r4, [sp, #4]
 8003558:	2c00      	cmp	r4, #0
 800355a:	f43f af7c 	beq.w	8003456 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 800355e:	9a01      	ldr	r2, [sp, #4]
 8003560:	1e57      	subs	r7, r2, #1
 8003562:	9701      	str	r7, [sp, #4]
          while (wait_loop_index != 0UL)
 8003564:	9e01      	ldr	r6, [sp, #4]
 8003566:	2e00      	cmp	r6, #0
 8003568:	f43f af75 	beq.w	8003456 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 800356c:	9801      	ldr	r0, [sp, #4]
 800356e:	1e41      	subs	r1, r0, #1
 8003570:	9101      	str	r1, [sp, #4]
          while (wait_loop_index != 0UL)
 8003572:	9d01      	ldr	r5, [sp, #4]
 8003574:	2d00      	cmp	r5, #0
 8003576:	f43f af6e 	beq.w	8003456 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 800357a:	9c01      	ldr	r4, [sp, #4]
 800357c:	1e62      	subs	r2, r4, #1
 800357e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003580:	9f01      	ldr	r7, [sp, #4]
 8003582:	2f00      	cmp	r7, #0
 8003584:	f43f af67 	beq.w	8003456 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003588:	9e01      	ldr	r6, [sp, #4]
 800358a:	1e70      	subs	r0, r6, #1
 800358c:	9001      	str	r0, [sp, #4]
          while (wait_loop_index != 0UL)
 800358e:	9901      	ldr	r1, [sp, #4]
 8003590:	2900      	cmp	r1, #0
 8003592:	f43f af60 	beq.w	8003456 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003596:	9d01      	ldr	r5, [sp, #4]
 8003598:	1e6c      	subs	r4, r5, #1
 800359a:	9401      	str	r4, [sp, #4]
          while (wait_loop_index != 0UL)
 800359c:	9a01      	ldr	r2, [sp, #4]
 800359e:	2a00      	cmp	r2, #0
 80035a0:	f43f af59 	beq.w	8003456 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 80035a4:	9f01      	ldr	r7, [sp, #4]
 80035a6:	1e7e      	subs	r6, r7, #1
 80035a8:	9601      	str	r6, [sp, #4]
          while (wait_loop_index != 0UL)
 80035aa:	9801      	ldr	r0, [sp, #4]
 80035ac:	2800      	cmp	r0, #0
 80035ae:	f43f af52 	beq.w	8003456 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 80035b2:	9901      	ldr	r1, [sp, #4]
 80035b4:	1e4d      	subs	r5, r1, #1
 80035b6:	9501      	str	r5, [sp, #4]
          while (wait_loop_index != 0UL)
 80035b8:	9c01      	ldr	r4, [sp, #4]
 80035ba:	2c00      	cmp	r4, #0
 80035bc:	d1c8      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x1c8>
 80035be:	e74a      	b.n	8003456 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035c0:	2f00      	cmp	r7, #0
 80035c2:	d067      	beq.n	8003694 <HAL_ADC_ConfigChannel+0x30c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	fa92 f6a2 	rbit	r6, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035c8:	2e00      	cmp	r6, #0
 80035ca:	f000 80c0 	beq.w	800374e <HAL_ADC_ConfigChannel+0x3c6>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80035ce:	fab6 f786 	clz	r7, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d2:	3701      	adds	r7, #1
 80035d4:	f007 051f 	and.w	r5, r7, #31
 80035d8:	2d09      	cmp	r5, #9
 80035da:	f240 80b8 	bls.w	800374e <HAL_ADC_ConfigChannel+0x3c6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80035e2:	2800      	cmp	r0, #0
 80035e4:	f000 8150 	beq.w	8003888 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 80035e8:	fab0 f680 	clz	r6, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035ec:	3601      	adds	r6, #1
 80035ee:	06b7      	lsls	r7, r6, #26
 80035f0:	f007 40f8 	and.w	r0, r7, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80035f8:	2d00      	cmp	r5, #0
 80035fa:	f000 814a 	beq.w	8003892 <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 80035fe:	fab5 f685 	clz	r6, r5
 8003602:	3601      	adds	r6, #1
 8003604:	f006 071f 	and.w	r7, r6, #31
 8003608:	2501      	movs	r5, #1
 800360a:	fa05 f607 	lsl.w	r6, r5, r7
 800360e:	4330      	orrs	r0, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003614:	2a00      	cmp	r2, #0
 8003616:	f000 813a 	beq.w	800388e <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 800361a:	fab2 f782 	clz	r7, r2
 800361e:	1c7d      	adds	r5, r7, #1
 8003620:	f005 071f 	and.w	r7, r5, #31
 8003624:	f04f 0803 	mov.w	r8, #3
 8003628:	f06f 0c1d 	mvn.w	ip, #29
 800362c:	fb18 c607 	smlabb	r6, r8, r7, ip
 8003630:	0532      	lsls	r2, r6, #20
 8003632:	f042 7500 	orr.w	r5, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003636:	4305      	orrs	r5, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003638:	0de8      	lsrs	r0, r5, #23
  MODIFY_REG(*preg,
 800363a:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800363c:	f000 0804 	and.w	r8, r0, #4
 8003640:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 8003644:	f3c5 5204 	ubfx	r2, r5, #20, #5
 8003648:	fa07 f502 	lsl.w	r5, r7, r2
 800364c:	f856 0008 	ldr.w	r0, [r6, r8]
 8003650:	2707      	movs	r7, #7
 8003652:	fa07 fc02 	lsl.w	ip, r7, r2
 8003656:	ea20 020c 	bic.w	r2, r0, ip
 800365a:	432a      	orrs	r2, r5
 800365c:	f846 2008 	str.w	r2, [r6, r8]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003660:	680a      	ldr	r2, [r1, #0]
}
 8003662:	e6db      	b.n	800341c <HAL_ADC_ConfigChannel+0x94>
  __HAL_LOCK(hadc);
 8003664:	2002      	movs	r0, #2
}
 8003666:	b002      	add	sp, #8
 8003668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800366c:	01f9      	lsls	r1, r7, #7
 800366e:	f53f aef2 	bmi.w	8003456 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003672:	4819      	ldr	r0, [pc, #100]	@ (80036d8 <HAL_ADC_ConfigChannel+0x350>)
 8003674:	4284      	cmp	r4, r0
 8003676:	d004      	beq.n	8003682 <HAL_ADC_ConfigChannel+0x2fa>
 8003678:	f500 7100 	add.w	r1, r0, #512	@ 0x200
 800367c:	428c      	cmp	r4, r1
 800367e:	f47f aeea 	bne.w	8003456 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003682:	4d11      	ldr	r5, [pc, #68]	@ (80036c8 <HAL_ADC_ConfigChannel+0x340>)
 8003684:	68aa      	ldr	r2, [r5, #8]
 8003686:	f022 74e0 	bic.w	r4, r2, #29360128	@ 0x1c00000
 800368a:	4334      	orrs	r4, r6
 800368c:	f044 7780 	orr.w	r7, r4, #16777216	@ 0x1000000
 8003690:	60af      	str	r7, [r5, #8]
}
 8003692:	e6e0      	b.n	8003456 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003694:	0e90      	lsrs	r0, r2, #26
 8003696:	3001      	adds	r0, #1
 8003698:	f000 051f 	and.w	r5, r0, #31
 800369c:	0682      	lsls	r2, r0, #26
 800369e:	2001      	movs	r0, #1
 80036a0:	f002 47f8 	and.w	r7, r2, #2080374784	@ 0x7c000000
 80036a4:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a6:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036a8:	ea40 0007 	orr.w	r0, r0, r7
 80036ac:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b0:	d972      	bls.n	8003798 <HAL_ADC_ConfigChannel+0x410>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036b2:	3e1e      	subs	r6, #30
 80036b4:	0535      	lsls	r5, r6, #20
 80036b6:	f045 7500 	orr.w	r5, r5, #33554432	@ 0x2000000
 80036ba:	e7bc      	b.n	8003636 <HAL_ADC_ConfigChannel+0x2ae>
 80036bc:	0007ffff 	.word	0x0007ffff
 80036c0:	407f0000 	.word	0x407f0000
 80036c4:	80080000 	.word	0x80080000
 80036c8:	50040300 	.word	0x50040300
 80036cc:	c7520000 	.word	0xc7520000
 80036d0:	cb840000 	.word	0xcb840000
 80036d4:	80000001 	.word	0x80000001
 80036d8:	50040000 	.word	0x50040000
 80036dc:	03fff000 	.word	0x03fff000
 80036e0:	0800a89c 	.word	0x0800a89c
 80036e4:	20000400 	.word	0x20000400
 80036e8:	053e2d63 	.word	0x053e2d63
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036ec:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80036ee:	6e25      	ldr	r5, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036f0:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036f4:	f3c5 6784 	ubfx	r7, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d14f      	bne.n	800379c <HAL_ADC_ConfigChannel+0x414>
 80036fc:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003700:	4297      	cmp	r7, r2
 8003702:	f000 8091 	beq.w	8003828 <HAL_ADC_ConfigChannel+0x4a0>
 8003706:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003708:	6e65      	ldr	r5, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800370a:	f3c5 6884 	ubfx	r8, r5, #26, #5
 800370e:	4590      	cmp	r8, r2
 8003710:	d075      	beq.n	80037fe <HAL_ADC_ConfigChannel+0x476>
 8003712:	68b0      	ldr	r0, [r6, #8]
 8003714:	68b7      	ldr	r7, [r6, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003716:	f3c7 6084 	ubfx	r0, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800371a:	f106 0708 	add.w	r7, r6, #8
 800371e:	4290      	cmp	r0, r2
 8003720:	f000 8094 	beq.w	800384c <HAL_ADC_ConfigChannel+0x4c4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003724:	68f0      	ldr	r0, [r6, #12]
 8003726:	68f0      	ldr	r0, [r6, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003728:	f106 050c 	add.w	r5, r6, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800372c:	f3c0 6784 	ubfx	r7, r0, #26, #5
 8003730:	42ba      	cmp	r2, r7
 8003732:	f000 80a0 	beq.w	8003876 <HAL_ADC_ConfigChannel+0x4ee>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003736:	4662      	mov	r2, ip
 8003738:	e65a      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x68>
  MODIFY_REG(*preg,
 800373a:	f858 000c 	ldr.w	r0, [r8, ip]
 800373e:	4002      	ands	r2, r0
 8003740:	f848 200c 	str.w	r2, [r8, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003744:	6962      	ldr	r2, [r4, #20]
 8003746:	f042 4700 	orr.w	r7, r2, #2147483648	@ 0x80000000
 800374a:	6167      	str	r7, [r4, #20]
}
 800374c:	e6ae      	b.n	80034ac <HAL_ADC_ConfigChannel+0x124>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003752:	2800      	cmp	r0, #0
 8003754:	f000 80a1 	beq.w	800389a <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8003758:	fab0 f780 	clz	r7, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800375c:	3701      	adds	r7, #1
 800375e:	06be      	lsls	r6, r7, #26
 8003760:	f006 40f8 	and.w	r0, r6, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8003768:	2d00      	cmp	r5, #0
 800376a:	f000 8094 	beq.w	8003896 <HAL_ADC_ConfigChannel+0x50e>
  return __builtin_clz(value);
 800376e:	fab5 f785 	clz	r7, r5
 8003772:	3701      	adds	r7, #1
 8003774:	f007 081f 	and.w	r8, r7, #31
 8003778:	f04f 0c01 	mov.w	ip, #1
 800377c:	fa0c f608 	lsl.w	r6, ip, r8
 8003780:	4330      	orrs	r0, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003786:	2a00      	cmp	r2, #0
 8003788:	d07b      	beq.n	8003882 <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 800378a:	fab2 f582 	clz	r5, r2
 800378e:	3501      	adds	r5, #1
 8003790:	f005 071f 	and.w	r7, r5, #31
 8003794:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8003798:	0535      	lsls	r5, r6, #20
 800379a:	e74c      	b.n	8003636 <HAL_ADC_ConfigChannel+0x2ae>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80037a0:	b11d      	cbz	r5, 80037aa <HAL_ADC_ConfigChannel+0x422>
  return __builtin_clz(value);
 80037a2:	fab5 f085 	clz	r0, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037a6:	4287      	cmp	r7, r0
 80037a8:	d03e      	beq.n	8003828 <HAL_ADC_ConfigChannel+0x4a0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80037aa:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80037ac:	6e67      	ldr	r7, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037ae:	f3c7 6884 	ubfx	r8, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	fa9c f0ac 	rbit	r0, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037b6:	f106 0708 	add.w	r7, r6, #8
 80037ba:	46be      	mov	lr, r7
  if (value == 0U)
 80037bc:	b118      	cbz	r0, 80037c6 <HAL_ADC_ConfigChannel+0x43e>
  return __builtin_clz(value);
 80037be:	fab0 f580 	clz	r5, r0
 80037c2:	4545      	cmp	r5, r8
 80037c4:	d01d      	beq.n	8003802 <HAL_ADC_ConfigChannel+0x47a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80037c6:	68b0      	ldr	r0, [r6, #8]
 80037c8:	68b0      	ldr	r0, [r6, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037ca:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037d2:	f106 050c 	add.w	r5, r6, #12
 80037d6:	46a8      	mov	r8, r5
  if (value == 0U)
 80037d8:	f1be 0f00 	cmp.w	lr, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_ADC_ConfigChannel+0x45e>
  return __builtin_clz(value);
 80037de:	fabe fe8e 	clz	lr, lr
 80037e2:	4586      	cmp	lr, r0
 80037e4:	d034      	beq.n	8003850 <HAL_ADC_ConfigChannel+0x4c8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80037e6:	68f0      	ldr	r0, [r6, #12]
 80037e8:	68f6      	ldr	r6, [r6, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037ea:	f3c6 6784 	ubfx	r7, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 80037f2:	2e00      	cmp	r6, #0
 80037f4:	f43f adfc 	beq.w	80033f0 <HAL_ADC_ConfigChannel+0x68>
  return __builtin_clz(value);
 80037f8:	fab6 f286 	clz	r2, r6
 80037fc:	e798      	b.n	8003730 <HAL_ADC_ConfigChannel+0x3a8>
 80037fe:	f106 0e08 	add.w	lr, r6, #8
  MODIFY_REG(*preg,
 8003802:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003804:	f022 4500 	bic.w	r5, r2, #2147483648	@ 0x80000000
 8003808:	6665      	str	r5, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800380a:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800380e:	68b2      	ldr	r2, [r6, #8]
 8003810:	68b0      	ldr	r0, [r6, #8]
 8003812:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003816:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003818:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800381c:	4662      	mov	r2, ip
 800381e:	2d00      	cmp	r5, #0
 8003820:	d1d5      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x446>
 8003822:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8003826:	e77a      	b.n	800371e <HAL_ADC_ConfigChannel+0x396>
  MODIFY_REG(*preg,
 8003828:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800382a:	f020 4700 	bic.w	r7, r0, #2147483648	@ 0x80000000
 800382e:	6627      	str	r7, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003830:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003834:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003838:	f3cc 0512 	ubfx	r5, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800383c:	f3c2 6884 	ubfx	r8, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003840:	4662      	mov	r2, ip
 8003842:	2d00      	cmp	r5, #0
 8003844:	d1b5      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x42a>
 8003846:	f3cc 6284 	ubfx	r2, ip, #26, #5
 800384a:	e760      	b.n	800370e <HAL_ADC_ConfigChannel+0x386>
 800384c:	f106 080c 	add.w	r8, r6, #12
  MODIFY_REG(*preg,
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 8003856:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003858:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800385c:	68f2      	ldr	r2, [r6, #12]
 800385e:	68f6      	ldr	r6, [r6, #12]
 8003860:	f3cc 0012 	ubfx	r0, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003864:	4645      	mov	r5, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003866:	f3c6 6784 	ubfx	r7, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800386a:	4662      	mov	r2, ip
 800386c:	2800      	cmp	r0, #0
 800386e:	d1be      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x466>
 8003870:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8003874:	e75c      	b.n	8003730 <HAL_ADC_ConfigChannel+0x3a8>
  MODIFY_REG(*preg,
 8003876:	682f      	ldr	r7, [r5, #0]
 8003878:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800387c:	602a      	str	r2, [r5, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800387e:	680a      	ldr	r2, [r1, #0]
}
 8003880:	e5b6      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x68>
 8003882:	f44f 1540 	mov.w	r5, #3145728	@ 0x300000
 8003886:	e6d6      	b.n	8003636 <HAL_ADC_ConfigChannel+0x2ae>
 8003888:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800388c:	e6b2      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x26c>
 800388e:	4d04      	ldr	r5, [pc, #16]	@ (80038a0 <HAL_ADC_ConfigChannel+0x518>)
 8003890:	e6d1      	b.n	8003636 <HAL_ADC_ConfigChannel+0x2ae>
 8003892:	2602      	movs	r6, #2
 8003894:	e6bb      	b.n	800360e <HAL_ADC_ConfigChannel+0x286>
 8003896:	2602      	movs	r6, #2
 8003898:	e772      	b.n	8003780 <HAL_ADC_ConfigChannel+0x3f8>
 800389a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800389e:	e761      	b.n	8003764 <HAL_ADC_ConfigChannel+0x3dc>
 80038a0:	fe500000 	.word	0xfe500000

080038a4 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038a4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	f012 0f04 	tst.w	r2, #4
{
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038b0:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038b2:	d101      	bne.n	80038b8 <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038b4:	0702      	lsls	r2, r0, #28
 80038b6:	d53c      	bpl.n	8003932 <ADC_ConversionStop+0x8e>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80038b8:	68dd      	ldr	r5, [r3, #12]
 80038ba:	01ae      	lsls	r6, r5, #6
 80038bc:	d504      	bpl.n	80038c8 <ADC_ConversionStop+0x24>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038be:	8b26      	ldrh	r6, [r4, #24]
 80038c0:	f240 1c01 	movw	ip, #257	@ 0x101
 80038c4:	4566      	cmp	r6, ip
 80038c6:	d057      	beq.n	8003978 <ADC_ConversionStop+0xd4>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80038c8:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	d033      	beq.n	8003936 <ADC_ConversionStop+0x92>
 80038ce:	0755      	lsls	r5, r2, #29
 80038d0:	d502      	bpl.n	80038d8 <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80038d2:	6898      	ldr	r0, [r3, #8]
 80038d4:	0780      	lsls	r0, r0, #30
 80038d6:	d56e      	bpl.n	80039b6 <ADC_ConversionStop+0x112>
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80038d8:	2901      	cmp	r1, #1
 80038da:	d04b      	beq.n	8003974 <ADC_ConversionStop+0xd0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038dc:	6898      	ldr	r0, [r3, #8]
 80038de:	0706      	lsls	r6, r0, #28
 80038e0:	d50a      	bpl.n	80038f8 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80038e2:	689d      	ldr	r5, [r3, #8]
 80038e4:	07ad      	lsls	r5, r5, #30
 80038e6:	d407      	bmi.n	80038f8 <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 80038e8:	689e      	ldr	r6, [r3, #8]
 80038ea:	f026 4c00 	bic.w	ip, r6, #2147483648	@ 0x80000000
 80038ee:	f02c 0e3f 	bic.w	lr, ip, #63	@ 0x3f
 80038f2:	f04e 0220 	orr.w	r2, lr, #32
 80038f6:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 80038f8:	2903      	cmp	r1, #3
 80038fa:	d13b      	bne.n	8003974 <ADC_ConversionStop+0xd0>
 80038fc:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 80038fe:	f7ff fb21 	bl	8002f44 <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003902:	6821      	ldr	r1, [r4, #0]
    tickstart = HAL_GetTick();
 8003904:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003906:	688b      	ldr	r3, [r1, #8]
 8003908:	421d      	tst	r5, r3
 800390a:	d012      	beq.n	8003932 <ADC_ConversionStop+0x8e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800390c:	f7ff fb1a 	bl	8002f44 <HAL_GetTick>
 8003910:	1b80      	subs	r0, r0, r6
 8003912:	2805      	cmp	r0, #5
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003914:	6821      	ldr	r1, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003916:	d9f6      	bls.n	8003906 <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003918:	688a      	ldr	r2, [r1, #8]
 800391a:	422a      	tst	r2, r5
 800391c:	d0f3      	beq.n	8003906 <ADC_ConversionStop+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391e:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003920:	f045 0610 	orr.w	r6, r5, #16
 8003924:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003926:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003928:	f043 0001 	orr.w	r0, r3, #1
 800392c:	65e0      	str	r0, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800392e:	2001      	movs	r0, #1
}
 8003930:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003932:	2000      	movs	r0, #0
}
 8003934:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003936:	0711      	lsls	r1, r2, #28
 8003938:	d50a      	bpl.n	8003950 <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800393a:	6899      	ldr	r1, [r3, #8]
 800393c:	078a      	lsls	r2, r1, #30
 800393e:	d407      	bmi.n	8003950 <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 8003940:	6898      	ldr	r0, [r3, #8]
 8003942:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8003946:	f025 063f 	bic.w	r6, r5, #63	@ 0x3f
 800394a:	f046 0220 	orr.w	r2, r6, #32
 800394e:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003950:	2508      	movs	r5, #8
 8003952:	e7d4      	b.n	80038fe <ADC_ConversionStop+0x5a>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003954:	2240      	movs	r2, #64	@ 0x40
 8003956:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003958:	6898      	ldr	r0, [r3, #8]
 800395a:	0742      	lsls	r2, r0, #29
 800395c:	d50a      	bpl.n	8003974 <ADC_ConversionStop+0xd0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800395e:	689e      	ldr	r6, [r3, #8]
 8003960:	07b6      	lsls	r6, r6, #30
 8003962:	d407      	bmi.n	8003974 <ADC_ConversionStop+0xd0>
  MODIFY_REG(ADCx->CR,
 8003964:	689d      	ldr	r5, [r3, #8]
 8003966:	f025 4100 	bic.w	r1, r5, #2147483648	@ 0x80000000
 800396a:	f021 0c3f 	bic.w	ip, r1, #63	@ 0x3f
 800396e:	f04c 0210 	orr.w	r2, ip, #16
 8003972:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003974:	2504      	movs	r5, #4
 8003976:	e7c2      	b.n	80038fe <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	064d      	lsls	r5, r1, #25
 800397c:	d4ea      	bmi.n	8003954 <ADC_ConversionStop+0xb0>
 800397e:	4a12      	ldr	r2, [pc, #72]	@ (80039c8 <ADC_ConversionStop+0x124>)
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	0641      	lsls	r1, r0, #25
 8003984:	d4e6      	bmi.n	8003954 <ADC_ConversionStop+0xb0>
 8003986:	681e      	ldr	r6, [r3, #0]
 8003988:	0670      	lsls	r0, r6, #25
 800398a:	d4e3      	bmi.n	8003954 <ADC_ConversionStop+0xb0>
 800398c:	681d      	ldr	r5, [r3, #0]
 800398e:	0668      	lsls	r0, r5, #25
 8003990:	d4e0      	bmi.n	8003954 <ADC_ConversionStop+0xb0>
 8003992:	6819      	ldr	r1, [r3, #0]
 8003994:	0649      	lsls	r1, r1, #25
 8003996:	d4dd      	bmi.n	8003954 <ADC_ConversionStop+0xb0>
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	0646      	lsls	r6, r0, #25
 800399c:	d4da      	bmi.n	8003954 <ADC_ConversionStop+0xb0>
 800399e:	681e      	ldr	r6, [r3, #0]
 80039a0:	0675      	lsls	r5, r6, #25
 80039a2:	d4d7      	bmi.n	8003954 <ADC_ConversionStop+0xb0>
 80039a4:	681d      	ldr	r5, [r3, #0]
 80039a6:	0668      	lsls	r0, r5, #25
 80039a8:	d4d4      	bmi.n	8003954 <ADC_ConversionStop+0xb0>
 80039aa:	6819      	ldr	r1, [r3, #0]
 80039ac:	0649      	lsls	r1, r1, #25
 80039ae:	d4d1      	bmi.n	8003954 <ADC_ConversionStop+0xb0>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80039b0:	3a08      	subs	r2, #8
 80039b2:	d1e5      	bne.n	8003980 <ADC_ConversionStop+0xdc>
 80039b4:	e7b3      	b.n	800391e <ADC_ConversionStop+0x7a>
 80039b6:	689d      	ldr	r5, [r3, #8]
 80039b8:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80039bc:	f026 0e3f 	bic.w	lr, r6, #63	@ 0x3f
 80039c0:	f04e 0210 	orr.w	r2, lr, #16
 80039c4:	609a      	str	r2, [r3, #8]
}
 80039c6:	e787      	b.n	80038d8 <ADC_ConversionStop+0x34>
 80039c8:	a3400000 	.word	0xa3400000

080039cc <ADC_Enable>:
{
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80039d0:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039d2:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 80039d4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039d6:	6899      	ldr	r1, [r3, #8]
 80039d8:	07ca      	lsls	r2, r1, #31
 80039da:	d464      	bmi.n	8003aa6 <ADC_Enable+0xda>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039dc:	4d39      	ldr	r5, [pc, #228]	@ (8003ac4 <ADC_Enable+0xf8>)
 80039de:	4604      	mov	r4, r0
 80039e0:	6898      	ldr	r0, [r3, #8]
 80039e2:	4228      	tst	r0, r5
 80039e4:	d162      	bne.n	8003aac <ADC_Enable+0xe0>
  MODIFY_REG(ADCx->CR,
 80039e6:	689e      	ldr	r6, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039e8:	4937      	ldr	r1, [pc, #220]	@ (8003ac8 <ADC_Enable+0xfc>)
  MODIFY_REG(ADCx->CR,
 80039ea:	f026 4c00 	bic.w	ip, r6, #2147483648	@ 0x80000000
 80039ee:	f02c 0e3f 	bic.w	lr, ip, #63	@ 0x3f
 80039f2:	f04e 0201 	orr.w	r2, lr, #1
 80039f6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039f8:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	d537      	bpl.n	8003a6e <ADC_Enable+0xa2>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039fe:	4833      	ldr	r0, [pc, #204]	@ (8003acc <ADC_Enable+0x100>)
 8003a00:	4d33      	ldr	r5, [pc, #204]	@ (8003ad0 <ADC_Enable+0x104>)
 8003a02:	6806      	ldr	r6, [r0, #0]
 8003a04:	09b1      	lsrs	r1, r6, #6
 8003a06:	fba5 2301 	umull	r2, r3, r5, r1
 8003a0a:	099a      	lsrs	r2, r3, #6
 8003a0c:	3201      	adds	r2, #1
 8003a0e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8003a12:	0085      	lsls	r5, r0, #2
 8003a14:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 8003a16:	9e01      	ldr	r6, [sp, #4]
 8003a18:	2e00      	cmp	r6, #0
 8003a1a:	d028      	beq.n	8003a6e <ADC_Enable+0xa2>
        wait_loop_index--;
 8003a1c:	9901      	ldr	r1, [sp, #4]
 8003a1e:	1e4b      	subs	r3, r1, #1
 8003a20:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003a22:	9a01      	ldr	r2, [sp, #4]
 8003a24:	b31a      	cbz	r2, 8003a6e <ADC_Enable+0xa2>
        wait_loop_index--;
 8003a26:	9801      	ldr	r0, [sp, #4]
 8003a28:	1e45      	subs	r5, r0, #1
 8003a2a:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 8003a2c:	9e01      	ldr	r6, [sp, #4]
 8003a2e:	b1f6      	cbz	r6, 8003a6e <ADC_Enable+0xa2>
        wait_loop_index--;
 8003a30:	9901      	ldr	r1, [sp, #4]
 8003a32:	1e4b      	subs	r3, r1, #1
 8003a34:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003a36:	9a01      	ldr	r2, [sp, #4]
 8003a38:	b1ca      	cbz	r2, 8003a6e <ADC_Enable+0xa2>
        wait_loop_index--;
 8003a3a:	9801      	ldr	r0, [sp, #4]
 8003a3c:	1e45      	subs	r5, r0, #1
 8003a3e:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 8003a40:	9e01      	ldr	r6, [sp, #4]
 8003a42:	b1a6      	cbz	r6, 8003a6e <ADC_Enable+0xa2>
        wait_loop_index--;
 8003a44:	9901      	ldr	r1, [sp, #4]
 8003a46:	1e4b      	subs	r3, r1, #1
 8003a48:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003a4a:	9a01      	ldr	r2, [sp, #4]
 8003a4c:	b17a      	cbz	r2, 8003a6e <ADC_Enable+0xa2>
        wait_loop_index--;
 8003a4e:	9801      	ldr	r0, [sp, #4]
 8003a50:	1e45      	subs	r5, r0, #1
 8003a52:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 8003a54:	9e01      	ldr	r6, [sp, #4]
 8003a56:	b156      	cbz	r6, 8003a6e <ADC_Enable+0xa2>
        wait_loop_index--;
 8003a58:	9901      	ldr	r1, [sp, #4]
 8003a5a:	1e4b      	subs	r3, r1, #1
 8003a5c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003a5e:	9a01      	ldr	r2, [sp, #4]
 8003a60:	b12a      	cbz	r2, 8003a6e <ADC_Enable+0xa2>
        wait_loop_index--;
 8003a62:	9801      	ldr	r0, [sp, #4]
 8003a64:	1e45      	subs	r5, r0, #1
 8003a66:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 8003a68:	9e01      	ldr	r6, [sp, #4]
 8003a6a:	2e00      	cmp	r6, #0
 8003a6c:	d1d6      	bne.n	8003a1c <ADC_Enable+0x50>
    tickstart = HAL_GetTick();
 8003a6e:	f7ff fa69 	bl	8002f44 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	07ce      	lsls	r6, r1, #31
    tickstart = HAL_GetTick();
 8003a78:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a7a:	d414      	bmi.n	8003aa6 <ADC_Enable+0xda>
  MODIFY_REG(ADCx->CR,
 8003a7c:	4e15      	ldr	r6, [pc, #84]	@ (8003ad4 <ADC_Enable+0x108>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	07d0      	lsls	r0, r2, #31
 8003a82:	d404      	bmi.n	8003a8e <ADC_Enable+0xc2>
  MODIFY_REG(ADCx->CR,
 8003a84:	6898      	ldr	r0, [r3, #8]
 8003a86:	4030      	ands	r0, r6
 8003a88:	f040 0101 	orr.w	r1, r0, #1
 8003a8c:	6099      	str	r1, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a8e:	f7ff fa59 	bl	8002f44 <HAL_GetTick>
 8003a92:	1b43      	subs	r3, r0, r5
 8003a94:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a96:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a98:	d902      	bls.n	8003aa0 <ADC_Enable+0xd4>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	07d1      	lsls	r1, r2, #31
 8003a9e:	d505      	bpl.n	8003aac <ADC_Enable+0xe0>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	07c2      	lsls	r2, r0, #31
 8003aa4:	d5eb      	bpl.n	8003a7e <ADC_Enable+0xb2>
  return HAL_OK;
 8003aa6:	2000      	movs	r0, #0
}
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aac:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003aae:	f045 0610 	orr.w	r6, r5, #16
 8003ab2:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003ab6:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab8:	f041 0301 	orr.w	r3, r1, #1
 8003abc:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8003abe:	b002      	add	sp, #8
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
 8003ac2:	bf00      	nop
 8003ac4:	8000003f 	.word	0x8000003f
 8003ac8:	50040300 	.word	0x50040300
 8003acc:	20000400 	.word	0x20000400
 8003ad0:	053e2d63 	.word	0x053e2d63
 8003ad4:	7fffffc0 	.word	0x7fffffc0

08003ad8 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ad8:	4a31      	ldr	r2, [pc, #196]	@ (8003ba0 <HAL_ADC_Start+0xc8>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ada:	6803      	ldr	r3, [r0, #0]
{
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ae0:	689d      	ldr	r5, [r3, #8]
 8003ae2:	f015 0504 	ands.w	r5, r5, #4
 8003ae6:	d140      	bne.n	8003b6a <HAL_ADC_Start+0x92>
    __HAL_LOCK(hadc);
 8003ae8:	f890 1054 	ldrb.w	r1, [r0, #84]	@ 0x54
 8003aec:	2901      	cmp	r1, #1
 8003aee:	4604      	mov	r4, r0
 8003af0:	d03b      	beq.n	8003b6a <HAL_ADC_Start+0x92>
 8003af2:	2201      	movs	r2, #1
 8003af4:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003af8:	f7ff ff68 	bl	80039cc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d136      	bne.n	8003b6e <HAL_ADC_Start+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8003b00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b02:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8003b04:	f423 6570 	bic.w	r5, r3, #3840	@ 0xf00
 8003b08:	f025 0101 	bic.w	r1, r5, #1
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b0c:	4d25      	ldr	r5, [pc, #148]	@ (8003ba4 <HAL_ADC_Start+0xcc>)
      ADC_STATE_CLR_SET(hadc->State,
 8003b0e:	f441 7380 	orr.w	r3, r1, #256	@ 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b12:	42aa      	cmp	r2, r5
      ADC_STATE_CLR_SET(hadc->State,
 8003b14:	65a3      	str	r3, [r4, #88]	@ 0x58
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b16:	f006 061f 	and.w	r6, r6, #31
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b1a:	d02b      	beq.n	8003b74 <HAL_ADC_Start+0x9c>
 8003b1c:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b20:	f423 1580 	bic.w	r5, r3, #1048576	@ 0x100000
 8003b24:	65a5      	str	r5, [r4, #88]	@ 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b28:	f413 5580 	ands.w	r5, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b2c:	bf1c      	itt	ne
 8003b2e:	6de5      	ldrne	r5, [r4, #92]	@ 0x5c
 8003b30:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8003b34:	65e5      	str	r5, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b36:	231c      	movs	r3, #28
      __HAL_UNLOCK(hadc);
 8003b38:	2500      	movs	r5, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b3a:	428a      	cmp	r2, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b3c:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003b3e:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b42:	d01b      	beq.n	8003b7c <HAL_ADC_Start+0xa4>
 8003b44:	f240 2321 	movw	r3, #545	@ 0x221
 8003b48:	40f3      	lsrs	r3, r6
 8003b4a:	07dd      	lsls	r5, r3, #31
 8003b4c:	d416      	bmi.n	8003b7c <HAL_ADC_Start+0xa4>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b4e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003b50:	f442 1680 	orr.w	r6, r2, #1048576	@ 0x100000
 8003b54:	65a6      	str	r6, [r4, #88]	@ 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b56:	68c9      	ldr	r1, [r1, #12]
 8003b58:	018b      	lsls	r3, r1, #6
 8003b5a:	d505      	bpl.n	8003b68 <HAL_ADC_Start+0x90>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b5c:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003b5e:	f425 5c40 	bic.w	ip, r5, #12288	@ 0x3000
 8003b62:	f44c 5380 	orr.w	r3, ip, #4096	@ 0x1000
 8003b66:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8003b6a:	2002      	movs	r0, #2
}
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8003b6e:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b74:	490c      	ldr	r1, [pc, #48]	@ (8003ba8 <HAL_ADC_Start+0xd0>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b76:	2e00      	cmp	r6, #0
 8003b78:	d1d5      	bne.n	8003b26 <HAL_ADC_Start+0x4e>
 8003b7a:	e7d0      	b.n	8003b1e <HAL_ADC_Start+0x46>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b7c:	68d6      	ldr	r6, [r2, #12]
 8003b7e:	01b1      	lsls	r1, r6, #6
 8003b80:	d505      	bpl.n	8003b8e <HAL_ADC_Start+0xb6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b82:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003b84:	f421 5540 	bic.w	r5, r1, #12288	@ 0x3000
 8003b88:	f445 5380 	orr.w	r3, r5, #4096	@ 0x1000
 8003b8c:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 8003b8e:	6894      	ldr	r4, [r2, #8]
 8003b90:	f024 4600 	bic.w	r6, r4, #2147483648	@ 0x80000000
 8003b94:	f026 013f 	bic.w	r1, r6, #63	@ 0x3f
 8003b98:	f041 0504 	orr.w	r5, r1, #4
 8003b9c:	6095      	str	r5, [r2, #8]
}
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	50040300 	.word	0x50040300
 8003ba4:	50040100 	.word	0x50040100
 8003ba8:	50040000 	.word	0x50040000

08003bac <HAL_ADC_Start_IT>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003bac:	4a4d      	ldr	r2, [pc, #308]	@ (8003ce4 <HAL_ADC_Start_IT+0x138>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bae:	6803      	ldr	r3, [r0, #0]
{
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bb4:	689d      	ldr	r5, [r3, #8]
 8003bb6:	f015 0504 	ands.w	r5, r5, #4
 8003bba:	d15d      	bne.n	8003c78 <HAL_ADC_Start_IT+0xcc>
    __HAL_LOCK(hadc);
 8003bbc:	f890 1054 	ldrb.w	r1, [r0, #84]	@ 0x54
 8003bc0:	2901      	cmp	r1, #1
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	d058      	beq.n	8003c78 <HAL_ADC_Start_IT+0xcc>
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003bcc:	f7ff fefe 	bl	80039cc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d153      	bne.n	8003c7c <HAL_ADC_Start_IT+0xd0>
      ADC_STATE_CLR_SET(hadc->State,
 8003bd4:	6da5      	ldr	r5, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bd6:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8003bd8:	f425 6170 	bic.w	r1, r5, #3840	@ 0xf00
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bdc:	4d42      	ldr	r5, [pc, #264]	@ (8003ce8 <HAL_ADC_Start_IT+0x13c>)
      ADC_STATE_CLR_SET(hadc->State,
 8003bde:	f021 0c01 	bic.w	ip, r1, #1
 8003be2:	f44c 7280 	orr.w	r2, ip, #256	@ 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003be6:	42ab      	cmp	r3, r5
      ADC_STATE_CLR_SET(hadc->State,
 8003be8:	65a2      	str	r2, [r4, #88]	@ 0x58
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003bea:	f006 061f 	and.w	r6, r6, #31
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bee:	d048      	beq.n	8003c82 <HAL_ADC_Start_IT+0xd6>
 8003bf0:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bf2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003bf4:	f422 1580 	bic.w	r5, r2, #1048576	@ 0x100000
 8003bf8:	65a5      	str	r5, [r4, #88]	@ 0x58
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003bfa:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003bfc:	f412 5580 	ands.w	r5, r2, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c00:	bf1c      	itt	ne
 8003c02:	6de5      	ldrne	r5, [r4, #92]	@ 0x5c
 8003c04:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8003c08:	65e5      	str	r5, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c0a:	221c      	movs	r2, #28
      __HAL_UNLOCK(hadc);
 8003c0c:	2500      	movs	r5, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c0e:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8003c10:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	f022 051c 	bic.w	r5, r2, #28
 8003c1a:	605d      	str	r5, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8003c1c:	6965      	ldr	r5, [r4, #20]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003c1e:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8003c20:	2d08      	cmp	r5, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003c22:	bf0c      	ite	eq
 8003c24:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003c28:	f042 0204 	orrne.w	r2, r2, #4
 8003c2c:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c2e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003c30:	b91a      	cbnz	r2, 8003c3a <HAL_ADC_Start_IT+0x8e>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	f042 0210 	orr.w	r2, r2, #16
 8003c38:	605a      	str	r2, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c3a:	428b      	cmp	r3, r1
 8003c3c:	d025      	beq.n	8003c8a <HAL_ADC_Start_IT+0xde>
 8003c3e:	f240 2221 	movw	r2, #545	@ 0x221
 8003c42:	40f2      	lsrs	r2, r6
 8003c44:	07d6      	lsls	r6, r2, #31
 8003c46:	d420      	bmi.n	8003c8a <HAL_ADC_Start_IT+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c48:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8003c4a:	f446 1280 	orr.w	r2, r6, #1048576	@ 0x100000
 8003c4e:	65a2      	str	r2, [r4, #88]	@ 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c50:	68c9      	ldr	r1, [r1, #12]
 8003c52:	018a      	lsls	r2, r1, #6
 8003c54:	d50f      	bpl.n	8003c76 <HAL_ADC_Start_IT+0xca>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c56:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8003c58:	f426 5e40 	bic.w	lr, r6, #12288	@ 0x3000
 8003c5c:	f44e 5280 	orr.w	r2, lr, #4096	@ 0x1000
 8003c60:	65a2      	str	r2, [r4, #88]	@ 0x58
          switch (hadc->Init.EOCSelection)
 8003c62:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003c64:	685c      	ldr	r4, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8003c66:	d034      	beq.n	8003cd2 <HAL_ADC_Start_IT+0x126>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003c68:	f024 0240 	bic.w	r2, r4, #64	@ 0x40
 8003c6c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003c6e:	685c      	ldr	r4, [r3, #4]
 8003c70:	f044 0520 	orr.w	r5, r4, #32
 8003c74:	605d      	str	r5, [r3, #4]
}
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8003c78:	2002      	movs	r0, #2
}
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8003c7c:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8003c80:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c82:	491a      	ldr	r1, [pc, #104]	@ (8003cec <HAL_ADC_Start_IT+0x140>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c84:	2e00      	cmp	r6, #0
 8003c86:	d1b8      	bne.n	8003bfa <HAL_ADC_Start_IT+0x4e>
 8003c88:	e7b3      	b.n	8003bf2 <HAL_ADC_Start_IT+0x46>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c8a:	68d9      	ldr	r1, [r3, #12]
 8003c8c:	0189      	lsls	r1, r1, #6
 8003c8e:	d50f      	bpl.n	8003cb0 <HAL_ADC_Start_IT+0x104>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c90:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8003c92:	f426 5c40 	bic.w	ip, r6, #12288	@ 0x3000
 8003c96:	f44c 5280 	orr.w	r2, ip, #4096	@ 0x1000
 8003c9a:	65a2      	str	r2, [r4, #88]	@ 0x58
          switch (hadc->Init.EOCSelection)
 8003c9c:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003c9e:	685c      	ldr	r4, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8003ca0:	d00f      	beq.n	8003cc2 <HAL_ADC_Start_IT+0x116>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003ca2:	f024 0240 	bic.w	r2, r4, #64	@ 0x40
 8003ca6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003ca8:	685c      	ldr	r4, [r3, #4]
 8003caa:	f044 0520 	orr.w	r5, r4, #32
 8003cae:	605d      	str	r5, [r3, #4]
  MODIFY_REG(ADCx->CR,
 8003cb0:	6899      	ldr	r1, [r3, #8]
 8003cb2:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8003cb6:	f026 0e3f 	bic.w	lr, r6, #63	@ 0x3f
 8003cba:	f04e 0204 	orr.w	r2, lr, #4
 8003cbe:	609a      	str	r2, [r3, #8]
}
 8003cc0:	bd70      	pop	{r4, r5, r6, pc}
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cc2:	f024 0520 	bic.w	r5, r4, #32
 8003cc6:	605d      	str	r5, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	f041 0640 	orr.w	r6, r1, #64	@ 0x40
 8003cce:	605e      	str	r6, [r3, #4]
              break;
 8003cd0:	e7ee      	b.n	8003cb0 <HAL_ADC_Start_IT+0x104>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cd2:	f024 0520 	bic.w	r5, r4, #32
 8003cd6:	605d      	str	r5, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003cd8:	6859      	ldr	r1, [r3, #4]
 8003cda:	f041 0640 	orr.w	r6, r1, #64	@ 0x40
 8003cde:	605e      	str	r6, [r3, #4]
}
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
 8003ce2:	bf00      	nop
 8003ce4:	50040300 	.word	0x50040300
 8003ce8:	50040100 	.word	0x50040100
 8003cec:	50040000 	.word	0x50040000

08003cf0 <HAL_ADC_Start_DMA>:
{
 8003cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cf4:	4b37      	ldr	r3, [pc, #220]	@ (8003dd4 <HAL_ADC_Start_DMA+0xe4>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cf6:	6806      	ldr	r6, [r0, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
{
 8003cfa:	460d      	mov	r5, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cfc:	68b1      	ldr	r1, [r6, #8]
 8003cfe:	0749      	lsls	r1, r1, #29
 8003d00:	d418      	bmi.n	8003d34 <HAL_ADC_Start_DMA+0x44>
 8003d02:	4617      	mov	r7, r2
    __HAL_LOCK(hadc);
 8003d04:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8003d08:	2a01      	cmp	r2, #1
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	d012      	beq.n	8003d34 <HAL_ADC_Start_DMA+0x44>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d0e:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003d12:	4b31      	ldr	r3, [pc, #196]	@ (8003dd8 <HAL_ADC_Start_DMA+0xe8>)
    __HAL_LOCK(hadc);
 8003d14:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003d16:	429e      	cmp	r6, r3
    __HAL_LOCK(hadc);
 8003d18:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003d1c:	d00d      	beq.n	8003d3a <HAL_ADC_Start_DMA+0x4a>
 8003d1e:	f240 2621 	movw	r6, #545	@ 0x221
 8003d22:	fa26 fc08 	lsr.w	ip, r6, r8
 8003d26:	ea1c 0100 	ands.w	r1, ip, r0
 8003d2a:	d106      	bne.n	8003d3a <HAL_ADC_Start_DMA+0x4a>
      __HAL_UNLOCK(hadc);
 8003d2c:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
}
 8003d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8003d34:	2002      	movs	r0, #2
}
 8003d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7ff fe46 	bl	80039cc <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d13d      	bne.n	8003dc0 <HAL_ADC_Start_DMA+0xd0>
        ADC_STATE_CLR_SET(hadc->State,
 8003d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d46:	6821      	ldr	r1, [r4, #0]
 8003d48:	4e24      	ldr	r6, [pc, #144]	@ (8003ddc <HAL_ADC_Start_DMA+0xec>)
        ADC_STATE_CLR_SET(hadc->State,
 8003d4a:	f420 6270 	bic.w	r2, r0, #3840	@ 0xf00
 8003d4e:	f022 0e01 	bic.w	lr, r2, #1
 8003d52:	f44e 7380 	orr.w	r3, lr, #256	@ 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d56:	42b1      	cmp	r1, r6
        ADC_STATE_CLR_SET(hadc->State,
 8003d58:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d5a:	d036      	beq.n	8003dca <HAL_ADC_Start_DMA+0xda>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d5e:	f420 1280 	bic.w	r2, r0, #1048576	@ 0x100000
 8003d62:	65a2      	str	r2, [r4, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d66:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d68:	f413 5680 	ands.w	r6, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d6c:	bf18      	it	ne
 8003d6e:	6de6      	ldrne	r6, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d70:	463b      	mov	r3, r7
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d72:	bf18      	it	ne
 8003d74:	f026 0606 	bicne.w	r6, r6, #6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d78:	4f19      	ldr	r7, [pc, #100]	@ (8003de0 <HAL_ADC_Start_DMA+0xf0>)
          ADC_CLEAR_ERRORCODE(hadc);
 8003d7a:	65e6      	str	r6, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d7c:	462a      	mov	r2, r5
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d7e:	62c7      	str	r7, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d80:	4d18      	ldr	r5, [pc, #96]	@ (8003de4 <HAL_ADC_Start_DMA+0xf4>)
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d82:	4e19      	ldr	r6, [pc, #100]	@ (8003de8 <HAL_ADC_Start_DMA+0xf8>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d84:	6305      	str	r5, [r0, #48]	@ 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d86:	271c      	movs	r7, #28
        __HAL_UNLOCK(hadc);
 8003d88:	f04f 0800 	mov.w	r8, #0
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d8c:	6346      	str	r6, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d8e:	600f      	str	r7, [r1, #0]
        __HAL_UNLOCK(hadc);
 8003d90:	f884 8054 	strb.w	r8, [r4, #84]	@ 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d94:	684d      	ldr	r5, [r1, #4]
 8003d96:	f045 0610 	orr.w	r6, r5, #16
 8003d9a:	604e      	str	r6, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d9c:	68cf      	ldr	r7, [r1, #12]
 8003d9e:	f047 0501 	orr.w	r5, r7, #1
 8003da2:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003da4:	3140      	adds	r1, #64	@ 0x40
 8003da6:	f000 fcff 	bl	80047a8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003daa:	6824      	ldr	r4, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003dac:	68a1      	ldr	r1, [r4, #8]
 8003dae:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8003db2:	f022 033f 	bic.w	r3, r2, #63	@ 0x3f
 8003db6:	f043 0604 	orr.w	r6, r3, #4
 8003dba:	60a6      	str	r6, [r4, #8]
}
 8003dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8003dc0:	2500      	movs	r5, #0
 8003dc2:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8003dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dca:	f1b8 0f00 	cmp.w	r8, #0
 8003dce:	d1c9      	bne.n	8003d64 <HAL_ADC_Start_DMA+0x74>
 8003dd0:	e7c4      	b.n	8003d5c <HAL_ADC_Start_DMA+0x6c>
 8003dd2:	bf00      	nop
 8003dd4:	50040300 	.word	0x50040300
 8003dd8:	50040200 	.word	0x50040200
 8003ddc:	50040100 	.word	0x50040100
 8003de0:	08003301 	.word	0x08003301
 8003de4:	080032f1 	.word	0x080032f1
 8003de8:	0800336d 	.word	0x0800336d

08003dec <ADC_Disable>:
{
 8003dec:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003dee:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	0795      	lsls	r5, r2, #30
 8003df4:	d502      	bpl.n	8003dfc <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003df6:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003df8:	2000      	movs	r0, #0
}
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	6899      	ldr	r1, [r3, #8]
 8003dfe:	07cc      	lsls	r4, r1, #31
 8003e00:	d5fa      	bpl.n	8003df8 <ADC_Disable+0xc>
 8003e02:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e04:	6898      	ldr	r0, [r3, #8]
 8003e06:	f000 050d 	and.w	r5, r0, #13
 8003e0a:	2d01      	cmp	r5, #1
 8003e0c:	d009      	beq.n	8003e22 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0e:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003e10:	f045 0010 	orr.w	r0, r5, #16
 8003e14:	65a0      	str	r0, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e16:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003e18:	f043 0201 	orr.w	r2, r3, #1
 8003e1c:	65e2      	str	r2, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003e1e:	2001      	movs	r0, #1
}
 8003e20:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 8003e28:	f020 053f 	bic.w	r5, r0, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e2c:	2103      	movs	r1, #3
 8003e2e:	f045 0202 	orr.w	r2, r5, #2
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003e36:	f7ff f885 	bl	8002f44 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	6899      	ldr	r1, [r3, #8]
 8003e3e:	07c9      	lsls	r1, r1, #31
    tickstart = HAL_GetTick();
 8003e40:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e42:	d403      	bmi.n	8003e4c <ADC_Disable+0x60>
 8003e44:	e7d8      	b.n	8003df8 <ADC_Disable+0xc>
 8003e46:	6899      	ldr	r1, [r3, #8]
 8003e48:	07cb      	lsls	r3, r1, #31
 8003e4a:	d5d5      	bpl.n	8003df8 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e4c:	f7ff f87a 	bl	8002f44 <HAL_GetTick>
 8003e50:	1b40      	subs	r0, r0, r5
 8003e52:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e54:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e56:	d9f6      	bls.n	8003e46 <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	07d2      	lsls	r2, r2, #31
 8003e5c:	d5f3      	bpl.n	8003e46 <ADC_Disable+0x5a>
 8003e5e:	e7d6      	b.n	8003e0e <ADC_Disable+0x22>

08003e60 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003e60:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d01d      	beq.n	8003ea4 <HAL_ADC_Stop+0x44>
 8003e68:	2101      	movs	r1, #1
{
 8003e6a:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8003e6c:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003e70:	2103      	movs	r1, #3
 8003e72:	4604      	mov	r4, r0
 8003e74:	f7ff fd16 	bl	80038a4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003e78:	b118      	cbz	r0, 8003e82 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
}
 8003e80:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003e82:	4620      	mov	r0, r4
 8003e84:	f7ff ffb2 	bl	8003dec <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d1f6      	bne.n	8003e7a <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8003e8c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003e8e:	f422 5c88 	bic.w	ip, r2, #4352	@ 0x1100
 8003e92:	f02c 0e01 	bic.w	lr, ip, #1
  __HAL_UNLOCK(hadc);
 8003e96:	2100      	movs	r1, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003e98:	f04e 0301 	orr.w	r3, lr, #1
  __HAL_UNLOCK(hadc);
 8003e9c:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
      ADC_STATE_CLR_SET(hadc->State,
 8003ea0:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8003ea2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003ea4:	2002      	movs	r0, #2
}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003ea8:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eaa:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 8003eae:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003eb0:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003eb2:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003eb4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003eb6:	d040      	beq.n	8003f3a <HAL_ADCEx_Calibration_Start+0x92>
 8003eb8:	460d      	mov	r5, r1
 8003eba:	2101      	movs	r1, #1
 8003ebc:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	f7ff ff93 	bl	8003dec <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 8003ec8:	b9e0      	cbnz	r0, 8003f04 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 8003eca:	f423 5188 	bic.w	r1, r3, #4352	@ 0x1100
 8003ece:	f021 0c02 	bic.w	ip, r1, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ed2:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8003ed4:	f04c 0302 	orr.w	r3, ip, #2
 8003ed8:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 8003eda:	6891      	ldr	r1, [r2, #8]
 8003edc:	f021 4e40 	bic.w	lr, r1, #3221225472	@ 0xc0000000
 8003ee0:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 8003ee4:	f02e 033f 	bic.w	r3, lr, #63	@ 0x3f
 8003ee8:	432b      	orrs	r3, r5
 8003eea:	f043 4500 	orr.w	r5, r3, #2147483648	@ 0x80000000
 8003eee:	6095      	str	r5, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ef0:	6891      	ldr	r1, [r2, #8]
 8003ef2:	2900      	cmp	r1, #0
 8003ef4:	db0e      	blt.n	8003f14 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003ef8:	f022 0c03 	bic.w	ip, r2, #3
 8003efc:	f04c 0301 	orr.w	r3, ip, #1
 8003f00:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003f02:	e002      	b.n	8003f0a <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f04:	f043 0210 	orr.w	r2, r3, #16
 8003f08:	65a2      	str	r2, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8003f10:	b003      	add	sp, #12
 8003f12:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 8003f14:	9901      	ldr	r1, [sp, #4]
 8003f16:	3101      	adds	r1, #1
 8003f18:	9101      	str	r1, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f1a:	9b01      	ldr	r3, [sp, #4]
 8003f1c:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003f20:	d3e6      	bcc.n	8003ef0 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8003f22:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f24:	f020 0212 	bic.w	r2, r0, #18
        __HAL_UNLOCK(hadc);
 8003f28:	f04f 0e00 	mov.w	lr, #0
        ADC_STATE_CLR_SET(hadc->State,
 8003f2c:	f042 0510 	orr.w	r5, r2, #16
 8003f30:	65a5      	str	r5, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8003f32:	f884 e054 	strb.w	lr, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8003f36:	2001      	movs	r0, #1
 8003f38:	e7ea      	b.n	8003f10 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8003f3a:	2002      	movs	r0, #2
}
 8003f3c:	b003      	add	sp, #12
 8003f3e:	bd30      	pop	{r4, r5, pc}

08003f40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003f40:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f42:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f46:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8003f48:	2a01      	cmp	r2, #1
{
 8003f4a:	b09a      	sub	sp, #104	@ 0x68
  __HAL_LOCK(hadc);
 8003f4c:	d044      	beq.n	8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003f4e:	4603      	mov	r3, r0

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003f50:	4d2e      	ldr	r5, [pc, #184]	@ (800400c <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8003f52:	681c      	ldr	r4, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003f54:	2700      	movs	r7, #0
  __HAL_LOCK(hadc);
 8003f56:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003f58:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003f5a:	9716      	str	r7, [sp, #88]	@ 0x58
  __HAL_LOCK(hadc);
 8003f5c:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003f60:	9717      	str	r7, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003f62:	d008      	beq.n	8003f76 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f64:	6d99      	ldr	r1, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f66:	f883 7054 	strb.w	r7, [r3, #84]	@ 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f6a:	f041 0220 	orr.w	r2, r1, #32
 8003f6e:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003f70:	b01a      	add	sp, #104	@ 0x68
 8003f72:	bcf0      	pop	{r4, r5, r6, r7}
 8003f74:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f76:	4a26      	ldr	r2, [pc, #152]	@ (8004010 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8003f78:	6890      	ldr	r0, [r2, #8]
 8003f7a:	0740      	lsls	r0, r0, #29
 8003f7c:	d50b      	bpl.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003f7e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f80:	6d9f      	ldr	r7, [r3, #88]	@ 0x58
 8003f82:	f047 0520 	orr.w	r5, r7, #32
    tmp_hal_status = HAL_ERROR;
 8003f86:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f88:	659d      	str	r5, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003f8a:	2400      	movs	r4, #0
 8003f8c:	f883 4054 	strb.w	r4, [r3, #84]	@ 0x54
}
 8003f90:	b01a      	add	sp, #104	@ 0x68
 8003f92:	bcf0      	pop	{r4, r5, r6, r7}
 8003f94:	4770      	bx	lr
 8003f96:	68a7      	ldr	r7, [r4, #8]
 8003f98:	077f      	lsls	r7, r7, #29
 8003f9a:	d4f1      	bmi.n	8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f9c:	b306      	cbz	r6, 8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f9e:	4f1d      	ldr	r7, [pc, #116]	@ (8004014 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8003fa0:	684d      	ldr	r5, [r1, #4]
 8003fa2:	68b8      	ldr	r0, [r7, #8]
 8003fa4:	f893 c030 	ldrb.w	ip, [r3, #48]	@ 0x30
 8003fa8:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8003fac:	4328      	orrs	r0, r5
 8003fae:	ea40 354c 	orr.w	r5, r0, ip, lsl #13
 8003fb2:	60bd      	str	r5, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fb4:	4818      	ldr	r0, [pc, #96]	@ (8004018 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003fb6:	68a4      	ldr	r4, [r4, #8]
 8003fb8:	6892      	ldr	r2, [r2, #8]
 8003fba:	6885      	ldr	r5, [r0, #8]
 8003fbc:	4322      	orrs	r2, r4
 8003fbe:	432a      	orrs	r2, r5
 8003fc0:	07d5      	lsls	r5, r2, #31
 8003fc2:	d420      	bmi.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        MODIFY_REG(tmpADC_Common->CCR,
 8003fc4:	68bc      	ldr	r4, [r7, #8]
 8003fc6:	688a      	ldr	r2, [r1, #8]
 8003fc8:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 8003fcc:	4332      	orrs	r2, r6
 8003fce:	f021 060f 	bic.w	r6, r1, #15
 8003fd2:	4332      	orrs	r2, r6
 8003fd4:	60ba      	str	r2, [r7, #8]
 8003fd6:	e016      	b.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8003fd8:	2002      	movs	r0, #2
}
 8003fda:	b01a      	add	sp, #104	@ 0x68
 8003fdc:	bcf0      	pop	{r4, r5, r6, r7}
 8003fde:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003fe0:	4e0c      	ldr	r6, [pc, #48]	@ (8004014 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8003fe2:	480d      	ldr	r0, [pc, #52]	@ (8004018 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003fe4:	68b5      	ldr	r5, [r6, #8]
 8003fe6:	f425 4160 	bic.w	r1, r5, #57344	@ 0xe000
 8003fea:	60b1      	str	r1, [r6, #8]
 8003fec:	68a4      	ldr	r4, [r4, #8]
 8003fee:	6892      	ldr	r2, [r2, #8]
 8003ff0:	6887      	ldr	r7, [r0, #8]
 8003ff2:	4322      	orrs	r2, r4
 8003ff4:	433a      	orrs	r2, r7
 8003ff6:	07d4      	lsls	r4, r2, #31
 8003ff8:	d405      	bmi.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ffa:	68b5      	ldr	r5, [r6, #8]
 8003ffc:	f425 6171 	bic.w	r1, r5, #3856	@ 0xf10
 8004000:	f021 000f 	bic.w	r0, r1, #15
 8004004:	60b0      	str	r0, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004006:	2000      	movs	r0, #0
 8004008:	e7bf      	b.n	8003f8a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800400a:	bf00      	nop
 800400c:	50040000 	.word	0x50040000
 8004010:	50040100 	.word	0x50040100
 8004014:	50040300 	.word	0x50040300
 8004018:	50040200 	.word	0x50040200

0800401c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800401c:	4907      	ldr	r1, [pc, #28]	@ (800403c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800401e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004020:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004022:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
 8004026:	4002      	ands	r2, r0
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004028:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800402c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800402e:	f043 62bf 	orr.w	r2, r3, #100139008	@ 0x5f80000
 8004032:	f442 3000 	orr.w	r0, r2, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004036:	60c8      	str	r0, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004040:	4b1b      	ldr	r3, [pc, #108]	@ (80040b0 <HAL_NVIC_SetPriority+0x70>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004048:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800404a:	f1c3 0e07 	rsb	lr, r3, #7
 800404e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004052:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004056:	bf28      	it	cs
 8004058:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800405c:	f1bc 0f06 	cmp.w	ip, #6
 8004060:	d91c      	bls.n	800409c <HAL_NVIC_SetPriority+0x5c>
 8004062:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004066:	f04f 33ff 	mov.w	r3, #4294967295
 800406a:	fa03 f30c 	lsl.w	r3, r3, ip
 800406e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004072:	f04f 33ff 	mov.w	r3, #4294967295
 8004076:	fa03 f30e 	lsl.w	r3, r3, lr
 800407a:	ea21 0103 	bic.w	r1, r1, r3
 800407e:	fa01 f30c 	lsl.w	r3, r1, ip
 8004082:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004084:	011a      	lsls	r2, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8004086:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004088:	b2d1      	uxtb	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800408a:	db0a      	blt.n	80040a2 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408c:	f100 4c60 	add.w	ip, r0, #3758096384	@ 0xe0000000
 8004090:	f50c 4261 	add.w	r2, ip, #57600	@ 0xe100
 8004094:	f882 1300 	strb.w	r1, [r2, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004098:	f85d fb04 	ldr.w	pc, [sp], #4
 800409c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800409e:	4694      	mov	ip, r2
 80040a0:	e7e7      	b.n	8004072 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a2:	4b04      	ldr	r3, [pc, #16]	@ (80040b4 <HAL_NVIC_SetPriority+0x74>)
 80040a4:	f000 000f 	and.w	r0, r0, #15
 80040a8:	4403      	add	r3, r0
 80040aa:	7619      	strb	r1, [r3, #24]
 80040ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80040b0:	e000ed00 	.word	0xe000ed00
 80040b4:	e000ecfc 	.word	0xe000ecfc

080040b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80040b8:	2800      	cmp	r0, #0
 80040ba:	db07      	blt.n	80040cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040bc:	4a04      	ldr	r2, [pc, #16]	@ (80040d0 <HAL_NVIC_EnableIRQ+0x18>)
 80040be:	0941      	lsrs	r1, r0, #5
 80040c0:	2301      	movs	r3, #1
 80040c2:	f000 001f 	and.w	r0, r0, #31
 80040c6:	4083      	lsls	r3, r0
 80040c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000e100 	.word	0xe000e100

080040d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040d4:	3801      	subs	r0, #1
 80040d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80040da:	d301      	bcc.n	80040e0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80040de:	4770      	bx	lr
{
 80040e0:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e6:	4c07      	ldr	r4, [pc, #28]	@ (8004104 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040e8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ea:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80040ee:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040f2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040f6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040f8:	619a      	str	r2, [r3, #24]
}
 80040fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040fe:	6119      	str	r1, [r3, #16]
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <CRYP_SetKey>:
  */
static HAL_StatusTypeDef  CRYP_SetKey(CRYP_HandleTypeDef *hcryp)
{
  uint32_t keyaddr;

  if (hcryp->Init.pKey == NULL)
 8004108:	6a03      	ldr	r3, [r0, #32]
 800410a:	b32b      	cbz	r3, 8004158 <CRYP_SetKey+0x50>
{
 800410c:	b410      	push	{r4}
  }


  keyaddr = (uint32_t)(hcryp->Init.pKey);

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 800410e:	68c4      	ldr	r4, [r0, #12]
  {
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8004110:	6802      	ldr	r2, [r0, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8004112:	f5b4 2f80 	cmp.w	r4, #262144	@ 0x40000
  keyaddr = (uint32_t)(hcryp->Init.pKey);
 8004116:	4619      	mov	r1, r3
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8004118:	d10e      	bne.n	8004138 <CRYP_SetKey+0x30>
  return __builtin_bswap32(value);
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	ba04      	rev	r4, r0
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 800411e:	63d4      	str	r4, [r2, #60]	@ 0x3c
 8004120:	6858      	ldr	r0, [r3, #4]
 8004122:	ba04      	rev	r4, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR6 = __REV(*(uint32_t*)(keyaddr));
 8004124:	6394      	str	r4, [r2, #56]	@ 0x38
 8004126:	6898      	ldr	r0, [r3, #8]
 8004128:	ba04      	rev	r4, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR5 = __REV(*(uint32_t*)(keyaddr));
 800412a:	6354      	str	r4, [r2, #52]	@ 0x34
 800412c:	68d8      	ldr	r0, [r3, #12]
    keyaddr+=4U;
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4U;
 800412e:	f103 0110 	add.w	r1, r3, #16
 8004132:	ba04      	rev	r4, r0
  }

  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 8004134:	460b      	mov	r3, r1
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
 8004136:	6314      	str	r4, [r2, #48]	@ 0x30
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	ba1c      	rev	r4, r3
  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 800413c:	61d4      	str	r4, [r2, #28]
 800413e:	684b      	ldr	r3, [r1, #4]
 8004140:	ba1c      	rev	r4, r3
  keyaddr+=4U;
  hcryp->Instance->KEYR2 = __REV(*(uint32_t*)(keyaddr));
 8004142:	6194      	str	r4, [r2, #24]
 8004144:	688b      	ldr	r3, [r1, #8]
 8004146:	ba1c      	rev	r4, r3
  keyaddr+=4U;
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
 8004148:	6154      	str	r4, [r2, #20]
 800414a:	68c9      	ldr	r1, [r1, #12]
  keyaddr+=4U;
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));

  return HAL_OK;
}
 800414c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004150:	ba0b      	rev	r3, r1
  return HAL_OK;
 8004152:	2000      	movs	r0, #0
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));
 8004154:	6113      	str	r3, [r2, #16]
}
 8004156:	4770      	bx	lr
    return HAL_ERROR;
 8004158:	2001      	movs	r0, #1
}
 800415a:	4770      	bx	lr

0800415c <HAL_CRYP_Init>:
  if(hcryp == NULL)
 800415c:	2800      	cmp	r0, #0
 800415e:	f000 80a4 	beq.w	80042aa <HAL_CRYP_Init+0x14e>
  if (hcryp->Init.OperatingMode != CRYP_ALGOMODE_KEYDERIVATION)
 8004162:	6902      	ldr	r2, [r0, #16]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8004164:	2a18      	cmp	r2, #24
{
 8004166:	b570      	push	{r4, r5, r6, lr}
 8004168:	4604      	mov	r4, r0
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 800416a:	d04d      	beq.n	8004208 <HAL_CRYP_Init+0xac>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800416c:	2a08      	cmp	r2, #8
 800416e:	d03e      	beq.n	80041ee <HAL_CRYP_Init+0x92>
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8004170:	f894 0055 	ldrb.w	r0, [r4, #85]	@ 0x55
 8004174:	f000 05ff 	and.w	r5, r0, #255	@ 0xff
 8004178:	2800      	cmp	r0, #0
 800417a:	d03e      	beq.n	80041fa <HAL_CRYP_Init+0x9e>
  __HAL_CRYP_DISABLE(hcryp);
 800417c:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800417e:	68e1      	ldr	r1, [r4, #12]
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8004180:	2602      	movs	r6, #2
 8004182:	f884 6055 	strb.w	r6, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	f023 0001 	bic.w	r0, r3, #1
 800418c:	6028      	str	r0, [r5, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800418e:	682e      	ldr	r6, [r5, #0]
 8004190:	f426 2380 	bic.w	r3, r6, #262144	@ 0x40000
 8004194:	430b      	orrs	r3, r1
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8004196:	f04f 0c0a 	mov.w	ip, #10
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800419a:	2a08      	cmp	r2, #8
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800419c:	602b      	str	r3, [r5, #0]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 800419e:	f884 c048 	strb.w	ip, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80041a2:	d066      	beq.n	8004272 <HAL_CRYP_Init+0x116>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80041a4:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 80041a8:	2e60      	cmp	r6, #96	@ 0x60
 80041aa:	d033      	beq.n	8004214 <HAL_CRYP_Init+0xb8>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80041ac:	6829      	ldr	r1, [r5, #0]
 80041ae:	f421 3380 	bic.w	r3, r1, #65536	@ 0x10000
 80041b2:	f023 017e 	bic.w	r1, r3, #126	@ 0x7e
 80041b6:	68a3      	ldr	r3, [r4, #8]
 80041b8:	4333      	orrs	r3, r6
 80041ba:	430b      	orrs	r3, r1
 80041bc:	4313      	orrs	r3, r2
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 80041be:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80041c2:	602b      	str	r3, [r5, #0]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 80041c4:	d061      	beq.n	800428a <HAL_CRYP_Init+0x12e>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80041c6:	2800      	cmp	r0, #0
 80041c8:	d04d      	beq.n	8004266 <HAL_CRYP_Init+0x10a>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 80041ca:	2e00      	cmp	r6, #0
 80041cc:	d13b      	bne.n	8004246 <HAL_CRYP_Init+0xea>
  hcryp->CrypInCount = 0;
 80041ce:	2200      	movs	r2, #0
 80041d0:	2300      	movs	r3, #0
 80041d2:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80041d6:	2000      	movs	r0, #0
  hcryp->State = HAL_CRYP_STATE_READY;
 80041d8:	2101      	movs	r1, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80041da:	65a0      	str	r0, [r4, #88]	@ 0x58
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 80041dc:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hcryp->State = HAL_CRYP_STATE_READY;
 80041e0:	f884 1055 	strb.w	r1, [r4, #85]	@ 0x55
  __HAL_CRYP_ENABLE(hcryp);
 80041e4:	682c      	ldr	r4, [r5, #0]
 80041e6:	f044 0301 	orr.w	r3, r4, #1
 80041ea:	602b      	str	r3, [r5, #0]
}
 80041ec:	bd70      	pop	{r4, r5, r6, pc}
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 80041ee:	6943      	ldr	r3, [r0, #20]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f4:	d1bc      	bne.n	8004170 <HAL_CRYP_Init+0x14>
    return HAL_ERROR;
 80041f6:	2001      	movs	r0, #1
}
 80041f8:	bd70      	pop	{r4, r5, r6, pc}
    hcryp->Lock = HAL_UNLOCKED;
 80041fa:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
    HAL_CRYP_MspInit(hcryp);
 80041fe:	4620      	mov	r0, r4
 8004200:	f7fc fc60 	bl	8000ac4 <HAL_CRYP_MspInit>
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8004204:	6922      	ldr	r2, [r4, #16]
 8004206:	e7b9      	b.n	800417c <HAL_CRYP_Init+0x20>
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
 8004208:	6943      	ldr	r3, [r0, #20]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 800420a:	f023 0120 	bic.w	r1, r3, #32
 800420e:	2940      	cmp	r1, #64	@ 0x40
 8004210:	d1ee      	bne.n	80041f0 <HAL_CRYP_Init+0x94>
 8004212:	e7f0      	b.n	80041f6 <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8004214:	682e      	ldr	r6, [r5, #0]
 8004216:	f426 3180 	bic.w	r1, r6, #65536	@ 0x10000
 800421a:	f021 037e 	bic.w	r3, r1, #126	@ 0x7e
 800421e:	4313      	orrs	r3, r2
 8004220:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8004224:	602a      	str	r2, [r5, #0]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8004226:	682e      	ldr	r6, [r5, #0]
 8004228:	69e1      	ldr	r1, [r4, #28]
 800422a:	f426 43c0 	bic.w	r3, r6, #24576	@ 0x6000
 800422e:	430b      	orrs	r3, r1
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8004230:	f04f 0c03 	mov.w	ip, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8004234:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8004236:	f884 c048 	strb.w	ip, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 800423a:	b920      	cbnz	r0, 8004246 <HAL_CRYP_Init+0xea>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 800423c:	4620      	mov	r0, r4
 800423e:	f7ff ff63 	bl	8004108 <CRYP_SetKey>
 8004242:	2800      	cmp	r0, #0
 8004244:	d1d7      	bne.n	80041f6 <HAL_CRYP_Init+0x9a>
    hcryp->Instance->IVR0 = 0;
  }
  else
#endif
  {
    if (hcryp->Init.pInitVect == NULL)
 8004246:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004248:	2800      	cmp	r0, #0
 800424a:	d0d4      	beq.n	80041f6 <HAL_CRYP_Init+0x9a>
 800424c:	6802      	ldr	r2, [r0, #0]
 800424e:	ba16      	rev	r6, r2
      return HAL_ERROR;
    }

    ivaddr = (uint32_t)(hcryp->Init.pInitVect);

    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 8004250:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8004252:	6841      	ldr	r1, [r0, #4]
 8004254:	ba0b      	rev	r3, r1
    ivaddr+=4U;
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 8004256:	62ab      	str	r3, [r5, #40]	@ 0x28
 8004258:	6882      	ldr	r2, [r0, #8]
 800425a:	ba16      	rev	r6, r2
    ivaddr+=4U;
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 800425c:	626e      	str	r6, [r5, #36]	@ 0x24
 800425e:	68c0      	ldr	r0, [r0, #12]
 8004260:	ba01      	rev	r1, r0
    ivaddr+=4U;
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 8004262:	6229      	str	r1, [r5, #32]
 8004264:	e7b3      	b.n	80041ce <HAL_CRYP_Init+0x72>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8004266:	4620      	mov	r0, r4
 8004268:	f7ff ff4e 	bl	8004108 <CRYP_SetKey>
 800426c:	2800      	cmp	r0, #0
 800426e:	d0ac      	beq.n	80041ca <HAL_CRYP_Init+0x6e>
 8004270:	e7c1      	b.n	80041f6 <HAL_CRYP_Init+0x9a>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8004272:	682b      	ldr	r3, [r5, #0]
 8004274:	f023 0218 	bic.w	r2, r3, #24
 8004278:	f042 0608 	orr.w	r6, r2, #8
    if (CRYP_SetKey(hcryp) != HAL_OK)
 800427c:	4620      	mov	r0, r4
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 800427e:	602e      	str	r6, [r5, #0]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8004280:	f7ff ff42 	bl	8004108 <CRYP_SetKey>
 8004284:	2800      	cmp	r0, #0
 8004286:	d0a2      	beq.n	80041ce <HAL_CRYP_Init+0x72>
 8004288:	e7b5      	b.n	80041f6 <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 800428a:	682e      	ldr	r6, [r5, #0]
 800428c:	69e2      	ldr	r2, [r4, #28]
 800428e:	f426 41c0 	bic.w	r1, r6, #24576	@ 0x6000
 8004292:	4311      	orrs	r1, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8004294:	2303      	movs	r3, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8004296:	6029      	str	r1, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8004298:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 800429c:	b138      	cbz	r0, 80042ae <HAL_CRYP_Init+0x152>
    hcryp->Instance->IVR3 = 0;
 800429e:	2000      	movs	r0, #0
 80042a0:	62e8      	str	r0, [r5, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 80042a2:	62a8      	str	r0, [r5, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 80042a4:	6268      	str	r0, [r5, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 80042a6:	6228      	str	r0, [r5, #32]
 80042a8:	e791      	b.n	80041ce <HAL_CRYP_Init+0x72>
    return HAL_ERROR;
 80042aa:	2001      	movs	r0, #1
}
 80042ac:	4770      	bx	lr
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7ff ff2a 	bl	8004108 <CRYP_SetKey>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d19e      	bne.n	80041f6 <HAL_CRYP_Init+0x9a>
 80042b8:	e7f1      	b.n	800429e <HAL_CRYP_Init+0x142>
 80042ba:	bf00      	nop
 80042bc:	0000      	movs	r0, r0
	...

080042c0 <HAL_CRYP_AESCBC_Encrypt>:
{
 80042c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042c4:	b083      	sub	sp, #12
 80042c6:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  if(hcryp == NULL)
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d073      	beq.n	80043b6 <HAL_CRYP_AESCBC_Encrypt+0xf6>
  hcryp->CrypInCount = 0;
 80042ce:	ed9f 7b7a 	vldr	d7, [pc, #488]	@ 80044b8 <HAL_CRYP_AESCBC_Encrypt+0x1f8>
 80042d2:	ed80 7b10 	vstr	d7, [r0, #64]	@ 0x40
 80042d6:	4616      	mov	r6, r2
 80042d8:	461f      	mov	r7, r3
  __HAL_CRYP_DISABLE(hcryp);
 80042da:	6802      	ldr	r2, [r0, #0]
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 80042dc:	2301      	movs	r3, #1
  hcryp->State = HAL_CRYP_STATE_BUSY;
 80042de:	f04f 0902 	mov.w	r9, #2
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 80042e2:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  hcryp->State = HAL_CRYP_STATE_BUSY;
 80042e6:	f880 9055 	strb.w	r9, [r0, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 80042ea:	460d      	mov	r5, r1
 80042ec:	6811      	ldr	r1, [r2, #0]
 80042ee:	f021 0301 	bic.w	r3, r1, #1
 80042f2:	4604      	mov	r4, r0
 80042f4:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 80042f6:	f7fc fbfd 	bl	8000af4 <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 80042fa:	2000      	movs	r0, #0
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 80042fc:	ed9f 0b70 	vldr	d0, [pc, #448]	@ 80044c0 <HAL_CRYP_AESCBC_Encrypt+0x200>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8004300:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8004304:	f894 2055 	ldrb.w	r2, [r4, #85]	@ 0x55
  __HAL_UNLOCK(hcryp);
 8004308:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 800430c:	ed84 0b04 	vstr	d0, [r4, #16]
  hcryp->Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8004310:	61a0      	str	r0, [r4, #24]
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8004312:	2a00      	cmp	r2, #0
 8004314:	d053      	beq.n	80043be <HAL_CRYP_AESCBC_Encrypt+0xfe>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8004316:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 800431a:	f8d4 9000 	ldr.w	r9, [r4]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800431e:	68e1      	ldr	r1, [r4, #12]
  __HAL_CRYP_DISABLE(hcryp);
 8004320:	f8d9 3000 	ldr.w	r3, [r9]
 8004324:	f023 0201 	bic.w	r2, r3, #1
 8004328:	f8c9 2000 	str.w	r2, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800432c:	f8d9 3000 	ldr.w	r3, [r9]
 8004330:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004334:	430a      	orrs	r2, r1
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8004336:	210a      	movs	r1, #10
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8004338:	f8c9 2000 	str.w	r2, [r9]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 800433c:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8004340:	e9d4 2c05 	ldrd	r2, ip, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8004344:	2a60      	cmp	r2, #96	@ 0x60
 8004346:	d063      	beq.n	8004410 <HAL_CRYP_AESCBC_Encrypt+0x150>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8004348:	f8d9 3000 	ldr.w	r3, [r9]
 800434c:	f423 3e80 	bic.w	lr, r3, #65536	@ 0x10000
 8004350:	68a3      	ldr	r3, [r4, #8]
 8004352:	f02e 017e 	bic.w	r1, lr, #126	@ 0x7e
 8004356:	4313      	orrs	r3, r2
 8004358:	430b      	orrs	r3, r1
 800435a:	4303      	orrs	r3, r0
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 800435c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8004360:	f8c9 3000 	str.w	r3, [r9]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8004364:	f000 808e 	beq.w	8004484 <HAL_CRYP_AESCBC_Encrypt+0x1c4>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8004368:	f1bc 0f00 	cmp.w	ip, #0
 800436c:	f000 8082 	beq.w	8004474 <HAL_CRYP_AESCBC_Encrypt+0x1b4>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8004370:	2a00      	cmp	r2, #0
 8004372:	d16b      	bne.n	800444c <HAL_CRYP_AESCBC_Encrypt+0x18c>
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8004374:	4632      	mov	r2, r6
 8004376:	4629      	mov	r1, r5
  hcryp->State = HAL_CRYP_STATE_READY;
 8004378:	2601      	movs	r6, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 800437a:	2500      	movs	r5, #0
 800437c:	65a5      	str	r5, [r4, #88]	@ 0x58
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 800437e:	463b      	mov	r3, r7
  hcryp->State = HAL_CRYP_STATE_READY;
 8004380:	f884 6055 	strb.w	r6, [r4, #85]	@ 0x55
  hcryp->CrypInCount = 0;
 8004384:	2700      	movs	r7, #0
 8004386:	2600      	movs	r6, #0
 8004388:	e9c4 6710 	strd	r6, r7, [r4, #64]	@ 0x40
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 800438c:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8004390:	4620      	mov	r0, r4
  __HAL_CRYP_ENABLE(hcryp);
 8004392:	f8d9 4000 	ldr.w	r4, [r9]
 8004396:	f044 0701 	orr.w	r7, r4, #1
 800439a:	f8c9 7000 	str.w	r7, [r9]
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 800439e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
}
 80043a2:	b003      	add	sp, #12
 80043a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 80043a8:	f000 b88e 	b.w	80044c8 <HAL_CRYPEx_AES>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80043ac:	4620      	mov	r0, r4
 80043ae:	f7ff feab 	bl	8004108 <CRYP_SetKey>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d074      	beq.n	80044a0 <HAL_CRYP_AESCBC_Encrypt+0x1e0>
}
 80043b6:	2001      	movs	r0, #1
 80043b8:	b003      	add	sp, #12
 80043ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_CRYP_MspInit(hcryp);
 80043be:	4620      	mov	r0, r4
 80043c0:	f7fc fb80 	bl	8000ac4 <HAL_CRYP_MspInit>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 80043c4:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 80043c8:	f8d4 9000 	ldr.w	r9, [r4]
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80043cc:	6920      	ldr	r0, [r4, #16]
  __HAL_CRYP_DISABLE(hcryp);
 80043ce:	f8d9 3000 	ldr.w	r3, [r9]
 80043d2:	f023 0201 	bic.w	r2, r3, #1
 80043d6:	f8c9 2000 	str.w	r2, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80043da:	f8d9 1000 	ldr.w	r1, [r9]
 80043de:	68e2      	ldr	r2, [r4, #12]
 80043e0:	f421 2380 	bic.w	r3, r1, #262144	@ 0x40000
 80043e4:	4313      	orrs	r3, r2
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80043e6:	210a      	movs	r1, #10
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80043e8:	2808      	cmp	r0, #8
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80043ea:	f8c9 3000 	str.w	r3, [r9]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80043ee:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80043f2:	d1a5      	bne.n	8004340 <HAL_CRYP_AESCBC_Encrypt+0x80>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 80043f4:	f8d9 3000 	ldr.w	r3, [r9]
 80043f8:	f023 0218 	bic.w	r2, r3, #24
 80043fc:	f042 0008 	orr.w	r0, r2, #8
 8004400:	f8c9 0000 	str.w	r0, [r9]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8004404:	4620      	mov	r0, r4
 8004406:	f7ff fe7f 	bl	8004108 <CRYP_SetKey>
 800440a:	2800      	cmp	r0, #0
 800440c:	d0b2      	beq.n	8004374 <HAL_CRYP_AESCBC_Encrypt+0xb4>
 800440e:	e7d2      	b.n	80043b6 <HAL_CRYP_AESCBC_Encrypt+0xf6>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8004410:	f8d9 1000 	ldr.w	r1, [r9]
 8004414:	f421 3e80 	bic.w	lr, r1, #65536	@ 0x10000
 8004418:	f02e 037e 	bic.w	r3, lr, #126	@ 0x7e
 800441c:	4303      	orrs	r3, r0
 800441e:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8004422:	f8c9 2000 	str.w	r2, [r9]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8004426:	f8d9 0000 	ldr.w	r0, [r9]
 800442a:	69e3      	ldr	r3, [r4, #28]
 800442c:	f420 41c0 	bic.w	r1, r0, #24576	@ 0x6000
 8004430:	4319      	orrs	r1, r3
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8004432:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8004434:	f8c9 1000 	str.w	r1, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8004438:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 800443c:	f1bc 0f00 	cmp.w	ip, #0
 8004440:	d104      	bne.n	800444c <HAL_CRYP_AESCBC_Encrypt+0x18c>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8004442:	4620      	mov	r0, r4
 8004444:	f7ff fe60 	bl	8004108 <CRYP_SetKey>
 8004448:	2800      	cmp	r0, #0
 800444a:	d1b4      	bne.n	80043b6 <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.pInitVect == NULL)
 800444c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800444e:	2800      	cmp	r0, #0
 8004450:	d0b1      	beq.n	80043b6 <HAL_CRYP_AESCBC_Encrypt+0xf6>
 8004452:	6801      	ldr	r1, [r0, #0]
 8004454:	ba0b      	rev	r3, r1
    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 8004456:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
 800445a:	6842      	ldr	r2, [r0, #4]
 800445c:	ba11      	rev	r1, r2
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 800445e:	f8c9 1028 	str.w	r1, [r9, #40]	@ 0x28
 8004462:	6883      	ldr	r3, [r0, #8]
 8004464:	ba1a      	rev	r2, r3
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 8004466:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
 800446a:	68c0      	ldr	r0, [r0, #12]
 800446c:	ba01      	rev	r1, r0
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 800446e:	f8c9 1020 	str.w	r1, [r9, #32]
 8004472:	e77f      	b.n	8004374 <HAL_CRYP_AESCBC_Encrypt+0xb4>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8004474:	4620      	mov	r0, r4
 8004476:	9201      	str	r2, [sp, #4]
 8004478:	f7ff fe46 	bl	8004108 <CRYP_SetKey>
 800447c:	2800      	cmp	r0, #0
 800447e:	d19a      	bne.n	80043b6 <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8004480:	9a01      	ldr	r2, [sp, #4]
 8004482:	e775      	b.n	8004370 <HAL_CRYP_AESCBC_Encrypt+0xb0>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8004484:	f8d9 0000 	ldr.w	r0, [r9]
 8004488:	69e3      	ldr	r3, [r4, #28]
 800448a:	f420 41c0 	bic.w	r1, r0, #24576	@ 0x6000
 800448e:	4319      	orrs	r1, r3
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8004490:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8004492:	f8c9 1000 	str.w	r1, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8004496:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 800449a:	f1bc 0f00 	cmp.w	ip, #0
 800449e:	d085      	beq.n	80043ac <HAL_CRYP_AESCBC_Encrypt+0xec>
    hcryp->Instance->IVR3 = 0;
 80044a0:	2000      	movs	r0, #0
 80044a2:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 80044a6:	f8c9 0028 	str.w	r0, [r9, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 80044aa:	f8c9 0024 	str.w	r0, [r9, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 80044ae:	f8c9 0020 	str.w	r0, [r9, #32]
 80044b2:	e75f      	b.n	8004374 <HAL_CRYP_AESCBC_Encrypt+0xb4>
 80044b4:	f3af 8000 	nop.w
	...
 80044c4:	00000020 	.word	0x00000020

080044c8 <HAL_CRYPEx_AES>:
  *                     case of key derivation only.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AES(CRYP_HandleTypeDef *hcryp, uint8_t *pInputData, uint16_t Size, uint8_t *pOutputData, uint32_t Timeout)
{
 80044c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044cc:	461c      	mov	r4, r3

  if (hcryp->State == HAL_CRYP_STATE_READY)
 80044ce:	f890 3055 	ldrb.w	r3, [r0, #85]	@ 0x55
{
 80044d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (hcryp->State == HAL_CRYP_STATE_READY)
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	f040 80c7 	bne.w	800466a <HAL_CRYPEx_AES+0x1a2>
 80044dc:	4606      	mov	r6, r0
 80044de:	b2d8      	uxtb	r0, r3
  {
    /* Check parameters setting */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80044e0:	6935      	ldr	r5, [r6, #16]
 80044e2:	2d08      	cmp	r5, #8
 80044e4:	d063      	beq.n	80045ae <HAL_CRYPEx_AES+0xe6>
        return  HAL_ERROR;
      }
    }
    else
    {
      if ((pInputData == NULL) || (pOutputData == NULL) || (Size == 0U))
 80044e6:	2900      	cmp	r1, #0
 80044e8:	f000 80bd 	beq.w	8004666 <HAL_CRYPEx_AES+0x19e>
 80044ec:	2c00      	cmp	r4, #0
 80044ee:	f000 80ba 	beq.w	8004666 <HAL_CRYPEx_AES+0x19e>
 80044f2:	4617      	mov	r7, r2
 80044f4:	2a00      	cmp	r2, #0
 80044f6:	f000 80b6 	beq.w	8004666 <HAL_CRYPEx_AES+0x19e>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(hcryp);
 80044fa:	f896 2054 	ldrb.w	r2, [r6, #84]	@ 0x54
 80044fe:	2a01      	cmp	r2, #1
 8004500:	f000 80b3 	beq.w	800466a <HAL_CRYPEx_AES+0x1a2>
 8004504:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8004508:	f101 0510 	add.w	r5, r1, #16
 800450c:	2002      	movs	r0, #2


  for(index=0U ; (index < Ilength); index += 16U)
  {
    /* Write the Input block in the Data Input register */
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 800450e:	6831      	ldr	r1, [r6, #0]
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8004510:	f886 0055 	strb.w	r0, [r6, #85]	@ 0x55
  for(index=0U ; (index < Ilength); index += 16U)
 8004514:	3410      	adds	r4, #16
 8004516:	f04f 0900 	mov.w	r9, #0
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 800451a:	f855 3c10 	ldr.w	r3, [r5, #-16]
 800451e:	608b      	str	r3, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8004520:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8004524:	608a      	str	r2, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 8004526:	f855 0c08 	ldr.w	r0, [r5, #-8]
 800452a:	6088      	str	r0, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 800452c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004530:	608b      	str	r3, [r1, #8]
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef const * const hcryp, uint32_t Timeout)
{
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004532:	f7fe fd07 	bl	8002f44 <HAL_GetTick>
 8004536:	f1b8 3fff 	cmp.w	r8, #4294967295

  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800453a:	6831      	ldr	r1, [r6, #0]
  tickstart = HAL_GetTick();
 800453c:	4682      	mov	sl, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800453e:	f040 809e 	bne.w	800467e <HAL_CRYPEx_AES+0x1b6>
 8004542:	6848      	ldr	r0, [r1, #4]
 8004544:	07c3      	lsls	r3, r0, #31
 8004546:	d414      	bmi.n	8004572 <HAL_CRYPEx_AES+0xaa>
 8004548:	684b      	ldr	r3, [r1, #4]
 800454a:	07db      	lsls	r3, r3, #31
 800454c:	d411      	bmi.n	8004572 <HAL_CRYPEx_AES+0xaa>
 800454e:	684a      	ldr	r2, [r1, #4]
 8004550:	07d0      	lsls	r0, r2, #31
 8004552:	d40e      	bmi.n	8004572 <HAL_CRYPEx_AES+0xaa>
 8004554:	6848      	ldr	r0, [r1, #4]
 8004556:	07c2      	lsls	r2, r0, #31
 8004558:	d40b      	bmi.n	8004572 <HAL_CRYPEx_AES+0xaa>
 800455a:	684b      	ldr	r3, [r1, #4]
 800455c:	07db      	lsls	r3, r3, #31
 800455e:	d408      	bmi.n	8004572 <HAL_CRYPEx_AES+0xaa>
 8004560:	684a      	ldr	r2, [r1, #4]
 8004562:	07d0      	lsls	r0, r2, #31
 8004564:	d405      	bmi.n	8004572 <HAL_CRYPEx_AES+0xaa>
 8004566:	6848      	ldr	r0, [r1, #4]
 8004568:	07c2      	lsls	r2, r0, #31
 800456a:	d402      	bmi.n	8004572 <HAL_CRYPEx_AES+0xaa>
 800456c:	684b      	ldr	r3, [r1, #4]
 800456e:	07db      	lsls	r3, r3, #31
 8004570:	d5e7      	bpl.n	8004542 <HAL_CRYPEx_AES+0x7a>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004572:	6808      	ldr	r0, [r1, #0]
 8004574:	f040 0280 	orr.w	r2, r0, #128	@ 0x80
 8004578:	600a      	str	r2, [r1, #0]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 800457a:	68cb      	ldr	r3, [r1, #12]
 800457c:	f844 3c10 	str.w	r3, [r4, #-16]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8004580:	68c8      	ldr	r0, [r1, #12]
 8004582:	f844 0c0c 	str.w	r0, [r4, #-12]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8004586:	68ca      	ldr	r2, [r1, #12]
 8004588:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 800458c:	68cb      	ldr	r3, [r1, #12]
 800458e:	f844 3c04 	str.w	r3, [r4, #-4]
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8004592:	f896 005c 	ldrb.w	r0, [r6, #92]	@ 0x5c
 8004596:	2801      	cmp	r0, #1
 8004598:	f109 0c10 	add.w	ip, r9, #16
 800459c:	d07d      	beq.n	800469a <HAL_CRYPEx_AES+0x1d2>
  for(index=0U ; (index < Ilength); index += 16U)
 800459e:	4567      	cmp	r7, ip
 80045a0:	f105 0510 	add.w	r5, r5, #16
 80045a4:	f104 0410 	add.w	r4, r4, #16
 80045a8:	d951      	bls.n	800464e <HAL_CRYPEx_AES+0x186>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 80045aa:	46e1      	mov	r9, ip
 80045ac:	e7b5      	b.n	800451a <HAL_CRYPEx_AES+0x52>
      if (pOutputData == NULL)
 80045ae:	2c00      	cmp	r4, #0
 80045b0:	d059      	beq.n	8004666 <HAL_CRYPEx_AES+0x19e>
    __HAL_LOCK(hcryp);
 80045b2:	f896 2054 	ldrb.w	r2, [r6, #84]	@ 0x54
 80045b6:	2a01      	cmp	r2, #1
 80045b8:	d057      	beq.n	800466a <HAL_CRYPEx_AES+0x1a2>
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80045ba:	f04f 0e02 	mov.w	lr, #2
    __HAL_LOCK(hcryp);
 80045be:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80045c2:	f886 e055 	strb.w	lr, [r6, #85]	@ 0x55
  tickstart = HAL_GetTick();
 80045c6:	f7fe fcbd 	bl	8002f44 <HAL_GetTick>
 80045ca:	f1b8 3fff 	cmp.w	r8, #4294967295
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80045ce:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 80045d0:	4607      	mov	r7, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80045d2:	d15e      	bne.n	8004692 <HAL_CRYPEx_AES+0x1ca>
 80045d4:	685d      	ldr	r5, [r3, #4]
 80045d6:	07e9      	lsls	r1, r5, #31
 80045d8:	d414      	bmi.n	8004604 <HAL_CRYPEx_AES+0x13c>
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	07d1      	lsls	r1, r2, #31
 80045de:	d411      	bmi.n	8004604 <HAL_CRYPEx_AES+0x13c>
 80045e0:	6858      	ldr	r0, [r3, #4]
 80045e2:	07c2      	lsls	r2, r0, #31
 80045e4:	d40e      	bmi.n	8004604 <HAL_CRYPEx_AES+0x13c>
 80045e6:	685f      	ldr	r7, [r3, #4]
 80045e8:	07ff      	lsls	r7, r7, #31
 80045ea:	d40b      	bmi.n	8004604 <HAL_CRYPEx_AES+0x13c>
 80045ec:	6859      	ldr	r1, [r3, #4]
 80045ee:	07cd      	lsls	r5, r1, #31
 80045f0:	d408      	bmi.n	8004604 <HAL_CRYPEx_AES+0x13c>
 80045f2:	685d      	ldr	r5, [r3, #4]
 80045f4:	07e8      	lsls	r0, r5, #31
 80045f6:	d405      	bmi.n	8004604 <HAL_CRYPEx_AES+0x13c>
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	07d1      	lsls	r1, r2, #31
 80045fc:	d402      	bmi.n	8004604 <HAL_CRYPEx_AES+0x13c>
 80045fe:	6858      	ldr	r0, [r3, #4]
 8004600:	07c2      	lsls	r2, r0, #31
 8004602:	d5e7      	bpl.n	80045d4 <HAL_CRYPEx_AES+0x10c>
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004604:	681f      	ldr	r7, [r3, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8004606:	68f1      	ldr	r1, [r6, #12]
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004608:	f047 0580 	orr.w	r5, r7, #128	@ 0x80
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 800460c:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004610:	601d      	str	r5, [r3, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8004612:	d110      	bne.n	8004636 <HAL_CRYPEx_AES+0x16e>
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8004614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    outputaddr+=4U;
 8004616:	3410      	adds	r4, #16
 8004618:	ba10      	rev	r0, r2
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 800461a:	f844 0c10 	str.w	r0, [r4, #-16]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR6);
 800461e:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8004620:	ba39      	rev	r1, r7
 8004622:	f844 1c0c 	str.w	r1, [r4, #-12]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR5);
 8004626:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8004628:	ba2a      	rev	r2, r5
 800462a:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR4);
 800462e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004630:	ba07      	rev	r7, r0
 8004632:	f844 7c04 	str.w	r7, [r4, #-4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR3);
 8004636:	69d9      	ldr	r1, [r3, #28]
 8004638:	ba0d      	rev	r5, r1
 800463a:	6025      	str	r5, [r4, #0]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR2);
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	ba10      	rev	r0, r2
 8004640:	6060      	str	r0, [r4, #4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR1);
 8004642:	695f      	ldr	r7, [r3, #20]
 8004644:	ba39      	rev	r1, r7
 8004646:	60a1      	str	r1, [r4, #8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR0);
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	ba1d      	rev	r5, r3
 800464c:	60e5      	str	r5, [r4, #12]
    if (hcryp->State != HAL_CRYP_STATE_SUSPENDED)
 800464e:	f896 4055 	ldrb.w	r4, [r6, #85]	@ 0x55
 8004652:	2c05      	cmp	r4, #5
      hcryp->State = HAL_CRYP_STATE_READY;
 8004654:	bf18      	it	ne
 8004656:	2401      	movne	r4, #1
    __HAL_UNLOCK(hcryp);
 8004658:	f04f 0000 	mov.w	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 800465c:	bf18      	it	ne
 800465e:	f886 4055 	strbne.w	r4, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 8004662:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
}
 8004666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hcryp);
 800466a:	2002      	movs	r0, #2
}
 800466c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((HAL_GetTick() - tickstart ) > Timeout)
 8004670:	f7fe fc68 	bl	8002f44 <HAL_GetTick>
 8004674:	eba0 010a 	sub.w	r1, r0, sl
 8004678:	4588      	cmp	r8, r1
 800467a:	d31e      	bcc.n	80046ba <HAL_CRYPEx_AES+0x1f2>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800467c:	6831      	ldr	r1, [r6, #0]
 800467e:	684a      	ldr	r2, [r1, #4]
 8004680:	07d0      	lsls	r0, r2, #31
 8004682:	d5f5      	bpl.n	8004670 <HAL_CRYPEx_AES+0x1a8>
 8004684:	e775      	b.n	8004572 <HAL_CRYPEx_AES+0xaa>
      if((HAL_GetTick() - tickstart ) > Timeout)
 8004686:	f7fe fc5d 	bl	8002f44 <HAL_GetTick>
 800468a:	1bc3      	subs	r3, r0, r7
 800468c:	4598      	cmp	r8, r3
 800468e:	d314      	bcc.n	80046ba <HAL_CRYPEx_AES+0x1f2>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004690:	6833      	ldr	r3, [r6, #0]
 8004692:	6858      	ldr	r0, [r3, #4]
 8004694:	07c2      	lsls	r2, r0, #31
 8004696:	d5f6      	bpl.n	8004686 <HAL_CRYPEx_AES+0x1be>
 8004698:	e7b4      	b.n	8004604 <HAL_CRYPEx_AES+0x13c>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 800469a:	4567      	cmp	r7, ip
 800469c:	d9d7      	bls.n	800464e <HAL_CRYPEx_AES+0x186>
      hcryp->pCrypOutBuffPtr =  (uint8_t *)outputaddr;
 800469e:	63f4      	str	r4, [r6, #60]	@ 0x3c
      hcryp->CrypInCount     =  Ilength - (index+16U);
 80046a0:	f1a7 0410 	sub.w	r4, r7, #16
 80046a4:	eba4 0709 	sub.w	r7, r4, r9
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 80046a8:	2105      	movs	r1, #5
      hcryp->pCrypInBuffPtr  =  (uint8_t *)inputaddr;
 80046aa:	63b5      	str	r5, [r6, #56]	@ 0x38
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 80046ac:	2500      	movs	r5, #0
      hcryp->CrypInCount     =  Ilength - (index+16U);
 80046ae:	6437      	str	r7, [r6, #64]	@ 0x40
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 80046b0:	f886 1055 	strb.w	r1, [r6, #85]	@ 0x55
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 80046b4:	f886 505c 	strb.w	r5, [r6, #92]	@ 0x5c
      return HAL_OK;
 80046b8:	e7c9      	b.n	800464e <HAL_CRYPEx_AES+0x186>
    hcryp->State = HAL_CRYP_STATE_READY;
 80046ba:	2401      	movs	r4, #1
    __HAL_UNLOCK(hcryp);
 80046bc:	2100      	movs	r1, #0
    hcryp->State = HAL_CRYP_STATE_READY;
 80046be:	f886 4055 	strb.w	r4, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 80046c2:	f886 1054 	strb.w	r1, [r6, #84]	@ 0x54
        return HAL_TIMEOUT;
 80046c6:	2003      	movs	r0, #3
}
 80046c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080046cc <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d051      	beq.n	8004774 <HAL_DMA_Init+0xa8>
{
 80046d0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004790 <HAL_DMA_Init+0xc4>)
 80046d4:	6804      	ldr	r4, [r0, #0]
 80046d6:	4294      	cmp	r4, r2
 80046d8:	4603      	mov	r3, r0
 80046da:	d942      	bls.n	8004762 <HAL_DMA_Init+0x96>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046dc:	492d      	ldr	r1, [pc, #180]	@ (8004794 <HAL_DMA_Init+0xc8>)
 80046de:	482e      	ldr	r0, [pc, #184]	@ (8004798 <HAL_DMA_Init+0xcc>)
 80046e0:	4421      	add	r1, r4
 80046e2:	fba0 2501 	umull	r2, r5, r0, r1
 80046e6:	092e      	lsrs	r6, r5, #4
    hdma->DmaBaseAddress = DMA2;
 80046e8:	4d2c      	ldr	r5, [pc, #176]	@ (800479c <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046ea:	00b1      	lsls	r1, r6, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046ec:	2702      	movs	r7, #2
 80046ee:	f883 7025 	strb.w	r7, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046f2:	6822      	ldr	r2, [r4, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046f4:	691f      	ldr	r7, [r3, #16]
 80046f6:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046f8:	f422 4cff 	bic.w	ip, r2, #32640	@ 0x7f80
  tmp |=  hdma->Init.Direction        |
 80046fc:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
 8004700:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004702:	433a      	orrs	r2, r7
 8004704:	695f      	ldr	r7, [r3, #20]
 8004706:	6459      	str	r1, [r3, #68]	@ 0x44
 8004708:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800470a:	699f      	ldr	r7, [r3, #24]
 800470c:	433a      	orrs	r2, r7
 800470e:	69df      	ldr	r7, [r3, #28]
 8004710:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8004712:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004714:	f02c 0070 	bic.w	r0, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8004718:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 800471a:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800471c:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 8004720:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004722:	d015      	beq.n	8004750 <HAL_DMA_Init+0x84>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004724:	4f1e      	ldr	r7, [pc, #120]	@ (80047a0 <HAL_DMA_Init+0xd4>)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004726:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004728:	f001 041c 	and.w	r4, r1, #28
 800472c:	210f      	movs	r1, #15
 800472e:	40a1      	lsls	r1, r4
    if (DMA1 == hdma->DmaBaseAddress)
 8004730:	42bd      	cmp	r5, r7
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004732:	ea6f 0601 	mvn.w	r6, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004736:	fa00 f004 	lsl.w	r0, r0, r4
    if (DMA1 == hdma->DmaBaseAddress)
 800473a:	d01d      	beq.n	8004778 <HAL_DMA_Init+0xac>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800473c:	f8d7 54a8 	ldr.w	r5, [r7, #1192]	@ 0x4a8
 8004740:	402e      	ands	r6, r5
 8004742:	f8c7 64a8 	str.w	r6, [r7, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004746:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	@ 0x4a8
 800474a:	4302      	orrs	r2, r0
 800474c:	f8c7 24a8 	str.w	r2, [r7, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004750:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004752:	2601      	movs	r6, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004754:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004756:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 800475a:	f883 6025 	strb.w	r6, [r3, #37]	@ 0x25

  return HAL_OK;
}
 800475e:	bcf0      	pop	{r4, r5, r6, r7}
 8004760:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004762:	4f10      	ldr	r7, [pc, #64]	@ (80047a4 <HAL_DMA_Init+0xd8>)
 8004764:	4a0c      	ldr	r2, [pc, #48]	@ (8004798 <HAL_DMA_Init+0xcc>)
    hdma->DmaBaseAddress = DMA1;
 8004766:	4d0e      	ldr	r5, [pc, #56]	@ (80047a0 <HAL_DMA_Init+0xd4>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004768:	4427      	add	r7, r4
 800476a:	fba2 2007 	umull	r2, r0, r2, r7
 800476e:	0906      	lsrs	r6, r0, #4
 8004770:	00b1      	lsls	r1, r6, #2
    hdma->DmaBaseAddress = DMA1;
 8004772:	e7bb      	b.n	80046ec <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8004774:	2001      	movs	r0, #1
}
 8004776:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004778:	f8d5 40a8 	ldr.w	r4, [r5, #168]	@ 0xa8
 800477c:	4026      	ands	r6, r4
 800477e:	f8c5 60a8 	str.w	r6, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004782:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8004786:	4301      	orrs	r1, r0
 8004788:	f8c5 10a8 	str.w	r1, [r5, #168]	@ 0xa8
 800478c:	e7e0      	b.n	8004750 <HAL_DMA_Init+0x84>
 800478e:	bf00      	nop
 8004790:	40020407 	.word	0x40020407
 8004794:	bffdfbf8 	.word	0xbffdfbf8
 8004798:	cccccccd 	.word	0xcccccccd
 800479c:	40020400 	.word	0x40020400
 80047a0:	40020000 	.word	0x40020000
 80047a4:	bffdfff8 	.word	0xbffdfff8

080047a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047a8:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047aa:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 80047ae:	2c01      	cmp	r4, #1
 80047b0:	d00b      	beq.n	80047ca <HAL_DMA_Start_IT+0x22>

  if (HAL_DMA_STATE_READY == hdma->State)
 80047b2:	f890 6025 	ldrb.w	r6, [r0, #37]	@ 0x25
  __HAL_LOCK(hdma);
 80047b6:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 80047b8:	2e01      	cmp	r6, #1
  __HAL_LOCK(hdma);
 80047ba:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80047be:	fa5f fc86 	uxtb.w	ip, r6
 80047c2:	d005      	beq.n	80047d0 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c4:	2300      	movs	r3, #0
 80047c6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 80047ca:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 80047cc:	bc70      	pop	{r4, r5, r6}
 80047ce:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d0:	2502      	movs	r5, #2
 80047d2:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047d6:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 80047d8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047da:	2600      	movs	r6, #0
 80047dc:	63c6      	str	r6, [r0, #60]	@ 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047de:	f005 061c 	and.w	r6, r5, #28
 80047e2:	fa0c f506 	lsl.w	r5, ip, r6
    __HAL_DMA_DISABLE(hdma);
 80047e6:	6826      	ldr	r6, [r4, #0]
 80047e8:	f026 0601 	bic.w	r6, r6, #1
 80047ec:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047ee:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 80047f0:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047f2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047f4:	6883      	ldr	r3, [r0, #8]
    if (NULL != hdma->XferHalfCpltCallback)
 80047f6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047f8:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047fa:	bf0b      	itete	eq
 80047fc:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80047fe:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004800:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004802:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8004804:	b150      	cbz	r0, 800481c <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	f043 000e 	orr.w	r0, r3, #14
 800480c:	6020      	str	r0, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800480e:	6821      	ldr	r1, [r4, #0]
 8004810:	f041 0201 	orr.w	r2, r1, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004814:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004816:	6022      	str	r2, [r4, #0]
}
 8004818:	bc70      	pop	{r4, r5, r6}
 800481a:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800481c:	6821      	ldr	r1, [r4, #0]
 800481e:	f021 0204 	bic.w	r2, r1, #4
 8004822:	6022      	str	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004824:	6825      	ldr	r5, [r4, #0]
 8004826:	f045 060a 	orr.w	r6, r5, #10
 800482a:	6026      	str	r6, [r4, #0]
 800482c:	e7ef      	b.n	800480e <HAL_DMA_Start_IT+0x66>
 800482e:	bf00      	nop

08004830 <HAL_DMA_IRQHandler>:
{
 8004830:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004832:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004834:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8004836:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004838:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800483a:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800483c:	f003 031c 	and.w	r3, r3, #28
 8004840:	2204      	movs	r2, #4
 8004842:	409a      	lsls	r2, r3
 8004844:	420a      	tst	r2, r1
 8004846:	d00e      	beq.n	8004866 <HAL_DMA_IRQHandler+0x36>
 8004848:	f014 0f04 	tst.w	r4, #4
 800484c:	d00b      	beq.n	8004866 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800484e:	6829      	ldr	r1, [r5, #0]
 8004850:	068b      	lsls	r3, r1, #26
 8004852:	d403      	bmi.n	800485c <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	f023 0404 	bic.w	r4, r3, #4
 800485a:	602c      	str	r4, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800485c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800485e:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004860:	b1cb      	cbz	r3, 8004896 <HAL_DMA_IRQHandler+0x66>
}
 8004862:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8004864:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004866:	2202      	movs	r2, #2
 8004868:	409a      	lsls	r2, r3
 800486a:	420a      	tst	r2, r1
 800486c:	d015      	beq.n	800489a <HAL_DMA_IRQHandler+0x6a>
 800486e:	f014 0f02 	tst.w	r4, #2
 8004872:	d012      	beq.n	800489a <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004874:	682c      	ldr	r4, [r5, #0]
 8004876:	06a1      	lsls	r1, r4, #26
 8004878:	d406      	bmi.n	8004888 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800487a:	682b      	ldr	r3, [r5, #0]
 800487c:	f023 010a 	bic.w	r1, r3, #10
 8004880:	6029      	str	r1, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004882:	2501      	movs	r5, #1
 8004884:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8004888:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800488a:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 800488c:	2400      	movs	r4, #0
 800488e:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e5      	bne.n	8004862 <HAL_DMA_IRQHandler+0x32>
}
 8004896:	bc70      	pop	{r4, r5, r6}
 8004898:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800489a:	2208      	movs	r2, #8
 800489c:	409a      	lsls	r2, r3
 800489e:	420a      	tst	r2, r1
 80048a0:	d0f9      	beq.n	8004896 <HAL_DMA_IRQHandler+0x66>
 80048a2:	0722      	lsls	r2, r4, #28
 80048a4:	d5f7      	bpl.n	8004896 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048a6:	6829      	ldr	r1, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 80048a8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048aa:	f021 040e 	bic.w	r4, r1, #14
 80048ae:	602c      	str	r4, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048b0:	2501      	movs	r5, #1
 80048b2:	fa05 f303 	lsl.w	r3, r5, r3
    __HAL_UNLOCK(hdma);
 80048b6:	2100      	movs	r1, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048b8:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048ba:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80048bc:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80048c0:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 80048c4:	2a00      	cmp	r2, #0
 80048c6:	d0e6      	beq.n	8004896 <HAL_DMA_IRQHandler+0x66>
}
 80048c8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80048ca:	4710      	bx	r2

080048cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048d0:	680c      	ldr	r4, [r1, #0]
{
 80048d2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048d4:	2c00      	cmp	r4, #0
 80048d6:	f000 8092 	beq.w	80049fe <HAL_GPIO_Init+0x132>
  uint32_t position = 0x00u;
 80048da:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048dc:	f04f 0b01 	mov.w	fp, #1
 80048e0:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 80048e4:	ea1e 0a04 	ands.w	sl, lr, r4
 80048e8:	f000 8084 	beq.w	80049f4 <HAL_GPIO_Init+0x128>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048ec:	684d      	ldr	r5, [r1, #4]
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048ee:	2603      	movs	r6, #3
 80048f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048f4:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048f8:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048fc:	1e56      	subs	r6, r2, #1
 80048fe:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004900:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004904:	d97e      	bls.n	8004a04 <HAL_GPIO_Init+0x138>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004906:	2a03      	cmp	r2, #3
 8004908:	f040 80b9 	bne.w	8004a7e <HAL_GPIO_Init+0x1b2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800490c:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8004910:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004914:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004918:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800491a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800491e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004920:	d068      	beq.n	80049f4 <HAL_GPIO_Init+0x128>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004922:	4e6f      	ldr	r6, [pc, #444]	@ (8004ae0 <HAL_GPIO_Init+0x214>)
 8004924:	6e32      	ldr	r2, [r6, #96]	@ 0x60
 8004926:	f042 0701 	orr.w	r7, r2, #1
 800492a:	6637      	str	r7, [r6, #96]	@ 0x60
 800492c:	6e36      	ldr	r6, [r6, #96]	@ 0x60
 800492e:	f023 0803 	bic.w	r8, r3, #3
 8004932:	f006 0201 	and.w	r2, r6, #1
 8004936:	9203      	str	r2, [sp, #12]
 8004938:	f108 4980 	add.w	r9, r8, #1073741824	@ 0x40000000
 800493c:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 800493e:	f509 3280 	add.w	r2, r9, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004942:	f003 0703 	and.w	r7, r3, #3
 8004946:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 800494a:	f04f 0e0f 	mov.w	lr, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 800494e:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004950:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004954:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004958:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800495c:	d026      	beq.n	80049ac <HAL_GPIO_Init+0xe0>
 800495e:	4e61      	ldr	r6, [pc, #388]	@ (8004ae4 <HAL_GPIO_Init+0x218>)
 8004960:	42b0      	cmp	r0, r6
 8004962:	f000 809e 	beq.w	8004aa2 <HAL_GPIO_Init+0x1d6>
 8004966:	4e60      	ldr	r6, [pc, #384]	@ (8004ae8 <HAL_GPIO_Init+0x21c>)
 8004968:	42b0      	cmp	r0, r6
 800496a:	f000 80a0 	beq.w	8004aae <HAL_GPIO_Init+0x1e2>
 800496e:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8004af0 <HAL_GPIO_Init+0x224>
 8004972:	4540      	cmp	r0, r8
 8004974:	f000 808f 	beq.w	8004a96 <HAL_GPIO_Init+0x1ca>
 8004978:	f8df 9178 	ldr.w	r9, [pc, #376]	@ 8004af4 <HAL_GPIO_Init+0x228>
 800497c:	4548      	cmp	r0, r9
 800497e:	f000 80a2 	beq.w	8004ac6 <HAL_GPIO_Init+0x1fa>
 8004982:	f8df e174 	ldr.w	lr, [pc, #372]	@ 8004af8 <HAL_GPIO_Init+0x22c>
 8004986:	4570      	cmp	r0, lr
 8004988:	f000 80a3 	beq.w	8004ad2 <HAL_GPIO_Init+0x206>
 800498c:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 8004afc <HAL_GPIO_Init+0x230>
 8004990:	4540      	cmp	r0, r8
 8004992:	f000 8092 	beq.w	8004aba <HAL_GPIO_Init+0x1ee>
 8004996:	f8df e168 	ldr.w	lr, [pc, #360]	@ 8004b00 <HAL_GPIO_Init+0x234>
 800499a:	4570      	cmp	r0, lr
 800499c:	bf0c      	ite	eq
 800499e:	f04f 0e07 	moveq.w	lr, #7
 80049a2:	f04f 0e08 	movne.w	lr, #8
 80049a6:	fa0e f60c 	lsl.w	r6, lr, ip
 80049aa:	4337      	orrs	r7, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049ac:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049ae:	4a4f      	ldr	r2, [pc, #316]	@ (8004aec <HAL_GPIO_Init+0x220>)
 80049b0:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049b2:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 80049b4:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80049b8:	4e4c      	ldr	r6, [pc, #304]	@ (8004aec <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 80049ba:	bf54      	ite	pl
 80049bc:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80049be:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 80049c2:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 80049c4:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049c6:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80049c8:	4e48      	ldr	r6, [pc, #288]	@ (8004aec <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 80049ca:	bf54      	ite	pl
 80049cc:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80049ce:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 80049d2:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80049d4:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049d6:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80049d8:	4e44      	ldr	r6, [pc, #272]	@ (8004aec <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 80049da:	bf54      	ite	pl
 80049dc:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80049de:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 80049e2:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 80049e4:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049e6:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80049e8:	4d40      	ldr	r5, [pc, #256]	@ (8004aec <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 80049ea:	bf54      	ite	pl
 80049ec:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80049ee:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 80049f2:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 80049f4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049f6:	fa34 f203 	lsrs.w	r2, r4, r3
 80049fa:	f47f af71 	bne.w	80048e0 <HAL_GPIO_Init+0x14>
  }
}
 80049fe:	b005      	add	sp, #20
 8004a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004a04:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a08:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a0a:	ea08 0907 	and.w	r9, r8, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a0e:	fa06 f60c 	lsl.w	r6, r6, ip
 8004a12:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->OSPEEDR = temp;
 8004a16:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8004a1a:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a1e:	ea29 060e 	bic.w	r6, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a22:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8004a26:	fa0e f803 	lsl.w	r8, lr, r3
 8004a2a:	ea48 0906 	orr.w	r9, r8, r6
        GPIOx->OTYPER = temp;
 8004a2e:	f8c0 9004 	str.w	r9, [r0, #4]
        temp = GPIOx->PUPDR;
 8004a32:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a36:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a38:	ea0e 0807 	and.w	r8, lr, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a3c:	fa06 f60c 	lsl.w	r6, r6, ip
 8004a40:	ea46 0e08 	orr.w	lr, r6, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a44:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004a46:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a4a:	f47f af5f 	bne.w	800490c <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 8004a4e:	08de      	lsrs	r6, r3, #3
 8004a50:	eb00 0886 	add.w	r8, r0, r6, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a54:	f003 0607 	and.w	r6, r3, #7
 8004a58:	ea4f 0e86 	mov.w	lr, r6, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a5c:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8004a5e:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a62:	fa06 f60e 	lsl.w	r6, r6, lr
 8004a66:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a68:	260f      	movs	r6, #15
 8004a6a:	fa06 f60e 	lsl.w	r6, r6, lr
 8004a6e:	ea29 0e06 	bic.w	lr, r9, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a72:	9e01      	ldr	r6, [sp, #4]
 8004a74:	ea46 0e0e 	orr.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004a78:	f8c8 e020 	str.w	lr, [r8, #32]
 8004a7c:	e746      	b.n	800490c <HAL_GPIO_Init+0x40>
        temp = GPIOx->PUPDR;
 8004a7e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a82:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a84:	ea08 0907 	and.w	r9, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a88:	fa06 f60c 	lsl.w	r6, r6, ip
 8004a8c:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->PUPDR = temp;
 8004a90:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a94:	e73a      	b.n	800490c <HAL_GPIO_Init+0x40>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a96:	f04f 0e03 	mov.w	lr, #3
 8004a9a:	fa0e f60c 	lsl.w	r6, lr, ip
 8004a9e:	4337      	orrs	r7, r6
 8004aa0:	e784      	b.n	80049ac <HAL_GPIO_Init+0xe0>
 8004aa2:	f04f 0e01 	mov.w	lr, #1
 8004aa6:	fa0e f60c 	lsl.w	r6, lr, ip
 8004aaa:	4337      	orrs	r7, r6
 8004aac:	e77e      	b.n	80049ac <HAL_GPIO_Init+0xe0>
 8004aae:	f04f 0e02 	mov.w	lr, #2
 8004ab2:	fa0e f60c 	lsl.w	r6, lr, ip
 8004ab6:	4337      	orrs	r7, r6
 8004ab8:	e778      	b.n	80049ac <HAL_GPIO_Init+0xe0>
 8004aba:	f04f 0e06 	mov.w	lr, #6
 8004abe:	fa0e f60c 	lsl.w	r6, lr, ip
 8004ac2:	4337      	orrs	r7, r6
 8004ac4:	e772      	b.n	80049ac <HAL_GPIO_Init+0xe0>
 8004ac6:	f04f 0e04 	mov.w	lr, #4
 8004aca:	fa0e f60c 	lsl.w	r6, lr, ip
 8004ace:	4337      	orrs	r7, r6
 8004ad0:	e76c      	b.n	80049ac <HAL_GPIO_Init+0xe0>
 8004ad2:	f04f 0e05 	mov.w	lr, #5
 8004ad6:	fa0e f60c 	lsl.w	r6, lr, ip
 8004ada:	4337      	orrs	r7, r6
 8004adc:	e766      	b.n	80049ac <HAL_GPIO_Init+0xe0>
 8004ade:	bf00      	nop
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	48000400 	.word	0x48000400
 8004ae8:	48000800 	.word	0x48000800
 8004aec:	40010400 	.word	0x40010400
 8004af0:	48000c00 	.word	0x48000c00
 8004af4:	48001000 	.word	0x48001000
 8004af8:	48001400 	.word	0x48001400
 8004afc:	48001800 	.word	0x48001800
 8004b00:	48001c00 	.word	0x48001c00

08004b04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b04:	b10a      	cbz	r2, 8004b0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b06:	6181      	str	r1, [r0, #24]
 8004b08:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b0a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop

08004b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b10:	4a04      	ldr	r2, [pc, #16]	@ (8004b24 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004b12:	6951      	ldr	r1, [r2, #20]
 8004b14:	4201      	tst	r1, r0
 8004b16:	d100      	bne.n	8004b1a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004b18:	4770      	bx	lr
{
 8004b1a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b1c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b1e:	f7fc f95b 	bl	8000dd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b22:	bd08      	pop	{r3, pc}
 8004b24:	40010400 	.word	0x40010400

08004b28 <HAL_PWR_EnterSLEEPMode>:

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004b28:	4b0e      	ldr	r3, [pc, #56]	@ (8004b64 <HAL_PWR_EnterSLEEPMode+0x3c>)
{
 8004b2a:	b510      	push	{r4, lr}
 8004b2c:	460c      	mov	r4, r1
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004b2e:	6959      	ldr	r1, [r3, #20]
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004b30:	b960      	cbnz	r0, 8004b4c <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004b32:	058a      	lsls	r2, r1, #22
 8004b34:	d411      	bmi.n	8004b5a <HAL_PWR_EnterSLEEPMode+0x32>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b36:	4a0c      	ldr	r2, [pc, #48]	@ (8004b68 <HAL_PWR_EnterSLEEPMode+0x40>)
 8004b38:	6910      	ldr	r0, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004b3a:	2c01      	cmp	r4, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b3c:	f020 0304 	bic.w	r3, r0, #4
 8004b40:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004b42:	d008      	beq.n	8004b56 <HAL_PWR_EnterSLEEPMode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004b44:	bf40      	sev
    __WFE();
 8004b46:	bf20      	wfe
    __WFE();
 8004b48:	bf20      	wfe
  }

}
 8004b4a:	bd10      	pop	{r4, pc}
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8004b4c:	058b      	lsls	r3, r1, #22
 8004b4e:	d4f2      	bmi.n	8004b36 <HAL_PWR_EnterSLEEPMode+0xe>
      HAL_PWREx_EnableLowPowerRunMode();
 8004b50:	f000 f89e 	bl	8004c90 <HAL_PWREx_EnableLowPowerRunMode>
 8004b54:	e7ef      	b.n	8004b36 <HAL_PWR_EnterSLEEPMode+0xe>
    __WFI();
 8004b56:	bf30      	wfi
}
 8004b58:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004b5a:	f000 f8a1 	bl	8004ca0 <HAL_PWREx_DisableLowPowerRunMode>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d0e9      	beq.n	8004b36 <HAL_PWR_EnterSLEEPMode+0xe>
}
 8004b62:	bd10      	pop	{r4, pc}
 8004b64:	40007000 	.word	0x40007000
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004b6c:	4b02      	ldr	r3, [pc, #8]	@ (8004b78 <HAL_PWREx_GetVoltageRange+0xc>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8004b70:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40007000 	.word	0x40007000

08004b7c <HAL_PWREx_ControlVoltageScaling>:
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b7c:	4a3d      	ldr	r2, [pc, #244]	@ (8004c74 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b7e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b80:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b84:	f403 61c0 	and.w	r1, r3, #1536	@ 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b88:	d00a      	beq.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b8a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004b8e:	d005      	beq.n	8004b9c <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b90:	6810      	ldr	r0, [r2, #0]
 8004b92:	f420 6cc0 	bic.w	ip, r0, #1536	@ 0x600
 8004b96:	f44c 6380 	orr.w	r3, ip, #1024	@ 0x400
 8004b9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ba0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004ba4:	d0fa      	beq.n	8004b9c <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ba6:	6810      	ldr	r0, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ba8:	4933      	ldr	r1, [pc, #204]	@ (8004c78 <HAL_PWREx_ControlVoltageScaling+0xfc>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004baa:	f420 6cc0 	bic.w	ip, r0, #1536	@ 0x600
 8004bae:	f44c 7300 	orr.w	r3, ip, #512	@ 0x200
 8004bb2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bb4:	680b      	ldr	r3, [r1, #0]
 8004bb6:	4931      	ldr	r1, [pc, #196]	@ (8004c7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004bb8:	2032      	movs	r0, #50	@ 0x32
 8004bba:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bbe:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bc0:	fba1 1303 	umull	r1, r3, r1, r3
 8004bc4:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bc6:	0541      	lsls	r1, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bc8:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bcc:	d54c      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004bce:	f013 0107 	ands.w	r1, r3, #7
 8004bd2:	d02f      	beq.n	8004c34 <HAL_PWREx_ControlVoltageScaling+0xb8>
 8004bd4:	2901      	cmp	r1, #1
 8004bd6:	d027      	beq.n	8004c28 <HAL_PWREx_ControlVoltageScaling+0xac>
 8004bd8:	2902      	cmp	r1, #2
 8004bda:	d020      	beq.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0xa2>
 8004bdc:	2903      	cmp	r1, #3
 8004bde:	d019      	beq.n	8004c14 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004be0:	2904      	cmp	r1, #4
 8004be2:	d012      	beq.n	8004c0a <HAL_PWREx_ControlVoltageScaling+0x8e>
 8004be4:	2905      	cmp	r1, #5
 8004be6:	d00b      	beq.n	8004c00 <HAL_PWREx_ControlVoltageScaling+0x84>
 8004be8:	2906      	cmp	r1, #6
 8004bea:	d004      	beq.n	8004bf6 <HAL_PWREx_ControlVoltageScaling+0x7a>
 8004bec:	6950      	ldr	r0, [r2, #20]
 8004bee:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 8004bf0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bf4:	d538      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004bf6:	6951      	ldr	r1, [r2, #20]
 8004bf8:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 8004bfa:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfe:	d533      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c00:	6950      	ldr	r0, [r2, #20]
 8004c02:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 8004c04:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c08:	d52e      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c0a:	6951      	ldr	r1, [r2, #20]
 8004c0c:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 8004c0e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c12:	d529      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c14:	6950      	ldr	r0, [r2, #20]
 8004c16:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 8004c18:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c1c:	d524      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c1e:	6951      	ldr	r1, [r2, #20]
 8004c20:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 8004c22:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c26:	d51f      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c28:	6950      	ldr	r0, [r2, #20]
 8004c2a:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 8004c2c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c30:	d51a      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c32:	b1cb      	cbz	r3, 8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c34:	6951      	ldr	r1, [r2, #20]
 8004c36:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 8004c38:	f1a3 0308 	sub.w	r3, r3, #8
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c3c:	d514      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c3e:	6950      	ldr	r0, [r2, #20]
 8004c40:	0541      	lsls	r1, r0, #21
 8004c42:	d511      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c44:	6951      	ldr	r1, [r2, #20]
 8004c46:	0548      	lsls	r0, r1, #21
 8004c48:	d50e      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c4a:	6950      	ldr	r0, [r2, #20]
 8004c4c:	0541      	lsls	r1, r0, #21
 8004c4e:	d50b      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c50:	6951      	ldr	r1, [r2, #20]
 8004c52:	0548      	lsls	r0, r1, #21
 8004c54:	d508      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c56:	6950      	ldr	r0, [r2, #20]
 8004c58:	0541      	lsls	r1, r0, #21
 8004c5a:	d505      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c5c:	6951      	ldr	r1, [r2, #20]
 8004c5e:	0548      	lsls	r0, r1, #21
 8004c60:	d502      	bpl.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004c62:	6950      	ldr	r0, [r2, #20]
 8004c64:	0541      	lsls	r1, r0, #21
 8004c66:	d4e4      	bmi.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0xb6>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c68:	4a02      	ldr	r2, [pc, #8]	@ (8004c74 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004c6a:	6953      	ldr	r3, [r2, #20]
 8004c6c:	0558      	lsls	r0, r3, #21
 8004c6e:	d595      	bpl.n	8004b9c <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8004c70:	2003      	movs	r0, #3
}
 8004c72:	4770      	bx	lr
 8004c74:	40007000 	.word	0x40007000
 8004c78:	20000400 	.word	0x20000400
 8004c7c:	431bde83 	.word	0x431bde83

08004c80 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004c80:	4a02      	ldr	r2, [pc, #8]	@ (8004c8c <HAL_PWREx_EnableVddIO2+0xc>)
 8004c82:	6853      	ldr	r3, [r2, #4]
 8004c84:	f443 7000 	orr.w	r0, r3, #512	@ 0x200
 8004c88:	6050      	str	r0, [r2, #4]
}
 8004c8a:	4770      	bx	lr
 8004c8c:	40007000 	.word	0x40007000

08004c90 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004c90:	4a02      	ldr	r2, [pc, #8]	@ (8004c9c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	f443 4080 	orr.w	r0, r3, #16384	@ 0x4000
 8004c98:	6010      	str	r0, [r2, #0]
}
 8004c9a:	4770      	bx	lr
 8004c9c:	40007000 	.word	0x40007000

08004ca0 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004ca0:	4b34      	ldr	r3, [pc, #208]	@ (8004d74 <HAL_PWREx_DisableLowPowerRunMode+0xd4>)

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ca2:	4935      	ldr	r1, [pc, #212]	@ (8004d78 <HAL_PWREx_DisableLowPowerRunMode+0xd8>)
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004ca4:	681a      	ldr	r2, [r3, #0]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ca6:	4835      	ldr	r0, [pc, #212]	@ (8004d7c <HAL_PWREx_DisableLowPowerRunMode+0xdc>)
{
 8004ca8:	b410      	push	{r4}
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004caa:	f422 4480 	bic.w	r4, r2, #16384	@ 0x4000
 8004cae:	601c      	str	r4, [r3, #0]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cb0:	6809      	ldr	r1, [r1, #0]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004cb2:	695c      	ldr	r4, [r3, #20]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cb4:	2232      	movs	r2, #50	@ 0x32
 8004cb6:	fb02 f101 	mul.w	r1, r2, r1
 8004cba:	fba0 0101 	umull	r0, r1, r0, r1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004cbe:	05a0      	lsls	r0, r4, #22
 8004cc0:	d549      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004cc2:	0c8c      	lsrs	r4, r1, #18
 8004cc4:	1c62      	adds	r2, r4, #1
 8004cc6:	f012 0007 	ands.w	r0, r2, #7
 8004cca:	d02a      	beq.n	8004d22 <HAL_PWREx_DisableLowPowerRunMode+0x82>
 8004ccc:	2801      	cmp	r0, #1
 8004cce:	d022      	beq.n	8004d16 <HAL_PWREx_DisableLowPowerRunMode+0x76>
 8004cd0:	2802      	cmp	r0, #2
 8004cd2:	d01b      	beq.n	8004d0c <HAL_PWREx_DisableLowPowerRunMode+0x6c>
 8004cd4:	2803      	cmp	r0, #3
 8004cd6:	d014      	beq.n	8004d02 <HAL_PWREx_DisableLowPowerRunMode+0x62>
 8004cd8:	2804      	cmp	r0, #4
 8004cda:	d00d      	beq.n	8004cf8 <HAL_PWREx_DisableLowPowerRunMode+0x58>
 8004cdc:	2805      	cmp	r0, #5
 8004cde:	d006      	beq.n	8004cee <HAL_PWREx_DisableLowPowerRunMode+0x4e>
 8004ce0:	2806      	cmp	r0, #6
 8004ce2:	d142      	bne.n	8004d6a <HAL_PWREx_DisableLowPowerRunMode+0xca>
 8004ce4:	6959      	ldr	r1, [r3, #20]
 8004ce6:	058c      	lsls	r4, r1, #22
  {
    wait_loop_index--;
 8004ce8:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004cec:	d533      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004cee:	695c      	ldr	r4, [r3, #20]
 8004cf0:	05a1      	lsls	r1, r4, #22
    wait_loop_index--;
 8004cf2:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004cf6:	d52e      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004cf8:	6959      	ldr	r1, [r3, #20]
 8004cfa:	058c      	lsls	r4, r1, #22
    wait_loop_index--;
 8004cfc:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004d00:	d529      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d02:	695c      	ldr	r4, [r3, #20]
 8004d04:	05a1      	lsls	r1, r4, #22
    wait_loop_index--;
 8004d06:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004d0a:	d524      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d0c:	6959      	ldr	r1, [r3, #20]
 8004d0e:	058c      	lsls	r4, r1, #22
    wait_loop_index--;
 8004d10:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004d14:	d51f      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d16:	695c      	ldr	r4, [r3, #20]
 8004d18:	05a1      	lsls	r1, r4, #22
    wait_loop_index--;
 8004d1a:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004d1e:	d51a      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d20:	b1ca      	cbz	r2, 8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d22:	6959      	ldr	r1, [r3, #20]
 8004d24:	0589      	lsls	r1, r1, #22
    wait_loop_index--;
 8004d26:	f1a2 0208 	sub.w	r2, r2, #8
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004d2a:	d514      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d2c:	695c      	ldr	r4, [r3, #20]
 8004d2e:	05a4      	lsls	r4, r4, #22
 8004d30:	d511      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d32:	6959      	ldr	r1, [r3, #20]
 8004d34:	058c      	lsls	r4, r1, #22
 8004d36:	d50e      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d38:	695c      	ldr	r4, [r3, #20]
 8004d3a:	05a1      	lsls	r1, r4, #22
 8004d3c:	d50b      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d3e:	6959      	ldr	r1, [r3, #20]
 8004d40:	058c      	lsls	r4, r1, #22
 8004d42:	d508      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d44:	695c      	ldr	r4, [r3, #20]
 8004d46:	05a1      	lsls	r1, r4, #22
 8004d48:	d505      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d4a:	6959      	ldr	r1, [r3, #20]
 8004d4c:	058c      	lsls	r4, r1, #22
 8004d4e:	d502      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d50:	695c      	ldr	r4, [r3, #20]
 8004d52:	05a1      	lsls	r1, r4, #22
 8004d54:	d4e4      	bmi.n	8004d20 <HAL_PWREx_DisableLowPowerRunMode+0x80>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004d56:	4b07      	ldr	r3, [pc, #28]	@ (8004d74 <HAL_PWREx_DisableLowPowerRunMode+0xd4>)
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004d58:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004d5c:	695a      	ldr	r2, [r3, #20]
  return HAL_OK;
 8004d5e:	f412 7f00 	tst.w	r2, #512	@ 0x200
}
 8004d62:	bf14      	ite	ne
 8004d64:	2003      	movne	r0, #3
 8004d66:	2000      	moveq	r0, #0
 8004d68:	4770      	bx	lr
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004d6a:	6958      	ldr	r0, [r3, #20]
 8004d6c:	0581      	lsls	r1, r0, #22
    wait_loop_index--;
 8004d6e:	4622      	mov	r2, r4
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004d70:	d5f1      	bpl.n	8004d56 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004d72:	e7b7      	b.n	8004ce4 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8004d74:	40007000 	.word	0x40007000
 8004d78:	20000400 	.word	0x20000400
 8004d7c:	431bde83 	.word	0x431bde83

08004d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d80:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d82:	4d20      	ldr	r5, [pc, #128]	@ (8004e04 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8004d84:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004d86:	00db      	lsls	r3, r3, #3
{
 8004d88:	b083      	sub	sp, #12
 8004d8a:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d8c:	d51a      	bpl.n	8004dc4 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d8e:	f7ff feed 	bl	8004b6c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d92:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004d96:	d027      	beq.n	8004de8 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d98:	2c80      	cmp	r4, #128	@ 0x80
 8004d9a:	d82c      	bhi.n	8004df6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d9c:	d02f      	beq.n	8004dfe <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d9e:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8004da2:	fab4 f484 	clz	r4, r4
 8004da6:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004da8:	4d17      	ldr	r5, [pc, #92]	@ (8004e08 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8004daa:	6828      	ldr	r0, [r5, #0]
 8004dac:	f020 0307 	bic.w	r3, r0, #7
 8004db0:	4323      	orrs	r3, r4
 8004db2:	602b      	str	r3, [r5, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004db4:	6829      	ldr	r1, [r5, #0]
 8004db6:	f001 0207 	and.w	r2, r1, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8004dba:	1b10      	subs	r0, r2, r4
 8004dbc:	bf18      	it	ne
 8004dbe:	2001      	movne	r0, #1
 8004dc0:	b003      	add	sp, #12
 8004dc2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dc6:	f040 5180 	orr.w	r1, r0, #268435456	@ 0x10000000
 8004dca:	65a9      	str	r1, [r5, #88]	@ 0x58
 8004dcc:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 8004dce:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8004dd6:	f7ff fec9 	bl	8004b6c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dda:	6da9      	ldr	r1, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ddc:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8004de0:	f021 5280 	bic.w	r2, r1, #268435456	@ 0x10000000
 8004de4:	65aa      	str	r2, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004de6:	d1d7      	bne.n	8004d98 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8004de8:	2c80      	cmp	r4, #128	@ 0x80
 8004dea:	d906      	bls.n	8004dfa <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dec:	2ca1      	cmp	r4, #161	@ 0xa1
 8004dee:	bf34      	ite	cc
 8004df0:	2401      	movcc	r4, #1
 8004df2:	2402      	movcs	r4, #2
 8004df4:	e7d8      	b.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8004df6:	2403      	movs	r4, #3
 8004df8:	e7d6      	b.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004dfa:	2400      	movs	r4, #0
 8004dfc:	e7d4      	b.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dfe:	2402      	movs	r4, #2
 8004e00:	e7d2      	b.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x28>
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000
 8004e08:	40022000 	.word	0x40022000

08004e0c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e0c:	4a28      	ldr	r2, [pc, #160]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e0e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e10:	68d0      	ldr	r0, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e12:	f013 030c 	ands.w	r3, r3, #12
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x18>
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d035      	beq.n	8004e88 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d141      	bne.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8004e20:	4824      	ldr	r0, [pc, #144]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004e22:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e24:	4a22      	ldr	r2, [pc, #136]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e26:	6810      	ldr	r0, [r2, #0]
 8004e28:	0701      	lsls	r1, r0, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e2a:	bf54      	ite	pl
 8004e2c:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e30:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8004e32:	4921      	ldr	r1, [pc, #132]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e34:	bf54      	ite	pl
 8004e36:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e3a:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8004e3e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e42:	b303      	cbz	r3, 8004e86 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e44:	2b0c      	cmp	r3, #12
 8004e46:	d11d      	bne.n	8004e84 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e48:	4b19      	ldr	r3, [pc, #100]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	f002 0303 	and.w	r3, r2, #3
    switch (pllsource)
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d025      	beq.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x94>
 8004e54:	4919      	ldr	r1, [pc, #100]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	bf18      	it	ne
 8004e5a:	4601      	movne	r1, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e5c:	4b14      	ldr	r3, [pc, #80]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e5e:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e60:	68d8      	ldr	r0, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004e68:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e6a:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e6e:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e72:	fb01 f000 	mul.w	r0, r1, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e76:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e78:	0059      	lsls	r1, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e7a:	fbb0 fcf2 	udiv	ip, r0, r2
    sysclockfreq = pllvco / pllr;
 8004e7e:	fbbc f0f1 	udiv	r0, ip, r1
 8004e82:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e84:	2000      	movs	r0, #0
}
 8004e86:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e88:	f000 0103 	and.w	r1, r0, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e8c:	2901      	cmp	r1, #1
 8004e8e:	d0c9      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e90:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	f002 0303 	and.w	r3, r2, #3
    switch (pllsource)
 8004e98:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e9a:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8004e9e:	d1d9      	bne.n	8004e54 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8004ea0:	4904      	ldr	r1, [pc, #16]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004ea2:	e7db      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	4805      	ldr	r0, [pc, #20]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ea8:	bf18      	it	ne
 8004eaa:	2000      	movne	r0, #0
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	00f42400 	.word	0x00f42400
 8004eb8:	0800a804 	.word	0x0800a804
 8004ebc:	007a1200 	.word	0x007a1200

08004ec0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	f000 8230 	beq.w	8005326 <HAL_RCC_OscConfig+0x466>
{
 8004ec6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eca:	4a93      	ldr	r2, [pc, #588]	@ (8005118 <HAL_RCC_OscConfig+0x258>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ecc:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ece:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ed0:	68d6      	ldr	r6, [r2, #12]
 8004ed2:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ed4:	06d8      	lsls	r0, r3, #27
{
 8004ed6:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004edc:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ee0:	d52e      	bpl.n	8004f40 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ee2:	2d00      	cmp	r5, #0
 8004ee4:	f000 8121 	beq.w	800512a <HAL_RCC_OscConfig+0x26a>
 8004ee8:	2d0c      	cmp	r5, #12
 8004eea:	f000 811b 	beq.w	8005124 <HAL_RCC_OscConfig+0x264>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004eee:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8004ef0:	4f89      	ldr	r7, [pc, #548]	@ (8005118 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8192 	beq.w	800521c <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_MSI_ENABLE();
 8004ef8:	6838      	ldr	r0, [r7, #0]
 8004efa:	f040 0101 	orr.w	r1, r0, #1
 8004efe:	6039      	str	r1, [r7, #0]
        tickstart = HAL_GetTick();
 8004f00:	f7fe f820 	bl	8002f44 <HAL_GetTick>
 8004f04:	4681      	mov	r9, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f06:	e006      	b.n	8004f16 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f08:	f7fe f81c 	bl	8002f44 <HAL_GetTick>
 8004f0c:	eba0 0009 	sub.w	r0, r0, r9
 8004f10:	2802      	cmp	r0, #2
 8004f12:	f200 8193 	bhi.w	800523c <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	0793      	lsls	r3, r2, #30
 8004f1a:	d5f5      	bpl.n	8004f08 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	f043 0008 	orr.w	r0, r3, #8
 8004f22:	6038      	str	r0, [r7, #0]
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	6a22      	ldr	r2, [r4, #32]
 8004f28:	f021 03f0 	bic.w	r3, r1, #240	@ 0xf0
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	69e3      	ldr	r3, [r4, #28]
 8004f34:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
 8004f38:	ea41 2203 	orr.w	r2, r1, r3, lsl #8
 8004f3c:	607a      	str	r2, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	07d9      	lsls	r1, r3, #31
 8004f42:	f100 80bf 	bmi.w	80050c4 <HAL_RCC_OscConfig+0x204>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f46:	0799      	lsls	r1, r3, #30
 8004f48:	d523      	bpl.n	8004f92 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f4a:	2d04      	cmp	r5, #4
 8004f4c:	f000 8156 	beq.w	80051fc <HAL_RCC_OscConfig+0x33c>
 8004f50:	2d0c      	cmp	r5, #12
 8004f52:	f000 8150 	beq.w	80051f6 <HAL_RCC_OscConfig+0x336>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f56:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004f58:	4e6f      	ldr	r6, [pc, #444]	@ (8005118 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8189 	beq.w	8005272 <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_ENABLE();
 8004f60:	6830      	ldr	r0, [r6, #0]
 8004f62:	f440 7280 	orr.w	r2, r0, #256	@ 0x100
 8004f66:	6032      	str	r2, [r6, #0]
        tickstart = HAL_GetTick();
 8004f68:	f7fd ffec 	bl	8002f44 <HAL_GetTick>
 8004f6c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f6e:	e005      	b.n	8004f7c <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f70:	f7fd ffe8 	bl	8002f44 <HAL_GetTick>
 8004f74:	1bc2      	subs	r2, r0, r7
 8004f76:	2a02      	cmp	r2, #2
 8004f78:	f200 8160 	bhi.w	800523c <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f7c:	6831      	ldr	r1, [r6, #0]
 8004f7e:	054b      	lsls	r3, r1, #21
 8004f80:	d5f6      	bpl.n	8004f70 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f82:	6877      	ldr	r7, [r6, #4]
 8004f84:	6920      	ldr	r0, [r4, #16]
 8004f86:	f027 48fe 	bic.w	r8, r7, #2130706432	@ 0x7f000000
 8004f8a:	ea48 6300 	orr.w	r3, r8, r0, lsl #24
 8004f8e:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	0719      	lsls	r1, r3, #28
 8004f94:	d519      	bpl.n	8004fca <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f96:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004f98:	4e5f      	ldr	r6, [pc, #380]	@ (8005118 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 8117 	beq.w	80051ce <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 8004fa0:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004fa4:	f043 0201 	orr.w	r2, r3, #1
 8004fa8:	f8c6 2094 	str.w	r2, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004fac:	f7fd ffca 	bl	8002f44 <HAL_GetTick>
 8004fb0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fb2:	e005      	b.n	8004fc0 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb4:	f7fd ffc6 	bl	8002f44 <HAL_GetTick>
 8004fb8:	1bc0      	subs	r0, r0, r7
 8004fba:	2802      	cmp	r0, #2
 8004fbc:	f200 813e 	bhi.w	800523c <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fc0:	f8d6 1094 	ldr.w	r1, [r6, #148]	@ 0x94
 8004fc4:	078a      	lsls	r2, r1, #30
 8004fc6:	d5f5      	bpl.n	8004fb4 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	075f      	lsls	r7, r3, #29
 8004fcc:	d53f      	bpl.n	800504e <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fce:	4f52      	ldr	r7, [pc, #328]	@ (8005118 <HAL_RCC_OscConfig+0x258>)
 8004fd0:	6dbe      	ldr	r6, [r7, #88]	@ 0x58
 8004fd2:	00f6      	lsls	r6, r6, #3
 8004fd4:	f100 814b 	bmi.w	800526e <HAL_RCC_OscConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004fda:	f040 5380 	orr.w	r3, r0, #268435456	@ 0x10000000
 8004fde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fe0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fe2:	f002 5180 	and.w	r1, r2, #268435456	@ 0x10000000
 8004fe6:	9101      	str	r1, [sp, #4]
 8004fe8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004fea:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fec:	4f4b      	ldr	r7, [pc, #300]	@ (800511c <HAL_RCC_OscConfig+0x25c>)
 8004fee:	6838      	ldr	r0, [r7, #0]
 8004ff0:	05c0      	lsls	r0, r0, #23
 8004ff2:	f140 819a 	bpl.w	800532a <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff6:	68a0      	ldr	r0, [r4, #8]
 8004ff8:	2801      	cmp	r0, #1
 8004ffa:	f000 814c 	beq.w	8005296 <HAL_RCC_OscConfig+0x3d6>
 8004ffe:	2805      	cmp	r0, #5
 8005000:	f000 81c2 	beq.w	8005388 <HAL_RCC_OscConfig+0x4c8>
 8005004:	4f44      	ldr	r7, [pc, #272]	@ (8005118 <HAL_RCC_OscConfig+0x258>)
 8005006:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800500a:	f023 0201 	bic.w	r2, r3, #1
 800500e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8005012:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005016:	f021 0304 	bic.w	r3, r1, #4
 800501a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800501e:	2800      	cmp	r0, #0
 8005020:	f040 8140 	bne.w	80052a4 <HAL_RCC_OscConfig+0x3e4>
      tickstart = HAL_GetTick();
 8005024:	f7fd ff8e 	bl	8002f44 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005028:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800502c:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800502e:	e006      	b.n	800503e <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005030:	f7fd ff88 	bl	8002f44 <HAL_GetTick>
 8005034:	eba0 0208 	sub.w	r2, r0, r8
 8005038:	454a      	cmp	r2, r9
 800503a:	f200 80ff 	bhi.w	800523c <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800503e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8005042:	0783      	lsls	r3, r0, #30
 8005044:	d4f4      	bmi.n	8005030 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8005046:	2e00      	cmp	r6, #0
 8005048:	f040 8181 	bne.w	800534e <HAL_RCC_OscConfig+0x48e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	069e      	lsls	r6, r3, #26
 8005050:	d518      	bpl.n	8005084 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005052:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8005054:	4e30      	ldr	r6, [pc, #192]	@ (8005118 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005056:	2800      	cmp	r0, #0
 8005058:	f000 8151 	beq.w	80052fe <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_ENABLE();
 800505c:	f8d6 0098 	ldr.w	r0, [r6, #152]	@ 0x98
 8005060:	f040 0201 	orr.w	r2, r0, #1
 8005064:	f8c6 2098 	str.w	r2, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8005068:	f7fd ff6c 	bl	8002f44 <HAL_GetTick>
 800506c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800506e:	e005      	b.n	800507c <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005070:	f7fd ff68 	bl	8002f44 <HAL_GetTick>
 8005074:	1bc2      	subs	r2, r0, r7
 8005076:	2a02      	cmp	r2, #2
 8005078:	f200 80e0 	bhi.w	800523c <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800507c:	f8d6 1098 	ldr.w	r1, [r6, #152]	@ 0x98
 8005080:	0788      	lsls	r0, r1, #30
 8005082:	d5f5      	bpl.n	8005070 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005084:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005086:	b1de      	cbz	r6, 80050c0 <HAL_RCC_OscConfig+0x200>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005088:	2e02      	cmp	r6, #2
 800508a:	f000 818b 	beq.w	80053a4 <HAL_RCC_OscConfig+0x4e4>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800508e:	2d0c      	cmp	r5, #12
 8005090:	f000 808d 	beq.w	80051ae <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_PLL_DISABLE();
 8005094:	4c20      	ldr	r4, [pc, #128]	@ (8005118 <HAL_RCC_OscConfig+0x258>)
 8005096:	6825      	ldr	r5, [r4, #0]
 8005098:	f025 7780 	bic.w	r7, r5, #16777216	@ 0x1000000
 800509c:	6027      	str	r7, [r4, #0]
        tickstart = HAL_GetTick();
 800509e:	f7fd ff51 	bl	8002f44 <HAL_GetTick>
 80050a2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a4:	e005      	b.n	80050b2 <HAL_RCC_OscConfig+0x1f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a6:	f7fd ff4d 	bl	8002f44 <HAL_GetTick>
 80050aa:	1b81      	subs	r1, r0, r6
 80050ac:	2902      	cmp	r1, #2
 80050ae:	f200 80c5 	bhi.w	800523c <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	019b      	lsls	r3, r3, #6
 80050b6:	d4f6      	bmi.n	80050a6 <HAL_RCC_OscConfig+0x1e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050b8:	68e0      	ldr	r0, [r4, #12]
 80050ba:	4a19      	ldr	r2, [pc, #100]	@ (8005120 <HAL_RCC_OscConfig+0x260>)
 80050bc:	4002      	ands	r2, r0
 80050be:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 80050c0:	2000      	movs	r0, #0
 80050c2:	e075      	b.n	80051b0 <HAL_RCC_OscConfig+0x2f0>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050c4:	2d08      	cmp	r5, #8
 80050c6:	d078      	beq.n	80051ba <HAL_RCC_OscConfig+0x2fa>
 80050c8:	2d0c      	cmp	r5, #12
 80050ca:	d074      	beq.n	80051b6 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050cc:	6861      	ldr	r1, [r4, #4]
 80050ce:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80050d2:	f000 80b7 	beq.w	8005244 <HAL_RCC_OscConfig+0x384>
 80050d6:	f5b1 2fa0 	cmp.w	r1, #327680	@ 0x50000
 80050da:	f000 8144 	beq.w	8005366 <HAL_RCC_OscConfig+0x4a6>
 80050de:	4f0e      	ldr	r7, [pc, #56]	@ (8005118 <HAL_RCC_OscConfig+0x258>)
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	f422 3380 	bic.w	r3, r2, #65536	@ 0x10000
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	6838      	ldr	r0, [r7, #0]
 80050ea:	f420 2280 	bic.w	r2, r0, #262144	@ 0x40000
 80050ee:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050f0:	2900      	cmp	r1, #0
 80050f2:	f040 80ac 	bne.w	800524e <HAL_RCC_OscConfig+0x38e>
        tickstart = HAL_GetTick();
 80050f6:	f7fd ff25 	bl	8002f44 <HAL_GetTick>
 80050fa:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050fc:	e006      	b.n	800510c <HAL_RCC_OscConfig+0x24c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050fe:	f7fd ff21 	bl	8002f44 <HAL_GetTick>
 8005102:	eba0 0308 	sub.w	r3, r0, r8
 8005106:	2b64      	cmp	r3, #100	@ 0x64
 8005108:	f200 8098 	bhi.w	800523c <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	0388      	lsls	r0, r1, #14
 8005110:	d4f5      	bmi.n	80050fe <HAL_RCC_OscConfig+0x23e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	e717      	b.n	8004f46 <HAL_RCC_OscConfig+0x86>
 8005116:	bf00      	nop
 8005118:	40021000 	.word	0x40021000
 800511c:	40007000 	.word	0x40007000
 8005120:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005124:	2e01      	cmp	r6, #1
 8005126:	f47f aee2 	bne.w	8004eee <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800512a:	4fac      	ldr	r7, [pc, #688]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	0789      	lsls	r1, r1, #30
 8005130:	d43a      	bmi.n	80051a8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005132:	4faa      	ldr	r7, [pc, #680]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 8005134:	6a20      	ldr	r0, [r4, #32]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	0712      	lsls	r2, r2, #28
 800513a:	bf56      	itet	pl
 800513c:	f8d7 7094 	ldrpl.w	r7, [r7, #148]	@ 0x94
 8005140:	683f      	ldrmi	r7, [r7, #0]
 8005142:	093f      	lsrpl	r7, r7, #4
 8005144:	f007 01f0 	and.w	r1, r7, #240	@ 0xf0
 8005148:	4288      	cmp	r0, r1
 800514a:	f200 80c0 	bhi.w	80052ce <HAL_RCC_OscConfig+0x40e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800514e:	4ba3      	ldr	r3, [pc, #652]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 8005150:	681f      	ldr	r7, [r3, #0]
 8005152:	f047 0208 	orr.w	r2, r7, #8
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	6819      	ldr	r1, [r3, #0]
 800515a:	f021 07f0 	bic.w	r7, r1, #240	@ 0xf0
 800515e:	4307      	orrs	r7, r0
 8005160:	601f      	str	r7, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	69e1      	ldr	r1, [r4, #28]
 8005166:	f422 477f 	bic.w	r7, r2, #65280	@ 0xff00
 800516a:	ea47 2201 	orr.w	r2, r7, r1, lsl #8
 800516e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005170:	2d00      	cmp	r5, #0
 8005172:	f000 80f2 	beq.w	800535a <HAL_RCC_OscConfig+0x49a>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005176:	f7ff fe49 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 800517a:	4b98      	ldr	r3, [pc, #608]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 800517c:	4a98      	ldr	r2, [pc, #608]	@ (80053e0 <HAL_RCC_OscConfig+0x520>)
 800517e:	689f      	ldr	r7, [r3, #8]
 8005180:	f3c7 1103 	ubfx	r1, r7, #4, #4
 8005184:	4f97      	ldr	r7, [pc, #604]	@ (80053e4 <HAL_RCC_OscConfig+0x524>)
 8005186:	f812 8001 	ldrb.w	r8, [r2, r1]
 800518a:	f008 091f 	and.w	r9, r8, #31
 800518e:	fa20 f309 	lsr.w	r3, r0, r9
        status = HAL_InitTick(uwTickPrio);
 8005192:	4895      	ldr	r0, [pc, #596]	@ (80053e8 <HAL_RCC_OscConfig+0x528>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005194:	603b      	str	r3, [r7, #0]
        status = HAL_InitTick(uwTickPrio);
 8005196:	6800      	ldr	r0, [r0, #0]
 8005198:	f7fd fe92 	bl	8002ec0 <HAL_InitTick>
        if(status != HAL_OK)
 800519c:	b940      	cbnz	r0, 80051b0 <HAL_RCC_OscConfig+0x2f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	07d9      	lsls	r1, r3, #31
 80051a2:	f57f aed0 	bpl.w	8004f46 <HAL_RCC_OscConfig+0x86>
 80051a6:	e78d      	b.n	80050c4 <HAL_RCC_OscConfig+0x204>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051a8:	69a3      	ldr	r3, [r4, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1c1      	bne.n	8005132 <HAL_RCC_OscConfig+0x272>
    return HAL_ERROR;
 80051ae:	2001      	movs	r0, #1
}
 80051b0:	b003      	add	sp, #12
 80051b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051b6:	2e03      	cmp	r6, #3
 80051b8:	d188      	bne.n	80050cc <HAL_RCC_OscConfig+0x20c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ba:	4a88      	ldr	r2, [pc, #544]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 80051bc:	6811      	ldr	r1, [r2, #0]
 80051be:	038a      	lsls	r2, r1, #14
 80051c0:	f57f aec1 	bpl.w	8004f46 <HAL_RCC_OscConfig+0x86>
 80051c4:	6867      	ldr	r7, [r4, #4]
 80051c6:	2f00      	cmp	r7, #0
 80051c8:	f47f aebd 	bne.w	8004f46 <HAL_RCC_OscConfig+0x86>
 80051cc:	e7ef      	b.n	80051ae <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_DISABLE();
 80051ce:	f8d6 7094 	ldr.w	r7, [r6, #148]	@ 0x94
 80051d2:	f027 0201 	bic.w	r2, r7, #1
 80051d6:	f8c6 2094 	str.w	r2, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80051da:	f7fd feb3 	bl	8002f44 <HAL_GetTick>
 80051de:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051e0:	e004      	b.n	80051ec <HAL_RCC_OscConfig+0x32c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e2:	f7fd feaf 	bl	8002f44 <HAL_GetTick>
 80051e6:	1bc0      	subs	r0, r0, r7
 80051e8:	2802      	cmp	r0, #2
 80051ea:	d827      	bhi.n	800523c <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051ec:	f8d6 1094 	ldr.w	r1, [r6, #148]	@ 0x94
 80051f0:	078b      	lsls	r3, r1, #30
 80051f2:	d4f6      	bmi.n	80051e2 <HAL_RCC_OscConfig+0x322>
 80051f4:	e6e8      	b.n	8004fc8 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051f6:	2e02      	cmp	r6, #2
 80051f8:	f47f aead 	bne.w	8004f56 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051fc:	4e77      	ldr	r6, [pc, #476]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 80051fe:	6831      	ldr	r1, [r6, #0]
 8005200:	054a      	lsls	r2, r1, #21
 8005202:	d502      	bpl.n	800520a <HAL_RCC_OscConfig+0x34a>
 8005204:	68e0      	ldr	r0, [r4, #12]
 8005206:	2800      	cmp	r0, #0
 8005208:	d0d1      	beq.n	80051ae <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520a:	4f74      	ldr	r7, [pc, #464]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 800520c:	6921      	ldr	r1, [r4, #16]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	f022 46fe 	bic.w	r6, r2, #2130706432	@ 0x7f000000
 8005214:	ea46 6001 	orr.w	r0, r6, r1, lsl #24
 8005218:	6078      	str	r0, [r7, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800521a:	e6ba      	b.n	8004f92 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 800521c:	6838      	ldr	r0, [r7, #0]
 800521e:	f020 0101 	bic.w	r1, r0, #1
 8005222:	6039      	str	r1, [r7, #0]
        tickstart = HAL_GetTick();
 8005224:	f7fd fe8e 	bl	8002f44 <HAL_GetTick>
 8005228:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	0790      	lsls	r0, r2, #30
 800522e:	d5b6      	bpl.n	800519e <HAL_RCC_OscConfig+0x2de>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005230:	f7fd fe88 	bl	8002f44 <HAL_GetTick>
 8005234:	eba0 0308 	sub.w	r3, r0, r8
 8005238:	2b02      	cmp	r3, #2
 800523a:	d9f6      	bls.n	800522a <HAL_RCC_OscConfig+0x36a>
            return HAL_TIMEOUT;
 800523c:	2003      	movs	r0, #3
}
 800523e:	b003      	add	sp, #12
 8005240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005244:	4865      	ldr	r0, [pc, #404]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 8005246:	6803      	ldr	r3, [r0, #0]
 8005248:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800524c:	6002      	str	r2, [r0, #0]
        tickstart = HAL_GetTick();
 800524e:	f7fd fe79 	bl	8002f44 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005252:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 80053dc <HAL_RCC_OscConfig+0x51c>
        tickstart = HAL_GetTick();
 8005256:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005258:	e004      	b.n	8005264 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800525a:	f7fd fe73 	bl	8002f44 <HAL_GetTick>
 800525e:	1bc0      	subs	r0, r0, r7
 8005260:	2864      	cmp	r0, #100	@ 0x64
 8005262:	d8eb      	bhi.n	800523c <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005264:	f8d9 1000 	ldr.w	r1, [r9]
 8005268:	038b      	lsls	r3, r1, #14
 800526a:	d5f6      	bpl.n	800525a <HAL_RCC_OscConfig+0x39a>
 800526c:	e751      	b.n	8005112 <HAL_RCC_OscConfig+0x252>
    FlagStatus       pwrclkchanged = RESET;
 800526e:	2600      	movs	r6, #0
 8005270:	e6bc      	b.n	8004fec <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8005272:	6830      	ldr	r0, [r6, #0]
 8005274:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8005278:	6032      	str	r2, [r6, #0]
        tickstart = HAL_GetTick();
 800527a:	f7fd fe63 	bl	8002f44 <HAL_GetTick>
 800527e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005280:	e004      	b.n	800528c <HAL_RCC_OscConfig+0x3cc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005282:	f7fd fe5f 	bl	8002f44 <HAL_GetTick>
 8005286:	1bc3      	subs	r3, r0, r7
 8005288:	2b02      	cmp	r3, #2
 800528a:	d8d7      	bhi.n	800523c <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800528c:	6831      	ldr	r1, [r6, #0]
 800528e:	0548      	lsls	r0, r1, #21
 8005290:	d4f7      	bmi.n	8005282 <HAL_RCC_OscConfig+0x3c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	e67d      	b.n	8004f92 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005296:	4951      	ldr	r1, [pc, #324]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 8005298:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800529c:	f043 0001 	orr.w	r0, r3, #1
 80052a0:	f8c1 0090 	str.w	r0, [r1, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80052a4:	f7fd fe4e 	bl	8002f44 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a8:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 80053dc <HAL_RCC_OscConfig+0x51c>
      tickstart = HAL_GetTick();
 80052ac:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ae:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b2:	e004      	b.n	80052be <HAL_RCC_OscConfig+0x3fe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b4:	f7fd fe46 	bl	8002f44 <HAL_GetTick>
 80052b8:	1bc1      	subs	r1, r0, r7
 80052ba:	4549      	cmp	r1, r9
 80052bc:	d8be      	bhi.n	800523c <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052be:	f8d8 2090 	ldr.w	r2, [r8, #144]	@ 0x90
 80052c2:	0792      	lsls	r2, r2, #30
 80052c4:	d5f6      	bpl.n	80052b4 <HAL_RCC_OscConfig+0x3f4>
    if(pwrclkchanged == SET)
 80052c6:	2e00      	cmp	r6, #0
 80052c8:	f43f aec0 	beq.w	800504c <HAL_RCC_OscConfig+0x18c>
 80052cc:	e03f      	b.n	800534e <HAL_RCC_OscConfig+0x48e>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052ce:	f7ff fd57 	bl	8004d80 <RCC_SetFlashLatencyFromMSIRange>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	f47f af6b 	bne.w	80051ae <HAL_RCC_OscConfig+0x2ee>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052d8:	4840      	ldr	r0, [pc, #256]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 80052da:	6803      	ldr	r3, [r0, #0]
 80052dc:	f043 0708 	orr.w	r7, r3, #8
 80052e0:	6007      	str	r7, [r0, #0]
 80052e2:	6801      	ldr	r1, [r0, #0]
 80052e4:	6a23      	ldr	r3, [r4, #32]
 80052e6:	f021 02f0 	bic.w	r2, r1, #240	@ 0xf0
 80052ea:	431a      	orrs	r2, r3
 80052ec:	6002      	str	r2, [r0, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ee:	6847      	ldr	r7, [r0, #4]
 80052f0:	69e1      	ldr	r1, [r4, #28]
 80052f2:	f427 4c7f 	bic.w	ip, r7, #65280	@ 0xff00
 80052f6:	ea4c 2201 	orr.w	r2, ip, r1, lsl #8
 80052fa:	6042      	str	r2, [r0, #4]
 80052fc:	e73b      	b.n	8005176 <HAL_RCC_OscConfig+0x2b6>
      __HAL_RCC_HSI48_DISABLE();
 80052fe:	f8d6 2098 	ldr.w	r2, [r6, #152]	@ 0x98
 8005302:	f022 0701 	bic.w	r7, r2, #1
 8005306:	f8c6 7098 	str.w	r7, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800530a:	f7fd fe1b 	bl	8002f44 <HAL_GetTick>
 800530e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005310:	e004      	b.n	800531c <HAL_RCC_OscConfig+0x45c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005312:	f7fd fe17 	bl	8002f44 <HAL_GetTick>
 8005316:	1bc3      	subs	r3, r0, r7
 8005318:	2b02      	cmp	r3, #2
 800531a:	d88f      	bhi.n	800523c <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800531c:	f8d6 1098 	ldr.w	r1, [r6, #152]	@ 0x98
 8005320:	0789      	lsls	r1, r1, #30
 8005322:	d4f6      	bmi.n	8005312 <HAL_RCC_OscConfig+0x452>
 8005324:	e6ae      	b.n	8005084 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 8005326:	2001      	movs	r0, #1
}
 8005328:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005330:	603a      	str	r2, [r7, #0]
      tickstart = HAL_GetTick();
 8005332:	f7fd fe07 	bl	8002f44 <HAL_GetTick>
 8005336:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	05c9      	lsls	r1, r1, #23
 800533c:	f53f ae5b 	bmi.w	8004ff6 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005340:	f7fd fe00 	bl	8002f44 <HAL_GetTick>
 8005344:	eba0 0308 	sub.w	r3, r0, r8
 8005348:	2b02      	cmp	r3, #2
 800534a:	d9f5      	bls.n	8005338 <HAL_RCC_OscConfig+0x478>
 800534c:	e776      	b.n	800523c <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800534e:	4e23      	ldr	r6, [pc, #140]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 8005350:	6db7      	ldr	r7, [r6, #88]	@ 0x58
 8005352:	f027 5180 	bic.w	r1, r7, #268435456	@ 0x10000000
 8005356:	65b1      	str	r1, [r6, #88]	@ 0x58
 8005358:	e678      	b.n	800504c <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800535a:	f7ff fd11 	bl	8004d80 <RCC_SetFlashLatencyFromMSIRange>
 800535e:	2800      	cmp	r0, #0
 8005360:	f43f af09 	beq.w	8005176 <HAL_RCC_OscConfig+0x2b6>
 8005364:	e723      	b.n	80051ae <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005366:	f101 4e80 	add.w	lr, r1, #1073741824	@ 0x40000000
 800536a:	f5ae 3c3c 	sub.w	ip, lr, #192512	@ 0x2f000
 800536e:	f8dc 0000 	ldr.w	r0, [ip]
 8005372:	f440 2280 	orr.w	r2, r0, #262144	@ 0x40000
 8005376:	f8cc 2000 	str.w	r2, [ip]
 800537a:	f8dc 1000 	ldr.w	r1, [ip]
 800537e:	f441 3780 	orr.w	r7, r1, #65536	@ 0x10000
 8005382:	f8cc 7000 	str.w	r7, [ip]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005386:	e762      	b.n	800524e <HAL_RCC_OscConfig+0x38e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005388:	4914      	ldr	r1, [pc, #80]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 800538a:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800538e:	f043 0004 	orr.w	r0, r3, #4
 8005392:	f8c1 0090 	str.w	r0, [r1, #144]	@ 0x90
 8005396:	f8d1 7090 	ldr.w	r7, [r1, #144]	@ 0x90
 800539a:	f047 0201 	orr.w	r2, r7, #1
 800539e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053a2:	e77f      	b.n	80052a4 <HAL_RCC_OscConfig+0x3e4>
      pll_config = RCC->PLLCFGR;
 80053a4:	4e0d      	ldr	r6, [pc, #52]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 80053a8:	68f7      	ldr	r7, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053aa:	f007 0303 	and.w	r3, r7, #3
 80053ae:	4283      	cmp	r3, r0
 80053b0:	d058      	beq.n	8005464 <HAL_RCC_OscConfig+0x5a4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053b2:	2d0c      	cmp	r5, #12
 80053b4:	f43f aefb 	beq.w	80051ae <HAL_RCC_OscConfig+0x2ee>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053b8:	4d08      	ldr	r5, [pc, #32]	@ (80053dc <HAL_RCC_OscConfig+0x51c>)
 80053ba:	6828      	ldr	r0, [r5, #0]
 80053bc:	0142      	lsls	r2, r0, #5
 80053be:	f53f aef6 	bmi.w	80051ae <HAL_RCC_OscConfig+0x2ee>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053c2:	682a      	ldr	r2, [r5, #0]
 80053c4:	00d3      	lsls	r3, r2, #3
 80053c6:	f53f aef2 	bmi.w	80051ae <HAL_RCC_OscConfig+0x2ee>
            __HAL_RCC_PLL_DISABLE();
 80053ca:	682f      	ldr	r7, [r5, #0]
 80053cc:	f027 7380 	bic.w	r3, r7, #16777216	@ 0x1000000
 80053d0:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80053d2:	f7fd fdb7 	bl	8002f44 <HAL_GetTick>
 80053d6:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d8:	e00e      	b.n	80053f8 <HAL_RCC_OscConfig+0x538>
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000
 80053e0:	0800a83c 	.word	0x0800a83c
 80053e4:	20000400 	.word	0x20000400
 80053e8:	20000408 	.word	0x20000408
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ec:	f7fd fdaa 	bl	8002f44 <HAL_GetTick>
 80053f0:	1b80      	subs	r0, r0, r6
 80053f2:	2802      	cmp	r0, #2
 80053f4:	f63f af22 	bhi.w	800523c <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f8:	6829      	ldr	r1, [r5, #0]
 80053fa:	018f      	lsls	r7, r1, #6
 80053fc:	d4f6      	bmi.n	80053ec <HAL_RCC_OscConfig+0x52c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053fe:	68ee      	ldr	r6, [r5, #12]
 8005400:	4838      	ldr	r0, [pc, #224]	@ (80054e4 <HAL_RCC_OscConfig+0x624>)
 8005402:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005404:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005406:	e9d4 710d 	ldrd	r7, r1, [r4, #52]	@ 0x34
 800540a:	4030      	ands	r0, r6
 800540c:	e9d4 460f 	ldrd	r4, r6, [r4, #60]	@ 0x3c
 8005410:	4310      	orrs	r0, r2
 8005412:	ea40 2e07 	orr.w	lr, r0, r7, lsl #8
 8005416:	ea4e 6cc1 	orr.w	ip, lr, r1, lsl #27
 800541a:	0860      	lsrs	r0, r4, #1
 800541c:	f103 38ff 	add.w	r8, r3, #4294967295
 8005420:	ea4c 1708 	orr.w	r7, ip, r8, lsl #4
 8005424:	0872      	lsrs	r2, r6, #1
 8005426:	f100 39ff 	add.w	r9, r0, #4294967295
 800542a:	ea47 5149 	orr.w	r1, r7, r9, lsl #21
 800542e:	1e53      	subs	r3, r2, #1
 8005430:	ea41 6443 	orr.w	r4, r1, r3, lsl #25
 8005434:	60ec      	str	r4, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8005436:	6828      	ldr	r0, [r5, #0]
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005438:	4e2b      	ldr	r6, [pc, #172]	@ (80054e8 <HAL_RCC_OscConfig+0x628>)
            __HAL_RCC_PLL_ENABLE();
 800543a:	f040 7780 	orr.w	r7, r0, #16777216	@ 0x1000000
 800543e:	602f      	str	r7, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005440:	68ea      	ldr	r2, [r5, #12]
 8005442:	f042 7180 	orr.w	r1, r2, #16777216	@ 0x1000000
 8005446:	60e9      	str	r1, [r5, #12]
            tickstart = HAL_GetTick();
 8005448:	f7fd fd7c 	bl	8002f44 <HAL_GetTick>
 800544c:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800544e:	e005      	b.n	800545c <HAL_RCC_OscConfig+0x59c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005450:	f7fd fd78 	bl	8002f44 <HAL_GetTick>
 8005454:	1b03      	subs	r3, r0, r4
 8005456:	2b02      	cmp	r3, #2
 8005458:	f63f aef0 	bhi.w	800523c <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545c:	6835      	ldr	r5, [r6, #0]
 800545e:	01a8      	lsls	r0, r5, #6
 8005460:	d5f6      	bpl.n	8005450 <HAL_RCC_OscConfig+0x590>
 8005462:	e62d      	b.n	80050c0 <HAL_RCC_OscConfig+0x200>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005464:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005466:	f007 0c70 	and.w	ip, r7, #112	@ 0x70
 800546a:	f102 38ff 	add.w	r8, r2, #4294967295
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800546e:	ebbc 1f08 	cmp.w	ip, r8, lsl #4
 8005472:	d19e      	bne.n	80053b2 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005476:	f407 43fe 	and.w	r3, r7, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800547a:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 800547e:	d198      	bne.n	80053b2 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005480:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005482:	f007 4078 	and.w	r0, r7, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005486:	ebb0 6fc2 	cmp.w	r0, r2, lsl #27
 800548a:	d192      	bne.n	80053b2 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800548c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800548e:	0848      	lsrs	r0, r1, #1
 8005490:	f407 03c0 	and.w	r3, r7, #6291456	@ 0x600000
 8005494:	f100 39ff 	add.w	r9, r0, #4294967295
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005498:	ebb3 5f49 	cmp.w	r3, r9, lsl #21
 800549c:	d189      	bne.n	80053b2 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800549e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80054a0:	0853      	lsrs	r3, r2, #1
 80054a2:	f007 67c0 	and.w	r7, r7, #100663296	@ 0x6000000
 80054a6:	1e59      	subs	r1, r3, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054a8:	ebb7 6f41 	cmp.w	r7, r1, lsl #25
 80054ac:	d181      	bne.n	80053b2 <HAL_RCC_OscConfig+0x4f2>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ae:	6835      	ldr	r5, [r6, #0]
 80054b0:	01a9      	lsls	r1, r5, #6
 80054b2:	f53f ae05 	bmi.w	80050c0 <HAL_RCC_OscConfig+0x200>
          __HAL_RCC_PLL_ENABLE();
 80054b6:	6834      	ldr	r4, [r6, #0]
 80054b8:	f044 7080 	orr.w	r0, r4, #16777216	@ 0x1000000
 80054bc:	6030      	str	r0, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054be:	68f2      	ldr	r2, [r6, #12]
 80054c0:	f042 7780 	orr.w	r7, r2, #16777216	@ 0x1000000
 80054c4:	60f7      	str	r7, [r6, #12]
          tickstart = HAL_GetTick();
 80054c6:	f7fd fd3d 	bl	8002f44 <HAL_GetTick>
 80054ca:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054cc:	e005      	b.n	80054da <HAL_RCC_OscConfig+0x61a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ce:	f7fd fd39 	bl	8002f44 <HAL_GetTick>
 80054d2:	1b41      	subs	r1, r0, r5
 80054d4:	2902      	cmp	r1, #2
 80054d6:	f63f aeb1 	bhi.w	800523c <HAL_RCC_OscConfig+0x37c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054da:	6833      	ldr	r3, [r6, #0]
 80054dc:	019a      	lsls	r2, r3, #6
 80054de:	d5f6      	bpl.n	80054ce <HAL_RCC_OscConfig+0x60e>
 80054e0:	e5ee      	b.n	80050c0 <HAL_RCC_OscConfig+0x200>
 80054e2:	bf00      	nop
 80054e4:	019d808c 	.word	0x019d808c
 80054e8:	40021000 	.word	0x40021000

080054ec <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80054ec:	2800      	cmp	r0, #0
 80054ee:	f000 80a0 	beq.w	8005632 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054f2:	4a54      	ldr	r2, [pc, #336]	@ (8005644 <HAL_RCC_ClockConfig+0x158>)
 80054f4:	6813      	ldr	r3, [r2, #0]
{
 80054f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fa:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054fc:	f003 0007 	and.w	r0, r3, #7
 8005500:	4288      	cmp	r0, r1
 8005502:	460d      	mov	r5, r1
 8005504:	d20c      	bcs.n	8005520 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005506:	6811      	ldr	r1, [r2, #0]
 8005508:	f021 0607 	bic.w	r6, r1, #7
 800550c:	432e      	orrs	r6, r5
 800550e:	6016      	str	r6, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005510:	6817      	ldr	r7, [r2, #0]
 8005512:	f007 0207 	and.w	r2, r7, #7
 8005516:	42aa      	cmp	r2, r5
 8005518:	d002      	beq.n	8005520 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800551a:	2001      	movs	r0, #1
}
 800551c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005524:	f003 0701 	and.w	r7, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005528:	d570      	bpl.n	800560c <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800552a:	4e47      	ldr	r6, [pc, #284]	@ (8005648 <HAL_RCC_ClockConfig+0x15c>)
 800552c:	68a0      	ldr	r0, [r4, #8]
 800552e:	68b1      	ldr	r1, [r6, #8]
 8005530:	f001 02f0 	and.w	r2, r1, #240	@ 0xf0
 8005534:	4290      	cmp	r0, r2
 8005536:	d904      	bls.n	8005542 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005538:	68b1      	ldr	r1, [r6, #8]
 800553a:	f021 02f0 	bic.w	r2, r1, #240	@ 0xf0
 800553e:	4302      	orrs	r2, r0
 8005540:	60b2      	str	r2, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005542:	b337      	cbz	r7, 8005592 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005544:	6861      	ldr	r1, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005546:	4b40      	ldr	r3, [pc, #256]	@ (8005648 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005548:	2903      	cmp	r1, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800554a:	681f      	ldr	r7, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800554c:	d065      	beq.n	800561a <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800554e:	2902      	cmp	r1, #2
 8005550:	d06c      	beq.n	800562c <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005552:	2900      	cmp	r1, #0
 8005554:	d171      	bne.n	800563a <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005556:	07be      	lsls	r6, r7, #30
 8005558:	d5df      	bpl.n	800551a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800555a:	4e3b      	ldr	r6, [pc, #236]	@ (8005648 <HAL_RCC_ClockConfig+0x15c>)
 800555c:	68b0      	ldr	r0, [r6, #8]
 800555e:	f020 0203 	bic.w	r2, r0, #3
 8005562:	430a      	orrs	r2, r1
 8005564:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8005566:	f7fd fced 	bl	8002f44 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800556a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800556e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005570:	e004      	b.n	800557c <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005572:	f7fd fce7 	bl	8002f44 <HAL_GetTick>
 8005576:	1bc1      	subs	r1, r0, r7
 8005578:	4541      	cmp	r1, r8
 800557a:	d85c      	bhi.n	8005636 <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557c:	68b1      	ldr	r1, [r6, #8]
 800557e:	6860      	ldr	r0, [r4, #4]
 8005580:	f001 0c0c 	and.w	ip, r1, #12
 8005584:	ebbc 0f80 	cmp.w	ip, r0, lsl #2
 8005588:	d1f3      	bne.n	8005572 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	0799      	lsls	r1, r3, #30
 800558e:	d506      	bpl.n	800559e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005590:	68a0      	ldr	r0, [r4, #8]
 8005592:	4e2d      	ldr	r6, [pc, #180]	@ (8005648 <HAL_RCC_ClockConfig+0x15c>)
 8005594:	68b7      	ldr	r7, [r6, #8]
 8005596:	f007 08f0 	and.w	r8, r7, #240	@ 0xf0
 800559a:	4580      	cmp	r8, r0
 800559c:	d840      	bhi.n	8005620 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800559e:	4829      	ldr	r0, [pc, #164]	@ (8005644 <HAL_RCC_ClockConfig+0x158>)
 80055a0:	6806      	ldr	r6, [r0, #0]
 80055a2:	f006 0707 	and.w	r7, r6, #7
 80055a6:	42af      	cmp	r7, r5
 80055a8:	d909      	bls.n	80055be <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	6802      	ldr	r2, [r0, #0]
 80055ac:	f022 0107 	bic.w	r1, r2, #7
 80055b0:	4329      	orrs	r1, r5
 80055b2:	6001      	str	r1, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b4:	6800      	ldr	r0, [r0, #0]
 80055b6:	f000 0607 	and.w	r6, r0, #7
 80055ba:	42ae      	cmp	r6, r5
 80055bc:	d1ad      	bne.n	800551a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055be:	075a      	lsls	r2, r3, #29
 80055c0:	d506      	bpl.n	80055d0 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c2:	4d21      	ldr	r5, [pc, #132]	@ (8005648 <HAL_RCC_ClockConfig+0x15c>)
 80055c4:	68e7      	ldr	r7, [r4, #12]
 80055c6:	68aa      	ldr	r2, [r5, #8]
 80055c8:	f422 61e0 	bic.w	r1, r2, #1792	@ 0x700
 80055cc:	4339      	orrs	r1, r7
 80055ce:	60a9      	str	r1, [r5, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d0:	071b      	lsls	r3, r3, #28
 80055d2:	d507      	bpl.n	80055e4 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055d4:	481c      	ldr	r0, [pc, #112]	@ (8005648 <HAL_RCC_ClockConfig+0x15c>)
 80055d6:	6924      	ldr	r4, [r4, #16]
 80055d8:	6883      	ldr	r3, [r0, #8]
 80055da:	f423 5660 	bic.w	r6, r3, #14336	@ 0x3800
 80055de:	ea46 05c4 	orr.w	r5, r6, r4, lsl #3
 80055e2:	6085      	str	r5, [r0, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055e4:	f7ff fc12 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 80055e8:	4a17      	ldr	r2, [pc, #92]	@ (8005648 <HAL_RCC_ClockConfig+0x15c>)
 80055ea:	4c18      	ldr	r4, [pc, #96]	@ (800564c <HAL_RCC_ClockConfig+0x160>)
 80055ec:	6891      	ldr	r1, [r2, #8]
 80055ee:	4e18      	ldr	r6, [pc, #96]	@ (8005650 <HAL_RCC_ClockConfig+0x164>)
 80055f0:	f3c1 1303 	ubfx	r3, r1, #4, #4
 80055f4:	4607      	mov	r7, r0
 80055f6:	5ce5      	ldrb	r5, [r4, r3]
  status = HAL_InitTick(uwTickPrio);
 80055f8:	4816      	ldr	r0, [pc, #88]	@ (8005654 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055fa:	f005 021f 	and.w	r2, r5, #31
 80055fe:	40d7      	lsrs	r7, r2
 8005600:	6037      	str	r7, [r6, #0]
  status = HAL_InitTick(uwTickPrio);
 8005602:	6800      	ldr	r0, [r0, #0]
}
 8005604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8005608:	f7fd bc5a 	b.w	8002ec0 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560c:	2f00      	cmp	r7, #0
 800560e:	d0c6      	beq.n	800559e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005610:	6861      	ldr	r1, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005612:	4b0d      	ldr	r3, [pc, #52]	@ (8005648 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005614:	2903      	cmp	r1, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005616:	681f      	ldr	r7, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005618:	d199      	bne.n	800554e <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561a:	01bb      	lsls	r3, r7, #6
 800561c:	d49d      	bmi.n	800555a <HAL_RCC_ClockConfig+0x6e>
 800561e:	e77c      	b.n	800551a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005620:	68b2      	ldr	r2, [r6, #8]
 8005622:	f022 01f0 	bic.w	r1, r2, #240	@ 0xf0
 8005626:	4301      	orrs	r1, r0
 8005628:	60b1      	str	r1, [r6, #8]
 800562a:	e7b8      	b.n	800559e <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800562c:	03bf      	lsls	r7, r7, #14
 800562e:	d494      	bmi.n	800555a <HAL_RCC_ClockConfig+0x6e>
 8005630:	e773      	b.n	800551a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005632:	2001      	movs	r0, #1
}
 8005634:	4770      	bx	lr
        return HAL_TIMEOUT;
 8005636:	2003      	movs	r0, #3
 8005638:	e770      	b.n	800551c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800563a:	0578      	lsls	r0, r7, #21
 800563c:	f57f af6d 	bpl.w	800551a <HAL_RCC_ClockConfig+0x2e>
 8005640:	e78b      	b.n	800555a <HAL_RCC_ClockConfig+0x6e>
 8005642:	bf00      	nop
 8005644:	40022000 	.word	0x40022000
 8005648:	40021000 	.word	0x40021000
 800564c:	0800a83c 	.word	0x0800a83c
 8005650:	20000400 	.word	0x20000400
 8005654:	20000408 	.word	0x20000408

08005658 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005658:	4b01      	ldr	r3, [pc, #4]	@ (8005660 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20000400 	.word	0x20000400

08005664 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005664:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005666:	4a07      	ldr	r2, [pc, #28]	@ (8005684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005668:	6898      	ldr	r0, [r3, #8]
  return SystemCoreClock;
 800566a:	4907      	ldr	r1, [pc, #28]	@ (8005688 <HAL_RCC_GetPCLK1Freq+0x24>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800566c:	f3c0 2c02 	ubfx	ip, r0, #8, #3
 8005670:	6808      	ldr	r0, [r1, #0]
 8005672:	f812 300c 	ldrb.w	r3, [r2, ip]
 8005676:	f003 021f 	and.w	r2, r3, #31
}
 800567a:	40d0      	lsrs	r0, r2
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
 8005684:	0800a834 	.word	0x0800a834
 8005688:	20000400 	.word	0x20000400

0800568c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800568c:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800568e:	4a07      	ldr	r2, [pc, #28]	@ (80056ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005690:	6898      	ldr	r0, [r3, #8]
  return SystemCoreClock;
 8005692:	4907      	ldr	r1, [pc, #28]	@ (80056b0 <HAL_RCC_GetPCLK2Freq+0x24>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005694:	f3c0 2cc2 	ubfx	ip, r0, #11, #3
 8005698:	6808      	ldr	r0, [r1, #0]
 800569a:	f812 300c 	ldrb.w	r3, [r2, ip]
 800569e:	f003 021f 	and.w	r2, r3, #31
}
 80056a2:	40d0      	lsrs	r0, r2
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000
 80056ac:	0800a834 	.word	0x0800a834
 80056b0:	20000400 	.word	0x20000400

080056b4 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056b4:	4a45      	ldr	r2, [pc, #276]	@ (80057cc <RCCEx_PLLSAI1_Config+0x118>)
{
 80056b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056b8:	68d6      	ldr	r6, [r2, #12]
{
 80056ba:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056bc:	07b1      	lsls	r1, r6, #30
{
 80056be:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056c0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056c2:	d006      	beq.n	80056d2 <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056c4:	68d6      	ldr	r6, [r2, #12]
 80056c6:	f006 0103 	and.w	r1, r6, #3
 80056ca:	4281      	cmp	r1, r0
 80056cc:	d04b      	beq.n	8005766 <RCCEx_PLLSAI1_Config+0xb2>
 80056ce:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80056d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80056d2:	2802      	cmp	r0, #2
 80056d4:	d058      	beq.n	8005788 <RCCEx_PLLSAI1_Config+0xd4>
 80056d6:	2803      	cmp	r0, #3
 80056d8:	d04f      	beq.n	800577a <RCCEx_PLLSAI1_Config+0xc6>
 80056da:	2801      	cmp	r0, #1
 80056dc:	d1f7      	bne.n	80056ce <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	0793      	lsls	r3, r2, #30
 80056e2:	d5f5      	bpl.n	80056d0 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056e4:	4e39      	ldr	r6, [pc, #228]	@ (80057cc <RCCEx_PLLSAI1_Config+0x118>)
 80056e6:	6867      	ldr	r7, [r4, #4]
 80056e8:	68f1      	ldr	r1, [r6, #12]
 80056ea:	f021 0373 	bic.w	r3, r1, #115	@ 0x73
 80056ee:	4318      	orrs	r0, r3
 80056f0:	f107 3cff 	add.w	ip, r7, #4294967295
 80056f4:	ea40 120c 	orr.w	r2, r0, ip, lsl #4
 80056f8:	60f2      	str	r2, [r6, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80056fa:	4e34      	ldr	r6, [pc, #208]	@ (80057cc <RCCEx_PLLSAI1_Config+0x118>)
 80056fc:	6832      	ldr	r2, [r6, #0]
 80056fe:	f022 6180 	bic.w	r1, r2, #67108864	@ 0x4000000
 8005702:	6031      	str	r1, [r6, #0]
    tickstart = HAL_GetTick();
 8005704:	f7fd fc1e 	bl	8002f44 <HAL_GetTick>
 8005708:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800570a:	e004      	b.n	8005716 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800570c:	f7fd fc1a 	bl	8002f44 <HAL_GetTick>
 8005710:	1bc2      	subs	r2, r0, r7
 8005712:	2a02      	cmp	r2, #2
 8005714:	d83c      	bhi.n	8005790 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005716:	6833      	ldr	r3, [r6, #0]
 8005718:	011a      	lsls	r2, r3, #4
 800571a:	d4f7      	bmi.n	800570c <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800571c:	68a0      	ldr	r0, [r4, #8]
 800571e:	0207      	lsls	r7, r0, #8
      if(Divider == DIVIDER_P_UPDATE)
 8005720:	2d00      	cmp	r5, #0
 8005722:	d137      	bne.n	8005794 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005724:	6935      	ldr	r5, [r6, #16]
 8005726:	68e1      	ldr	r1, [r4, #12]
 8005728:	f025 4c78 	bic.w	ip, r5, #4160749568	@ 0xf8000000
 800572c:	ea47 63c1 	orr.w	r3, r7, r1, lsl #27
 8005730:	f42c 42fe 	bic.w	r2, ip, #32512	@ 0x7f00
 8005734:	4313      	orrs	r3, r2
 8005736:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8005738:	4d24      	ldr	r5, [pc, #144]	@ (80057cc <RCCEx_PLLSAI1_Config+0x118>)
 800573a:	682e      	ldr	r6, [r5, #0]
 800573c:	f046 6080 	orr.w	r0, r6, #67108864	@ 0x4000000
 8005740:	6028      	str	r0, [r5, #0]
      tickstart = HAL_GetTick();
 8005742:	f7fd fbff 	bl	8002f44 <HAL_GetTick>
 8005746:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005748:	e004      	b.n	8005754 <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800574a:	f7fd fbfb 	bl	8002f44 <HAL_GetTick>
 800574e:	1b83      	subs	r3, r0, r6
 8005750:	2b02      	cmp	r3, #2
 8005752:	d81d      	bhi.n	8005790 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005754:	682f      	ldr	r7, [r5, #0]
 8005756:	013b      	lsls	r3, r7, #4
 8005758:	d5f7      	bpl.n	800574a <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800575a:	6929      	ldr	r1, [r5, #16]
 800575c:	69a4      	ldr	r4, [r4, #24]
 800575e:	4321      	orrs	r1, r4
 8005760:	2000      	movs	r0, #0
 8005762:	6129      	str	r1, [r5, #16]
}
 8005764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8005766:	2900      	cmp	r1, #0
 8005768:	d0b1      	beq.n	80056ce <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800576a:	68d3      	ldr	r3, [r2, #12]
       ||
 800576c:	6860      	ldr	r0, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800576e:	f3c3 1702 	ubfx	r7, r3, #4, #3
 8005772:	3701      	adds	r7, #1
       ||
 8005774:	4287      	cmp	r7, r0
 8005776:	d1aa      	bne.n	80056ce <RCCEx_PLLSAI1_Config+0x1a>
 8005778:	e7bf      	b.n	80056fa <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	039e      	lsls	r6, r3, #14
 800577e:	d4b1      	bmi.n	80056e4 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005780:	6817      	ldr	r7, [r2, #0]
 8005782:	0379      	lsls	r1, r7, #13
 8005784:	d5a3      	bpl.n	80056ce <RCCEx_PLLSAI1_Config+0x1a>
 8005786:	e7ad      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005788:	6811      	ldr	r1, [r2, #0]
 800578a:	054f      	lsls	r7, r1, #21
 800578c:	d59f      	bpl.n	80056ce <RCCEx_PLLSAI1_Config+0x1a>
 800578e:	e7a9      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0x30>
 8005790:	2003      	movs	r0, #3
}
 8005792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8005794:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005796:	6931      	ldr	r1, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8005798:	d00b      	beq.n	80057b2 <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800579a:	6965      	ldr	r5, [r4, #20]
 800579c:	f021 6ec0 	bic.w	lr, r1, #100663296	@ 0x6000000
 80057a0:	086a      	lsrs	r2, r5, #1
 80057a2:	f42e 43fe 	bic.w	r3, lr, #32512	@ 0x7f00
 80057a6:	1e50      	subs	r0, r2, #1
 80057a8:	433b      	orrs	r3, r7
 80057aa:	ea43 6740 	orr.w	r7, r3, r0, lsl #25
 80057ae:	6137      	str	r7, [r6, #16]
 80057b0:	e7c2      	b.n	8005738 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057b2:	6925      	ldr	r5, [r4, #16]
 80057b4:	f421 01c0 	bic.w	r1, r1, #6291456	@ 0x600000
 80057b8:	086a      	lsrs	r2, r5, #1
 80057ba:	f421 43fe 	bic.w	r3, r1, #32512	@ 0x7f00
 80057be:	1e50      	subs	r0, r2, #1
 80057c0:	433b      	orrs	r3, r7
 80057c2:	ea43 5740 	orr.w	r7, r3, r0, lsl #21
 80057c6:	6137      	str	r7, [r6, #16]
 80057c8:	e7b6      	b.n	8005738 <RCCEx_PLLSAI1_Config+0x84>
 80057ca:	bf00      	nop
 80057cc:	40021000 	.word	0x40021000

080057d0 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057d0:	4a3e      	ldr	r2, [pc, #248]	@ (80058cc <RCCEx_PLLSAI2_Config+0xfc>)
{
 80057d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057d4:	68d6      	ldr	r6, [r2, #12]
{
 80057d6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057d8:	07b1      	lsls	r1, r6, #30
{
 80057da:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057dc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057de:	d006      	beq.n	80057ee <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057e0:	68d6      	ldr	r6, [r2, #12]
 80057e2:	f006 0103 	and.w	r1, r6, #3
 80057e6:	4281      	cmp	r1, r0
 80057e8:	d04b      	beq.n	8005882 <RCCEx_PLLSAI2_Config+0xb2>
 80057ea:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80057ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 80057ee:	2802      	cmp	r0, #2
 80057f0:	d058      	beq.n	80058a4 <RCCEx_PLLSAI2_Config+0xd4>
 80057f2:	2803      	cmp	r0, #3
 80057f4:	d04f      	beq.n	8005896 <RCCEx_PLLSAI2_Config+0xc6>
 80057f6:	2801      	cmp	r0, #1
 80057f8:	d1f7      	bne.n	80057ea <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057fa:	6812      	ldr	r2, [r2, #0]
 80057fc:	0793      	lsls	r3, r2, #30
 80057fe:	d5f5      	bpl.n	80057ec <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005800:	4e32      	ldr	r6, [pc, #200]	@ (80058cc <RCCEx_PLLSAI2_Config+0xfc>)
 8005802:	6867      	ldr	r7, [r4, #4]
 8005804:	68f1      	ldr	r1, [r6, #12]
 8005806:	f021 0373 	bic.w	r3, r1, #115	@ 0x73
 800580a:	4318      	orrs	r0, r3
 800580c:	f107 3cff 	add.w	ip, r7, #4294967295
 8005810:	ea40 120c 	orr.w	r2, r0, ip, lsl #4
 8005814:	60f2      	str	r2, [r6, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8005816:	4e2d      	ldr	r6, [pc, #180]	@ (80058cc <RCCEx_PLLSAI2_Config+0xfc>)
 8005818:	6832      	ldr	r2, [r6, #0]
 800581a:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 800581e:	6031      	str	r1, [r6, #0]
    tickstart = HAL_GetTick();
 8005820:	f7fd fb90 	bl	8002f44 <HAL_GetTick>
 8005824:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005826:	e004      	b.n	8005832 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005828:	f7fd fb8c 	bl	8002f44 <HAL_GetTick>
 800582c:	1bc2      	subs	r2, r0, r7
 800582e:	2a02      	cmp	r2, #2
 8005830:	d83c      	bhi.n	80058ac <RCCEx_PLLSAI2_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005832:	6833      	ldr	r3, [r6, #0]
 8005834:	009a      	lsls	r2, r3, #2
 8005836:	d4f7      	bmi.n	8005828 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005838:	68a0      	ldr	r0, [r4, #8]
 800583a:	0207      	lsls	r7, r0, #8
      if(Divider == DIVIDER_P_UPDATE)
 800583c:	2d00      	cmp	r5, #0
 800583e:	d137      	bne.n	80058b0 <RCCEx_PLLSAI2_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005840:	6975      	ldr	r5, [r6, #20]
 8005842:	68e1      	ldr	r1, [r4, #12]
 8005844:	f025 4c78 	bic.w	ip, r5, #4160749568	@ 0xf8000000
 8005848:	ea47 63c1 	orr.w	r3, r7, r1, lsl #27
 800584c:	f42c 42fe 	bic.w	r2, ip, #32512	@ 0x7f00
 8005850:	4313      	orrs	r3, r2
 8005852:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8005854:	4d1d      	ldr	r5, [pc, #116]	@ (80058cc <RCCEx_PLLSAI2_Config+0xfc>)
 8005856:	682e      	ldr	r6, [r5, #0]
 8005858:	f046 5080 	orr.w	r0, r6, #268435456	@ 0x10000000
 800585c:	6028      	str	r0, [r5, #0]
      tickstart = HAL_GetTick();
 800585e:	f7fd fb71 	bl	8002f44 <HAL_GetTick>
 8005862:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005864:	e004      	b.n	8005870 <RCCEx_PLLSAI2_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005866:	f7fd fb6d 	bl	8002f44 <HAL_GetTick>
 800586a:	1b83      	subs	r3, r0, r6
 800586c:	2b02      	cmp	r3, #2
 800586e:	d81d      	bhi.n	80058ac <RCCEx_PLLSAI2_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005870:	682f      	ldr	r7, [r5, #0]
 8005872:	00bb      	lsls	r3, r7, #2
 8005874:	d5f7      	bpl.n	8005866 <RCCEx_PLLSAI2_Config+0x96>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005876:	6969      	ldr	r1, [r5, #20]
 8005878:	6964      	ldr	r4, [r4, #20]
 800587a:	4321      	orrs	r1, r4
 800587c:	2000      	movs	r0, #0
 800587e:	6169      	str	r1, [r5, #20]
}
 8005880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8005882:	2900      	cmp	r1, #0
 8005884:	d0b1      	beq.n	80057ea <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005886:	68d3      	ldr	r3, [r2, #12]
       ||
 8005888:	6860      	ldr	r0, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800588a:	f3c3 1702 	ubfx	r7, r3, #4, #3
 800588e:	3701      	adds	r7, #1
       ||
 8005890:	4287      	cmp	r7, r0
 8005892:	d1aa      	bne.n	80057ea <RCCEx_PLLSAI2_Config+0x1a>
 8005894:	e7bf      	b.n	8005816 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005896:	6813      	ldr	r3, [r2, #0]
 8005898:	039e      	lsls	r6, r3, #14
 800589a:	d4b1      	bmi.n	8005800 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800589c:	6817      	ldr	r7, [r2, #0]
 800589e:	0379      	lsls	r1, r7, #13
 80058a0:	d5a3      	bpl.n	80057ea <RCCEx_PLLSAI2_Config+0x1a>
 80058a2:	e7ad      	b.n	8005800 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058a4:	6811      	ldr	r1, [r2, #0]
 80058a6:	054f      	lsls	r7, r1, #21
 80058a8:	d59f      	bpl.n	80057ea <RCCEx_PLLSAI2_Config+0x1a>
 80058aa:	e7a9      	b.n	8005800 <RCCEx_PLLSAI2_Config+0x30>
 80058ac:	2003      	movs	r0, #3
}
 80058ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058b0:	6975      	ldr	r5, [r6, #20]
 80058b2:	6921      	ldr	r1, [r4, #16]
 80058b4:	f025 6ec0 	bic.w	lr, r5, #100663296	@ 0x6000000
 80058b8:	084b      	lsrs	r3, r1, #1
 80058ba:	f42e 42fe 	bic.w	r2, lr, #32512	@ 0x7f00
 80058be:	1e58      	subs	r0, r3, #1
 80058c0:	433a      	orrs	r2, r7
 80058c2:	ea42 6740 	orr.w	r7, r2, r0, lsl #25
 80058c6:	6177      	str	r7, [r6, #20]
 80058c8:	e7c4      	b.n	8005854 <RCCEx_PLLSAI2_Config+0x84>
 80058ca:	bf00      	nop
 80058cc:	40021000 	.word	0x40021000

080058d0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80058d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058d4:	6803      	ldr	r3, [r0, #0]
 80058d6:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 80058da:	b083      	sub	sp, #12
 80058dc:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058de:	d016      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80058e0:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80058e2:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80058e6:	f000 81e8 	beq.w	8005cba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80058ea:	f200 8123 	bhi.w	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80058ee:	2900      	cmp	r1, #0
 80058f0:	f000 81b7 	beq.w	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80058f4:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80058f8:	f040 81d1 	bne.w	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058fc:	2100      	movs	r1, #0
 80058fe:	3020      	adds	r0, #32
 8005900:	f7ff ff66 	bl	80057d0 <RCCEx_PLLSAI2_Config>
 8005904:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005906:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005908:	2e00      	cmp	r6, #0
 800590a:	f000 81e3 	beq.w	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x404>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800590e:	04d8      	lsls	r0, r3, #19
 8005910:	f140 8121 	bpl.w	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005914:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8005916:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800591a:	f000 81d4 	beq.w	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800591e:	f200 817f 	bhi.w	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005922:	2900      	cmp	r1, #0
 8005924:	f000 81a6 	beq.w	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005928:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 800592c:	f040 81b9 	bne.w	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005930:	2100      	movs	r1, #0
 8005932:	f104 0020 	add.w	r0, r4, #32
 8005936:	f7ff ff4b 	bl	80057d0 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800593a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800593c:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 800593e:	2f00      	cmp	r7, #0
 8005940:	f040 8175 	bne.w	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005944:	49b4      	ldr	r1, [pc, #720]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005946:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8005948:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800594c:	f022 7540 	bic.w	r5, r2, #50331648	@ 0x3000000
 8005950:	4305      	orrs	r5, r0
 8005952:	f8c1 5088 	str.w	r5, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005956:	0399      	lsls	r1, r3, #14
 8005958:	f100 8101 	bmi.w	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800595c:	07d9      	lsls	r1, r3, #31
 800595e:	d508      	bpl.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005960:	4fad      	ldr	r7, [pc, #692]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005962:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005964:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8005968:	f020 0103 	bic.w	r1, r0, #3
 800596c:	4311      	orrs	r1, r2
 800596e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005972:	079a      	lsls	r2, r3, #30
 8005974:	d508      	bpl.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005976:	4da8      	ldr	r5, [pc, #672]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005978:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800597a:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 800597e:	f027 010c 	bic.w	r1, r7, #12
 8005982:	4301      	orrs	r1, r0
 8005984:	f8c5 1088 	str.w	r1, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005988:	075f      	lsls	r7, r3, #29
 800598a:	d508      	bpl.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800598c:	4da2      	ldr	r5, [pc, #648]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800598e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005990:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
 8005994:	f022 0730 	bic.w	r7, r2, #48	@ 0x30
 8005998:	430f      	orrs	r7, r1
 800599a:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800599e:	071d      	lsls	r5, r3, #28
 80059a0:	d508      	bpl.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059a2:	4d9d      	ldr	r5, [pc, #628]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80059a4:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 80059a6:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 80059aa:	f020 02c0 	bic.w	r2, r0, #192	@ 0xc0
 80059ae:	433a      	orrs	r2, r7
 80059b0:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059b4:	06d8      	lsls	r0, r3, #27
 80059b6:	d508      	bpl.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059b8:	4997      	ldr	r1, [pc, #604]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80059ba:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80059bc:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 80059c0:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
 80059c4:	4302      	orrs	r2, r0
 80059c6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059ca:	0699      	lsls	r1, r3, #26
 80059cc:	d508      	bpl.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059ce:	4f92      	ldr	r7, [pc, #584]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80059d0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80059d2:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80059d6:	f421 6540 	bic.w	r5, r1, #3072	@ 0xc00
 80059da:	4315      	orrs	r5, r2
 80059dc:	f8c7 5088 	str.w	r5, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059e0:	059a      	lsls	r2, r3, #22
 80059e2:	d508      	bpl.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059e4:	4f8c      	ldr	r7, [pc, #560]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80059e6:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80059e8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80059ec:	f420 2140 	bic.w	r1, r0, #786432	@ 0xc0000
 80059f0:	4329      	orrs	r1, r5
 80059f2:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059f6:	055f      	lsls	r7, r3, #21
 80059f8:	d508      	bpl.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059fa:	4f87      	ldr	r7, [pc, #540]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80059fc:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80059fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005a02:	f422 1140 	bic.w	r1, r2, #3145728	@ 0x300000
 8005a06:	4301      	orrs	r1, r0
 8005a08:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a0c:	065d      	lsls	r5, r3, #25
 8005a0e:	d508      	bpl.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a10:	4d81      	ldr	r5, [pc, #516]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a12:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005a14:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 8005a18:	f427 5240 	bic.w	r2, r7, #12288	@ 0x3000
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a22:	0618      	lsls	r0, r3, #24
 8005a24:	d508      	bpl.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a26:	4d7c      	ldr	r5, [pc, #496]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a2a:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8005a2e:	f420 4740 	bic.w	r7, r0, #49152	@ 0xc000
 8005a32:	4317      	orrs	r7, r2
 8005a34:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a38:	05d9      	lsls	r1, r3, #23
 8005a3a:	d508      	bpl.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a3c:	4976      	ldr	r1, [pc, #472]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a40:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 8005a44:	f425 3740 	bic.w	r7, r5, #196608	@ 0x30000
 8005a48:	4307      	orrs	r7, r0
 8005a4a:	f8c1 7088 	str.w	r7, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a4e:	02da      	lsls	r2, r3, #11
 8005a50:	d508      	bpl.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a52:	4971      	ldr	r1, [pc, #452]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a54:	6de7      	ldr	r7, [r4, #92]	@ 0x5c
 8005a56:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 8005a5a:	f022 0503 	bic.w	r5, r2, #3
 8005a5e:	433d      	orrs	r5, r7
 8005a60:	f8c1 509c 	str.w	r5, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a64:	049f      	lsls	r7, r3, #18
 8005a66:	d510      	bpl.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a68:	496b      	ldr	r1, [pc, #428]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a6a:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8005a6c:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
 8005a70:	f020 6240 	bic.w	r2, r0, #201326592	@ 0xc000000
 8005a74:	432a      	orrs	r2, r5
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a76:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a7a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a7e:	f000 8104 	beq.w	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a82:	f1b5 6f80 	cmp.w	r5, #67108864	@ 0x4000000
 8005a86:	f000 8132 	beq.w	8005cee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a8a:	031d      	lsls	r5, r3, #12
 8005a8c:	d510      	bpl.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a8e:	4962      	ldr	r1, [pc, #392]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a90:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 8005a92:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005a96:	f022 6540 	bic.w	r5, r2, #201326592	@ 0xc000000
 8005a9a:	433d      	orrs	r5, r7
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a9c:	f1b7 6f00 	cmp.w	r7, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005aa0:	f8c1 5088 	str.w	r5, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005aa4:	f000 80f6 	beq.w	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005aa8:	f1b7 6f80 	cmp.w	r7, #67108864	@ 0x4000000
 8005aac:	f000 8129 	beq.w	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x432>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ab0:	0358      	lsls	r0, r3, #13
 8005ab2:	d510      	bpl.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ab4:	4958      	ldr	r1, [pc, #352]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005ab6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005ab8:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 8005abc:	f025 6740 	bic.w	r7, r5, #201326592	@ 0xc000000
 8005ac0:	4307      	orrs	r7, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ac2:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ac6:	f8c1 7088 	str.w	r7, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005aca:	f000 80d9 	beq.w	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ace:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8005ad2:	f000 8120 	beq.w	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x446>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ad6:	0459      	lsls	r1, r3, #17
 8005ad8:	d510      	bpl.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ada:	4f4f      	ldr	r7, [pc, #316]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005adc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8005ade:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8005ae2:	f021 5040 	bic.w	r0, r1, #805306368	@ 0x30000000
 8005ae6:	4310      	orrs	r0, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ae8:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005aec:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005af0:	f000 80d9 	beq.w	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005af4:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8005af8:	f000 80ee 	beq.w	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005afc:	041a      	lsls	r2, r3, #16
 8005afe:	d509      	bpl.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b00:	4d45      	ldr	r5, [pc, #276]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005b02:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005b06:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 8005b0a:	f027 4180 	bic.w	r1, r7, #1073741824	@ 0x40000000
 8005b0e:	4301      	orrs	r1, r0
 8005b10:	f8c5 1088 	str.w	r1, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b14:	03db      	lsls	r3, r3, #15
 8005b16:	d509      	bpl.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b18:	4a3f      	ldr	r2, [pc, #252]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005b1a:	f8d4 4084 	ldr.w	r4, [r4, #132]	@ 0x84
 8005b1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005b22:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8005b26:	4325      	orrs	r5, r4
 8005b28:	f8c2 5088 	str.w	r5, [r2, #136]	@ 0x88
}
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	b003      	add	sp, #12
 8005b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8005b34:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8005b38:	f040 80b1 	bne.w	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b3c:	4e36      	ldr	r6, [pc, #216]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005b3e:	f8d6 7088 	ldr.w	r7, [r6, #136]	@ 0x88
 8005b42:	f427 0040 	bic.w	r0, r7, #12582912	@ 0xc00000
 8005b46:	4308      	orrs	r0, r1
 8005b48:	f8c6 0088 	str.w	r0, [r6, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b4c:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b4e:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b52:	f53f aedf 	bmi.w	8005914 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005b56:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b58:	0399      	lsls	r1, r3, #14
 8005b5a:	f57f aeff 	bpl.w	800595c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005b60:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8005b62:	00ca      	lsls	r2, r1, #3
 8005b64:	d565      	bpl.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x362>
    FlagStatus       pwrclkchanged = RESET;
 8005b66:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b6a:	4d2c      	ldr	r5, [pc, #176]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005b6c:	6829      	ldr	r1, [r5, #0]
 8005b6e:	f441 7080 	orr.w	r0, r1, #256	@ 0x100
 8005b72:	6028      	str	r0, [r5, #0]
    tickstart = HAL_GetTick();
 8005b74:	f7fd f9e6 	bl	8002f44 <HAL_GetTick>
 8005b78:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b7a:	e005      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b7c:	f7fd f9e2 	bl	8002f44 <HAL_GetTick>
 8005b80:	eba0 0009 	sub.w	r0, r0, r9
 8005b84:	2802      	cmp	r0, #2
 8005b86:	d860      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b88:	682a      	ldr	r2, [r5, #0]
 8005b8a:	05d3      	lsls	r3, r2, #23
 8005b8c:	d5f6      	bpl.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    if(ret == HAL_OK)
 8005b8e:	2f00      	cmp	r7, #0
 8005b90:	f040 80cb 	bne.w	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x45a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b94:	4d20      	ldr	r5, [pc, #128]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b96:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b9a:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b9e:	f417 7940 	ands.w	r9, r7, #768	@ 0x300
 8005ba2:	d026      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8005ba4:	4591      	cmp	r9, r2
 8005ba6:	d024      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x322>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ba8:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bac:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005bb0:	f443 3080 	orr.w	r0, r3, #65536	@ 0x10000
 8005bb4:	f8c5 0090 	str.w	r0, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bb8:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bbc:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bc0:	f427 3380 	bic.w	r3, r7, #65536	@ 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bc4:	07cf      	lsls	r7, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bc6:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8005bca:	f8c5 0090 	str.w	r0, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bce:	d510      	bpl.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x322>
        tickstart = HAL_GetTick();
 8005bd0:	f7fd f9b8 	bl	8002f44 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bd4:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005bd8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bda:	e004      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bdc:	f7fd f9b2 	bl	8002f44 <HAL_GetTick>
 8005be0:	1bc3      	subs	r3, r0, r7
 8005be2:	454b      	cmp	r3, r9
 8005be4:	d831      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x37a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005be6:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 8005bea:	0790      	lsls	r0, r2, #30
 8005bec:	d5f6      	bpl.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x30c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bee:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8005bf2:	4d09      	ldr	r5, [pc, #36]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005bf4:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8005bf8:	f421 7740 	bic.w	r7, r1, #768	@ 0x300
 8005bfc:	4317      	orrs	r7, r2
 8005bfe:	f8c5 7090 	str.w	r7, [r5, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c02:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8005c04:	f1b8 0f00 	cmp.w	r8, #0
 8005c08:	f43f aea8 	beq.w	800595c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c0c:	4902      	ldr	r1, [pc, #8]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005c0e:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8005c10:	f022 5580 	bic.w	r5, r2, #268435456	@ 0x10000000
 8005c14:	658d      	str	r5, [r1, #88]	@ 0x58
 8005c16:	e6a1      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	40007000 	.word	0x40007000
    switch(PeriphClkInit->Sai2ClockSelection)
 8005c20:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8005c24:	d13d      	bne.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c26:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 8005c28:	2f00      	cmp	r7, #0
 8005c2a:	f43f ae8b 	beq.w	8005944 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c2e:	463e      	mov	r6, r7
 8005c30:	e792      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c32:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005c34:	f040 5280 	orr.w	r2, r0, #268435456	@ 0x10000000
 8005c38:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c3a:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8005c3c:	f005 5380 	and.w	r3, r5, #268435456	@ 0x10000000
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005c44:	f04f 0801 	mov.w	r8, #1
 8005c48:	e78f      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = HAL_TIMEOUT;
 8005c4a:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c4c:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8005c4e:	f1b8 0f00 	cmp.w	r8, #0
 8005c52:	f43f ae83 	beq.w	800595c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c56:	4936      	ldr	r1, [pc, #216]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005c58:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8005c5a:	f022 5580 	bic.w	r5, r2, #268435456	@ 0x10000000
 8005c5e:	658d      	str	r5, [r1, #88]	@ 0x58
 8005c60:	e67c      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c62:	3004      	adds	r0, #4
 8005c64:	f7ff fd26 	bl	80056b4 <RCCEx_PLLSAI1_Config>
 8005c68:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c6a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005c6c:	2e00      	cmp	r6, #0
 8005c6e:	f47f ae4e 	bne.w	800590e <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8005c72:	e02f      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x404>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c74:	1d20      	adds	r0, r4, #4
 8005c76:	f7ff fd1d 	bl	80056b4 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c7a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c7c:	4607      	mov	r7, r0
      break;
 8005c7e:	e65e      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c80:	68ca      	ldr	r2, [r1, #12]
 8005c82:	f442 1580 	orr.w	r5, r2, #1048576	@ 0x100000
 8005c86:	60cd      	str	r5, [r1, #12]
 8005c88:	e725      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c8a:	68cf      	ldr	r7, [r1, #12]
 8005c8c:	f447 1080 	orr.w	r0, r7, #1048576	@ 0x100000
 8005c90:	60c8      	str	r0, [r1, #12]
 8005c92:	e6fa      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c94:	68c8      	ldr	r0, [r1, #12]
 8005c96:	f440 1280 	orr.w	r2, r0, #1048576	@ 0x100000
 8005c9a:	60ca      	str	r2, [r1, #12]
 8005c9c:	e708      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c9e:	2601      	movs	r6, #1
 8005ca0:	e635      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005ca2:	2601      	movs	r6, #1
 8005ca4:	e757      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ca6:	2102      	movs	r1, #2
 8005ca8:	1d20      	adds	r0, r4, #4
 8005caa:	f7ff fd03 	bl	80056b4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cae:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	f43f af23 	beq.w	8005afc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	e720      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cba:	481d      	ldr	r0, [pc, #116]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005cbc:	68c2      	ldr	r2, [r0, #12]
 8005cbe:	f442 3580 	orr.w	r5, r2, #65536	@ 0x10000
 8005cc2:	60c5      	str	r5, [r0, #12]
    if(ret == HAL_OK)
 8005cc4:	e73a      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cc6:	491a      	ldr	r1, [pc, #104]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005cc8:	68ca      	ldr	r2, [r1, #12]
 8005cca:	f442 3580 	orr.w	r5, r2, #65536	@ 0x10000
 8005cce:	60cd      	str	r5, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8005cd0:	4637      	mov	r7, r6
 8005cd2:	e7a9      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cd4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005cd6:	e731      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cd8:	2102      	movs	r1, #2
 8005cda:	f104 0020 	add.w	r0, r4, #32
 8005cde:	f7ff fd77 	bl	80057d0 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ce2:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f43f af09 	beq.w	8005afc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cea:	4606      	mov	r6, r0
 8005cec:	e706      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x22c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cee:	2101      	movs	r1, #1
 8005cf0:	1d20      	adds	r0, r4, #4
 8005cf2:	f7ff fcdf 	bl	80056b4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005cf6:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	f43f aec6 	beq.w	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005cfe:	4606      	mov	r6, r0
 8005d00:	e6c3      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d02:	2101      	movs	r1, #1
 8005d04:	1d20      	adds	r0, r4, #4
 8005d06:	f7ff fcd5 	bl	80056b4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d0a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f43f aecf 	beq.w	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d12:	4606      	mov	r6, r0
 8005d14:	e6cc      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d16:	2101      	movs	r1, #1
 8005d18:	1d20      	adds	r0, r4, #4
 8005d1a:	f7ff fccb 	bl	80056b4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d1e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005d20:	2800      	cmp	r0, #0
 8005d22:	f43f aed8 	beq.w	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d26:	4606      	mov	r6, r0
 8005d28:	e6d5      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d2a:	463e      	mov	r6, r7
 8005d2c:	e78e      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8005d2e:	bf00      	nop
 8005d30:	40021000 	.word	0x40021000

08005d34 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d38:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d3a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005d3c:	460e      	mov	r6, r1
 8005d3e:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8005d40:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005d44:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d46:	f7fd f8fd 	bl	8002f44 <HAL_GetTick>
 8005d4a:	4437      	add	r7, r6
 8005d4c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005d4e:	f7fd f8f9 	bl	8002f44 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d52:	4958      	ldr	r1, [pc, #352]	@ (8005eb4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x180>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d54:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d56:	680a      	ldr	r2, [r1, #0]
 8005d58:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8005d5c:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 8005d60:	0d19      	lsrs	r1, r3, #20
 8005d62:	fb07 f101 	mul.w	r1, r7, r1
 8005d66:	3601      	adds	r6, #1
 8005d68:	9101      	str	r1, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d6a:	d15c      	bne.n	8005e26 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xf2>
 8005d6c:	68a5      	ldr	r5, [r4, #8]
 8005d6e:	f415 6fc0 	tst.w	r5, #1536	@ 0x600
 8005d72:	d054      	beq.n	8005e1e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d74:	7b26      	ldrb	r6, [r4, #12]
 8005d76:	fa5f f886 	uxtb.w	r8, r6
 8005d7a:	f88d 8003 	strb.w	r8, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d82:	68a3      	ldr	r3, [r4, #8]
 8005d84:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005d88:	d049      	beq.n	8005e1e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005d8a:	7b21      	ldrb	r1, [r4, #12]
 8005d8c:	b2c8      	uxtb	r0, r1
 8005d8e:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 8005d92:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d96:	68a7      	ldr	r7, [r4, #8]
 8005d98:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 8005d9c:	d03f      	beq.n	8005e1e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005d9e:	7b22      	ldrb	r2, [r4, #12]
 8005da0:	b2d5      	uxtb	r5, r2
 8005da2:	f88d 5003 	strb.w	r5, [sp, #3]
      UNUSED(tmpreg8);
 8005da6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005daa:	68a6      	ldr	r6, [r4, #8]
 8005dac:	f416 6fc0 	tst.w	r6, #1536	@ 0x600
 8005db0:	d035      	beq.n	8005e1e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005db2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8005db6:	fa5f fe8c 	uxtb.w	lr, ip
 8005dba:	f88d e003 	strb.w	lr, [sp, #3]
      UNUSED(tmpreg8);
 8005dbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005dc2:	68a3      	ldr	r3, [r4, #8]
 8005dc4:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005dc8:	d029      	beq.n	8005e1e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005dca:	7b21      	ldrb	r1, [r4, #12]
 8005dcc:	b2c8      	uxtb	r0, r1
 8005dce:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 8005dd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005dd6:	68a7      	ldr	r7, [r4, #8]
 8005dd8:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 8005ddc:	d01f      	beq.n	8005e1e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005dde:	7b22      	ldrb	r2, [r4, #12]
 8005de0:	b2d5      	uxtb	r5, r2
 8005de2:	f88d 5003 	strb.w	r5, [sp, #3]
      UNUSED(tmpreg8);
 8005de6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005dea:	68a6      	ldr	r6, [r4, #8]
 8005dec:	f416 6fc0 	tst.w	r6, #1536	@ 0x600
 8005df0:	d015      	beq.n	8005e1e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005df2:	f894 800c 	ldrb.w	r8, [r4, #12]
 8005df6:	fa5f fc88 	uxtb.w	ip, r8
 8005dfa:	f88d c003 	strb.w	ip, [sp, #3]
      UNUSED(tmpreg8);
 8005dfe:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e02:	68a3      	ldr	r3, [r4, #8]
 8005e04:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005e08:	d009      	beq.n	8005e1e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005e0a:	7b21      	ldrb	r1, [r4, #12]
 8005e0c:	b2c8      	uxtb	r0, r1
 8005e0e:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 8005e12:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e16:	68a7      	ldr	r7, [r4, #8]
 8005e18:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 8005e1c:	d1aa      	bne.n	8005d74 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 8005e1e:	2000      	movs	r0, #0
}
 8005e20:	b002      	add	sp, #8
 8005e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e26:	4606      	mov	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e28:	4620      	mov	r0, r4
 8005e2a:	e015      	b.n	8005e58 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x124>
      tmpreg8 = *ptmpreg8;
 8005e2c:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8005e30:	fa5f fe8c 	uxtb.w	lr, ip
 8005e34:	f88d e003 	strb.w	lr, [sp, #3]
      UNUSED(tmpreg8);
 8005e38:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e3c:	f7fd f882 	bl	8002f44 <HAL_GetTick>
 8005e40:	1b83      	subs	r3, r0, r6
 8005e42:	42bb      	cmp	r3, r7
 8005e44:	d20d      	bcs.n	8005e62 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x12e>
      if (count == 0U)
 8005e46:	9901      	ldr	r1, [sp, #4]
      count--;
 8005e48:	9801      	ldr	r0, [sp, #4]
        tmp_timeout = 0U;
 8005e4a:	2900      	cmp	r1, #0
      count--;
 8005e4c:	f100 32ff 	add.w	r2, r0, #4294967295
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e50:	6828      	ldr	r0, [r5, #0]
      count--;
 8005e52:	9201      	str	r2, [sp, #4]
        tmp_timeout = 0U;
 8005e54:	bf08      	it	eq
 8005e56:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8005e58:	6882      	ldr	r2, [r0, #8]
 8005e5a:	f412 6fc0 	tst.w	r2, #1536	@ 0x600
 8005e5e:	d1e5      	bne.n	8005e2c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xf8>
 8005e60:	e7dd      	b.n	8005e1e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e62:	e9d5 7400 	ldrd	r7, r4, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e66:	687e      	ldr	r6, [r7, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e68:	f5b4 7f82 	cmp.w	r4, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e6c:	f026 03e0 	bic.w	r3, r6, #224	@ 0xe0
 8005e70:	607b      	str	r3, [r7, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e72:	d013      	beq.n	8005e9c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x168>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e74:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8005e76:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8005e7a:	d107      	bne.n	8005e8c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x158>
          SPI_RESET_CRC(hspi);
 8005e7c:	683e      	ldr	r6, [r7, #0]
 8005e7e:	f426 5300 	bic.w	r3, r6, #8192	@ 0x2000
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	f441 5000 	orr.w	r0, r1, #8192	@ 0x2000
 8005e8a:	6038      	str	r0, [r7, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005e8c:	2701      	movs	r7, #1
        __HAL_UNLOCK(hspi);
 8005e8e:	2200      	movs	r2, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005e90:	f885 705d 	strb.w	r7, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005e94:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005e98:	2003      	movs	r0, #3
 8005e9a:	e7c1      	b.n	8005e20 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xec>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e9c:	68a9      	ldr	r1, [r5, #8]
 8005e9e:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8005ea2:	d002      	beq.n	8005eaa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x176>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ea4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005ea8:	d1e4      	bne.n	8005e74 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x140>
          __HAL_SPI_DISABLE(hspi);
 8005eaa:	6838      	ldr	r0, [r7, #0]
 8005eac:	f020 0240 	bic.w	r2, r0, #64	@ 0x40
 8005eb0:	603a      	str	r2, [r7, #0]
 8005eb2:	e7df      	b.n	8005e74 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x140>
 8005eb4:	20000400 	.word	0x20000400

08005eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ebc:	b084      	sub	sp, #16
  __IO uint8_t  tmpreg8 = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	188f      	adds	r7, r1, r2
{
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	4616      	mov	r6, r2
  __IO uint8_t  tmpreg8 = 0;
 8005ec6:	f88d 3007 	strb.w	r3, [sp, #7]
{
 8005eca:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ecc:	f7fd f83a 	bl	8002f44 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ed0:	f8df 8190 	ldr.w	r8, [pc, #400]	@ 8006064 <SPI_EndRxTxTransaction+0x1ac>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ed4:	eba7 0900 	sub.w	r9, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005ed8:	f7fd f834 	bl	8002f44 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005edc:	f8d8 1000 	ldr.w	r1, [r8]
 8005ee0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005ee4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8005ee8:	0d19      	lsrs	r1, r3, #20
 8005eea:	fb09 f201 	mul.w	r2, r9, r1
 8005eee:	9202      	str	r2, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ef0:	1c6a      	adds	r2, r5, #1
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	bf18      	it	ne
 8005ef6:	4682      	movne	sl, r0
 8005ef8:	d160      	bne.n	8005fbc <SPI_EndRxTxTransaction+0x104>
 8005efa:	6898      	ldr	r0, [r3, #8]
 8005efc:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 8005f00:	d01b      	beq.n	8005f3a <SPI_EndRxTxTransaction+0x82>
 8005f02:	6899      	ldr	r1, [r3, #8]
 8005f04:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 8005f08:	d017      	beq.n	8005f3a <SPI_EndRxTxTransaction+0x82>
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	f412 5fc0 	tst.w	r2, #6144	@ 0x1800
 8005f10:	d013      	beq.n	8005f3a <SPI_EndRxTxTransaction+0x82>
 8005f12:	6898      	ldr	r0, [r3, #8]
 8005f14:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 8005f18:	d00f      	beq.n	8005f3a <SPI_EndRxTxTransaction+0x82>
 8005f1a:	6899      	ldr	r1, [r3, #8]
 8005f1c:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 8005f20:	d00b      	beq.n	8005f3a <SPI_EndRxTxTransaction+0x82>
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	f412 5fc0 	tst.w	r2, #6144	@ 0x1800
 8005f28:	d007      	beq.n	8005f3a <SPI_EndRxTxTransaction+0x82>
 8005f2a:	6898      	ldr	r0, [r3, #8]
 8005f2c:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 8005f30:	d003      	beq.n	8005f3a <SPI_EndRxTxTransaction+0x82>
 8005f32:	6899      	ldr	r1, [r3, #8]
 8005f34:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 8005f38:	d1df      	bne.n	8005efa <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f3a:	f7fd f803 	bl	8002f44 <HAL_GetTick>
 8005f3e:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005f40:	f7fd f800 	bl	8002f44 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f44:	f8d8 2000 	ldr.w	r2, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f48:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8005f4a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f4c:	f3c2 30cb 	ubfx	r0, r2, #15, #12
 8005f50:	fb07 f000 	mul.w	r0, r7, r0
 8005f54:	1c69      	adds	r1, r5, #1
 8005f56:	9003      	str	r0, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f58:	d144      	bne.n	8005fe4 <SPI_EndRxTxTransaction+0x12c>
 8005f5a:	689f      	ldr	r7, [r3, #8]
 8005f5c:	063a      	lsls	r2, r7, #24
 8005f5e:	d514      	bpl.n	8005f8a <SPI_EndRxTxTransaction+0xd2>
 8005f60:	6898      	ldr	r0, [r3, #8]
 8005f62:	0600      	lsls	r0, r0, #24
 8005f64:	d511      	bpl.n	8005f8a <SPI_EndRxTxTransaction+0xd2>
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	0611      	lsls	r1, r2, #24
 8005f6a:	d50e      	bpl.n	8005f8a <SPI_EndRxTxTransaction+0xd2>
 8005f6c:	6899      	ldr	r1, [r3, #8]
 8005f6e:	060a      	lsls	r2, r1, #24
 8005f70:	d50b      	bpl.n	8005f8a <SPI_EndRxTxTransaction+0xd2>
 8005f72:	689f      	ldr	r7, [r3, #8]
 8005f74:	063f      	lsls	r7, r7, #24
 8005f76:	d508      	bpl.n	8005f8a <SPI_EndRxTxTransaction+0xd2>
 8005f78:	6898      	ldr	r0, [r3, #8]
 8005f7a:	0600      	lsls	r0, r0, #24
 8005f7c:	d505      	bpl.n	8005f8a <SPI_EndRxTxTransaction+0xd2>
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	0611      	lsls	r1, r2, #24
 8005f82:	d502      	bpl.n	8005f8a <SPI_EndRxTxTransaction+0xd2>
 8005f84:	6899      	ldr	r1, [r3, #8]
 8005f86:	060a      	lsls	r2, r1, #24
 8005f88:	d4e7      	bmi.n	8005f5a <SPI_EndRxTxTransaction+0xa2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f7ff fed0 	bl	8005d34 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005f94:	bb50      	cbnz	r0, 8005fec <SPI_EndRxTxTransaction+0x134>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005f96:	b004      	add	sp, #16
 8005f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f9c:	f7fc ffd2 	bl	8002f44 <HAL_GetTick>
 8005fa0:	eba0 030a 	sub.w	r3, r0, sl
 8005fa4:	4599      	cmp	r9, r3
 8005fa6:	d929      	bls.n	8005ffc <SPI_EndRxTxTransaction+0x144>
      if (count == 0U)
 8005fa8:	9802      	ldr	r0, [sp, #8]
      count--;
 8005faa:	9a02      	ldr	r2, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005fac:	6823      	ldr	r3, [r4, #0]
        tmp_timeout = 0U;
 8005fae:	2800      	cmp	r0, #0
      count--;
 8005fb0:	f102 31ff 	add.w	r1, r2, #4294967295
        tmp_timeout = 0U;
 8005fb4:	bf08      	it	eq
 8005fb6:	f04f 0900 	moveq.w	r9, #0
      count--;
 8005fba:	9102      	str	r1, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8005fc2:	d1eb      	bne.n	8005f9c <SPI_EndRxTxTransaction+0xe4>
 8005fc4:	e7b9      	b.n	8005f3a <SPI_EndRxTxTransaction+0x82>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fc6:	f7fc ffbd 	bl	8002f44 <HAL_GetTick>
 8005fca:	eba0 0308 	sub.w	r3, r0, r8
 8005fce:	429f      	cmp	r7, r3
 8005fd0:	d914      	bls.n	8005ffc <SPI_EndRxTxTransaction+0x144>
      if (count == 0U)
 8005fd2:	9803      	ldr	r0, [sp, #12]
      count--;
 8005fd4:	9a03      	ldr	r2, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fd6:	6823      	ldr	r3, [r4, #0]
        tmp_timeout = 0U;
 8005fd8:	2800      	cmp	r0, #0
      count--;
 8005fda:	f102 31ff 	add.w	r1, r2, #4294967295
        tmp_timeout = 0U;
 8005fde:	bf08      	it	eq
 8005fe0:	2700      	moveq	r7, #0
      count--;
 8005fe2:	9103      	str	r1, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fe4:	6899      	ldr	r1, [r3, #8]
 8005fe6:	060b      	lsls	r3, r1, #24
 8005fe8:	d4ed      	bmi.n	8005fc6 <SPI_EndRxTxTransaction+0x10e>
 8005fea:	e7ce      	b.n	8005f8a <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fec:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8005fee:	f045 0620 	orr.w	r6, r5, #32
 8005ff2:	6626      	str	r6, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ff4:	2003      	movs	r0, #3
}
 8005ff6:	b004      	add	sp, #16
 8005ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ffc:	e9d4 a500 	ldrd	sl, r5, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006000:	f8da 6004 	ldr.w	r6, [sl, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006004:	f5b5 7f82 	cmp.w	r5, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006008:	f026 07e0 	bic.w	r7, r6, #224	@ 0xe0
 800600c:	f8ca 7004 	str.w	r7, [sl, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006010:	d01a      	beq.n	8006048 <SPI_EndRxTxTransaction+0x190>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006012:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006018:	d10b      	bne.n	8006032 <SPI_EndRxTxTransaction+0x17a>
          SPI_RESET_CRC(hspi);
 800601a:	f8da 5000 	ldr.w	r5, [sl]
 800601e:	f425 5600 	bic.w	r6, r5, #8192	@ 0x2000
 8006022:	f8ca 6000 	str.w	r6, [sl]
 8006026:	f8da 7000 	ldr.w	r7, [sl]
 800602a:	f447 5000 	orr.w	r0, r7, #8192	@ 0x2000
 800602e:	f8ca 0000 	str.w	r0, [sl]
        hspi->State = HAL_SPI_STATE_READY;
 8006032:	2201      	movs	r2, #1
 8006034:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006038:	6e21      	ldr	r1, [r4, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 800603a:	2500      	movs	r5, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800603c:	f041 0320 	orr.w	r3, r1, #32
        __HAL_UNLOCK(hspi);
 8006040:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006044:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006046:	e7d5      	b.n	8005ff4 <SPI_EndRxTxTransaction+0x13c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006048:	68a0      	ldr	r0, [r4, #8]
 800604a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800604e:	d002      	beq.n	8006056 <SPI_EndRxTxTransaction+0x19e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006050:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8006054:	d1dd      	bne.n	8006012 <SPI_EndRxTxTransaction+0x15a>
          __HAL_SPI_DISABLE(hspi);
 8006056:	f8da 2000 	ldr.w	r2, [sl]
 800605a:	f022 0140 	bic.w	r1, r2, #64	@ 0x40
 800605e:	f8ca 1000 	str.w	r1, [sl]
 8006062:	e7d6      	b.n	8006012 <SPI_EndRxTxTransaction+0x15a>
 8006064:	20000400 	.word	0x20000400

08006068 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006068:	2800      	cmp	r0, #0
 800606a:	d074      	beq.n	8006156 <HAL_SPI_Init+0xee>
{
 800606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006070:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006072:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8006074:	2800      	cmp	r0, #0
 8006076:	d053      	beq.n	8006120 <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006078:	2300      	movs	r3, #0
 800607a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800607e:	f894 505d 	ldrb.w	r5, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006082:	2200      	movs	r2, #0
 8006084:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006086:	f005 06ff 	and.w	r6, r5, #255	@ 0xff
 800608a:	2d00      	cmp	r5, #0
 800608c:	d057      	beq.n	800613e <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 800608e:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006090:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006092:	2702      	movs	r7, #2
 8006094:	f884 705d 	strb.w	r7, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006098:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800609a:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 800609e:	f023 0540 	bic.w	r5, r3, #64	@ 0x40
 80060a2:	600d      	str	r5, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060a4:	d842      	bhi.n	800612c <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060a6:	d151      	bne.n	800614c <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060aa:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060ae:	f406 5500 	and.w	r5, r6, #8192	@ 0x2000
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	68a6      	ldr	r6, [r4, #8]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060b6:	f402 6870 	and.w	r8, r2, #3840	@ 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060ba:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	f406 4704 	and.w	r7, r6, #33792	@ 0x8400
 80060c4:	433a      	orrs	r2, r7
 80060c6:	f003 0602 	and.w	r6, r3, #2
 80060ca:	4316      	orrs	r6, r2
 80060cc:	6962      	ldr	r2, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060ce:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d0:	69e3      	ldr	r3, [r4, #28]
 80060d2:	f002 0201 	and.w	r2, r2, #1
 80060d6:	4332      	orrs	r2, r6
 80060d8:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060da:	f007 0e08 	and.w	lr, r7, #8
 80060de:	ea4e 0e08 	orr.w	lr, lr, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060e2:	6a27      	ldr	r7, [r4, #32]
 80060e4:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 80060e8:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 80060ec:	4313      	orrs	r3, r2
 80060ee:	ea43 0208 	orr.w	r2, r3, r8
 80060f2:	f007 0780 	and.w	r7, r7, #128	@ 0x80
 80060f6:	433a      	orrs	r2, r7
 80060f8:	432a      	orrs	r2, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060fa:	0c35      	lsrs	r5, r6, #16
 80060fc:	f005 0604 	and.w	r6, r5, #4
 8006100:	f000 0010 	and.w	r0, r0, #16
 8006104:	ea4e 0706 	orr.w	r7, lr, r6
 8006108:	4307      	orrs	r7, r0
 800610a:	ea47 030c 	orr.w	r3, r7, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800610e:	600a      	str	r2, [r1, #0]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006110:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006112:	604b      	str	r3, [r1, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 8006114:	2101      	movs	r1, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006116:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006118:	f884 105d 	strb.w	r1, [r4, #93]	@ 0x5d
}
 800611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006120:	6861      	ldr	r1, [r4, #4]
 8006122:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8006126:	d0aa      	beq.n	800607e <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006128:	61e0      	str	r0, [r4, #28]
 800612a:	e7a8      	b.n	800607e <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800612c:	f5b2 6f70 	cmp.w	r2, #3840	@ 0xf00
 8006130:	d113      	bne.n	800615a <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006132:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006134:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006138:	f407 5500 	and.w	r5, r7, #8192	@ 0x2000
 800613c:	e7b9      	b.n	80060b2 <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 800613e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006140:	f884 605c 	strb.w	r6, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006144:	f7fc fc1c 	bl	8002980 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006148:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800614a:	e7a0      	b.n	800608e <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800614c:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006150:	2500      	movs	r5, #0
 8006152:	62a5      	str	r5, [r4, #40]	@ 0x28
 8006154:	e7ad      	b.n	80060b2 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8006156:	2001      	movs	r0, #1
}
 8006158:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800615a:	f04f 0c00 	mov.w	ip, #0
 800615e:	e7f7      	b.n	8006150 <HAL_SPI_Init+0xe8>

08006160 <HAL_SPI_TransmitReceive>:
{
 8006160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006164:	4604      	mov	r4, r0
 8006166:	4691      	mov	r9, r2
 8006168:	461f      	mov	r7, r3
 800616a:	9e08      	ldr	r6, [sp, #32]
 800616c:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 800616e:	f7fc fee9 	bl	8002f44 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006172:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8006176:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006178:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800617a:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800617c:	d00b      	beq.n	8006196 <HAL_SPI_TransmitReceive+0x36>
 800617e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006182:	f040 8099 	bne.w	80062b8 <HAL_SPI_TransmitReceive+0x158>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006186:	68a0      	ldr	r0, [r4, #8]
 8006188:	b2d9      	uxtb	r1, r3
 800618a:	2800      	cmp	r0, #0
 800618c:	f040 8094 	bne.w	80062b8 <HAL_SPI_TransmitReceive+0x158>
 8006190:	2904      	cmp	r1, #4
 8006192:	f040 8091 	bne.w	80062b8 <HAL_SPI_TransmitReceive+0x158>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006196:	f1b8 0f00 	cmp.w	r8, #0
 800619a:	f000 8168 	beq.w	800646e <HAL_SPI_TransmitReceive+0x30e>
 800619e:	f1b9 0f00 	cmp.w	r9, #0
 80061a2:	f000 8164 	beq.w	800646e <HAL_SPI_TransmitReceive+0x30e>
 80061a6:	2f00      	cmp	r7, #0
 80061a8:	f000 8161 	beq.w	800646e <HAL_SPI_TransmitReceive+0x30e>
  __HAL_LOCK(hspi);
 80061ac:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	f000 8081 	beq.w	80062b8 <HAL_SPI_TransmitReceive+0x158>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061b6:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061ba:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061bc:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061c0:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061c2:	bf1c      	itt	ne
 80061c4:	2005      	movne	r0, #5
 80061c6:	f884 005d 	strbne.w	r0, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ca:	2300      	movs	r3, #0
  __HAL_LOCK(hspi);
 80061cc:	f04f 0c01 	mov.w	ip, #1
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061d4:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80061d6:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 80061da:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061de:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hspi);
 80061e0:	f884 c05c 	strb.w	ip, [r4, #92]	@ 0x5c
  hspi->RxXferSize  = Size;
 80061e4:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80061e8:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80061ec:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80061ee:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061f0:	d965      	bls.n	80062be <HAL_SPI_TransmitReceive+0x15e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061f2:	6858      	ldr	r0, [r3, #4]
 80061f4:	f420 5180 	bic.w	r1, r0, #4096	@ 0x1000
 80061f8:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	0640      	lsls	r0, r0, #25
 80061fe:	d403      	bmi.n	8006208 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8006200:	6819      	ldr	r1, [r3, #0]
 8006202:	f041 0040 	orr.w	r0, r1, #64	@ 0x40
 8006206:	6018      	str	r0, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006208:	2a00      	cmp	r2, #0
 800620a:	f000 80f1 	beq.w	80063f0 <HAL_SPI_TransmitReceive+0x290>
 800620e:	2f01      	cmp	r7, #1
 8006210:	f000 80ee 	beq.w	80063f0 <HAL_SPI_TransmitReceive+0x290>
 8006214:	1c73      	adds	r3, r6, #1
        txallowed = 1U;
 8006216:	f04f 0701 	mov.w	r7, #1
 800621a:	d031      	beq.n	8006280 <HAL_SPI_TransmitReceive+0x120>
 800621c:	e0cf      	b.n	80063be <HAL_SPI_TransmitReceive+0x25e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	6890      	ldr	r0, [r2, #8]
 8006222:	0780      	lsls	r0, r0, #30
 8006224:	d513      	bpl.n	800624e <HAL_SPI_TransmitReceive+0xee>
 8006226:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 800622a:	fa1f f38c 	uxth.w	r3, ip
 800622e:	b173      	cbz	r3, 800624e <HAL_SPI_TransmitReceive+0xee>
 8006230:	b167      	cbz	r7, 800624c <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006232:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8006234:	f837 1b02 	ldrh.w	r1, [r7], #2
 8006238:	60d1      	str	r1, [r2, #12]
        hspi->TxXferCount--;
 800623a:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800623e:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006240:	f10e 30ff 	add.w	r0, lr, #4294967295
 8006244:	fa1f f880 	uxth.w	r8, r0
 8006248:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800624c:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800624e:	6893      	ldr	r3, [r2, #8]
 8006250:	f013 0901 	ands.w	r9, r3, #1
 8006254:	d012      	beq.n	800627c <HAL_SPI_TransmitReceive+0x11c>
 8006256:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
 800625a:	fa1f f18c 	uxth.w	r1, ip
 800625e:	b169      	cbz	r1, 800627c <HAL_SPI_TransmitReceive+0x11c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006260:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006262:	68d2      	ldr	r2, [r2, #12]
 8006264:	f820 2b02 	strh.w	r2, [r0], #2
        hspi->RxXferCount--;
 8006268:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800626c:	6420      	str	r0, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800626e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8006272:	fa1f f388 	uxth.w	r3, r8
        txallowed = 1U;
 8006276:	464f      	mov	r7, r9
        hspi->RxXferCount--;
 8006278:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800627c:	f7fc fe62 	bl	8002f44 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006280:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8006282:	b290      	uxth	r0, r2
 8006284:	2800      	cmp	r0, #0
 8006286:	d1ca      	bne.n	800621e <HAL_SPI_TransmitReceive+0xbe>
 8006288:	f8b4 9046 	ldrh.w	r9, [r4, #70]	@ 0x46
 800628c:	fa1f f389 	uxth.w	r3, r9
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1c4      	bne.n	800621e <HAL_SPI_TransmitReceive+0xbe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006294:	462a      	mov	r2, r5
 8006296:	4631      	mov	r1, r6
 8006298:	4620      	mov	r0, r4
 800629a:	f7ff fe0d 	bl	8005eb8 <SPI_EndRxTxTransaction>
 800629e:	2800      	cmp	r0, #0
 80062a0:	f040 80e0 	bne.w	8006464 <HAL_SPI_TransmitReceive+0x304>
  hspi->State = HAL_SPI_STATE_READY;
 80062a4:	2701      	movs	r7, #1
 80062a6:	f884 705d 	strb.w	r7, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062aa:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 80062ac:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062b0:	1e08      	subs	r0, r1, #0
 80062b2:	bf18      	it	ne
 80062b4:	2001      	movne	r0, #1
 80062b6:	e000      	b.n	80062ba <HAL_SPI_TransmitReceive+0x15a>
    return HAL_BUSY;
 80062b8:	2002      	movs	r0, #2
}
 80062ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80062be:	2f01      	cmp	r7, #1
 80062c0:	f000 80f5 	beq.w	80064ae <HAL_SPI_TransmitReceive+0x34e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062c4:	6858      	ldr	r0, [r3, #4]
 80062c6:	f420 5180 	bic.w	r1, r0, #4096	@ 0x1000
 80062ca:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062cc:	681f      	ldr	r7, [r3, #0]
 80062ce:	0679      	lsls	r1, r7, #25
 80062d0:	d403      	bmi.n	80062da <HAL_SPI_TransmitReceive+0x17a>
    __HAL_SPI_ENABLE(hspi);
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	f040 0140 	orr.w	r1, r0, #64	@ 0x40
 80062d8:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062da:	b97a      	cbnz	r2, 80062fc <HAL_SPI_TransmitReceive+0x19c>
      if (hspi->TxXferCount > 1U)
 80062dc:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
 80062e0:	fa1f f28e 	uxth.w	r2, lr
 80062e4:	2a01      	cmp	r2, #1
 80062e6:	f240 80c4 	bls.w	8006472 <HAL_SPI_TransmitReceive+0x312>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062ea:	4642      	mov	r2, r8
 80062ec:	f832 1b02 	ldrh.w	r1, [r2], #2
 80062f0:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount -= 2U;
 80062f2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062f4:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80062f6:	1e9f      	subs	r7, r3, #2
 80062f8:	b2b8      	uxth	r0, r7
 80062fa:	87e0      	strh	r0, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80062fc:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062fe:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8006300:	b291      	uxth	r1, r2
 8006302:	b929      	cbnz	r1, 8006310 <HAL_SPI_TransmitReceive+0x1b0>
 8006304:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
 8006308:	fa1f f38e 	uxth.w	r3, lr
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0c1      	beq.n	8006294 <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006310:	6822      	ldr	r2, [r4, #0]
 8006312:	6890      	ldr	r0, [r2, #8]
 8006314:	0781      	lsls	r1, r0, #30
 8006316:	d506      	bpl.n	8006326 <HAL_SPI_TransmitReceive+0x1c6>
 8006318:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800631a:	b28b      	uxth	r3, r1
 800631c:	b11b      	cbz	r3, 8006326 <HAL_SPI_TransmitReceive+0x1c6>
 800631e:	2f00      	cmp	r7, #0
 8006320:	f040 8081 	bne.w	8006426 <HAL_SPI_TransmitReceive+0x2c6>
        txallowed = 0U;
 8006324:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006326:	6893      	ldr	r3, [r2, #8]
 8006328:	f013 0801 	ands.w	r8, r3, #1
 800632c:	d01b      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x206>
 800632e:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
 8006332:	b281      	uxth	r1, r0
 8006334:	b1b9      	cbz	r1, 8006366 <HAL_SPI_TransmitReceive+0x206>
        if (hspi->RxXferCount > 1U)
 8006336:	f8b4 7046 	ldrh.w	r7, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800633a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 800633c:	b2bb      	uxth	r3, r7
 800633e:	2b01      	cmp	r3, #1
 8006340:	d964      	bls.n	800640c <HAL_SPI_TransmitReceive+0x2ac>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006342:	68d0      	ldr	r0, [r2, #12]
 8006344:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->RxXferCount -= 2U;
 8006348:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800634c:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800634e:	f1ac 0e02 	sub.w	lr, ip, #2
 8006352:	fa1f f18e 	uxth.w	r1, lr
 8006356:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800635a:	f8b4 7046 	ldrh.w	r7, [r4, #70]	@ 0x46
 800635e:	b2bb      	uxth	r3, r7
 8006360:	2b01      	cmp	r3, #1
 8006362:	d940      	bls.n	80063e6 <HAL_SPI_TransmitReceive+0x286>
        txallowed = 1U;
 8006364:	4647      	mov	r7, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006366:	f7fc fded 	bl	8002f44 <HAL_GetTick>
 800636a:	1b42      	subs	r2, r0, r5
 800636c:	42b2      	cmp	r2, r6
 800636e:	d3c6      	bcc.n	80062fe <HAL_SPI_TransmitReceive+0x19e>
 8006370:	1c73      	adds	r3, r6, #1
 8006372:	d0c4      	beq.n	80062fe <HAL_SPI_TransmitReceive+0x19e>
        hspi->State = HAL_SPI_STATE_READY;
 8006374:	2601      	movs	r6, #1
        __HAL_UNLOCK(hspi);
 8006376:	2500      	movs	r5, #0
        hspi->State = HAL_SPI_STATE_READY;
 8006378:	f884 605d 	strb.w	r6, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800637c:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006380:	2003      	movs	r0, #3
}
 8006382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006386:	b157      	cbz	r7, 800639e <HAL_SPI_TransmitReceive+0x23e>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006388:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 800638a:	f837 3b02 	ldrh.w	r3, [r7], #2
 800638e:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8006390:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006394:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006396:	f108 31ff 	add.w	r1, r8, #4294967295
 800639a:	b288      	uxth	r0, r1
 800639c:	87e0      	strh	r0, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800639e:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063a0:	6893      	ldr	r3, [r2, #8]
 80063a2:	f013 0901 	ands.w	r9, r3, #1
 80063a6:	d005      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0x254>
 80063a8:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
 80063ac:	fa1f f18c 	uxth.w	r1, ip
 80063b0:	2900      	cmp	r1, #0
 80063b2:	d16d      	bne.n	8006490 <HAL_SPI_TransmitReceive+0x330>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063b4:	f7fc fdc6 	bl	8002f44 <HAL_GetTick>
 80063b8:	1b41      	subs	r1, r0, r5
 80063ba:	42b1      	cmp	r1, r6
 80063bc:	d2da      	bcs.n	8006374 <HAL_SPI_TransmitReceive+0x214>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063be:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
 80063c2:	fa1f f38e 	uxth.w	r3, lr
 80063c6:	b92b      	cbnz	r3, 80063d4 <HAL_SPI_TransmitReceive+0x274>
 80063c8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 80063cc:	b288      	uxth	r0, r1
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f43f af60 	beq.w	8006294 <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	6893      	ldr	r3, [r2, #8]
 80063d8:	0799      	lsls	r1, r3, #30
 80063da:	d5e1      	bpl.n	80063a0 <HAL_SPI_TransmitReceive+0x240>
 80063dc:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80063de:	b288      	uxth	r0, r1
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d0dd      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0x240>
 80063e4:	e7cf      	b.n	8006386 <HAL_SPI_TransmitReceive+0x226>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063e6:	6850      	ldr	r0, [r2, #4]
 80063e8:	f440 5180 	orr.w	r1, r0, #4096	@ 0x1000
 80063ec:	6051      	str	r1, [r2, #4]
 80063ee:	e7b9      	b.n	8006364 <HAL_SPI_TransmitReceive+0x204>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063f0:	4647      	mov	r7, r8
 80063f2:	f837 2b02 	ldrh.w	r2, [r7], #2
 80063f6:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80063f8:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063fc:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80063fe:	f108 39ff 	add.w	r9, r8, #4294967295
 8006402:	fa1f fc89 	uxth.w	ip, r9
 8006406:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 800640a:	e703      	b.n	8006214 <HAL_SPI_TransmitReceive+0xb4>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800640c:	7b12      	ldrb	r2, [r2, #12]
 800640e:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8006410:	f8b4 9046 	ldrh.w	r9, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr++;
 8006414:	6c20      	ldr	r0, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8006416:	f109 37ff 	add.w	r7, r9, #4294967295
          hspi->pRxBuffPtr++;
 800641a:	3001      	adds	r0, #1
          hspi->RxXferCount--;
 800641c:	b2bb      	uxth	r3, r7
          hspi->pRxBuffPtr++;
 800641e:	6420      	str	r0, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8006420:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8006424:	e79e      	b.n	8006364 <HAL_SPI_TransmitReceive+0x204>
        if (hspi->TxXferCount > 1U)
 8006426:	8fe7      	ldrh	r7, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006428:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800642a:	b2b8      	uxth	r0, r7
 800642c:	2801      	cmp	r0, #1
 800642e:	d90c      	bls.n	800644a <HAL_SPI_TransmitReceive+0x2ea>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006430:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006434:	60d1      	str	r1, [r2, #12]
          hspi->TxXferCount -= 2U;
 8006436:	f8b4 903e 	ldrh.w	r9, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800643a:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800643c:	f1a9 0c02 	sub.w	ip, r9, #2
 8006440:	fa1f fe8c 	uxth.w	lr, ip
 8006444:	f8a4 e03e 	strh.w	lr, [r4, #62]	@ 0x3e
 8006448:	e76c      	b.n	8006324 <HAL_SPI_TransmitReceive+0x1c4>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800644a:	7819      	ldrb	r1, [r3, #0]
 800644c:	7311      	strb	r1, [r2, #12]
          hspi->TxXferCount--;
 800644e:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8006452:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8006454:	f108 37ff 	add.w	r7, r8, #4294967295
          hspi->pTxBuffPtr++;
 8006458:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800645a:	b2b8      	uxth	r0, r7
          hspi->pTxBuffPtr++;
 800645c:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800645e:	87e0      	strh	r0, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006460:	6822      	ldr	r2, [r4, #0]
 8006462:	e75f      	b.n	8006324 <HAL_SPI_TransmitReceive+0x1c4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006464:	2620      	movs	r6, #32
    __HAL_UNLOCK(hspi);
 8006466:	2500      	movs	r5, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006468:	6626      	str	r6, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800646a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800646e:	2001      	movs	r0, #1
 8006470:	e723      	b.n	80062ba <HAL_SPI_TransmitReceive+0x15a>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006472:	f898 7000 	ldrb.w	r7, [r8]
 8006476:	731f      	strb	r7, [r3, #12]
        hspi->TxXferCount--;
 8006478:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 800647c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800647e:	f108 39ff 	add.w	r9, r8, #4294967295
        hspi->pTxBuffPtr++;
 8006482:	3001      	adds	r0, #1
        hspi->TxXferCount--;
 8006484:	fa1f fc89 	uxth.w	ip, r9
        hspi->pTxBuffPtr++;
 8006488:	63a0      	str	r0, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800648a:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 800648e:	e735      	b.n	80062fc <HAL_SPI_TransmitReceive+0x19c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006490:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006492:	68d2      	ldr	r2, [r2, #12]
 8006494:	f820 2b02 	strh.w	r2, [r0], #2
        hspi->RxXferCount--;
 8006498:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800649c:	6420      	str	r0, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800649e:	f10e 38ff 	add.w	r8, lr, #4294967295
 80064a2:	fa1f f388 	uxth.w	r3, r8
        txallowed = 1U;
 80064a6:	464f      	mov	r7, r9
        hspi->RxXferCount--;
 80064a8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 80064ac:	e782      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x254>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064ae:	685f      	ldr	r7, [r3, #4]
 80064b0:	f447 5280 	orr.w	r2, r7, #4096	@ 0x1000
 80064b4:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	0640      	lsls	r0, r0, #25
 80064ba:	f53f af0f 	bmi.w	80062dc <HAL_SPI_TransmitReceive+0x17c>
    __HAL_SPI_ENABLE(hspi);
 80064be:	6819      	ldr	r1, [r3, #0]
 80064c0:	f041 0740 	orr.w	r7, r1, #64	@ 0x40
 80064c4:	601f      	str	r7, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064c6:	e709      	b.n	80062dc <HAL_SPI_TransmitReceive+0x17c>

080064c8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c8:	2800      	cmp	r0, #0
 80064ca:	f000 808c 	beq.w	80065e6 <HAL_TIM_Base_Init+0x11e>
{
 80064ce:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064d0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80064d4:	4604      	mov	r4, r0
 80064d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d078      	beq.n	80065d0 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064de:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e0:	4942      	ldr	r1, [pc, #264]	@ (80065ec <HAL_TIM_Base_Init+0x124>)
  htim->State = HAL_TIM_STATE_BUSY;
 80064e2:	2002      	movs	r0, #2
 80064e4:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e8:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 80064ea:	681d      	ldr	r5, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064ec:	d05c      	beq.n	80065a8 <HAL_TIM_Base_Init+0xe0>
 80064ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f2:	d024      	beq.n	800653e <HAL_TIM_Base_Init+0x76>
 80064f4:	f5a1 3c94 	sub.w	ip, r1, #75776	@ 0x12800
 80064f8:	4563      	cmp	r3, ip
 80064fa:	d020      	beq.n	800653e <HAL_TIM_Base_Init+0x76>
 80064fc:	f50c 6280 	add.w	r2, ip, #1024	@ 0x400
 8006500:	4293      	cmp	r3, r2
 8006502:	d01c      	beq.n	800653e <HAL_TIM_Base_Init+0x76>
 8006504:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8006508:	4283      	cmp	r3, r0
 800650a:	d018      	beq.n	800653e <HAL_TIM_Base_Init+0x76>
 800650c:	f500 3194 	add.w	r1, r0, #75776	@ 0x12800
 8006510:	428b      	cmp	r3, r1
 8006512:	d049      	beq.n	80065a8 <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006514:	f501 6240 	add.w	r2, r1, #3072	@ 0xc00
 8006518:	4293      	cmp	r3, r2
 800651a:	d05e      	beq.n	80065da <HAL_TIM_Base_Init+0x112>
 800651c:	4834      	ldr	r0, [pc, #208]	@ (80065f0 <HAL_TIM_Base_Init+0x128>)
 800651e:	4283      	cmp	r3, r0
 8006520:	d05b      	beq.n	80065da <HAL_TIM_Base_Init+0x112>
 8006522:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 8006526:	4563      	cmp	r3, ip
 8006528:	d057      	beq.n	80065da <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800652a:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800652e:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006530:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006532:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006534:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8006536:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006538:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800653a:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800653c:	e010      	b.n	8006560 <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 800653e:	68a0      	ldr	r0, [r4, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006540:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006542:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006546:	4305      	orrs	r5, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006548:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800654a:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800654e:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006550:	f022 0580 	bic.w	r5, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006554:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8006556:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006558:	430d      	orrs	r5, r1
  TIMx->CR1 = tmpcr1;
 800655a:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800655c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800655e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006560:	2201      	movs	r2, #1
 8006562:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006564:	6918      	ldr	r0, [r3, #16]
 8006566:	07c2      	lsls	r2, r0, #31
 8006568:	d503      	bpl.n	8006572 <HAL_TIM_Base_Init+0xaa>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800656a:	691d      	ldr	r5, [r3, #16]
 800656c:	f025 0101 	bic.w	r1, r5, #1
 8006570:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006572:	2301      	movs	r3, #1
 8006574:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006578:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800657c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006580:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006584:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006588:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800658c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006590:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006594:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006598:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800659c:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80065a0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80065a4:	2000      	movs	r0, #0
}
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80065a8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065aa:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065ac:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80065b0:	4305      	orrs	r5, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80065b2:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065b6:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065b8:	69a1      	ldr	r1, [r4, #24]
 80065ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065be:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80065c0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065c2:	68e0      	ldr	r0, [r4, #12]
 80065c4:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80065c6:	6865      	ldr	r5, [r4, #4]
 80065c8:	629d      	str	r5, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80065ca:	6961      	ldr	r1, [r4, #20]
 80065cc:	6319      	str	r1, [r3, #48]	@ 0x30
 80065ce:	e7c7      	b.n	8006560 <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 80065d0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80065d4:	f7fc fadc 	bl	8002b90 <HAL_TIM_Base_MspInit>
 80065d8:	e781      	b.n	80064de <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065da:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065dc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80065de:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065e2:	4302      	orrs	r2, r0
 80065e4:	e7e9      	b.n	80065ba <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 80065e6:	2001      	movs	r0, #1
}
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40014400 	.word	0x40014400

080065f4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80065f4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d123      	bne.n	8006644 <HAL_TIM_Base_Start+0x50>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065fc:	6803      	ldr	r3, [r0, #0]
 80065fe:	4a17      	ldr	r2, [pc, #92]	@ (800665c <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006602:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8006604:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006608:	d01e      	beq.n	8006648 <HAL_TIM_Base_Start+0x54>
 800660a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800660e:	d01b      	beq.n	8006648 <HAL_TIM_Base_Start+0x54>
 8006610:	f5a2 3094 	sub.w	r0, r2, #75776	@ 0x12800
 8006614:	4283      	cmp	r3, r0
 8006616:	d017      	beq.n	8006648 <HAL_TIM_Base_Start+0x54>
 8006618:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 800661c:	4563      	cmp	r3, ip
 800661e:	d013      	beq.n	8006648 <HAL_TIM_Base_Start+0x54>
 8006620:	f50c 6280 	add.w	r2, ip, #1024	@ 0x400
 8006624:	4293      	cmp	r3, r2
 8006626:	d00f      	beq.n	8006648 <HAL_TIM_Base_Start+0x54>
 8006628:	f502 3194 	add.w	r1, r2, #75776	@ 0x12800
 800662c:	428b      	cmp	r3, r1
 800662e:	d00b      	beq.n	8006648 <HAL_TIM_Base_Start+0x54>
 8006630:	f501 6040 	add.w	r0, r1, #3072	@ 0xc00
 8006634:	4283      	cmp	r3, r0
 8006636:	d007      	beq.n	8006648 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	f040 0101 	orr.w	r1, r0, #1
 800663e:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8006640:	2000      	movs	r0, #0
 8006642:	4770      	bx	lr
    return HAL_ERROR;
 8006644:	2001      	movs	r0, #1
}
 8006646:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006648:	6899      	ldr	r1, [r3, #8]
 800664a:	4a05      	ldr	r2, [pc, #20]	@ (8006660 <HAL_TIM_Base_Start+0x6c>)
 800664c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664e:	2a06      	cmp	r2, #6
 8006650:	d0f6      	beq.n	8006640 <HAL_TIM_Base_Start+0x4c>
 8006652:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006656:	d1ef      	bne.n	8006638 <HAL_TIM_Base_Start+0x44>
  return HAL_OK;
 8006658:	2000      	movs	r0, #0
 800665a:	4770      	bx	lr
 800665c:	40012c00 	.word	0x40012c00
 8006660:	00010007 	.word	0x00010007

08006664 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006664:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006668:	2b01      	cmp	r3, #1
 800666a:	d070      	beq.n	800674e <HAL_TIM_ConfigClockSource+0xea>
 800666c:	4602      	mov	r2, r0
{
 800666e:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8006670:	6804      	ldr	r4, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006672:	4b50      	ldr	r3, [pc, #320]	@ (80067b4 <HAL_TIM_ConfigClockSource+0x150>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006674:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 8006676:	2001      	movs	r0, #1
 8006678:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	f882 503d 	strb.w	r5, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006680:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006682:	402b      	ands	r3, r5
  switch (sClockSourceConfig->ClockSource)
 8006684:	680d      	ldr	r5, [r1, #0]
  htim->Instance->SMCR = tmpsmcr;
 8006686:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006688:	2d60      	cmp	r5, #96	@ 0x60
 800668a:	d062      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0xee>
 800668c:	d825      	bhi.n	80066da <HAL_TIM_ConfigClockSource+0x76>
 800668e:	2d40      	cmp	r5, #64	@ 0x40
 8006690:	d078      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x120>
 8006692:	d94b      	bls.n	800672c <HAL_TIM_ConfigClockSource+0xc8>
 8006694:	2d50      	cmp	r5, #80	@ 0x50
 8006696:	d117      	bne.n	80066c8 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8006698:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800669a:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800669c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800669e:	6a23      	ldr	r3, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066a0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80066a4:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066a6:	f023 0501 	bic.w	r5, r3, #1
 80066aa:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ac:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066ae:	f023 05f0 	bic.w	r5, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066b2:	ea45 1000 	orr.w	r0, r5, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066b6:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 80066b8:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066ba:	68a1      	ldr	r1, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066bc:	f021 0c70 	bic.w	ip, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066c0:	f04c 0357 	orr.w	r3, ip, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c4:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80066c6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80066c8:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 80066ca:	f04f 0c00 	mov.w	ip, #0
  htim->State = HAL_TIM_STATE_READY;
 80066ce:	f882 403d 	strb.w	r4, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80066d2:	f882 c03c 	strb.w	ip, [r2, #60]	@ 0x3c
}
 80066d6:	bc30      	pop	{r4, r5}
 80066d8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80066da:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80066de:	d0f2      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x62>
 80066e0:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 80066e4:	d110      	bne.n	8006708 <HAL_TIM_ConfigClockSource+0xa4>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066e6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80066ea:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066ec:	432b      	orrs	r3, r5
 80066ee:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f0:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80066f8:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066fa:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066fc:	68a0      	ldr	r0, [r4, #8]
 80066fe:	f440 4580 	orr.w	r5, r0, #16384	@ 0x4000
 8006702:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006704:	2000      	movs	r0, #0
 8006706:	e7df      	b.n	80066c8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8006708:	2d70      	cmp	r5, #112	@ 0x70
 800670a:	d1dd      	bne.n	80066c8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800670c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006710:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006712:	432b      	orrs	r3, r5
 8006714:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006716:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800671a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800671e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8006720:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006722:	68a0      	ldr	r0, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006724:	f040 0577 	orr.w	r5, r0, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006728:	60a5      	str	r5, [r4, #8]
      break;
 800672a:	e7cc      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 800672c:	2d20      	cmp	r5, #32
 800672e:	d002      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0xd2>
 8006730:	d909      	bls.n	8006746 <HAL_TIM_ConfigClockSource+0xe2>
 8006732:	2d30      	cmp	r5, #48	@ 0x30
 8006734:	d1c8      	bne.n	80066c8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8006736:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006738:	f020 0170 	bic.w	r1, r0, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800673c:	430d      	orrs	r5, r1
 800673e:	f045 0507 	orr.w	r5, r5, #7
  TIMx->SMCR = tmpsmcr;
 8006742:	60a5      	str	r5, [r4, #8]
}
 8006744:	e7bf      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8006746:	f035 0110 	bics.w	r1, r5, #16
 800674a:	d1bd      	bne.n	80066c8 <HAL_TIM_ConfigClockSource+0x64>
 800674c:	e7f3      	b.n	8006736 <HAL_TIM_ConfigClockSource+0xd2>
  __HAL_LOCK(htim);
 800674e:	2002      	movs	r0, #2
}
 8006750:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8006752:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006754:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8006756:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006758:	f021 0ca0 	bic.w	ip, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800675c:	ea4c 1305 	orr.w	r3, ip, r5, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006760:	6a25      	ldr	r5, [r4, #32]
 8006762:	f025 0110 	bic.w	r1, r5, #16
 8006766:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006768:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800676a:	f425 4c70 	bic.w	ip, r5, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800676e:	ea4c 3000 	orr.w	r0, ip, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006772:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 8006774:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006776:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006778:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677c:	f041 0567 	orr.w	r5, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006780:	60a5      	str	r5, [r4, #8]
}
 8006782:	e7a0      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x62>
                               sClockSourceConfig->ClockPolarity,
 8006784:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006786:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8006788:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800678a:	f021 050a 	bic.w	r5, r1, #10
  tmpccer |= TIM_ICPolarity;
 800678e:	431d      	orrs	r5, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006790:	6a23      	ldr	r3, [r4, #32]
 8006792:	f023 0101 	bic.w	r1, r3, #1
 8006796:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006798:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800679a:	f023 01f0 	bic.w	r1, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800679e:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80067a2:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 80067a4:	6225      	str	r5, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80067a6:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80067a8:	f025 0c70 	bic.w	ip, r5, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ac:	f04c 0347 	orr.w	r3, ip, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80067b0:	60a3      	str	r3, [r4, #8]
}
 80067b2:	e788      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x62>
 80067b4:	fffe0088 	.word	0xfffe0088

080067b8 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop

080067bc <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop

080067c0 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop

080067c4 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop

080067c8 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop

080067cc <HAL_TIM_IRQHandler>:
{
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 80067ce:	6803      	ldr	r3, [r0, #0]
 80067d0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067d2:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067d4:	07a1      	lsls	r1, r4, #30
{
 80067d6:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067d8:	d501      	bpl.n	80067de <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067da:	07b2      	lsls	r2, r6, #30
 80067dc:	d457      	bmi.n	800688e <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067de:	0767      	lsls	r7, r4, #29
 80067e0:	d501      	bpl.n	80067e6 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067e2:	0770      	lsls	r0, r6, #29
 80067e4:	d440      	bmi.n	8006868 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067e6:	0721      	lsls	r1, r4, #28
 80067e8:	d501      	bpl.n	80067ee <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067ea:	0732      	lsls	r2, r6, #28
 80067ec:	d42a      	bmi.n	8006844 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067ee:	06e7      	lsls	r7, r4, #27
 80067f0:	d501      	bpl.n	80067f6 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067f2:	06f0      	lsls	r0, r6, #27
 80067f4:	d413      	bmi.n	800681e <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067f6:	07e1      	lsls	r1, r4, #31
 80067f8:	d501      	bpl.n	80067fe <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067fa:	07f2      	lsls	r2, r6, #31
 80067fc:	d465      	bmi.n	80068ca <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067fe:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006802:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006806:	d052      	beq.n	80068ae <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006808:	0633      	lsls	r3, r6, #24
 800680a:	d466      	bmi.n	80068da <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800680c:	0660      	lsls	r0, r4, #25
 800680e:	d501      	bpl.n	8006814 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006810:	0671      	lsls	r1, r6, #25
 8006812:	d473      	bmi.n	80068fc <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006814:	06a2      	lsls	r2, r4, #26
 8006816:	d501      	bpl.n	800681c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006818:	06b3      	lsls	r3, r6, #26
 800681a:	d44d      	bmi.n	80068b8 <HAL_TIM_IRQHandler+0xec>
}
 800681c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800681e:	682b      	ldr	r3, [r5, #0]
 8006820:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006824:	2108      	movs	r1, #8
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006828:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800682a:	69df      	ldr	r7, [r3, #28]
 800682c:	f417 7f40 	tst.w	r7, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006830:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006832:	d174      	bne.n	800691e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006834:	f7ff ffc2 	bl	80067bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006838:	4628      	mov	r0, r5
 800683a:	f7ff ffc3 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683e:	2000      	movs	r0, #0
 8006840:	7728      	strb	r0, [r5, #28]
 8006842:	e7d8      	b.n	80067f6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800684a:	2104      	movs	r1, #4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800684c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800684e:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006850:	69df      	ldr	r7, [r3, #28]
 8006852:	07bb      	lsls	r3, r7, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006854:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006856:	d15f      	bne.n	8006918 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006858:	f7ff ffb0 	bl	80067bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800685c:	4628      	mov	r0, r5
 800685e:	f7ff ffb1 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006862:	2000      	movs	r0, #0
 8006864:	7728      	strb	r0, [r5, #28]
 8006866:	e7c2      	b.n	80067ee <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686e:	2102      	movs	r1, #2
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006872:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006874:	699f      	ldr	r7, [r3, #24]
 8006876:	f417 7f40 	tst.w	r7, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800687a:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800687c:	d149      	bne.n	8006912 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800687e:	f7ff ff9d 	bl	80067bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006882:	4628      	mov	r0, r5
 8006884:	f7ff ff9e 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006888:	2000      	movs	r0, #0
 800688a:	7728      	strb	r0, [r5, #28]
 800688c:	e7ab      	b.n	80067e6 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800688e:	f06f 0202 	mvn.w	r2, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006892:	2101      	movs	r1, #1
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006896:	7701      	strb	r1, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006898:	699f      	ldr	r7, [r3, #24]
 800689a:	07bb      	lsls	r3, r7, #30
 800689c:	d136      	bne.n	800690c <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800689e:	f7ff ff8d 	bl	80067bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a2:	4628      	mov	r0, r5
 80068a4:	f7ff ff8e 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a8:	2000      	movs	r0, #0
 80068aa:	7728      	strb	r0, [r5, #28]
 80068ac:	e797      	b.n	80067de <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80068ae:	2f00      	cmp	r7, #0
 80068b0:	d0ac      	beq.n	800680c <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068b2:	0637      	lsls	r7, r6, #24
 80068b4:	d41a      	bmi.n	80068ec <HAL_TIM_IRQHandler+0x120>
 80068b6:	e7a9      	b.n	800680c <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068b8:	682e      	ldr	r6, [r5, #0]
 80068ba:	f06f 0420 	mvn.w	r4, #32
 80068be:	6134      	str	r4, [r6, #16]
      HAL_TIMEx_CommutCallback(htim);
 80068c0:	4628      	mov	r0, r5
}
 80068c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 80068c6:	f000 b87d 	b.w	80069c4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068ca:	682b      	ldr	r3, [r5, #0]
 80068cc:	f06f 0201 	mvn.w	r2, #1
 80068d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80068d2:	4628      	mov	r0, r5
 80068d4:	f7ff ff70 	bl	80067b8 <HAL_TIM_PeriodElapsedCallback>
 80068d8:	e791      	b.n	80067fe <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80068da:	6829      	ldr	r1, [r5, #0]
 80068dc:	f46f 5002 	mvn.w	r0, #8320	@ 0x2080
 80068e0:	6108      	str	r0, [r1, #16]
      HAL_TIMEx_BreakCallback(htim);
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 f870 	bl	80069c8 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80068e8:	2f00      	cmp	r7, #0
 80068ea:	d08f      	beq.n	800680c <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80068f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80068f4:	4628      	mov	r0, r5
 80068f6:	f000 f869 	bl	80069cc <HAL_TIMEx_Break2Callback>
 80068fa:	e787      	b.n	800680c <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068fc:	682f      	ldr	r7, [r5, #0]
 80068fe:	f06f 0140 	mvn.w	r1, #64	@ 0x40
 8006902:	6139      	str	r1, [r7, #16]
      HAL_TIM_TriggerCallback(htim);
 8006904:	4628      	mov	r0, r5
 8006906:	f7ff ff5f 	bl	80067c8 <HAL_TIM_TriggerCallback>
 800690a:	e783      	b.n	8006814 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 800690c:	f7ff ff58 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
 8006910:	e7ca      	b.n	80068a8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8006912:	f7ff ff55 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
 8006916:	e7b7      	b.n	8006888 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 8006918:	f7ff ff52 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
 800691c:	e7a1      	b.n	8006862 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 800691e:	f7ff ff4f 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
 8006922:	e78c      	b.n	800683e <HAL_TIM_IRQHandler+0x72>

08006924 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006924:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006928:	2a01      	cmp	r2, #1
 800692a:	d044      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800692c:	6802      	ldr	r2, [r0, #0]
{
 800692e:	b470      	push	{r4, r5, r6}
 8006930:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006932:	4e22      	ldr	r6, [pc, #136]	@ (80069bc <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006934:	2002      	movs	r0, #2
 8006936:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800693a:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 800693c:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800693e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006940:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006942:	d026      	beq.n	8006992 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006944:	f506 6c00 	add.w	ip, r6, #2048	@ 0x800
 8006948:	4562      	cmp	r2, ip
 800694a:	d02b      	beq.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 800694c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006950:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006952:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006956:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006958:	d00e      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800695a:	4e19      	ldr	r6, [pc, #100]	@ (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800695c:	42b2      	cmp	r2, r6
 800695e:	d00b      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006960:	f506 6580 	add.w	r5, r6, #1024	@ 0x400
 8006964:	42aa      	cmp	r2, r5
 8006966:	d007      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006968:	f505 6c80 	add.w	ip, r5, #1024	@ 0x400
 800696c:	4562      	cmp	r2, ip
 800696e:	d003      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006970:	f50c 309a 	add.w	r0, ip, #78848	@ 0x13400
 8006974:	4282      	cmp	r2, r0
 8006976:	d104      	bne.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006978:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800697a:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800697e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006980:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006982:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006984:	2201      	movs	r2, #1
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800698a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800698e:	bc70      	pop	{r4, r5, r6}
 8006990:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006992:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006994:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006998:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800699a:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800699e:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80069a0:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a2:	e7e9      	b.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069a4:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069a6:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069aa:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80069ac:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069b0:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 80069b2:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b4:	e7e0      	b.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 80069b6:	2002      	movs	r0, #2
}
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40012c00 	.word	0x40012c00
 80069c0:	40000400 	.word	0x40000400

080069c4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop

080069c8 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop

080069cc <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop

080069d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d4:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069d6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80069d8:	2820      	cmp	r0, #32
 80069da:	d17c      	bne.n	8006ad6 <HAL_UART_Transmit+0x106>
  {
    if ((pData == NULL) || (Size == 0U))
 80069dc:	4688      	mov	r8, r1
 80069de:	b109      	cbz	r1, 80069e4 <HAL_UART_Transmit+0x14>
 80069e0:	4617      	mov	r7, r2
 80069e2:	b912      	cbnz	r2, 80069ea <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 80069e4:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80069e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ea:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ec:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069f0:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f2:	f8c4 9084 	str.w	r9, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069f6:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80069f8:	f7fc faa4 	bl	8002f44 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069fc:	68a1      	ldr	r1, [r4, #8]
    huart->TxXferSize  = Size;
 80069fe:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a02:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8006a06:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 8006a0a:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0c:	d072      	beq.n	8006af4 <HAL_UART_Transmit+0x124>
    while (huart->TxXferCount > 0U)
 8006a0e:	f8b4 0052 	ldrh.w	r0, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a12:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8006a14:	b287      	uxth	r7, r0
 8006a16:	2f00      	cmp	r7, #0
 8006a18:	d02c      	beq.n	8006a74 <HAL_UART_Transmit+0xa4>
 8006a1a:	1c68      	adds	r0, r5, #1
 8006a1c:	d150      	bne.n	8006ac0 <HAL_UART_Transmit+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a1e:	69d0      	ldr	r0, [r2, #28]
 8006a20:	0603      	lsls	r3, r0, #24
 8006a22:	d414      	bmi.n	8006a4e <HAL_UART_Transmit+0x7e>
 8006a24:	69d7      	ldr	r7, [r2, #28]
 8006a26:	0638      	lsls	r0, r7, #24
 8006a28:	d411      	bmi.n	8006a4e <HAL_UART_Transmit+0x7e>
 8006a2a:	69d3      	ldr	r3, [r2, #28]
 8006a2c:	0619      	lsls	r1, r3, #24
 8006a2e:	d40e      	bmi.n	8006a4e <HAL_UART_Transmit+0x7e>
 8006a30:	69d1      	ldr	r1, [r2, #28]
 8006a32:	060b      	lsls	r3, r1, #24
 8006a34:	d40b      	bmi.n	8006a4e <HAL_UART_Transmit+0x7e>
 8006a36:	69d0      	ldr	r0, [r2, #28]
 8006a38:	0607      	lsls	r7, r0, #24
 8006a3a:	d408      	bmi.n	8006a4e <HAL_UART_Transmit+0x7e>
 8006a3c:	69d7      	ldr	r7, [r2, #28]
 8006a3e:	0638      	lsls	r0, r7, #24
 8006a40:	d405      	bmi.n	8006a4e <HAL_UART_Transmit+0x7e>
 8006a42:	69d3      	ldr	r3, [r2, #28]
 8006a44:	0619      	lsls	r1, r3, #24
 8006a46:	d402      	bmi.n	8006a4e <HAL_UART_Transmit+0x7e>
 8006a48:	69d1      	ldr	r1, [r2, #28]
 8006a4a:	060b      	lsls	r3, r1, #24
 8006a4c:	d5e7      	bpl.n	8006a1e <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 8006a4e:	f1b8 0f00 	cmp.w	r8, #0
 8006a52:	d03b      	beq.n	8006acc <HAL_UART_Transmit+0xfc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a54:	f818 0b01 	ldrb.w	r0, [r8], #1
 8006a58:	8510      	strh	r0, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006a5a:	f8b4 c052 	ldrh.w	ip, [r4, #82]	@ 0x52
 8006a5e:	f10c 3eff 	add.w	lr, ip, #4294967295
 8006a62:	fa1f f38e 	uxth.w	r3, lr
 8006a66:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006a6a:	f8b4 1052 	ldrh.w	r1, [r4, #82]	@ 0x52
 8006a6e:	b288      	uxth	r0, r1
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d1d2      	bne.n	8006a1a <HAL_UART_Transmit+0x4a>
 8006a74:	1c69      	adds	r1, r5, #1
 8006a76:	d139      	bne.n	8006aec <HAL_UART_Transmit+0x11c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a78:	69d1      	ldr	r1, [r2, #28]
 8006a7a:	064b      	lsls	r3, r1, #25
 8006a7c:	d414      	bmi.n	8006aa8 <HAL_UART_Transmit+0xd8>
 8006a7e:	69d0      	ldr	r0, [r2, #28]
 8006a80:	0645      	lsls	r5, r0, #25
 8006a82:	d411      	bmi.n	8006aa8 <HAL_UART_Transmit+0xd8>
 8006a84:	69d5      	ldr	r5, [r2, #28]
 8006a86:	0668      	lsls	r0, r5, #25
 8006a88:	d40e      	bmi.n	8006aa8 <HAL_UART_Transmit+0xd8>
 8006a8a:	69d6      	ldr	r6, [r2, #28]
 8006a8c:	0671      	lsls	r1, r6, #25
 8006a8e:	d40b      	bmi.n	8006aa8 <HAL_UART_Transmit+0xd8>
 8006a90:	69d7      	ldr	r7, [r2, #28]
 8006a92:	067b      	lsls	r3, r7, #25
 8006a94:	d408      	bmi.n	8006aa8 <HAL_UART_Transmit+0xd8>
 8006a96:	69d3      	ldr	r3, [r2, #28]
 8006a98:	065f      	lsls	r7, r3, #25
 8006a9a:	d405      	bmi.n	8006aa8 <HAL_UART_Transmit+0xd8>
 8006a9c:	69d1      	ldr	r1, [r2, #28]
 8006a9e:	064e      	lsls	r6, r1, #25
 8006aa0:	d402      	bmi.n	8006aa8 <HAL_UART_Transmit+0xd8>
 8006aa2:	69d0      	ldr	r0, [r2, #28]
 8006aa4:	0645      	lsls	r5, r0, #25
 8006aa6:	d5e7      	bpl.n	8006a78 <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	67e2      	str	r2, [r4, #124]	@ 0x7c
    return HAL_OK;
 8006aac:	2000      	movs	r0, #0
 8006aae:	e79a      	b.n	80069e6 <HAL_UART_Transmit+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab0:	f7fc fa48 	bl	8002f44 <HAL_GetTick>
 8006ab4:	1b81      	subs	r1, r0, r6
 8006ab6:	428d      	cmp	r5, r1
 8006ab8:	d322      	bcc.n	8006b00 <HAL_UART_Transmit+0x130>
 8006aba:	b30d      	cbz	r5, 8006b00 <HAL_UART_Transmit+0x130>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006abc:	6822      	ldr	r2, [r4, #0]
 8006abe:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac0:	69d3      	ldr	r3, [r2, #28]
 8006ac2:	061f      	lsls	r7, r3, #24
 8006ac4:	d5f4      	bpl.n	8006ab0 <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 8006ac6:	f1b8 0f00 	cmp.w	r8, #0
 8006aca:	d1c3      	bne.n	8006a54 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006acc:	f839 7b02 	ldrh.w	r7, [r9], #2
 8006ad0:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8006ad4:	e7c0      	b.n	8006a58 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8006ad6:	2002      	movs	r0, #2
}
 8006ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006adc:	f7fc fa32 	bl	8002f44 <HAL_GetTick>
 8006ae0:	1b87      	subs	r7, r0, r6
 8006ae2:	42bd      	cmp	r5, r7
 8006ae4:	d30c      	bcc.n	8006b00 <HAL_UART_Transmit+0x130>
 8006ae6:	b15d      	cbz	r5, 8006b00 <HAL_UART_Transmit+0x130>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ae8:	6822      	ldr	r2, [r4, #0]
 8006aea:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aec:	69d2      	ldr	r2, [r2, #28]
 8006aee:	0657      	lsls	r7, r2, #25
 8006af0:	d5f4      	bpl.n	8006adc <HAL_UART_Transmit+0x10c>
 8006af2:	e7d9      	b.n	8006aa8 <HAL_UART_Transmit+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af4:	6922      	ldr	r2, [r4, #16]
 8006af6:	2a00      	cmp	r2, #0
 8006af8:	d189      	bne.n	8006a0e <HAL_UART_Transmit+0x3e>
 8006afa:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8006afc:	4690      	mov	r8, r2
 8006afe:	e786      	b.n	8006a0e <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8006b00:	2320      	movs	r3, #32
 8006b02:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8006b04:	2003      	movs	r0, #3
}
 8006b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b0a:	bf00      	nop

08006b0c <HAL_UART_Receive>:
{
 8006b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b10:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b12:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8006b16:	2820      	cmp	r0, #32
 8006b18:	d161      	bne.n	8006bde <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8006b1a:	4689      	mov	r9, r1
 8006b1c:	b109      	cbz	r1, 8006b22 <HAL_UART_Receive+0x16>
 8006b1e:	4617      	mov	r7, r2
 8006b20:	b912      	cbnz	r2, 8006b28 <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 8006b22:	2001      	movs	r0, #1
}
 8006b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b28:	2500      	movs	r5, #0
 8006b2a:	4698      	mov	r8, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b2c:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b32:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b36:	6625      	str	r5, [r4, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8006b38:	f7fc fa04 	bl	8002f44 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8006b3c:	f8a4 7058 	strh.w	r7, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006b40:	f8a4 705a 	strh.w	r7, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8006b44:	68a7      	ldr	r7, [r4, #8]
 8006b46:	f5b7 5f80 	cmp.w	r7, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8006b4a:	4606      	mov	r6, r0
    UART_MASK_COMPUTATION(huart);
 8006b4c:	f000 80f1 	beq.w	8006d32 <HAL_UART_Receive+0x226>
 8006b50:	2f00      	cmp	r7, #0
 8006b52:	f040 8108 	bne.w	8006d66 <HAL_UART_Receive+0x25a>
 8006b56:	6922      	ldr	r2, [r4, #16]
    uhMask = huart->Mask;
 8006b58:	2a00      	cmp	r2, #0
 8006b5a:	bf0c      	ite	eq
 8006b5c:	25ff      	moveq	r5, #255	@ 0xff
 8006b5e:	257f      	movne	r5, #127	@ 0x7f
    while (huart->RxXferCount > 0U)
 8006b60:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8006b64:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 8006b68:	fa1f f38c 	uxth.w	r3, ip
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d030      	beq.n	8006bd2 <HAL_UART_Receive+0xc6>
 8006b70:	6822      	ldr	r2, [r4, #0]
 8006b72:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006b76:	d135      	bne.n	8006be4 <HAL_UART_Receive+0xd8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b78:	69d1      	ldr	r1, [r2, #28]
 8006b7a:	0688      	lsls	r0, r1, #26
 8006b7c:	d414      	bmi.n	8006ba8 <HAL_UART_Receive+0x9c>
 8006b7e:	69d0      	ldr	r0, [r2, #28]
 8006b80:	0683      	lsls	r3, r0, #26
 8006b82:	d411      	bmi.n	8006ba8 <HAL_UART_Receive+0x9c>
 8006b84:	69d3      	ldr	r3, [r2, #28]
 8006b86:	0698      	lsls	r0, r3, #26
 8006b88:	d40e      	bmi.n	8006ba8 <HAL_UART_Receive+0x9c>
 8006b8a:	69d1      	ldr	r1, [r2, #28]
 8006b8c:	0689      	lsls	r1, r1, #26
 8006b8e:	d40b      	bmi.n	8006ba8 <HAL_UART_Receive+0x9c>
 8006b90:	69d0      	ldr	r0, [r2, #28]
 8006b92:	0683      	lsls	r3, r0, #26
 8006b94:	d408      	bmi.n	8006ba8 <HAL_UART_Receive+0x9c>
 8006b96:	69d3      	ldr	r3, [r2, #28]
 8006b98:	0698      	lsls	r0, r3, #26
 8006b9a:	d405      	bmi.n	8006ba8 <HAL_UART_Receive+0x9c>
 8006b9c:	69d1      	ldr	r1, [r2, #28]
 8006b9e:	0689      	lsls	r1, r1, #26
 8006ba0:	d402      	bmi.n	8006ba8 <HAL_UART_Receive+0x9c>
 8006ba2:	69d0      	ldr	r0, [r2, #28]
 8006ba4:	0683      	lsls	r3, r0, #26
 8006ba6:	d5e7      	bpl.n	8006b78 <HAL_UART_Receive+0x6c>
      if (pdata8bits == NULL)
 8006ba8:	f1b9 0f00 	cmp.w	r9, #0
 8006bac:	f000 80c8 	beq.w	8006d40 <HAL_UART_Receive+0x234>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006bb0:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8006bb2:	402a      	ands	r2, r5
 8006bb4:	f809 2b01 	strb.w	r2, [r9], #1
      huart->RxXferCount--;
 8006bb8:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	@ 0x5a
 8006bbc:	f10e 3cff 	add.w	ip, lr, #4294967295
 8006bc0:	fa1f f38c 	uxth.w	r3, ip
 8006bc4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006bc8:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
 8006bcc:	b288      	uxth	r0, r1
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d1ce      	bne.n	8006b70 <HAL_UART_Receive+0x64>
    huart->RxState = HAL_UART_STATE_READY;
 8006bd2:	2620      	movs	r6, #32
 8006bd4:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    return HAL_OK;
 8006bd8:	2000      	movs	r0, #0
}
 8006bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8006bde:	2002      	movs	r0, #2
}
 8006be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be4:	69d1      	ldr	r1, [r2, #28]
 8006be6:	0689      	lsls	r1, r1, #26
 8006be8:	d4de      	bmi.n	8006ba8 <HAL_UART_Receive+0x9c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bea:	f7fc f9ab 	bl	8002f44 <HAL_GetTick>
 8006bee:	1b80      	subs	r0, r0, r6
 8006bf0:	4580      	cmp	r8, r0
 8006bf2:	f0c0 8098 	bcc.w	8006d26 <HAL_UART_Receive+0x21a>
 8006bf6:	f1b8 0f00 	cmp.w	r8, #0
 8006bfa:	f000 8094 	beq.w	8006d26 <HAL_UART_Receive+0x21a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bfe:	6822      	ldr	r2, [r4, #0]
 8006c00:	6813      	ldr	r3, [r2, #0]
 8006c02:	0758      	lsls	r0, r3, #29
 8006c04:	d5ee      	bpl.n	8006be4 <HAL_UART_Receive+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c06:	69d1      	ldr	r1, [r2, #28]
 8006c08:	0709      	lsls	r1, r1, #28
 8006c0a:	f100 80ba 	bmi.w	8006d82 <HAL_UART_Receive+0x276>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c0e:	69d0      	ldr	r0, [r2, #28]
 8006c10:	0503      	lsls	r3, r0, #20
 8006c12:	d5e7      	bpl.n	8006be4 <HAL_UART_Receive+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c14:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8006c18:	6215      	str	r5, [r2, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	e852 6f00 	ldrex	r6, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c1e:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	e842 7300 	strex	r3, r7, [r2]
 8006c26:	b38b      	cbz	r3, 8006c8c <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	e852 1f00 	ldrex	r1, [r2]
 8006c2c:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	e842 0500 	strex	r5, r0, [r2]
 8006c34:	b355      	cbz	r5, 8006c8c <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	e852 6f00 	ldrex	r6, [r2]
 8006c3a:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	e842 7300 	strex	r3, r7, [r2]
 8006c42:	b31b      	cbz	r3, 8006c8c <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	e852 1f00 	ldrex	r1, [r2]
 8006c48:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	e842 0500 	strex	r5, r0, [r2]
 8006c50:	b1e5      	cbz	r5, 8006c8c <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	e852 6f00 	ldrex	r6, [r2]
 8006c56:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	e842 7300 	strex	r3, r7, [r2]
 8006c5e:	b1ab      	cbz	r3, 8006c8c <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	e852 1f00 	ldrex	r1, [r2]
 8006c64:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	e842 0500 	strex	r5, r0, [r2]
 8006c6c:	b175      	cbz	r5, 8006c8c <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	e852 6f00 	ldrex	r6, [r2]
 8006c72:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	e842 7300 	strex	r3, r7, [r2]
 8006c7a:	b13b      	cbz	r3, 8006c8c <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	e852 1f00 	ldrex	r1, [r2]
 8006c80:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	e842 0500 	strex	r5, r0, [r2]
 8006c88:	2d00      	cmp	r5, #0
 8006c8a:	d1c6      	bne.n	8006c1a <HAL_UART_Receive+0x10e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8c:	f102 0e08 	add.w	lr, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	e85e 6f00 	ldrex	r6, [lr]
 8006c94:	f026 0701 	bic.w	r7, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	e84e 7300 	strex	r3, r7, [lr]
 8006c9c:	b3ab      	cbz	r3, 8006d0a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	f102 0908 	add.w	r9, r2, #8
 8006ca2:	e859 1f00 	ldrex	r1, [r9]
 8006ca6:	f021 0601 	bic.w	r6, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	f102 0508 	add.w	r5, r2, #8
 8006cae:	e845 6000 	strex	r0, r6, [r5]
 8006cb2:	b350      	cbz	r0, 8006d0a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	e85e 7f00 	ldrex	r7, [lr]
 8006cb8:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	e84e 3100 	strex	r1, r3, [lr]
 8006cc0:	b319      	cbz	r1, 8006d0a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	e85e 6f00 	ldrex	r6, [lr]
 8006cc6:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	e84e 5000 	strex	r0, r5, [lr]
 8006cce:	b1e0      	cbz	r0, 8006d0a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	e85e 7f00 	ldrex	r7, [lr]
 8006cd4:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	e84e 3100 	strex	r1, r3, [lr]
 8006cdc:	b1a9      	cbz	r1, 8006d0a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	e85e 6f00 	ldrex	r6, [lr]
 8006ce2:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	e84e 5000 	strex	r0, r5, [lr]
 8006cea:	b170      	cbz	r0, 8006d0a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	e85e 7f00 	ldrex	r7, [lr]
 8006cf0:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	e84e 3100 	strex	r1, r3, [lr]
 8006cf8:	b139      	cbz	r1, 8006d0a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	e85e 6f00 	ldrex	r6, [lr]
 8006cfe:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	e84e 5000 	strex	r0, r5, [lr]
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d1c0      	bne.n	8006c8c <HAL_UART_Receive+0x180>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d0a:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8006d0c:	2f01      	cmp	r7, #1
 8006d0e:	f000 80c1 	beq.w	8006e94 <HAL_UART_Receive+0x388>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d12:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d1a:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1c:	6620      	str	r0, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006d1e:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d22:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d26:	2320      	movs	r3, #32
 8006d28:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8006d2c:	2003      	movs	r0, #3
}
 8006d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8006d32:	6920      	ldr	r0, [r4, #16]
 8006d34:	bb10      	cbnz	r0, 8006d7c <HAL_UART_Receive+0x270>
 8006d36:	464f      	mov	r7, r9
    uhMask = huart->Mask;
 8006d38:	f240 15ff 	movw	r5, #511	@ 0x1ff
      pdata8bits  = NULL;
 8006d3c:	4681      	mov	r9, r0
 8006d3e:	e70f      	b.n	8006b60 <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006d40:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 8006d42:	402b      	ands	r3, r5
 8006d44:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8006d48:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	@ 0x5a
 8006d4c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006d50:	b288      	uxth	r0, r1
 8006d52:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006d56:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	@ 0x5a
 8006d5a:	fa1f f38c 	uxth.w	r3, ip
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f47f af07 	bne.w	8006b72 <HAL_UART_Receive+0x66>
 8006d64:	e735      	b.n	8006bd2 <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 8006d66:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
    uhMask = huart->Mask;
 8006d6a:	462f      	mov	r7, r5
    UART_MASK_COMPUTATION(huart);
 8006d6c:	f47f aef8 	bne.w	8006b60 <HAL_UART_Receive+0x54>
 8006d70:	6921      	ldr	r1, [r4, #16]
    uhMask = huart->Mask;
 8006d72:	2900      	cmp	r1, #0
 8006d74:	bf14      	ite	ne
 8006d76:	253f      	movne	r5, #63	@ 0x3f
 8006d78:	257f      	moveq	r5, #127	@ 0x7f
 8006d7a:	e6f1      	b.n	8006b60 <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 8006d7c:	462f      	mov	r7, r5
    uhMask = huart->Mask;
 8006d7e:	25ff      	movs	r5, #255	@ 0xff
 8006d80:	e6ee      	b.n	8006b60 <HAL_UART_Receive+0x54>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d82:	2708      	movs	r7, #8
 8006d84:	6217      	str	r7, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	e852 8f00 	ldrex	r8, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d8a:	f428 7990 	bic.w	r9, r8, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	e842 9300 	strex	r3, r9, [r2]
 8006d92:	b38b      	cbz	r3, 8006df8 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	e852 1f00 	ldrex	r1, [r2]
 8006d98:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	e842 6500 	strex	r5, r6, [r2]
 8006da0:	b355      	cbz	r5, 8006df8 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	e852 0f00 	ldrex	r0, [r2]
 8006da6:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	e842 7300 	strex	r3, r7, [r2]
 8006dae:	b31b      	cbz	r3, 8006df8 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	e852 1f00 	ldrex	r1, [r2]
 8006db4:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	e842 6500 	strex	r5, r6, [r2]
 8006dbc:	b1e5      	cbz	r5, 8006df8 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	e852 0f00 	ldrex	r0, [r2]
 8006dc2:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	e842 7300 	strex	r3, r7, [r2]
 8006dca:	b1ab      	cbz	r3, 8006df8 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	e852 1f00 	ldrex	r1, [r2]
 8006dd0:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	e842 6500 	strex	r5, r6, [r2]
 8006dd8:	b175      	cbz	r5, 8006df8 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	e852 0f00 	ldrex	r0, [r2]
 8006dde:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	e842 7300 	strex	r3, r7, [r2]
 8006de6:	b13b      	cbz	r3, 8006df8 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	e852 1f00 	ldrex	r1, [r2]
 8006dec:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	e842 6500 	strex	r5, r6, [r2]
 8006df4:	2d00      	cmp	r5, #0
 8006df6:	d1c6      	bne.n	8006d86 <HAL_UART_Receive+0x27a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df8:	f102 0e08 	add.w	lr, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	e85e 0f00 	ldrex	r0, [lr]
 8006e00:	f020 0701 	bic.w	r7, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	e84e 7300 	strex	r3, r7, [lr]
 8006e08:	b3ab      	cbz	r3, 8006e76 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	f102 0908 	add.w	r9, r2, #8
 8006e0e:	e859 1f00 	ldrex	r1, [r9]
 8006e12:	f021 0601 	bic.w	r6, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	f102 0508 	add.w	r5, r2, #8
 8006e1a:	e845 6000 	strex	r0, r6, [r5]
 8006e1e:	b350      	cbz	r0, 8006e76 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	e85e 7f00 	ldrex	r7, [lr]
 8006e24:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	e84e 3100 	strex	r1, r3, [lr]
 8006e2c:	b319      	cbz	r1, 8006e76 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	e85e 6f00 	ldrex	r6, [lr]
 8006e32:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	e84e 5000 	strex	r0, r5, [lr]
 8006e3a:	b1e0      	cbz	r0, 8006e76 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	e85e 7f00 	ldrex	r7, [lr]
 8006e40:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	e84e 3100 	strex	r1, r3, [lr]
 8006e48:	b1a9      	cbz	r1, 8006e76 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	e85e 6f00 	ldrex	r6, [lr]
 8006e4e:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	e84e 5000 	strex	r0, r5, [lr]
 8006e56:	b170      	cbz	r0, 8006e76 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	e85e 7f00 	ldrex	r7, [lr]
 8006e5c:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	e84e 3100 	strex	r1, r3, [lr]
 8006e64:	b139      	cbz	r1, 8006e76 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	e85e 6f00 	ldrex	r6, [lr]
 8006e6a:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	e84e 5000 	strex	r0, r5, [lr]
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d1c0      	bne.n	8006df8 <HAL_UART_Receive+0x2ec>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e76:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8006e78:	2f01      	cmp	r7, #1
 8006e7a:	d053      	beq.n	8006f24 <HAL_UART_Receive+0x418>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7c:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006e7e:	2720      	movs	r7, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e80:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006e82:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006e86:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e88:	6620      	str	r0, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006e8a:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e8e:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8006e92:	e748      	b.n	8006d26 <HAL_UART_Receive+0x21a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	e852 ef00 	ldrex	lr, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e98:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	e842 c300 	strex	r3, ip, [r2]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f43f af36 	beq.w	8006d12 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	e852 1f00 	ldrex	r1, [r2]
 8006eaa:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	e842 6500 	strex	r5, r6, [r2]
 8006eb2:	2d00      	cmp	r5, #0
 8006eb4:	f43f af2d 	beq.w	8006d12 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	e852 0f00 	ldrex	r0, [r2]
 8006ebc:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	e842 7300 	strex	r3, r7, [r2]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f43f af24 	beq.w	8006d12 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eca:	e852 1f00 	ldrex	r1, [r2]
 8006ece:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	e842 6500 	strex	r5, r6, [r2]
 8006ed6:	2d00      	cmp	r5, #0
 8006ed8:	f43f af1b 	beq.w	8006d12 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	e852 0f00 	ldrex	r0, [r2]
 8006ee0:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	e842 7300 	strex	r3, r7, [r2]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f43f af12 	beq.w	8006d12 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	e852 1f00 	ldrex	r1, [r2]
 8006ef2:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	e842 6500 	strex	r5, r6, [r2]
 8006efa:	2d00      	cmp	r5, #0
 8006efc:	f43f af09 	beq.w	8006d12 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	e852 0f00 	ldrex	r0, [r2]
 8006f04:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	e842 7300 	strex	r3, r7, [r2]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f43f af00 	beq.w	8006d12 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	e852 1f00 	ldrex	r1, [r2]
 8006f16:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	e842 6500 	strex	r5, r6, [r2]
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	d1b8      	bne.n	8006e94 <HAL_UART_Receive+0x388>
 8006f22:	e6f6      	b.n	8006d12 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	e852 ef00 	ldrex	lr, [r2]
 8006f28:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	e842 c300 	strex	r3, ip, [r2]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0a3      	beq.n	8006e7c <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	e852 1f00 	ldrex	r1, [r2]
 8006f38:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	e842 6500 	strex	r5, r6, [r2]
 8006f40:	2d00      	cmp	r5, #0
 8006f42:	d09b      	beq.n	8006e7c <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	e852 0f00 	ldrex	r0, [r2]
 8006f48:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	e842 7300 	strex	r3, r7, [r2]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d093      	beq.n	8006e7c <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	e852 1f00 	ldrex	r1, [r2]
 8006f58:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	e842 6500 	strex	r5, r6, [r2]
 8006f60:	2d00      	cmp	r5, #0
 8006f62:	d08b      	beq.n	8006e7c <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	e852 0f00 	ldrex	r0, [r2]
 8006f68:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	e842 7300 	strex	r3, r7, [r2]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d083      	beq.n	8006e7c <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	e852 1f00 	ldrex	r1, [r2]
 8006f78:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	e842 6500 	strex	r5, r6, [r2]
 8006f80:	2d00      	cmp	r5, #0
 8006f82:	f43f af7b 	beq.w	8006e7c <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	e852 0f00 	ldrex	r0, [r2]
 8006f8a:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	e842 7300 	strex	r3, r7, [r2]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f43f af72 	beq.w	8006e7c <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	e852 1f00 	ldrex	r1, [r2]
 8006f9c:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	e842 6500 	strex	r5, r6, [r2]
 8006fa4:	2d00      	cmp	r5, #0
 8006fa6:	d1bd      	bne.n	8006f24 <HAL_UART_Receive+0x418>
 8006fa8:	e768      	b.n	8006e7c <HAL_UART_Receive+0x370>
 8006faa:	bf00      	nop

08006fac <UART_SetConfig>:
{
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fb0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fb2:	6882      	ldr	r2, [r0, #8]
 8006fb4:	6900      	ldr	r0, [r0, #16]
 8006fb6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fba:	4302      	orrs	r2, r0
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fc0:	4981      	ldr	r1, [pc, #516]	@ (80071c8 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fc2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fc4:	4029      	ands	r1, r5
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fce:	497f      	ldr	r1, [pc, #508]	@ (80071cc <UART_SetConfig+0x220>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fd0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006fd4:	432a      	orrs	r2, r5
 8006fd6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fd8:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fda:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fdc:	689d      	ldr	r5, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fde:	d040      	beq.n	8007062 <UART_SetConfig+0xb6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fe0:	f425 6130 	bic.w	r1, r5, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006fe4:	6a25      	ldr	r5, [r4, #32]
 8006fe6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fe8:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fea:	4979      	ldr	r1, [pc, #484]	@ (80071d0 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fec:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fee:	428b      	cmp	r3, r1
 8006ff0:	d115      	bne.n	800701e <UART_SetConfig+0x72>
 8006ff2:	4a78      	ldr	r2, [pc, #480]	@ (80071d4 <UART_SetConfig+0x228>)
 8006ff4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006ff8:	f003 0503 	and.w	r5, r3, #3
 8006ffc:	2d02      	cmp	r5, #2
 8006ffe:	f000 808e 	beq.w	800711e <UART_SetConfig+0x172>
 8007002:	2d03      	cmp	r5, #3
 8007004:	d078      	beq.n	80070f8 <UART_SetConfig+0x14c>
 8007006:	2d01      	cmp	r5, #1
 8007008:	d06e      	beq.n	80070e8 <UART_SetConfig+0x13c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800700a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800700e:	f000 80d0 	beq.w	80071b2 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007012:	f7fe fb3b 	bl	800568c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8007016:	2800      	cmp	r0, #0
 8007018:	d173      	bne.n	8007102 <UART_SetConfig+0x156>
        pclk = (uint32_t) HSI_VALUE;
 800701a:	2000      	movs	r0, #0
 800701c:	e01d      	b.n	800705a <UART_SetConfig+0xae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800701e:	4a6e      	ldr	r2, [pc, #440]	@ (80071d8 <UART_SetConfig+0x22c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d110      	bne.n	8007046 <UART_SetConfig+0x9a>
 8007024:	4d6b      	ldr	r5, [pc, #428]	@ (80071d4 <UART_SetConfig+0x228>)
 8007026:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800702a:	f001 0c0c 	and.w	ip, r1, #12
 800702e:	f1bc 0f0c 	cmp.w	ip, #12
 8007032:	d811      	bhi.n	8007058 <UART_SetConfig+0xac>
 8007034:	e8df f00c 	tbb	[pc, ip]
 8007038:	10101082 	.word	0x10101082
 800703c:	10101058 	.word	0x10101058
 8007040:	10101073 	.word	0x10101073
 8007044:	60          	.byte	0x60
 8007045:	00          	.byte	0x00
 8007046:	4d65      	ldr	r5, [pc, #404]	@ (80071dc <UART_SetConfig+0x230>)
 8007048:	42ab      	cmp	r3, r5
 800704a:	d07d      	beq.n	8007148 <UART_SetConfig+0x19c>
 800704c:	4964      	ldr	r1, [pc, #400]	@ (80071e0 <UART_SetConfig+0x234>)
 800704e:	428b      	cmp	r3, r1
 8007050:	d03f      	beq.n	80070d2 <UART_SetConfig+0x126>
 8007052:	4a64      	ldr	r2, [pc, #400]	@ (80071e4 <UART_SetConfig+0x238>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d067      	beq.n	8007128 <UART_SetConfig+0x17c>
        ret = HAL_ERROR;
 8007058:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800705a:	2200      	movs	r2, #0
 800705c:	e9c4 221a 	strd	r2, r2, [r4, #104]	@ 0x68
}
 8007060:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007062:	f425 6130 	bic.w	r1, r5, #2816	@ 0xb00
 8007066:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007068:	485a      	ldr	r0, [pc, #360]	@ (80071d4 <UART_SetConfig+0x228>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800706a:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800706c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8007070:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8007074:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8007078:	d07e      	beq.n	8007178 <UART_SetConfig+0x1cc>
 800707a:	d807      	bhi.n	800708c <UART_SetConfig+0xe0>
 800707c:	b322      	cbz	r2, 80070c8 <UART_SetConfig+0x11c>
 800707e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007082:	d1e9      	bne.n	8007058 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 8007084:	f7fd fec2 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007088:	b928      	cbnz	r0, 8007096 <UART_SetConfig+0xea>
 800708a:	e7c6      	b.n	800701a <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800708c:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8007090:	d1e2      	bne.n	8007058 <UART_SetConfig+0xac>
        pclk = (uint32_t) LSE_VALUE;
 8007092:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007096:	6862      	ldr	r2, [r4, #4]
 8007098:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800709c:	4285      	cmp	r5, r0
 800709e:	d8db      	bhi.n	8007058 <UART_SetConfig+0xac>
 80070a0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80070a4:	d8d8      	bhi.n	8007058 <UART_SetConfig+0xac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80070a6:	0851      	lsrs	r1, r2, #1
 80070a8:	2300      	movs	r3, #0
 80070aa:	f44f 7e80 	mov.w	lr, #256	@ 0x100
 80070ae:	468c      	mov	ip, r1
 80070b0:	4619      	mov	r1, r3
 80070b2:	fbe0 c10e 	umlal	ip, r1, r0, lr
 80070b6:	4660      	mov	r0, ip
 80070b8:	f7f9 f8ea 	bl	8000290 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070bc:	4b4a      	ldr	r3, [pc, #296]	@ (80071e8 <UART_SetConfig+0x23c>)
 80070be:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d8c8      	bhi.n	8007058 <UART_SetConfig+0xac>
 80070c6:	e027      	b.n	8007118 <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80070c8:	f7fe facc 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d1e2      	bne.n	8007096 <UART_SetConfig+0xea>
 80070d0:	e7a3      	b.n	800701a <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070d2:	4a40      	ldr	r2, [pc, #256]	@ (80071d4 <UART_SetConfig+0x228>)
 80070d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80070d8:	f003 05c0 	and.w	r5, r3, #192	@ 0xc0
 80070dc:	2d80      	cmp	r5, #128	@ 0x80
 80070de:	d01e      	beq.n	800711e <UART_SetConfig+0x172>
 80070e0:	d83f      	bhi.n	8007162 <UART_SetConfig+0x1b6>
 80070e2:	b35d      	cbz	r5, 800713c <UART_SetConfig+0x190>
 80070e4:	2d40      	cmp	r5, #64	@ 0x40
 80070e6:	d1b7      	bne.n	8007058 <UART_SetConfig+0xac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070e8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80070ec:	d069      	beq.n	80071c2 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetSysClockFreq();
 80070ee:	f7fd fe8d 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
        break;
 80070f2:	e790      	b.n	8007016 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070f4:	2b30      	cmp	r3, #48	@ 0x30
 80070f6:	d1af      	bne.n	8007058 <UART_SetConfig+0xac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070f8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80070fc:	d05e      	beq.n	80071bc <UART_SetConfig+0x210>
        pclk = (uint32_t) LSE_VALUE;
 80070fe:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007102:	6861      	ldr	r1, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007104:	f64f 7cef 	movw	ip, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007108:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 800710c:	fbb2 f0f1 	udiv	r0, r2, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007110:	f1a0 0310 	sub.w	r3, r0, #16
 8007114:	4563      	cmp	r3, ip
 8007116:	d89f      	bhi.n	8007058 <UART_SetConfig+0xac>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007118:	6825      	ldr	r5, [r4, #0]
 800711a:	60e8      	str	r0, [r5, #12]
 800711c:	e77d      	b.n	800701a <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800711e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007122:	d049      	beq.n	80071b8 <UART_SetConfig+0x20c>
        pclk = (uint32_t) HSI_VALUE;
 8007124:	4831      	ldr	r0, [pc, #196]	@ (80071ec <UART_SetConfig+0x240>)
 8007126:	e7ec      	b.n	8007102 <UART_SetConfig+0x156>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007128:	4b2a      	ldr	r3, [pc, #168]	@ (80071d4 <UART_SetConfig+0x228>)
 800712a:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 800712e:	f405 7140 	and.w	r1, r5, #768	@ 0x300
 8007132:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007136:	d0f2      	beq.n	800711e <UART_SetConfig+0x172>
 8007138:	d81a      	bhi.n	8007170 <UART_SetConfig+0x1c4>
 800713a:	b9a9      	cbnz	r1, 8007168 <UART_SetConfig+0x1bc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800713c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007140:	d01c      	beq.n	800717c <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007142:	f7fe fa8f 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
        break;
 8007146:	e766      	b.n	8007016 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007148:	4922      	ldr	r1, [pc, #136]	@ (80071d4 <UART_SetConfig+0x228>)
 800714a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800714e:	f002 0330 	and.w	r3, r2, #48	@ 0x30
 8007152:	2b20      	cmp	r3, #32
 8007154:	d0e3      	beq.n	800711e <UART_SetConfig+0x172>
 8007156:	d8cd      	bhi.n	80070f4 <UART_SetConfig+0x148>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0ef      	beq.n	800713c <UART_SetConfig+0x190>
 800715c:	2b10      	cmp	r3, #16
 800715e:	d0c3      	beq.n	80070e8 <UART_SetConfig+0x13c>
 8007160:	e77a      	b.n	8007058 <UART_SetConfig+0xac>
 8007162:	2dc0      	cmp	r5, #192	@ 0xc0
 8007164:	d0c8      	beq.n	80070f8 <UART_SetConfig+0x14c>
 8007166:	e777      	b.n	8007058 <UART_SetConfig+0xac>
 8007168:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800716c:	d0bc      	beq.n	80070e8 <UART_SetConfig+0x13c>
 800716e:	e773      	b.n	8007058 <UART_SetConfig+0xac>
 8007170:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8007174:	d0c0      	beq.n	80070f8 <UART_SetConfig+0x14c>
 8007176:	e76f      	b.n	8007058 <UART_SetConfig+0xac>
        pclk = (uint32_t) HSI_VALUE;
 8007178:	481c      	ldr	r0, [pc, #112]	@ (80071ec <UART_SetConfig+0x240>)
 800717a:	e78c      	b.n	8007096 <UART_SetConfig+0xea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800717c:	f7fe fa72 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007180:	2800      	cmp	r0, #0
 8007182:	f43f af4a 	beq.w	800701a <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007186:	0040      	lsls	r0, r0, #1
 8007188:	6861      	ldr	r1, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800718a:	f64f 7cef 	movw	ip, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800718e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8007192:	fbb0 f3f1 	udiv	r3, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007196:	f1a3 0210 	sub.w	r2, r3, #16
 800719a:	4562      	cmp	r2, ip
 800719c:	f63f af5c 	bhi.w	8007058 <UART_SetConfig+0xac>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071a0:	f023 050f 	bic.w	r5, r3, #15
        huart->Instance->BRR = brrtemp;
 80071a4:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071a6:	b2a8      	uxth	r0, r5
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071a8:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80071ac:	4303      	orrs	r3, r0
 80071ae:	60cb      	str	r3, [r1, #12]
 80071b0:	e733      	b.n	800701a <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80071b2:	f7fe fa6b 	bl	800568c <HAL_RCC_GetPCLK2Freq>
        break;
 80071b6:	e7e3      	b.n	8007180 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b8:	480d      	ldr	r0, [pc, #52]	@ (80071f0 <UART_SetConfig+0x244>)
 80071ba:	e7e5      	b.n	8007188 <UART_SetConfig+0x1dc>
 80071bc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80071c0:	e7e2      	b.n	8007188 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetSysClockFreq();
 80071c2:	f7fd fe23 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
        break;
 80071c6:	e7db      	b.n	8007180 <UART_SetConfig+0x1d4>
 80071c8:	efff69f3 	.word	0xefff69f3
 80071cc:	40008000 	.word	0x40008000
 80071d0:	40013800 	.word	0x40013800
 80071d4:	40021000 	.word	0x40021000
 80071d8:	40004400 	.word	0x40004400
 80071dc:	40004800 	.word	0x40004800
 80071e0:	40004c00 	.word	0x40004c00
 80071e4:	40005000 	.word	0x40005000
 80071e8:	000ffcff 	.word	0x000ffcff
 80071ec:	00f42400 	.word	0x00f42400
 80071f0:	01e84800 	.word	0x01e84800

080071f4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071f4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80071f6:	071a      	lsls	r2, r3, #28
{
 80071f8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071fa:	d506      	bpl.n	800720a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071fc:	6801      	ldr	r1, [r0, #0]
 80071fe:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007200:	684a      	ldr	r2, [r1, #4]
 8007202:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007206:	4322      	orrs	r2, r4
 8007208:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800720a:	07dc      	lsls	r4, r3, #31
 800720c:	d506      	bpl.n	800721c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800720e:	6801      	ldr	r1, [r0, #0]
 8007210:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8007212:	684a      	ldr	r2, [r1, #4]
 8007214:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007218:	4322      	orrs	r2, r4
 800721a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800721c:	0799      	lsls	r1, r3, #30
 800721e:	d506      	bpl.n	800722e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007220:	6801      	ldr	r1, [r0, #0]
 8007222:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8007224:	684a      	ldr	r2, [r1, #4]
 8007226:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800722a:	4322      	orrs	r2, r4
 800722c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800722e:	075a      	lsls	r2, r3, #29
 8007230:	d506      	bpl.n	8007240 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007232:	6801      	ldr	r1, [r0, #0]
 8007234:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007236:	684a      	ldr	r2, [r1, #4]
 8007238:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800723c:	4322      	orrs	r2, r4
 800723e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007240:	06dc      	lsls	r4, r3, #27
 8007242:	d506      	bpl.n	8007252 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007244:	6801      	ldr	r1, [r0, #0]
 8007246:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007248:	688a      	ldr	r2, [r1, #8]
 800724a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800724e:	4322      	orrs	r2, r4
 8007250:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007252:	0699      	lsls	r1, r3, #26
 8007254:	d506      	bpl.n	8007264 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007256:	6801      	ldr	r1, [r0, #0]
 8007258:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800725a:	688a      	ldr	r2, [r1, #8]
 800725c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007260:	4322      	orrs	r2, r4
 8007262:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007264:	065a      	lsls	r2, r3, #25
 8007266:	d509      	bpl.n	800727c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007268:	6801      	ldr	r1, [r0, #0]
 800726a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800726c:	684a      	ldr	r2, [r1, #4]
 800726e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007272:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007274:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007278:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800727a:	d00b      	beq.n	8007294 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800727c:	061b      	lsls	r3, r3, #24
 800727e:	d506      	bpl.n	800728e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007280:	6804      	ldr	r4, [r0, #0]
 8007282:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8007284:	6863      	ldr	r3, [r4, #4]
 8007286:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800728a:	4301      	orrs	r1, r0
 800728c:	6061      	str	r1, [r4, #4]
}
 800728e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007292:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007294:	684a      	ldr	r2, [r1, #4]
 8007296:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007298:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800729c:	4322      	orrs	r2, r4
 800729e:	604a      	str	r2, [r1, #4]
 80072a0:	e7ec      	b.n	800727c <UART_AdvFeatureConfig+0x88>
 80072a2:	bf00      	nop

080072a4 <UART_CheckIdleState>:
{
 80072a4:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a6:	2300      	movs	r3, #0
{
 80072a8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072aa:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80072ae:	f7fb fe49 	bl	8002f44 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072b2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80072b4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072b6:	6810      	ldr	r0, [r2, #0]
 80072b8:	0703      	lsls	r3, r0, #28
 80072ba:	d40e      	bmi.n	80072da <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072bc:	6811      	ldr	r1, [r2, #0]
 80072be:	0749      	lsls	r1, r1, #29
 80072c0:	d462      	bmi.n	8007388 <UART_CheckIdleState+0xe4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80072c4:	2120      	movs	r1, #32
 80072c6:	67e1      	str	r1, [r4, #124]	@ 0x7c
  return HAL_OK;
 80072c8:	4628      	mov	r0, r5
  huart->RxState = HAL_UART_STATE_READY;
 80072ca:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ce:	6625      	str	r5, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072d0:	6665      	str	r5, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 80072d2:	2200      	movs	r2, #0
 80072d4:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
}
 80072d8:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072da:	69d1      	ldr	r1, [r2, #28]
 80072dc:	0288      	lsls	r0, r1, #10
 80072de:	d4ed      	bmi.n	80072bc <UART_CheckIdleState+0x18>
 80072e0:	e00e      	b.n	8007300 <UART_CheckIdleState+0x5c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	0741      	lsls	r1, r0, #29
 80072e6:	461a      	mov	r2, r3
 80072e8:	d507      	bpl.n	80072fa <UART_CheckIdleState+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072ea:	69d9      	ldr	r1, [r3, #28]
 80072ec:	0708      	lsls	r0, r1, #28
 80072ee:	f100 80e0 	bmi.w	80074b2 <UART_CheckIdleState+0x20e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072f2:	69d8      	ldr	r0, [r3, #28]
 80072f4:	0501      	lsls	r1, r0, #20
 80072f6:	f100 81a6 	bmi.w	8007646 <UART_CheckIdleState+0x3a2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	0298      	lsls	r0, r3, #10
 80072fe:	d4dd      	bmi.n	80072bc <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007300:	f7fb fe20 	bl	8002f44 <HAL_GetTick>
 8007304:	1b42      	subs	r2, r0, r5
 8007306:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800730a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730c:	d3e9      	bcc.n	80072e2 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	e853 ef00 	ldrex	lr, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007312:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	e843 c200 	strex	r2, ip, [r3]
 800731a:	b38a      	cbz	r2, 8007380 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	e853 5f00 	ldrex	r5, [r3]
 8007320:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	e843 0100 	strex	r1, r0, [r3]
 8007328:	b351      	cbz	r1, 8007380 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	e853 ef00 	ldrex	lr, [r3]
 800732e:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	e843 c200 	strex	r2, ip, [r3]
 8007336:	b31a      	cbz	r2, 8007380 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	e853 5f00 	ldrex	r5, [r3]
 800733c:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	e843 0100 	strex	r1, r0, [r3]
 8007344:	b1e1      	cbz	r1, 8007380 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007346:	e853 ef00 	ldrex	lr, [r3]
 800734a:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	e843 c200 	strex	r2, ip, [r3]
 8007352:	b1aa      	cbz	r2, 8007380 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	e853 5f00 	ldrex	r5, [r3]
 8007358:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	e843 0100 	strex	r1, r0, [r3]
 8007360:	b171      	cbz	r1, 8007380 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	e853 ef00 	ldrex	lr, [r3]
 8007366:	f02e 0c80 	bic.w	ip, lr, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	e843 c200 	strex	r2, ip, [r3]
 800736e:	b13a      	cbz	r2, 8007380 <UART_CheckIdleState+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	e853 5f00 	ldrex	r5, [r3]
 8007374:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	e843 0100 	strex	r1, r0, [r3]
 800737c:	2900      	cmp	r1, #0
 800737e:	d1c6      	bne.n	800730e <UART_CheckIdleState+0x6a>
      huart->gState = HAL_UART_STATE_READY;
 8007380:	2320      	movs	r3, #32
 8007382:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8007384:	2003      	movs	r0, #3
 8007386:	e7a4      	b.n	80072d2 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007388:	69d2      	ldr	r2, [r2, #28]
 800738a:	0253      	lsls	r3, r2, #9
 800738c:	d499      	bmi.n	80072c2 <UART_CheckIdleState+0x1e>
 800738e:	e00d      	b.n	80073ac <UART_CheckIdleState+0x108>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007390:	6819      	ldr	r1, [r3, #0]
 8007392:	0748      	lsls	r0, r1, #29
 8007394:	d507      	bpl.n	80073a6 <UART_CheckIdleState+0x102>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	0711      	lsls	r1, r2, #28
 800739a:	f100 821e 	bmi.w	80077da <UART_CheckIdleState+0x536>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800739e:	69d8      	ldr	r0, [r3, #28]
 80073a0:	0502      	lsls	r2, r0, #20
 80073a2:	f100 82e4 	bmi.w	800796e <UART_CheckIdleState+0x6ca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	025b      	lsls	r3, r3, #9
 80073aa:	d48a      	bmi.n	80072c2 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ac:	f7fb fdca 	bl	8002f44 <HAL_GetTick>
 80073b0:	1b40      	subs	r0, r0, r5
 80073b2:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	d3ea      	bcc.n	8007390 <UART_CheckIdleState+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	e853 ef00 	ldrex	lr, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073be:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	e843 c200 	strex	r2, ip, [r3]
 80073c6:	b38a      	cbz	r2, 800742c <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	e853 5f00 	ldrex	r5, [r3]
 80073cc:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	e843 0100 	strex	r1, r0, [r3]
 80073d4:	b351      	cbz	r1, 800742c <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	e853 ef00 	ldrex	lr, [r3]
 80073da:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	e843 c200 	strex	r2, ip, [r3]
 80073e2:	b31a      	cbz	r2, 800742c <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	e853 5f00 	ldrex	r5, [r3]
 80073e8:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	e843 0100 	strex	r1, r0, [r3]
 80073f0:	b1e1      	cbz	r1, 800742c <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	e853 ef00 	ldrex	lr, [r3]
 80073f6:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	e843 c200 	strex	r2, ip, [r3]
 80073fe:	b1aa      	cbz	r2, 800742c <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007400:	e853 5f00 	ldrex	r5, [r3]
 8007404:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	e843 0100 	strex	r1, r0, [r3]
 800740c:	b171      	cbz	r1, 800742c <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	e853 ef00 	ldrex	lr, [r3]
 8007412:	f42e 7c90 	bic.w	ip, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	e843 c200 	strex	r2, ip, [r3]
 800741a:	b13a      	cbz	r2, 800742c <UART_CheckIdleState+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	e853 5f00 	ldrex	r5, [r3]
 8007420:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	e843 0100 	strex	r1, r0, [r3]
 8007428:	2900      	cmp	r1, #0
 800742a:	d1c6      	bne.n	80073ba <UART_CheckIdleState+0x116>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742c:	f103 0e08 	add.w	lr, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	e85e 2f00 	ldrex	r2, [lr]
 8007434:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	e84e 1000 	strex	r0, r1, [lr]
 800743c:	b3a8      	cbz	r0, 80074aa <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	f103 0c08 	add.w	ip, r3, #8
 8007442:	e85c 2f00 	ldrex	r2, [ip]
 8007446:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	f103 0508 	add.w	r5, r3, #8
 800744e:	e845 1000 	strex	r0, r1, [r5]
 8007452:	b350      	cbz	r0, 80074aa <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	e85e 2f00 	ldrex	r2, [lr]
 8007458:	f022 0c01 	bic.w	ip, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	e84e c100 	strex	r1, ip, [lr]
 8007460:	b319      	cbz	r1, 80074aa <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	e85e 5f00 	ldrex	r5, [lr]
 8007466:	f025 0201 	bic.w	r2, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	e84e 2000 	strex	r0, r2, [lr]
 800746e:	b1e0      	cbz	r0, 80074aa <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	e85e cf00 	ldrex	ip, [lr]
 8007474:	f02c 0101 	bic.w	r1, ip, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	e84e 1500 	strex	r5, r1, [lr]
 800747c:	b1ad      	cbz	r5, 80074aa <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	e85e 2f00 	ldrex	r2, [lr]
 8007482:	f022 0c01 	bic.w	ip, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	e84e c000 	strex	r0, ip, [lr]
 800748a:	b170      	cbz	r0, 80074aa <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	e85e 1f00 	ldrex	r1, [lr]
 8007490:	f021 0501 	bic.w	r5, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	e84e 5200 	strex	r2, r5, [lr]
 8007498:	b13a      	cbz	r2, 80074aa <UART_CheckIdleState+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	e85e 0f00 	ldrex	r0, [lr]
 800749e:	f020 0c01 	bic.w	ip, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	e84e c100 	strex	r1, ip, [lr]
 80074a6:	2900      	cmp	r1, #0
 80074a8:	d1c0      	bne.n	800742c <UART_CheckIdleState+0x188>
      huart->RxState = HAL_UART_STATE_READY;
 80074aa:	2320      	movs	r3, #32
 80074ac:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 80074b0:	e768      	b.n	8007384 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074b2:	2108      	movs	r1, #8
 80074b4:	6219      	str	r1, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	e853 cf00 	ldrex	ip, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ba:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	e843 e200 	strex	r2, lr, [r3]
 80074c2:	b38a      	cbz	r2, 8007528 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	e853 5f00 	ldrex	r5, [r3]
 80074c8:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	e843 0100 	strex	r1, r0, [r3]
 80074d0:	b351      	cbz	r1, 8007528 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	e853 cf00 	ldrex	ip, [r3]
 80074d6:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	e843 e200 	strex	r2, lr, [r3]
 80074de:	b31a      	cbz	r2, 8007528 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	e853 5f00 	ldrex	r5, [r3]
 80074e4:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	e843 0100 	strex	r1, r0, [r3]
 80074ec:	b1e1      	cbz	r1, 8007528 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	e853 cf00 	ldrex	ip, [r3]
 80074f2:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	e843 e200 	strex	r2, lr, [r3]
 80074fa:	b1aa      	cbz	r2, 8007528 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	e853 5f00 	ldrex	r5, [r3]
 8007500:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	e843 0100 	strex	r1, r0, [r3]
 8007508:	b171      	cbz	r1, 8007528 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	e853 cf00 	ldrex	ip, [r3]
 800750e:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	e843 e200 	strex	r2, lr, [r3]
 8007516:	b13a      	cbz	r2, 8007528 <UART_CheckIdleState+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	e853 5f00 	ldrex	r5, [r3]
 800751c:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	e843 0100 	strex	r1, r0, [r3]
 8007524:	2900      	cmp	r1, #0
 8007526:	d1c6      	bne.n	80074b6 <UART_CheckIdleState+0x212>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007528:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	e85c 2f00 	ldrex	r2, [ip]
 8007530:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	e84c 1000 	strex	r0, r1, [ip]
 8007538:	b3a8      	cbz	r0, 80075a6 <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	f103 0e08 	add.w	lr, r3, #8
 800753e:	e85e 2f00 	ldrex	r2, [lr]
 8007542:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007546:	f103 0508 	add.w	r5, r3, #8
 800754a:	e845 1000 	strex	r0, r1, [r5]
 800754e:	b350      	cbz	r0, 80075a6 <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	e85c 2f00 	ldrex	r2, [ip]
 8007554:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	e84c e100 	strex	r1, lr, [ip]
 800755c:	b319      	cbz	r1, 80075a6 <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	e85c 5f00 	ldrex	r5, [ip]
 8007562:	f025 0201 	bic.w	r2, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	e84c 2000 	strex	r0, r2, [ip]
 800756a:	b1e0      	cbz	r0, 80075a6 <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	e85c ef00 	ldrex	lr, [ip]
 8007570:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	e84c 1500 	strex	r5, r1, [ip]
 8007578:	b1ad      	cbz	r5, 80075a6 <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	e85c 2f00 	ldrex	r2, [ip]
 800757e:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	e84c e000 	strex	r0, lr, [ip]
 8007586:	b170      	cbz	r0, 80075a6 <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	e85c 1f00 	ldrex	r1, [ip]
 800758c:	f021 0501 	bic.w	r5, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	e84c 5200 	strex	r2, r5, [ip]
 8007594:	b13a      	cbz	r2, 80075a6 <UART_CheckIdleState+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	e85c 0f00 	ldrex	r0, [ip]
 800759a:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	e84c e100 	strex	r1, lr, [ip]
 80075a2:	2900      	cmp	r1, #0
 80075a4:	d1c0      	bne.n	8007528 <UART_CheckIdleState+0x284>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a6:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80075a8:	2d01      	cmp	r5, #1
 80075aa:	d00b      	beq.n	80075c4 <UART_CheckIdleState+0x320>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ac:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 80075ae:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075b0:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80075b2:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80075b6:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b8:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80075ba:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075be:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 80075c2:	e6a4      	b.n	800730e <UART_CheckIdleState+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	e853 cf00 	ldrex	ip, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c8:	f02c 0210 	bic.w	r2, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	e843 2000 	strex	r0, r2, [r3]
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d0eb      	beq.n	80075ac <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	e853 1f00 	ldrex	r1, [r3]
 80075d8:	f021 0510 	bic.w	r5, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	e843 5200 	strex	r2, r5, [r3]
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	d0e3      	beq.n	80075ac <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	e853 0f00 	ldrex	r0, [r3]
 80075e8:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	e843 5100 	strex	r1, r5, [r3]
 80075f0:	2900      	cmp	r1, #0
 80075f2:	d0db      	beq.n	80075ac <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	e853 ef00 	ldrex	lr, [r3]
 80075f8:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	e843 c200 	strex	r2, ip, [r3]
 8007600:	2a00      	cmp	r2, #0
 8007602:	d0d3      	beq.n	80075ac <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	e853 0f00 	ldrex	r0, [r3]
 8007608:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	e843 5100 	strex	r1, r5, [r3]
 8007610:	2900      	cmp	r1, #0
 8007612:	d0cb      	beq.n	80075ac <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	e853 ef00 	ldrex	lr, [r3]
 8007618:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	e843 c200 	strex	r2, ip, [r3]
 8007620:	2a00      	cmp	r2, #0
 8007622:	d0c3      	beq.n	80075ac <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	e853 0f00 	ldrex	r0, [r3]
 8007628:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	e843 5100 	strex	r1, r5, [r3]
 8007630:	2900      	cmp	r1, #0
 8007632:	d0bb      	beq.n	80075ac <UART_CheckIdleState+0x308>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	e853 ef00 	ldrex	lr, [r3]
 8007638:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	e843 c200 	strex	r2, ip, [r3]
 8007640:	2a00      	cmp	r2, #0
 8007642:	d1bf      	bne.n	80075c4 <UART_CheckIdleState+0x320>
 8007644:	e7b2      	b.n	80075ac <UART_CheckIdleState+0x308>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007646:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800764a:	621d      	str	r5, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	e853 ef00 	ldrex	lr, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007650:	f42e 7290 	bic.w	r2, lr, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	e843 2000 	strex	r0, r2, [r3]
 8007658:	b388      	cbz	r0, 80076be <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	e853 1f00 	ldrex	r1, [r3]
 800765e:	f421 7590 	bic.w	r5, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	e843 5200 	strex	r2, r5, [r3]
 8007666:	b352      	cbz	r2, 80076be <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	e853 0f00 	ldrex	r0, [r3]
 800766c:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	e843 5100 	strex	r1, r5, [r3]
 8007674:	b319      	cbz	r1, 80076be <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	e853 cf00 	ldrex	ip, [r3]
 800767a:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	e843 e200 	strex	r2, lr, [r3]
 8007682:	b1e2      	cbz	r2, 80076be <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	e853 0f00 	ldrex	r0, [r3]
 8007688:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	e843 5100 	strex	r1, r5, [r3]
 8007690:	b1a9      	cbz	r1, 80076be <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007692:	e853 cf00 	ldrex	ip, [r3]
 8007696:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	e843 e200 	strex	r2, lr, [r3]
 800769e:	b172      	cbz	r2, 80076be <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	e853 0f00 	ldrex	r0, [r3]
 80076a4:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	e843 5100 	strex	r1, r5, [r3]
 80076ac:	b139      	cbz	r1, 80076be <UART_CheckIdleState+0x41a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	e853 cf00 	ldrex	ip, [r3]
 80076b2:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	e843 e200 	strex	r2, lr, [r3]
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	d1c6      	bne.n	800764c <UART_CheckIdleState+0x3a8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076be:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	e85c 5f00 	ldrex	r5, [ip]
 80076c6:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	e84c 1200 	strex	r2, r1, [ip]
 80076ce:	b3aa      	cbz	r2, 800773c <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d0:	f103 0008 	add.w	r0, r3, #8
 80076d4:	e850 5f00 	ldrex	r5, [r0]
 80076d8:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	f103 0e08 	add.w	lr, r3, #8
 80076e0:	e84e 1200 	strex	r2, r1, [lr]
 80076e4:	b352      	cbz	r2, 800773c <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	e85c 0f00 	ldrex	r0, [ip]
 80076ea:	f020 0501 	bic.w	r5, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	e84c 5100 	strex	r1, r5, [ip]
 80076f2:	b319      	cbz	r1, 800773c <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	e85c 2f00 	ldrex	r2, [ip]
 80076f8:	f022 0501 	bic.w	r5, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	e84c 5000 	strex	r0, r5, [ip]
 8007700:	b1e0      	cbz	r0, 800773c <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	e85c ef00 	ldrex	lr, [ip]
 8007706:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	e84c 1200 	strex	r2, r1, [ip]
 800770e:	b1aa      	cbz	r2, 800773c <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	e85c 5f00 	ldrex	r5, [ip]
 8007714:	f025 0e01 	bic.w	lr, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	e84c e000 	strex	r0, lr, [ip]
 800771c:	b170      	cbz	r0, 800773c <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	e85c 1f00 	ldrex	r1, [ip]
 8007722:	f021 0201 	bic.w	r2, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	e84c 2500 	strex	r5, r2, [ip]
 800772a:	b13d      	cbz	r5, 800773c <UART_CheckIdleState+0x498>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	e85c 0f00 	ldrex	r0, [ip]
 8007730:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	e84c e100 	strex	r1, lr, [ip]
 8007738:	2900      	cmp	r1, #0
 800773a:	d1c0      	bne.n	80076be <UART_CheckIdleState+0x41a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800773e:	2a01      	cmp	r2, #1
 8007740:	d00a      	beq.n	8007758 <UART_CheckIdleState+0x4b4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007742:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007744:	2020      	movs	r0, #32
 8007746:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 800774a:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774c:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 800774e:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007752:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8007756:	e5da      	b.n	800730e <UART_CheckIdleState+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	e853 5f00 	ldrex	r5, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800775c:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	e843 0100 	strex	r1, r0, [r3]
 8007764:	2900      	cmp	r1, #0
 8007766:	d0ec      	beq.n	8007742 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	e853 cf00 	ldrex	ip, [r3]
 800776c:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	e843 e200 	strex	r2, lr, [r3]
 8007774:	2a00      	cmp	r2, #0
 8007776:	d0e4      	beq.n	8007742 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	e853 5f00 	ldrex	r5, [r3]
 800777c:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	e843 0100 	strex	r1, r0, [r3]
 8007784:	2900      	cmp	r1, #0
 8007786:	d0dc      	beq.n	8007742 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	e853 cf00 	ldrex	ip, [r3]
 800778c:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	e843 e200 	strex	r2, lr, [r3]
 8007794:	2a00      	cmp	r2, #0
 8007796:	d0d4      	beq.n	8007742 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	e853 5f00 	ldrex	r5, [r3]
 800779c:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	e843 0100 	strex	r1, r0, [r3]
 80077a4:	2900      	cmp	r1, #0
 80077a6:	d0cc      	beq.n	8007742 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	e853 cf00 	ldrex	ip, [r3]
 80077ac:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b0:	e843 e200 	strex	r2, lr, [r3]
 80077b4:	2a00      	cmp	r2, #0
 80077b6:	d0c4      	beq.n	8007742 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	e853 5f00 	ldrex	r5, [r3]
 80077bc:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	e843 0100 	strex	r1, r0, [r3]
 80077c4:	2900      	cmp	r1, #0
 80077c6:	d0bc      	beq.n	8007742 <UART_CheckIdleState+0x49e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	e853 cf00 	ldrex	ip, [r3]
 80077cc:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	e843 e200 	strex	r2, lr, [r3]
 80077d4:	2a00      	cmp	r2, #0
 80077d6:	d1bf      	bne.n	8007758 <UART_CheckIdleState+0x4b4>
 80077d8:	e7b3      	b.n	8007742 <UART_CheckIdleState+0x49e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077da:	2108      	movs	r1, #8
 80077dc:	6219      	str	r1, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	e853 cf00 	ldrex	ip, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077e2:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	e843 e200 	strex	r2, lr, [r3]
 80077ea:	b38a      	cbz	r2, 8007850 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ec:	e853 5f00 	ldrex	r5, [r3]
 80077f0:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	e843 0100 	strex	r1, r0, [r3]
 80077f8:	b351      	cbz	r1, 8007850 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	e853 cf00 	ldrex	ip, [r3]
 80077fe:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	e843 e200 	strex	r2, lr, [r3]
 8007806:	b31a      	cbz	r2, 8007850 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	e853 5f00 	ldrex	r5, [r3]
 800780c:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	e843 0100 	strex	r1, r0, [r3]
 8007814:	b1e1      	cbz	r1, 8007850 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	e853 cf00 	ldrex	ip, [r3]
 800781a:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	e843 e200 	strex	r2, lr, [r3]
 8007822:	b1aa      	cbz	r2, 8007850 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	e853 5f00 	ldrex	r5, [r3]
 8007828:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	e843 0100 	strex	r1, r0, [r3]
 8007830:	b171      	cbz	r1, 8007850 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	e853 cf00 	ldrex	ip, [r3]
 8007836:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	e843 e200 	strex	r2, lr, [r3]
 800783e:	b13a      	cbz	r2, 8007850 <UART_CheckIdleState+0x5ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	e853 5f00 	ldrex	r5, [r3]
 8007844:	f425 7090 	bic.w	r0, r5, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	e843 0100 	strex	r1, r0, [r3]
 800784c:	2900      	cmp	r1, #0
 800784e:	d1c6      	bne.n	80077de <UART_CheckIdleState+0x53a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007850:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	e85c 2f00 	ldrex	r2, [ip]
 8007858:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	e84c 1000 	strex	r0, r1, [ip]
 8007860:	b3a8      	cbz	r0, 80078ce <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	f103 0e08 	add.w	lr, r3, #8
 8007866:	e85e 2f00 	ldrex	r2, [lr]
 800786a:	f022 0101 	bic.w	r1, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	f103 0508 	add.w	r5, r3, #8
 8007872:	e845 1000 	strex	r0, r1, [r5]
 8007876:	b350      	cbz	r0, 80078ce <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	e85c 2f00 	ldrex	r2, [ip]
 800787c:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	e84c e100 	strex	r1, lr, [ip]
 8007884:	b319      	cbz	r1, 80078ce <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	e85c 5f00 	ldrex	r5, [ip]
 800788a:	f025 0201 	bic.w	r2, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	e84c 2000 	strex	r0, r2, [ip]
 8007892:	b1e0      	cbz	r0, 80078ce <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	e85c ef00 	ldrex	lr, [ip]
 8007898:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	e84c 1500 	strex	r5, r1, [ip]
 80078a0:	b1ad      	cbz	r5, 80078ce <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	e85c 2f00 	ldrex	r2, [ip]
 80078a6:	f022 0e01 	bic.w	lr, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	e84c e000 	strex	r0, lr, [ip]
 80078ae:	b170      	cbz	r0, 80078ce <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	e85c 1f00 	ldrex	r1, [ip]
 80078b4:	f021 0501 	bic.w	r5, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	e84c 5200 	strex	r2, r5, [ip]
 80078bc:	b13a      	cbz	r2, 80078ce <UART_CheckIdleState+0x62a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	e85c 0f00 	ldrex	r0, [ip]
 80078c2:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	e84c e100 	strex	r1, lr, [ip]
 80078ca:	2900      	cmp	r1, #0
 80078cc:	d1c0      	bne.n	8007850 <UART_CheckIdleState+0x5ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ce:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80078d0:	2d01      	cmp	r5, #1
 80078d2:	d00b      	beq.n	80078ec <UART_CheckIdleState+0x648>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d4:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 80078d6:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078d8:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80078da:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80078de:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e0:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80078e2:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078e6:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 80078ea:	e566      	b.n	80073ba <UART_CheckIdleState+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	e853 cf00 	ldrex	ip, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f0:	f02c 0210 	bic.w	r2, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	e843 2000 	strex	r0, r2, [r3]
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d0eb      	beq.n	80078d4 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	e853 1f00 	ldrex	r1, [r3]
 8007900:	f021 0510 	bic.w	r5, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	e843 5200 	strex	r2, r5, [r3]
 8007908:	2a00      	cmp	r2, #0
 800790a:	d0e3      	beq.n	80078d4 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	e853 0f00 	ldrex	r0, [r3]
 8007910:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	e843 5100 	strex	r1, r5, [r3]
 8007918:	2900      	cmp	r1, #0
 800791a:	d0db      	beq.n	80078d4 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	e853 ef00 	ldrex	lr, [r3]
 8007920:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	e843 c200 	strex	r2, ip, [r3]
 8007928:	2a00      	cmp	r2, #0
 800792a:	d0d3      	beq.n	80078d4 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	e853 0f00 	ldrex	r0, [r3]
 8007930:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	e843 5100 	strex	r1, r5, [r3]
 8007938:	2900      	cmp	r1, #0
 800793a:	d0cb      	beq.n	80078d4 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	e853 ef00 	ldrex	lr, [r3]
 8007940:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	e843 c200 	strex	r2, ip, [r3]
 8007948:	2a00      	cmp	r2, #0
 800794a:	d0c3      	beq.n	80078d4 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	e853 0f00 	ldrex	r0, [r3]
 8007950:	f020 0510 	bic.w	r5, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	e843 5100 	strex	r1, r5, [r3]
 8007958:	2900      	cmp	r1, #0
 800795a:	d0bb      	beq.n	80078d4 <UART_CheckIdleState+0x630>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	e853 ef00 	ldrex	lr, [r3]
 8007960:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	e843 c200 	strex	r2, ip, [r3]
 8007968:	2a00      	cmp	r2, #0
 800796a:	d1bf      	bne.n	80078ec <UART_CheckIdleState+0x648>
 800796c:	e7b2      	b.n	80078d4 <UART_CheckIdleState+0x630>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800796e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007972:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	e853 0f00 	ldrex	r0, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007978:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	e843 5100 	strex	r1, r5, [r3]
 8007980:	b389      	cbz	r1, 80079e6 <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007982:	e853 cf00 	ldrex	ip, [r3]
 8007986:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	e843 e200 	strex	r2, lr, [r3]
 800798e:	b352      	cbz	r2, 80079e6 <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	e853 0f00 	ldrex	r0, [r3]
 8007994:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	e843 5100 	strex	r1, r5, [r3]
 800799c:	b319      	cbz	r1, 80079e6 <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	e853 cf00 	ldrex	ip, [r3]
 80079a2:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	e843 e200 	strex	r2, lr, [r3]
 80079aa:	b1e2      	cbz	r2, 80079e6 <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	e853 0f00 	ldrex	r0, [r3]
 80079b0:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	e843 5100 	strex	r1, r5, [r3]
 80079b8:	b1a9      	cbz	r1, 80079e6 <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	e853 cf00 	ldrex	ip, [r3]
 80079be:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c2:	e843 e200 	strex	r2, lr, [r3]
 80079c6:	b172      	cbz	r2, 80079e6 <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	e853 0f00 	ldrex	r0, [r3]
 80079cc:	f420 7590 	bic.w	r5, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	e843 5100 	strex	r1, r5, [r3]
 80079d4:	b139      	cbz	r1, 80079e6 <UART_CheckIdleState+0x742>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	e853 cf00 	ldrex	ip, [r3]
 80079da:	f42c 7e90 	bic.w	lr, ip, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	e843 e200 	strex	r2, lr, [r3]
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	d1c6      	bne.n	8007974 <UART_CheckIdleState+0x6d0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e6:	f103 0c08 	add.w	ip, r3, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	e85c 5f00 	ldrex	r5, [ip]
 80079ee:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	e84c 1200 	strex	r2, r1, [ip]
 80079f6:	b3aa      	cbz	r2, 8007a64 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	f103 0008 	add.w	r0, r3, #8
 80079fc:	e850 5f00 	ldrex	r5, [r0]
 8007a00:	f025 0101 	bic.w	r1, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	f103 0e08 	add.w	lr, r3, #8
 8007a08:	e84e 1200 	strex	r2, r1, [lr]
 8007a0c:	b352      	cbz	r2, 8007a64 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	e85c 0f00 	ldrex	r0, [ip]
 8007a12:	f020 0501 	bic.w	r5, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	e84c 5100 	strex	r1, r5, [ip]
 8007a1a:	b319      	cbz	r1, 8007a64 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	e85c 2f00 	ldrex	r2, [ip]
 8007a20:	f022 0501 	bic.w	r5, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	e84c 5000 	strex	r0, r5, [ip]
 8007a28:	b1e0      	cbz	r0, 8007a64 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	e85c ef00 	ldrex	lr, [ip]
 8007a2e:	f02e 0101 	bic.w	r1, lr, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	e84c 1200 	strex	r2, r1, [ip]
 8007a36:	b1aa      	cbz	r2, 8007a64 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	e85c 5f00 	ldrex	r5, [ip]
 8007a3c:	f025 0e01 	bic.w	lr, r5, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	e84c e000 	strex	r0, lr, [ip]
 8007a44:	b170      	cbz	r0, 8007a64 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	e85c 1f00 	ldrex	r1, [ip]
 8007a4a:	f021 0201 	bic.w	r2, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	e84c 2500 	strex	r5, r2, [ip]
 8007a52:	b13d      	cbz	r5, 8007a64 <UART_CheckIdleState+0x7c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	e85c 0f00 	ldrex	r0, [ip]
 8007a58:	f020 0e01 	bic.w	lr, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	e84c e100 	strex	r1, lr, [ip]
 8007a60:	2900      	cmp	r1, #0
 8007a62:	d1c0      	bne.n	80079e6 <UART_CheckIdleState+0x742>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a64:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8007a66:	2a01      	cmp	r2, #1
 8007a68:	d00a      	beq.n	8007a80 <UART_CheckIdleState+0x7dc>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6a:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007a6c:	2020      	movs	r0, #32
 8007a6e:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8007a72:	66a5      	str	r5, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a74:	6625      	str	r5, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8007a76:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a7a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8007a7e:	e49c      	b.n	80073ba <UART_CheckIdleState+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	e853 5f00 	ldrex	r5, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a84:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	e843 0100 	strex	r1, r0, [r3]
 8007a8c:	2900      	cmp	r1, #0
 8007a8e:	d0ec      	beq.n	8007a6a <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	e853 cf00 	ldrex	ip, [r3]
 8007a94:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	e843 e200 	strex	r2, lr, [r3]
 8007a9c:	2a00      	cmp	r2, #0
 8007a9e:	d0e4      	beq.n	8007a6a <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	e853 5f00 	ldrex	r5, [r3]
 8007aa4:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	e843 0100 	strex	r1, r0, [r3]
 8007aac:	2900      	cmp	r1, #0
 8007aae:	d0dc      	beq.n	8007a6a <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	e853 cf00 	ldrex	ip, [r3]
 8007ab4:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	e843 e200 	strex	r2, lr, [r3]
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	d0d4      	beq.n	8007a6a <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	e853 5f00 	ldrex	r5, [r3]
 8007ac4:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	e843 0100 	strex	r1, r0, [r3]
 8007acc:	2900      	cmp	r1, #0
 8007ace:	d0cc      	beq.n	8007a6a <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	e853 cf00 	ldrex	ip, [r3]
 8007ad4:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	e843 e200 	strex	r2, lr, [r3]
 8007adc:	2a00      	cmp	r2, #0
 8007ade:	d0c4      	beq.n	8007a6a <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	e853 5f00 	ldrex	r5, [r3]
 8007ae4:	f025 0010 	bic.w	r0, r5, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	e843 0100 	strex	r1, r0, [r3]
 8007aec:	2900      	cmp	r1, #0
 8007aee:	d0bc      	beq.n	8007a6a <UART_CheckIdleState+0x7c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	e853 cf00 	ldrex	ip, [r3]
 8007af4:	f02c 0e10 	bic.w	lr, ip, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	e843 e200 	strex	r2, lr, [r3]
 8007afc:	2a00      	cmp	r2, #0
 8007afe:	d1bf      	bne.n	8007a80 <UART_CheckIdleState+0x7dc>
 8007b00:	e7b3      	b.n	8007a6a <UART_CheckIdleState+0x7c6>
 8007b02:	bf00      	nop

08007b04 <HAL_UART_Init>:
  if (huart == NULL)
 8007b04:	b370      	cbz	r0, 8007b64 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007b06:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007b0c:	b32b      	cbz	r3, 8007b5a <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8007b0e:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b10:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8007b12:	2024      	movs	r0, #36	@ 0x24
 8007b14:	67e0      	str	r0, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8007b16:	6813      	ldr	r3, [r2, #0]
 8007b18:	f023 0001 	bic.w	r0, r3, #1
 8007b1c:	6010      	str	r0, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b1e:	b9c1      	cbnz	r1, 8007b52 <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b20:	4620      	mov	r0, r4
 8007b22:	f7ff fa43 	bl	8006fac <UART_SetConfig>
 8007b26:	2801      	cmp	r0, #1
 8007b28:	d011      	beq.n	8007b4e <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b2a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8007b2c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b2e:	685c      	ldr	r4, [r3, #4]
 8007b30:	f424 4290 	bic.w	r2, r4, #18432	@ 0x4800
 8007b34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b36:	6899      	ldr	r1, [r3, #8]
 8007b38:	f021 042a 	bic.w	r4, r1, #42	@ 0x2a
 8007b3c:	609c      	str	r4, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	f042 0101 	orr.w	r1, r2, #1
}
 8007b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8007b48:	6019      	str	r1, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007b4a:	f7ff bbab 	b.w	80072a4 <UART_CheckIdleState>
}
 8007b4e:	2001      	movs	r0, #1
 8007b50:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8007b52:	4620      	mov	r0, r4
 8007b54:	f7ff fb4e 	bl	80071f4 <UART_AdvFeatureConfig>
 8007b58:	e7e2      	b.n	8007b20 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8007b5a:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8007b5e:	f7fb f85f 	bl	8002c20 <HAL_UART_MspInit>
 8007b62:	e7d4      	b.n	8007b0e <HAL_UART_Init+0xa>
}
 8007b64:	2001      	movs	r0, #1
 8007b66:	4770      	bx	lr

08007b68 <arm_split_rfft_q15>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 8007b72:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007b74:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8007b76:	3d01      	subs	r5, #1
 8007b78:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 8007b7c:	00ac      	lsls	r4, r5, #2
 8007b7e:	9401      	str	r4, [sp, #4]
 8007b80:	1e4c      	subs	r4, r1, #1
 8007b82:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007b86:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8007b8a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007b8e:	d02d      	beq.n	8007bec <arm_split_rfft_q15+0x84>
 8007b90:	2f01      	cmp	r7, #1
 8007b92:	f1a6 0c04 	sub.w	ip, r6, #4
 8007b96:	f100 0604 	add.w	r6, r0, #4
 8007b9a:	d13e      	bne.n	8007c1a <arm_split_rfft_q15+0xb2>
 8007b9c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8007b9e:	f1ac 0104 	sub.w	r1, ip, #4
 8007ba2:	f107 0808 	add.w	r8, r7, #8
 8007ba6:	f856 7b04 	ldr.w	r7, [r6], #4
 8007baa:	f852 9b04 	ldr.w	r9, [r2], #4
 8007bae:	fb47 fc09 	smusd	ip, r7, r9
 8007bb2:	f855 e904 	ldr.w	lr, [r5], #-4
 8007bb6:	f853 ab04 	ldr.w	sl, [r3], #4
 8007bba:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8007bbe:	fb4e fe1a 	smusdx	lr, lr, sl
 8007bc2:	fb27 e719 	smladx	r7, r7, r9, lr
 8007bc6:	143f      	asrs	r7, r7, #16
 8007bc8:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8007bcc:	f1c7 0e00 	rsb	lr, r7, #0
 8007bd0:	3c01      	subs	r4, #1
 8007bd2:	f828 7c02 	strh.w	r7, [r8, #-2]
 8007bd6:	f828 cc04 	strh.w	ip, [r8, #-4]
 8007bda:	f1a1 0104 	sub.w	r1, r1, #4
 8007bde:	f8a1 e00a 	strh.w	lr, [r1, #10]
 8007be2:	f8a1 c008 	strh.w	ip, [r1, #8]
 8007be6:	f108 0804 	add.w	r8, r8, #4
 8007bea:	d1dc      	bne.n	8007ba6 <arm_split_rfft_q15+0x3e>
 8007bec:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8007bf0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8007bf4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007bf6:	9a01      	ldr	r2, [sp, #4]
 8007bf8:	1a5b      	subs	r3, r3, r1
 8007bfa:	4422      	add	r2, r4
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	105b      	asrs	r3, r3, #1
 8007c00:	8093      	strh	r3, [r2, #4]
 8007c02:	80d1      	strh	r1, [r2, #6]
 8007c04:	f9b0 3000 	ldrsh.w	r3, [r0]
 8007c08:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007c0c:	8061      	strh	r1, [r4, #2]
 8007c0e:	4413      	add	r3, r2
 8007c10:	105b      	asrs	r3, r3, #1
 8007c12:	8023      	strh	r3, [r4, #0]
 8007c14:	b003      	add	sp, #12
 8007c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1a:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8007c1e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8007c20:	f1ac 0104 	sub.w	r1, ip, #4
 8007c24:	f107 0808 	add.w	r8, r7, #8
 8007c28:	f856 7b04 	ldr.w	r7, [r6], #4
 8007c2c:	f8d2 9000 	ldr.w	r9, [r2]
 8007c30:	fb47 fc09 	smusd	ip, r7, r9
 8007c34:	f855 e904 	ldr.w	lr, [r5], #-4
 8007c38:	f8d3 a000 	ldr.w	sl, [r3]
 8007c3c:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8007c40:	fb4e fe1a 	smusdx	lr, lr, sl
 8007c44:	fb27 e719 	smladx	r7, r7, r9, lr
 8007c48:	143f      	asrs	r7, r7, #16
 8007c4a:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8007c4e:	f1c7 0e00 	rsb	lr, r7, #0
 8007c52:	3c01      	subs	r4, #1
 8007c54:	f828 7c02 	strh.w	r7, [r8, #-2]
 8007c58:	f828 cc04 	strh.w	ip, [r8, #-4]
 8007c5c:	445b      	add	r3, fp
 8007c5e:	f8a1 e006 	strh.w	lr, [r1, #6]
 8007c62:	f8a1 c004 	strh.w	ip, [r1, #4]
 8007c66:	445a      	add	r2, fp
 8007c68:	f108 0804 	add.w	r8, r8, #4
 8007c6c:	f1a1 0104 	sub.w	r1, r1, #4
 8007c70:	d1da      	bne.n	8007c28 <arm_split_rfft_q15+0xc0>
 8007c72:	e7bb      	b.n	8007bec <arm_split_rfft_q15+0x84>

08007c74 <arm_rfft_q15>:
 8007c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c78:	f890 e004 	ldrb.w	lr, [r0, #4]
 8007c7c:	6806      	ldr	r6, [r0, #0]
 8007c7e:	f1be 0f01 	cmp.w	lr, #1
 8007c82:	4604      	mov	r4, r0
 8007c84:	b083      	sub	sp, #12
 8007c86:	6940      	ldr	r0, [r0, #20]
 8007c88:	4615      	mov	r5, r2
 8007c8a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007c8e:	460f      	mov	r7, r1
 8007c90:	d00f      	beq.n	8007cb2 <arm_rfft_q15+0x3e>
 8007c92:	7963      	ldrb	r3, [r4, #5]
 8007c94:	4672      	mov	r2, lr
 8007c96:	f000 fa3f 	bl	8008118 <arm_cfft_q15>
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	9500      	str	r5, [sp, #0]
 8007ca0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	f7ff ff5e 	bl	8007b68 <arm_split_rfft_q15>
 8007cac:	b003      	add	sp, #12
 8007cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb2:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 8007cb6:	68a2      	ldr	r2, [r4, #8]
 8007cb8:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 8007cbc:	b30e      	cbz	r6, 8007d02 <arm_rfft_q15+0x8e>
 8007cbe:	2a01      	cmp	r2, #1
 8007cc0:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8007cc4:	d132      	bne.n	8007d2c <arm_rfft_q15+0xb8>
 8007cc6:	46a9      	mov	r9, r5
 8007cc8:	f85c 8904 	ldr.w	r8, [ip], #-4
 8007ccc:	f851 2b04 	ldr.w	r2, [r1], #4
 8007cd0:	fb48 fa02 	smusd	sl, r8, r2
 8007cd4:	f857 bb04 	ldr.w	fp, [r7], #4
 8007cd8:	f853 eb04 	ldr.w	lr, [r3], #4
 8007cdc:	fb2b aa0e 	smlad	sl, fp, lr, sl
 8007ce0:	fb28 f812 	smuadx	r8, r8, r2
 8007ce4:	f1c8 0200 	rsb	r2, r8, #0
 8007ce8:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 8007cec:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8007cf0:	0412      	lsls	r2, r2, #16
 8007cf2:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8007cf6:	3e01      	subs	r6, #1
 8007cf8:	f849 2b04 	str.w	r2, [r9], #4
 8007cfc:	d1e4      	bne.n	8007cc8 <arm_rfft_q15+0x54>
 8007cfe:	f894 e004 	ldrb.w	lr, [r4, #4]
 8007d02:	7963      	ldrb	r3, [r4, #5]
 8007d04:	4672      	mov	r2, lr
 8007d06:	4629      	mov	r1, r5
 8007d08:	f000 fa06 	bl	8008118 <arm_cfft_q15>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0cc      	beq.n	8007cac <arm_rfft_q15+0x38>
 8007d12:	3d02      	subs	r5, #2
 8007d14:	2100      	movs	r1, #0
 8007d16:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	802b      	strh	r3, [r5, #0]
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	3101      	adds	r1, #1
 8007d22:	428b      	cmp	r3, r1
 8007d24:	d8f7      	bhi.n	8007d16 <arm_rfft_q15+0xa2>
 8007d26:	b003      	add	sp, #12
 8007d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2c:	ee07 0a90 	vmov	s15, r0
 8007d30:	46a8      	mov	r8, r5
 8007d32:	f85c e904 	ldr.w	lr, [ip], #-4
 8007d36:	6808      	ldr	r0, [r1, #0]
 8007d38:	fb4e f900 	smusd	r9, lr, r0
 8007d3c:	f857 ab04 	ldr.w	sl, [r7], #4
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	fb2a 9902 	smlad	r9, sl, r2, r9
 8007d46:	fb2e fe10 	smuadx	lr, lr, r0
 8007d4a:	f1ce 0e00 	rsb	lr, lr, #0
 8007d4e:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 8007d52:	0c12      	lsrs	r2, r2, #16
 8007d54:	0412      	lsls	r2, r2, #16
 8007d56:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 8007d5a:	3e01      	subs	r6, #1
 8007d5c:	f848 2b04 	str.w	r2, [r8], #4
 8007d60:	4459      	add	r1, fp
 8007d62:	445b      	add	r3, fp
 8007d64:	d1e5      	bne.n	8007d32 <arm_rfft_q15+0xbe>
 8007d66:	ee17 0a90 	vmov	r0, s15
 8007d6a:	e7c8      	b.n	8007cfe <arm_rfft_q15+0x8a>

08007d6c <arm_rfft_init_q15>:
 8007d6c:	b430      	push	{r4, r5}
 8007d6e:	b289      	uxth	r1, r1
 8007d70:	4d31      	ldr	r5, [pc, #196]	@ (8007e38 <arm_rfft_init_q15+0xcc>)
 8007d72:	4c32      	ldr	r4, [pc, #200]	@ (8007e3c <arm_rfft_init_q15+0xd0>)
 8007d74:	6001      	str	r1, [r0, #0]
 8007d76:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007d7a:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8007d7e:	7102      	strb	r2, [r0, #4]
 8007d80:	7143      	strb	r3, [r0, #5]
 8007d82:	d053      	beq.n	8007e2c <arm_rfft_init_q15+0xc0>
 8007d84:	d91a      	bls.n	8007dbc <arm_rfft_init_q15+0x50>
 8007d86:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007d8a:	d033      	beq.n	8007df4 <arm_rfft_init_q15+0x88>
 8007d8c:	d909      	bls.n	8007da2 <arm_rfft_init_q15+0x36>
 8007d8e:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8007d92:	d12b      	bne.n	8007dec <arm_rfft_init_q15+0x80>
 8007d94:	4b2a      	ldr	r3, [pc, #168]	@ (8007e40 <arm_rfft_init_q15+0xd4>)
 8007d96:	6143      	str	r3, [r0, #20]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	6082      	str	r2, [r0, #8]
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	bc30      	pop	{r4, r5}
 8007da0:	4770      	bx	lr
 8007da2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007da6:	d02c      	beq.n	8007e02 <arm_rfft_init_q15+0x96>
 8007da8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007dac:	d11e      	bne.n	8007dec <arm_rfft_init_q15+0x80>
 8007dae:	4b25      	ldr	r3, [pc, #148]	@ (8007e44 <arm_rfft_init_q15+0xd8>)
 8007db0:	6143      	str	r3, [r0, #20]
 8007db2:	2204      	movs	r2, #4
 8007db4:	6082      	str	r2, [r0, #8]
 8007db6:	bc30      	pop	{r4, r5}
 8007db8:	2000      	movs	r0, #0
 8007dba:	4770      	bx	lr
 8007dbc:	2980      	cmp	r1, #128	@ 0x80
 8007dbe:	d027      	beq.n	8007e10 <arm_rfft_init_q15+0xa4>
 8007dc0:	d909      	bls.n	8007dd6 <arm_rfft_init_q15+0x6a>
 8007dc2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007dc6:	d111      	bne.n	8007dec <arm_rfft_init_q15+0x80>
 8007dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8007e48 <arm_rfft_init_q15+0xdc>)
 8007dca:	6143      	str	r3, [r0, #20]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	6082      	str	r2, [r0, #8]
 8007dd0:	bc30      	pop	{r4, r5}
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	4770      	bx	lr
 8007dd6:	2920      	cmp	r1, #32
 8007dd8:	d021      	beq.n	8007e1e <arm_rfft_init_q15+0xb2>
 8007dda:	2940      	cmp	r1, #64	@ 0x40
 8007ddc:	d106      	bne.n	8007dec <arm_rfft_init_q15+0x80>
 8007dde:	4b1b      	ldr	r3, [pc, #108]	@ (8007e4c <arm_rfft_init_q15+0xe0>)
 8007de0:	6143      	str	r3, [r0, #20]
 8007de2:	2280      	movs	r2, #128	@ 0x80
 8007de4:	6082      	str	r2, [r0, #8]
 8007de6:	bc30      	pop	{r4, r5}
 8007de8:	2000      	movs	r0, #0
 8007dea:	4770      	bx	lr
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	bc30      	pop	{r4, r5}
 8007df2:	4770      	bx	lr
 8007df4:	4b16      	ldr	r3, [pc, #88]	@ (8007e50 <arm_rfft_init_q15+0xe4>)
 8007df6:	6143      	str	r3, [r0, #20]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	6082      	str	r2, [r0, #8]
 8007dfc:	bc30      	pop	{r4, r5}
 8007dfe:	2000      	movs	r0, #0
 8007e00:	4770      	bx	lr
 8007e02:	4b14      	ldr	r3, [pc, #80]	@ (8007e54 <arm_rfft_init_q15+0xe8>)
 8007e04:	6143      	str	r3, [r0, #20]
 8007e06:	2208      	movs	r2, #8
 8007e08:	6082      	str	r2, [r0, #8]
 8007e0a:	bc30      	pop	{r4, r5}
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	4770      	bx	lr
 8007e10:	4b11      	ldr	r3, [pc, #68]	@ (8007e58 <arm_rfft_init_q15+0xec>)
 8007e12:	6143      	str	r3, [r0, #20]
 8007e14:	2240      	movs	r2, #64	@ 0x40
 8007e16:	6082      	str	r2, [r0, #8]
 8007e18:	bc30      	pop	{r4, r5}
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	4770      	bx	lr
 8007e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e5c <arm_rfft_init_q15+0xf0>)
 8007e20:	6143      	str	r3, [r0, #20]
 8007e22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e26:	6082      	str	r2, [r0, #8]
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e7b8      	b.n	8007d9e <arm_rfft_init_q15+0x32>
 8007e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e60 <arm_rfft_init_q15+0xf4>)
 8007e2e:	6143      	str	r3, [r0, #20]
 8007e30:	2210      	movs	r2, #16
 8007e32:	6082      	str	r2, [r0, #8]
 8007e34:	2000      	movs	r0, #0
 8007e36:	e7b2      	b.n	8007d9e <arm_rfft_init_q15+0x32>
 8007e38:	0800e734 	.word	0x0800e734
 8007e3c:	08012734 	.word	0x08012734
 8007e40:	0800a90c 	.word	0x0800a90c
 8007e44:	0800a8ac 	.word	0x0800a8ac
 8007e48:	0800a8bc 	.word	0x0800a8bc
 8007e4c:	0800a8fc 	.word	0x0800a8fc
 8007e50:	0800a8dc 	.word	0x0800a8dc
 8007e54:	0800a91c 	.word	0x0800a91c
 8007e58:	0800a92c 	.word	0x0800a92c
 8007e5c:	0800a8cc 	.word	0x0800a8cc
 8007e60:	0800a8ec 	.word	0x0800a8ec

08007e64 <arm_mult_q15>:
 8007e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e68:	ea5f 0893 	movs.w	r8, r3, lsr #2
 8007e6c:	d037      	beq.n	8007ede <arm_mult_q15+0x7a>
 8007e6e:	4694      	mov	ip, r2
 8007e70:	460f      	mov	r7, r1
 8007e72:	4606      	mov	r6, r0
 8007e74:	46c6      	mov	lr, r8
 8007e76:	f8d6 a000 	ldr.w	sl, [r6]
 8007e7a:	683d      	ldr	r5, [r7, #0]
 8007e7c:	6874      	ldr	r4, [r6, #4]
 8007e7e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8007e82:	fb15 f93a 	smultt	r9, r5, sl
 8007e86:	ea4f 39e9 	mov.w	r9, r9, asr #15
 8007e8a:	3608      	adds	r6, #8
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	f309 090f 	ssat	r9, #16, r9
 8007e92:	fb1a fa05 	smulbb	sl, sl, r5
 8007e96:	ea4f 3aea 	mov.w	sl, sl, asr #15
 8007e9a:	f30a 0a0f 	ssat	sl, #16, sl
 8007e9e:	fb1b f534 	smultt	r5, fp, r4
 8007ea2:	13ed      	asrs	r5, r5, #15
 8007ea4:	f305 050f 	ssat	r5, #16, r5
 8007ea8:	fb14 f40b 	smulbb	r4, r4, fp
 8007eac:	13e4      	asrs	r4, r4, #15
 8007eae:	f304 040f 	ssat	r4, #16, r4
 8007eb2:	fa1f fa8a 	uxth.w	sl, sl
 8007eb6:	b2a4      	uxth	r4, r4
 8007eb8:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 8007ebc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007ec0:	f1be 0e01 	subs.w	lr, lr, #1
 8007ec4:	f8cc 9000 	str.w	r9, [ip]
 8007ec8:	f8cc 4004 	str.w	r4, [ip, #4]
 8007ecc:	f10c 0c08 	add.w	ip, ip, #8
 8007ed0:	d1d1      	bne.n	8007e76 <arm_mult_q15+0x12>
 8007ed2:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8007ed6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007eda:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8007ede:	f013 0303 	ands.w	r3, r3, #3
 8007ee2:	d01b      	beq.n	8007f1c <arm_mult_q15+0xb8>
 8007ee4:	880c      	ldrh	r4, [r1, #0]
 8007ee6:	8805      	ldrh	r5, [r0, #0]
 8007ee8:	fb14 f405 	smulbb	r4, r4, r5
 8007eec:	13e4      	asrs	r4, r4, #15
 8007eee:	f304 040f 	ssat	r4, #16, r4
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	8014      	strh	r4, [r2, #0]
 8007ef6:	d011      	beq.n	8007f1c <arm_mult_q15+0xb8>
 8007ef8:	884c      	ldrh	r4, [r1, #2]
 8007efa:	8845      	ldrh	r5, [r0, #2]
 8007efc:	fb14 f405 	smulbb	r4, r4, r5
 8007f00:	13e4      	asrs	r4, r4, #15
 8007f02:	f304 040f 	ssat	r4, #16, r4
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	8054      	strh	r4, [r2, #2]
 8007f0a:	d007      	beq.n	8007f1c <arm_mult_q15+0xb8>
 8007f0c:	8883      	ldrh	r3, [r0, #4]
 8007f0e:	8889      	ldrh	r1, [r1, #4]
 8007f10:	fb13 f301 	smulbb	r3, r3, r1
 8007f14:	13db      	asrs	r3, r3, #15
 8007f16:	f303 030f 	ssat	r3, #16, r3
 8007f1a:	8093      	strh	r3, [r2, #4]
 8007f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f20 <arm_dot_prod_q15>:
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	ea5f 0992 	movs.w	r9, r2, lsr #2
 8007f28:	d036      	beq.n	8007f98 <arm_dot_prod_q15+0x78>
 8007f2a:	468e      	mov	lr, r1
 8007f2c:	4684      	mov	ip, r0
 8007f2e:	46c8      	mov	r8, r9
 8007f30:	2600      	movs	r6, #0
 8007f32:	2700      	movs	r7, #0
 8007f34:	f8dc a000 	ldr.w	sl, [ip]
 8007f38:	f8de b000 	ldr.w	fp, [lr]
 8007f3c:	4635      	mov	r5, r6
 8007f3e:	463c      	mov	r4, r7
 8007f40:	fbca 54cb 	smlald	r5, r4, sl, fp
 8007f44:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007f48:	f8de 7004 	ldr.w	r7, [lr, #4]
 8007f4c:	f10c 0c08 	add.w	ip, ip, #8
 8007f50:	f10e 0e08 	add.w	lr, lr, #8
 8007f54:	fbc6 54c7 	smlald	r5, r4, r6, r7
 8007f58:	f1b8 0801 	subs.w	r8, r8, #1
 8007f5c:	462e      	mov	r6, r5
 8007f5e:	4627      	mov	r7, r4
 8007f60:	d1e8      	bne.n	8007f34 <arm_dot_prod_q15+0x14>
 8007f62:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8007f66:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 8007f6a:	f012 0203 	ands.w	r2, r2, #3
 8007f6e:	d00f      	beq.n	8007f90 <arm_dot_prod_q15+0x70>
 8007f70:	880d      	ldrh	r5, [r1, #0]
 8007f72:	8804      	ldrh	r4, [r0, #0]
 8007f74:	3a01      	subs	r2, #1
 8007f76:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 8007f7a:	d009      	beq.n	8007f90 <arm_dot_prod_q15+0x70>
 8007f7c:	884d      	ldrh	r5, [r1, #2]
 8007f7e:	8844      	ldrh	r4, [r0, #2]
 8007f80:	2a01      	cmp	r2, #1
 8007f82:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 8007f86:	d003      	beq.n	8007f90 <arm_dot_prod_q15+0x70>
 8007f88:	8880      	ldrh	r0, [r0, #4]
 8007f8a:	888a      	ldrh	r2, [r1, #4]
 8007f8c:	fbc0 6782 	smlalbb	r6, r7, r0, r2
 8007f90:	e9c3 6700 	strd	r6, r7, [r3]
 8007f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f98:	2600      	movs	r6, #0
 8007f9a:	2700      	movs	r7, #0
 8007f9c:	e7e5      	b.n	8007f6a <arm_dot_prod_q15+0x4a>
 8007f9e:	bf00      	nop

08007fa0 <arm_cfft_radix4by2_q15>:
 8007fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	084d      	lsrs	r5, r1, #1
 8007fa6:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8007faa:	4616      	mov	r6, r2
 8007fac:	d047      	beq.n	800803e <arm_cfft_radix4by2_q15+0x9e>
 8007fae:	4604      	mov	r4, r0
 8007fb0:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8008058 <arm_cfft_radix4by2_q15+0xb8>
 8007fb4:	4696      	mov	lr, r2
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	4621      	mov	r1, r4
 8007fba:	462a      	mov	r2, r5
 8007fbc:	f04f 0c00 	mov.w	ip, #0
 8007fc0:	680b      	ldr	r3, [r1, #0]
 8007fc2:	f8d0 a000 	ldr.w	sl, [r0]
 8007fc6:	fa93 f32c 	shadd16	r3, r3, ip
 8007fca:	fa9a fa2c 	shadd16	sl, sl, ip
 8007fce:	fa93 f92a 	shadd16	r9, r3, sl
 8007fd2:	fad3 fa1a 	qsub16	sl, r3, sl
 8007fd6:	f85e 3b04 	ldr.w	r3, [lr], #4
 8007fda:	f841 9b04 	str.w	r9, [r1], #4
 8007fde:	fb23 f90a 	smuad	r9, r3, sl
 8007fe2:	fb43 f31a 	smusdx	r3, r3, sl
 8007fe6:	ea03 0308 	and.w	r3, r3, r8
 8007fea:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8007fee:	3a01      	subs	r2, #1
 8007ff0:	f840 3b04 	str.w	r3, [r0], #4
 8007ff4:	d1e4      	bne.n	8007fc0 <arm_cfft_radix4by2_q15+0x20>
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	4632      	mov	r2, r6
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 f8e9 	bl	80081d4 <arm_radix4_butterfly_q15>
 8008002:	4638      	mov	r0, r7
 8008004:	4629      	mov	r1, r5
 8008006:	4632      	mov	r2, r6
 8008008:	2302      	movs	r3, #2
 800800a:	f000 f8e3 	bl	80081d4 <arm_radix4_butterfly_q15>
 800800e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8008012:	4620      	mov	r0, r4
 8008014:	f9b0 6000 	ldrsh.w	r6, [r0]
 8008018:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800801c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8008020:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8008024:	0076      	lsls	r6, r6, #1
 8008026:	0064      	lsls	r4, r4, #1
 8008028:	0052      	lsls	r2, r2, #1
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	8006      	strh	r6, [r0, #0]
 800802e:	8044      	strh	r4, [r0, #2]
 8008030:	8082      	strh	r2, [r0, #4]
 8008032:	80c3      	strh	r3, [r0, #6]
 8008034:	3008      	adds	r0, #8
 8008036:	4285      	cmp	r5, r0
 8008038:	d1ec      	bne.n	8008014 <arm_cfft_radix4by2_q15+0x74>
 800803a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803e:	4629      	mov	r1, r5
 8008040:	2302      	movs	r3, #2
 8008042:	f000 f8c7 	bl	80081d4 <arm_radix4_butterfly_q15>
 8008046:	4632      	mov	r2, r6
 8008048:	4629      	mov	r1, r5
 800804a:	4638      	mov	r0, r7
 800804c:	2302      	movs	r3, #2
 800804e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008052:	f000 b8bf 	b.w	80081d4 <arm_radix4_butterfly_q15>
 8008056:	bf00      	nop
 8008058:	ffff0000 	.word	0xffff0000

0800805c <arm_cfft_radix4by2_inverse_q15>:
 800805c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008060:	084d      	lsrs	r5, r1, #1
 8008062:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8008066:	4616      	mov	r6, r2
 8008068:	d047      	beq.n	80080fa <arm_cfft_radix4by2_inverse_q15+0x9e>
 800806a:	4604      	mov	r4, r0
 800806c:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8008114 <arm_cfft_radix4by2_inverse_q15+0xb8>
 8008070:	4696      	mov	lr, r2
 8008072:	4638      	mov	r0, r7
 8008074:	4621      	mov	r1, r4
 8008076:	462a      	mov	r2, r5
 8008078:	f04f 0c00 	mov.w	ip, #0
 800807c:	680b      	ldr	r3, [r1, #0]
 800807e:	f8d0 a000 	ldr.w	sl, [r0]
 8008082:	fa93 f32c 	shadd16	r3, r3, ip
 8008086:	fa9a fa2c 	shadd16	sl, sl, ip
 800808a:	fa93 f92a 	shadd16	r9, r3, sl
 800808e:	fad3 fa1a 	qsub16	sl, r3, sl
 8008092:	f85e 3b04 	ldr.w	r3, [lr], #4
 8008096:	f841 9b04 	str.w	r9, [r1], #4
 800809a:	fb43 f90a 	smusd	r9, r3, sl
 800809e:	fb23 f31a 	smuadx	r3, r3, sl
 80080a2:	ea03 0308 	and.w	r3, r3, r8
 80080a6:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 80080aa:	3a01      	subs	r2, #1
 80080ac:	f840 3b04 	str.w	r3, [r0], #4
 80080b0:	d1e4      	bne.n	800807c <arm_cfft_radix4by2_inverse_q15+0x20>
 80080b2:	4629      	mov	r1, r5
 80080b4:	2302      	movs	r3, #2
 80080b6:	4632      	mov	r2, r6
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 fa35 	bl	8008528 <arm_radix4_butterfly_inverse_q15>
 80080be:	4638      	mov	r0, r7
 80080c0:	4629      	mov	r1, r5
 80080c2:	4632      	mov	r2, r6
 80080c4:	2302      	movs	r3, #2
 80080c6:	f000 fa2f 	bl	8008528 <arm_radix4_butterfly_inverse_q15>
 80080ca:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80080ce:	4620      	mov	r0, r4
 80080d0:	f9b0 6000 	ldrsh.w	r6, [r0]
 80080d4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80080d8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80080dc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80080e0:	0076      	lsls	r6, r6, #1
 80080e2:	0064      	lsls	r4, r4, #1
 80080e4:	0052      	lsls	r2, r2, #1
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	8006      	strh	r6, [r0, #0]
 80080ea:	8044      	strh	r4, [r0, #2]
 80080ec:	8082      	strh	r2, [r0, #4]
 80080ee:	80c3      	strh	r3, [r0, #6]
 80080f0:	3008      	adds	r0, #8
 80080f2:	4285      	cmp	r5, r0
 80080f4:	d1ec      	bne.n	80080d0 <arm_cfft_radix4by2_inverse_q15+0x74>
 80080f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fa:	4629      	mov	r1, r5
 80080fc:	2302      	movs	r3, #2
 80080fe:	f000 fa13 	bl	8008528 <arm_radix4_butterfly_inverse_q15>
 8008102:	4632      	mov	r2, r6
 8008104:	4629      	mov	r1, r5
 8008106:	4638      	mov	r0, r7
 8008108:	2302      	movs	r3, #2
 800810a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810e:	f000 ba0b 	b.w	8008528 <arm_radix4_butterfly_inverse_q15>
 8008112:	bf00      	nop
 8008114:	ffff0000 	.word	0xffff0000

08008118 <arm_cfft_q15>:
 8008118:	b5e0      	push	{r5, r6, r7, lr}
 800811a:	2a01      	cmp	r2, #1
 800811c:	460f      	mov	r7, r1
 800811e:	4605      	mov	r5, r0
 8008120:	8801      	ldrh	r1, [r0, #0]
 8008122:	461e      	mov	r6, r3
 8008124:	d02f      	beq.n	8008186 <arm_cfft_q15+0x6e>
 8008126:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800812a:	d026      	beq.n	800817a <arm_cfft_q15+0x62>
 800812c:	d908      	bls.n	8008140 <arm_cfft_q15+0x28>
 800812e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8008132:	d017      	beq.n	8008164 <arm_cfft_q15+0x4c>
 8008134:	d91b      	bls.n	800816e <arm_cfft_q15+0x56>
 8008136:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800813a:	d01e      	beq.n	800817a <arm_cfft_q15+0x62>
 800813c:	b93e      	cbnz	r6, 800814e <arm_cfft_q15+0x36>
 800813e:	bde0      	pop	{r5, r6, r7, pc}
 8008140:	2940      	cmp	r1, #64	@ 0x40
 8008142:	d01a      	beq.n	800817a <arm_cfft_q15+0x62>
 8008144:	d90a      	bls.n	800815c <arm_cfft_q15+0x44>
 8008146:	2980      	cmp	r1, #128	@ 0x80
 8008148:	d00c      	beq.n	8008164 <arm_cfft_q15+0x4c>
 800814a:	2e00      	cmp	r6, #0
 800814c:	d0f7      	beq.n	800813e <arm_cfft_q15+0x26>
 800814e:	68aa      	ldr	r2, [r5, #8]
 8008150:	89a9      	ldrh	r1, [r5, #12]
 8008152:	4638      	mov	r0, r7
 8008154:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8008158:	f000 bb90 	b.w	800887c <arm_bitreversal_16>
 800815c:	2910      	cmp	r1, #16
 800815e:	d00c      	beq.n	800817a <arm_cfft_q15+0x62>
 8008160:	2920      	cmp	r1, #32
 8008162:	d1eb      	bne.n	800813c <arm_cfft_q15+0x24>
 8008164:	686a      	ldr	r2, [r5, #4]
 8008166:	4638      	mov	r0, r7
 8008168:	f7ff ff1a 	bl	8007fa0 <arm_cfft_radix4by2_q15>
 800816c:	e7e6      	b.n	800813c <arm_cfft_q15+0x24>
 800816e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008172:	d0f7      	beq.n	8008164 <arm_cfft_q15+0x4c>
 8008174:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008178:	d1e0      	bne.n	800813c <arm_cfft_q15+0x24>
 800817a:	686a      	ldr	r2, [r5, #4]
 800817c:	2301      	movs	r3, #1
 800817e:	4638      	mov	r0, r7
 8008180:	f000 f828 	bl	80081d4 <arm_radix4_butterfly_q15>
 8008184:	e7da      	b.n	800813c <arm_cfft_q15+0x24>
 8008186:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800818a:	d01d      	beq.n	80081c8 <arm_cfft_q15+0xb0>
 800818c:	d907      	bls.n	800819e <arm_cfft_q15+0x86>
 800818e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8008192:	d00e      	beq.n	80081b2 <arm_cfft_q15+0x9a>
 8008194:	d912      	bls.n	80081bc <arm_cfft_q15+0xa4>
 8008196:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800819a:	d1cf      	bne.n	800813c <arm_cfft_q15+0x24>
 800819c:	e014      	b.n	80081c8 <arm_cfft_q15+0xb0>
 800819e:	2940      	cmp	r1, #64	@ 0x40
 80081a0:	d012      	beq.n	80081c8 <arm_cfft_q15+0xb0>
 80081a2:	d902      	bls.n	80081aa <arm_cfft_q15+0x92>
 80081a4:	2980      	cmp	r1, #128	@ 0x80
 80081a6:	d004      	beq.n	80081b2 <arm_cfft_q15+0x9a>
 80081a8:	e7c8      	b.n	800813c <arm_cfft_q15+0x24>
 80081aa:	2910      	cmp	r1, #16
 80081ac:	d00c      	beq.n	80081c8 <arm_cfft_q15+0xb0>
 80081ae:	2920      	cmp	r1, #32
 80081b0:	d1c4      	bne.n	800813c <arm_cfft_q15+0x24>
 80081b2:	686a      	ldr	r2, [r5, #4]
 80081b4:	4638      	mov	r0, r7
 80081b6:	f7ff ff51 	bl	800805c <arm_cfft_radix4by2_inverse_q15>
 80081ba:	e7bf      	b.n	800813c <arm_cfft_q15+0x24>
 80081bc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80081c0:	d0f7      	beq.n	80081b2 <arm_cfft_q15+0x9a>
 80081c2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80081c6:	d1b9      	bne.n	800813c <arm_cfft_q15+0x24>
 80081c8:	686a      	ldr	r2, [r5, #4]
 80081ca:	2301      	movs	r3, #1
 80081cc:	4638      	mov	r0, r7
 80081ce:	f000 f9ab 	bl	8008528 <arm_radix4_butterfly_inverse_q15>
 80081d2:	e7b3      	b.n	800813c <arm_cfft_q15+0x24>

080081d4 <arm_radix4_butterfly_q15>:
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	b093      	sub	sp, #76	@ 0x4c
 80081da:	f021 0a03 	bic.w	sl, r1, #3
 80081de:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 80081e2:	9210      	str	r2, [sp, #64]	@ 0x40
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	ea4f 0291 	mov.w	r2, r1, lsr #2
 80081ea:	eb0c 050a 	add.w	r5, ip, sl
 80081ee:	9101      	str	r1, [sp, #4]
 80081f0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	4482      	add	sl, r0
 80081f6:	9211      	str	r2, [sp, #68]	@ 0x44
 80081f8:	f040 8124 	bne.w	8008444 <arm_radix4_butterfly_q15+0x270>
 80081fc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80081fe:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8008524 <arm_radix4_butterfly_q15+0x350>
 8008202:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8008204:	f8cd a008 	str.w	sl, [sp, #8]
 8008208:	4693      	mov	fp, r2
 800820a:	4690      	mov	r8, r2
 800820c:	4657      	mov	r7, sl
 800820e:	2300      	movs	r3, #0
 8008210:	4691      	mov	r9, r2
 8008212:	6830      	ldr	r0, [r6, #0]
 8008214:	f8dc 2000 	ldr.w	r2, [ip]
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	fa90 f023 	shadd16	r0, r0, r3
 800821e:	fa91 f123 	shadd16	r1, r1, r3
 8008222:	fa90 f023 	shadd16	r0, r0, r3
 8008226:	fa91 fa23 	shadd16	sl, r1, r3
 800822a:	fa92 f223 	shadd16	r2, r2, r3
 800822e:	6829      	ldr	r1, [r5, #0]
 8008230:	fa92 f223 	shadd16	r2, r2, r3
 8008234:	fa91 f123 	shadd16	r1, r1, r3
 8008238:	fa90 f412 	qadd16	r4, r0, r2
 800823c:	fa91 f123 	shadd16	r1, r1, r3
 8008240:	fa9a f111 	qadd16	r1, sl, r1
 8008244:	fa94 fa21 	shadd16	sl, r4, r1
 8008248:	f846 ab04 	str.w	sl, [r6], #4
 800824c:	fad4 f411 	qsub16	r4, r4, r1
 8008250:	fad0 f212 	qsub16	r2, r0, r2
 8008254:	f85b 1b08 	ldr.w	r1, [fp], #8
 8008258:	fb21 f004 	smuad	r0, r1, r4
 800825c:	fb41 f114 	smusdx	r1, r1, r4
 8008260:	ea01 010e 	and.w	r1, r1, lr
 8008264:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8008268:	6838      	ldr	r0, [r7, #0]
 800826a:	f847 1b04 	str.w	r1, [r7], #4
 800826e:	fa90 f023 	shadd16	r0, r0, r3
 8008272:	682c      	ldr	r4, [r5, #0]
 8008274:	fa90 f023 	shadd16	r0, r0, r3
 8008278:	fa94 f423 	shadd16	r4, r4, r3
 800827c:	f859 1b04 	ldr.w	r1, [r9], #4
 8008280:	fa94 f423 	shadd16	r4, r4, r3
 8008284:	fad0 f014 	qsub16	r0, r0, r4
 8008288:	faa2 f410 	qasx	r4, r2, r0
 800828c:	fae2 f210 	qsax	r2, r2, r0
 8008290:	fb21 fa02 	smuad	sl, r1, r2
 8008294:	fb41 f212 	smusdx	r2, r1, r2
 8008298:	ea02 020e 	and.w	r2, r2, lr
 800829c:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 80082a0:	f84c 2b04 	str.w	r2, [ip], #4
 80082a4:	f858 2b0c 	ldr.w	r2, [r8], #12
 80082a8:	fb22 f104 	smuad	r1, r2, r4
 80082ac:	fb42 f214 	smusdx	r2, r2, r4
 80082b0:	ea02 020e 	and.w	r2, r2, lr
 80082b4:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 80082b8:	f845 2b04 	str.w	r2, [r5], #4
 80082bc:	9a02      	ldr	r2, [sp, #8]
 80082be:	42b2      	cmp	r2, r6
 80082c0:	d1a7      	bne.n	8008212 <arm_radix4_butterfly_q15+0x3e>
 80082c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80082c4:	9b03      	ldr	r3, [sp, #12]
 80082c6:	2a04      	cmp	r2, #4
 80082c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80082cc:	f240 8127 	bls.w	800851e <arm_radix4_butterfly_q15+0x34a>
 80082d0:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8008524 <arm_radix4_butterfly_q15+0x350>
 80082d4:	920e      	str	r2, [sp, #56]	@ 0x38
 80082d6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80082d8:	9102      	str	r1, [sp, #8]
 80082da:	4608      	mov	r0, r1
 80082dc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80082e0:	0889      	lsrs	r1, r1, #2
 80082e2:	0092      	lsls	r2, r2, #2
 80082e4:	0086      	lsls	r6, r0, #2
 80082e6:	9801      	ldr	r0, [sp, #4]
 80082e8:	920d      	str	r2, [sp, #52]	@ 0x34
 80082ea:	008c      	lsls	r4, r1, #2
 80082ec:	009a      	lsls	r2, r3, #2
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	4288      	cmp	r0, r1
 80082f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80082f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082f6:	4604      	mov	r4, r0
 80082f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80082fa:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80082fc:	910e      	str	r1, [sp, #56]	@ 0x38
 80082fe:	bf28      	it	cs
 8008300:	460c      	movcs	r4, r1
 8008302:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8008306:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800830a:	9308      	str	r3, [sp, #32]
 800830c:	9307      	str	r3, [sp, #28]
 800830e:	2300      	movs	r3, #0
 8008310:	940c      	str	r4, [sp, #48]	@ 0x30
 8008312:	9104      	str	r1, [sp, #16]
 8008314:	9209      	str	r2, [sp, #36]	@ 0x24
 8008316:	9303      	str	r3, [sp, #12]
 8008318:	9b08      	ldr	r3, [sp, #32]
 800831a:	9a05      	ldr	r2, [sp, #20]
 800831c:	f8d3 9000 	ldr.w	r9, [r3]
 8008320:	9b07      	ldr	r3, [sp, #28]
 8008322:	9f03      	ldr	r7, [sp, #12]
 8008324:	f8d3 8000 	ldr.w	r8, [r3]
 8008328:	9b06      	ldr	r3, [sp, #24]
 800832a:	f8d3 e000 	ldr.w	lr, [r3]
 800832e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008330:	4615      	mov	r5, r2
 8008332:	1898      	adds	r0, r3, r2
 8008334:	9a04      	ldr	r2, [sp, #16]
 8008336:	4614      	mov	r4, r2
 8008338:	1899      	adds	r1, r3, r2
 800833a:	682a      	ldr	r2, [r5, #0]
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	f8d0 b000 	ldr.w	fp, [r0]
 8008342:	fa92 fc13 	qadd16	ip, r2, r3
 8008346:	fad2 f213 	qsub16	r2, r2, r3
 800834a:	680b      	ldr	r3, [r1, #0]
 800834c:	fa9b f313 	qadd16	r3, fp, r3
 8008350:	fa9c fb23 	shadd16	fp, ip, r3
 8008354:	fadc f323 	shsub16	r3, ip, r3
 8008358:	f04f 0c00 	mov.w	ip, #0
 800835c:	fa9b fb2c 	shadd16	fp, fp, ip
 8008360:	f8c5 b000 	str.w	fp, [r5]
 8008364:	4435      	add	r5, r6
 8008366:	fb28 fb03 	smuad	fp, r8, r3
 800836a:	fb48 f313 	smusdx	r3, r8, r3
 800836e:	ea03 030a 	and.w	r3, r3, sl
 8008372:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8008376:	f8d0 b000 	ldr.w	fp, [r0]
 800837a:	6003      	str	r3, [r0, #0]
 800837c:	f8d1 c000 	ldr.w	ip, [r1]
 8008380:	fadb fc1c 	qsub16	ip, fp, ip
 8008384:	4430      	add	r0, r6
 8008386:	faa2 f32c 	shasx	r3, r2, ip
 800838a:	fae2 f22c 	shsax	r2, r2, ip
 800838e:	fb29 fc02 	smuad	ip, r9, r2
 8008392:	fb49 f212 	smusdx	r2, r9, r2
 8008396:	ea02 020a 	and.w	r2, r2, sl
 800839a:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 800839e:	6022      	str	r2, [r4, #0]
 80083a0:	4434      	add	r4, r6
 80083a2:	fb2e f203 	smuad	r2, lr, r3
 80083a6:	fb4e f313 	smusdx	r3, lr, r3
 80083aa:	ea03 030a 	and.w	r3, r3, sl
 80083ae:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 80083b2:	9a02      	ldr	r2, [sp, #8]
 80083b4:	600b      	str	r3, [r1, #0]
 80083b6:	9b01      	ldr	r3, [sp, #4]
 80083b8:	4417      	add	r7, r2
 80083ba:	42bb      	cmp	r3, r7
 80083bc:	4431      	add	r1, r6
 80083be:	d8bc      	bhi.n	800833a <arm_radix4_butterfly_q15+0x166>
 80083c0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80083c4:	440a      	add	r2, r1
 80083c6:	9208      	str	r2, [sp, #32]
 80083c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083ca:	9a07      	ldr	r2, [sp, #28]
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	440a      	add	r2, r1
 80083d0:	9207      	str	r2, [sp, #28]
 80083d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80083d4:	9a06      	ldr	r2, [sp, #24]
 80083d6:	440a      	add	r2, r1
 80083d8:	9206      	str	r2, [sp, #24]
 80083da:	9a05      	ldr	r2, [sp, #20]
 80083dc:	3204      	adds	r2, #4
 80083de:	9205      	str	r2, [sp, #20]
 80083e0:	9a04      	ldr	r2, [sp, #16]
 80083e2:	3204      	adds	r2, #4
 80083e4:	9204      	str	r2, [sp, #16]
 80083e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083e8:	3301      	adds	r3, #1
 80083ea:	4293      	cmp	r3, r2
 80083ec:	9303      	str	r3, [sp, #12]
 80083ee:	d393      	bcc.n	8008318 <arm_radix4_butterfly_q15+0x144>
 80083f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f4:	2a04      	cmp	r2, #4
 80083f6:	f63f af6e 	bhi.w	80082d6 <arm_radix4_butterfly_q15+0x102>
 80083fa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80083fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083fe:	689d      	ldr	r5, [r3, #8]
 8008400:	68de      	ldr	r6, [r3, #12]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	6859      	ldr	r1, [r3, #4]
 8008406:	fa92 f015 	qadd16	r0, r2, r5
 800840a:	3c01      	subs	r4, #1
 800840c:	fad2 f215 	qsub16	r2, r2, r5
 8008410:	f103 0310 	add.w	r3, r3, #16
 8008414:	fa91 f516 	qadd16	r5, r1, r6
 8008418:	fad1 f116 	qsub16	r1, r1, r6
 800841c:	fa90 f625 	shadd16	r6, r0, r5
 8008420:	fad0 f025 	shsub16	r0, r0, r5
 8008424:	f843 6c10 	str.w	r6, [r3, #-16]
 8008428:	f843 0c0c 	str.w	r0, [r3, #-12]
 800842c:	fae2 f021 	shsax	r0, r2, r1
 8008430:	faa2 f221 	shasx	r2, r2, r1
 8008434:	f843 0c08 	str.w	r0, [r3, #-8]
 8008438:	f843 2c04 	str.w	r2, [r3, #-4]
 800843c:	d1df      	bne.n	80083fe <arm_radix4_butterfly_q15+0x22a>
 800843e:	b013      	add	sp, #76	@ 0x4c
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	2400      	movs	r4, #0
 8008446:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8008524 <arm_radix4_butterfly_q15+0x350>
 800844a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800844c:	4623      	mov	r3, r4
 800844e:	4680      	mov	r8, r0
 8008450:	4691      	mov	r9, r2
 8008452:	f8d8 0000 	ldr.w	r0, [r8]
 8008456:	f8dc 2000 	ldr.w	r2, [ip]
 800845a:	f8da 1000 	ldr.w	r1, [sl]
 800845e:	fa90 f023 	shadd16	r0, r0, r3
 8008462:	fa91 f123 	shadd16	r1, r1, r3
 8008466:	fa90 f023 	shadd16	r0, r0, r3
 800846a:	fa91 fb23 	shadd16	fp, r1, r3
 800846e:	fa92 f223 	shadd16	r2, r2, r3
 8008472:	6829      	ldr	r1, [r5, #0]
 8008474:	fa92 f223 	shadd16	r2, r2, r3
 8008478:	fa91 f123 	shadd16	r1, r1, r3
 800847c:	fa90 f612 	qadd16	r6, r0, r2
 8008480:	fa91 f123 	shadd16	r1, r1, r3
 8008484:	fa9b f111 	qadd16	r1, fp, r1
 8008488:	fa96 fb21 	shadd16	fp, r6, r1
 800848c:	f848 bb04 	str.w	fp, [r8], #4
 8008490:	fad6 f611 	qsub16	r6, r6, r1
 8008494:	fad0 f212 	qsub16	r2, r0, r2
 8008498:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 800849c:	fb21 f006 	smuad	r0, r1, r6
 80084a0:	fb41 f116 	smusdx	r1, r1, r6
 80084a4:	ea01 010e 	and.w	r1, r1, lr
 80084a8:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 80084ac:	f8da 0000 	ldr.w	r0, [sl]
 80084b0:	f84a 1b04 	str.w	r1, [sl], #4
 80084b4:	fa90 f023 	shadd16	r0, r0, r3
 80084b8:	682e      	ldr	r6, [r5, #0]
 80084ba:	fa90 f023 	shadd16	r0, r0, r3
 80084be:	fa96 f623 	shadd16	r6, r6, r3
 80084c2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80084c6:	fa96 f623 	shadd16	r6, r6, r3
 80084ca:	fad0 f016 	qsub16	r0, r0, r6
 80084ce:	faa2 f610 	qasx	r6, r2, r0
 80084d2:	fae2 f210 	qsax	r2, r2, r0
 80084d6:	fb21 fb02 	smuad	fp, r1, r2
 80084da:	fb41 f212 	smusdx	r2, r1, r2
 80084de:	ea02 020e 	and.w	r2, r2, lr
 80084e2:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 80084e6:	f84c 2b04 	str.w	r2, [ip], #4
 80084ea:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80084ee:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80084f2:	fb22 f106 	smuad	r1, r2, r6
 80084f6:	fb42 f216 	smusdx	r2, r2, r6
 80084fa:	ea02 020e 	and.w	r2, r2, lr
 80084fe:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8008502:	f845 2b04 	str.w	r2, [r5], #4
 8008506:	9a03      	ldr	r2, [sp, #12]
 8008508:	f1b9 0901 	subs.w	r9, r9, #1
 800850c:	4414      	add	r4, r2
 800850e:	d1a0      	bne.n	8008452 <arm_radix4_butterfly_q15+0x27e>
 8008510:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	2a04      	cmp	r2, #4
 8008516:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800851a:	f63f aed9 	bhi.w	80082d0 <arm_radix4_butterfly_q15+0xfc>
 800851e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008520:	4614      	mov	r4, r2
 8008522:	e76c      	b.n	80083fe <arm_radix4_butterfly_q15+0x22a>
 8008524:	ffff0000 	.word	0xffff0000

08008528 <arm_radix4_butterfly_inverse_q15>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	b093      	sub	sp, #76	@ 0x4c
 800852e:	f021 0a03 	bic.w	sl, r1, #3
 8008532:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8008536:	9210      	str	r2, [sp, #64]	@ 0x40
 8008538:	2b01      	cmp	r3, #1
 800853a:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800853e:	eb0c 050a 	add.w	r5, ip, sl
 8008542:	9101      	str	r1, [sp, #4]
 8008544:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008546:	9303      	str	r3, [sp, #12]
 8008548:	4482      	add	sl, r0
 800854a:	9211      	str	r2, [sp, #68]	@ 0x44
 800854c:	f040 8124 	bne.w	8008798 <arm_radix4_butterfly_inverse_q15+0x270>
 8008550:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008552:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8008878 <arm_radix4_butterfly_inverse_q15+0x350>
 8008556:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8008558:	f8cd a008 	str.w	sl, [sp, #8]
 800855c:	4693      	mov	fp, r2
 800855e:	4690      	mov	r8, r2
 8008560:	4657      	mov	r7, sl
 8008562:	2300      	movs	r3, #0
 8008564:	4691      	mov	r9, r2
 8008566:	6830      	ldr	r0, [r6, #0]
 8008568:	f8dc 2000 	ldr.w	r2, [ip]
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	fa90 f023 	shadd16	r0, r0, r3
 8008572:	fa91 f123 	shadd16	r1, r1, r3
 8008576:	fa90 f023 	shadd16	r0, r0, r3
 800857a:	fa91 fa23 	shadd16	sl, r1, r3
 800857e:	fa92 f223 	shadd16	r2, r2, r3
 8008582:	6829      	ldr	r1, [r5, #0]
 8008584:	fa92 f223 	shadd16	r2, r2, r3
 8008588:	fa91 f123 	shadd16	r1, r1, r3
 800858c:	fa90 f412 	qadd16	r4, r0, r2
 8008590:	fa91 f123 	shadd16	r1, r1, r3
 8008594:	fa9a f111 	qadd16	r1, sl, r1
 8008598:	fa94 fa21 	shadd16	sl, r4, r1
 800859c:	f846 ab04 	str.w	sl, [r6], #4
 80085a0:	fad4 f411 	qsub16	r4, r4, r1
 80085a4:	fad0 f212 	qsub16	r2, r0, r2
 80085a8:	f85b 1b08 	ldr.w	r1, [fp], #8
 80085ac:	fb41 f004 	smusd	r0, r1, r4
 80085b0:	fb21 f114 	smuadx	r1, r1, r4
 80085b4:	ea01 010e 	and.w	r1, r1, lr
 80085b8:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 80085bc:	6838      	ldr	r0, [r7, #0]
 80085be:	f847 1b04 	str.w	r1, [r7], #4
 80085c2:	fa90 f023 	shadd16	r0, r0, r3
 80085c6:	682c      	ldr	r4, [r5, #0]
 80085c8:	fa90 f023 	shadd16	r0, r0, r3
 80085cc:	fa94 f423 	shadd16	r4, r4, r3
 80085d0:	f859 1b04 	ldr.w	r1, [r9], #4
 80085d4:	fa94 f423 	shadd16	r4, r4, r3
 80085d8:	fad0 f014 	qsub16	r0, r0, r4
 80085dc:	fae2 f410 	qsax	r4, r2, r0
 80085e0:	faa2 f210 	qasx	r2, r2, r0
 80085e4:	fb41 fa02 	smusd	sl, r1, r2
 80085e8:	fb21 f212 	smuadx	r2, r1, r2
 80085ec:	ea02 020e 	and.w	r2, r2, lr
 80085f0:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 80085f4:	f84c 2b04 	str.w	r2, [ip], #4
 80085f8:	f858 2b0c 	ldr.w	r2, [r8], #12
 80085fc:	fb42 f104 	smusd	r1, r2, r4
 8008600:	fb22 f214 	smuadx	r2, r2, r4
 8008604:	ea02 020e 	and.w	r2, r2, lr
 8008608:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800860c:	f845 2b04 	str.w	r2, [r5], #4
 8008610:	9a02      	ldr	r2, [sp, #8]
 8008612:	42b2      	cmp	r2, r6
 8008614:	d1a7      	bne.n	8008566 <arm_radix4_butterfly_inverse_q15+0x3e>
 8008616:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	2a04      	cmp	r2, #4
 800861c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008620:	f240 8127 	bls.w	8008872 <arm_radix4_butterfly_inverse_q15+0x34a>
 8008624:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8008878 <arm_radix4_butterfly_inverse_q15+0x350>
 8008628:	920e      	str	r2, [sp, #56]	@ 0x38
 800862a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800862c:	9102      	str	r1, [sp, #8]
 800862e:	4608      	mov	r0, r1
 8008630:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008634:	0889      	lsrs	r1, r1, #2
 8008636:	0092      	lsls	r2, r2, #2
 8008638:	0086      	lsls	r6, r0, #2
 800863a:	9801      	ldr	r0, [sp, #4]
 800863c:	920d      	str	r2, [sp, #52]	@ 0x34
 800863e:	008c      	lsls	r4, r1, #2
 8008640:	009a      	lsls	r2, r3, #2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	4288      	cmp	r0, r1
 8008646:	940a      	str	r4, [sp, #40]	@ 0x28
 8008648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800864a:	4604      	mov	r4, r0
 800864c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800864e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8008650:	910e      	str	r1, [sp, #56]	@ 0x38
 8008652:	bf28      	it	cs
 8008654:	460c      	movcs	r4, r1
 8008656:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800865a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800865e:	9308      	str	r3, [sp, #32]
 8008660:	9307      	str	r3, [sp, #28]
 8008662:	2300      	movs	r3, #0
 8008664:	940c      	str	r4, [sp, #48]	@ 0x30
 8008666:	9104      	str	r1, [sp, #16]
 8008668:	9209      	str	r2, [sp, #36]	@ 0x24
 800866a:	9303      	str	r3, [sp, #12]
 800866c:	9b08      	ldr	r3, [sp, #32]
 800866e:	9a05      	ldr	r2, [sp, #20]
 8008670:	f8d3 9000 	ldr.w	r9, [r3]
 8008674:	9b07      	ldr	r3, [sp, #28]
 8008676:	9f03      	ldr	r7, [sp, #12]
 8008678:	f8d3 8000 	ldr.w	r8, [r3]
 800867c:	9b06      	ldr	r3, [sp, #24]
 800867e:	f8d3 e000 	ldr.w	lr, [r3]
 8008682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008684:	4615      	mov	r5, r2
 8008686:	1898      	adds	r0, r3, r2
 8008688:	9a04      	ldr	r2, [sp, #16]
 800868a:	4614      	mov	r4, r2
 800868c:	1899      	adds	r1, r3, r2
 800868e:	682a      	ldr	r2, [r5, #0]
 8008690:	6823      	ldr	r3, [r4, #0]
 8008692:	f8d0 b000 	ldr.w	fp, [r0]
 8008696:	fa92 fc13 	qadd16	ip, r2, r3
 800869a:	fad2 f213 	qsub16	r2, r2, r3
 800869e:	680b      	ldr	r3, [r1, #0]
 80086a0:	fa9b f313 	qadd16	r3, fp, r3
 80086a4:	fa9c fb23 	shadd16	fp, ip, r3
 80086a8:	fadc f323 	shsub16	r3, ip, r3
 80086ac:	f04f 0c00 	mov.w	ip, #0
 80086b0:	fa9b fb2c 	shadd16	fp, fp, ip
 80086b4:	f8c5 b000 	str.w	fp, [r5]
 80086b8:	4435      	add	r5, r6
 80086ba:	fb48 fb03 	smusd	fp, r8, r3
 80086be:	fb28 f313 	smuadx	r3, r8, r3
 80086c2:	ea03 030a 	and.w	r3, r3, sl
 80086c6:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80086ca:	f8d0 b000 	ldr.w	fp, [r0]
 80086ce:	6003      	str	r3, [r0, #0]
 80086d0:	f8d1 c000 	ldr.w	ip, [r1]
 80086d4:	fadb fc1c 	qsub16	ip, fp, ip
 80086d8:	4430      	add	r0, r6
 80086da:	fae2 f32c 	shsax	r3, r2, ip
 80086de:	faa2 f22c 	shasx	r2, r2, ip
 80086e2:	fb49 fc02 	smusd	ip, r9, r2
 80086e6:	fb29 f212 	smuadx	r2, r9, r2
 80086ea:	ea02 020a 	and.w	r2, r2, sl
 80086ee:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 80086f2:	6022      	str	r2, [r4, #0]
 80086f4:	4434      	add	r4, r6
 80086f6:	fb4e f203 	smusd	r2, lr, r3
 80086fa:	fb2e f313 	smuadx	r3, lr, r3
 80086fe:	ea03 030a 	and.w	r3, r3, sl
 8008702:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8008706:	9a02      	ldr	r2, [sp, #8]
 8008708:	600b      	str	r3, [r1, #0]
 800870a:	9b01      	ldr	r3, [sp, #4]
 800870c:	4417      	add	r7, r2
 800870e:	42bb      	cmp	r3, r7
 8008710:	4431      	add	r1, r6
 8008712:	d8bc      	bhi.n	800868e <arm_radix4_butterfly_inverse_q15+0x166>
 8008714:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8008718:	440a      	add	r2, r1
 800871a:	9208      	str	r2, [sp, #32]
 800871c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800871e:	9a07      	ldr	r2, [sp, #28]
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	440a      	add	r2, r1
 8008724:	9207      	str	r2, [sp, #28]
 8008726:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008728:	9a06      	ldr	r2, [sp, #24]
 800872a:	440a      	add	r2, r1
 800872c:	9206      	str	r2, [sp, #24]
 800872e:	9a05      	ldr	r2, [sp, #20]
 8008730:	3204      	adds	r2, #4
 8008732:	9205      	str	r2, [sp, #20]
 8008734:	9a04      	ldr	r2, [sp, #16]
 8008736:	3204      	adds	r2, #4
 8008738:	9204      	str	r2, [sp, #16]
 800873a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800873c:	3301      	adds	r3, #1
 800873e:	4293      	cmp	r3, r2
 8008740:	9303      	str	r3, [sp, #12]
 8008742:	d393      	bcc.n	800866c <arm_radix4_butterfly_inverse_q15+0x144>
 8008744:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008748:	2a04      	cmp	r2, #4
 800874a:	f63f af6e 	bhi.w	800862a <arm_radix4_butterfly_inverse_q15+0x102>
 800874e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008752:	689d      	ldr	r5, [r3, #8]
 8008754:	68de      	ldr	r6, [r3, #12]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	6859      	ldr	r1, [r3, #4]
 800875a:	fa92 f015 	qadd16	r0, r2, r5
 800875e:	3c01      	subs	r4, #1
 8008760:	fad2 f215 	qsub16	r2, r2, r5
 8008764:	f103 0310 	add.w	r3, r3, #16
 8008768:	fa91 f516 	qadd16	r5, r1, r6
 800876c:	fad1 f116 	qsub16	r1, r1, r6
 8008770:	fa90 f625 	shadd16	r6, r0, r5
 8008774:	fad0 f025 	shsub16	r0, r0, r5
 8008778:	f843 6c10 	str.w	r6, [r3, #-16]
 800877c:	f843 0c0c 	str.w	r0, [r3, #-12]
 8008780:	faa2 f021 	shasx	r0, r2, r1
 8008784:	fae2 f221 	shsax	r2, r2, r1
 8008788:	f843 0c08 	str.w	r0, [r3, #-8]
 800878c:	f843 2c04 	str.w	r2, [r3, #-4]
 8008790:	d1df      	bne.n	8008752 <arm_radix4_butterfly_inverse_q15+0x22a>
 8008792:	b013      	add	sp, #76	@ 0x4c
 8008794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008798:	2400      	movs	r4, #0
 800879a:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8008878 <arm_radix4_butterfly_inverse_q15+0x350>
 800879e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80087a0:	4623      	mov	r3, r4
 80087a2:	4680      	mov	r8, r0
 80087a4:	4691      	mov	r9, r2
 80087a6:	f8d8 0000 	ldr.w	r0, [r8]
 80087aa:	f8dc 2000 	ldr.w	r2, [ip]
 80087ae:	f8da 1000 	ldr.w	r1, [sl]
 80087b2:	fa90 f023 	shadd16	r0, r0, r3
 80087b6:	fa91 f123 	shadd16	r1, r1, r3
 80087ba:	fa90 f023 	shadd16	r0, r0, r3
 80087be:	fa91 fb23 	shadd16	fp, r1, r3
 80087c2:	fa92 f223 	shadd16	r2, r2, r3
 80087c6:	6829      	ldr	r1, [r5, #0]
 80087c8:	fa92 f223 	shadd16	r2, r2, r3
 80087cc:	fa91 f123 	shadd16	r1, r1, r3
 80087d0:	fa90 f612 	qadd16	r6, r0, r2
 80087d4:	fa91 f123 	shadd16	r1, r1, r3
 80087d8:	fa9b f111 	qadd16	r1, fp, r1
 80087dc:	fa96 fb21 	shadd16	fp, r6, r1
 80087e0:	f848 bb04 	str.w	fp, [r8], #4
 80087e4:	fad6 f611 	qsub16	r6, r6, r1
 80087e8:	fad0 f212 	qsub16	r2, r0, r2
 80087ec:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 80087f0:	fb41 f006 	smusd	r0, r1, r6
 80087f4:	fb21 f116 	smuadx	r1, r1, r6
 80087f8:	ea01 010e 	and.w	r1, r1, lr
 80087fc:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8008800:	f8da 0000 	ldr.w	r0, [sl]
 8008804:	f84a 1b04 	str.w	r1, [sl], #4
 8008808:	fa90 f023 	shadd16	r0, r0, r3
 800880c:	682e      	ldr	r6, [r5, #0]
 800880e:	fa90 f023 	shadd16	r0, r0, r3
 8008812:	fa96 f623 	shadd16	r6, r6, r3
 8008816:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800881a:	fa96 f623 	shadd16	r6, r6, r3
 800881e:	fad0 f016 	qsub16	r0, r0, r6
 8008822:	fae2 f610 	qsax	r6, r2, r0
 8008826:	faa2 f210 	qasx	r2, r2, r0
 800882a:	fb41 fb02 	smusd	fp, r1, r2
 800882e:	fb21 f212 	smuadx	r2, r1, r2
 8008832:	ea02 020e 	and.w	r2, r2, lr
 8008836:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800883a:	f84c 2b04 	str.w	r2, [ip], #4
 800883e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008842:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8008846:	fb42 f106 	smusd	r1, r2, r6
 800884a:	fb22 f216 	smuadx	r2, r2, r6
 800884e:	ea02 020e 	and.w	r2, r2, lr
 8008852:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8008856:	f845 2b04 	str.w	r2, [r5], #4
 800885a:	9a03      	ldr	r2, [sp, #12]
 800885c:	f1b9 0901 	subs.w	r9, r9, #1
 8008860:	4414      	add	r4, r2
 8008862:	d1a0      	bne.n	80087a6 <arm_radix4_butterfly_inverse_q15+0x27e>
 8008864:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	2a04      	cmp	r2, #4
 800886a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800886e:	f63f aed9 	bhi.w	8008624 <arm_radix4_butterfly_inverse_q15+0xfc>
 8008872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008874:	4614      	mov	r4, r2
 8008876:	e76c      	b.n	8008752 <arm_radix4_butterfly_inverse_q15+0x22a>
 8008878:	ffff0000 	.word	0xffff0000

0800887c <arm_bitreversal_16>:
 800887c:	b1f1      	cbz	r1, 80088bc <arm_bitreversal_16+0x40>
 800887e:	b4f0      	push	{r4, r5, r6, r7}
 8008880:	2400      	movs	r4, #0
 8008882:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8008886:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800888a:	886d      	ldrh	r5, [r5, #2]
 800888c:	08ad      	lsrs	r5, r5, #2
 800888e:	089b      	lsrs	r3, r3, #2
 8008890:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 8008894:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 8008898:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 800889c:	006e      	lsls	r6, r5, #1
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 80088a4:	3302      	adds	r3, #2
 80088a6:	1cb5      	adds	r5, r6, #2
 80088a8:	3402      	adds	r4, #2
 80088aa:	b2a4      	uxth	r4, r4
 80088ac:	5ac6      	ldrh	r6, [r0, r3]
 80088ae:	5b47      	ldrh	r7, [r0, r5]
 80088b0:	52c7      	strh	r7, [r0, r3]
 80088b2:	42a1      	cmp	r1, r4
 80088b4:	5346      	strh	r6, [r0, r5]
 80088b6:	d8e4      	bhi.n	8008882 <arm_bitreversal_16+0x6>
 80088b8:	bcf0      	pop	{r4, r5, r6, r7}
 80088ba:	4770      	bx	lr
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop

080088c0 <malloc>:
 80088c0:	4b02      	ldr	r3, [pc, #8]	@ (80088cc <malloc+0xc>)
 80088c2:	4601      	mov	r1, r0
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	f000 b82d 	b.w	8008924 <_malloc_r>
 80088ca:	bf00      	nop
 80088cc:	20000418 	.word	0x20000418

080088d0 <free>:
 80088d0:	4b02      	ldr	r3, [pc, #8]	@ (80088dc <free+0xc>)
 80088d2:	4601      	mov	r1, r0
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	f000 bc09 	b.w	80090ec <_free_r>
 80088da:	bf00      	nop
 80088dc:	20000418 	.word	0x20000418

080088e0 <sbrk_aligned>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	4e0f      	ldr	r6, [pc, #60]	@ (8008920 <sbrk_aligned+0x40>)
 80088e4:	460c      	mov	r4, r1
 80088e6:	6831      	ldr	r1, [r6, #0]
 80088e8:	4605      	mov	r5, r0
 80088ea:	b911      	cbnz	r1, 80088f2 <sbrk_aligned+0x12>
 80088ec:	f000 fba0 	bl	8009030 <_sbrk_r>
 80088f0:	6030      	str	r0, [r6, #0]
 80088f2:	4621      	mov	r1, r4
 80088f4:	4628      	mov	r0, r5
 80088f6:	f000 fb9b 	bl	8009030 <_sbrk_r>
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	d103      	bne.n	8008906 <sbrk_aligned+0x26>
 80088fe:	f04f 34ff 	mov.w	r4, #4294967295
 8008902:	4620      	mov	r0, r4
 8008904:	bd70      	pop	{r4, r5, r6, pc}
 8008906:	1cc4      	adds	r4, r0, #3
 8008908:	f024 0403 	bic.w	r4, r4, #3
 800890c:	42a0      	cmp	r0, r4
 800890e:	d0f8      	beq.n	8008902 <sbrk_aligned+0x22>
 8008910:	1a21      	subs	r1, r4, r0
 8008912:	4628      	mov	r0, r5
 8008914:	f000 fb8c 	bl	8009030 <_sbrk_r>
 8008918:	3001      	adds	r0, #1
 800891a:	d1f2      	bne.n	8008902 <sbrk_aligned+0x22>
 800891c:	e7ef      	b.n	80088fe <sbrk_aligned+0x1e>
 800891e:	bf00      	nop
 8008920:	2000fa88 	.word	0x2000fa88

08008924 <_malloc_r>:
 8008924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008928:	1ccd      	adds	r5, r1, #3
 800892a:	f025 0503 	bic.w	r5, r5, #3
 800892e:	3508      	adds	r5, #8
 8008930:	2d0c      	cmp	r5, #12
 8008932:	bf38      	it	cc
 8008934:	250c      	movcc	r5, #12
 8008936:	2d00      	cmp	r5, #0
 8008938:	4606      	mov	r6, r0
 800893a:	db01      	blt.n	8008940 <_malloc_r+0x1c>
 800893c:	42a9      	cmp	r1, r5
 800893e:	d904      	bls.n	800894a <_malloc_r+0x26>
 8008940:	230c      	movs	r3, #12
 8008942:	6033      	str	r3, [r6, #0]
 8008944:	2000      	movs	r0, #0
 8008946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a20 <_malloc_r+0xfc>
 800894e:	f000 f869 	bl	8008a24 <__malloc_lock>
 8008952:	f8d8 3000 	ldr.w	r3, [r8]
 8008956:	461c      	mov	r4, r3
 8008958:	bb44      	cbnz	r4, 80089ac <_malloc_r+0x88>
 800895a:	4629      	mov	r1, r5
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff ffbf 	bl	80088e0 <sbrk_aligned>
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	4604      	mov	r4, r0
 8008966:	d158      	bne.n	8008a1a <_malloc_r+0xf6>
 8008968:	f8d8 4000 	ldr.w	r4, [r8]
 800896c:	4627      	mov	r7, r4
 800896e:	2f00      	cmp	r7, #0
 8008970:	d143      	bne.n	80089fa <_malloc_r+0xd6>
 8008972:	2c00      	cmp	r4, #0
 8008974:	d04b      	beq.n	8008a0e <_malloc_r+0xea>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	4639      	mov	r1, r7
 800897a:	4630      	mov	r0, r6
 800897c:	eb04 0903 	add.w	r9, r4, r3
 8008980:	f000 fb56 	bl	8009030 <_sbrk_r>
 8008984:	4581      	cmp	r9, r0
 8008986:	d142      	bne.n	8008a0e <_malloc_r+0xea>
 8008988:	6821      	ldr	r1, [r4, #0]
 800898a:	1a6d      	subs	r5, r5, r1
 800898c:	4629      	mov	r1, r5
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff ffa6 	bl	80088e0 <sbrk_aligned>
 8008994:	3001      	adds	r0, #1
 8008996:	d03a      	beq.n	8008a0e <_malloc_r+0xea>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	442b      	add	r3, r5
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	f8d8 3000 	ldr.w	r3, [r8]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	bb62      	cbnz	r2, 8008a00 <_malloc_r+0xdc>
 80089a6:	f8c8 7000 	str.w	r7, [r8]
 80089aa:	e00f      	b.n	80089cc <_malloc_r+0xa8>
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	1b52      	subs	r2, r2, r5
 80089b0:	d420      	bmi.n	80089f4 <_malloc_r+0xd0>
 80089b2:	2a0b      	cmp	r2, #11
 80089b4:	d917      	bls.n	80089e6 <_malloc_r+0xc2>
 80089b6:	1961      	adds	r1, r4, r5
 80089b8:	42a3      	cmp	r3, r4
 80089ba:	6025      	str	r5, [r4, #0]
 80089bc:	bf18      	it	ne
 80089be:	6059      	strne	r1, [r3, #4]
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	bf08      	it	eq
 80089c4:	f8c8 1000 	streq.w	r1, [r8]
 80089c8:	5162      	str	r2, [r4, r5]
 80089ca:	604b      	str	r3, [r1, #4]
 80089cc:	4630      	mov	r0, r6
 80089ce:	f000 f82f 	bl	8008a30 <__malloc_unlock>
 80089d2:	f104 000b 	add.w	r0, r4, #11
 80089d6:	1d23      	adds	r3, r4, #4
 80089d8:	f020 0007 	bic.w	r0, r0, #7
 80089dc:	1ac2      	subs	r2, r0, r3
 80089de:	bf1c      	itt	ne
 80089e0:	1a1b      	subne	r3, r3, r0
 80089e2:	50a3      	strne	r3, [r4, r2]
 80089e4:	e7af      	b.n	8008946 <_malloc_r+0x22>
 80089e6:	6862      	ldr	r2, [r4, #4]
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	bf0c      	ite	eq
 80089ec:	f8c8 2000 	streq.w	r2, [r8]
 80089f0:	605a      	strne	r2, [r3, #4]
 80089f2:	e7eb      	b.n	80089cc <_malloc_r+0xa8>
 80089f4:	4623      	mov	r3, r4
 80089f6:	6864      	ldr	r4, [r4, #4]
 80089f8:	e7ae      	b.n	8008958 <_malloc_r+0x34>
 80089fa:	463c      	mov	r4, r7
 80089fc:	687f      	ldr	r7, [r7, #4]
 80089fe:	e7b6      	b.n	800896e <_malloc_r+0x4a>
 8008a00:	461a      	mov	r2, r3
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	42a3      	cmp	r3, r4
 8008a06:	d1fb      	bne.n	8008a00 <_malloc_r+0xdc>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	6053      	str	r3, [r2, #4]
 8008a0c:	e7de      	b.n	80089cc <_malloc_r+0xa8>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	6033      	str	r3, [r6, #0]
 8008a12:	4630      	mov	r0, r6
 8008a14:	f000 f80c 	bl	8008a30 <__malloc_unlock>
 8008a18:	e794      	b.n	8008944 <_malloc_r+0x20>
 8008a1a:	6005      	str	r5, [r0, #0]
 8008a1c:	e7d6      	b.n	80089cc <_malloc_r+0xa8>
 8008a1e:	bf00      	nop
 8008a20:	2000fa8c 	.word	0x2000fa8c

08008a24 <__malloc_lock>:
 8008a24:	4801      	ldr	r0, [pc, #4]	@ (8008a2c <__malloc_lock+0x8>)
 8008a26:	f000 bb50 	b.w	80090ca <__retarget_lock_acquire_recursive>
 8008a2a:	bf00      	nop
 8008a2c:	2000fbd0 	.word	0x2000fbd0

08008a30 <__malloc_unlock>:
 8008a30:	4801      	ldr	r0, [pc, #4]	@ (8008a38 <__malloc_unlock+0x8>)
 8008a32:	f000 bb4b 	b.w	80090cc <__retarget_lock_release_recursive>
 8008a36:	bf00      	nop
 8008a38:	2000fbd0 	.word	0x2000fbd0

08008a3c <std>:
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	b510      	push	{r4, lr}
 8008a40:	4604      	mov	r4, r0
 8008a42:	e9c0 3300 	strd	r3, r3, [r0]
 8008a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a4a:	6083      	str	r3, [r0, #8]
 8008a4c:	8181      	strh	r1, [r0, #12]
 8008a4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a50:	81c2      	strh	r2, [r0, #14]
 8008a52:	6183      	str	r3, [r0, #24]
 8008a54:	4619      	mov	r1, r3
 8008a56:	2208      	movs	r2, #8
 8008a58:	305c      	adds	r0, #92	@ 0x5c
 8008a5a:	f000 faad 	bl	8008fb8 <memset>
 8008a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a94 <std+0x58>)
 8008a60:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a62:	4b0d      	ldr	r3, [pc, #52]	@ (8008a98 <std+0x5c>)
 8008a64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a66:	4b0d      	ldr	r3, [pc, #52]	@ (8008a9c <std+0x60>)
 8008a68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa0 <std+0x64>)
 8008a6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa4 <std+0x68>)
 8008a70:	6224      	str	r4, [r4, #32]
 8008a72:	429c      	cmp	r4, r3
 8008a74:	d006      	beq.n	8008a84 <std+0x48>
 8008a76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a7a:	4294      	cmp	r4, r2
 8008a7c:	d002      	beq.n	8008a84 <std+0x48>
 8008a7e:	33d0      	adds	r3, #208	@ 0xd0
 8008a80:	429c      	cmp	r4, r3
 8008a82:	d105      	bne.n	8008a90 <std+0x54>
 8008a84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a8c:	f000 bb1c 	b.w	80090c8 <__retarget_lock_init_recursive>
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	bf00      	nop
 8008a94:	08008e09 	.word	0x08008e09
 8008a98:	08008e2b 	.word	0x08008e2b
 8008a9c:	08008e63 	.word	0x08008e63
 8008aa0:	08008e87 	.word	0x08008e87
 8008aa4:	2000fa90 	.word	0x2000fa90

08008aa8 <stdio_exit_handler>:
 8008aa8:	4a02      	ldr	r2, [pc, #8]	@ (8008ab4 <stdio_exit_handler+0xc>)
 8008aaa:	4903      	ldr	r1, [pc, #12]	@ (8008ab8 <stdio_exit_handler+0x10>)
 8008aac:	4803      	ldr	r0, [pc, #12]	@ (8008abc <stdio_exit_handler+0x14>)
 8008aae:	f000 b869 	b.w	8008b84 <_fwalk_sglue>
 8008ab2:	bf00      	nop
 8008ab4:	2000040c 	.word	0x2000040c
 8008ab8:	08009829 	.word	0x08009829
 8008abc:	2000041c 	.word	0x2000041c

08008ac0 <cleanup_stdio>:
 8008ac0:	6841      	ldr	r1, [r0, #4]
 8008ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8008af4 <cleanup_stdio+0x34>)
 8008ac4:	4299      	cmp	r1, r3
 8008ac6:	b510      	push	{r4, lr}
 8008ac8:	4604      	mov	r4, r0
 8008aca:	d001      	beq.n	8008ad0 <cleanup_stdio+0x10>
 8008acc:	f000 feac 	bl	8009828 <_fflush_r>
 8008ad0:	68a1      	ldr	r1, [r4, #8]
 8008ad2:	4b09      	ldr	r3, [pc, #36]	@ (8008af8 <cleanup_stdio+0x38>)
 8008ad4:	4299      	cmp	r1, r3
 8008ad6:	d002      	beq.n	8008ade <cleanup_stdio+0x1e>
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fea5 	bl	8009828 <_fflush_r>
 8008ade:	68e1      	ldr	r1, [r4, #12]
 8008ae0:	4b06      	ldr	r3, [pc, #24]	@ (8008afc <cleanup_stdio+0x3c>)
 8008ae2:	4299      	cmp	r1, r3
 8008ae4:	d004      	beq.n	8008af0 <cleanup_stdio+0x30>
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aec:	f000 be9c 	b.w	8009828 <_fflush_r>
 8008af0:	bd10      	pop	{r4, pc}
 8008af2:	bf00      	nop
 8008af4:	2000fa90 	.word	0x2000fa90
 8008af8:	2000faf8 	.word	0x2000faf8
 8008afc:	2000fb60 	.word	0x2000fb60

08008b00 <global_stdio_init.part.0>:
 8008b00:	b510      	push	{r4, lr}
 8008b02:	4b0b      	ldr	r3, [pc, #44]	@ (8008b30 <global_stdio_init.part.0+0x30>)
 8008b04:	4c0b      	ldr	r4, [pc, #44]	@ (8008b34 <global_stdio_init.part.0+0x34>)
 8008b06:	4a0c      	ldr	r2, [pc, #48]	@ (8008b38 <global_stdio_init.part.0+0x38>)
 8008b08:	601a      	str	r2, [r3, #0]
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2104      	movs	r1, #4
 8008b10:	f7ff ff94 	bl	8008a3c <std>
 8008b14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b18:	2201      	movs	r2, #1
 8008b1a:	2109      	movs	r1, #9
 8008b1c:	f7ff ff8e 	bl	8008a3c <std>
 8008b20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b24:	2202      	movs	r2, #2
 8008b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b2a:	2112      	movs	r1, #18
 8008b2c:	f7ff bf86 	b.w	8008a3c <std>
 8008b30:	2000fbc8 	.word	0x2000fbc8
 8008b34:	2000fa90 	.word	0x2000fa90
 8008b38:	08008aa9 	.word	0x08008aa9

08008b3c <__sfp_lock_acquire>:
 8008b3c:	4801      	ldr	r0, [pc, #4]	@ (8008b44 <__sfp_lock_acquire+0x8>)
 8008b3e:	f000 bac4 	b.w	80090ca <__retarget_lock_acquire_recursive>
 8008b42:	bf00      	nop
 8008b44:	2000fbd1 	.word	0x2000fbd1

08008b48 <__sfp_lock_release>:
 8008b48:	4801      	ldr	r0, [pc, #4]	@ (8008b50 <__sfp_lock_release+0x8>)
 8008b4a:	f000 babf 	b.w	80090cc <__retarget_lock_release_recursive>
 8008b4e:	bf00      	nop
 8008b50:	2000fbd1 	.word	0x2000fbd1

08008b54 <__sinit>:
 8008b54:	b510      	push	{r4, lr}
 8008b56:	4604      	mov	r4, r0
 8008b58:	f7ff fff0 	bl	8008b3c <__sfp_lock_acquire>
 8008b5c:	6a23      	ldr	r3, [r4, #32]
 8008b5e:	b11b      	cbz	r3, 8008b68 <__sinit+0x14>
 8008b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b64:	f7ff bff0 	b.w	8008b48 <__sfp_lock_release>
 8008b68:	4b04      	ldr	r3, [pc, #16]	@ (8008b7c <__sinit+0x28>)
 8008b6a:	6223      	str	r3, [r4, #32]
 8008b6c:	4b04      	ldr	r3, [pc, #16]	@ (8008b80 <__sinit+0x2c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1f5      	bne.n	8008b60 <__sinit+0xc>
 8008b74:	f7ff ffc4 	bl	8008b00 <global_stdio_init.part.0>
 8008b78:	e7f2      	b.n	8008b60 <__sinit+0xc>
 8008b7a:	bf00      	nop
 8008b7c:	08008ac1 	.word	0x08008ac1
 8008b80:	2000fbc8 	.word	0x2000fbc8

08008b84 <_fwalk_sglue>:
 8008b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b88:	4607      	mov	r7, r0
 8008b8a:	4688      	mov	r8, r1
 8008b8c:	4614      	mov	r4, r2
 8008b8e:	2600      	movs	r6, #0
 8008b90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b94:	f1b9 0901 	subs.w	r9, r9, #1
 8008b98:	d505      	bpl.n	8008ba6 <_fwalk_sglue+0x22>
 8008b9a:	6824      	ldr	r4, [r4, #0]
 8008b9c:	2c00      	cmp	r4, #0
 8008b9e:	d1f7      	bne.n	8008b90 <_fwalk_sglue+0xc>
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ba6:	89ab      	ldrh	r3, [r5, #12]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d907      	bls.n	8008bbc <_fwalk_sglue+0x38>
 8008bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	d003      	beq.n	8008bbc <_fwalk_sglue+0x38>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	47c0      	blx	r8
 8008bba:	4306      	orrs	r6, r0
 8008bbc:	3568      	adds	r5, #104	@ 0x68
 8008bbe:	e7e9      	b.n	8008b94 <_fwalk_sglue+0x10>

08008bc0 <iprintf>:
 8008bc0:	b40f      	push	{r0, r1, r2, r3}
 8008bc2:	b507      	push	{r0, r1, r2, lr}
 8008bc4:	4906      	ldr	r1, [pc, #24]	@ (8008be0 <iprintf+0x20>)
 8008bc6:	ab04      	add	r3, sp, #16
 8008bc8:	6808      	ldr	r0, [r1, #0]
 8008bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bce:	6881      	ldr	r1, [r0, #8]
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	f000 faff 	bl	80091d4 <_vfiprintf_r>
 8008bd6:	b003      	add	sp, #12
 8008bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bdc:	b004      	add	sp, #16
 8008bde:	4770      	bx	lr
 8008be0:	20000418 	.word	0x20000418

08008be4 <_puts_r>:
 8008be4:	6a03      	ldr	r3, [r0, #32]
 8008be6:	b570      	push	{r4, r5, r6, lr}
 8008be8:	6884      	ldr	r4, [r0, #8]
 8008bea:	4605      	mov	r5, r0
 8008bec:	460e      	mov	r6, r1
 8008bee:	b90b      	cbnz	r3, 8008bf4 <_puts_r+0x10>
 8008bf0:	f7ff ffb0 	bl	8008b54 <__sinit>
 8008bf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bf6:	07db      	lsls	r3, r3, #31
 8008bf8:	d405      	bmi.n	8008c06 <_puts_r+0x22>
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	0598      	lsls	r0, r3, #22
 8008bfe:	d402      	bmi.n	8008c06 <_puts_r+0x22>
 8008c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c02:	f000 fa62 	bl	80090ca <__retarget_lock_acquire_recursive>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	0719      	lsls	r1, r3, #28
 8008c0a:	d502      	bpl.n	8008c12 <_puts_r+0x2e>
 8008c0c:	6923      	ldr	r3, [r4, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d135      	bne.n	8008c7e <_puts_r+0x9a>
 8008c12:	4621      	mov	r1, r4
 8008c14:	4628      	mov	r0, r5
 8008c16:	f000 f979 	bl	8008f0c <__swsetup_r>
 8008c1a:	b380      	cbz	r0, 8008c7e <_puts_r+0x9a>
 8008c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8008c20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c22:	07da      	lsls	r2, r3, #31
 8008c24:	d405      	bmi.n	8008c32 <_puts_r+0x4e>
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	059b      	lsls	r3, r3, #22
 8008c2a:	d402      	bmi.n	8008c32 <_puts_r+0x4e>
 8008c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c2e:	f000 fa4d 	bl	80090cc <__retarget_lock_release_recursive>
 8008c32:	4628      	mov	r0, r5
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	da04      	bge.n	8008c44 <_puts_r+0x60>
 8008c3a:	69a2      	ldr	r2, [r4, #24]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	dc17      	bgt.n	8008c70 <_puts_r+0x8c>
 8008c40:	290a      	cmp	r1, #10
 8008c42:	d015      	beq.n	8008c70 <_puts_r+0x8c>
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	1c5a      	adds	r2, r3, #1
 8008c48:	6022      	str	r2, [r4, #0]
 8008c4a:	7019      	strb	r1, [r3, #0]
 8008c4c:	68a3      	ldr	r3, [r4, #8]
 8008c4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c52:	3b01      	subs	r3, #1
 8008c54:	60a3      	str	r3, [r4, #8]
 8008c56:	2900      	cmp	r1, #0
 8008c58:	d1ed      	bne.n	8008c36 <_puts_r+0x52>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	da11      	bge.n	8008c82 <_puts_r+0x9e>
 8008c5e:	4622      	mov	r2, r4
 8008c60:	210a      	movs	r1, #10
 8008c62:	4628      	mov	r0, r5
 8008c64:	f000 f913 	bl	8008e8e <__swbuf_r>
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d0d7      	beq.n	8008c1c <_puts_r+0x38>
 8008c6c:	250a      	movs	r5, #10
 8008c6e:	e7d7      	b.n	8008c20 <_puts_r+0x3c>
 8008c70:	4622      	mov	r2, r4
 8008c72:	4628      	mov	r0, r5
 8008c74:	f000 f90b 	bl	8008e8e <__swbuf_r>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d1e7      	bne.n	8008c4c <_puts_r+0x68>
 8008c7c:	e7ce      	b.n	8008c1c <_puts_r+0x38>
 8008c7e:	3e01      	subs	r6, #1
 8008c80:	e7e4      	b.n	8008c4c <_puts_r+0x68>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	6022      	str	r2, [r4, #0]
 8008c88:	220a      	movs	r2, #10
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	e7ee      	b.n	8008c6c <_puts_r+0x88>
	...

08008c90 <puts>:
 8008c90:	4b02      	ldr	r3, [pc, #8]	@ (8008c9c <puts+0xc>)
 8008c92:	4601      	mov	r1, r0
 8008c94:	6818      	ldr	r0, [r3, #0]
 8008c96:	f7ff bfa5 	b.w	8008be4 <_puts_r>
 8008c9a:	bf00      	nop
 8008c9c:	20000418 	.word	0x20000418

08008ca0 <setvbuf>:
 8008ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ca4:	461d      	mov	r5, r3
 8008ca6:	4b57      	ldr	r3, [pc, #348]	@ (8008e04 <setvbuf+0x164>)
 8008ca8:	681f      	ldr	r7, [r3, #0]
 8008caa:	4604      	mov	r4, r0
 8008cac:	460e      	mov	r6, r1
 8008cae:	4690      	mov	r8, r2
 8008cb0:	b127      	cbz	r7, 8008cbc <setvbuf+0x1c>
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	b913      	cbnz	r3, 8008cbc <setvbuf+0x1c>
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	f7ff ff4c 	bl	8008b54 <__sinit>
 8008cbc:	f1b8 0f02 	cmp.w	r8, #2
 8008cc0:	d006      	beq.n	8008cd0 <setvbuf+0x30>
 8008cc2:	f1b8 0f01 	cmp.w	r8, #1
 8008cc6:	f200 809a 	bhi.w	8008dfe <setvbuf+0x15e>
 8008cca:	2d00      	cmp	r5, #0
 8008ccc:	f2c0 8097 	blt.w	8008dfe <setvbuf+0x15e>
 8008cd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cd2:	07d9      	lsls	r1, r3, #31
 8008cd4:	d405      	bmi.n	8008ce2 <setvbuf+0x42>
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	059a      	lsls	r2, r3, #22
 8008cda:	d402      	bmi.n	8008ce2 <setvbuf+0x42>
 8008cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cde:	f000 f9f4 	bl	80090ca <__retarget_lock_acquire_recursive>
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	f000 fd9f 	bl	8009828 <_fflush_r>
 8008cea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cec:	b141      	cbz	r1, 8008d00 <setvbuf+0x60>
 8008cee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cf2:	4299      	cmp	r1, r3
 8008cf4:	d002      	beq.n	8008cfc <setvbuf+0x5c>
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	f000 f9f8 	bl	80090ec <_free_r>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d00:	2300      	movs	r3, #0
 8008d02:	61a3      	str	r3, [r4, #24]
 8008d04:	6063      	str	r3, [r4, #4]
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	061b      	lsls	r3, r3, #24
 8008d0a:	d503      	bpl.n	8008d14 <setvbuf+0x74>
 8008d0c:	6921      	ldr	r1, [r4, #16]
 8008d0e:	4638      	mov	r0, r7
 8008d10:	f000 f9ec 	bl	80090ec <_free_r>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8008d1a:	f023 0303 	bic.w	r3, r3, #3
 8008d1e:	f1b8 0f02 	cmp.w	r8, #2
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	d061      	beq.n	8008dea <setvbuf+0x14a>
 8008d26:	ab01      	add	r3, sp, #4
 8008d28:	466a      	mov	r2, sp
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	f000 fda3 	bl	8009878 <__swhatbuf_r>
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	4318      	orrs	r0, r3
 8008d36:	81a0      	strh	r0, [r4, #12]
 8008d38:	bb2d      	cbnz	r5, 8008d86 <setvbuf+0xe6>
 8008d3a:	9d00      	ldr	r5, [sp, #0]
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f7ff fdbf 	bl	80088c0 <malloc>
 8008d42:	4606      	mov	r6, r0
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d152      	bne.n	8008dee <setvbuf+0x14e>
 8008d48:	f8dd 9000 	ldr.w	r9, [sp]
 8008d4c:	45a9      	cmp	r9, r5
 8008d4e:	d140      	bne.n	8008dd2 <setvbuf+0x132>
 8008d50:	f04f 35ff 	mov.w	r5, #4294967295
 8008d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d58:	f043 0202 	orr.w	r2, r3, #2
 8008d5c:	81a2      	strh	r2, [r4, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	60a2      	str	r2, [r4, #8]
 8008d62:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8008d66:	6022      	str	r2, [r4, #0]
 8008d68:	6122      	str	r2, [r4, #16]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	6162      	str	r2, [r4, #20]
 8008d6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d70:	07d6      	lsls	r6, r2, #31
 8008d72:	d404      	bmi.n	8008d7e <setvbuf+0xde>
 8008d74:	0598      	lsls	r0, r3, #22
 8008d76:	d402      	bmi.n	8008d7e <setvbuf+0xde>
 8008d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d7a:	f000 f9a7 	bl	80090cc <__retarget_lock_release_recursive>
 8008d7e:	4628      	mov	r0, r5
 8008d80:	b003      	add	sp, #12
 8008d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d86:	2e00      	cmp	r6, #0
 8008d88:	d0d8      	beq.n	8008d3c <setvbuf+0x9c>
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	b913      	cbnz	r3, 8008d94 <setvbuf+0xf4>
 8008d8e:	4638      	mov	r0, r7
 8008d90:	f7ff fee0 	bl	8008b54 <__sinit>
 8008d94:	f1b8 0f01 	cmp.w	r8, #1
 8008d98:	bf08      	it	eq
 8008d9a:	89a3      	ldrheq	r3, [r4, #12]
 8008d9c:	6026      	str	r6, [r4, #0]
 8008d9e:	bf04      	itt	eq
 8008da0:	f043 0301 	orreq.w	r3, r3, #1
 8008da4:	81a3      	strheq	r3, [r4, #12]
 8008da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008daa:	f013 0208 	ands.w	r2, r3, #8
 8008dae:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008db2:	d01e      	beq.n	8008df2 <setvbuf+0x152>
 8008db4:	07d9      	lsls	r1, r3, #31
 8008db6:	bf41      	itttt	mi
 8008db8:	2200      	movmi	r2, #0
 8008dba:	426d      	negmi	r5, r5
 8008dbc:	60a2      	strmi	r2, [r4, #8]
 8008dbe:	61a5      	strmi	r5, [r4, #24]
 8008dc0:	bf58      	it	pl
 8008dc2:	60a5      	strpl	r5, [r4, #8]
 8008dc4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008dc6:	07d2      	lsls	r2, r2, #31
 8008dc8:	d401      	bmi.n	8008dce <setvbuf+0x12e>
 8008dca:	059b      	lsls	r3, r3, #22
 8008dcc:	d513      	bpl.n	8008df6 <setvbuf+0x156>
 8008dce:	2500      	movs	r5, #0
 8008dd0:	e7d5      	b.n	8008d7e <setvbuf+0xde>
 8008dd2:	4648      	mov	r0, r9
 8008dd4:	f7ff fd74 	bl	80088c0 <malloc>
 8008dd8:	4606      	mov	r6, r0
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d0b8      	beq.n	8008d50 <setvbuf+0xb0>
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008de4:	81a3      	strh	r3, [r4, #12]
 8008de6:	464d      	mov	r5, r9
 8008de8:	e7cf      	b.n	8008d8a <setvbuf+0xea>
 8008dea:	2500      	movs	r5, #0
 8008dec:	e7b2      	b.n	8008d54 <setvbuf+0xb4>
 8008dee:	46a9      	mov	r9, r5
 8008df0:	e7f5      	b.n	8008dde <setvbuf+0x13e>
 8008df2:	60a2      	str	r2, [r4, #8]
 8008df4:	e7e6      	b.n	8008dc4 <setvbuf+0x124>
 8008df6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008df8:	f000 f968 	bl	80090cc <__retarget_lock_release_recursive>
 8008dfc:	e7e7      	b.n	8008dce <setvbuf+0x12e>
 8008dfe:	f04f 35ff 	mov.w	r5, #4294967295
 8008e02:	e7bc      	b.n	8008d7e <setvbuf+0xde>
 8008e04:	20000418 	.word	0x20000418

08008e08 <__sread>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e10:	f000 f8fc 	bl	800900c <_read_r>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	bfab      	itete	ge
 8008e18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e1c:	181b      	addge	r3, r3, r0
 8008e1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e22:	bfac      	ite	ge
 8008e24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e26:	81a3      	strhlt	r3, [r4, #12]
 8008e28:	bd10      	pop	{r4, pc}

08008e2a <__swrite>:
 8008e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2e:	461f      	mov	r7, r3
 8008e30:	898b      	ldrh	r3, [r1, #12]
 8008e32:	05db      	lsls	r3, r3, #23
 8008e34:	4605      	mov	r5, r0
 8008e36:	460c      	mov	r4, r1
 8008e38:	4616      	mov	r6, r2
 8008e3a:	d505      	bpl.n	8008e48 <__swrite+0x1e>
 8008e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e40:	2302      	movs	r3, #2
 8008e42:	2200      	movs	r2, #0
 8008e44:	f000 f8d0 	bl	8008fe8 <_lseek_r>
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	4632      	mov	r2, r6
 8008e56:	463b      	mov	r3, r7
 8008e58:	4628      	mov	r0, r5
 8008e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5e:	f000 b8f7 	b.w	8009050 <_write_r>

08008e62 <__sseek>:
 8008e62:	b510      	push	{r4, lr}
 8008e64:	460c      	mov	r4, r1
 8008e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e6a:	f000 f8bd 	bl	8008fe8 <_lseek_r>
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	bf15      	itete	ne
 8008e74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e7e:	81a3      	strheq	r3, [r4, #12]
 8008e80:	bf18      	it	ne
 8008e82:	81a3      	strhne	r3, [r4, #12]
 8008e84:	bd10      	pop	{r4, pc}

08008e86 <__sclose>:
 8008e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8a:	f000 b89d 	b.w	8008fc8 <_close_r>

08008e8e <__swbuf_r>:
 8008e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e90:	460e      	mov	r6, r1
 8008e92:	4614      	mov	r4, r2
 8008e94:	4605      	mov	r5, r0
 8008e96:	b118      	cbz	r0, 8008ea0 <__swbuf_r+0x12>
 8008e98:	6a03      	ldr	r3, [r0, #32]
 8008e9a:	b90b      	cbnz	r3, 8008ea0 <__swbuf_r+0x12>
 8008e9c:	f7ff fe5a 	bl	8008b54 <__sinit>
 8008ea0:	69a3      	ldr	r3, [r4, #24]
 8008ea2:	60a3      	str	r3, [r4, #8]
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	071a      	lsls	r2, r3, #28
 8008ea8:	d501      	bpl.n	8008eae <__swbuf_r+0x20>
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	b943      	cbnz	r3, 8008ec0 <__swbuf_r+0x32>
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f000 f82b 	bl	8008f0c <__swsetup_r>
 8008eb6:	b118      	cbz	r0, 8008ec0 <__swbuf_r+0x32>
 8008eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	6922      	ldr	r2, [r4, #16]
 8008ec4:	1a98      	subs	r0, r3, r2
 8008ec6:	6963      	ldr	r3, [r4, #20]
 8008ec8:	b2f6      	uxtb	r6, r6
 8008eca:	4283      	cmp	r3, r0
 8008ecc:	4637      	mov	r7, r6
 8008ece:	dc05      	bgt.n	8008edc <__swbuf_r+0x4e>
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f000 fca8 	bl	8009828 <_fflush_r>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d1ed      	bne.n	8008eb8 <__swbuf_r+0x2a>
 8008edc:	68a3      	ldr	r3, [r4, #8]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	60a3      	str	r3, [r4, #8]
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	6022      	str	r2, [r4, #0]
 8008ee8:	701e      	strb	r6, [r3, #0]
 8008eea:	6962      	ldr	r2, [r4, #20]
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d004      	beq.n	8008efc <__swbuf_r+0x6e>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	07db      	lsls	r3, r3, #31
 8008ef6:	d5e1      	bpl.n	8008ebc <__swbuf_r+0x2e>
 8008ef8:	2e0a      	cmp	r6, #10
 8008efa:	d1df      	bne.n	8008ebc <__swbuf_r+0x2e>
 8008efc:	4621      	mov	r1, r4
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 fc92 	bl	8009828 <_fflush_r>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d0d9      	beq.n	8008ebc <__swbuf_r+0x2e>
 8008f08:	e7d6      	b.n	8008eb8 <__swbuf_r+0x2a>
	...

08008f0c <__swsetup_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4b29      	ldr	r3, [pc, #164]	@ (8008fb4 <__swsetup_r+0xa8>)
 8008f10:	4605      	mov	r5, r0
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	460c      	mov	r4, r1
 8008f16:	b118      	cbz	r0, 8008f20 <__swsetup_r+0x14>
 8008f18:	6a03      	ldr	r3, [r0, #32]
 8008f1a:	b90b      	cbnz	r3, 8008f20 <__swsetup_r+0x14>
 8008f1c:	f7ff fe1a 	bl	8008b54 <__sinit>
 8008f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f24:	0719      	lsls	r1, r3, #28
 8008f26:	d422      	bmi.n	8008f6e <__swsetup_r+0x62>
 8008f28:	06da      	lsls	r2, r3, #27
 8008f2a:	d407      	bmi.n	8008f3c <__swsetup_r+0x30>
 8008f2c:	2209      	movs	r2, #9
 8008f2e:	602a      	str	r2, [r5, #0]
 8008f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f34:	81a3      	strh	r3, [r4, #12]
 8008f36:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3a:	e033      	b.n	8008fa4 <__swsetup_r+0x98>
 8008f3c:	0758      	lsls	r0, r3, #29
 8008f3e:	d512      	bpl.n	8008f66 <__swsetup_r+0x5a>
 8008f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f42:	b141      	cbz	r1, 8008f56 <__swsetup_r+0x4a>
 8008f44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f48:	4299      	cmp	r1, r3
 8008f4a:	d002      	beq.n	8008f52 <__swsetup_r+0x46>
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	f000 f8cd 	bl	80090ec <_free_r>
 8008f52:	2300      	movs	r3, #0
 8008f54:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	6063      	str	r3, [r4, #4]
 8008f62:	6923      	ldr	r3, [r4, #16]
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	f043 0308 	orr.w	r3, r3, #8
 8008f6c:	81a3      	strh	r3, [r4, #12]
 8008f6e:	6923      	ldr	r3, [r4, #16]
 8008f70:	b94b      	cbnz	r3, 8008f86 <__swsetup_r+0x7a>
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f7c:	d003      	beq.n	8008f86 <__swsetup_r+0x7a>
 8008f7e:	4621      	mov	r1, r4
 8008f80:	4628      	mov	r0, r5
 8008f82:	f000 fc9f 	bl	80098c4 <__smakebuf_r>
 8008f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f8a:	f013 0201 	ands.w	r2, r3, #1
 8008f8e:	d00a      	beq.n	8008fa6 <__swsetup_r+0x9a>
 8008f90:	2200      	movs	r2, #0
 8008f92:	60a2      	str	r2, [r4, #8]
 8008f94:	6962      	ldr	r2, [r4, #20]
 8008f96:	4252      	negs	r2, r2
 8008f98:	61a2      	str	r2, [r4, #24]
 8008f9a:	6922      	ldr	r2, [r4, #16]
 8008f9c:	b942      	cbnz	r2, 8008fb0 <__swsetup_r+0xa4>
 8008f9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fa2:	d1c5      	bne.n	8008f30 <__swsetup_r+0x24>
 8008fa4:	bd38      	pop	{r3, r4, r5, pc}
 8008fa6:	0799      	lsls	r1, r3, #30
 8008fa8:	bf58      	it	pl
 8008faa:	6962      	ldrpl	r2, [r4, #20]
 8008fac:	60a2      	str	r2, [r4, #8]
 8008fae:	e7f4      	b.n	8008f9a <__swsetup_r+0x8e>
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e7f7      	b.n	8008fa4 <__swsetup_r+0x98>
 8008fb4:	20000418 	.word	0x20000418

08008fb8 <memset>:
 8008fb8:	4402      	add	r2, r0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d100      	bne.n	8008fc2 <memset+0xa>
 8008fc0:	4770      	bx	lr
 8008fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fc6:	e7f9      	b.n	8008fbc <memset+0x4>

08008fc8 <_close_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4d06      	ldr	r5, [pc, #24]	@ (8008fe4 <_close_r+0x1c>)
 8008fcc:	2300      	movs	r3, #0
 8008fce:	4604      	mov	r4, r0
 8008fd0:	4608      	mov	r0, r1
 8008fd2:	602b      	str	r3, [r5, #0]
 8008fd4:	f7f8 f93e 	bl	8001254 <_close>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d102      	bne.n	8008fe2 <_close_r+0x1a>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	b103      	cbz	r3, 8008fe2 <_close_r+0x1a>
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	bd38      	pop	{r3, r4, r5, pc}
 8008fe4:	2000fbcc 	.word	0x2000fbcc

08008fe8 <_lseek_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d07      	ldr	r5, [pc, #28]	@ (8009008 <_lseek_r+0x20>)
 8008fec:	4604      	mov	r4, r0
 8008fee:	4608      	mov	r0, r1
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	602a      	str	r2, [r5, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f7f8 f938 	bl	800126c <_lseek>
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	d102      	bne.n	8009006 <_lseek_r+0x1e>
 8009000:	682b      	ldr	r3, [r5, #0]
 8009002:	b103      	cbz	r3, 8009006 <_lseek_r+0x1e>
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	bd38      	pop	{r3, r4, r5, pc}
 8009008:	2000fbcc 	.word	0x2000fbcc

0800900c <_read_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d07      	ldr	r5, [pc, #28]	@ (800902c <_read_r+0x20>)
 8009010:	4604      	mov	r4, r0
 8009012:	4608      	mov	r0, r1
 8009014:	4611      	mov	r1, r2
 8009016:	2200      	movs	r2, #0
 8009018:	602a      	str	r2, [r5, #0]
 800901a:	461a      	mov	r2, r3
 800901c:	f7f8 f92e 	bl	800127c <_read>
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	d102      	bne.n	800902a <_read_r+0x1e>
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	b103      	cbz	r3, 800902a <_read_r+0x1e>
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	bd38      	pop	{r3, r4, r5, pc}
 800902c:	2000fbcc 	.word	0x2000fbcc

08009030 <_sbrk_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d06      	ldr	r5, [pc, #24]	@ (800904c <_sbrk_r+0x1c>)
 8009034:	2300      	movs	r3, #0
 8009036:	4604      	mov	r4, r0
 8009038:	4608      	mov	r0, r1
 800903a:	602b      	str	r3, [r5, #0]
 800903c:	f7f9 fd28 	bl	8002a90 <_sbrk>
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	d102      	bne.n	800904a <_sbrk_r+0x1a>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	b103      	cbz	r3, 800904a <_sbrk_r+0x1a>
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	2000fbcc 	.word	0x2000fbcc

08009050 <_write_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4d07      	ldr	r5, [pc, #28]	@ (8009070 <_write_r+0x20>)
 8009054:	4604      	mov	r4, r0
 8009056:	4608      	mov	r0, r1
 8009058:	4611      	mov	r1, r2
 800905a:	2200      	movs	r2, #0
 800905c:	602a      	str	r2, [r5, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	f7f8 f8de 	bl	8001220 <_write>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_write_r+0x1e>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_write_r+0x1e>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	2000fbcc 	.word	0x2000fbcc

08009074 <__errno>:
 8009074:	4b01      	ldr	r3, [pc, #4]	@ (800907c <__errno+0x8>)
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	20000418 	.word	0x20000418

08009080 <__libc_init_array>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	4d0d      	ldr	r5, [pc, #52]	@ (80090b8 <__libc_init_array+0x38>)
 8009084:	4c0d      	ldr	r4, [pc, #52]	@ (80090bc <__libc_init_array+0x3c>)
 8009086:	1b64      	subs	r4, r4, r5
 8009088:	10a4      	asrs	r4, r4, #2
 800908a:	2600      	movs	r6, #0
 800908c:	42a6      	cmp	r6, r4
 800908e:	d109      	bne.n	80090a4 <__libc_init_array+0x24>
 8009090:	4d0b      	ldr	r5, [pc, #44]	@ (80090c0 <__libc_init_array+0x40>)
 8009092:	4c0c      	ldr	r4, [pc, #48]	@ (80090c4 <__libc_init_array+0x44>)
 8009094:	f000 fc74 	bl	8009980 <_init>
 8009098:	1b64      	subs	r4, r4, r5
 800909a:	10a4      	asrs	r4, r4, #2
 800909c:	2600      	movs	r6, #0
 800909e:	42a6      	cmp	r6, r4
 80090a0:	d105      	bne.n	80090ae <__libc_init_array+0x2e>
 80090a2:	bd70      	pop	{r4, r5, r6, pc}
 80090a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a8:	4798      	blx	r3
 80090aa:	3601      	adds	r6, #1
 80090ac:	e7ee      	b.n	800908c <__libc_init_array+0xc>
 80090ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b2:	4798      	blx	r3
 80090b4:	3601      	adds	r6, #1
 80090b6:	e7f2      	b.n	800909e <__libc_init_array+0x1e>
 80090b8:	0801c740 	.word	0x0801c740
 80090bc:	0801c740 	.word	0x0801c740
 80090c0:	0801c740 	.word	0x0801c740
 80090c4:	0801c744 	.word	0x0801c744

080090c8 <__retarget_lock_init_recursive>:
 80090c8:	4770      	bx	lr

080090ca <__retarget_lock_acquire_recursive>:
 80090ca:	4770      	bx	lr

080090cc <__retarget_lock_release_recursive>:
 80090cc:	4770      	bx	lr

080090ce <memcpy>:
 80090ce:	440a      	add	r2, r1
 80090d0:	4291      	cmp	r1, r2
 80090d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80090d6:	d100      	bne.n	80090da <memcpy+0xc>
 80090d8:	4770      	bx	lr
 80090da:	b510      	push	{r4, lr}
 80090dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090e4:	4291      	cmp	r1, r2
 80090e6:	d1f9      	bne.n	80090dc <memcpy+0xe>
 80090e8:	bd10      	pop	{r4, pc}
	...

080090ec <_free_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4605      	mov	r5, r0
 80090f0:	2900      	cmp	r1, #0
 80090f2:	d041      	beq.n	8009178 <_free_r+0x8c>
 80090f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090f8:	1f0c      	subs	r4, r1, #4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bfb8      	it	lt
 80090fe:	18e4      	addlt	r4, r4, r3
 8009100:	f7ff fc90 	bl	8008a24 <__malloc_lock>
 8009104:	4a1d      	ldr	r2, [pc, #116]	@ (800917c <_free_r+0x90>)
 8009106:	6813      	ldr	r3, [r2, #0]
 8009108:	b933      	cbnz	r3, 8009118 <_free_r+0x2c>
 800910a:	6063      	str	r3, [r4, #4]
 800910c:	6014      	str	r4, [r2, #0]
 800910e:	4628      	mov	r0, r5
 8009110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009114:	f7ff bc8c 	b.w	8008a30 <__malloc_unlock>
 8009118:	42a3      	cmp	r3, r4
 800911a:	d908      	bls.n	800912e <_free_r+0x42>
 800911c:	6820      	ldr	r0, [r4, #0]
 800911e:	1821      	adds	r1, r4, r0
 8009120:	428b      	cmp	r3, r1
 8009122:	bf01      	itttt	eq
 8009124:	6819      	ldreq	r1, [r3, #0]
 8009126:	685b      	ldreq	r3, [r3, #4]
 8009128:	1809      	addeq	r1, r1, r0
 800912a:	6021      	streq	r1, [r4, #0]
 800912c:	e7ed      	b.n	800910a <_free_r+0x1e>
 800912e:	461a      	mov	r2, r3
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	b10b      	cbz	r3, 8009138 <_free_r+0x4c>
 8009134:	42a3      	cmp	r3, r4
 8009136:	d9fa      	bls.n	800912e <_free_r+0x42>
 8009138:	6811      	ldr	r1, [r2, #0]
 800913a:	1850      	adds	r0, r2, r1
 800913c:	42a0      	cmp	r0, r4
 800913e:	d10b      	bne.n	8009158 <_free_r+0x6c>
 8009140:	6820      	ldr	r0, [r4, #0]
 8009142:	4401      	add	r1, r0
 8009144:	1850      	adds	r0, r2, r1
 8009146:	4283      	cmp	r3, r0
 8009148:	6011      	str	r1, [r2, #0]
 800914a:	d1e0      	bne.n	800910e <_free_r+0x22>
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	6053      	str	r3, [r2, #4]
 8009152:	4408      	add	r0, r1
 8009154:	6010      	str	r0, [r2, #0]
 8009156:	e7da      	b.n	800910e <_free_r+0x22>
 8009158:	d902      	bls.n	8009160 <_free_r+0x74>
 800915a:	230c      	movs	r3, #12
 800915c:	602b      	str	r3, [r5, #0]
 800915e:	e7d6      	b.n	800910e <_free_r+0x22>
 8009160:	6820      	ldr	r0, [r4, #0]
 8009162:	1821      	adds	r1, r4, r0
 8009164:	428b      	cmp	r3, r1
 8009166:	bf04      	itt	eq
 8009168:	6819      	ldreq	r1, [r3, #0]
 800916a:	685b      	ldreq	r3, [r3, #4]
 800916c:	6063      	str	r3, [r4, #4]
 800916e:	bf04      	itt	eq
 8009170:	1809      	addeq	r1, r1, r0
 8009172:	6021      	streq	r1, [r4, #0]
 8009174:	6054      	str	r4, [r2, #4]
 8009176:	e7ca      	b.n	800910e <_free_r+0x22>
 8009178:	bd38      	pop	{r3, r4, r5, pc}
 800917a:	bf00      	nop
 800917c:	2000fa8c 	.word	0x2000fa8c

08009180 <__sfputc_r>:
 8009180:	6893      	ldr	r3, [r2, #8]
 8009182:	3b01      	subs	r3, #1
 8009184:	2b00      	cmp	r3, #0
 8009186:	b410      	push	{r4}
 8009188:	6093      	str	r3, [r2, #8]
 800918a:	da08      	bge.n	800919e <__sfputc_r+0x1e>
 800918c:	6994      	ldr	r4, [r2, #24]
 800918e:	42a3      	cmp	r3, r4
 8009190:	db01      	blt.n	8009196 <__sfputc_r+0x16>
 8009192:	290a      	cmp	r1, #10
 8009194:	d103      	bne.n	800919e <__sfputc_r+0x1e>
 8009196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800919a:	f7ff be78 	b.w	8008e8e <__swbuf_r>
 800919e:	6813      	ldr	r3, [r2, #0]
 80091a0:	1c58      	adds	r0, r3, #1
 80091a2:	6010      	str	r0, [r2, #0]
 80091a4:	7019      	strb	r1, [r3, #0]
 80091a6:	4608      	mov	r0, r1
 80091a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <__sfputs_r>:
 80091ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b0:	4606      	mov	r6, r0
 80091b2:	460f      	mov	r7, r1
 80091b4:	4614      	mov	r4, r2
 80091b6:	18d5      	adds	r5, r2, r3
 80091b8:	42ac      	cmp	r4, r5
 80091ba:	d101      	bne.n	80091c0 <__sfputs_r+0x12>
 80091bc:	2000      	movs	r0, #0
 80091be:	e007      	b.n	80091d0 <__sfputs_r+0x22>
 80091c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c4:	463a      	mov	r2, r7
 80091c6:	4630      	mov	r0, r6
 80091c8:	f7ff ffda 	bl	8009180 <__sfputc_r>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d1f3      	bne.n	80091b8 <__sfputs_r+0xa>
 80091d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091d4 <_vfiprintf_r>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	460d      	mov	r5, r1
 80091da:	b09d      	sub	sp, #116	@ 0x74
 80091dc:	4614      	mov	r4, r2
 80091de:	4698      	mov	r8, r3
 80091e0:	4606      	mov	r6, r0
 80091e2:	b118      	cbz	r0, 80091ec <_vfiprintf_r+0x18>
 80091e4:	6a03      	ldr	r3, [r0, #32]
 80091e6:	b90b      	cbnz	r3, 80091ec <_vfiprintf_r+0x18>
 80091e8:	f7ff fcb4 	bl	8008b54 <__sinit>
 80091ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ee:	07d9      	lsls	r1, r3, #31
 80091f0:	d405      	bmi.n	80091fe <_vfiprintf_r+0x2a>
 80091f2:	89ab      	ldrh	r3, [r5, #12]
 80091f4:	059a      	lsls	r2, r3, #22
 80091f6:	d402      	bmi.n	80091fe <_vfiprintf_r+0x2a>
 80091f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091fa:	f7ff ff66 	bl	80090ca <__retarget_lock_acquire_recursive>
 80091fe:	89ab      	ldrh	r3, [r5, #12]
 8009200:	071b      	lsls	r3, r3, #28
 8009202:	d501      	bpl.n	8009208 <_vfiprintf_r+0x34>
 8009204:	692b      	ldr	r3, [r5, #16]
 8009206:	b99b      	cbnz	r3, 8009230 <_vfiprintf_r+0x5c>
 8009208:	4629      	mov	r1, r5
 800920a:	4630      	mov	r0, r6
 800920c:	f7ff fe7e 	bl	8008f0c <__swsetup_r>
 8009210:	b170      	cbz	r0, 8009230 <_vfiprintf_r+0x5c>
 8009212:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009214:	07dc      	lsls	r4, r3, #31
 8009216:	d504      	bpl.n	8009222 <_vfiprintf_r+0x4e>
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	b01d      	add	sp, #116	@ 0x74
 800921e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009222:	89ab      	ldrh	r3, [r5, #12]
 8009224:	0598      	lsls	r0, r3, #22
 8009226:	d4f7      	bmi.n	8009218 <_vfiprintf_r+0x44>
 8009228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800922a:	f7ff ff4f 	bl	80090cc <__retarget_lock_release_recursive>
 800922e:	e7f3      	b.n	8009218 <_vfiprintf_r+0x44>
 8009230:	2300      	movs	r3, #0
 8009232:	9309      	str	r3, [sp, #36]	@ 0x24
 8009234:	2320      	movs	r3, #32
 8009236:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800923a:	f8cd 800c 	str.w	r8, [sp, #12]
 800923e:	2330      	movs	r3, #48	@ 0x30
 8009240:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093f0 <_vfiprintf_r+0x21c>
 8009244:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009248:	f04f 0901 	mov.w	r9, #1
 800924c:	4623      	mov	r3, r4
 800924e:	469a      	mov	sl, r3
 8009250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009254:	b10a      	cbz	r2, 800925a <_vfiprintf_r+0x86>
 8009256:	2a25      	cmp	r2, #37	@ 0x25
 8009258:	d1f9      	bne.n	800924e <_vfiprintf_r+0x7a>
 800925a:	ebba 0b04 	subs.w	fp, sl, r4
 800925e:	d00b      	beq.n	8009278 <_vfiprintf_r+0xa4>
 8009260:	465b      	mov	r3, fp
 8009262:	4622      	mov	r2, r4
 8009264:	4629      	mov	r1, r5
 8009266:	4630      	mov	r0, r6
 8009268:	f7ff ffa1 	bl	80091ae <__sfputs_r>
 800926c:	3001      	adds	r0, #1
 800926e:	f000 80a7 	beq.w	80093c0 <_vfiprintf_r+0x1ec>
 8009272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009274:	445a      	add	r2, fp
 8009276:	9209      	str	r2, [sp, #36]	@ 0x24
 8009278:	f89a 3000 	ldrb.w	r3, [sl]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 809f 	beq.w	80093c0 <_vfiprintf_r+0x1ec>
 8009282:	2300      	movs	r3, #0
 8009284:	f04f 32ff 	mov.w	r2, #4294967295
 8009288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800928c:	f10a 0a01 	add.w	sl, sl, #1
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	9307      	str	r3, [sp, #28]
 8009294:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009298:	931a      	str	r3, [sp, #104]	@ 0x68
 800929a:	4654      	mov	r4, sl
 800929c:	2205      	movs	r2, #5
 800929e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a2:	4853      	ldr	r0, [pc, #332]	@ (80093f0 <_vfiprintf_r+0x21c>)
 80092a4:	f7f6 ffa4 	bl	80001f0 <memchr>
 80092a8:	9a04      	ldr	r2, [sp, #16]
 80092aa:	b9d8      	cbnz	r0, 80092e4 <_vfiprintf_r+0x110>
 80092ac:	06d1      	lsls	r1, r2, #27
 80092ae:	bf44      	itt	mi
 80092b0:	2320      	movmi	r3, #32
 80092b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092b6:	0713      	lsls	r3, r2, #28
 80092b8:	bf44      	itt	mi
 80092ba:	232b      	movmi	r3, #43	@ 0x2b
 80092bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092c0:	f89a 3000 	ldrb.w	r3, [sl]
 80092c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80092c6:	d015      	beq.n	80092f4 <_vfiprintf_r+0x120>
 80092c8:	9a07      	ldr	r2, [sp, #28]
 80092ca:	4654      	mov	r4, sl
 80092cc:	2000      	movs	r0, #0
 80092ce:	f04f 0c0a 	mov.w	ip, #10
 80092d2:	4621      	mov	r1, r4
 80092d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d8:	3b30      	subs	r3, #48	@ 0x30
 80092da:	2b09      	cmp	r3, #9
 80092dc:	d94b      	bls.n	8009376 <_vfiprintf_r+0x1a2>
 80092de:	b1b0      	cbz	r0, 800930e <_vfiprintf_r+0x13a>
 80092e0:	9207      	str	r2, [sp, #28]
 80092e2:	e014      	b.n	800930e <_vfiprintf_r+0x13a>
 80092e4:	eba0 0308 	sub.w	r3, r0, r8
 80092e8:	fa09 f303 	lsl.w	r3, r9, r3
 80092ec:	4313      	orrs	r3, r2
 80092ee:	9304      	str	r3, [sp, #16]
 80092f0:	46a2      	mov	sl, r4
 80092f2:	e7d2      	b.n	800929a <_vfiprintf_r+0xc6>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	1d19      	adds	r1, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	9103      	str	r1, [sp, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	bfbb      	ittet	lt
 8009300:	425b      	neglt	r3, r3
 8009302:	f042 0202 	orrlt.w	r2, r2, #2
 8009306:	9307      	strge	r3, [sp, #28]
 8009308:	9307      	strlt	r3, [sp, #28]
 800930a:	bfb8      	it	lt
 800930c:	9204      	strlt	r2, [sp, #16]
 800930e:	7823      	ldrb	r3, [r4, #0]
 8009310:	2b2e      	cmp	r3, #46	@ 0x2e
 8009312:	d10a      	bne.n	800932a <_vfiprintf_r+0x156>
 8009314:	7863      	ldrb	r3, [r4, #1]
 8009316:	2b2a      	cmp	r3, #42	@ 0x2a
 8009318:	d132      	bne.n	8009380 <_vfiprintf_r+0x1ac>
 800931a:	9b03      	ldr	r3, [sp, #12]
 800931c:	1d1a      	adds	r2, r3, #4
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	9203      	str	r2, [sp, #12]
 8009322:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009326:	3402      	adds	r4, #2
 8009328:	9305      	str	r3, [sp, #20]
 800932a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009400 <_vfiprintf_r+0x22c>
 800932e:	7821      	ldrb	r1, [r4, #0]
 8009330:	2203      	movs	r2, #3
 8009332:	4650      	mov	r0, sl
 8009334:	f7f6 ff5c 	bl	80001f0 <memchr>
 8009338:	b138      	cbz	r0, 800934a <_vfiprintf_r+0x176>
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	eba0 000a 	sub.w	r0, r0, sl
 8009340:	2240      	movs	r2, #64	@ 0x40
 8009342:	4082      	lsls	r2, r0
 8009344:	4313      	orrs	r3, r2
 8009346:	3401      	adds	r4, #1
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934e:	4829      	ldr	r0, [pc, #164]	@ (80093f4 <_vfiprintf_r+0x220>)
 8009350:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009354:	2206      	movs	r2, #6
 8009356:	f7f6 ff4b 	bl	80001f0 <memchr>
 800935a:	2800      	cmp	r0, #0
 800935c:	d03f      	beq.n	80093de <_vfiprintf_r+0x20a>
 800935e:	4b26      	ldr	r3, [pc, #152]	@ (80093f8 <_vfiprintf_r+0x224>)
 8009360:	bb1b      	cbnz	r3, 80093aa <_vfiprintf_r+0x1d6>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	3307      	adds	r3, #7
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	3308      	adds	r3, #8
 800936c:	9303      	str	r3, [sp, #12]
 800936e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009370:	443b      	add	r3, r7
 8009372:	9309      	str	r3, [sp, #36]	@ 0x24
 8009374:	e76a      	b.n	800924c <_vfiprintf_r+0x78>
 8009376:	fb0c 3202 	mla	r2, ip, r2, r3
 800937a:	460c      	mov	r4, r1
 800937c:	2001      	movs	r0, #1
 800937e:	e7a8      	b.n	80092d2 <_vfiprintf_r+0xfe>
 8009380:	2300      	movs	r3, #0
 8009382:	3401      	adds	r4, #1
 8009384:	9305      	str	r3, [sp, #20]
 8009386:	4619      	mov	r1, r3
 8009388:	f04f 0c0a 	mov.w	ip, #10
 800938c:	4620      	mov	r0, r4
 800938e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009392:	3a30      	subs	r2, #48	@ 0x30
 8009394:	2a09      	cmp	r2, #9
 8009396:	d903      	bls.n	80093a0 <_vfiprintf_r+0x1cc>
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0c6      	beq.n	800932a <_vfiprintf_r+0x156>
 800939c:	9105      	str	r1, [sp, #20]
 800939e:	e7c4      	b.n	800932a <_vfiprintf_r+0x156>
 80093a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093a4:	4604      	mov	r4, r0
 80093a6:	2301      	movs	r3, #1
 80093a8:	e7f0      	b.n	800938c <_vfiprintf_r+0x1b8>
 80093aa:	ab03      	add	r3, sp, #12
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	462a      	mov	r2, r5
 80093b0:	4b12      	ldr	r3, [pc, #72]	@ (80093fc <_vfiprintf_r+0x228>)
 80093b2:	a904      	add	r1, sp, #16
 80093b4:	4630      	mov	r0, r6
 80093b6:	f3af 8000 	nop.w
 80093ba:	4607      	mov	r7, r0
 80093bc:	1c78      	adds	r0, r7, #1
 80093be:	d1d6      	bne.n	800936e <_vfiprintf_r+0x19a>
 80093c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093c2:	07d9      	lsls	r1, r3, #31
 80093c4:	d405      	bmi.n	80093d2 <_vfiprintf_r+0x1fe>
 80093c6:	89ab      	ldrh	r3, [r5, #12]
 80093c8:	059a      	lsls	r2, r3, #22
 80093ca:	d402      	bmi.n	80093d2 <_vfiprintf_r+0x1fe>
 80093cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ce:	f7ff fe7d 	bl	80090cc <__retarget_lock_release_recursive>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	065b      	lsls	r3, r3, #25
 80093d6:	f53f af1f 	bmi.w	8009218 <_vfiprintf_r+0x44>
 80093da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093dc:	e71e      	b.n	800921c <_vfiprintf_r+0x48>
 80093de:	ab03      	add	r3, sp, #12
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	462a      	mov	r2, r5
 80093e4:	4b05      	ldr	r3, [pc, #20]	@ (80093fc <_vfiprintf_r+0x228>)
 80093e6:	a904      	add	r1, sp, #16
 80093e8:	4630      	mov	r0, r6
 80093ea:	f000 f879 	bl	80094e0 <_printf_i>
 80093ee:	e7e4      	b.n	80093ba <_vfiprintf_r+0x1e6>
 80093f0:	0801c704 	.word	0x0801c704
 80093f4:	0801c70e 	.word	0x0801c70e
 80093f8:	00000000 	.word	0x00000000
 80093fc:	080091af 	.word	0x080091af
 8009400:	0801c70a 	.word	0x0801c70a

08009404 <_printf_common>:
 8009404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009408:	4616      	mov	r6, r2
 800940a:	4698      	mov	r8, r3
 800940c:	688a      	ldr	r2, [r1, #8]
 800940e:	690b      	ldr	r3, [r1, #16]
 8009410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009414:	4293      	cmp	r3, r2
 8009416:	bfb8      	it	lt
 8009418:	4613      	movlt	r3, r2
 800941a:	6033      	str	r3, [r6, #0]
 800941c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009420:	4607      	mov	r7, r0
 8009422:	460c      	mov	r4, r1
 8009424:	b10a      	cbz	r2, 800942a <_printf_common+0x26>
 8009426:	3301      	adds	r3, #1
 8009428:	6033      	str	r3, [r6, #0]
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	0699      	lsls	r1, r3, #26
 800942e:	bf42      	ittt	mi
 8009430:	6833      	ldrmi	r3, [r6, #0]
 8009432:	3302      	addmi	r3, #2
 8009434:	6033      	strmi	r3, [r6, #0]
 8009436:	6825      	ldr	r5, [r4, #0]
 8009438:	f015 0506 	ands.w	r5, r5, #6
 800943c:	d106      	bne.n	800944c <_printf_common+0x48>
 800943e:	f104 0a19 	add.w	sl, r4, #25
 8009442:	68e3      	ldr	r3, [r4, #12]
 8009444:	6832      	ldr	r2, [r6, #0]
 8009446:	1a9b      	subs	r3, r3, r2
 8009448:	42ab      	cmp	r3, r5
 800944a:	dc26      	bgt.n	800949a <_printf_common+0x96>
 800944c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009450:	6822      	ldr	r2, [r4, #0]
 8009452:	3b00      	subs	r3, #0
 8009454:	bf18      	it	ne
 8009456:	2301      	movne	r3, #1
 8009458:	0692      	lsls	r2, r2, #26
 800945a:	d42b      	bmi.n	80094b4 <_printf_common+0xb0>
 800945c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009460:	4641      	mov	r1, r8
 8009462:	4638      	mov	r0, r7
 8009464:	47c8      	blx	r9
 8009466:	3001      	adds	r0, #1
 8009468:	d01e      	beq.n	80094a8 <_printf_common+0xa4>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	6922      	ldr	r2, [r4, #16]
 800946e:	f003 0306 	and.w	r3, r3, #6
 8009472:	2b04      	cmp	r3, #4
 8009474:	bf02      	ittt	eq
 8009476:	68e5      	ldreq	r5, [r4, #12]
 8009478:	6833      	ldreq	r3, [r6, #0]
 800947a:	1aed      	subeq	r5, r5, r3
 800947c:	68a3      	ldr	r3, [r4, #8]
 800947e:	bf0c      	ite	eq
 8009480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009484:	2500      	movne	r5, #0
 8009486:	4293      	cmp	r3, r2
 8009488:	bfc4      	itt	gt
 800948a:	1a9b      	subgt	r3, r3, r2
 800948c:	18ed      	addgt	r5, r5, r3
 800948e:	2600      	movs	r6, #0
 8009490:	341a      	adds	r4, #26
 8009492:	42b5      	cmp	r5, r6
 8009494:	d11a      	bne.n	80094cc <_printf_common+0xc8>
 8009496:	2000      	movs	r0, #0
 8009498:	e008      	b.n	80094ac <_printf_common+0xa8>
 800949a:	2301      	movs	r3, #1
 800949c:	4652      	mov	r2, sl
 800949e:	4641      	mov	r1, r8
 80094a0:	4638      	mov	r0, r7
 80094a2:	47c8      	blx	r9
 80094a4:	3001      	adds	r0, #1
 80094a6:	d103      	bne.n	80094b0 <_printf_common+0xac>
 80094a8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b0:	3501      	adds	r5, #1
 80094b2:	e7c6      	b.n	8009442 <_printf_common+0x3e>
 80094b4:	18e1      	adds	r1, r4, r3
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	2030      	movs	r0, #48	@ 0x30
 80094ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094be:	4422      	add	r2, r4
 80094c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094c8:	3302      	adds	r3, #2
 80094ca:	e7c7      	b.n	800945c <_printf_common+0x58>
 80094cc:	2301      	movs	r3, #1
 80094ce:	4622      	mov	r2, r4
 80094d0:	4641      	mov	r1, r8
 80094d2:	4638      	mov	r0, r7
 80094d4:	47c8      	blx	r9
 80094d6:	3001      	adds	r0, #1
 80094d8:	d0e6      	beq.n	80094a8 <_printf_common+0xa4>
 80094da:	3601      	adds	r6, #1
 80094dc:	e7d9      	b.n	8009492 <_printf_common+0x8e>
	...

080094e0 <_printf_i>:
 80094e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094e4:	7e0f      	ldrb	r7, [r1, #24]
 80094e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094e8:	2f78      	cmp	r7, #120	@ 0x78
 80094ea:	4691      	mov	r9, r2
 80094ec:	4680      	mov	r8, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	469a      	mov	sl, r3
 80094f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094f6:	d807      	bhi.n	8009508 <_printf_i+0x28>
 80094f8:	2f62      	cmp	r7, #98	@ 0x62
 80094fa:	d80a      	bhi.n	8009512 <_printf_i+0x32>
 80094fc:	2f00      	cmp	r7, #0
 80094fe:	f000 80d2 	beq.w	80096a6 <_printf_i+0x1c6>
 8009502:	2f58      	cmp	r7, #88	@ 0x58
 8009504:	f000 80b9 	beq.w	800967a <_printf_i+0x19a>
 8009508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800950c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009510:	e03a      	b.n	8009588 <_printf_i+0xa8>
 8009512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009516:	2b15      	cmp	r3, #21
 8009518:	d8f6      	bhi.n	8009508 <_printf_i+0x28>
 800951a:	a101      	add	r1, pc, #4	@ (adr r1, 8009520 <_printf_i+0x40>)
 800951c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009520:	08009579 	.word	0x08009579
 8009524:	0800958d 	.word	0x0800958d
 8009528:	08009509 	.word	0x08009509
 800952c:	08009509 	.word	0x08009509
 8009530:	08009509 	.word	0x08009509
 8009534:	08009509 	.word	0x08009509
 8009538:	0800958d 	.word	0x0800958d
 800953c:	08009509 	.word	0x08009509
 8009540:	08009509 	.word	0x08009509
 8009544:	08009509 	.word	0x08009509
 8009548:	08009509 	.word	0x08009509
 800954c:	0800968d 	.word	0x0800968d
 8009550:	080095b7 	.word	0x080095b7
 8009554:	08009647 	.word	0x08009647
 8009558:	08009509 	.word	0x08009509
 800955c:	08009509 	.word	0x08009509
 8009560:	080096af 	.word	0x080096af
 8009564:	08009509 	.word	0x08009509
 8009568:	080095b7 	.word	0x080095b7
 800956c:	08009509 	.word	0x08009509
 8009570:	08009509 	.word	0x08009509
 8009574:	0800964f 	.word	0x0800964f
 8009578:	6833      	ldr	r3, [r6, #0]
 800957a:	1d1a      	adds	r2, r3, #4
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6032      	str	r2, [r6, #0]
 8009580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009588:	2301      	movs	r3, #1
 800958a:	e09d      	b.n	80096c8 <_printf_i+0x1e8>
 800958c:	6833      	ldr	r3, [r6, #0]
 800958e:	6820      	ldr	r0, [r4, #0]
 8009590:	1d19      	adds	r1, r3, #4
 8009592:	6031      	str	r1, [r6, #0]
 8009594:	0606      	lsls	r6, r0, #24
 8009596:	d501      	bpl.n	800959c <_printf_i+0xbc>
 8009598:	681d      	ldr	r5, [r3, #0]
 800959a:	e003      	b.n	80095a4 <_printf_i+0xc4>
 800959c:	0645      	lsls	r5, r0, #25
 800959e:	d5fb      	bpl.n	8009598 <_printf_i+0xb8>
 80095a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095a4:	2d00      	cmp	r5, #0
 80095a6:	da03      	bge.n	80095b0 <_printf_i+0xd0>
 80095a8:	232d      	movs	r3, #45	@ 0x2d
 80095aa:	426d      	negs	r5, r5
 80095ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095b0:	4859      	ldr	r0, [pc, #356]	@ (8009718 <_printf_i+0x238>)
 80095b2:	230a      	movs	r3, #10
 80095b4:	e011      	b.n	80095da <_printf_i+0xfa>
 80095b6:	6821      	ldr	r1, [r4, #0]
 80095b8:	6833      	ldr	r3, [r6, #0]
 80095ba:	0608      	lsls	r0, r1, #24
 80095bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80095c0:	d402      	bmi.n	80095c8 <_printf_i+0xe8>
 80095c2:	0649      	lsls	r1, r1, #25
 80095c4:	bf48      	it	mi
 80095c6:	b2ad      	uxthmi	r5, r5
 80095c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80095ca:	4853      	ldr	r0, [pc, #332]	@ (8009718 <_printf_i+0x238>)
 80095cc:	6033      	str	r3, [r6, #0]
 80095ce:	bf14      	ite	ne
 80095d0:	230a      	movne	r3, #10
 80095d2:	2308      	moveq	r3, #8
 80095d4:	2100      	movs	r1, #0
 80095d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095da:	6866      	ldr	r6, [r4, #4]
 80095dc:	60a6      	str	r6, [r4, #8]
 80095de:	2e00      	cmp	r6, #0
 80095e0:	bfa2      	ittt	ge
 80095e2:	6821      	ldrge	r1, [r4, #0]
 80095e4:	f021 0104 	bicge.w	r1, r1, #4
 80095e8:	6021      	strge	r1, [r4, #0]
 80095ea:	b90d      	cbnz	r5, 80095f0 <_printf_i+0x110>
 80095ec:	2e00      	cmp	r6, #0
 80095ee:	d04b      	beq.n	8009688 <_printf_i+0x1a8>
 80095f0:	4616      	mov	r6, r2
 80095f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80095f6:	fb03 5711 	mls	r7, r3, r1, r5
 80095fa:	5dc7      	ldrb	r7, [r0, r7]
 80095fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009600:	462f      	mov	r7, r5
 8009602:	42bb      	cmp	r3, r7
 8009604:	460d      	mov	r5, r1
 8009606:	d9f4      	bls.n	80095f2 <_printf_i+0x112>
 8009608:	2b08      	cmp	r3, #8
 800960a:	d10b      	bne.n	8009624 <_printf_i+0x144>
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	07df      	lsls	r7, r3, #31
 8009610:	d508      	bpl.n	8009624 <_printf_i+0x144>
 8009612:	6923      	ldr	r3, [r4, #16]
 8009614:	6861      	ldr	r1, [r4, #4]
 8009616:	4299      	cmp	r1, r3
 8009618:	bfde      	ittt	le
 800961a:	2330      	movle	r3, #48	@ 0x30
 800961c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009620:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009624:	1b92      	subs	r2, r2, r6
 8009626:	6122      	str	r2, [r4, #16]
 8009628:	f8cd a000 	str.w	sl, [sp]
 800962c:	464b      	mov	r3, r9
 800962e:	aa03      	add	r2, sp, #12
 8009630:	4621      	mov	r1, r4
 8009632:	4640      	mov	r0, r8
 8009634:	f7ff fee6 	bl	8009404 <_printf_common>
 8009638:	3001      	adds	r0, #1
 800963a:	d14a      	bne.n	80096d2 <_printf_i+0x1f2>
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	b004      	add	sp, #16
 8009642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	f043 0320 	orr.w	r3, r3, #32
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	4833      	ldr	r0, [pc, #204]	@ (800971c <_printf_i+0x23c>)
 8009650:	2778      	movs	r7, #120	@ 0x78
 8009652:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	6831      	ldr	r1, [r6, #0]
 800965a:	061f      	lsls	r7, r3, #24
 800965c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009660:	d402      	bmi.n	8009668 <_printf_i+0x188>
 8009662:	065f      	lsls	r7, r3, #25
 8009664:	bf48      	it	mi
 8009666:	b2ad      	uxthmi	r5, r5
 8009668:	6031      	str	r1, [r6, #0]
 800966a:	07d9      	lsls	r1, r3, #31
 800966c:	bf44      	itt	mi
 800966e:	f043 0320 	orrmi.w	r3, r3, #32
 8009672:	6023      	strmi	r3, [r4, #0]
 8009674:	b11d      	cbz	r5, 800967e <_printf_i+0x19e>
 8009676:	2310      	movs	r3, #16
 8009678:	e7ac      	b.n	80095d4 <_printf_i+0xf4>
 800967a:	4827      	ldr	r0, [pc, #156]	@ (8009718 <_printf_i+0x238>)
 800967c:	e7e9      	b.n	8009652 <_printf_i+0x172>
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	f023 0320 	bic.w	r3, r3, #32
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	e7f6      	b.n	8009676 <_printf_i+0x196>
 8009688:	4616      	mov	r6, r2
 800968a:	e7bd      	b.n	8009608 <_printf_i+0x128>
 800968c:	6833      	ldr	r3, [r6, #0]
 800968e:	6825      	ldr	r5, [r4, #0]
 8009690:	6961      	ldr	r1, [r4, #20]
 8009692:	1d18      	adds	r0, r3, #4
 8009694:	6030      	str	r0, [r6, #0]
 8009696:	062e      	lsls	r6, r5, #24
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	d501      	bpl.n	80096a0 <_printf_i+0x1c0>
 800969c:	6019      	str	r1, [r3, #0]
 800969e:	e002      	b.n	80096a6 <_printf_i+0x1c6>
 80096a0:	0668      	lsls	r0, r5, #25
 80096a2:	d5fb      	bpl.n	800969c <_printf_i+0x1bc>
 80096a4:	8019      	strh	r1, [r3, #0]
 80096a6:	2300      	movs	r3, #0
 80096a8:	6123      	str	r3, [r4, #16]
 80096aa:	4616      	mov	r6, r2
 80096ac:	e7bc      	b.n	8009628 <_printf_i+0x148>
 80096ae:	6833      	ldr	r3, [r6, #0]
 80096b0:	1d1a      	adds	r2, r3, #4
 80096b2:	6032      	str	r2, [r6, #0]
 80096b4:	681e      	ldr	r6, [r3, #0]
 80096b6:	6862      	ldr	r2, [r4, #4]
 80096b8:	2100      	movs	r1, #0
 80096ba:	4630      	mov	r0, r6
 80096bc:	f7f6 fd98 	bl	80001f0 <memchr>
 80096c0:	b108      	cbz	r0, 80096c6 <_printf_i+0x1e6>
 80096c2:	1b80      	subs	r0, r0, r6
 80096c4:	6060      	str	r0, [r4, #4]
 80096c6:	6863      	ldr	r3, [r4, #4]
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	2300      	movs	r3, #0
 80096cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096d0:	e7aa      	b.n	8009628 <_printf_i+0x148>
 80096d2:	6923      	ldr	r3, [r4, #16]
 80096d4:	4632      	mov	r2, r6
 80096d6:	4649      	mov	r1, r9
 80096d8:	4640      	mov	r0, r8
 80096da:	47d0      	blx	sl
 80096dc:	3001      	adds	r0, #1
 80096de:	d0ad      	beq.n	800963c <_printf_i+0x15c>
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	079b      	lsls	r3, r3, #30
 80096e4:	d413      	bmi.n	800970e <_printf_i+0x22e>
 80096e6:	68e0      	ldr	r0, [r4, #12]
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	4298      	cmp	r0, r3
 80096ec:	bfb8      	it	lt
 80096ee:	4618      	movlt	r0, r3
 80096f0:	e7a6      	b.n	8009640 <_printf_i+0x160>
 80096f2:	2301      	movs	r3, #1
 80096f4:	4632      	mov	r2, r6
 80096f6:	4649      	mov	r1, r9
 80096f8:	4640      	mov	r0, r8
 80096fa:	47d0      	blx	sl
 80096fc:	3001      	adds	r0, #1
 80096fe:	d09d      	beq.n	800963c <_printf_i+0x15c>
 8009700:	3501      	adds	r5, #1
 8009702:	68e3      	ldr	r3, [r4, #12]
 8009704:	9903      	ldr	r1, [sp, #12]
 8009706:	1a5b      	subs	r3, r3, r1
 8009708:	42ab      	cmp	r3, r5
 800970a:	dcf2      	bgt.n	80096f2 <_printf_i+0x212>
 800970c:	e7eb      	b.n	80096e6 <_printf_i+0x206>
 800970e:	2500      	movs	r5, #0
 8009710:	f104 0619 	add.w	r6, r4, #25
 8009714:	e7f5      	b.n	8009702 <_printf_i+0x222>
 8009716:	bf00      	nop
 8009718:	0801c715 	.word	0x0801c715
 800971c:	0801c726 	.word	0x0801c726

08009720 <__sflush_r>:
 8009720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009728:	0716      	lsls	r6, r2, #28
 800972a:	4605      	mov	r5, r0
 800972c:	460c      	mov	r4, r1
 800972e:	d454      	bmi.n	80097da <__sflush_r+0xba>
 8009730:	684b      	ldr	r3, [r1, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	dc02      	bgt.n	800973c <__sflush_r+0x1c>
 8009736:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009738:	2b00      	cmp	r3, #0
 800973a:	dd48      	ble.n	80097ce <__sflush_r+0xae>
 800973c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800973e:	2e00      	cmp	r6, #0
 8009740:	d045      	beq.n	80097ce <__sflush_r+0xae>
 8009742:	2300      	movs	r3, #0
 8009744:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009748:	682f      	ldr	r7, [r5, #0]
 800974a:	6a21      	ldr	r1, [r4, #32]
 800974c:	602b      	str	r3, [r5, #0]
 800974e:	d030      	beq.n	80097b2 <__sflush_r+0x92>
 8009750:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	0759      	lsls	r1, r3, #29
 8009756:	d505      	bpl.n	8009764 <__sflush_r+0x44>
 8009758:	6863      	ldr	r3, [r4, #4]
 800975a:	1ad2      	subs	r2, r2, r3
 800975c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800975e:	b10b      	cbz	r3, 8009764 <__sflush_r+0x44>
 8009760:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009762:	1ad2      	subs	r2, r2, r3
 8009764:	2300      	movs	r3, #0
 8009766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009768:	6a21      	ldr	r1, [r4, #32]
 800976a:	4628      	mov	r0, r5
 800976c:	47b0      	blx	r6
 800976e:	1c43      	adds	r3, r0, #1
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	d106      	bne.n	8009782 <__sflush_r+0x62>
 8009774:	6829      	ldr	r1, [r5, #0]
 8009776:	291d      	cmp	r1, #29
 8009778:	d82b      	bhi.n	80097d2 <__sflush_r+0xb2>
 800977a:	4a2a      	ldr	r2, [pc, #168]	@ (8009824 <__sflush_r+0x104>)
 800977c:	410a      	asrs	r2, r1
 800977e:	07d6      	lsls	r6, r2, #31
 8009780:	d427      	bmi.n	80097d2 <__sflush_r+0xb2>
 8009782:	2200      	movs	r2, #0
 8009784:	6062      	str	r2, [r4, #4]
 8009786:	04d9      	lsls	r1, r3, #19
 8009788:	6922      	ldr	r2, [r4, #16]
 800978a:	6022      	str	r2, [r4, #0]
 800978c:	d504      	bpl.n	8009798 <__sflush_r+0x78>
 800978e:	1c42      	adds	r2, r0, #1
 8009790:	d101      	bne.n	8009796 <__sflush_r+0x76>
 8009792:	682b      	ldr	r3, [r5, #0]
 8009794:	b903      	cbnz	r3, 8009798 <__sflush_r+0x78>
 8009796:	6560      	str	r0, [r4, #84]	@ 0x54
 8009798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800979a:	602f      	str	r7, [r5, #0]
 800979c:	b1b9      	cbz	r1, 80097ce <__sflush_r+0xae>
 800979e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097a2:	4299      	cmp	r1, r3
 80097a4:	d002      	beq.n	80097ac <__sflush_r+0x8c>
 80097a6:	4628      	mov	r0, r5
 80097a8:	f7ff fca0 	bl	80090ec <_free_r>
 80097ac:	2300      	movs	r3, #0
 80097ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80097b0:	e00d      	b.n	80097ce <__sflush_r+0xae>
 80097b2:	2301      	movs	r3, #1
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b0      	blx	r6
 80097b8:	4602      	mov	r2, r0
 80097ba:	1c50      	adds	r0, r2, #1
 80097bc:	d1c9      	bne.n	8009752 <__sflush_r+0x32>
 80097be:	682b      	ldr	r3, [r5, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d0c6      	beq.n	8009752 <__sflush_r+0x32>
 80097c4:	2b1d      	cmp	r3, #29
 80097c6:	d001      	beq.n	80097cc <__sflush_r+0xac>
 80097c8:	2b16      	cmp	r3, #22
 80097ca:	d11e      	bne.n	800980a <__sflush_r+0xea>
 80097cc:	602f      	str	r7, [r5, #0]
 80097ce:	2000      	movs	r0, #0
 80097d0:	e022      	b.n	8009818 <__sflush_r+0xf8>
 80097d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097d6:	b21b      	sxth	r3, r3
 80097d8:	e01b      	b.n	8009812 <__sflush_r+0xf2>
 80097da:	690f      	ldr	r7, [r1, #16]
 80097dc:	2f00      	cmp	r7, #0
 80097de:	d0f6      	beq.n	80097ce <__sflush_r+0xae>
 80097e0:	0793      	lsls	r3, r2, #30
 80097e2:	680e      	ldr	r6, [r1, #0]
 80097e4:	bf08      	it	eq
 80097e6:	694b      	ldreq	r3, [r1, #20]
 80097e8:	600f      	str	r7, [r1, #0]
 80097ea:	bf18      	it	ne
 80097ec:	2300      	movne	r3, #0
 80097ee:	eba6 0807 	sub.w	r8, r6, r7
 80097f2:	608b      	str	r3, [r1, #8]
 80097f4:	f1b8 0f00 	cmp.w	r8, #0
 80097f8:	dde9      	ble.n	80097ce <__sflush_r+0xae>
 80097fa:	6a21      	ldr	r1, [r4, #32]
 80097fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80097fe:	4643      	mov	r3, r8
 8009800:	463a      	mov	r2, r7
 8009802:	4628      	mov	r0, r5
 8009804:	47b0      	blx	r6
 8009806:	2800      	cmp	r0, #0
 8009808:	dc08      	bgt.n	800981c <__sflush_r+0xfc>
 800980a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800980e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009812:	81a3      	strh	r3, [r4, #12]
 8009814:	f04f 30ff 	mov.w	r0, #4294967295
 8009818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800981c:	4407      	add	r7, r0
 800981e:	eba8 0800 	sub.w	r8, r8, r0
 8009822:	e7e7      	b.n	80097f4 <__sflush_r+0xd4>
 8009824:	dfbffffe 	.word	0xdfbffffe

08009828 <_fflush_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	690b      	ldr	r3, [r1, #16]
 800982c:	4605      	mov	r5, r0
 800982e:	460c      	mov	r4, r1
 8009830:	b913      	cbnz	r3, 8009838 <_fflush_r+0x10>
 8009832:	2500      	movs	r5, #0
 8009834:	4628      	mov	r0, r5
 8009836:	bd38      	pop	{r3, r4, r5, pc}
 8009838:	b118      	cbz	r0, 8009842 <_fflush_r+0x1a>
 800983a:	6a03      	ldr	r3, [r0, #32]
 800983c:	b90b      	cbnz	r3, 8009842 <_fflush_r+0x1a>
 800983e:	f7ff f989 	bl	8008b54 <__sinit>
 8009842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0f3      	beq.n	8009832 <_fflush_r+0xa>
 800984a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800984c:	07d0      	lsls	r0, r2, #31
 800984e:	d404      	bmi.n	800985a <_fflush_r+0x32>
 8009850:	0599      	lsls	r1, r3, #22
 8009852:	d402      	bmi.n	800985a <_fflush_r+0x32>
 8009854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009856:	f7ff fc38 	bl	80090ca <__retarget_lock_acquire_recursive>
 800985a:	4628      	mov	r0, r5
 800985c:	4621      	mov	r1, r4
 800985e:	f7ff ff5f 	bl	8009720 <__sflush_r>
 8009862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009864:	07da      	lsls	r2, r3, #31
 8009866:	4605      	mov	r5, r0
 8009868:	d4e4      	bmi.n	8009834 <_fflush_r+0xc>
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	059b      	lsls	r3, r3, #22
 800986e:	d4e1      	bmi.n	8009834 <_fflush_r+0xc>
 8009870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009872:	f7ff fc2b 	bl	80090cc <__retarget_lock_release_recursive>
 8009876:	e7dd      	b.n	8009834 <_fflush_r+0xc>

08009878 <__swhatbuf_r>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	460c      	mov	r4, r1
 800987c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009880:	2900      	cmp	r1, #0
 8009882:	b096      	sub	sp, #88	@ 0x58
 8009884:	4615      	mov	r5, r2
 8009886:	461e      	mov	r6, r3
 8009888:	da0d      	bge.n	80098a6 <__swhatbuf_r+0x2e>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009890:	f04f 0100 	mov.w	r1, #0
 8009894:	bf14      	ite	ne
 8009896:	2340      	movne	r3, #64	@ 0x40
 8009898:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800989c:	2000      	movs	r0, #0
 800989e:	6031      	str	r1, [r6, #0]
 80098a0:	602b      	str	r3, [r5, #0]
 80098a2:	b016      	add	sp, #88	@ 0x58
 80098a4:	bd70      	pop	{r4, r5, r6, pc}
 80098a6:	466a      	mov	r2, sp
 80098a8:	f000 f848 	bl	800993c <_fstat_r>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	dbec      	blt.n	800988a <__swhatbuf_r+0x12>
 80098b0:	9901      	ldr	r1, [sp, #4]
 80098b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80098b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80098ba:	4259      	negs	r1, r3
 80098bc:	4159      	adcs	r1, r3
 80098be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098c2:	e7eb      	b.n	800989c <__swhatbuf_r+0x24>

080098c4 <__smakebuf_r>:
 80098c4:	898b      	ldrh	r3, [r1, #12]
 80098c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098c8:	079d      	lsls	r5, r3, #30
 80098ca:	4606      	mov	r6, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	d507      	bpl.n	80098e0 <__smakebuf_r+0x1c>
 80098d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098d4:	6023      	str	r3, [r4, #0]
 80098d6:	6123      	str	r3, [r4, #16]
 80098d8:	2301      	movs	r3, #1
 80098da:	6163      	str	r3, [r4, #20]
 80098dc:	b003      	add	sp, #12
 80098de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098e0:	ab01      	add	r3, sp, #4
 80098e2:	466a      	mov	r2, sp
 80098e4:	f7ff ffc8 	bl	8009878 <__swhatbuf_r>
 80098e8:	9f00      	ldr	r7, [sp, #0]
 80098ea:	4605      	mov	r5, r0
 80098ec:	4639      	mov	r1, r7
 80098ee:	4630      	mov	r0, r6
 80098f0:	f7ff f818 	bl	8008924 <_malloc_r>
 80098f4:	b948      	cbnz	r0, 800990a <__smakebuf_r+0x46>
 80098f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098fa:	059a      	lsls	r2, r3, #22
 80098fc:	d4ee      	bmi.n	80098dc <__smakebuf_r+0x18>
 80098fe:	f023 0303 	bic.w	r3, r3, #3
 8009902:	f043 0302 	orr.w	r3, r3, #2
 8009906:	81a3      	strh	r3, [r4, #12]
 8009908:	e7e2      	b.n	80098d0 <__smakebuf_r+0xc>
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	6020      	str	r0, [r4, #0]
 800990e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	9b01      	ldr	r3, [sp, #4]
 8009916:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800991a:	b15b      	cbz	r3, 8009934 <__smakebuf_r+0x70>
 800991c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009920:	4630      	mov	r0, r6
 8009922:	f000 f81d 	bl	8009960 <_isatty_r>
 8009926:	b128      	cbz	r0, 8009934 <__smakebuf_r+0x70>
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	f023 0303 	bic.w	r3, r3, #3
 800992e:	f043 0301 	orr.w	r3, r3, #1
 8009932:	81a3      	strh	r3, [r4, #12]
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	431d      	orrs	r5, r3
 8009938:	81a5      	strh	r5, [r4, #12]
 800993a:	e7cf      	b.n	80098dc <__smakebuf_r+0x18>

0800993c <_fstat_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	@ (800995c <_fstat_r+0x20>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	602b      	str	r3, [r5, #0]
 800994a:	f7f7 fcaf 	bl	80012ac <_fstat>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d102      	bne.n	8009958 <_fstat_r+0x1c>
 8009952:	682b      	ldr	r3, [r5, #0]
 8009954:	b103      	cbz	r3, 8009958 <_fstat_r+0x1c>
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	2000fbcc 	.word	0x2000fbcc

08009960 <_isatty_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	@ (800997c <_isatty_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7f7 fc4c 	bl	8001208 <_isatty>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_isatty_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_isatty_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	2000fbcc 	.word	0x2000fbcc

08009980 <_init>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr

0800998c <_fini>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	bf00      	nop
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr
