
reoptimization_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000793c  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001288c  08007aec  08007aec  00008aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a378  0801a378  0001c468  2**0
                  CONTENTS
  4 .ARM          00000008  0801a378  0801a378  0001b378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a380  0801a380  0001c468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a380  0801a380  0001b380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a384  0801a384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  0801a388  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f700  20000468  0801a7f0  0001c468  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000fb68  0801a7f0  0001cb68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c468  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d8ff  00000000  00000000  0001c498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f76  00000000  00000000  00059d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001b26e  00000000  00000000  00060d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a0  00000000  00000000  0007bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00005ec8  00000000  00000000  0007d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030e66  00000000  00000000  000836e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00049984  00000000  00000000  000b454e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012387d  00000000  00000000  000fded2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0022174f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f0c  00000000  00000000  0022180c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00226718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000715e  00000000  00000000  0022677f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000010f8  00000000  00000000  0022d8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000468 	.word	0x20000468
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ad4 	.word	0x08007ad4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000046c 	.word	0x2000046c
 80001ec:	08007ad4 	.word	0x08007ad4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e0:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e2:	4827      	ldr	r0, [pc, #156]	@ (8000580 <MX_ADC1_Init+0xa0>)
 80004e4:	4a27      	ldr	r2, [pc, #156]	@ (8000584 <MX_ADC1_Init+0xa4>)
 80004e6:	6002      	str	r2, [r0, #0]
{
 80004e8:	b08a      	sub	sp, #40	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80004ea:	f44f 11a0 	mov.w	r1, #1310720	@ 0x140000
  ADC_MultiModeTypeDef multimode = {0};
 80004ee:	2300      	movs	r3, #0
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 80004f0:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80004f2:	6041      	str	r1, [r0, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f4:	2404      	movs	r4, #4
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004f6:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80004fa:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
  ADC_MultiModeTypeDef multimode = {0};
 80004fe:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000502:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000506:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800050a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000512:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000516:	e9c0 1c0a 	strd	r1, ip, [r0, #40]	@ 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	9309      	str	r3, [sp, #36]	@ 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800051c:	8303      	strh	r3, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 800051e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000520:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000524:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000528:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800052a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052e:	f002 f9cb 	bl	80028c8 <HAL_ADC_Init>
 8000532:	b9d0      	cbnz	r0, 800056a <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000534:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000536:	4812      	ldr	r0, [pc, #72]	@ (8000580 <MX_ADC1_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000538:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800053a:	a901      	add	r1, sp, #4
 800053c:	f002 ffd0 	bl	80034e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000540:	b9d0      	cbnz	r0, 8000578 <MX_ADC1_Init+0x98>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000542:	f04f 0e00 	mov.w	lr, #0
  sConfig.Channel = ADC_CHANNEL_5;
 8000546:	4a10      	ldr	r2, [pc, #64]	@ (8000588 <MX_ADC1_Init+0xa8>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000548:	480d      	ldr	r0, [pc, #52]	@ (8000580 <MX_ADC1_Init+0xa0>)
  sConfig.Channel = ADC_CHANNEL_5;
 800054a:	9204      	str	r2, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800054c:	2406      	movs	r4, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800054e:	237f      	movs	r3, #127	@ 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000550:	f04f 0c04 	mov.w	ip, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000554:	a904      	add	r1, sp, #16
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000556:	e9cd 4e05 	strd	r4, lr, [sp, #20]
  sConfig.Offset = 0;
 800055a:	e9cd ce08 	strd	ip, lr, [sp, #32]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800055e:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000560:	f002 fb04 	bl	8002b6c <HAL_ADC_ConfigChannel>
 8000564:	b920      	cbnz	r0, 8000570 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000566:	b00a      	add	sp, #40	@ 0x28
 8000568:	bd10      	pop	{r4, pc}
    Error_Handler();
 800056a:	f000 fb2f 	bl	8000bcc <Error_Handler>
 800056e:	e7e1      	b.n	8000534 <MX_ADC1_Init+0x54>
    Error_Handler();
 8000570:	f000 fb2c 	bl	8000bcc <Error_Handler>
}
 8000574:	b00a      	add	sp, #40	@ 0x28
 8000576:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000578:	f000 fb28 	bl	8000bcc <Error_Handler>
 800057c:	e7e1      	b.n	8000542 <MX_ADC1_Init+0x62>
 800057e:	bf00      	nop
 8000580:	200004cc 	.word	0x200004cc
 8000584:	50040000 	.word	0x50040000
 8000588:	14f00020 	.word	0x14f00020

0800058c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	4604      	mov	r4, r0
 8000590:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000594:	228c      	movs	r2, #140	@ 0x8c
 8000596:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800059c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80005a0:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a2:	f007 f8ce 	bl	8007742 <memset>
  if(adcHandle->Instance==ADC1)
 80005a6:	4b27      	ldr	r3, [pc, #156]	@ (8000644 <HAL_ADC_MspInit+0xb8>)
 80005a8:	6822      	ldr	r2, [r4, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d001      	beq.n	80005b2 <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ae:	b02a      	add	sp, #168	@ 0xa8
 80005b0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80005b6:	f04f 5540 	mov.w	r5, #805306368	@ 0x30000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ba:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005bc:	9107      	str	r1, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80005be:	9526      	str	r5, [sp, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c0:	f004 fc2e 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d136      	bne.n	8000636 <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC_CLK_ENABLE();
 80005c8:	481f      	ldr	r0, [pc, #124]	@ (8000648 <HAL_ADC_MspInit+0xbc>)
 80005ca:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
 80005cc:	f446 5300 	orr.w	r3, r6, #8192	@ 0x2000
 80005d0:	64c3      	str	r3, [r0, #76]	@ 0x4c
 80005d2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80005d4:	f402 5500 	and.w	r5, r2, #8192	@ 0x2000
 80005d8:	9500      	str	r5, [sp, #0]
 80005da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 80005de:	4d1b      	ldr	r5, [pc, #108]	@ (800064c <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	f046 0301 	orr.w	r3, r6, #1
 80005e4:	64c3      	str	r3, [r0, #76]	@ 0x4c
 80005e6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80005e8:	f000 0201 	and.w	r2, r0, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	9201      	str	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f2:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f8:	2303      	movs	r3, #3
 80005fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f003 fc33 	bl	8003e6c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000606:	4912      	ldr	r1, [pc, #72]	@ (8000650 <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000608:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800060c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000610:	e9c5 1600 	strd	r1, r6, [r5]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000614:	e9c5 0205 	strd	r0, r2, [r5, #20]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000618:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800061a:	2120      	movs	r1, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800061c:	4628      	mov	r0, r5
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800061e:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000622:	e9c5 1607 	strd	r1, r6, [r5, #28]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000626:	612b      	str	r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000628:	f003 fb20 	bl	8003c6c <HAL_DMA_Init>
 800062c:	b930      	cbnz	r0, 800063c <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800062e:	6525      	str	r5, [r4, #80]	@ 0x50
 8000630:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8000632:	b02a      	add	sp, #168	@ 0xa8
 8000634:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000636:	f000 fac9 	bl	8000bcc <Error_Handler>
 800063a:	e7c5      	b.n	80005c8 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 800063c:	f000 fac6 	bl	8000bcc <Error_Handler>
 8000640:	e7f5      	b.n	800062e <HAL_ADC_MspInit+0xa2>
 8000642:	bf00      	nop
 8000644:	50040000 	.word	0x50040000
 8000648:	40021000 	.word	0x40021000
 800064c:	20000484 	.word	0x20000484
 8000650:	40020008 	.word	0x40020008

08000654 <send_spectrogram>:
	}
}
#endif

// Function to create and send the packet
static void send_spectrogram() {
 8000654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000658:	4b45      	ldr	r3, [pc, #276]	@ (8000770 <send_spectrogram+0x11c>)
 800065a:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
    uint8_t *ptr = packet + PACKET_HEADER_LENGTH;
 800065e:	aa02      	add	r2, sp, #8
 8000660:	afca      	add	r7, sp, #808	@ 0x328
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 8000662:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8000666:	f9b3 a000 	ldrsh.w	sl, [r3]
 800066a:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800066e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8000672:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 8000676:	f9b3 e00e 	ldrsh.w	lr, [r3, #14]
 800067a:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800067e:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
 8000682:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 8000686:	f9b3 801e 	ldrsh.w	r8, [r3, #30]
 800068a:	b2b6      	uxth	r6, r6
 800068c:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8000690:	ba36      	rev	r6, r6
 8000692:	fa1f fa85 	uxth.w	sl, r5
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 8000696:	f842 6b28 	str.w	r6, [r2], #40
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 800069a:	ea4a 4509 	orr.w	r5, sl, r9, lsl #16
 800069e:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 80006a2:	f9b3 a00c 	ldrsh.w	sl, [r3, #12]
 80006a6:	fa1f fe8e 	uxth.w	lr, lr
 80006aa:	b2a4      	uxth	r4, r4
 80006ac:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80006b0:	ea4e 460a 	orr.w	r6, lr, sl, lsl #16
 80006b4:	fa96 fa86 	rev.w	sl, r6
 80006b8:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80006bc:	f9b3 e010 	ldrsh.w	lr, [r3, #16]
 80006c0:	b280      	uxth	r0, r0
 80006c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006c6:	f9b3 6018 	ldrsh.w	r6, [r3, #24]
 80006ca:	fa1f fc8c 	uxth.w	ip, ip
 80006ce:	b289      	uxth	r1, r1
 80006d0:	fa95 f985 	rev.w	r9, r5
 80006d4:	ea4c 450e 	orr.w	r5, ip, lr, lsl #16
 80006d8:	ea41 4c06 	orr.w	ip, r1, r6, lsl #16
 80006dc:	f9b3 e026 	ldrsh.w	lr, [r3, #38]	@ 0x26
 80006e0:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 80006e4:	f842 9c24 	str.w	r9, [r2, #-36]
 80006e8:	fa9c f68c 	rev.w	r6, ip
            uint32_t pair = (mel_ptr[j] << 16) | (mel_ptr[j+1] & 0xFFFF);
 80006ec:	f9b3 c022 	ldrsh.w	ip, [r3, #34]	@ 0x22
 80006f0:	f9b3 9020 	ldrsh.w	r9, [r3, #32]
 80006f4:	fa1f f888 	uxth.w	r8, r8
 80006f8:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
 80006fc:	fa1f f18c 	uxth.w	r1, ip
 8000700:	fa1f fc8e 	uxth.w	ip, lr
 8000704:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	@ 0x24
 8000708:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800070c:	ea4c 490e 	orr.w	r9, ip, lr, lsl #16
 8000710:	ba24      	rev	r4, r4
            *ptr++ = pair & 0xFF;                // Second value low byte
 8000712:	ba2d      	rev	r5, r5
 8000714:	ba00      	rev	r0, r0
 8000716:	fa98 f888 	rev.w	r8, r8
 800071a:	ba09      	rev	r1, r1
 800071c:	fa99 fc89 	rev.w	ip, r9
    for (size_t i=0; i<MEL_NUM_VEC; i++) {
 8000720:	42ba      	cmp	r2, r7
            *ptr++ = (pair >> 24) & 0xFF;        // First value high byte
 8000722:	e942 4a08 	strd	r4, sl, [r2, #-32]
 8000726:	e942 5006 	strd	r5, r0, [r2, #-24]
 800072a:	e942 6804 	strd	r6, r8, [r2, #-16]
 800072e:	e942 1c02 	strd	r1, ip, [r2, #-8]
    for (size_t i=0; i<MEL_NUM_VEC; i++) {
 8000732:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8000736:	d194      	bne.n	8000662 <send_spectrogram+0xe>
	make_packet(packet, PAYLOAD_LENGTH, SENDER_ID, *packet_cnt);
 8000738:	4f0e      	ldr	r7, [pc, #56]	@ (8000774 <send_spectrogram+0x120>)
 800073a:	2201      	movs	r2, #1
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000742:	4668      	mov	r0, sp
 8000744:	f000 fb86 	bl	8000e54 <make_packet>
	*packet_cnt += 1;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	603b      	str	r3, [r7, #0]
	if (*packet_cnt == 0) {
 800074e:	b163      	cbz	r3, 800076a <send_spectrogram+0x116>
	// Encode the packet
	encode_packet(packet, &packet_cnt);

	// Wakup, send, and standby of the S2LP
	#if (NO_S2LP_SLEEP == 0)
		S2LP_WakeUp();
 8000750:	f001 fbba 	bl	8001ec8 <S2LP_WakeUp>
	#endif
	S2LP_Send(packet, PACKET_LENGTH);
 8000754:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8000758:	4668      	mov	r0, sp
 800075a:	f000 fd21 	bl	80011a0 <S2LP_Send>
	// Wait for the transmission to finish
	#if (NO_S2LP_SLEEP == 0)
		S2LP_Standby();
 800075e:	f001 fb8f 	bl	8001e80 <S2LP_Standby>
	#endif

	// Print the encoded packet
	print_encoded_packet(packet);
}
 8000762:	f50d 7d4e 	add.w	sp, sp, #824	@ 0x338
 8000766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Error_Handler();
 800076a:	f000 fa2f 	bl	8000bcc <Error_Handler>
 800076e:	e7ef      	b.n	8000750 <send_spectrogram+0xfc>
 8000770:	2000053c 	.word	0x2000053c
 8000774:	20000534 	.word	0x20000534

08000778 <StartADCAcq>:
int StartADCAcq() {
 8000778:	b538      	push	{r3, r4, r5, lr}
	buffer_ready = 0;
 800077a:	4808      	ldr	r0, [pc, #32]	@ (800079c <StartADCAcq+0x24>)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 800077c:	4d08      	ldr	r5, [pc, #32]	@ (80007a0 <StartADCAcq+0x28>)
	packet_cnt = 0;
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <StartADCAcq+0x2c>)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 8000780:	4909      	ldr	r1, [pc, #36]	@ (80007a8 <StartADCAcq+0x30>)
	buffer_ready = 0;
 8000782:	2400      	movs	r4, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 8000784:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
	buffer_ready = 0;
 8000788:	7004      	strb	r4, [r0, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 800078a:	4628      	mov	r0, r5
	packet_cnt = 0;
 800078c:	601c      	str	r4, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCDoubleBuf, 2 * ADC_BUF_SIZE);
 800078e:	f002 fda3 	bl	80032d8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 8000792:	4628      	mov	r0, r5
 8000794:	f002 fcfe 	bl	8003194 <HAL_ADC_Start_IT>
}
 8000798:	4620      	mov	r0, r4
 800079a:	bd38      	pop	{r3, r4, r5, pc}
 800079c:	20000538 	.word	0x20000538
 80007a0:	200004cc 	.word	0x200004cc
 80007a4:	20000534 	.word	0x20000534
 80007a8:	2000585c 	.word	0x2000585c

080007ac <ProcessADCData>:
	
    return 1; // Default to 1 (threshold reached)
}

// Function to process the ADC data
void ProcessADCData() {
 80007ac:	b508      	push	{r3, lr}
	// Check if the buffer is ready
	if (buffer_ready) {
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <ProcessADCData+0x20>)
 80007b0:	781a      	ldrb	r2, [r3, #0]
 80007b2:	b902      	cbnz	r2, 80007b6 <ProcessADCData+0xa>
		}

		// Send the spectrogram
		send_spectrogram();
	}
}
 80007b4:	bd08      	pop	{r3, pc}
		buffer_ready = 0;
 80007b6:	2200      	movs	r2, #0
		Full_spectrogram_compute((q15_t*) ADCWorkingBuf, MELWorkingBuf);
 80007b8:	4905      	ldr	r1, [pc, #20]	@ (80007d0 <ProcessADCData+0x24>)
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <ProcessADCData+0x28>)
		buffer_ready = 0;
 80007bc:	701a      	strb	r2, [r3, #0]
		Full_spectrogram_compute((q15_t*) ADCWorkingBuf, MELWorkingBuf);
 80007be:	f001 fda7 	bl	8002310 <Full_spectrogram_compute>
}
 80007c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_spectrogram();
 80007c6:	f7ff bf45 	b.w	8000654 <send_spectrogram>
 80007ca:	bf00      	nop
 80007cc:	20000538 	.word	0x20000538
 80007d0:	2000053c 	.word	0x2000053c
 80007d4:	2000085c 	.word	0x2000085c

080007d8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80007d8:	b510      	push	{r4, lr}
    if (buffer_ready) return; // Prevent overwrite if still processing
 80007da:	4c06      	ldr	r4, [pc, #24]	@ (80007f4 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80007dc:	7823      	ldrb	r3, [r4, #0]
 80007de:	b93b      	cbnz	r3, 80007f0 <HAL_ADC_ConvHalfCpltCallback+0x18>

    memcpy(ADCWorkingBuf, &ADCDoubleBuf[0], ADC_BUF_SIZE * sizeof(uint16_t));
 80007e0:	4905      	ldr	r1, [pc, #20]	@ (80007f8 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 80007e2:	4806      	ldr	r0, [pc, #24]	@ (80007fc <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80007e4:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80007e8:	f007 f837 	bl	800785a <memcpy>
    buffer_ready = 1;
 80007ec:	2001      	movs	r0, #1
 80007ee:	7020      	strb	r0, [r4, #0]
    current_proc_buf = 0;
}
 80007f0:	bd10      	pop	{r4, pc}
 80007f2:	bf00      	nop
 80007f4:	20000538 	.word	0x20000538
 80007f8:	2000585c 	.word	0x2000585c
 80007fc:	2000085c 	.word	0x2000085c

08000800 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000800:	b510      	push	{r4, lr}
    if (buffer_ready) return;
 8000802:	4c06      	ldr	r4, [pc, #24]	@ (800081c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000804:	7823      	ldrb	r3, [r4, #0]
 8000806:	b93b      	cbnz	r3, 8000818 <HAL_ADC_ConvCpltCallback+0x18>

    memcpy(ADCWorkingBuf, &ADCDoubleBuf[ADC_BUF_SIZE], ADC_BUF_SIZE * sizeof(uint16_t));
 8000808:	4905      	ldr	r1, [pc, #20]	@ (8000820 <HAL_ADC_ConvCpltCallback+0x20>)
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <HAL_ADC_ConvCpltCallback+0x24>)
 800080c:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000810:	f007 f823 	bl	800785a <memcpy>
    buffer_ready = 1;
 8000814:	2001      	movs	r0, #1
 8000816:	7020      	strb	r0, [r4, #0]
    current_proc_buf = 1;
 8000818:	bd10      	pop	{r4, pc}
 800081a:	bf00      	nop
 800081c:	20000538 	.word	0x20000538
 8000820:	2000a85c 	.word	0x2000a85c
 8000824:	2000085c 	.word	0x2000085c

08000828 <MX_AES_Init>:
/* AES init function */
void MX_AES_Init(void)
{

  /* USER CODE BEGIN AES_Init 0 */
  __HAL_RCC_AES_CLK_ENABLE();
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_AES_Init+0x60>)

  // only possible configuration for CMAC
  //hcryp.Init.OperatingMode = CRYP_ALGOMODE_TAG_GENERATION;

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 800082a:	4818      	ldr	r0, [pc, #96]	@ (800088c <MX_AES_Init+0x64>)
  __HAL_RCC_AES_CLK_ENABLE();
 800082c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  hcryp.Instance = AES;
 800082e:	4918      	ldr	r1, [pc, #96]	@ (8000890 <MX_AES_Init+0x68>)
{
 8000830:	b510      	push	{r4, lr}
  __HAL_RCC_AES_CLK_ENABLE();
 8000832:	f442 3480 	orr.w	r4, r2, #65536	@ 0x10000
 8000836:	64dc      	str	r4, [r3, #76]	@ 0x4c
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  hcryp.Instance = AES;
 800083a:	6001      	str	r1, [r0, #0]
{
 800083c:	b082      	sub	sp, #8
  __HAL_RCC_AES_CLK_ENABLE();
 800083e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000842:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8000878 <MX_AES_Init+0x50>
 8000846:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8000880 <MX_AES_Init+0x58>
  __HAL_RCC_AES_CLK_ENABLE();
 800084a:	9201      	str	r2, [sp, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
  hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
  hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_AES_Init+0x6c>)
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 800084e:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <MX_AES_Init+0x70>)
  __HAL_RCC_AES_CLK_ENABLE();
 8000850:	9c01      	ldr	r4, [sp, #4]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8000852:	2100      	movs	r1, #0
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000854:	ed80 7b02 	vstr	d7, [r0, #8]
 8000858:	ed80 0b04 	vstr	d0, [r0, #16]
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 800085c:	e9c0 2308 	strd	r2, r3, [r0, #32]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8000860:	6181      	str	r1, [r0, #24]
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000862:	f002 ff4b 	bl	80036fc <HAL_CRYP_Init>
 8000866:	b908      	cbnz	r0, 800086c <MX_AES_Init+0x44>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8000868:	b002      	add	sp, #8
 800086a:	bd10      	pop	{r4, pc}
 800086c:	b002      	add	sp, #8
 800086e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000872:	f000 b9ab 	b.w	8000bcc <Error_Handler>
 8000876:	bf00      	nop
 8000878:	00000004 	.word	0x00000004
	...
 8000884:	00000020 	.word	0x00000020
 8000888:	40021000 	.word	0x40021000
 800088c:	2000f860 	.word	0x2000f860
 8000890:	50060000 	.word	0x50060000
 8000894:	08007aec 	.word	0x08007aec
 8000898:	08007afc 	.word	0x08007afc

0800089c <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 800089c:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_CRYP_MspInit+0x2c>)
 800089e:	6802      	ldr	r2, [r0, #0]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d000      	beq.n	80008a6 <HAL_CRYP_MspInit+0xa>
 80008a4:	4770      	bx	lr
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 80008a6:	f103 4070 	add.w	r0, r3, #4026531840	@ 0xf0000000
 80008aa:	f5a0 317c 	sub.w	r1, r0, #258048	@ 0x3f000
{
 80008ae:	b082      	sub	sp, #8
    __HAL_RCC_AES_CLK_ENABLE();
 80008b0:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 80008b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80008b6:	64ca      	str	r2, [r1, #76]	@ 0x4c
 80008b8:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 80008ba:	f400 3180 	and.w	r1, r0, #65536	@ 0x10000
 80008be:	9101      	str	r1, [sp, #4]
 80008c0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 80008c2:	b002      	add	sp, #8
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	50060000 	.word	0x50060000

080008cc <HAL_CRYP_MspDeInit>:

void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <HAL_CRYP_MspDeInit+0x18>)
 80008ce:	6802      	ldr	r2, [r0, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d000      	beq.n	80008d6 <HAL_CRYP_MspDeInit+0xa>
    __HAL_RCC_AES_CLK_DISABLE();
  /* USER CODE BEGIN AES_MspDeInit 1 */

  /* USER CODE END AES_MspDeInit 1 */
  }
}
 80008d4:	4770      	bx	lr
    __HAL_RCC_AES_CLK_DISABLE();
 80008d6:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <HAL_CRYP_MspDeInit+0x1c>)
 80008d8:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80008da:	f421 3380 	bic.w	r3, r1, #65536	@ 0x10000
 80008de:	64c3      	str	r3, [r0, #76]	@ 0x4c
}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	50060000 	.word	0x50060000
 80008e8:	40021000 	.word	0x40021000

080008ec <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <MX_DMA_Init+0x2c>)
{
 80008ee:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f0:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80008f2:	f041 0101 	orr.w	r1, r1, #1
 80008f6:	6499      	str	r1, [r3, #72]	@ 0x48
 80008f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 80008fa:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80008fc:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fe:	400b      	ands	r3, r1
 8000900:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000902:	200b      	movs	r0, #11
 8000904:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000906:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000908:	f002 fe6a 	bl	80035e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800090c:	200b      	movs	r0, #11

}
 800090e:	b003      	add	sp, #12
 8000910:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000914:	f002 bea0 	b.w	8003658 <HAL_NVIC_EnableIRQ>
 8000918:	40021000 	.word	0x40021000

0800091c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 800091c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	2400      	movs	r4, #0
{
 8000922:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000928:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092c:	4b98      	ldr	r3, [pc, #608]	@ (8000b90 <MX_GPIO_Init+0x274>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000930:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8000932:	4f98      	ldr	r7, [pc, #608]	@ (8000b94 <MX_GPIO_Init+0x278>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8000934:	f8df a26c 	ldr.w	sl, [pc, #620]	@ 8000ba4 <MX_GPIO_Init+0x288>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8000938:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 8000ba8 <MX_GPIO_Init+0x28c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800093c:	f8df 826c 	ldr.w	r8, [pc, #620]	@ 8000bac <MX_GPIO_Init+0x290>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000940:	f042 0010 	orr.w	r0, r2, #16
 8000944:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8000946:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000948:	f001 0510 	and.w	r5, r1, #16
 800094c:	9500      	str	r5, [sp, #0]
 800094e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000950:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8000952:	f046 0204 	orr.w	r2, r6, #4
 8000956:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000958:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800095a:	f000 0104 	and.w	r1, r0, #4
 800095e:	9101      	str	r1, [sp, #4]
 8000960:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000962:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000964:	f045 0620 	orr.w	r6, r5, #32
 8000968:	64de      	str	r6, [r3, #76]	@ 0x4c
 800096a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800096c:	f002 0020 	and.w	r0, r2, #32
 8000970:	9002      	str	r0, [sp, #8]
 8000972:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000974:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000976:	f041 0580 	orr.w	r5, r1, #128	@ 0x80
 800097a:	64dd      	str	r5, [r3, #76]	@ 0x4c
 800097c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800097e:	f006 0280 	and.w	r2, r6, #128	@ 0x80
 8000982:	9203      	str	r2, [sp, #12]
 8000984:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000988:	f040 0101 	orr.w	r1, r0, #1
 800098c:	64d9      	str	r1, [r3, #76]	@ 0x4c
 800098e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000990:	f005 0601 	and.w	r6, r5, #1
 8000994:	9604      	str	r6, [sp, #16]
 8000996:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800099a:	f042 0002 	orr.w	r0, r2, #2
 800099e:	64d8      	str	r0, [r3, #76]	@ 0x4c
 80009a0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80009a2:	f001 0502 	and.w	r5, r1, #2
 80009a6:	9505      	str	r5, [sp, #20]
 80009a8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009aa:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80009ac:	f046 0240 	orr.w	r2, r6, #64	@ 0x40
 80009b0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80009b2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80009b4:	f000 0140 	and.w	r1, r0, #64	@ 0x40
 80009b8:	9106      	str	r1, [sp, #24]
 80009ba:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009bc:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 80009be:	f045 0608 	orr.w	r6, r5, #8
 80009c2:	64de      	str	r6, [r3, #76]	@ 0x4c
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009c6:	4e74      	ldr	r6, [pc, #464]	@ (8000b98 <MX_GPIO_Init+0x27c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c8:	f003 0208 	and.w	r2, r3, #8
 80009cc:	9207      	str	r2, [sp, #28]
 80009ce:	9b07      	ldr	r3, [sp, #28]
  HAL_PWREx_EnableVddIO2();
 80009d0:	f003 fc26 	bl	8004220 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	4611      	mov	r1, r2
 80009d8:	4638      	mov	r0, r7
 80009da:	f003 fb63 	bl	80040a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 80009de:	4650      	mov	r0, sl
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e6:	f003 fb5d 	bl	80040a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 80009ea:	4648      	mov	r0, r9
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009f2:	f003 fb57 	bl	80040a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009f6:	4622      	mov	r2, r4
 80009f8:	4640      	mov	r0, r8
 80009fa:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80009fe:	f003 fb51 	bl	80040a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a02:	4622      	mov	r2, r4
 8000a04:	4630      	mov	r0, r6
 8000a06:	2140      	movs	r1, #64	@ 0x40
 8000a08:	f003 fb4c 	bl	80040a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0c:	a908      	add	r1, sp, #32
 8000a0e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000a10:	f24d 72ff 	movw	r2, #55295	@ 0xd7ff
 8000a14:	2303      	movs	r3, #3
 8000a16:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1c:	f003 fa26 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	a908      	add	r1, sp, #32
 8000a22:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin;
 8000a24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f003 fa1b 	bl	8003e6c <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a36:	a908      	add	r1, sp, #32
 8000a38:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a3a:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a46:	f003 fa11 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000a4a:	2209      	movs	r2, #9
 8000a4c:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a4e:	a908      	add	r1, sp, #32
 8000a50:	4852      	ldr	r0, [pc, #328]	@ (8000b9c <MX_GPIO_Init+0x280>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 8000a54:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000a56:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	f04f 0b03 	mov.w	fp, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a5e:	f003 fa05 	bl	8003e6c <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000a62:	a908      	add	r1, sp, #32
 8000a64:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	e9cd 5508 	strd	r5, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f003 f9fd 	bl	8003e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	4638      	mov	r0, r7
 8000a74:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a76:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a82:	f003 f9f3 	bl	8003e6c <HAL_GPIO_Init>
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000a88:	f248 0236 	movw	r2, #32822	@ 0x8036
 8000a8c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000a92:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f003 f9e8 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000aa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f003 f9dd 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000ab2:	f64b 7277 	movw	r2, #49015	@ 0xbf77
 8000ab6:	2303      	movs	r3, #3
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	a908      	add	r1, sp, #32
 8000aba:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000abc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8000ac2:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f003 f9d1 	bl	8003e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000aca:	4650      	mov	r0, sl
 8000acc:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8000ad2:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f003 f9c9 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ada:	f64f 621f 	movw	r2, #65055	@ 0xfe1f
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ade:	a908      	add	r1, sp, #32
 8000ae0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aea:	f003 f9bf 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8000aee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000af2:	4648      	mov	r0, r9
 8000af4:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8000af6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f003 f9b5 	bl	8003e6c <HAL_GPIO_Init>
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	4640      	mov	r0, r8
 8000b04:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b06:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b0e:	9208      	str	r2, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f003 f9ab 	bl	8003e6c <HAL_GPIO_Init>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b1c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1e:	4820      	ldr	r0, [pc, #128]	@ (8000ba0 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b22:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f003 f9a1 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	a908      	add	r1, sp, #32
 8000b30:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b32:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f003 f998 	bl	8003e6c <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	a908      	add	r1, sp, #32
 8000b3e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b40:	2640      	movs	r6, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b48:	9608      	str	r6, [sp, #32]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b4a:	f44f 55e8 	mov.w	r5, #7424	@ 0x1d00
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f003 f98d 	bl	8003e6c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b54:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	a908      	add	r1, sp, #32
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b5c:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b62:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	9709      	str	r7, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f003 f981 	bl	8003e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b6a:	4622      	mov	r2, r4
 8000b6c:	4621      	mov	r1, r4
 8000b6e:	2009      	movs	r0, #9
 8000b70:	f002 fd36 	bl	80035e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b74:	2009      	movs	r0, #9
 8000b76:	f002 fd6f 	bl	8003658 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b7a:	4622      	mov	r2, r4
 8000b7c:	4621      	mov	r1, r4
 8000b7e:	2028      	movs	r0, #40	@ 0x28
 8000b80:	f002 fd2e 	bl	80035e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b84:	2028      	movs	r0, #40	@ 0x28
 8000b86:	f002 fd67 	bl	8003658 <HAL_NVIC_EnableIRQ>

}
 8000b8a:	b00f      	add	sp, #60	@ 0x3c
 8000b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b90:	40021000 	.word	0x40021000
 8000b94:	48000800 	.word	0x48000800
 8000b98:	48001800 	.word	0x48001800
 8000b9c:	48001c00 	.word	0x48001c00
 8000ba0:	48000c00 	.word	0x48000c00
 8000ba4:	48001400 	.word	0x48001400
 8000ba8:	48001000 	.word	0x48001000
 8000bac:	48000400 	.word	0x48000400

08000bb0 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin) {
 8000bb0:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8000bb4:	d002      	beq.n	8000bbc <HAL_GPIO_EXTI_Callback+0xc>
		btn_press = 1;
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
 8000bb6:	2808      	cmp	r0, #8
 8000bb8:	d004      	beq.n	8000bc4 <HAL_GPIO_EXTI_Callback+0x14>
		S2LP_IRQ_Handler();
}
 8000bba:	4770      	bx	lr
		btn_press = 1;
 8000bbc:	4b02      	ldr	r3, [pc, #8]	@ (8000bc8 <HAL_GPIO_EXTI_Callback+0x18>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	4770      	bx	lr
		S2LP_IRQ_Handler();
 8000bc4:	f001 ba4c 	b.w	8002060 <S2LP_IRQ_Handler>
 8000bc8:	2000f8c0 	.word	0x2000f8c0

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
 8000bd2:	4f42      	ldr	r7, [pc, #264]	@ (8000cdc <Error_Handler+0x110>)
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000bd4:	4e42      	ldr	r6, [pc, #264]	@ (8000ce0 <Error_Handler+0x114>)
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000bd6:	4d43      	ldr	r5, [pc, #268]	@ (8000ce4 <Error_Handler+0x118>)
 8000bd8:	2400      	movs	r4, #0
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000be0:	4630      	mov	r0, r6
 8000be2:	f003 fa5f 	bl	80040a4 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	9400      	str	r4, [sp, #0]
 8000bea:	9900      	ldr	r1, [sp, #0]
 8000bec:	fba5 3002 	umull	r3, r0, r5, r2
 8000bf0:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
 8000bf4:	ea4f 1390 	mov.w	r3, r0, lsr #6
 8000bf8:	d22f      	bcs.n	8000c5a <Error_Handler+0x8e>
 8000bfa:	9a00      	ldr	r2, [sp, #0]
 8000bfc:	3201      	adds	r2, #1
 8000bfe:	9200      	str	r2, [sp, #0]
 8000c00:	9900      	ldr	r1, [sp, #0]
 8000c02:	4299      	cmp	r1, r3
 8000c04:	d229      	bcs.n	8000c5a <Error_Handler+0x8e>
 8000c06:	9800      	ldr	r0, [sp, #0]
 8000c08:	3001      	adds	r0, #1
 8000c0a:	9000      	str	r0, [sp, #0]
 8000c0c:	9a00      	ldr	r2, [sp, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d223      	bcs.n	8000c5a <Error_Handler+0x8e>
 8000c12:	9900      	ldr	r1, [sp, #0]
 8000c14:	3101      	adds	r1, #1
 8000c16:	9100      	str	r1, [sp, #0]
 8000c18:	9800      	ldr	r0, [sp, #0]
 8000c1a:	4298      	cmp	r0, r3
 8000c1c:	d21d      	bcs.n	8000c5a <Error_Handler+0x8e>
 8000c1e:	9a00      	ldr	r2, [sp, #0]
 8000c20:	3201      	adds	r2, #1
 8000c22:	9200      	str	r2, [sp, #0]
 8000c24:	9900      	ldr	r1, [sp, #0]
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d217      	bcs.n	8000c5a <Error_Handler+0x8e>
 8000c2a:	9800      	ldr	r0, [sp, #0]
 8000c2c:	3001      	adds	r0, #1
 8000c2e:	9000      	str	r0, [sp, #0]
 8000c30:	9a00      	ldr	r2, [sp, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d211      	bcs.n	8000c5a <Error_Handler+0x8e>
 8000c36:	9900      	ldr	r1, [sp, #0]
 8000c38:	3101      	adds	r1, #1
 8000c3a:	9100      	str	r1, [sp, #0]
 8000c3c:	9800      	ldr	r0, [sp, #0]
 8000c3e:	4298      	cmp	r0, r3
 8000c40:	d20b      	bcs.n	8000c5a <Error_Handler+0x8e>
 8000c42:	9a00      	ldr	r2, [sp, #0]
 8000c44:	3201      	adds	r2, #1
 8000c46:	9200      	str	r2, [sp, #0]
 8000c48:	9900      	ldr	r1, [sp, #0]
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d205      	bcs.n	8000c5a <Error_Handler+0x8e>
 8000c4e:	9800      	ldr	r0, [sp, #0]
 8000c50:	3001      	adds	r0, #1
 8000c52:	9000      	str	r0, [sp, #0]
 8000c54:	9a00      	ldr	r2, [sp, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3cf      	bcc.n	8000bfa <Error_Handler+0x2e>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000c5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4630      	mov	r0, r6
 8000c62:	f003 fa1f 	bl	80040a4 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	9401      	str	r4, [sp, #4]
 8000c6a:	9801      	ldr	r0, [sp, #4]
 8000c6c:	fba5 1203 	umull	r1, r2, r5, r3
 8000c70:	ebb0 1f92 	cmp.w	r0, r2, lsr #6
 8000c74:	ea4f 1192 	mov.w	r1, r2, lsr #6
 8000c78:	d2af      	bcs.n	8000bda <Error_Handler+0xe>
 8000c7a:	9b01      	ldr	r3, [sp, #4]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	9301      	str	r3, [sp, #4]
 8000c80:	9801      	ldr	r0, [sp, #4]
 8000c82:	4288      	cmp	r0, r1
 8000c84:	d2a9      	bcs.n	8000bda <Error_Handler+0xe>
 8000c86:	9a01      	ldr	r2, [sp, #4]
 8000c88:	3201      	adds	r2, #1
 8000c8a:	9201      	str	r2, [sp, #4]
 8000c8c:	9b01      	ldr	r3, [sp, #4]
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d2a3      	bcs.n	8000bda <Error_Handler+0xe>
 8000c92:	9801      	ldr	r0, [sp, #4]
 8000c94:	3001      	adds	r0, #1
 8000c96:	9001      	str	r0, [sp, #4]
 8000c98:	9a01      	ldr	r2, [sp, #4]
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	d29d      	bcs.n	8000bda <Error_Handler+0xe>
 8000c9e:	9b01      	ldr	r3, [sp, #4]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	9801      	ldr	r0, [sp, #4]
 8000ca6:	4288      	cmp	r0, r1
 8000ca8:	d297      	bcs.n	8000bda <Error_Handler+0xe>
 8000caa:	9a01      	ldr	r2, [sp, #4]
 8000cac:	3201      	adds	r2, #1
 8000cae:	9201      	str	r2, [sp, #4]
 8000cb0:	9b01      	ldr	r3, [sp, #4]
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d291      	bcs.n	8000bda <Error_Handler+0xe>
 8000cb6:	9801      	ldr	r0, [sp, #4]
 8000cb8:	3001      	adds	r0, #1
 8000cba:	9001      	str	r0, [sp, #4]
 8000cbc:	9a01      	ldr	r2, [sp, #4]
 8000cbe:	428a      	cmp	r2, r1
 8000cc0:	d28b      	bcs.n	8000bda <Error_Handler+0xe>
 8000cc2:	9b01      	ldr	r3, [sp, #4]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	9301      	str	r3, [sp, #4]
 8000cc8:	9801      	ldr	r0, [sp, #4]
 8000cca:	4288      	cmp	r0, r1
 8000ccc:	d285      	bcs.n	8000bda <Error_Handler+0xe>
 8000cce:	9a01      	ldr	r2, [sp, #4]
 8000cd0:	3201      	adds	r2, #1
 8000cd2:	9201      	str	r2, [sp, #4]
 8000cd4:	9b01      	ldr	r3, [sp, #4]
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d3cf      	bcc.n	8000c7a <Error_Handler+0xae>
 8000cda:	e77e      	b.n	8000bda <Error_Handler+0xe>
 8000cdc:	20000400 	.word	0x20000400
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	51eb851f 	.word	0x51eb851f

08000ce8 <run>:
{
 8000ce8:	b508      	push	{r3, lr}
	btn_press = 0;
 8000cea:	4b27      	ldr	r3, [pc, #156]	@ (8000d88 <run+0xa0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
    int s2lp_Check = S2LP_Standby();
 8000cf0:	f001 f8c6 	bl	8001e80 <S2LP_Standby>
    if (s2lp_Check != HAL_OK) {
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	d144      	bne.n	8000d82 <run+0x9a>
      if (StartADCAcq() != HAL_OK) {
 8000cf8:	f7ff fd3e 	bl	8000778 <StartADCAcq>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d140      	bne.n	8000d82 <run+0x9a>
        ProcessADCData();
 8000d00:	f7ff fd54 	bl	80007ac <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d04:	2101      	movs	r1, #1
 8000d06:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d0a:	f003 f9dd 	bl	80040c8 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000d0e:	bf30      	wfi
        ProcessADCData();
 8000d10:	f7ff fd4c 	bl	80007ac <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d14:	2101      	movs	r1, #1
 8000d16:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d1a:	f003 f9d5 	bl	80040c8 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000d1e:	bf30      	wfi
        ProcessADCData();
 8000d20:	f7ff fd44 	bl	80007ac <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d24:	2101      	movs	r1, #1
 8000d26:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d2a:	f003 f9cd 	bl	80040c8 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000d2e:	bf30      	wfi
        ProcessADCData();
 8000d30:	f7ff fd3c 	bl	80007ac <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d34:	2101      	movs	r1, #1
 8000d36:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d3a:	f003 f9c5 	bl	80040c8 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000d3e:	bf30      	wfi
        ProcessADCData();
 8000d40:	f7ff fd34 	bl	80007ac <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d44:	2101      	movs	r1, #1
 8000d46:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d4a:	f003 f9bd 	bl	80040c8 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000d4e:	bf30      	wfi
        ProcessADCData();
 8000d50:	f7ff fd2c 	bl	80007ac <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d54:	2101      	movs	r1, #1
 8000d56:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d5a:	f003 f9b5 	bl	80040c8 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000d5e:	bf30      	wfi
        ProcessADCData();
 8000d60:	f7ff fd24 	bl	80007ac <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d64:	2101      	movs	r1, #1
 8000d66:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d6a:	f003 f9ad 	bl	80040c8 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000d6e:	bf30      	wfi
        ProcessADCData();
 8000d70:	f7ff fd1c 	bl	80007ac <ProcessADCData>
        HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d74:	2101      	movs	r1, #1
 8000d76:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d7a:	f003 f9a5 	bl	80040c8 <HAL_PWR_EnterSLEEPMode>
        __WFI();
 8000d7e:	bf30      	wfi
      while (1) {
 8000d80:	e7be      	b.n	8000d00 <run+0x18>
      Error_Handler();
 8000d82:	f7ff ff23 	bl	8000bcc <Error_Handler>
 8000d86:	bf00      	nop
 8000d88:	2000f8c0 	.word	0x2000f8c0
 8000d8c:	00000000 	.word	0x00000000

08000d90 <SystemClock_Config>:
{
 8000d90:	b500      	push	{lr}
 8000d92:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d94:	2244      	movs	r2, #68	@ 0x44
 8000d96:	2100      	movs	r1, #0
 8000d98:	a806      	add	r0, sp, #24
 8000d9a:	f006 fcd2 	bl	8007742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9e:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000da0:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000da8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000dac:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dae:	f003 f9b5 	bl	800411c <HAL_PWREx_ControlVoltageScaling>
 8000db2:	b9d8      	cbnz	r0, 8000dec <SystemClock_Config+0x5c>
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000db4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8000df0 <SystemClock_Config+0x60>
 8000db8:	4601      	mov	r1, r0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dba:	2210      	movs	r2, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000dbc:	2350      	movs	r3, #80	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dc0:	9110      	str	r1, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dc6:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000dc8:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dca:	f003 fb49 	bl	8004460 <HAL_RCC_OscConfig>
 8000dce:	4601      	mov	r1, r0
 8000dd0:	b960      	cbnz	r0, 8000dec <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000dd6:	e9cd 2101 	strd	r2, r1, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dda:	e9cd 1103 	strd	r1, r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dde:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000de0:	f003 fe54 	bl	8004a8c <HAL_RCC_ClockConfig>
 8000de4:	b910      	cbnz	r0, 8000dec <SystemClock_Config+0x5c>
}
 8000de6:	b019      	add	sp, #100	@ 0x64
 8000de8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000dec:	f7ff feee 	bl	8000bcc <Error_Handler>
 8000df0:	00000001 	.word	0x00000001
 8000df4:	00000000 	.word	0x00000000

08000df8 <main>:
{
 8000df8:	b508      	push	{r3, lr}
  HAL_Init();
 8000dfa:	f001 fd0d 	bl	8002818 <HAL_Init>
  SystemClock_Config();
 8000dfe:	f7ff ffc7 	bl	8000d90 <SystemClock_Config>
  MX_GPIO_Init();
 8000e02:	f7ff fd8b 	bl	800091c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e06:	f7ff fd71 	bl	80008ec <MX_DMA_Init>
  MX_SPI1_Init();
 8000e0a:	f001 fb5f 	bl	80024cc <MX_SPI1_Init>
  MX_TIM3_Init();
 8000e0e:	f001 fc51 	bl	80026b4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000e12:	f7ff fb65 	bl	80004e0 <MX_ADC1_Init>
  MX_AES_Init();
 8000e16:	f7ff fd07 	bl	8000828 <MX_AES_Init>
  RetargetInit(&hlpuart1);
 8000e1a:	480a      	ldr	r0, [pc, #40]	@ (8000e44 <main+0x4c>)
 8000e1c:	f000 f86c 	bl	8000ef8 <RetargetInit>
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 8000e20:	4809      	ldr	r0, [pc, #36]	@ (8000e48 <main+0x50>)
 8000e22:	f001 f887 	bl	8001f34 <S2LP_Init>
  if (err)  {
 8000e26:	b920      	cbnz	r0, 8000e32 <main+0x3a>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8000e28:	4808      	ldr	r0, [pc, #32]	@ (8000e4c <main+0x54>)
 8000e2a:	217f      	movs	r1, #127	@ 0x7f
 8000e2c:	f002 fb0c 	bl	8003448 <HAL_ADCEx_Calibration_Start>
 8000e30:	b108      	cbz	r0, 8000e36 <main+0x3e>
	  Error_Handler();
 8000e32:	f7ff fecb 	bl	8000bcc <Error_Handler>
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 8000e36:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <main+0x58>)
 8000e38:	f004 fe84 	bl	8005b44 <HAL_TIM_Base_Start>
 8000e3c:	2800      	cmp	r0, #0
 8000e3e:	d1f8      	bne.n	8000e32 <main+0x3a>
    run();
 8000e40:	f7ff ff52 	bl	8000ce8 <run>
 8000e44:	2000f990 	.word	0x2000f990
 8000e48:	2000f8d8 	.word	0x2000f8d8
 8000e4c:	200004cc 	.word	0x200004cc
 8000e50:	2000f940 	.word	0x2000f940

08000e54 <make_packet>:
    // Clean up
    free(tmp_out);
}

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8000e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
    // So is the tag
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8000e58:	f101 0708 	add.w	r7, r1, #8
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8000e5c:	4604      	mov	r4, r0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8000e5e:	19c6      	adds	r6, r0, r7
 8000e60:	2000      	movs	r0, #0
 8000e62:	51e0      	str	r0, [r4, r7]
    size_t num_blocks = (msg_len + 15) / 16;
 8000e64:	f101 0517 	add.w	r5, r1, #23
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8000e68:	6070      	str	r0, [r6, #4]
 8000e6a:	60b0      	str	r0, [r6, #8]
 8000e6c:	60f0      	str	r0, [r6, #12]
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
 8000e6e:	f101 0818 	add.w	r8, r1, #24

	// Set the reserved field to 0
	packet[0] = 0x00;
 8000e72:	7020      	strb	r0, [r4, #0]
	// Set the emitter_id field
	packet[1] = sender_id;
 8000e74:	7062      	strb	r2, [r4, #1]
	// Set the payload_length field
	packet[2] = (payload_len >> 8) & 0xFF;
	packet[3] = payload_len & 0xFF;
	// Set the packet_serial field
	packet[4] = (serial >> 24) & 0xFF;
	packet[5] = (serial >> 16) & 0xFF;
 8000e76:	0c18      	lsrs	r0, r3, #16
	packet[2] = (payload_len >> 8) & 0xFF;
 8000e78:	0a0a      	lsrs	r2, r1, #8
	packet[3] = payload_len & 0xFF;
 8000e7a:	70e1      	strb	r1, [r4, #3]
	packet[6] = (serial >> 8) & 0xFF;
	packet[7] = serial & 0xFF;
 8000e7c:	71e3      	strb	r3, [r4, #7]
	packet[4] = (serial >> 24) & 0xFF;
 8000e7e:	0e19      	lsrs	r1, r3, #24
	packet[6] = (serial >> 8) & 0xFF;
 8000e80:	0a1b      	lsrs	r3, r3, #8
	packet[5] = (serial >> 16) & 0xFF;
 8000e82:	7160      	strb	r0, [r4, #5]
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8000e84:	b083      	sub	sp, #12
	packet[2] = (payload_len >> 8) & 0xFF;
 8000e86:	70a2      	strb	r2, [r4, #2]
	packet[4] = (serial >> 24) & 0xFF;
 8000e88:	7121      	strb	r1, [r4, #4]
	packet[6] = (serial >> 8) & 0xFF;
 8000e8a:	71a3      	strb	r3, [r4, #6]
    tmp_out = malloc(total_size);
 8000e8c:	f025 000f 	bic.w	r0, r5, #15
 8000e90:	f006 f9e0 	bl	8007254 <malloc>
 8000e94:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 8000ef4 <make_packet+0xa0>
 8000e98:	f8c9 0000 	str.w	r0, [r9]
    if (tmp_out == NULL) {
 8000e9c:	b310      	cbz	r0, 8000ee4 <make_packet+0x90>
    if (HAL_CRYP_AESCBC_Encrypt(&hcryp, (uint8_t *)msg, msg_len, tmp_out, 1000) != HAL_OK) {
 8000e9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	9200      	str	r2, [sp, #0]
 8000ea6:	4812      	ldr	r0, [pc, #72]	@ (8000ef0 <make_packet+0x9c>)
 8000ea8:	b2ba      	uxth	r2, r7
 8000eaa:	4621      	mov	r1, r4
 8000eac:	f002 fcd8 	bl	8003860 <HAL_CRYP_AESCBC_Encrypt>
 8000eb0:	b9a0      	cbnz	r0, 8000edc <make_packet+0x88>
    memcpy(tag, tmp_out + ((num_blocks - 1) * 16), 16);
 8000eb2:	f8d9 0000 	ldr.w	r0, [r9]
 8000eb6:	f025 0c0f 	bic.w	ip, r5, #15
 8000eba:	f1ac 0510 	sub.w	r5, ip, #16
 8000ebe:	1943      	adds	r3, r0, r5
 8000ec0:	5945      	ldr	r5, [r0, r5]
 8000ec2:	6859      	ldr	r1, [r3, #4]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	51e5      	str	r5, [r4, r7]
 8000eca:	6071      	str	r1, [r6, #4]
 8000ecc:	60b2      	str	r2, [r6, #8]
 8000ece:	60f3      	str	r3, [r6, #12]
    free(tmp_out);
 8000ed0:	f006 f9c8 	bl	8007264 <free>
	#else
		tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
	#endif

    return packet_len;
}
 8000ed4:	4640      	mov	r0, r8
 8000ed6:	b003      	add	sp, #12
 8000ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        free(tmp_out);
 8000edc:	f8d9 0000 	ldr.w	r0, [r9]
 8000ee0:	f006 f9c0 	bl	8007264 <free>
        Error_Handler();
 8000ee4:	f7ff fe72 	bl	8000bcc <Error_Handler>
}
 8000ee8:	4640      	mov	r0, r8
 8000eea:	b003      	add	sp, #12
 8000eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ef0:	2000f860 	.word	0x2000f860
 8000ef4:	2000f8c4 	.word	0x2000f8c4

08000ef8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ef8:	b430      	push	{r4, r5}
  gHuart = huart;

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <RetargetInit+0x1c>)
  gHuart = huart;
 8000efc:	4906      	ldr	r1, [pc, #24]	@ (8000f18 <RetargetInit+0x20>)
  setvbuf(stdout, NULL, _IONBF, 0);
 8000efe:	681d      	ldr	r5, [r3, #0]
void RetargetInit(UART_HandleTypeDef *huart) {
 8000f00:	4604      	mov	r4, r0
  setvbuf(stdout, NULL, _IONBF, 0);
 8000f02:	2300      	movs	r3, #0
  gHuart = huart;
 8000f04:	600c      	str	r4, [r1, #0]
  setvbuf(stdout, NULL, _IONBF, 0);
 8000f06:	68a8      	ldr	r0, [r5, #8]
 8000f08:	2202      	movs	r2, #2
}
 8000f0a:	bc30      	pop	{r4, r5}
  setvbuf(stdout, NULL, _IONBF, 0);
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f006 bb21 	b.w	8007554 <setvbuf>
 8000f12:	bf00      	nop
 8000f14:	20000418 	.word	0x20000418
 8000f18:	2000f8c8 	.word	0x2000f8c8

08000f1c <_write>:
}

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000f1c:	3801      	subs	r0, #1
 8000f1e:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 8000f20:	b510      	push	{r4, lr}
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000f22:	d80c      	bhi.n	8000f3e <_write+0x22>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000f24:	4614      	mov	r4, r2
 8000f26:	4a09      	ldr	r2, [pc, #36]	@ (8000f4c <_write+0x30>)
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	6810      	ldr	r0, [r2, #0]
 8000f2e:	b2a2      	uxth	r2, r4
 8000f30:	f004 fff6 	bl	8005f20 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
 8000f34:	2800      	cmp	r0, #0
 8000f36:	bf0c      	ite	eq
 8000f38:	4620      	moveq	r0, r4
 8000f3a:	2005      	movne	r0, #5
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8000f3c:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8000f3e:	f006 fc5f 	bl	8007800 <__errno>
 8000f42:	2309      	movs	r3, #9
 8000f44:	6003      	str	r3, [r0, #0]
  return -1;
 8000f46:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f4a:	bd10      	pop	{r4, pc}
 8000f4c:	2000f8c8 	.word	0x2000f8c8

08000f50 <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f50:	2802      	cmp	r0, #2
 8000f52:	d801      	bhi.n	8000f58 <_close+0x8>
    return 0;
 8000f54:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 8000f56:	4770      	bx	lr
int _close(int fd) {
 8000f58:	b508      	push	{r3, lr}
  errno = EBADF;
 8000f5a:	f006 fc51 	bl	8007800 <__errno>
 8000f5e:	2309      	movs	r3, #9
 8000f60:	6003      	str	r3, [r0, #0]
  return -1;
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f66:	bd08      	pop	{r3, pc}

08000f68 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000f68:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000f6a:	f006 fc49 	bl	8007800 <__errno>
 8000f6e:	2309      	movs	r3, #9
 8000f70:	6003      	str	r3, [r0, #0]
  return -1;
}
 8000f72:	f04f 30ff 	mov.w	r0, #4294967295
 8000f76:	bd08      	pop	{r3, pc}

08000f78 <_read>:

int _read(int fd, char* ptr, int len) {
 8000f78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000f7a:	b958      	cbnz	r0, 8000f94 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000f7c:	4a09      	ldr	r2, [pc, #36]	@ (8000fa4 <_read+0x2c>)
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	6810      	ldr	r0, [r2, #0]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f005 f869 	bl	800605c <HAL_UART_Receive>
    if (hstatus == HAL_OK)
      return 1;
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	bf14      	ite	ne
 8000f8e:	2005      	movne	r0, #5
 8000f90:	2001      	moveq	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8000f92:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8000f94:	f006 fc34 	bl	8007800 <__errno>
 8000f98:	2309      	movs	r3, #9
 8000f9a:	6003      	str	r3, [r0, #0]
  return -1;
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000fa0:	bd08      	pop	{r3, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000f8c8 	.word	0x2000f8c8

08000fa8 <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000fa8:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 8000faa:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000fac:	d804      	bhi.n	8000fb8 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 8000fae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fb2:	6048      	str	r0, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8000fb8:	f006 fc22 	bl	8007800 <__errno>
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	6003      	str	r3, [r0, #0]
}
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	bd08      	pop	{r3, pc}

08000fc4 <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	733b      	strb	r3, [r7, #12]
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	737b      	strb	r3, [r7, #13]
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2101      	movs	r1, #1
 8000fe0:	480f      	ldr	r0, [pc, #60]	@ (8001020 <S2LP_Command+0x5c>)
 8000fe2:	f003 f85f 	bl	80040a4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <S2LP_Command+0x60>)
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	f107 0208 	add.w	r2, r7, #8
 8000fee:	f107 010c 	add.w	r1, r7, #12
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f004 fb59 	bl	80056b0 <HAL_SPI_TransmitReceive>
 8000ffe:	4603      	mov	r3, r0
 8001000:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2101      	movs	r1, #1
 8001006:	4806      	ldr	r0, [pc, #24]	@ (8001020 <S2LP_Command+0x5c>)
 8001008:	f003 f84c 	bl	80040a4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800100c:	b662      	cpsie	i
}
 800100e:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 8001010:	893a      	ldrh	r2, [r7, #8]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	801a      	strh	r2, [r3, #0]
	return err;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	48000800 	.word	0x48000800
 8001024:	2000f8d0 	.word	0x2000f8d0

08001028 <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af02      	add	r7, sp, #8
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 8001036:	2301      	movs	r3, #1
 8001038:	753b      	strb	r3, [r7, #20]
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	757b      	strb	r3, [r7, #21]
 800103e:	2300      	movs	r3, #0
 8001040:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 8001042:	b672      	cpsid	i
}
 8001044:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2101      	movs	r1, #1
 800104a:	4814      	ldr	r0, [pc, #80]	@ (800109c <S2LP_ReadReg+0x74>)
 800104c:	f003 f82a 	bl	80040a4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <S2LP_ReadReg+0x78>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f107 0210 	add.w	r2, r7, #16
 8001058:	f107 0114 	add.w	r1, r7, #20
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2303      	movs	r3, #3
 8001064:	f004 fb24 	bl	80056b0 <HAL_SPI_TransmitReceive>
 8001068:	4603      	mov	r3, r0
 800106a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2101      	movs	r1, #1
 8001070:	480a      	ldr	r0, [pc, #40]	@ (800109c <S2LP_ReadReg+0x74>)
 8001072:	f003 f817 	bl	80040a4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001076:	b662      	cpsie	i
}
 8001078:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 8001080:	8a3a      	ldrh	r2, [r7, #16]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 800108c:	7cba      	ldrb	r2, [r7, #18]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	701a      	strb	r2, [r3, #0]
	return err;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	48000800 	.word	0x48000800
 80010a0:	2000f8d0 	.word	0x2000f8d0

080010a4 <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4603      	mov	r3, r0
 80010ac:	603a      	str	r2, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	460b      	mov	r3, r1
 80010b2:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 80010b4:	2300      	movs	r3, #0
 80010b6:	733b      	strb	r3, [r7, #12]
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	737b      	strb	r3, [r7, #13]
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
}
 80010c2:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	4811      	ldr	r0, [pc, #68]	@ (8001110 <S2LP_WriteReg+0x6c>)
 80010ca:	f002 ffeb 	bl	80040a4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <S2LP_WriteReg+0x70>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	f107 0208 	add.w	r2, r7, #8
 80010d6:	f107 010c 	add.w	r1, r7, #12
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2303      	movs	r3, #3
 80010e2:	f004 fae5 	bl	80056b0 <HAL_SPI_TransmitReceive>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2101      	movs	r1, #1
 80010ee:	4808      	ldr	r0, [pc, #32]	@ (8001110 <S2LP_WriteReg+0x6c>)
 80010f0:	f002 ffd8 	bl	80040a4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80010f4:	b662      	cpsie	i
}
 80010f6:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 80010fe:	893a      	ldrh	r2, [r7, #8]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	801a      	strh	r2, [r3, #0]
	return err;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	48000800 	.word	0x48000800
 8001114:	2000f8d0 	.word	0x2000f8d0

08001118 <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b08d      	sub	sp, #52	@ 0x34
 800111c:	af02      	add	r7, sp, #8
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	460b      	mov	r3, r1
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 800112a:	23ff      	movs	r3, #255	@ 0xff
 800112c:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 800112e:	7afa      	ldrb	r2, [r7, #11]
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	3302      	adds	r3, #2
 8001136:	68f9      	ldr	r1, [r7, #12]
 8001138:	4618      	mov	r0, r3
 800113a:	f006 fb8e 	bl	800785a <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 800113e:	b672      	cpsid	i
}
 8001140:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2101      	movs	r1, #1
 8001146:	4814      	ldr	r0, [pc, #80]	@ (8001198 <S2LP_WriteTxFIFO+0x80>)
 8001148:	f002 ffac 	bl	80040a4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <S2LP_WriteTxFIFO+0x84>)
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	7afb      	ldrb	r3, [r7, #11]
 8001152:	b29b      	uxth	r3, r3
 8001154:	3302      	adds	r3, #2
 8001156:	b29b      	uxth	r3, r3
 8001158:	f107 0210 	add.w	r2, r7, #16
 800115c:	f107 011c 	add.w	r1, r7, #28
 8001160:	f04f 34ff 	mov.w	r4, #4294967295
 8001164:	9400      	str	r4, [sp, #0]
 8001166:	f004 faa3 	bl	80056b0 <HAL_SPI_TransmitReceive>
 800116a:	4603      	mov	r3, r0
 800116c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2101      	movs	r1, #1
 8001174:	4808      	ldr	r0, [pc, #32]	@ (8001198 <S2LP_WriteTxFIFO+0x80>)
 8001176:	f002 ff95 	bl	80040a4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800117a:	b662      	cpsie	i
}
 800117c:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 8001184:	8a3a      	ldrh	r2, [r7, #16]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	801a      	strh	r2, [r3, #0]
	return err;
 800118a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800118e:	4618      	mov	r0, r3
 8001190:	372c      	adds	r7, #44	@ 0x2c
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	bf00      	nop
 8001198:	48000800 	.word	0x48000800
 800119c:	2000f8d0 	.word	0x2000f8d0

080011a0 <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	2072      	movs	r0, #114	@ 0x72
 80011b4:	f7ff ff06 	bl	8000fc4 <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	f023 0301 	bic.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <S2LP_Send+0x28>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
		return HAL_BUSY;
 80011c4:	2302      	movs	r3, #2
 80011c6:	e0b0      	b.n	800132a <S2LP_Send+0x18a>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 80011c8:	4b5a      	ldr	r3, [pc, #360]	@ (8001334 <S2LP_Send+0x194>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 80011ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001338 <S2LP_Send+0x198>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 80011d4:	4b59      	ldr	r3, [pc, #356]	@ (800133c <S2LP_Send+0x19c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	b29b      	uxth	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	2031      	movs	r0, #49	@ 0x31
 80011e8:	f7ff ff5c 	bl	80010a4 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2200      	movs	r2, #0
 80011f2:	4619      	mov	r1, r3
 80011f4:	2032      	movs	r0, #50	@ 0x32
 80011f6:	f7ff ff55 	bl	80010a4 <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 80011fa:	e00c      	b.n	8001216 <S2LP_Send+0x76>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	2066      	movs	r0, #102	@ 0x66
 8001204:	f7ff fede 	bl	8000fc4 <S2LP_Command>
 8001208:	4603      	mov	r3, r0
 800120a:	73bb      	strb	r3, [r7, #14]
		if (err) {
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <S2LP_Send+0x76>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
			return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e089      	b.n	800132a <S2LP_Send+0x18a>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001216:	7b7b      	ldrb	r3, [r7, #13]
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b18      	cmp	r3, #24
 8001220:	d1ec      	bne.n	80011fc <S2LP_Send+0x5c>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	08db      	lsrs	r3, r3, #3
 800122a:	b29b      	uxth	r3, r3
 800122c:	887a      	ldrh	r2, [r7, #2]
 800122e:	f002 0207 	and.w	r2, r2, #7
 8001232:	b292      	uxth	r2, r2
 8001234:	2a00      	cmp	r2, #0
 8001236:	bf14      	ite	ne
 8001238:	2201      	movne	r2, #1
 800123a:	2200      	moveq	r2, #0
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	4413      	add	r3, r2
 8001240:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 8001242:	2310      	movs	r3, #16
 8001244:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	827b      	strh	r3, [r7, #18]
 800124a:	e059      	b.n	8001300 <S2LP_Send+0x160>
		if (underflow) {
 800124c:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <S2LP_Send+0x198>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d028      	beq.n	80012a8 <S2LP_Send+0x108>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	461a      	mov	r2, r3
 800125c:	2100      	movs	r1, #0
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff fee2 	bl	8001028 <S2LP_ReadReg>
 8001264:	4603      	mov	r3, r0
 8001266:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <S2LP_Send+0xd8>
				S2LP_PrintStatus(&radio_status);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f864 	bl	8001340 <S2LP_PrintStatus>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
			}
			return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e056      	b.n	800132a <S2LP_Send+0x18a>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d107      	bne.n	8001292 <S2LP_Send+0xf2>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	4619      	mov	r1, r3
 8001288:	2060      	movs	r0, #96	@ 0x60
 800128a:	f7ff fe9b 	bl	8000fc4 <S2LP_Command>
				sending = 1;
 800128e:	2301      	movs	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
			}

			__WFI();
 8001292:	bf30      	wfi
			if (fifo_almost_empty) {
 8001294:	4b29      	ldr	r3, [pc, #164]	@ (800133c <S2LP_Send+0x19c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d004      	beq.n	80012a8 <S2LP_Send+0x108>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 800129e:	230c      	movs	r3, #12
 80012a0:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <S2LP_Send+0x19c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 80012a8:	8abb      	ldrh	r3, [r7, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0e6      	beq.n	800127c <S2LP_Send+0xdc>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 80012ae:	8a7a      	ldrh	r2, [r7, #18]
 80012b0:	8a3b      	ldrh	r3, [r7, #16]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d109      	bne.n	80012cc <S2LP_Send+0x12c>
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	8a3b      	ldrh	r3, [r7, #16]
 80012be:	3b01      	subs	r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	e000      	b.n	80012ce <S2LP_Send+0x12e>
 80012cc:	2308      	movs	r3, #8
 80012ce:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 80012d0:	8a7b      	ldrh	r3, [r7, #18]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	461a      	mov	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	f107 020c 	add.w	r2, r7, #12
 80012de:	7bf9      	ldrb	r1, [r7, #15]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff19 	bl	8001118 <S2LP_WriteTxFIFO>
 80012e6:	4603      	mov	r3, r0
 80012e8:	73bb      	strb	r3, [r7, #14]
		if (err) {
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <S2LP_Send+0x154>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
			return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e01a      	b.n	800132a <S2LP_Send+0x18a>
		}
		free_chunks--;
 80012f4:	8abb      	ldrh	r3, [r7, #20]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 80012fa:	8a7b      	ldrh	r3, [r7, #18]
 80012fc:	3301      	adds	r3, #1
 80012fe:	827b      	strh	r3, [r7, #18]
 8001300:	8a7a      	ldrh	r2, [r7, #18]
 8001302:	8a3b      	ldrh	r3, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d3a1      	bcc.n	800124c <S2LP_Send+0xac>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d107      	bne.n	800131e <S2LP_Send+0x17e>
		S2LP_Command(CMD_TX, &radio_status);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4619      	mov	r1, r3
 8001314:	2060      	movs	r0, #96	@ 0x60
 8001316:	f7ff fe55 	bl	8000fc4 <S2LP_Command>
	}

	while (!packet_sent) {
 800131a:	e000      	b.n	800131e <S2LP_Send+0x17e>
		__WFI(); // wait until packet has been fully transmitted
 800131c:	bf30      	wfi
	while (!packet_sent) {
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <S2LP_Send+0x194>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f9      	beq.n	800131c <S2LP_Send+0x17c>
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
	return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000f8cc 	.word	0x2000f8cc
 8001338:	2000f8ce 	.word	0x2000f8ce
 800133c:	2000f8cd 	.word	0x2000f8cd

08001340 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
	DEBUG_PRINT("  MC_STATE: ");
	switch (status->MC_STATE) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	785b      	ldrb	r3, [r3, #1]
 800134c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b5c      	cmp	r3, #92	@ 0x5c
 8001354:	d06f      	beq.n	8001436 <S2LP_PrintStatus+0xf6>
 8001356:	2b5c      	cmp	r3, #92	@ 0x5c
 8001358:	dc6f      	bgt.n	800143a <S2LP_PrintStatus+0xfa>
 800135a:	2b30      	cmp	r3, #48	@ 0x30
 800135c:	dc68      	bgt.n	8001430 <S2LP_PrintStatus+0xf0>
 800135e:	2b00      	cmp	r3, #0
 8001360:	db6b      	blt.n	800143a <S2LP_PrintStatus+0xfa>
 8001362:	2b30      	cmp	r3, #48	@ 0x30
 8001364:	d869      	bhi.n	800143a <S2LP_PrintStatus+0xfa>
 8001366:	a201      	add	r2, pc, #4	@ (adr r2, 800136c <S2LP_PrintStatus+0x2c>)
 8001368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136c:	0800143b 	.word	0x0800143b
 8001370:	0800143b 	.word	0x0800143b
 8001374:	0800143b 	.word	0x0800143b
 8001378:	0800143b 	.word	0x0800143b
 800137c:	0800143b 	.word	0x0800143b
 8001380:	0800143b 	.word	0x0800143b
 8001384:	0800143b 	.word	0x0800143b
 8001388:	0800143b 	.word	0x0800143b
 800138c:	0800143b 	.word	0x0800143b
 8001390:	0800143b 	.word	0x0800143b
 8001394:	0800143b 	.word	0x0800143b
 8001398:	0800143b 	.word	0x0800143b
 800139c:	0800143b 	.word	0x0800143b
 80013a0:	0800143b 	.word	0x0800143b
 80013a4:	0800143b 	.word	0x0800143b
 80013a8:	0800143b 	.word	0x0800143b
 80013ac:	0800143b 	.word	0x0800143b
 80013b0:	0800143b 	.word	0x0800143b
 80013b4:	0800143b 	.word	0x0800143b
 80013b8:	0800143b 	.word	0x0800143b
 80013bc:	0800143b 	.word	0x0800143b
 80013c0:	0800143b 	.word	0x0800143b
 80013c4:	0800143b 	.word	0x0800143b
 80013c8:	0800143b 	.word	0x0800143b
 80013cc:	0800143b 	.word	0x0800143b
 80013d0:	0800143b 	.word	0x0800143b
 80013d4:	0800143b 	.word	0x0800143b
 80013d8:	0800143b 	.word	0x0800143b
 80013dc:	0800143b 	.word	0x0800143b
 80013e0:	0800143b 	.word	0x0800143b
 80013e4:	0800143b 	.word	0x0800143b
 80013e8:	0800143b 	.word	0x0800143b
 80013ec:	0800143b 	.word	0x0800143b
 80013f0:	0800143b 	.word	0x0800143b
 80013f4:	0800143b 	.word	0x0800143b
 80013f8:	0800143b 	.word	0x0800143b
 80013fc:	0800143b 	.word	0x0800143b
 8001400:	0800143b 	.word	0x0800143b
 8001404:	0800143b 	.word	0x0800143b
 8001408:	0800143b 	.word	0x0800143b
 800140c:	0800143b 	.word	0x0800143b
 8001410:	0800143b 	.word	0x0800143b
 8001414:	0800143b 	.word	0x0800143b
 8001418:	0800143b 	.word	0x0800143b
 800141c:	0800143b 	.word	0x0800143b
 8001420:	0800143b 	.word	0x0800143b
 8001424:	0800143b 	.word	0x0800143b
 8001428:	0800143b 	.word	0x0800143b
 800142c:	0800143b 	.word	0x0800143b
 8001430:	2b50      	cmp	r3, #80	@ 0x50
 8001432:	d004      	beq.n	800143e <S2LP_PrintStatus+0xfe>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
			break;
		default:
			DEBUG_PRINT("UNKNOWN");
			break;
 8001434:	e001      	b.n	800143a <S2LP_PrintStatus+0xfa>
			break;
 8001436:	bf00      	nop
 8001438:	e002      	b.n	8001440 <S2LP_PrintStatus+0x100>
			break;
 800143a:	bf00      	nop
 800143c:	e000      	b.n	8001440 <S2LP_PrintStatus+0x100>
			break;
 800143e:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	0000      	movs	r0, r0
	...

08001450 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 8001450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001454:	b09e      	sub	sp, #120	@ 0x78
 8001456:	af00      	add	r7, sp, #0
 8001458:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 800145a:	2304      	movs	r3, #4
 800145c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 8001460:	2301      	movs	r3, #1
 8001462:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 8001466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001468:	17da      	asrs	r2, r3, #31
 800146a:	469a      	mov	sl, r3
 800146c:	4693      	mov	fp, r2
 800146e:	ea4f 396a 	mov.w	r9, sl, asr #13
 8001472:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 8001476:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 800147a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	17da      	asrs	r2, r3, #31
 8001484:	623b      	str	r3, [r7, #32]
 8001486:	627a      	str	r2, [r7, #36]	@ 0x24
 8001488:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800148c:	4603      	mov	r3, r0
 800148e:	fb03 f209 	mul.w	r2, r3, r9
 8001492:	460b      	mov	r3, r1
 8001494:	fb08 f303 	mul.w	r3, r8, r3
 8001498:	4413      	add	r3, r2
 800149a:	4602      	mov	r2, r0
 800149c:	fba8 4502 	umull	r4, r5, r8, r2
 80014a0:	442b      	add	r3, r5
 80014a2:	461d      	mov	r5, r3
 80014a4:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 80014a8:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 80014ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80014b0:	a374      	add	r3, pc, #464	@ (adr r3, 8001684 <S2LP_PLLConf+0x234>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7fe fe9b 	bl	80001f0 <__aeabi_uldivmod>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4613      	mov	r3, r2
 80014c0:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 80014c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014c4:	2200      	movs	r2, #0
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	61fa      	str	r2, [r7, #28]
 80014ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001678 <S2LP_PLLConf+0x228>)
 80014cc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80014d0:	462a      	mov	r2, r5
 80014d2:	fb03 f202 	mul.w	r2, r3, r2
 80014d6:	2300      	movs	r3, #0
 80014d8:	4621      	mov	r1, r4
 80014da:	fb01 f303 	mul.w	r3, r1, r3
 80014de:	4413      	add	r3, r2
 80014e0:	4a65      	ldr	r2, [pc, #404]	@ (8001678 <S2LP_PLLConf+0x228>)
 80014e2:	4621      	mov	r1, r4
 80014e4:	fba1 1202 	umull	r1, r2, r1, r2
 80014e8:	637a      	str	r2, [r7, #52]	@ 0x34
 80014ea:	460a      	mov	r2, r1
 80014ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80014ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014f0:	4413      	add	r3, r2
 80014f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80014f4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80014f8:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 80014fc:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8001500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001502:	3301      	adds	r3, #1
 8001504:	2200      	movs	r2, #0
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	617a      	str	r2, [r7, #20]
 800150a:	4b5b      	ldr	r3, [pc, #364]	@ (8001678 <S2LP_PLLConf+0x228>)
 800150c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001510:	462a      	mov	r2, r5
 8001512:	fb03 f202 	mul.w	r2, r3, r2
 8001516:	2300      	movs	r3, #0
 8001518:	4621      	mov	r1, r4
 800151a:	fb01 f303 	mul.w	r3, r1, r3
 800151e:	4413      	add	r3, r2
 8001520:	4a55      	ldr	r2, [pc, #340]	@ (8001678 <S2LP_PLLConf+0x228>)
 8001522:	4621      	mov	r1, r4
 8001524:	fba1 1202 	umull	r1, r2, r1, r2
 8001528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800152a:	460a      	mov	r2, r1
 800152c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800152e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001530:	4413      	add	r3, r2
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001534:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001538:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 800153c:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 8001540:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001544:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001548:	1a84      	subs	r4, r0, r2
 800154a:	60bc      	str	r4, [r7, #8]
 800154c:	eb61 0303 	sbc.w	r3, r1, r3
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001556:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800155a:	1a84      	subs	r4, r0, r2
 800155c:	603c      	str	r4, [r7, #0]
 800155e:	eb61 0303 	sbc.w	r3, r1, r3
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001568:	4623      	mov	r3, r4
 800156a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156e:	4602      	mov	r2, r0
 8001570:	4293      	cmp	r3, r2
 8001572:	462b      	mov	r3, r5
 8001574:	460a      	mov	r2, r1
 8001576:	4193      	sbcs	r3, r2
 8001578:	d202      	bcs.n	8001580 <S2LP_PLLConf+0x130>
 800157a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800157c:	3301      	adds	r3, #1
 800157e:	e000      	b.n	8001582 <S2LP_PLLConf+0x132>
 8001580:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001582:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 8001584:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001588:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 8001590:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001594:	4a38      	ldr	r2, [pc, #224]	@ (8001678 <S2LP_PLLConf+0x228>)
 8001596:	fb92 f3f3 	sdiv	r3, r2, r3
 800159a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 800159c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800159e:	4a37      	ldr	r2, [pc, #220]	@ (800167c <S2LP_PLLConf+0x22c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d911      	bls.n	80015c8 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80015a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015a6:	4a36      	ldr	r2, [pc, #216]	@ (8001680 <S2LP_PLLConf+0x230>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d906      	bls.n	80015ba <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 80015ac:	2302      	movs	r3, #2
 80015ae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80015b8:	e017      	b.n	80015ea <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80015c6:	e010      	b.n	80015ea <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80015c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001680 <S2LP_PLLConf+0x230>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d906      	bls.n	80015de <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 80015d0:	2303      	movs	r3, #3
 80015d2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80015dc:	e005      	b.n	80015ea <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 80015de:	2302      	movs	r3, #2
 80015e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 80015ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80015ee:	015b      	lsls	r3, r3, #5
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015f4:	0e1b      	lsrs	r3, r3, #24
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 80015fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001600:	0c1b      	lsrs	r3, r3, #16
 8001602:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 8001606:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 800160e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001610:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 8001614:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3b30      	subs	r3, #48	@ 0x30
 800161e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 8001622:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001626:	2200      	movs	r2, #0
 8001628:	4619      	mov	r1, r3
 800162a:	2005      	movs	r0, #5
 800162c:	f7ff fd3a 	bl	80010a4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 8001630:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001634:	2200      	movs	r2, #0
 8001636:	4619      	mov	r1, r3
 8001638:	2006      	movs	r0, #6
 800163a:	f7ff fd33 	bl	80010a4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 800163e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001642:	2200      	movs	r2, #0
 8001644:	4619      	mov	r1, r3
 8001646:	2007      	movs	r0, #7
 8001648:	f7ff fd2c 	bl	80010a4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 800164c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001650:	2200      	movs	r2, #0
 8001652:	4619      	mov	r1, r3
 8001654:	2008      	movs	r0, #8
 8001656:	f7ff fd25 	bl	80010a4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 800165a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800165e:	2200      	movs	r2, #0
 8001660:	4619      	mov	r1, r3
 8001662:	2065      	movs	r0, #101	@ 0x65
 8001664:	f7ff fd1e 	bl	80010a4 <S2LP_WriteReg>
}
 8001668:	bf00      	nop
 800166a:	3778      	adds	r7, #120	@ 0x78
 800166c:	46bd      	mov	sp, r7
 800166e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	02faf080 	.word	0x02faf080
 800167c:	d693a3ff 	.word	0xd693a3ff
 8001680:	01c9c380 	.word	0x01c9c380
 8001684:	02faf080 	.word	0x02faf080
 8001688:	00000000 	.word	0x00000000

0800168c <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 800168c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001690:	b091      	sub	sp, #68	@ 0x44
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	460a      	mov	r2, r1
 8001698:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800169a:	4613      	mov	r3, r2
 800169c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 80016a0:	4b3f      	ldr	r3, [pc, #252]	@ (80017a0 <ComputeDatarate+0x114>)
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80016a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016a6:	4b3f      	ldr	r3, [pc, #252]	@ (80017a4 <ComputeDatarate+0x118>)
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d902      	bls.n	80016b2 <ComputeDatarate+0x26>
    f_dig >>= 1;
 80016ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016ae:	085b      	lsrs	r3, r3, #1
 80016b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 80016b2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d128      	bne.n	800170c <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 80016ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016bc:	2200      	movs	r2, #0
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	61fa      	str	r2, [r7, #28]
 80016c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80016c4:	2200      	movs	r2, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	617a      	str	r2, [r7, #20]
 80016ca:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80016ce:	462b      	mov	r3, r5
 80016d0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80016d4:	4642      	mov	r2, r8
 80016d6:	fb02 f203 	mul.w	r2, r2, r3
 80016da:	464b      	mov	r3, r9
 80016dc:	4621      	mov	r1, r4
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	4622      	mov	r2, r4
 80016e6:	4641      	mov	r1, r8
 80016e8:	fba2 ab01 	umull	sl, fp, r2, r1
 80016ec:	445b      	add	r3, fp
 80016ee:	469b      	mov	fp, r3
 80016f0:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 80016f4:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 80016f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	000a      	movs	r2, r1
 8001706:	2300      	movs	r3, #0
 8001708:	4613      	mov	r3, r2
 800170a:	e043      	b.n	8001794 <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 800170c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800170e:	2200      	movs	r2, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	60fa      	str	r2, [r7, #12]
 8001714:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001716:	2200      	movs	r2, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001720:	460b      	mov	r3, r1
 8001722:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 8001726:	623b      	str	r3, [r7, #32]
 8001728:	4613      	mov	r3, r2
 800172a:	f143 0300 	adc.w	r3, r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001730:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001734:	460b      	mov	r3, r1
 8001736:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 800173a:	4652      	mov	r2, sl
 800173c:	fb02 f203 	mul.w	r2, r2, r3
 8001740:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8001744:	465b      	mov	r3, fp
 8001746:	4682      	mov	sl, r0
 8001748:	468b      	mov	fp, r1
 800174a:	4651      	mov	r1, sl
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	4652      	mov	r2, sl
 8001754:	6a39      	ldr	r1, [r7, #32]
 8001756:	fba2 4501 	umull	r4, r5, r2, r1
 800175a:	442b      	add	r3, r5
 800175c:	461d      	mov	r5, r3
 800175e:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 8001762:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 8001766:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800176a:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 800176e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001772:	f1c1 0420 	rsb	r4, r1, #32
 8001776:	f1a1 0020 	sub.w	r0, r1, #32
 800177a:	fa22 f801 	lsr.w	r8, r2, r1
 800177e:	fa03 f404 	lsl.w	r4, r3, r4
 8001782:	ea48 0804 	orr.w	r8, r8, r4
 8001786:	fa23 f000 	lsr.w	r0, r3, r0
 800178a:	ea48 0800 	orr.w	r8, r8, r0
 800178e:	fa23 f901 	lsr.w	r9, r3, r1
 8001792:	4643      	mov	r3, r8
}
 8001794:	4618      	mov	r0, r3
 8001796:	3744      	adds	r7, #68	@ 0x44
 8001798:	46bd      	mov	sp, r7
 800179a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800179e:	4770      	bx	lr
 80017a0:	02faf080 	.word	0x02faf080
 80017a4:	01c9c380 	.word	0x01c9c380

080017a8 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 80017a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017ac:	b0ae      	sub	sp, #184	@ 0xb8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80017b4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80017b8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 80017bc:	4ba5      	ldr	r3, [pc, #660]	@ (8001a54 <SearchDatarateME+0x2ac>)
 80017be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80017c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017c6:	4ba4      	ldr	r3, [pc, #656]	@ (8001a58 <SearchDatarateME+0x2b0>)
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d904      	bls.n	80017d6 <SearchDatarateME+0x2e>
    f_dig >>= 1;
 80017cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80017dc:	e013      	b.n	8001806 <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 80017de:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80017e2:	4619      	mov	r1, r3
 80017e4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80017e8:	f7ff ff50 	bl	800168c <ComputeDatarate>
 80017ec:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 80017f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80017f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d909      	bls.n	8001810 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 80017fc:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001800:	3301      	adds	r3, #1
 8001802:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001806:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d1e7      	bne.n	80017de <SearchDatarateME+0x36>
 800180e:	e000      	b.n	8001812 <SearchDatarateME+0x6a>
      break;
 8001810:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8001812:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001816:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800181a:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 800181c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d16b      	bne.n	80018fc <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 8001824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001828:	2200      	movs	r2, #0
 800182a:	663b      	str	r3, [r7, #96]	@ 0x60
 800182c:	667a      	str	r2, [r7, #100]	@ 0x64
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001838:	000b      	movs	r3, r1
 800183a:	2200      	movs	r2, #0
 800183c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8001840:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001844:	2200      	movs	r2, #0
 8001846:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001848:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800184a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800184e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001852:	f7fe fccd 	bl	80001f0 <__aeabi_uldivmod>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	b293      	uxth	r3, r2
 800185c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001860:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 8001862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001866:	2200      	movs	r2, #0
 8001868:	653b      	str	r3, [r7, #80]	@ 0x50
 800186a:	657a      	str	r2, [r7, #84]	@ 0x54
 800186c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	2200      	movs	r2, #0
 8001876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001878:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800187a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800187e:	462b      	mov	r3, r5
 8001880:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001884:	4642      	mov	r2, r8
 8001886:	fb02 f203 	mul.w	r2, r2, r3
 800188a:	464b      	mov	r3, r9
 800188c:	4621      	mov	r1, r4
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	4622      	mov	r2, r4
 8001896:	4641      	mov	r1, r8
 8001898:	fba2 1201 	umull	r1, r2, r2, r1
 800189c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800189e:	460a      	mov	r2, r1
 80018a0:	67ba      	str	r2, [r7, #120]	@ 0x78
 80018a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80018a4:	4413      	add	r3, r2
 80018a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018a8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80018ac:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 80018b0:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 80018b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018b8:	2200      	movs	r2, #0
 80018ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80018bc:	647a      	str	r2, [r7, #68]	@ 0x44
 80018be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	17da      	asrs	r2, r3, #31
 80018c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018cc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80018d0:	462b      	mov	r3, r5
 80018d2:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80018d6:	4642      	mov	r2, r8
 80018d8:	fb02 f203 	mul.w	r2, r2, r3
 80018dc:	464b      	mov	r3, r9
 80018de:	4621      	mov	r1, r4
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	4622      	mov	r2, r4
 80018e8:	4641      	mov	r1, r8
 80018ea:	fba2 ab01 	umull	sl, fp, r2, r1
 80018ee:	445b      	add	r3, fp
 80018f0:	469b      	mov	fp, r3
 80018f2:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 80018f6:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 80018fa:	e07d      	b.n	80019f8 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 80018fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001900:	2200      	movs	r2, #0
 8001902:	4698      	mov	r8, r3
 8001904:	4691      	mov	r9, r2
 8001906:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800190a:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 800190e:	f1a1 0320 	sub.w	r3, r1, #32
 8001912:	f1c1 0220 	rsb	r2, r1, #32
 8001916:	fa09 f501 	lsl.w	r5, r9, r1
 800191a:	fa08 f303 	lsl.w	r3, r8, r3
 800191e:	431d      	orrs	r5, r3
 8001920:	fa28 f202 	lsr.w	r2, r8, r2
 8001924:	4315      	orrs	r5, r2
 8001926:	fa08 f401 	lsl.w	r4, r8, r1
 800192a:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 800192e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001932:	2200      	movs	r2, #0
 8001934:	633b      	str	r3, [r7, #48]	@ 0x30
 8001936:	637a      	str	r2, [r7, #52]	@ 0x34
 8001938:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800193c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001940:	f7fe fc56 	bl	80001f0 <__aeabi_uldivmod>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	b293      	uxth	r3, r2
 800194a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800194e:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8001950:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001954:	2200      	movs	r2, #0
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001958:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800195a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001964:	17da      	asrs	r2, r3, #31
 8001966:	623b      	str	r3, [r7, #32]
 8001968:	627a      	str	r2, [r7, #36]	@ 0x24
 800196a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800196e:	462b      	mov	r3, r5
 8001970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001974:	4642      	mov	r2, r8
 8001976:	fb02 f203 	mul.w	r2, r2, r3
 800197a:	464b      	mov	r3, r9
 800197c:	4621      	mov	r1, r4
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	4622      	mov	r2, r4
 8001986:	4641      	mov	r1, r8
 8001988:	fba2 1201 	umull	r1, r2, r2, r1
 800198c:	677a      	str	r2, [r7, #116]	@ 0x74
 800198e:	460a      	mov	r2, r1
 8001990:	673a      	str	r2, [r7, #112]	@ 0x70
 8001992:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001994:	4413      	add	r3, r2
 8001996:	677b      	str	r3, [r7, #116]	@ 0x74
 8001998:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800199c:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 80019a0:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 80019a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019a8:	2200      	movs	r2, #0
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	61fa      	str	r2, [r7, #28]
 80019ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 80019b8:	17da      	asrs	r2, r3, #31
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	617a      	str	r2, [r7, #20]
 80019be:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80019c2:	462b      	mov	r3, r5
 80019c4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019c8:	4642      	mov	r2, r8
 80019ca:	fb02 f203 	mul.w	r2, r2, r3
 80019ce:	464b      	mov	r3, r9
 80019d0:	4621      	mov	r1, r4
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	4622      	mov	r2, r4
 80019da:	4641      	mov	r1, r8
 80019dc:	fba2 1201 	umull	r1, r2, r2, r1
 80019e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019e2:	460a      	mov	r2, r1
 80019e4:	66ba      	str	r2, [r7, #104]	@ 0x68
 80019e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80019e8:	4413      	add	r3, r2
 80019ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80019ec:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80019f0:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 80019f4:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 80019f8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80019fc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001a00:	1a84      	subs	r4, r0, r2
 8001a02:	60bc      	str	r4, [r7, #8]
 8001a04:	eb61 0303 	sbc.w	r3, r1, r3
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001a0e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001a12:	1a84      	subs	r4, r0, r2
 8001a14:	603c      	str	r4, [r7, #0]
 8001a16:	eb61 0303 	sbc.w	r3, r1, r3
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a20:	4623      	mov	r3, r4
 8001a22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a26:	4602      	mov	r2, r0
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	4193      	sbcs	r3, r2
 8001a30:	d205      	bcs.n	8001a3e <SearchDatarateME+0x296>
 8001a32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	e002      	b.n	8001a44 <SearchDatarateME+0x29c>
 8001a3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001a48:	8013      	strh	r3, [r2, #0]

}
 8001a4a:	bf00      	nop
 8001a4c:	37b8      	adds	r7, #184	@ 0xb8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a54:	02faf080 	.word	0x02faf080
 8001a58:	01c9c380 	.word	0x01c9c380

08001a5c <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 8001a5c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a60:	b08c      	sub	sp, #48	@ 0x30
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	461e      	mov	r6, r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001a72:	4613      	mov	r3, r2
 8001a74:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001a78:	4633      	mov	r3, r6
 8001a7a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 8001a7e:	4b35      	ldr	r3, [pc, #212]	@ (8001b54 <ComputeFreqDeviation+0xf8>)
 8001a80:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 8001a82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d127      	bne.n	8001ada <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 8001a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	617a      	str	r2, [r7, #20]
 8001a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a96:	2200      	movs	r2, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	60fa      	str	r2, [r7, #12]
 8001a9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001aa0:	462b      	mov	r3, r5
 8001aa2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001aa6:	4642      	mov	r2, r8
 8001aa8:	fb02 f203 	mul.w	r2, r2, r3
 8001aac:	464b      	mov	r3, r9
 8001aae:	4621      	mov	r1, r4
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	4641      	mov	r1, r8
 8001aba:	fba2 ab01 	umull	sl, fp, r2, r1
 8001abe:	445b      	add	r3, fp
 8001ac0:	469b      	mov	fp, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	ea4f 529a 	mov.w	r2, sl, lsr #22
 8001ace:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 8001ad2:	ea4f 539b 	mov.w	r3, fp, lsr #22
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	e036      	b.n	8001b48 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 8001ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001adc:	2200      	movs	r2, #0
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ae6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001aea:	17da      	asrs	r2, r3, #31
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	61fa      	str	r2, [r7, #28]
 8001af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af4:	460b      	mov	r3, r1
 8001af6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001afa:	4652      	mov	r2, sl
 8001afc:	fb02 f203 	mul.w	r2, r2, r3
 8001b00:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8001b04:	465b      	mov	r3, fp
 8001b06:	4682      	mov	sl, r0
 8001b08:	468b      	mov	fp, r1
 8001b0a:	4651      	mov	r1, sl
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	4652      	mov	r2, sl
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	fba2 4501 	umull	r4, r5, r2, r1
 8001b1a:	442b      	add	r3, r5
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b22:	f1c3 0317 	rsb	r3, r3, #23
 8001b26:	f1c3 0120 	rsb	r1, r3, #32
 8001b2a:	f1a3 0220 	sub.w	r2, r3, #32
 8001b2e:	fa24 f803 	lsr.w	r8, r4, r3
 8001b32:	fa05 f101 	lsl.w	r1, r5, r1
 8001b36:	ea48 0801 	orr.w	r8, r8, r1
 8001b3a:	fa25 f202 	lsr.w	r2, r5, r2
 8001b3e:	ea48 0802 	orr.w	r8, r8, r2
 8001b42:	fa25 f903 	lsr.w	r9, r5, r3
 8001b46:	4643      	mov	r3, r8
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3730      	adds	r7, #48	@ 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b52:	4770      	bx	lr
 8001b54:	02faf080 	.word	0x02faf080

08001b58 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8001b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b5c:	b0a2      	sub	sp, #136	@ 0x88
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8001b62:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001b64:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 8001b66:	2304      	movs	r3, #4
 8001b68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001b78:	e012      	b.n	8001ba0 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 8001b7a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001b7e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001b82:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 8001b86:	20ff      	movs	r0, #255	@ 0xff
 8001b88:	f7ff ff68 	bl	8001a5c <ComputeFreqDeviation>
 8001b8c:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 8001b8e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001b90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d309      	bcc.n	8001baa <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8001b96:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001ba0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	d1e8      	bne.n	8001b7a <SearchFreqDevME+0x22>
 8001ba8:	e000      	b.n	8001bac <SearchFreqDevME+0x54>
      break;
 8001baa:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 8001bac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001bae:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001bb2:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 8001bb4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d155      	bne.n	8001c68 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 8001bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	058b      	lsls	r3, r1, #22
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 8001bda:	4621      	mov	r1, r4
 8001bdc:	058a      	lsls	r2, r1, #22
 8001bde:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 8001be2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001be6:	a36e      	add	r3, pc, #440	@ (adr r3, 8001da0 <SearchFreqDevME+0x248>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fb00 	bl	80001f0 <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	b2d3      	uxtb	r3, r2
 8001bf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001bf8:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 8001bfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2200      	movs	r2, #0
 8001c02:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c04:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c06:	4b68      	ldr	r3, [pc, #416]	@ (8001da8 <SearchFreqDevME+0x250>)
 8001c08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c0c:	462a      	mov	r2, r5
 8001c0e:	fb03 f202 	mul.w	r2, r3, r2
 8001c12:	2300      	movs	r3, #0
 8001c14:	4621      	mov	r1, r4
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a62      	ldr	r2, [pc, #392]	@ (8001da8 <SearchFreqDevME+0x250>)
 8001c1e:	4621      	mov	r1, r4
 8001c20:	fba1 ab02 	umull	sl, fp, r1, r2
 8001c24:	445b      	add	r3, fp
 8001c26:	469b      	mov	fp, r3
 8001c28:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 8001c2c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8001c30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	17da      	asrs	r2, r3, #31
 8001c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c3c:	4b5a      	ldr	r3, [pc, #360]	@ (8001da8 <SearchFreqDevME+0x250>)
 8001c3e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001c42:	462a      	mov	r2, r5
 8001c44:	fb03 f202 	mul.w	r2, r3, r2
 8001c48:	2300      	movs	r3, #0
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	4a55      	ldr	r2, [pc, #340]	@ (8001da8 <SearchFreqDevME+0x250>)
 8001c54:	4621      	mov	r1, r4
 8001c56:	fba1 8902 	umull	r8, r9, r1, r2
 8001c5a:	444b      	add	r3, r9
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8001c62:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8001c66:	e06d      	b.n	8001d44 <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8001c68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	623b      	str	r3, [r7, #32]
 8001c6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c70:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001c74:	f1c3 0117 	rsb	r1, r3, #23
 8001c78:	f1a1 0320 	sub.w	r3, r1, #32
 8001c7c:	f1c1 0220 	rsb	r2, r1, #32
 8001c80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c84:	4648      	mov	r0, r9
 8001c86:	fa00 f501 	lsl.w	r5, r0, r1
 8001c8a:	4640      	mov	r0, r8
 8001c8c:	fa00 f303 	lsl.w	r3, r0, r3
 8001c90:	431d      	orrs	r5, r3
 8001c92:	4643      	mov	r3, r8
 8001c94:	fa23 f202 	lsr.w	r2, r3, r2
 8001c98:	4315      	orrs	r5, r2
 8001c9a:	4643      	mov	r3, r8
 8001c9c:	408b      	lsls	r3, r1
 8001c9e:	461c      	mov	r4, r3
 8001ca0:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 8001ca4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001ca8:	a33d      	add	r3, pc, #244	@ (adr r3, 8001da0 <SearchFreqDevME+0x248>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe fa9f 	bl	80001f0 <__aeabi_uldivmod>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	b2d3      	uxtb	r3, r2
 8001cb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001cba:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 8001cbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001cc4:	17da      	asrs	r2, r3, #31
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	61fa      	str	r2, [r7, #28]
 8001cca:	4b37      	ldr	r3, [pc, #220]	@ (8001da8 <SearchFreqDevME+0x250>)
 8001ccc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001cd0:	462a      	mov	r2, r5
 8001cd2:	fb03 f202 	mul.w	r2, r3, r2
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	4621      	mov	r1, r4
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a31      	ldr	r2, [pc, #196]	@ (8001da8 <SearchFreqDevME+0x250>)
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	fba1 1202 	umull	r1, r2, r1, r2
 8001ce8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001cea:	460a      	mov	r2, r1
 8001cec:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001cee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cf0:	4413      	add	r3, r2
 8001cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cf4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001cf8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8001cfc:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8001d00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8001d08:	17da      	asrs	r2, r3, #31
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	617a      	str	r2, [r7, #20]
 8001d0e:	4b26      	ldr	r3, [pc, #152]	@ (8001da8 <SearchFreqDevME+0x250>)
 8001d10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d14:	462a      	mov	r2, r5
 8001d16:	fb03 f202 	mul.w	r2, r3, r2
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	4a20      	ldr	r2, [pc, #128]	@ (8001da8 <SearchFreqDevME+0x250>)
 8001d26:	4621      	mov	r1, r4
 8001d28:	fba1 1202 	umull	r1, r2, r1, r2
 8001d2c:	647a      	str	r2, [r7, #68]	@ 0x44
 8001d2e:	460a      	mov	r2, r1
 8001d30:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d34:	4413      	add	r3, r2
 8001d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d38:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001d3c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8001d40:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8001d44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001d4c:	1a84      	subs	r4, r0, r2
 8001d4e:	60bc      	str	r4, [r7, #8]
 8001d50:	eb61 0303 	sbc.w	r3, r1, r3
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001d5a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001d5e:	1a84      	subs	r4, r0, r2
 8001d60:	603c      	str	r4, [r7, #0]
 8001d62:	eb61 0303 	sbc.w	r3, r1, r3
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d6c:	4623      	mov	r3, r4
 8001d6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d72:	4602      	mov	r2, r0
 8001d74:	4293      	cmp	r3, r2
 8001d76:	462b      	mov	r3, r5
 8001d78:	460a      	mov	r2, r1
 8001d7a:	4193      	sbcs	r3, r2
 8001d7c:	d204      	bcs.n	8001d88 <SearchFreqDevME+0x230>
 8001d7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	e001      	b.n	8001d8c <SearchFreqDevME+0x234>
 8001d88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d8e:	7013      	strb	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	3788      	adds	r7, #136	@ 0x88
 8001d94:	46bd      	mov	sp, r7
 8001d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	02faf080 	.word	0x02faf080
 8001da4:	00000000 	.word	0x00000000
 8001da8:	02faf080 	.word	0x02faf080

08001dac <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 8001dba:	f107 0217 	add.w	r2, r7, #23
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	68b8      	ldr	r0, [r7, #8]
 8001dc6:	f7ff fcef 	bl	80017a8 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 8001dca:	f107 0212 	add.w	r2, r7, #18
 8001dce:	f107 0313 	add.w	r3, r7, #19
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff febf 	bl	8001b58 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 8001dda:	8abb      	ldrh	r3, [r7, #20]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2200      	movs	r2, #0
 8001de4:	4619      	mov	r1, r3
 8001de6:	200e      	movs	r0, #14
 8001de8:	f7ff f95c 	bl	80010a4 <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 8001dec:	8abb      	ldrh	r3, [r7, #20]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2200      	movs	r2, #0
 8001df2:	4619      	mov	r1, r3
 8001df4:	200f      	movs	r0, #15
 8001df6:	f7ff f955 	bl	80010a4 <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 8001dfa:	7dfa      	ldrb	r2, [r7, #23]
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2200      	movs	r2, #0
 8001e04:	4619      	mov	r1, r3
 8001e06:	2010      	movs	r0, #16
 8001e08:	f7ff f94c 	bl	80010a4 <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 8001e0c:	7cfb      	ldrb	r3, [r7, #19]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4619      	mov	r1, r3
 8001e12:	2012      	movs	r0, #18
 8001e14:	f7ff f946 	bl	80010a4 <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8001e18:	7cbb      	ldrb	r3, [r7, #18]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	2011      	movs	r0, #17
 8001e20:	f7ff f940 	bl	80010a4 <S2LP_WriteReg>
}
 8001e24:	bf00      	nop
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b0e      	cmp	r3, #14
 8001e38:	dd02      	ble.n	8001e40 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	e006      	b.n	8001e4e <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f1c3 031d 	rsb	r3, r3, #29
 8001e4c:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2062      	movs	r0, #98	@ 0x62
 8001e54:	f7ff f926 	bl	80010a4 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	2064      	movs	r0, #100	@ 0x64
 8001e5e:	f7ff f921 	bl	80010a4 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	2063      	movs	r0, #99	@ 0x63
 8001e68:	f7ff f91c 	bl	80010a4 <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4619      	mov	r1, r3
 8001e72:	2061      	movs	r0, #97	@ 0x61
 8001e74:	f7ff f916 	bl	80010a4 <S2LP_WriteReg>
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <S2LP_Standby>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Standby(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
	S2LPStatus radio_status;
	HAL_StatusTypeDef err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff f8cb 	bl	8001028 <S2LP_ReadReg>
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]

	while (radio_status.MC_STATE != MC_STATE_STANDBY) {
 8001e96:	e00b      	b.n	8001eb0 <S2LP_Standby+0x30>
		err = S2LP_Command(CMD_STANDBY, &radio_status);
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	2063      	movs	r0, #99	@ 0x63
 8001e9e:	f7ff f891 	bl	8000fc4 <S2LP_Command>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
		if (err) {
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <S2LP_Standby+0x30>
			DEBUG_PRINT("[S2LP] Error: cannot enter sleep mode\r\n");
			return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e006      	b.n	8001ebe <S2LP_Standby+0x3e>
	while (radio_status.MC_STATE != MC_STATE_STANDBY) {
 8001eb0:	797b      	ldrb	r3, [r7, #5]
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d1ed      	bne.n	8001e98 <S2LP_Standby+0x18>
		}
	}

	return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop

08001ec8 <S2LP_WakeUp>:

HAL_StatusTypeDef S2LP_WakeUp(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
	S2LPStatus radio_status;
	HAL_StatusTypeDef err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8001ece:	463b      	mov	r3, r7
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff f8a7 	bl	8001028 <S2LP_ReadReg>
 8001eda:	4603      	mov	r3, r0
 8001edc:	70fb      	strb	r3, [r7, #3]

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8001ede:	463b      	mov	r3, r7
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	2072      	movs	r0, #114	@ 0x72
 8001ee4:	f7ff f86e 	bl	8000fc4 <S2LP_Command>

	// Ensure the radio is in READY mode before trying to lock for Tx
	uint32_t ready_timeout = 100000;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <S2LP_WakeUp+0x68>)
 8001eea:	607b      	str	r3, [r7, #4]
	while (radio_status.MC_STATE != MC_STATE_READY && ready_timeout--) {
 8001eec:	e007      	b.n	8001efe <S2LP_WakeUp+0x36>
		S2LP_Command(CMD_READY, &radio_status);
 8001eee:	463b      	mov	r3, r7
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	2062      	movs	r0, #98	@ 0x62
 8001ef4:	f7ff f866 	bl	8000fc4 <S2LP_Command>
		HAL_Delay(1);
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f000 fcaf 	bl	800285c <HAL_Delay>
	while (radio_status.MC_STATE != MC_STATE_READY && ready_timeout--) {
 8001efe:	787b      	ldrb	r3, [r7, #1]
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <S2LP_WakeUp+0x4c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	1e5a      	subs	r2, r3, #1
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1ec      	bne.n	8001eee <S2LP_WakeUp+0x26>
	}
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <S2LP_WakeUp+0x5c>
		DEBUG_PRINT("[S2LP] Error: radio did not become READY, state: 0x%X\r\n", radio_status.MC_STATE);
		return HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
 8001f22:	e000      	b.n	8001f26 <S2LP_WakeUp+0x5e>
	}

	return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	000186a0 	.word	0x000186a0

08001f34 <S2LP_Init>:

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 8001f3c:	4a44      	ldr	r2, [pc, #272]	@ (8002050 <S2LP_Init+0x11c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 8001f42:	f002 fe59 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a42      	ldr	r2, [pc, #264]	@ (8002054 <S2LP_Init+0x120>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0a9b      	lsrs	r3, r3, #10
 8001f50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f52:	b672      	cpsid	i
}
 8001f54:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f5c:	483e      	ldr	r0, [pc, #248]	@ (8002058 <S2LP_Init+0x124>)
 8001f5e:	f002 f8a1 	bl	80040a4 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e003      	b.n	8001f70 <S2LP_Init+0x3c>
		asm volatile("nop");
 8001f68:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3f7      	bcc.n	8001f68 <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8001f78:	b662      	cpsie	i
}
 8001f7a:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2103      	movs	r1, #3
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff f88f 	bl	80010a4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 8001f86:	2200      	movs	r2, #0
 8001f88:	21a4      	movs	r1, #164	@ 0xa4
 8001f8a:	2053      	movs	r0, #83	@ 0x53
 8001f8c:	f7ff f88a 	bl	80010a4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 8001f90:	2200      	movs	r2, #0
 8001f92:	2101      	movs	r1, #1
 8001f94:	2052      	movs	r0, #82	@ 0x52
 8001f96:	f7ff f885 	bl	80010a4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2051      	movs	r0, #81	@ 0x51
 8001fa0:	f7ff f880 	bl	80010a4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2050      	movs	r0, #80	@ 0x50
 8001faa:	f7ff f87b 	bl	80010a4 <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	203f      	movs	r0, #63	@ 0x3f
 8001fb4:	f7ff f876 	bl	80010a4 <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	21b7      	movs	r1, #183	@ 0xb7
 8001fbc:	2033      	movs	r0, #51	@ 0x33
 8001fbe:	f7ff f871 	bl	80010a4 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2154      	movs	r1, #84	@ 0x54
 8001fc6:	2034      	movs	r0, #52	@ 0x34
 8001fc8:	f7ff f86c 	bl	80010a4 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	212a      	movs	r1, #42	@ 0x2a
 8001fd0:	2035      	movs	r0, #53	@ 0x35
 8001fd2:	f7ff f867 	bl	80010a4 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	213e      	movs	r1, #62	@ 0x3e
 8001fda:	2036      	movs	r0, #54	@ 0x36
 8001fdc:	f7ff f862 	bl	80010a4 <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 8001fe0:	481e      	ldr	r0, [pc, #120]	@ (800205c <S2LP_Init+0x128>)
 8001fe2:	f7ff fa35 	bl	8001450 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff ff20 	bl	8001e2c <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 8001fec:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001ff0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff fed9 	bl	8001dac <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	2030      	movs	r0, #48	@ 0x30
 8002000:	f7ff f850 	bl	80010a4 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	202e      	movs	r0, #46	@ 0x2e
 800200a:	f7ff f84b 	bl	80010a4 <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 800200e:	f107 020c 	add.w	r2, r7, #12
 8002012:	f107 030b 	add.w	r3, r7, #11
 8002016:	4619      	mov	r1, r3
 8002018:	206c      	movs	r0, #108	@ 0x6c
 800201a:	f7ff f805 	bl	8001028 <S2LP_ReadReg>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
	if (err) {
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <S2LP_Init+0xf8>
		return err;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	e00d      	b.n	8002048 <S2LP_Init+0x114>
	} else if (rco_conf != 0x45) {
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	2b45      	cmp	r3, #69	@ 0x45
 8002030:	d001      	beq.n	8002036 <S2LP_Init+0x102>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
		return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e008      	b.n	8002048 <S2LP_Init+0x114>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 8002036:	7b7b      	ldrb	r3, [r7, #13]
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <S2LP_Init+0x112>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
		return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <S2LP_Init+0x114>
	}

	return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	2000f8d0 	.word	0x2000f8d0
 8002054:	1b4e81b5 	.word	0x1b4e81b5
 8002058:	48001400 	.word	0x48001400
 800205c:	33bca100 	.word	0x33bca100

08002060 <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	2200      	movs	r2, #0
 800206a:	4619      	mov	r1, r3
 800206c:	20fc      	movs	r0, #252	@ 0xfc
 800206e:	f7fe ffdb 	bl	8001028 <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 8002072:	1dbb      	adds	r3, r7, #6
 8002074:	2200      	movs	r2, #0
 8002076:	4619      	mov	r1, r3
 8002078:	20fd      	movs	r0, #253	@ 0xfd
 800207a:	f7fe ffd5 	bl	8001028 <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <S2LP_IRQ_Handler+0x58>)
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 800208e:	79bb      	ldrb	r3, [r7, #6]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 8002098:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <S2LP_IRQ_Handler+0x5c>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 800209e:	79bb      	ldrb	r3, [r7, #6]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <S2LP_IRQ_Handler+0x60>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000f8cd 	.word	0x2000f8cd
 80020bc:	2000f8ce 	.word	0x2000f8ce
 80020c0:	2000f8cc 	.word	0x2000f8cc

080020c4 <step23_batch_fft>:

// Step 2 & 3 : Compute the full spectrogram and take the absolute value
// This function takes in a buffer of MEL_NUM_VEC * SAMPLES_NUM, and outputs the mel vectors in mel_vectors.
// The function computes the FFT of each vector in the buffer, and then computes the complex magnitude of each FFT.
void step23_batch_fft(q15_t *buffer)
{
 80020c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c8:	f500 459f 	add.w	r5, r0, #20352	@ 0x4f80
 80020cc:	f6ad 0d18 	subw	sp, sp, #2072	@ 0x818
 80020d0:	1e84      	subs	r4, r0, #2
 80020d2:	357e      	adds	r5, #126	@ 0x7e
	q15_t fft_buffer[SAMPLES_NUM*2];
	// 2.1 : Compute each FFT of size SAMPLES_NUM
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
		// Compute the FFT of each vector in the buffer
		arm_rfft_instance_q15 rfft_inst;
		arm_rfft_init_q15(&rfft_inst, SAMPLES_NUM, 0, 1);
 80020d4:	2301      	movs	r3, #1
		arm_rfft_q15(&rfft_inst, &buffer[i*SAMPLES_NUM], fft_buffer);
 80020d6:	f104 0802 	add.w	r8, r4, #2
		arm_rfft_init_q15(&rfft_inst, SAMPLES_NUM, 0, 1);
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020e0:	4668      	mov	r0, sp
 80020e2:	f004 fb0d 	bl	8006700 <arm_rfft_init_q15>
		arm_rfft_q15(&rfft_inst, &buffer[i*SAMPLES_NUM], fft_buffer);
 80020e6:	4641      	mov	r1, r8
 80020e8:	aa06      	add	r2, sp, #24
 80020ea:	4668      	mov	r0, sp
 80020ec:	f004 fa8c 	bl	8006608 <arm_rfft_q15>
			real = real > 0 ? real : -real; // abs(real)
 80020f0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80020f4:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
			real = real > 0 ? real : -real; // abs(real)
 80020f8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80020fc:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
			real = real > 0 ? real : -real; // abs(real)
 8002100:	2a00      	cmp	r2, #0
 8002102:	bfb8      	it	lt
 8002104:	4252      	neglt	r2, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002106:	2800      	cmp	r0, #0
 8002108:	bfb8      	it	lt
 800210a:	4240      	neglt	r0, r0
			real = real > 0 ? real : -real; // abs(real)
 800210c:	2b00      	cmp	r3, #0
 800210e:	bfb8      	it	lt
 8002110:	425b      	neglt	r3, r3
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002112:	2900      	cmp	r1, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002114:	b216      	sxth	r6, r2
 8002116:	fa0f f880 	sxth.w	r8, r0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800211a:	bfb8      	it	lt
 800211c:	4249      	neglt	r1, r1
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 800211e:	b21a      	sxth	r2, r3
 8002120:	4546      	cmp	r6, r8
 8002122:	b208      	sxth	r0, r1
 8002124:	bfb8      	it	lt
 8002126:	4646      	movlt	r6, r8
 8002128:	4282      	cmp	r2, r0
 800212a:	bfb8      	it	lt
 800212c:	4602      	movlt	r2, r0
 800212e:	8066      	strh	r6, [r4, #2]
 8002130:	f60d 0718 	addw	r7, sp, #2072	@ 0x818
 8002134:	1d26      	adds	r6, r4, #4
 8002136:	80a2      	strh	r2, [r4, #4]
	for (int i = 0; i < SAMPLES_NUM; i++)
 8002138:	ab08      	add	r3, sp, #32
			real = real > 0 ? real : -real; // abs(real)
 800213a:	f9b3 e000 	ldrsh.w	lr, [r3]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800213e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
			real = real > 0 ? real : -real; // abs(real)
 8002142:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002146:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
			real = real > 0 ? real : -real; // abs(real)
 800214a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800214e:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
			real = real > 0 ? real : -real; // abs(real)
 8002152:	f1be 0f00 	cmp.w	lr, #0
 8002156:	bfb8      	it	lt
 8002158:	f1ce 0e00 	rsblt	lr, lr, #0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800215c:	2900      	cmp	r1, #0
 800215e:	bfb8      	it	lt
 8002160:	4249      	neglt	r1, r1
			real = real > 0 ? real : -real; // abs(real)
 8002162:	f1bc 0f00 	cmp.w	ip, #0
 8002166:	bfb8      	it	lt
 8002168:	f1cc 0c00 	rsblt	ip, ip, #0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800216c:	2a00      	cmp	r2, #0
 800216e:	bfb8      	it	lt
 8002170:	4252      	neglt	r2, r2
			real = real > 0 ? real : -real; // abs(real)
 8002172:	2800      	cmp	r0, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002174:	fa0f fe8e 	sxth.w	lr, lr
 8002178:	b209      	sxth	r1, r1
			real = real > 0 ? real : -real; // abs(real)
 800217a:	bfb8      	it	lt
 800217c:	4240      	neglt	r0, r0
			imag = imag > 0 ? imag : -imag; // abs(imag)
 800217e:	f1b8 0f00 	cmp.w	r8, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002182:	fa0f fc8c 	sxth.w	ip, ip
 8002186:	b212      	sxth	r2, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 8002188:	bfb8      	it	lt
 800218a:	f1c8 0800 	rsblt	r8, r8, #0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 800218e:	458e      	cmp	lr, r1
 8002190:	bfb8      	it	lt
 8002192:	468e      	movlt	lr, r1
			real = real > 0 ? real : -real; // abs(real)
 8002194:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 8002198:	f8a6 e002 	strh.w	lr, [r6, #2]
 800219c:	4594      	cmp	ip, r2
 800219e:	bfb8      	it	lt
 80021a0:	4694      	movlt	ip, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80021a2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80021a6:	f8a6 c004 	strh.w	ip, [r6, #4]
			real = real > 0 ? real : -real; // abs(real)
 80021aa:	2900      	cmp	r1, #0
 80021ac:	bfb8      	it	lt
 80021ae:	4249      	neglt	r1, r1
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80021b0:	2a00      	cmp	r2, #0
 80021b2:	bfb8      	it	lt
 80021b4:	4252      	neglt	r2, r2
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80021b6:	b209      	sxth	r1, r1
 80021b8:	b212      	sxth	r2, r2
 80021ba:	b200      	sxth	r0, r0
 80021bc:	fa0f f888 	sxth.w	r8, r8
 80021c0:	4291      	cmp	r1, r2
 80021c2:	bfb8      	it	lt
 80021c4:	4611      	movlt	r1, r2
 80021c6:	4540      	cmp	r0, r8
			real = real > 0 ? real : -real; // abs(real)
 80021c8:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80021cc:	8131      	strh	r1, [r6, #8]
 80021ce:	bfb8      	it	lt
 80021d0:	4640      	movlt	r0, r8
 80021d2:	80f0      	strh	r0, [r6, #6]
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80021d4:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
			real = real > 0 ? real : -real; // abs(real)
 80021d8:	2a00      	cmp	r2, #0
 80021da:	bfb8      	it	lt
 80021dc:	4252      	neglt	r2, r2
			imag = imag > 0 ? imag : -imag; // abs(imag)
 80021de:	2800      	cmp	r0, #0
 80021e0:	bfb8      	it	lt
 80021e2:	4240      	neglt	r0, r0
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80021e4:	fa0f f882 	sxth.w	r8, r2
 80021e8:	fa0f fc80 	sxth.w	ip, r0
 80021ec:	45e0      	cmp	r8, ip
	for (int i = 0; i < SAMPLES_NUM; i++)
 80021ee:	f103 0314 	add.w	r3, r3, #20
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80021f2:	bfb8      	it	lt
 80021f4:	46e0      	movlt	r8, ip
	for (int i = 0; i < SAMPLES_NUM; i++)
 80021f6:	429f      	cmp	r7, r3
			output_buffer[i] = real > imag ? real : imag; // max(real, imag)
 80021f8:	f826 8f0a 	strh.w	r8, [r6, #10]!
	for (int i = 0; i < SAMPLES_NUM; i++)
 80021fc:	d19d      	bne.n	800213a <step23_batch_fft+0x76>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80021fe:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002202:	42a5      	cmp	r5, r4
 8002204:	f47f af66 	bne.w	80020d4 <step23_batch_fft+0x10>

		// 2.2 : Compute the complex magnitude of each FFT
		step3_approximate_magnitude(fft_buffer, &buffer[i*SAMPLES_NUM]);
	}
}
 8002208:	f60d 0d18 	addw	sp, sp, #2072	@ 0x818
 800220c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002210 <step4_mel_filter_apply>:

// Step 4 : Compute the mel vectors of each FFT (parallel processing)
// This function takes in a buffer of MEL_NUM_VEC * SAMPLES_NUM, and outputs the mel vectors in mel_vectors.
void step4_mel_filter_apply(q15_t *buffer, q15_t mel_vectors[MEL_NUM_VEC][MEL_VEC_LENGTH])
{
 8002210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002214:	f101 0b28 	add.w	fp, r1, #40	@ 0x28
 8002218:	b08b      	sub	sp, #44	@ 0x2c
 800221a:	460d      	mov	r5, r1
 800221c:	465f      	mov	r7, fp
 800221e:	4606      	mov	r6, r0
 8002220:	f501 7352 	add.w	r3, r1, #840	@ 0x348
   */
  __STATIC_FORCEINLINE q15_t clip_q63_to_q15(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 8002224:	f647 7aff 	movw	sl, #32767	@ 0x7fff
	// 4.1 : Compute the mel vectors of each FFT (parallel processing)
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
		mel_filter_apply(&buffer[i*SAMPLES_NUM], &mel_vectors[i][0], SAMPLES_NUM/2, MEL_VEC_LENGTH);
 8002228:	e9cd 3b00 	strd	r3, fp, [sp]
 800222c:	4c37      	ldr	r4, [pc, #220]	@ (800230c <step4_mel_filter_apply+0xfc>)
		q15_t* fft_samples_1 = &fft_array[mel_triangles[i+1].idx_offset];
 800222e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
		q15_t* fft_samples_2 = &fft_array[mel_triangles[i+2].idx_offset];
 8002230:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
		q15_t* fft_samples_3 = &fft_array[mel_triangles[i+3].idx_offset];
 8002234:	f8d4 1170 	ldr.w	r1, [r4, #368]	@ 0x170
		q15_t* fft_samples_0 = &fft_array[mel_triangles[i].idx_offset];
 8002238:	f854 0c04 	ldr.w	r0, [r4, #-4]
		q15_t* fft_samples_1 = &fft_array[mel_triangles[i+1].idx_offset];
 800223c:	eb06 0b42 	add.w	fp, r6, r2, lsl #1
		q15_t* fft_samples_2 = &fft_array[mel_triangles[i+2].idx_offset];
 8002240:	eb06 0843 	add.w	r8, r6, r3, lsl #1
		arm_dot_prod_q15(fft_samples_0, mel_values_0, mel_triangles[i].triangle_len, &mel_result_0);
 8002244:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8002248:	eb06 0040 	add.w	r0, r6, r0, lsl #1
		q15_t* fft_samples_3 = &fft_array[mel_triangles[i+3].idx_offset];
 800224c:	eb06 0941 	add.w	r9, r6, r1, lsl #1
		arm_dot_prod_q15(fft_samples_0, mel_values_0, mel_triangles[i].triangle_len, &mel_result_0);
 8002250:	ab02      	add	r3, sp, #8
 8002252:	4621      	mov	r1, r4
 8002254:	f004 fb2e 	bl	80068b4 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_1, mel_values_1, mel_triangles[i+1].triangle_len, &mel_result_1);
 8002258:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800225a:	ab04      	add	r3, sp, #16
 800225c:	4658      	mov	r0, fp
 800225e:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
 8002262:	f004 fb27 	bl	80068b4 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_2, mel_values_2, mel_triangles[i+2].triangle_len, &mel_result_2);
 8002266:	f8d4 20f0 	ldr.w	r2, [r4, #240]	@ 0xf0
 800226a:	ab06      	add	r3, sp, #24
 800226c:	4640      	mov	r0, r8
 800226e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8002272:	f004 fb1f 	bl	80068b4 <arm_dot_prod_q15>
		arm_dot_prod_q15(fft_samples_3, mel_values_3, mel_triangles[i+3].triangle_len, &mel_result_3);
 8002276:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
 800227a:	ab08      	add	r3, sp, #32
 800227c:	4648      	mov	r0, r9
 800227e:	f504 71ba 	add.w	r1, r4, #372	@ 0x174
 8002282:	f004 fb17 	bl	80068b4 <arm_dot_prod_q15>
		mel_array[i]   = clip_q63_to_q15(mel_result_0);
 8002286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
		mel_array[i+1] = clip_q63_to_q15(mel_result_1);
 800228a:	9905      	ldr	r1, [sp, #20]
 800228c:	9804      	ldr	r0, [sp, #16]
 800228e:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 8002292:	bf0c      	ite	eq
 8002294:	f342 33cf 	sbfxeq	r3, r2, #15, #16
 8002298:	ea8a 73e3 	eorne.w	r3, sl, r3, asr #31
 800229c:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 80022a0:	bf0c      	ite	eq
 80022a2:	f340 31cf 	sbfxeq	r1, r0, #15, #16
 80022a6:	ea8a 71e1 	eorne.w	r1, sl, r1, asr #31
		mel_array[i+2] = clip_q63_to_q15(mel_result_2);
 80022aa:	9a06      	ldr	r2, [sp, #24]
		mel_array[i]   = clip_q63_to_q15(mel_result_0);
 80022ac:	802b      	strh	r3, [r5, #0]
		mel_array[i+2] = clip_q63_to_q15(mel_result_2);
 80022ae:	9b07      	ldr	r3, [sp, #28]
		mel_array[i+3] = clip_q63_to_q15(mel_result_3);
 80022b0:	9808      	ldr	r0, [sp, #32]
		mel_array[i+1] = clip_q63_to_q15(mel_result_1);
 80022b2:	8069      	strh	r1, [r5, #2]
		mel_array[i+3] = clip_q63_to_q15(mel_result_3);
 80022b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80022b6:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 80022ba:	bf14      	ite	ne
 80022bc:	ea8a 73e3 	eorne.w	r3, sl, r3, asr #31
 80022c0:	f342 33cf 	sbfxeq	r3, r2, #15, #16
 80022c4:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
		mel_array[i+2] = clip_q63_to_q15(mel_result_2);
 80022c8:	80ab      	strh	r3, [r5, #4]
 80022ca:	d013      	beq.n	80022f4 <step4_mel_filter_apply+0xe4>
 80022cc:	ea8a 7ce1 	eor.w	ip, sl, r1, asr #31
		mel_array[i+3] = clip_q63_to_q15(mel_result_3);
 80022d0:	f8a5 c006 	strh.w	ip, [r5, #6]
	for (size_t i = 0; i < mel_len; i += 4) {
 80022d4:	3508      	adds	r5, #8
 80022d6:	42bd      	cmp	r5, r7
 80022d8:	f504 74f8 	add.w	r4, r4, #496	@ 0x1f0
 80022dc:	d1a7      	bne.n	800222e <step4_mel_filter_apply+0x1e>
 80022de:	e9dd 3e00 	ldrd	r3, lr, [sp]
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80022e2:	3728      	adds	r7, #40	@ 0x28
 80022e4:	42bb      	cmp	r3, r7
 80022e6:	4675      	mov	r5, lr
 80022e8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80022ec:	d00a      	beq.n	8002304 <step4_mel_filter_apply+0xf4>
 80022ee:	f10e 0b28 	add.w	fp, lr, #40	@ 0x28
 80022f2:	e799      	b.n	8002228 <step4_mel_filter_apply+0x18>
 80022f4:	0bc2      	lsrs	r2, r0, #15
 80022f6:	80ea      	strh	r2, [r5, #6]
	for (size_t i = 0; i < mel_len; i += 4) {
 80022f8:	3508      	adds	r5, #8
 80022fa:	42af      	cmp	r7, r5
 80022fc:	f504 74f8 	add.w	r4, r4, #496	@ 0x1f0
 8002300:	d195      	bne.n	800222e <step4_mel_filter_apply+0x1e>
 8002302:	e7ec      	b.n	80022de <step4_mel_filter_apply+0xce>
	}
}
 8002304:	b00b      	add	sp, #44	@ 0x2c
 8002306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800230a:	bf00      	nop
 800230c:	08007b28 	.word	0x08007b28

08002310 <Full_spectrogram_compute>:

void Full_spectrogram_compute(q15_t* buffer, q15_t mel_vectors[MEL_NUM_VEC][MEL_VEC_LENGTH])
{
 8002310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002314:	4605      	mov	r5, r0
 8002316:	460e      	mov	r6, r1
	//    3. Compute the complex magnitude
	//    4. Compute the mel vectors

	// This function takes in a buffer of MEL_NUM_VEC * SAMPLES_NUM, and outputs the mel vectors in mel_vectors.

	start_cycle_count();
 8002318:	f000 fa2a 	bl	8002770 <start_cycle_count>
	for (int i = 0; i < SAMPLES_NUM*MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800231c:	f505 409f 	add.w	r0, r5, #20352	@ 0x4f80
 8002320:	1eab      	subs	r3, r5, #2
 8002322:	462c      	mov	r4, r5
 8002324:	307e      	adds	r0, #126	@ 0x7e
		buffer[i] = ((q15_t)buffer[i]<<3) - ((q15_t)(1<<14));
 8002326:	885a      	ldrh	r2, [r3, #2]
 8002328:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 800232c:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 8002330:	00d1      	lsls	r1, r2, #3
 8002332:	889a      	ldrh	r2, [r3, #4]
 8002334:	f5a1 4780 	sub.w	r7, r1, #16384	@ 0x4000
 8002338:	00d1      	lsls	r1, r2, #3
 800233a:	805f      	strh	r7, [r3, #2]
 800233c:	f5a1 4780 	sub.w	r7, r1, #16384	@ 0x4000
 8002340:	89da      	ldrh	r2, [r3, #14]
 8002342:	8999      	ldrh	r1, [r3, #12]
 8002344:	809f      	strh	r7, [r3, #4]
 8002346:	88df      	ldrh	r7, [r3, #6]
 8002348:	ea4f 08ce 	mov.w	r8, lr, lsl #3
 800234c:	00c9      	lsls	r1, r1, #3
 800234e:	00d2      	lsls	r2, r2, #3
 8002350:	00ff      	lsls	r7, r7, #3
 8002352:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8002356:	f5a7 4780 	sub.w	r7, r7, #16384	@ 0x4000
 800235a:	f5a8 4e80 	sub.w	lr, r8, #16384	@ 0x4000
 800235e:	f5a9 4c80 	sub.w	ip, r9, #16384	@ 0x4000
 8002362:	f5a1 4880 	sub.w	r8, r1, #16384	@ 0x4000
 8002366:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800236a:	80df      	strh	r7, [r3, #6]
 800236c:	81d9      	strh	r1, [r3, #14]
 800236e:	f8a3 e008 	strh.w	lr, [r3, #8]
 8002372:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8002376:	f8a3 800c 	strh.w	r8, [r3, #12]
 800237a:	f833 2f10 	ldrh.w	r2, [r3, #16]!
 800237e:	00d7      	lsls	r7, r2, #3
 8002380:	f5a7 4180 	sub.w	r1, r7, #16384	@ 0x4000
	for (int i = 0; i < SAMPLES_NUM*MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002384:	4298      	cmp	r0, r3
		buffer[i] = ((q15_t)buffer[i]<<3) - ((q15_t)(1<<14));
 8002386:	8019      	strh	r1, [r3, #0]
	for (int i = 0; i < SAMPLES_NUM*MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002388:	d1cd      	bne.n	8002326 <Full_spectrogram_compute+0x16>
 800238a:	2004      	movs	r0, #4
 800238c:	2801      	cmp	r0, #1
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 800238e:	4f4d      	ldr	r7, [pc, #308]	@ (80024c4 <Full_spectrogram_compute+0x1b4>)
 8002390:	f505 49a0 	add.w	r9, r5, #20480	@ 0x5000
 8002394:	d03a      	beq.n	800240c <Full_spectrogram_compute+0xfc>
 8002396:	2802      	cmp	r0, #2
 8002398:	d02f      	beq.n	80023fa <Full_spectrogram_compute+0xea>
 800239a:	2803      	cmp	r0, #3
 800239c:	d024      	beq.n	80023e8 <Full_spectrogram_compute+0xd8>
 800239e:	b9d0      	cbnz	r0, 80023d6 <Full_spectrogram_compute+0xc6>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80023a0:	f505 6480 	add.w	r4, r5, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80023a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023a8:	462a      	mov	r2, r5
 80023aa:	4639      	mov	r1, r7
 80023ac:	4628      	mov	r0, r5
 80023ae:	f004 fa23 	bl	80067f8 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80023b2:	f505 6800 	add.w	r8, r5, #2048	@ 0x800
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80023b6:	4622      	mov	r2, r4
 80023b8:	4620      	mov	r0, r4
 80023ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023be:	4639      	mov	r1, r7
 80023c0:	f004 fa1a 	bl	80067f8 <arm_mult_q15>
 80023c4:	4642      	mov	r2, r8
 80023c6:	4640      	mov	r0, r8
 80023c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023cc:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80023ce:	f508 6480 	add.w	r4, r8, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80023d2:	f004 fa11 	bl	80067f8 <arm_mult_q15>
 80023d6:	4622      	mov	r2, r4
 80023d8:	4620      	mov	r0, r4
 80023da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023de:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80023e0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80023e4:	f004 fa08 	bl	80067f8 <arm_mult_q15>
 80023e8:	4622      	mov	r2, r4
 80023ea:	4620      	mov	r0, r4
 80023ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023f0:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80023f2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80023f6:	f004 f9ff 	bl	80067f8 <arm_mult_q15>
 80023fa:	4622      	mov	r2, r4
 80023fc:	4620      	mov	r0, r4
 80023fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002402:	4639      	mov	r1, r7
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002404:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002408:	f004 f9f6 	bl	80067f8 <arm_mult_q15>
 800240c:	4622      	mov	r2, r4
 800240e:	4620      	mov	r0, r4
 8002410:	f44f 7300 	mov.w	r3, #512	@ 0x200
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002414:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002418:	4639      	mov	r1, r7
 800241a:	f004 f9ed 	bl	80067f8 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800241e:	45a1      	cmp	r9, r4
 8002420:	d043      	beq.n	80024aa <Full_spectrogram_compute+0x19a>
 8002422:	f504 6880 	add.w	r8, r4, #1024	@ 0x400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002426:	4622      	mov	r2, r4
 8002428:	4620      	mov	r0, r4
 800242a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800242e:	4639      	mov	r1, r7
 8002430:	f004 f9e2 	bl	80067f8 <arm_mult_q15>
 8002434:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002438:	4642      	mov	r2, r8
 800243a:	4639      	mov	r1, r7
 800243c:	4640      	mov	r0, r8
 800243e:	f004 f9db 	bl	80067f8 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002442:	f504 6200 	add.w	r2, r4, #2048	@ 0x800
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002446:	4610      	mov	r0, r2
 8002448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800244c:	4639      	mov	r1, r7
 800244e:	f004 f9d3 	bl	80067f8 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002452:	f504 6240 	add.w	r2, r4, #3072	@ 0xc00
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002456:	4610      	mov	r0, r2
 8002458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800245c:	4639      	mov	r1, r7
 800245e:	f004 f9cb 	bl	80067f8 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002462:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002466:	4610      	mov	r0, r2
 8002468:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800246c:	4639      	mov	r1, r7
 800246e:	f004 f9c3 	bl	80067f8 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002472:	f504 52a0 	add.w	r2, r4, #5120	@ 0x1400
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002476:	4610      	mov	r0, r2
 8002478:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800247c:	4639      	mov	r1, r7
 800247e:	f004 f9bb 	bl	80067f8 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002482:	f504 52c0 	add.w	r2, r4, #6144	@ 0x1800
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002486:	4610      	mov	r0, r2
 8002488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800248c:	4639      	mov	r1, r7
 800248e:	f004 f9b3 	bl	80067f8 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 8002492:	f504 52e0 	add.w	r2, r4, #7168	@ 0x1c00
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 8002496:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800249a:	4639      	mov	r1, r7
 800249c:	4610      	mov	r0, r2
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 800249e:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
		arm_mult_q15(&buffer[i*SAMPLES_NUM], hamming_window, &buffer[i*SAMPLES_NUM], SAMPLES_NUM);
 80024a2:	f004 f9a9 	bl	80067f8 <arm_mult_q15>
	for (int i = 0; i < MEL_NUM_VEC; i++){ // TODO : Unroll this loop
 80024a6:	45a1      	cmp	r9, r4
 80024a8:	d1bb      	bne.n	8002422 <Full_spectrogram_compute+0x112>

	// 1   : Format the signal (expand to 16-bit, remove DC, windowing)
	step1_123_batch_pre_process(buffer);

	// 2 & 3 : Compute each FFT of size SAMPLES_NUM and take the absolute value
	step23_batch_fft(buffer);
 80024aa:	4628      	mov	r0, r5
 80024ac:	f7ff fe0a 	bl	80020c4 <step23_batch_fft>

	// 4   : Compute the mel vectors of each FFT (parallel processing)
	step4_mel_filter_apply(buffer, mel_vectors);
 80024b0:	4628      	mov	r0, r5
 80024b2:	4631      	mov	r1, r6
 80024b4:	f7ff feac 	bl	8002210 <step4_mel_filter_apply>

	stop_cycle_count("Spectrogram compute");
 80024b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	stop_cycle_count("Spectrogram compute");
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <Full_spectrogram_compute+0x1b8>)
 80024be:	f000 b959 	b.w	8002774 <stop_cycle_count>
 80024c2:	bf00      	nop
 80024c4:	20000000 	.word	0x20000000
 80024c8:	08007b0c 	.word	0x08007b0c

080024cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024cc:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024ce:	4811      	ldr	r0, [pc, #68]	@ (8002514 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024d0:	4c11      	ldr	r4, [pc, #68]	@ (8002518 <MX_SPI1_Init+0x4c>)
 80024d2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80024d6:	2300      	movs	r3, #0
 80024d8:	2208      	movs	r2, #8
 80024da:	e9c0 4100 	strd	r4, r1, [r0]
 80024de:	f44f 6ce0 	mov.w	ip, #1792	@ 0x700
 80024e2:	f44f 7400 	mov.w	r4, #512	@ 0x200
 80024e6:	f04f 0e07 	mov.w	lr, #7
 80024ea:	e9c0 3c02 	strd	r3, ip, [r0, #8]
 80024ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024f2:	e9c0 2307 	strd	r2, r3, [r0, #28]
 80024f6:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 80024fa:	e9c0 e30b 	strd	lr, r3, [r0, #44]	@ 0x2c
 80024fe:	6184      	str	r4, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002500:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002502:	f003 f859 	bl	80055b8 <HAL_SPI_Init>
 8002506:	b900      	cbnz	r0, 800250a <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002508:	bd10      	pop	{r4, pc}
 800250a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800250e:	f7fe bb5d 	b.w	8000bcc <Error_Handler>
 8002512:	bf00      	nop
 8002514:	2000f8d8 	.word	0x2000f8d8
 8002518:	40013000 	.word	0x40013000

0800251c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800251c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800251e:	4b22      	ldr	r3, [pc, #136]	@ (80025a8 <HAL_SPI_MspInit+0x8c>)
 8002520:	6802      	ldr	r2, [r0, #0]
{
 8002522:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8002526:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800252c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002530:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 8002532:	d001      	beq.n	8002538 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002534:	b00a      	add	sp, #40	@ 0x28
 8002536:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002538:	f503 4060 	add.w	r0, r3, #57344	@ 0xe000
 800253c:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 800253e:	f441 5580 	orr.w	r5, r1, #4096	@ 0x1000
 8002542:	6605      	str	r5, [r0, #96]	@ 0x60
 8002544:	6e06      	ldr	r6, [r0, #96]	@ 0x60
 8002546:	f406 5380 	and.w	r3, r6, #4096	@ 0x1000
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002550:	f042 0101 	orr.w	r1, r2, #1
 8002554:	64c1      	str	r1, [r0, #76]	@ 0x4c
 8002556:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8002558:	f005 0601 	and.w	r6, r5, #1
 800255c:	9602      	str	r6, [sp, #8]
 800255e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002560:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002562:	f043 0210 	orr.w	r2, r3, #16
 8002566:	64c2      	str	r2, [r0, #76]	@ 0x4c
 8002568:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800256a:	f000 0110 	and.w	r1, r0, #16
 800256e:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2603      	movs	r6, #3
 8002572:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002576:	22c0      	movs	r2, #192	@ 0xc0
 8002578:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800257e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002582:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002586:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002588:	f001 fc70 	bl	8003e6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800258c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002592:	4806      	ldr	r0, [pc, #24]	@ (80025ac <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002594:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002596:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800259e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025a0:	f001 fc64 	bl	8003e6c <HAL_GPIO_Init>
}
 80025a4:	b00a      	add	sp, #40	@ 0x28
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	40013000 	.word	0x40013000
 80025ac:	48001000 	.word	0x48001000

080025b0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b0:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_MspInit+0x2c>)
 80025b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025b4:	f042 0001 	orr.w	r0, r2, #1
 80025b8:	6618      	str	r0, [r3, #96]	@ 0x60
 80025ba:	6e19      	ldr	r1, [r3, #96]	@ 0x60
{
 80025bc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	f001 0201 	and.w	r2, r1, #1
 80025c2:	9200      	str	r2, [sp, #0]
 80025c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80025c8:	f040 5180 	orr.w	r1, r0, #268435456	@ 0x10000000
 80025cc:	6599      	str	r1, [r3, #88]	@ 0x58
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80025d4:	9201      	str	r2, [sp, #4]
 80025d6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d8:	b002      	add	sp, #8
 80025da:	4770      	bx	lr
 80025dc:	40021000 	.word	0x40021000

080025e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <NMI_Handler>
 80025e2:	bf00      	nop

080025e4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <HardFault_Handler>
 80025e6:	bf00      	nop

080025e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <MemManage_Handler>
 80025ea:	bf00      	nop

080025ec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <BusFault_Handler>
 80025ee:	bf00      	nop

080025f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <UsageFault_Handler>
 80025f2:	bf00      	nop

080025f4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop

080025f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop

080025fc <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002600:	f000 b91a 	b.w	8002838 <HAL_IncTick>

08002604 <EXTI3_IRQHandler>:
  */
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 8002604:	2008      	movs	r0, #8
 8002606:	f001 bd53 	b.w	80040b0 <HAL_GPIO_EXTI_IRQHandler>
 800260a:	bf00      	nop

0800260c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800260c:	4801      	ldr	r0, [pc, #4]	@ (8002614 <DMA1_Channel1_IRQHandler+0x8>)
 800260e:	f001 bbdf 	b.w	8003dd0 <HAL_DMA_IRQHandler>
 8002612:	bf00      	nop
 8002614:	20000484 	.word	0x20000484

08002618 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002618:	4801      	ldr	r0, [pc, #4]	@ (8002620 <TIM3_IRQHandler+0x8>)
 800261a:	f003 bb7f 	b.w	8005d1c <HAL_TIM_IRQHandler>
 800261e:	bf00      	nop
 8002620:	2000f940 	.word	0x2000f940

08002624 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002624:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002628:	f001 bd42 	b.w	80040b0 <HAL_GPIO_EXTI_IRQHandler>

0800262c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800262c:	490c      	ldr	r1, [pc, #48]	@ (8002660 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800262e:	4a0d      	ldr	r2, [pc, #52]	@ (8002664 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002630:	680b      	ldr	r3, [r1, #0]
{
 8002632:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4c0c      	ldr	r4, [pc, #48]	@ (8002668 <_sbrk+0x3c>)
 8002636:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002638:	b12b      	cbz	r3, 8002646 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800263a:	4418      	add	r0, r3
 800263c:	4290      	cmp	r0, r2
 800263e:	d807      	bhi.n	8002650 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002640:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002642:	4618      	mov	r0, r3
 8002644:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <_sbrk+0x40>)
 8002648:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4418      	add	r0, r3
 800264c:	4290      	cmp	r0, r2
 800264e:	d9f7      	bls.n	8002640 <_sbrk+0x14>
    errno = ENOMEM;
 8002650:	f005 f8d6 	bl	8007800 <__errno>
 8002654:	210c      	movs	r1, #12
    return (void *)-1;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
    errno = ENOMEM;
 800265a:	6001      	str	r1, [r0, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd10      	pop	{r4, pc}
 8002660:	2000f93c 	.word	0x2000f93c
 8002664:	20050000 	.word	0x20050000
 8002668:	00000400 	.word	0x00000400
 800266c:	2000fb68 	.word	0x2000fb68

08002670 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002670:	480e      	ldr	r0, [pc, #56]	@ (80026ac <SystemInit+0x3c>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002672:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <SystemInit+0x40>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002674:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8002678:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800267c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 8002680:	6818      	ldr	r0, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002682:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8002684:	f040 0201 	orr.w	r2, r0, #1
 8002688:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800268a:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	f022 5ca8 	bic.w	ip, r2, #352321536	@ 0x15000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002692:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8002696:	f42c 2210 	bic.w	r2, ip, #589824	@ 0x90000
 800269a:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 800269c:	60d8      	str	r0, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	f420 2280 	bic.w	r2, r0, #262144	@ 0x40000
 80026a4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80026a6:	6199      	str	r1, [r3, #24]
}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00
 80026b0:	40021000 	.word	0x40021000

080026b4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026b4:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026b6:	481b      	ldr	r0, [pc, #108]	@ (8002724 <MX_TIM3_Init+0x70>)
 80026b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002728 <MX_TIM3_Init+0x74>)
 80026ba:	6002      	str	r2, [r0, #0]
{
 80026bc:	b089      	sub	sp, #36	@ 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 23;
 80026c0:	2117      	movs	r1, #23
 80026c2:	f04f 0c08 	mov.w	ip, #8
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026c6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80026ca:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ce:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.Prescaler = 23;
 80026d2:	e9c0 3c02 	strd	r3, ip, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d6:	9303      	str	r3, [sp, #12]
  htim3.Init.Prescaler = 23;
 80026d8:	6041      	str	r1, [r0, #4]
 80026da:	6103      	str	r3, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 8;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026dc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026de:	f003 f99b 	bl	8005a18 <HAL_TIM_Base_Init>
 80026e2:	b998      	cbnz	r0, 800270c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026e8:	480e      	ldr	r0, [pc, #56]	@ (8002724 <MX_TIM3_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ea:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026ec:	a904      	add	r1, sp, #16
 80026ee:	f003 fa61 	bl	8005bb4 <HAL_TIM_ConfigClockSource>
 80026f2:	b998      	cbnz	r0, 800271c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026f4:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026f8:	480a      	ldr	r0, [pc, #40]	@ (8002724 <MX_TIM3_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026fa:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026fc:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026fe:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002700:	f003 fbb8 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 8002704:	b928      	cbnz	r0, 8002712 <MX_TIM3_Init+0x5e>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002706:	b009      	add	sp, #36	@ 0x24
 8002708:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800270c:	f7fe fa5e 	bl	8000bcc <Error_Handler>
 8002710:	e7e8      	b.n	80026e4 <MX_TIM3_Init+0x30>
    Error_Handler();
 8002712:	f7fe fa5b 	bl	8000bcc <Error_Handler>
}
 8002716:	b009      	add	sp, #36	@ 0x24
 8002718:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800271c:	f7fe fa56 	bl	8000bcc <Error_Handler>
 8002720:	e7e8      	b.n	80026f4 <MX_TIM3_Init+0x40>
 8002722:	bf00      	nop
 8002724:	2000f940 	.word	0x2000f940
 8002728:	40000400 	.word	0x40000400

0800272c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 800272c:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <HAL_TIM_Base_MspInit+0x40>)
 800272e:	6802      	ldr	r2, [r0, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d000      	beq.n	8002736 <HAL_TIM_Base_MspInit+0xa>
 8002734:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002736:	f503 3c03 	add.w	ip, r3, #134144	@ 0x20c00
{
 800273a:	b500      	push	{lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800273c:	f8dc 1058 	ldr.w	r1, [ip, #88]	@ 0x58
 8002740:	f041 0302 	orr.w	r3, r1, #2
 8002744:	f8cc 3058 	str.w	r3, [ip, #88]	@ 0x58
 8002748:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
{
 800274c:	b083      	sub	sp, #12

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002756:	201d      	movs	r0, #29
 8002758:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800275a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800275c:	f000 ff40 	bl	80035e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002760:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002762:	b003      	add	sp, #12
 8002764:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002768:	f000 bf76 	b.w	8003658 <HAL_NVIC_EnableIRQ>
 800276c:	40000400 	.word	0x40000400

08002770 <start_cycle_count>:
	printf(" %lu cycles.\r\n", res);
}

#else

void start_cycle_count() {}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop

08002774 <stop_cycle_count>:
void stop_cycle_count(char *s) {}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop

08002778 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002778:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800277c:	f7ff ff78 	bl	8002670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002780:	480c      	ldr	r0, [pc, #48]	@ (80027b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002782:	490d      	ldr	r1, [pc, #52]	@ (80027b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002784:	4a0d      	ldr	r2, [pc, #52]	@ (80027bc <LoopForever+0xe>)
  movs r3, #0
 8002786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002788:	e002      	b.n	8002790 <LoopCopyDataInit>

0800278a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800278c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278e:	3304      	adds	r3, #4

08002790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002794:	d3f9      	bcc.n	800278a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002796:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002798:	4c0a      	ldr	r4, [pc, #40]	@ (80027c4 <LoopForever+0x16>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800279c:	e001      	b.n	80027a2 <LoopFillZerobss>

0800279e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a0:	3204      	adds	r2, #4

080027a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a4:	d3fb      	bcc.n	800279e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027a6:	f005 f831 	bl	800780c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027aa:	f7fe fb25 	bl	8000df8 <main>

080027ae <LoopForever>:

LoopForever:
    b LoopForever
 80027ae:	e7fe      	b.n	80027ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80027b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b8:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 80027bc:	0801a388 	.word	0x0801a388
  ldr r2, =_sbss
 80027c0:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 80027c4:	2000fb68 	.word	0x2000fb68

080027c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027c8:	e7fe      	b.n	80027c8 <ADC1_2_IRQHandler>
	...

080027cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027cc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027ce:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <HAL_InitTick+0x40>)
 80027d0:	781c      	ldrb	r4, [r3, #0]
 80027d2:	b90c      	cbnz	r4, 80027d8 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80027d4:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027d8:	490d      	ldr	r1, [pc, #52]	@ (8002810 <HAL_InitTick+0x44>)
 80027da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027de:	4605      	mov	r5, r0
 80027e0:	fbb2 fcf4 	udiv	ip, r2, r4
 80027e4:	6808      	ldr	r0, [r1, #0]
 80027e6:	fbb0 f0fc 	udiv	r0, r0, ip
 80027ea:	f000 ff43 	bl	8003674 <HAL_SYSTICK_Config>
 80027ee:	4604      	mov	r4, r0
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d1ef      	bne.n	80027d4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f4:	2d0f      	cmp	r5, #15
 80027f6:	d8ed      	bhi.n	80027d4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f8:	4602      	mov	r2, r0
 80027fa:	4629      	mov	r1, r5
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f000 feee 	bl	80035e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_InitTick+0x48>)
 8002806:	4620      	mov	r0, r4
 8002808:	601d      	str	r5, [r3, #0]
}
 800280a:	bd38      	pop	{r3, r4, r5, pc}
 800280c:	20000404 	.word	0x20000404
 8002810:	20000400 	.word	0x20000400
 8002814:	20000408 	.word	0x20000408

08002818 <HAL_Init>:
{
 8002818:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800281a:	2003      	movs	r0, #3
 800281c:	f000 fece 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002820:	2000      	movs	r0, #0
 8002822:	f7ff ffd3 	bl	80027cc <HAL_InitTick>
 8002826:	b110      	cbz	r0, 800282e <HAL_Init+0x16>
    status = HAL_ERROR;
 8002828:	2401      	movs	r4, #1
}
 800282a:	4620      	mov	r0, r4
 800282c:	bd10      	pop	{r4, pc}
 800282e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002830:	f7ff febe 	bl	80025b0 <HAL_MspInit>
}
 8002834:	4620      	mov	r0, r4
 8002836:	bd10      	pop	{r4, pc}

08002838 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002838:	4a03      	ldr	r2, [pc, #12]	@ (8002848 <HAL_IncTick+0x10>)
 800283a:	4b04      	ldr	r3, [pc, #16]	@ (800284c <HAL_IncTick+0x14>)
 800283c:	6811      	ldr	r1, [r2, #0]
 800283e:	7818      	ldrb	r0, [r3, #0]
 8002840:	4408      	add	r0, r1
 8002842:	6010      	str	r0, [r2, #0]
}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	2000fa18 	.word	0x2000fa18
 800284c:	20000404 	.word	0x20000404

08002850 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002850:	4b01      	ldr	r3, [pc, #4]	@ (8002858 <HAL_GetTick+0x8>)
 8002852:	6818      	ldr	r0, [r3, #0]
}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	2000fa18 	.word	0x2000fa18

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b538      	push	{r3, r4, r5, lr}
 800285e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002860:	f7ff fff6 	bl	8002850 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002864:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002866:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002868:	d002      	beq.n	8002870 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 800286a:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <HAL_Delay+0x68>)
 800286c:	7818      	ldrb	r0, [r3, #0]
 800286e:	4404      	add	r4, r0
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002870:	f7ff ffee 	bl	8002850 <HAL_GetTick>
 8002874:	1b41      	subs	r1, r0, r5
 8002876:	42a1      	cmp	r1, r4
 8002878:	d222      	bcs.n	80028c0 <HAL_Delay+0x64>
 800287a:	f7ff ffe9 	bl	8002850 <HAL_GetTick>
 800287e:	1b42      	subs	r2, r0, r5
 8002880:	42a2      	cmp	r2, r4
 8002882:	d21d      	bcs.n	80028c0 <HAL_Delay+0x64>
 8002884:	f7ff ffe4 	bl	8002850 <HAL_GetTick>
 8002888:	1b43      	subs	r3, r0, r5
 800288a:	42a3      	cmp	r3, r4
 800288c:	d218      	bcs.n	80028c0 <HAL_Delay+0x64>
 800288e:	f7ff ffdf 	bl	8002850 <HAL_GetTick>
 8002892:	1b40      	subs	r0, r0, r5
 8002894:	42a0      	cmp	r0, r4
 8002896:	d213      	bcs.n	80028c0 <HAL_Delay+0x64>
 8002898:	f7ff ffda 	bl	8002850 <HAL_GetTick>
 800289c:	1b41      	subs	r1, r0, r5
 800289e:	42a1      	cmp	r1, r4
 80028a0:	d20e      	bcs.n	80028c0 <HAL_Delay+0x64>
 80028a2:	f7ff ffd5 	bl	8002850 <HAL_GetTick>
 80028a6:	1b42      	subs	r2, r0, r5
 80028a8:	42a2      	cmp	r2, r4
 80028aa:	d209      	bcs.n	80028c0 <HAL_Delay+0x64>
 80028ac:	f7ff ffd0 	bl	8002850 <HAL_GetTick>
 80028b0:	1b43      	subs	r3, r0, r5
 80028b2:	42a3      	cmp	r3, r4
 80028b4:	d204      	bcs.n	80028c0 <HAL_Delay+0x64>
 80028b6:	f7ff ffcb 	bl	8002850 <HAL_GetTick>
 80028ba:	1b40      	subs	r0, r0, r5
 80028bc:	42a0      	cmp	r0, r4
 80028be:	d3d7      	bcc.n	8002870 <HAL_Delay+0x14>
  {
  }
}
 80028c0:	bd38      	pop	{r3, r4, r5, pc}
 80028c2:	bf00      	nop
 80028c4:	20000404 	.word	0x20000404

080028c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028c8:	b530      	push	{r4, r5, lr}
 80028ca:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d062      	beq.n	800299a <HAL_ADC_Init+0xd2>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028d4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 80028d6:	4604      	mov	r4, r0
 80028d8:	2d00      	cmp	r5, #0
 80028da:	f000 80c8 	beq.w	8002a6e <HAL_ADC_Init+0x1a6>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028de:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	0092      	lsls	r2, r2, #2
 80028e4:	d505      	bpl.n	80028f2 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028e6:	6898      	ldr	r0, [r3, #8]
 80028e8:	f020 4120 	bic.w	r1, r0, #2684354560	@ 0xa0000000
 80028ec:	f021 053f 	bic.w	r5, r1, #63	@ 0x3f
 80028f0:	609d      	str	r5, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	00d5      	lsls	r5, r2, #3
 80028f6:	d43d      	bmi.n	8002974 <HAL_ADC_Init+0xac>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028f8:	496f      	ldr	r1, [pc, #444]	@ (8002ab8 <HAL_ADC_Init+0x1f0>)
 80028fa:	4870      	ldr	r0, [pc, #448]	@ (8002abc <HAL_ADC_Init+0x1f4>)
 80028fc:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CR,
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	09aa      	lsrs	r2, r5, #6
 8002902:	fba0 0502 	umull	r0, r5, r0, r2
 8002906:	09aa      	lsrs	r2, r5, #6
 8002908:	f021 4010 	bic.w	r0, r1, #2415919104	@ 0x90000000
 800290c:	f020 0c3f 	bic.w	ip, r0, #63	@ 0x3f
 8002910:	3201      	adds	r2, #1
 8002912:	f04c 5180 	orr.w	r1, ip, #268435456	@ 0x10000000
 8002916:	0055      	lsls	r5, r2, #1
 8002918:	6099      	str	r1, [r3, #8]
 800291a:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 800291c:	9801      	ldr	r0, [sp, #4]
 800291e:	2800      	cmp	r0, #0
 8002920:	d028      	beq.n	8002974 <HAL_ADC_Init+0xac>
    {
      wait_loop_index--;
 8002922:	9a01      	ldr	r2, [sp, #4]
 8002924:	1e51      	subs	r1, r2, #1
 8002926:	9101      	str	r1, [sp, #4]
    while (wait_loop_index != 0UL)
 8002928:	9d01      	ldr	r5, [sp, #4]
 800292a:	b31d      	cbz	r5, 8002974 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 800292c:	9801      	ldr	r0, [sp, #4]
 800292e:	1e42      	subs	r2, r0, #1
 8002930:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8002932:	9901      	ldr	r1, [sp, #4]
 8002934:	b1f1      	cbz	r1, 8002974 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002936:	9d01      	ldr	r5, [sp, #4]
 8002938:	1e68      	subs	r0, r5, #1
 800293a:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800293c:	9a01      	ldr	r2, [sp, #4]
 800293e:	b1ca      	cbz	r2, 8002974 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002940:	9901      	ldr	r1, [sp, #4]
 8002942:	1e4d      	subs	r5, r1, #1
 8002944:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 8002946:	9801      	ldr	r0, [sp, #4]
 8002948:	b1a0      	cbz	r0, 8002974 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 800294a:	9a01      	ldr	r2, [sp, #4]
 800294c:	1e51      	subs	r1, r2, #1
 800294e:	9101      	str	r1, [sp, #4]
    while (wait_loop_index != 0UL)
 8002950:	9d01      	ldr	r5, [sp, #4]
 8002952:	b17d      	cbz	r5, 8002974 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002954:	9801      	ldr	r0, [sp, #4]
 8002956:	1e42      	subs	r2, r0, #1
 8002958:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 800295a:	9901      	ldr	r1, [sp, #4]
 800295c:	b151      	cbz	r1, 8002974 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 800295e:	9d01      	ldr	r5, [sp, #4]
 8002960:	1e68      	subs	r0, r5, #1
 8002962:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8002964:	9a01      	ldr	r2, [sp, #4]
 8002966:	b12a      	cbz	r2, 8002974 <HAL_ADC_Init+0xac>
      wait_loop_index--;
 8002968:	9901      	ldr	r1, [sp, #4]
 800296a:	1e4d      	subs	r5, r1, #1
 800296c:	9501      	str	r5, [sp, #4]
    while (wait_loop_index != 0UL)
 800296e:	9801      	ldr	r0, [sp, #4]
 8002970:	2800      	cmp	r0, #0
 8002972:	d1d6      	bne.n	8002922 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	00d0      	lsls	r0, r2, #3
 8002978:	d412      	bmi.n	80029a0 <HAL_ADC_Init+0xd8>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800297c:	f041 0510 	orr.w	r5, r1, #16
 8002980:	65a5      	str	r5, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002982:	6de2      	ldr	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002984:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002986:	4302      	orrs	r2, r0
 8002988:	65e2      	str	r2, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800298a:	6899      	ldr	r1, [r3, #8]
 800298c:	0749      	lsls	r1, r1, #29
 800298e:	d50c      	bpl.n	80029aa <HAL_ADC_Init+0xe2>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002990:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002992:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002994:	f040 0210 	orr.w	r2, r0, #16
 8002998:	65a2      	str	r2, [r4, #88]	@ 0x58
    return HAL_ERROR;
 800299a:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800299c:	b003      	add	sp, #12
 800299e:	bd30      	pop	{r4, r5, pc}
 80029a0:	6899      	ldr	r1, [r3, #8]
 80029a2:	0749      	lsls	r1, r1, #29
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a4:	f04f 0000 	mov.w	r0, #0
 80029a8:	d4f2      	bmi.n	8002990 <HAL_ADC_Init+0xc8>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029aa:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 80029ac:	06ea      	lsls	r2, r5, #27
 80029ae:	d4f0      	bmi.n	8002992 <HAL_ADC_Init+0xca>
    ADC_STATE_CLR_SET(hadc->State,
 80029b0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80029b2:	f422 7181 	bic.w	r1, r2, #258	@ 0x102
 80029b6:	f041 0502 	orr.w	r5, r1, #2
 80029ba:	65a5      	str	r5, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	07d5      	lsls	r5, r2, #31
 80029c0:	d410      	bmi.n	80029e4 <HAL_ADC_Init+0x11c>
 80029c2:	4d3f      	ldr	r5, [pc, #252]	@ (8002ac0 <HAL_ADC_Init+0x1f8>)
 80029c4:	493f      	ldr	r1, [pc, #252]	@ (8002ac4 <HAL_ADC_Init+0x1fc>)
 80029c6:	6889      	ldr	r1, [r1, #8]
 80029c8:	68aa      	ldr	r2, [r5, #8]
 80029ca:	4d3f      	ldr	r5, [pc, #252]	@ (8002ac8 <HAL_ADC_Init+0x200>)
 80029cc:	430a      	orrs	r2, r1
 80029ce:	68a9      	ldr	r1, [r5, #8]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	07d1      	lsls	r1, r2, #31
 80029d4:	d406      	bmi.n	80029e4 <HAL_ADC_Init+0x11c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029d6:	493d      	ldr	r1, [pc, #244]	@ (8002acc <HAL_ADC_Init+0x204>)
 80029d8:	6865      	ldr	r5, [r4, #4]
 80029da:	688a      	ldr	r2, [r1, #8]
 80029dc:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 80029e0:	432a      	orrs	r2, r5
 80029e2:	608a      	str	r2, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 80029e4:	68e5      	ldr	r5, [r4, #12]
 80029e6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029e8:	f894 1020 	ldrb.w	r1, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029ec:	f894 c019 	ldrb.w	ip, [r4, #25]
                 hadc->Init.DataAlign                                                   |
 80029f0:	432a      	orrs	r2, r5
 80029f2:	68a5      	ldr	r5, [r4, #8]
 80029f4:	432a      	orrs	r2, r5
 80029f6:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029fa:	2901      	cmp	r1, #1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a00:	d043      	beq.n	8002a8a <HAL_ADC_Init+0x1c2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a02:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002a04:	b121      	cbz	r1, 8002a10 <HAL_ADC_Init+0x148>
                   | hadc->Init.ExternalTrigConvEdge
 8002a06:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a08:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002a0c:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a0e:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a10:	68dd      	ldr	r5, [r3, #12]
 8002a12:	492f      	ldr	r1, [pc, #188]	@ (8002ad0 <HAL_ADC_Init+0x208>)
 8002a14:	4029      	ands	r1, r5
 8002a16:	4311      	orrs	r1, r2
 8002a18:	60d9      	str	r1, [r3, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	0712      	lsls	r2, r2, #28
 8002a1e:	d417      	bmi.n	8002a50 <HAL_ADC_Init+0x188>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a20:	68d9      	ldr	r1, [r3, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a22:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a26:	f894 c018 	ldrb.w	ip, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a2a:	f421 4580 	bic.w	r5, r1, #16384	@ 0x4000
 8002a2e:	f025 0106 	bic.w	r1, r5, #6
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a32:	0055      	lsls	r5, r2, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a34:	ea45 328c 	orr.w	r2, r5, ip, lsl #14
 8002a38:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 8002a3a:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002a40:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8002a44:	2901      	cmp	r1, #1
 8002a46:	d025      	beq.n	8002a94 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	f022 0501 	bic.w	r5, r2, #1
 8002a4e:	611d      	str	r5, [r3, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a50:	6921      	ldr	r1, [r4, #16]
 8002a52:	2901      	cmp	r1, #1
 8002a54:	d011      	beq.n	8002a7a <HAL_ADC_Init+0x1b2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a56:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 8002a58:	f025 020f 	bic.w	r2, r5, #15
 8002a5c:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a60:	f023 0503 	bic.w	r5, r3, #3
 8002a64:	f045 0101 	orr.w	r1, r5, #1
 8002a68:	65a1      	str	r1, [r4, #88]	@ 0x58
}
 8002a6a:	b003      	add	sp, #12
 8002a6c:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002a6e:	f7fd fd8d 	bl	800058c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a72:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002a74:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8002a78:	e731      	b.n	80028de <HAL_ADC_Init+0x16>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a7c:	69e5      	ldr	r5, [r4, #28]
 8002a7e:	f021 010f 	bic.w	r1, r1, #15
 8002a82:	1e6a      	subs	r2, r5, #1
 8002a84:	430a      	orrs	r2, r1
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a88:	e7e9      	b.n	8002a5e <HAL_ADC_Init+0x196>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a8a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002a8c:	1e4d      	subs	r5, r1, #1
 8002a8e:	ea42 4245 	orr.w	r2, r2, r5, lsl #17
 8002a92:	e7b6      	b.n	8002a02 <HAL_ADC_Init+0x13a>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a94:	6919      	ldr	r1, [r3, #16]
 8002a96:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002a98:	f421 65ff 	bic.w	r5, r1, #2040	@ 0x7f8
 8002a9c:	f025 0104 	bic.w	r1, r5, #4
 8002aa0:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8002aa2:	432a      	orrs	r2, r5
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002aa8:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	432a      	orrs	r2, r5
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	611a      	str	r2, [r3, #16]
 8002ab4:	e7cc      	b.n	8002a50 <HAL_ADC_Init+0x188>
 8002ab6:	bf00      	nop
 8002ab8:	20000400 	.word	0x20000400
 8002abc:	053e2d63 	.word	0x053e2d63
 8002ac0:	50040100 	.word	0x50040100
 8002ac4:	50040000 	.word	0x50040000
 8002ac8:	50040200 	.word	0x50040200
 8002acc:	50040300 	.word	0x50040300
 8002ad0:	fff0c007 	.word	0xfff0c007

08002ad4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ad6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002ad8:	f7fd fe7e 	bl	80007d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002adc:	bd08      	pop	{r3, pc}
 8002ade:	bf00      	nop

08002ae0 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop

08002ae4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ae6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ae8:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8002aec:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aee:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002af0:	d11d      	bne.n	8002b2e <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002af2:	6818      	ldr	r0, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002af4:	f444 7200 	orr.w	r2, r4, #512	@ 0x200
 8002af8:	659a      	str	r2, [r3, #88]	@ 0x58
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002afa:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002afc:	68c1      	ldr	r1, [r0, #12]
 8002afe:	f014 0f08 	tst.w	r4, #8
 8002b02:	d01b      	beq.n	8002b3c <ADC_DMAConvCplt+0x58>
 8002b04:	f411 6f40 	tst.w	r1, #3072	@ 0xc00
 8002b08:	d10d      	bne.n	8002b26 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b0a:	68c0      	ldr	r0, [r0, #12]
 8002b0c:	0484      	lsls	r4, r0, #18
 8002b0e:	d40a      	bmi.n	8002b26 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b12:	f422 7480 	bic.w	r4, r2, #256	@ 0x100
 8002b16:	659c      	str	r4, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b18:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8002b1a:	04c9      	lsls	r1, r1, #19
 8002b1c:	d403      	bmi.n	8002b26 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b1e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002b20:	f040 0201 	orr.w	r2, r0, #1
 8002b24:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fe6a 	bl	8000800 <HAL_ADC_ConvCpltCallback>
}
 8002b2c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b2e:	06e2      	lsls	r2, r4, #27
 8002b30:	d40a      	bmi.n	8002b48 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b32:	6d19      	ldr	r1, [r3, #80]	@ 0x50
}
 8002b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b38:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8002b3a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b3c:	0788      	lsls	r0, r1, #30
 8002b3e:	d5e7      	bpl.n	8002b10 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fe5d 	bl	8000800 <HAL_ADC_ConvCpltCallback>
 8002b46:	e7f1      	b.n	8002b2c <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ffc9 	bl	8002ae0 <HAL_ADC_ErrorCallback>
}
 8002b4e:	bd10      	pop	{r4, pc}

08002b50 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b50:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8002b52:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b54:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002b56:	f043 0140 	orr.w	r1, r3, #64	@ 0x40
 8002b5a:	6581      	str	r1, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b5c:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002b5e:	f042 0304 	orr.w	r3, r2, #4
 8002b62:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b64:	f7ff ffbc 	bl	8002ae0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b68:	bd08      	pop	{r3, pc}
 8002b6a:	bf00      	nop

08002b6c <HAL_ADC_ConfigChannel>:
{
 8002b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8002b70:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
{
 8002b74:	b082      	sub	sp, #8
 8002b76:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002b78:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002b7a:	f04f 0000 	mov.w	r0, #0
 8002b7e:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002b80:	f000 8162 	beq.w	8002e48 <HAL_ADC_ConfigChannel+0x2dc>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b84:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8002b86:	2001      	movs	r0, #1
 8002b88:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b8c:	68a5      	ldr	r5, [r4, #8]
 8002b8e:	f015 0604 	ands.w	r6, r5, #4
 8002b92:	d154      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0xd2>
    uint32_t config_rank = pConfig->Rank;
 8002b94:	684f      	ldr	r7, [r1, #4]
    if (pConfig->Rank <= 5U)
 8002b96:	2f05      	cmp	r7, #5
 8002b98:	f240 8097 	bls.w	8002cca <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 8002b9c:	f007 051f 	and.w	r5, r7, #31
 8002ba0:	201f      	movs	r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ba2:	09ba      	lsrs	r2, r7, #6
  MODIFY_REG(*preg,
 8002ba4:	fa00 f705 	lsl.w	r7, r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ba8:	f002 060c 	and.w	r6, r2, #12
  MODIFY_REG(*preg,
 8002bac:	ea6f 0e07 	mvn.w	lr, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002bb0:	f104 0830 	add.w	r8, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8002bb4:	680a      	ldr	r2, [r1, #0]
 8002bb6:	f858 0006 	ldr.w	r0, [r8, r6]
 8002bba:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8002bbe:	40af      	lsls	r7, r5
 8002bc0:	ea00 050e 	and.w	r5, r0, lr
 8002bc4:	432f      	orrs	r7, r5
 8002bc6:	f848 7006 	str.w	r7, [r8, r6]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bca:	68a6      	ldr	r6, [r4, #8]
 8002bcc:	0777      	lsls	r7, r6, #29
 8002bce:	d540      	bpl.n	8002c52 <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bd0:	68a2      	ldr	r2, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bd2:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bd4:	68a6      	ldr	r6, [r4, #8]
 8002bd6:	07f5      	lsls	r5, r6, #31
 8002bd8:	d412      	bmi.n	8002c00 <HAL_ADC_ConfigChannel+0x94>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002bda:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002bdc:	48b0      	ldr	r0, [pc, #704]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x334>)
 8002bde:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8002be2:	f006 0718 	and.w	r7, r6, #24
 8002be6:	40f8      	lsrs	r0, r7
 8002be8:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8002bec:	4010      	ands	r0, r2
 8002bee:	ea25 0507 	bic.w	r5, r5, r7
 8002bf2:	4328      	orrs	r0, r5
 8002bf4:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bf8:	48aa      	ldr	r0, [pc, #680]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x338>)
 8002bfa:	4286      	cmp	r6, r0
 8002bfc:	f000 80d2 	beq.w	8002da4 <HAL_ADC_ConfigChannel+0x238>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c00:	49a9      	ldr	r1, [pc, #676]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x33c>)
 8002c02:	420a      	tst	r2, r1
 8002c04:	d019      	beq.n	8002c3a <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c06:	48a9      	ldr	r0, [pc, #676]	@ (8002eac <HAL_ADC_ConfigChannel+0x340>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c08:	4da9      	ldr	r5, [pc, #676]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x344>)
 8002c0a:	6887      	ldr	r7, [r0, #8]
 8002c0c:	42aa      	cmp	r2, r5
 8002c0e:	f007 76e0 	and.w	r6, r7, #29360128	@ 0x1c00000
 8002c12:	d06f      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0x188>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c14:	49a7      	ldr	r1, [pc, #668]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x348>)
 8002c16:	428a      	cmp	r2, r1
 8002c18:	f000 811a 	beq.w	8002e50 <HAL_ADC_ConfigChannel+0x2e4>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c1c:	4da6      	ldr	r5, [pc, #664]	@ (8002eb8 <HAL_ADC_ConfigChannel+0x34c>)
 8002c1e:	42aa      	cmp	r2, r5
 8002c20:	d10b      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c22:	027a      	lsls	r2, r7, #9
 8002c24:	d409      	bmi.n	8002c3a <HAL_ADC_ConfigChannel+0xce>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c26:	4aa5      	ldr	r2, [pc, #660]	@ (8002ebc <HAL_ADC_ConfigChannel+0x350>)
 8002c28:	4294      	cmp	r4, r2
 8002c2a:	d106      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c2c:	6884      	ldr	r4, [r0, #8]
 8002c2e:	f024 77e0 	bic.w	r7, r4, #29360128	@ 0x1c00000
 8002c32:	4337      	orrs	r7, r6
 8002c34:	f447 0680 	orr.w	r6, r7, #4194304	@ 0x400000
 8002c38:	6086      	str	r6, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	e003      	b.n	8002c46 <HAL_ADC_ConfigChannel+0xda>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002c40:	f042 0720 	orr.w	r7, r2, #32
 8002c44:	659f      	str	r7, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8002c46:	2600      	movs	r6, #0
 8002c48:	f883 6054 	strb.w	r6, [r3, #84]	@ 0x54
}
 8002c4c:	b002      	add	sp, #8
 8002c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c52:	68a7      	ldr	r7, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c54:	680a      	ldr	r2, [r1, #0]
 8002c56:	073e      	lsls	r6, r7, #28
 8002c58:	d4bc      	bmi.n	8002bd4 <HAL_ADC_ConfigChannel+0x68>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c5a:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8002c5c:	f3c2 5604 	ubfx	r6, r2, #20, #5
 8002c60:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c62:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 8002c64:	40b0      	lsls	r0, r6
 8002c66:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c6a:	f002 0c04 	and.w	ip, r2, #4
 8002c6e:	f104 0814 	add.w	r8, r4, #20
  MODIFY_REG(*preg,
 8002c72:	ea6f 0200 	mvn.w	r2, r0
 8002c76:	f000 8152 	beq.w	8002f1e <HAL_ADC_ConfigChannel+0x3b2>
 8002c7a:	f858 700c 	ldr.w	r7, [r8, ip]
 8002c7e:	40b5      	lsls	r5, r6
 8002c80:	403a      	ands	r2, r7
 8002c82:	432a      	orrs	r2, r5
 8002c84:	f848 200c 	str.w	r2, [r8, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c88:	6965      	ldr	r5, [r4, #20]
 8002c8a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8002c8e:	6166      	str	r6, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c90:	e9d1 7004 	ldrd	r7, r0, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c94:	680a      	ldr	r2, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c96:	68e5      	ldr	r5, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c98:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c9a:	f104 0660 	add.w	r6, r4, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c9e:	4694      	mov	ip, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ca0:	f000 8116 	beq.w	8002ed0 <HAL_ADC_ConfigChannel+0x364>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ca4:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8002ca8:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 8002caa:	f856 c027 	ldr.w	ip, [r6, r7, lsl #2]
 8002cae:	40a8      	lsls	r0, r5
 8002cb0:	4d83      	ldr	r5, [pc, #524]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x354>)
 8002cb2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002cb6:	ea0c 0505 	and.w	r5, ip, r5
 8002cba:	4315      	orrs	r5, r2
 8002cbc:	4328      	orrs	r0, r5
 8002cbe:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8002cc2:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cc6:	680a      	ldr	r2, [r1, #0]
}
 8002cc8:	e784      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x68>
      switch (pConfig->Rank)
 8002cca:	1ebd      	subs	r5, r7, #2
 8002ccc:	2d03      	cmp	r5, #3
 8002cce:	d903      	bls.n	8002cd8 <HAL_ADC_ConfigChannel+0x16c>
    if (pConfig->Rank <= 5U)
 8002cd0:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 8002cd4:	2506      	movs	r5, #6
 8002cd6:	e76b      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x44>
 8002cd8:	4e7a      	ldr	r6, [pc, #488]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x358>)
 8002cda:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
  MODIFY_REG(*preg,
 8002cde:	271f      	movs	r7, #31
 8002ce0:	f000 051f 	and.w	r5, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ce4:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8002ce6:	fa07 f005 	lsl.w	r0, r7, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002cea:	f002 060c 	and.w	r6, r2, #12
  MODIFY_REG(*preg,
 8002cee:	ea6f 0e00 	mvn.w	lr, r0
 8002cf2:	e75d      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x44>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cf4:	0238      	lsls	r0, r7, #8
 8002cf6:	d4a0      	bmi.n	8002c3a <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf8:	4870      	ldr	r0, [pc, #448]	@ (8002ebc <HAL_ADC_ConfigChannel+0x350>)
 8002cfa:	4284      	cmp	r4, r0
 8002cfc:	d003      	beq.n	8002d06 <HAL_ADC_ConfigChannel+0x19a>
 8002cfe:	f500 7100 	add.w	r1, r0, #512	@ 0x200
 8002d02:	428c      	cmp	r4, r1
 8002d04:	d199      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d06:	4d69      	ldr	r5, [pc, #420]	@ (8002eac <HAL_ADC_ConfigChannel+0x340>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d08:	4c6f      	ldr	r4, [pc, #444]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x35c>)
 8002d0a:	68aa      	ldr	r2, [r5, #8]
 8002d0c:	496f      	ldr	r1, [pc, #444]	@ (8002ecc <HAL_ADC_ConfigChannel+0x360>)
 8002d0e:	f022 77e0 	bic.w	r7, r2, #29360128	@ 0x1c00000
 8002d12:	4337      	orrs	r7, r6
 8002d14:	f447 0600 	orr.w	r6, r7, #8388608	@ 0x800000
 8002d18:	60ae      	str	r6, [r5, #8]
 8002d1a:	6820      	ldr	r0, [r4, #0]
 8002d1c:	0985      	lsrs	r5, r0, #6
 8002d1e:	fba1 1405 	umull	r1, r4, r1, r5
 8002d22:	09a2      	lsrs	r2, r4, #6
 8002d24:	3201      	adds	r2, #1
 8002d26:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8002d2a:	00be      	lsls	r6, r7, #2
 8002d2c:	9601      	str	r6, [sp, #4]
          while (wait_loop_index != 0UL)
 8002d2e:	9801      	ldr	r0, [sp, #4]
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d082      	beq.n	8002c3a <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8002d34:	9901      	ldr	r1, [sp, #4]
 8002d36:	1e4d      	subs	r5, r1, #1
 8002d38:	9501      	str	r5, [sp, #4]
          while (wait_loop_index != 0UL)
 8002d3a:	9c01      	ldr	r4, [sp, #4]
 8002d3c:	2c00      	cmp	r4, #0
 8002d3e:	f43f af7c 	beq.w	8002c3a <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8002d42:	9a01      	ldr	r2, [sp, #4]
 8002d44:	1e57      	subs	r7, r2, #1
 8002d46:	9701      	str	r7, [sp, #4]
          while (wait_loop_index != 0UL)
 8002d48:	9e01      	ldr	r6, [sp, #4]
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	f43f af75 	beq.w	8002c3a <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8002d50:	9801      	ldr	r0, [sp, #4]
 8002d52:	1e41      	subs	r1, r0, #1
 8002d54:	9101      	str	r1, [sp, #4]
          while (wait_loop_index != 0UL)
 8002d56:	9d01      	ldr	r5, [sp, #4]
 8002d58:	2d00      	cmp	r5, #0
 8002d5a:	f43f af6e 	beq.w	8002c3a <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8002d5e:	9c01      	ldr	r4, [sp, #4]
 8002d60:	1e62      	subs	r2, r4, #1
 8002d62:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002d64:	9f01      	ldr	r7, [sp, #4]
 8002d66:	2f00      	cmp	r7, #0
 8002d68:	f43f af67 	beq.w	8002c3a <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8002d6c:	9e01      	ldr	r6, [sp, #4]
 8002d6e:	1e70      	subs	r0, r6, #1
 8002d70:	9001      	str	r0, [sp, #4]
          while (wait_loop_index != 0UL)
 8002d72:	9901      	ldr	r1, [sp, #4]
 8002d74:	2900      	cmp	r1, #0
 8002d76:	f43f af60 	beq.w	8002c3a <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8002d7a:	9d01      	ldr	r5, [sp, #4]
 8002d7c:	1e6c      	subs	r4, r5, #1
 8002d7e:	9401      	str	r4, [sp, #4]
          while (wait_loop_index != 0UL)
 8002d80:	9a01      	ldr	r2, [sp, #4]
 8002d82:	2a00      	cmp	r2, #0
 8002d84:	f43f af59 	beq.w	8002c3a <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8002d88:	9f01      	ldr	r7, [sp, #4]
 8002d8a:	1e7e      	subs	r6, r7, #1
 8002d8c:	9601      	str	r6, [sp, #4]
          while (wait_loop_index != 0UL)
 8002d8e:	9801      	ldr	r0, [sp, #4]
 8002d90:	2800      	cmp	r0, #0
 8002d92:	f43f af52 	beq.w	8002c3a <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8002d96:	9901      	ldr	r1, [sp, #4]
 8002d98:	1e4d      	subs	r5, r1, #1
 8002d9a:	9501      	str	r5, [sp, #4]
          while (wait_loop_index != 0UL)
 8002d9c:	9c01      	ldr	r4, [sp, #4]
 8002d9e:	2c00      	cmp	r4, #0
 8002da0:	d1c8      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x1c8>
 8002da2:	e74a      	b.n	8002c3a <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002da4:	2f00      	cmp	r7, #0
 8002da6:	d067      	beq.n	8002e78 <HAL_ADC_ConfigChannel+0x30c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	fa92 f6a2 	rbit	r6, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dac:	2e00      	cmp	r6, #0
 8002dae:	f000 80c0 	beq.w	8002f32 <HAL_ADC_ConfigChannel+0x3c6>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002db2:	fab6 f786 	clz	r7, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db6:	3701      	adds	r7, #1
 8002db8:	f007 051f 	and.w	r5, r7, #31
 8002dbc:	2d09      	cmp	r5, #9
 8002dbe:	f240 80b8 	bls.w	8002f32 <HAL_ADC_ConfigChannel+0x3c6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	f000 8150 	beq.w	800306c <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 8002dcc:	fab0 f680 	clz	r6, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dd0:	3601      	adds	r6, #1
 8002dd2:	06b7      	lsls	r7, r6, #26
 8002dd4:	f007 40f8 	and.w	r0, r7, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8002ddc:	2d00      	cmp	r5, #0
 8002dde:	f000 814a 	beq.w	8003076 <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8002de2:	fab5 f685 	clz	r6, r5
 8002de6:	3601      	adds	r6, #1
 8002de8:	f006 071f 	and.w	r7, r6, #31
 8002dec:	2501      	movs	r5, #1
 8002dee:	fa05 f607 	lsl.w	r6, r5, r7
 8002df2:	4330      	orrs	r0, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002df8:	2a00      	cmp	r2, #0
 8002dfa:	f000 813a 	beq.w	8003072 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8002dfe:	fab2 f782 	clz	r7, r2
 8002e02:	1c7d      	adds	r5, r7, #1
 8002e04:	f005 071f 	and.w	r7, r5, #31
 8002e08:	f04f 0803 	mov.w	r8, #3
 8002e0c:	f06f 0c1d 	mvn.w	ip, #29
 8002e10:	fb18 c607 	smlabb	r6, r8, r7, ip
 8002e14:	0532      	lsls	r2, r6, #20
 8002e16:	f042 7500 	orr.w	r5, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e1a:	4305      	orrs	r5, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e1c:	0de8      	lsrs	r0, r5, #23
  MODIFY_REG(*preg,
 8002e1e:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e20:	f000 0804 	and.w	r8, r0, #4
 8002e24:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 8002e28:	f3c5 5204 	ubfx	r2, r5, #20, #5
 8002e2c:	fa07 f502 	lsl.w	r5, r7, r2
 8002e30:	f856 0008 	ldr.w	r0, [r6, r8]
 8002e34:	2707      	movs	r7, #7
 8002e36:	fa07 fc02 	lsl.w	ip, r7, r2
 8002e3a:	ea20 020c 	bic.w	r2, r0, ip
 8002e3e:	432a      	orrs	r2, r5
 8002e40:	f846 2008 	str.w	r2, [r6, r8]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e44:	680a      	ldr	r2, [r1, #0]
}
 8002e46:	e6db      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x94>
  __HAL_LOCK(hadc);
 8002e48:	2002      	movs	r0, #2
}
 8002e4a:	b002      	add	sp, #8
 8002e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e50:	01f9      	lsls	r1, r7, #7
 8002e52:	f53f aef2 	bmi.w	8002c3a <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e56:	4819      	ldr	r0, [pc, #100]	@ (8002ebc <HAL_ADC_ConfigChannel+0x350>)
 8002e58:	4284      	cmp	r4, r0
 8002e5a:	d004      	beq.n	8002e66 <HAL_ADC_ConfigChannel+0x2fa>
 8002e5c:	f500 7100 	add.w	r1, r0, #512	@ 0x200
 8002e60:	428c      	cmp	r4, r1
 8002e62:	f47f aeea 	bne.w	8002c3a <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e66:	4d11      	ldr	r5, [pc, #68]	@ (8002eac <HAL_ADC_ConfigChannel+0x340>)
 8002e68:	68aa      	ldr	r2, [r5, #8]
 8002e6a:	f022 74e0 	bic.w	r4, r2, #29360128	@ 0x1c00000
 8002e6e:	4334      	orrs	r4, r6
 8002e70:	f044 7780 	orr.w	r7, r4, #16777216	@ 0x1000000
 8002e74:	60af      	str	r7, [r5, #8]
}
 8002e76:	e6e0      	b.n	8002c3a <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e78:	0e90      	lsrs	r0, r2, #26
 8002e7a:	3001      	adds	r0, #1
 8002e7c:	f000 051f 	and.w	r5, r0, #31
 8002e80:	0682      	lsls	r2, r0, #26
 8002e82:	2001      	movs	r0, #1
 8002e84:	f002 47f8 	and.w	r7, r2, #2080374784	@ 0x7c000000
 8002e88:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e8a:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e8c:	ea40 0007 	orr.w	r0, r0, r7
 8002e90:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e94:	d972      	bls.n	8002f7c <HAL_ADC_ConfigChannel+0x410>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e96:	3e1e      	subs	r6, #30
 8002e98:	0535      	lsls	r5, r6, #20
 8002e9a:	f045 7500 	orr.w	r5, r5, #33554432	@ 0x2000000
 8002e9e:	e7bc      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x2ae>
 8002ea0:	0007ffff 	.word	0x0007ffff
 8002ea4:	407f0000 	.word	0x407f0000
 8002ea8:	80080000 	.word	0x80080000
 8002eac:	50040300 	.word	0x50040300
 8002eb0:	c7520000 	.word	0xc7520000
 8002eb4:	cb840000 	.word	0xcb840000
 8002eb8:	80000001 	.word	0x80000001
 8002ebc:	50040000 	.word	0x50040000
 8002ec0:	03fff000 	.word	0x03fff000
 8002ec4:	08008510 	.word	0x08008510
 8002ec8:	20000400 	.word	0x20000400
 8002ecc:	053e2d63 	.word	0x053e2d63
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ed0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002ed2:	6e25      	ldr	r5, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ed4:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ed8:	f3c5 6784 	ubfx	r7, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d14f      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x414>
 8002ee0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ee4:	4297      	cmp	r7, r2
 8002ee6:	f000 8091 	beq.w	800300c <HAL_ADC_ConfigChannel+0x4a0>
 8002eea:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8002eec:	6e65      	ldr	r5, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eee:	f3c5 6884 	ubfx	r8, r5, #26, #5
 8002ef2:	4590      	cmp	r8, r2
 8002ef4:	d075      	beq.n	8002fe2 <HAL_ADC_ConfigChannel+0x476>
 8002ef6:	68b0      	ldr	r0, [r6, #8]
 8002ef8:	68b7      	ldr	r7, [r6, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002efa:	f3c7 6084 	ubfx	r0, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002efe:	f106 0708 	add.w	r7, r6, #8
 8002f02:	4290      	cmp	r0, r2
 8002f04:	f000 8094 	beq.w	8003030 <HAL_ADC_ConfigChannel+0x4c4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f08:	68f0      	ldr	r0, [r6, #12]
 8002f0a:	68f0      	ldr	r0, [r6, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f0c:	f106 050c 	add.w	r5, r6, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f10:	f3c0 6784 	ubfx	r7, r0, #26, #5
 8002f14:	42ba      	cmp	r2, r7
 8002f16:	f000 80a0 	beq.w	800305a <HAL_ADC_ConfigChannel+0x4ee>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f1a:	4662      	mov	r2, ip
 8002f1c:	e65a      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x68>
  MODIFY_REG(*preg,
 8002f1e:	f858 000c 	ldr.w	r0, [r8, ip]
 8002f22:	4002      	ands	r2, r0
 8002f24:	f848 200c 	str.w	r2, [r8, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f28:	6962      	ldr	r2, [r4, #20]
 8002f2a:	f042 4700 	orr.w	r7, r2, #2147483648	@ 0x80000000
 8002f2e:	6167      	str	r7, [r4, #20]
}
 8002f30:	e6ae      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x124>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002f36:	2800      	cmp	r0, #0
 8002f38:	f000 80a1 	beq.w	800307e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002f3c:	fab0 f780 	clz	r7, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f40:	3701      	adds	r7, #1
 8002f42:	06be      	lsls	r6, r7, #26
 8002f44:	f006 40f8 	and.w	r0, r6, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8002f4c:	2d00      	cmp	r5, #0
 8002f4e:	f000 8094 	beq.w	800307a <HAL_ADC_ConfigChannel+0x50e>
  return __builtin_clz(value);
 8002f52:	fab5 f785 	clz	r7, r5
 8002f56:	3701      	adds	r7, #1
 8002f58:	f007 081f 	and.w	r8, r7, #31
 8002f5c:	f04f 0c01 	mov.w	ip, #1
 8002f60:	fa0c f608 	lsl.w	r6, ip, r8
 8002f64:	4330      	orrs	r0, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002f6a:	2a00      	cmp	r2, #0
 8002f6c:	d07b      	beq.n	8003066 <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 8002f6e:	fab2 f582 	clz	r5, r2
 8002f72:	3501      	adds	r5, #1
 8002f74:	f005 071f 	and.w	r7, r5, #31
 8002f78:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8002f7c:	0535      	lsls	r5, r6, #20
 8002f7e:	e74c      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x2ae>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8002f84:	b11d      	cbz	r5, 8002f8e <HAL_ADC_ConfigChannel+0x422>
  return __builtin_clz(value);
 8002f86:	fab5 f085 	clz	r0, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f8a:	4287      	cmp	r7, r0
 8002f8c:	d03e      	beq.n	800300c <HAL_ADC_ConfigChannel+0x4a0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f8e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8002f90:	6e67      	ldr	r7, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f92:	f3c7 6884 	ubfx	r8, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	fa9c f0ac 	rbit	r0, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f9a:	f106 0708 	add.w	r7, r6, #8
 8002f9e:	46be      	mov	lr, r7
  if (value == 0U)
 8002fa0:	b118      	cbz	r0, 8002faa <HAL_ADC_ConfigChannel+0x43e>
  return __builtin_clz(value);
 8002fa2:	fab0 f580 	clz	r5, r0
 8002fa6:	4545      	cmp	r5, r8
 8002fa8:	d01d      	beq.n	8002fe6 <HAL_ADC_ConfigChannel+0x47a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002faa:	68b0      	ldr	r0, [r6, #8]
 8002fac:	68b0      	ldr	r0, [r6, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fae:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb6:	f106 050c 	add.w	r5, r6, #12
 8002fba:	46a8      	mov	r8, r5
  if (value == 0U)
 8002fbc:	f1be 0f00 	cmp.w	lr, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_ADC_ConfigChannel+0x45e>
  return __builtin_clz(value);
 8002fc2:	fabe fe8e 	clz	lr, lr
 8002fc6:	4586      	cmp	lr, r0
 8002fc8:	d034      	beq.n	8003034 <HAL_ADC_ConfigChannel+0x4c8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fca:	68f0      	ldr	r0, [r6, #12]
 8002fcc:	68f6      	ldr	r6, [r6, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fce:	f3c6 6784 	ubfx	r7, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 8002fd6:	2e00      	cmp	r6, #0
 8002fd8:	f43f adfc 	beq.w	8002bd4 <HAL_ADC_ConfigChannel+0x68>
  return __builtin_clz(value);
 8002fdc:	fab6 f286 	clz	r2, r6
 8002fe0:	e798      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x3a8>
 8002fe2:	f106 0e08 	add.w	lr, r6, #8
  MODIFY_REG(*preg,
 8002fe6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002fe8:	f022 4500 	bic.w	r5, r2, #2147483648	@ 0x80000000
 8002fec:	6665      	str	r5, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fee:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ff2:	68b2      	ldr	r2, [r6, #8]
 8002ff4:	68b0      	ldr	r0, [r6, #8]
 8002ff6:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ffa:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ffc:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003000:	4662      	mov	r2, ip
 8003002:	2d00      	cmp	r5, #0
 8003004:	d1d5      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x446>
 8003006:	f3cc 6284 	ubfx	r2, ip, #26, #5
 800300a:	e77a      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x396>
  MODIFY_REG(*preg,
 800300c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800300e:	f020 4700 	bic.w	r7, r0, #2147483648	@ 0x80000000
 8003012:	6627      	str	r7, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003014:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003018:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800301a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800301c:	f3cc 0512 	ubfx	r5, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003020:	f3c2 6884 	ubfx	r8, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003024:	4662      	mov	r2, ip
 8003026:	2d00      	cmp	r5, #0
 8003028:	d1b5      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x42a>
 800302a:	f3cc 6284 	ubfx	r2, ip, #26, #5
 800302e:	e760      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x386>
 8003030:	f106 080c 	add.w	r8, r6, #12
  MODIFY_REG(*preg,
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 800303a:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800303c:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003040:	68f2      	ldr	r2, [r6, #12]
 8003042:	68f6      	ldr	r6, [r6, #12]
 8003044:	f3cc 0012 	ubfx	r0, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003048:	4645      	mov	r5, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800304a:	f3c6 6784 	ubfx	r7, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800304e:	4662      	mov	r2, ip
 8003050:	2800      	cmp	r0, #0
 8003052:	d1be      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x466>
 8003054:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8003058:	e75c      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x3a8>
  MODIFY_REG(*preg,
 800305a:	682f      	ldr	r7, [r5, #0]
 800305c:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8003060:	602a      	str	r2, [r5, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003062:	680a      	ldr	r2, [r1, #0]
}
 8003064:	e5b6      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x68>
 8003066:	f44f 1540 	mov.w	r5, #3145728	@ 0x300000
 800306a:	e6d6      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x2ae>
 800306c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003070:	e6b2      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x26c>
 8003072:	4d04      	ldr	r5, [pc, #16]	@ (8003084 <HAL_ADC_ConfigChannel+0x518>)
 8003074:	e6d1      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x2ae>
 8003076:	2602      	movs	r6, #2
 8003078:	e6bb      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x286>
 800307a:	2602      	movs	r6, #2
 800307c:	e772      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x3f8>
 800307e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003082:	e761      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x3dc>
 8003084:	fe500000 	.word	0xfe500000

08003088 <ADC_Enable>:
{
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800308c:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800308e:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8003090:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003092:	6899      	ldr	r1, [r3, #8]
 8003094:	07ca      	lsls	r2, r1, #31
 8003096:	d464      	bmi.n	8003162 <ADC_Enable+0xda>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003098:	4d39      	ldr	r5, [pc, #228]	@ (8003180 <ADC_Enable+0xf8>)
 800309a:	4604      	mov	r4, r0
 800309c:	6898      	ldr	r0, [r3, #8]
 800309e:	4228      	tst	r0, r5
 80030a0:	d162      	bne.n	8003168 <ADC_Enable+0xe0>
  MODIFY_REG(ADCx->CR,
 80030a2:	689e      	ldr	r6, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030a4:	4937      	ldr	r1, [pc, #220]	@ (8003184 <ADC_Enable+0xfc>)
  MODIFY_REG(ADCx->CR,
 80030a6:	f026 4c00 	bic.w	ip, r6, #2147483648	@ 0x80000000
 80030aa:	f02c 0e3f 	bic.w	lr, ip, #63	@ 0x3f
 80030ae:	f04e 0201 	orr.w	r2, lr, #1
 80030b2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030b4:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	d537      	bpl.n	800312a <ADC_Enable+0xa2>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ba:	4833      	ldr	r0, [pc, #204]	@ (8003188 <ADC_Enable+0x100>)
 80030bc:	4d33      	ldr	r5, [pc, #204]	@ (800318c <ADC_Enable+0x104>)
 80030be:	6806      	ldr	r6, [r0, #0]
 80030c0:	09b1      	lsrs	r1, r6, #6
 80030c2:	fba5 2301 	umull	r2, r3, r5, r1
 80030c6:	099a      	lsrs	r2, r3, #6
 80030c8:	3201      	adds	r2, #1
 80030ca:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 80030ce:	0085      	lsls	r5, r0, #2
 80030d0:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 80030d2:	9e01      	ldr	r6, [sp, #4]
 80030d4:	2e00      	cmp	r6, #0
 80030d6:	d028      	beq.n	800312a <ADC_Enable+0xa2>
        wait_loop_index--;
 80030d8:	9901      	ldr	r1, [sp, #4]
 80030da:	1e4b      	subs	r3, r1, #1
 80030dc:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80030de:	9a01      	ldr	r2, [sp, #4]
 80030e0:	b31a      	cbz	r2, 800312a <ADC_Enable+0xa2>
        wait_loop_index--;
 80030e2:	9801      	ldr	r0, [sp, #4]
 80030e4:	1e45      	subs	r5, r0, #1
 80030e6:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 80030e8:	9e01      	ldr	r6, [sp, #4]
 80030ea:	b1f6      	cbz	r6, 800312a <ADC_Enable+0xa2>
        wait_loop_index--;
 80030ec:	9901      	ldr	r1, [sp, #4]
 80030ee:	1e4b      	subs	r3, r1, #1
 80030f0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80030f2:	9a01      	ldr	r2, [sp, #4]
 80030f4:	b1ca      	cbz	r2, 800312a <ADC_Enable+0xa2>
        wait_loop_index--;
 80030f6:	9801      	ldr	r0, [sp, #4]
 80030f8:	1e45      	subs	r5, r0, #1
 80030fa:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 80030fc:	9e01      	ldr	r6, [sp, #4]
 80030fe:	b1a6      	cbz	r6, 800312a <ADC_Enable+0xa2>
        wait_loop_index--;
 8003100:	9901      	ldr	r1, [sp, #4]
 8003102:	1e4b      	subs	r3, r1, #1
 8003104:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003106:	9a01      	ldr	r2, [sp, #4]
 8003108:	b17a      	cbz	r2, 800312a <ADC_Enable+0xa2>
        wait_loop_index--;
 800310a:	9801      	ldr	r0, [sp, #4]
 800310c:	1e45      	subs	r5, r0, #1
 800310e:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 8003110:	9e01      	ldr	r6, [sp, #4]
 8003112:	b156      	cbz	r6, 800312a <ADC_Enable+0xa2>
        wait_loop_index--;
 8003114:	9901      	ldr	r1, [sp, #4]
 8003116:	1e4b      	subs	r3, r1, #1
 8003118:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800311a:	9a01      	ldr	r2, [sp, #4]
 800311c:	b12a      	cbz	r2, 800312a <ADC_Enable+0xa2>
        wait_loop_index--;
 800311e:	9801      	ldr	r0, [sp, #4]
 8003120:	1e45      	subs	r5, r0, #1
 8003122:	9501      	str	r5, [sp, #4]
      while (wait_loop_index != 0UL)
 8003124:	9e01      	ldr	r6, [sp, #4]
 8003126:	2e00      	cmp	r6, #0
 8003128:	d1d6      	bne.n	80030d8 <ADC_Enable+0x50>
    tickstart = HAL_GetTick();
 800312a:	f7ff fb91 	bl	8002850 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	07ce      	lsls	r6, r1, #31
    tickstart = HAL_GetTick();
 8003134:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003136:	d414      	bmi.n	8003162 <ADC_Enable+0xda>
  MODIFY_REG(ADCx->CR,
 8003138:	4e15      	ldr	r6, [pc, #84]	@ (8003190 <ADC_Enable+0x108>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	07d0      	lsls	r0, r2, #31
 800313e:	d404      	bmi.n	800314a <ADC_Enable+0xc2>
  MODIFY_REG(ADCx->CR,
 8003140:	6898      	ldr	r0, [r3, #8]
 8003142:	4030      	ands	r0, r6
 8003144:	f040 0101 	orr.w	r1, r0, #1
 8003148:	6099      	str	r1, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800314a:	f7ff fb81 	bl	8002850 <HAL_GetTick>
 800314e:	1b43      	subs	r3, r0, r5
 8003150:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003152:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003154:	d902      	bls.n	800315c <ADC_Enable+0xd4>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	07d1      	lsls	r1, r2, #31
 800315a:	d505      	bpl.n	8003168 <ADC_Enable+0xe0>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	07c2      	lsls	r2, r0, #31
 8003160:	d5eb      	bpl.n	800313a <ADC_Enable+0xb2>
  return HAL_OK;
 8003162:	2000      	movs	r0, #0
}
 8003164:	b002      	add	sp, #8
 8003166:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003168:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 800316a:	f045 0610 	orr.w	r6, r5, #16
 800316e:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003170:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003172:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003174:	f041 0301 	orr.w	r3, r1, #1
 8003178:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 800317a:	b002      	add	sp, #8
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 800317e:	bf00      	nop
 8003180:	8000003f 	.word	0x8000003f
 8003184:	50040300 	.word	0x50040300
 8003188:	20000400 	.word	0x20000400
 800318c:	053e2d63 	.word	0x053e2d63
 8003190:	7fffffc0 	.word	0x7fffffc0

08003194 <HAL_ADC_Start_IT>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003194:	4a4d      	ldr	r2, [pc, #308]	@ (80032cc <HAL_ADC_Start_IT+0x138>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003196:	6803      	ldr	r3, [r0, #0]
{
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800319c:	689d      	ldr	r5, [r3, #8]
 800319e:	f015 0504 	ands.w	r5, r5, #4
 80031a2:	d15d      	bne.n	8003260 <HAL_ADC_Start_IT+0xcc>
    __HAL_LOCK(hadc);
 80031a4:	f890 1054 	ldrb.w	r1, [r0, #84]	@ 0x54
 80031a8:	2901      	cmp	r1, #1
 80031aa:	4604      	mov	r4, r0
 80031ac:	d058      	beq.n	8003260 <HAL_ADC_Start_IT+0xcc>
 80031ae:	2201      	movs	r2, #1
 80031b0:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80031b4:	f7ff ff68 	bl	8003088 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d153      	bne.n	8003264 <HAL_ADC_Start_IT+0xd0>
      ADC_STATE_CLR_SET(hadc->State,
 80031bc:	6da5      	ldr	r5, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031be:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80031c0:	f425 6170 	bic.w	r1, r5, #3840	@ 0xf00
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031c4:	4d42      	ldr	r5, [pc, #264]	@ (80032d0 <HAL_ADC_Start_IT+0x13c>)
      ADC_STATE_CLR_SET(hadc->State,
 80031c6:	f021 0c01 	bic.w	ip, r1, #1
 80031ca:	f44c 7280 	orr.w	r2, ip, #256	@ 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031ce:	42ab      	cmp	r3, r5
      ADC_STATE_CLR_SET(hadc->State,
 80031d0:	65a2      	str	r2, [r4, #88]	@ 0x58
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031d2:	f006 061f 	and.w	r6, r6, #31
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031d6:	d048      	beq.n	800326a <HAL_ADC_Start_IT+0xd6>
 80031d8:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031da:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80031dc:	f422 1580 	bic.w	r5, r2, #1048576	@ 0x100000
 80031e0:	65a5      	str	r5, [r4, #88]	@ 0x58
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031e2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80031e4:	f412 5580 	ands.w	r5, r2, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031e8:	bf1c      	itt	ne
 80031ea:	6de5      	ldrne	r5, [r4, #92]	@ 0x5c
 80031ec:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80031f0:	65e5      	str	r5, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031f2:	221c      	movs	r2, #28
      __HAL_UNLOCK(hadc);
 80031f4:	2500      	movs	r5, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031f6:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 80031f8:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	f022 051c 	bic.w	r5, r2, #28
 8003202:	605d      	str	r5, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8003204:	6965      	ldr	r5, [r4, #20]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003206:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8003208:	2d08      	cmp	r5, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800320a:	bf0c      	ite	eq
 800320c:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003210:	f042 0204 	orrne.w	r2, r2, #4
 8003214:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003216:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003218:	b91a      	cbnz	r2, 8003222 <HAL_ADC_Start_IT+0x8e>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	f042 0210 	orr.w	r2, r2, #16
 8003220:	605a      	str	r2, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003222:	428b      	cmp	r3, r1
 8003224:	d025      	beq.n	8003272 <HAL_ADC_Start_IT+0xde>
 8003226:	f240 2221 	movw	r2, #545	@ 0x221
 800322a:	40f2      	lsrs	r2, r6
 800322c:	07d6      	lsls	r6, r2, #31
 800322e:	d420      	bmi.n	8003272 <HAL_ADC_Start_IT+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003230:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8003232:	f446 1280 	orr.w	r2, r6, #1048576	@ 0x100000
 8003236:	65a2      	str	r2, [r4, #88]	@ 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003238:	68c9      	ldr	r1, [r1, #12]
 800323a:	018a      	lsls	r2, r1, #6
 800323c:	d50f      	bpl.n	800325e <HAL_ADC_Start_IT+0xca>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800323e:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8003240:	f426 5e40 	bic.w	lr, r6, #12288	@ 0x3000
 8003244:	f44e 5280 	orr.w	r2, lr, #4096	@ 0x1000
 8003248:	65a2      	str	r2, [r4, #88]	@ 0x58
          switch (hadc->Init.EOCSelection)
 800324a:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800324c:	685c      	ldr	r4, [r3, #4]
          switch (hadc->Init.EOCSelection)
 800324e:	d034      	beq.n	80032ba <HAL_ADC_Start_IT+0x126>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003250:	f024 0240 	bic.w	r2, r4, #64	@ 0x40
 8003254:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003256:	685c      	ldr	r4, [r3, #4]
 8003258:	f044 0520 	orr.w	r5, r4, #32
 800325c:	605d      	str	r5, [r3, #4]
}
 800325e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8003260:	2002      	movs	r0, #2
}
 8003262:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8003264:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8003268:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800326a:	491a      	ldr	r1, [pc, #104]	@ (80032d4 <HAL_ADC_Start_IT+0x140>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800326c:	2e00      	cmp	r6, #0
 800326e:	d1b8      	bne.n	80031e2 <HAL_ADC_Start_IT+0x4e>
 8003270:	e7b3      	b.n	80031da <HAL_ADC_Start_IT+0x46>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003272:	68d9      	ldr	r1, [r3, #12]
 8003274:	0189      	lsls	r1, r1, #6
 8003276:	d50f      	bpl.n	8003298 <HAL_ADC_Start_IT+0x104>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003278:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 800327a:	f426 5c40 	bic.w	ip, r6, #12288	@ 0x3000
 800327e:	f44c 5280 	orr.w	r2, ip, #4096	@ 0x1000
 8003282:	65a2      	str	r2, [r4, #88]	@ 0x58
          switch (hadc->Init.EOCSelection)
 8003284:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003286:	685c      	ldr	r4, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8003288:	d00f      	beq.n	80032aa <HAL_ADC_Start_IT+0x116>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800328a:	f024 0240 	bic.w	r2, r4, #64	@ 0x40
 800328e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003290:	685c      	ldr	r4, [r3, #4]
 8003292:	f044 0520 	orr.w	r5, r4, #32
 8003296:	605d      	str	r5, [r3, #4]
  MODIFY_REG(ADCx->CR,
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800329e:	f026 0e3f 	bic.w	lr, r6, #63	@ 0x3f
 80032a2:	f04e 0204 	orr.w	r2, lr, #4
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bd70      	pop	{r4, r5, r6, pc}
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032aa:	f024 0520 	bic.w	r5, r4, #32
 80032ae:	605d      	str	r5, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	f041 0640 	orr.w	r6, r1, #64	@ 0x40
 80032b6:	605e      	str	r6, [r3, #4]
              break;
 80032b8:	e7ee      	b.n	8003298 <HAL_ADC_Start_IT+0x104>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032ba:	f024 0520 	bic.w	r5, r4, #32
 80032be:	605d      	str	r5, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	f041 0640 	orr.w	r6, r1, #64	@ 0x40
 80032c6:	605e      	str	r6, [r3, #4]
}
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
 80032ca:	bf00      	nop
 80032cc:	50040300 	.word	0x50040300
 80032d0:	50040100 	.word	0x50040100
 80032d4:	50040000 	.word	0x50040000

080032d8 <HAL_ADC_Start_DMA>:
{
 80032d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80032dc:	4b37      	ldr	r3, [pc, #220]	@ (80033bc <HAL_ADC_Start_DMA+0xe4>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032de:	6806      	ldr	r6, [r0, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
{
 80032e2:	460d      	mov	r5, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032e4:	68b1      	ldr	r1, [r6, #8]
 80032e6:	0749      	lsls	r1, r1, #29
 80032e8:	d418      	bmi.n	800331c <HAL_ADC_Start_DMA+0x44>
 80032ea:	4617      	mov	r7, r2
    __HAL_LOCK(hadc);
 80032ec:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 80032f0:	2a01      	cmp	r2, #1
 80032f2:	4604      	mov	r4, r0
 80032f4:	d012      	beq.n	800331c <HAL_ADC_Start_DMA+0x44>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80032f6:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80032fa:	4b31      	ldr	r3, [pc, #196]	@ (80033c0 <HAL_ADC_Start_DMA+0xe8>)
    __HAL_LOCK(hadc);
 80032fc:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80032fe:	429e      	cmp	r6, r3
    __HAL_LOCK(hadc);
 8003300:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003304:	d00d      	beq.n	8003322 <HAL_ADC_Start_DMA+0x4a>
 8003306:	f240 2621 	movw	r6, #545	@ 0x221
 800330a:	fa26 fc08 	lsr.w	ip, r6, r8
 800330e:	ea1c 0100 	ands.w	r1, ip, r0
 8003312:	d106      	bne.n	8003322 <HAL_ADC_Start_DMA+0x4a>
      __HAL_UNLOCK(hadc);
 8003314:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
}
 8003318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 800331c:	2002      	movs	r0, #2
}
 800331e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8003322:	4620      	mov	r0, r4
 8003324:	f7ff feb0 	bl	8003088 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003328:	2800      	cmp	r0, #0
 800332a:	d13d      	bne.n	80033a8 <HAL_ADC_Start_DMA+0xd0>
        ADC_STATE_CLR_SET(hadc->State,
 800332c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800332e:	6821      	ldr	r1, [r4, #0]
 8003330:	4e24      	ldr	r6, [pc, #144]	@ (80033c4 <HAL_ADC_Start_DMA+0xec>)
        ADC_STATE_CLR_SET(hadc->State,
 8003332:	f420 6270 	bic.w	r2, r0, #3840	@ 0xf00
 8003336:	f022 0e01 	bic.w	lr, r2, #1
 800333a:	f44e 7380 	orr.w	r3, lr, #256	@ 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800333e:	42b1      	cmp	r1, r6
        ADC_STATE_CLR_SET(hadc->State,
 8003340:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003342:	d036      	beq.n	80033b2 <HAL_ADC_Start_DMA+0xda>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003346:	f420 1280 	bic.w	r2, r0, #1048576	@ 0x100000
 800334a:	65a2      	str	r2, [r4, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800334c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800334e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003350:	f413 5680 	ands.w	r6, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003354:	bf18      	it	ne
 8003356:	6de6      	ldrne	r6, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003358:	463b      	mov	r3, r7
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800335a:	bf18      	it	ne
 800335c:	f026 0606 	bicne.w	r6, r6, #6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003360:	4f19      	ldr	r7, [pc, #100]	@ (80033c8 <HAL_ADC_Start_DMA+0xf0>)
          ADC_CLEAR_ERRORCODE(hadc);
 8003362:	65e6      	str	r6, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003364:	462a      	mov	r2, r5
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003366:	62c7      	str	r7, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003368:	4d18      	ldr	r5, [pc, #96]	@ (80033cc <HAL_ADC_Start_DMA+0xf4>)
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800336a:	4e19      	ldr	r6, [pc, #100]	@ (80033d0 <HAL_ADC_Start_DMA+0xf8>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800336c:	6305      	str	r5, [r0, #48]	@ 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800336e:	271c      	movs	r7, #28
        __HAL_UNLOCK(hadc);
 8003370:	f04f 0800 	mov.w	r8, #0
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003374:	6346      	str	r6, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003376:	600f      	str	r7, [r1, #0]
        __HAL_UNLOCK(hadc);
 8003378:	f884 8054 	strb.w	r8, [r4, #84]	@ 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800337c:	684d      	ldr	r5, [r1, #4]
 800337e:	f045 0610 	orr.w	r6, r5, #16
 8003382:	604e      	str	r6, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003384:	68cf      	ldr	r7, [r1, #12]
 8003386:	f047 0501 	orr.w	r5, r7, #1
 800338a:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800338c:	3140      	adds	r1, #64	@ 0x40
 800338e:	f000 fcdb 	bl	8003d48 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003392:	6824      	ldr	r4, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003394:	68a1      	ldr	r1, [r4, #8]
 8003396:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800339a:	f022 033f 	bic.w	r3, r2, #63	@ 0x3f
 800339e:	f043 0604 	orr.w	r6, r3, #4
 80033a2:	60a6      	str	r6, [r4, #8]
}
 80033a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80033a8:	2500      	movs	r5, #0
 80033aa:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 80033ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033b2:	f1b8 0f00 	cmp.w	r8, #0
 80033b6:	d1c9      	bne.n	800334c <HAL_ADC_Start_DMA+0x74>
 80033b8:	e7c4      	b.n	8003344 <HAL_ADC_Start_DMA+0x6c>
 80033ba:	bf00      	nop
 80033bc:	50040300 	.word	0x50040300
 80033c0:	50040200 	.word	0x50040200
 80033c4:	50040100 	.word	0x50040100
 80033c8:	08002ae5 	.word	0x08002ae5
 80033cc:	08002ad5 	.word	0x08002ad5
 80033d0:	08002b51 	.word	0x08002b51

080033d4 <ADC_Disable>:
{
 80033d4:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033d6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	0795      	lsls	r5, r2, #30
 80033dc:	d502      	bpl.n	80033e4 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033de:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80033e0:	2000      	movs	r0, #0
}
 80033e2:	bd38      	pop	{r3, r4, r5, pc}
 80033e4:	6899      	ldr	r1, [r3, #8]
 80033e6:	07cc      	lsls	r4, r1, #31
 80033e8:	d5fa      	bpl.n	80033e0 <ADC_Disable+0xc>
 80033ea:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033ec:	6898      	ldr	r0, [r3, #8]
 80033ee:	f000 050d 	and.w	r5, r0, #13
 80033f2:	2d01      	cmp	r5, #1
 80033f4:	d009      	beq.n	800340a <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f6:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 80033f8:	f045 0010 	orr.w	r0, r5, #16
 80033fc:	65a0      	str	r0, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003400:	f043 0201 	orr.w	r2, r3, #1
 8003404:	65e2      	str	r2, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003406:	2001      	movs	r0, #1
}
 8003408:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 8003410:	f020 053f 	bic.w	r5, r0, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003414:	2103      	movs	r1, #3
 8003416:	f045 0202 	orr.w	r2, r5, #2
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800341e:	f7ff fa17 	bl	8002850 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	6899      	ldr	r1, [r3, #8]
 8003426:	07c9      	lsls	r1, r1, #31
    tickstart = HAL_GetTick();
 8003428:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800342a:	d403      	bmi.n	8003434 <ADC_Disable+0x60>
 800342c:	e7d8      	b.n	80033e0 <ADC_Disable+0xc>
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	07cb      	lsls	r3, r1, #31
 8003432:	d5d5      	bpl.n	80033e0 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003434:	f7ff fa0c 	bl	8002850 <HAL_GetTick>
 8003438:	1b40      	subs	r0, r0, r5
 800343a:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800343c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800343e:	d9f6      	bls.n	800342e <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	07d2      	lsls	r2, r2, #31
 8003444:	d5f3      	bpl.n	800342e <ADC_Disable+0x5a>
 8003446:	e7d6      	b.n	80033f6 <ADC_Disable+0x22>

08003448 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003448:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800344a:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 800344e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003450:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003452:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003454:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003456:	d040      	beq.n	80034da <HAL_ADCEx_Calibration_Start+0x92>
 8003458:	460d      	mov	r5, r1
 800345a:	2101      	movs	r1, #1
 800345c:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003460:	4604      	mov	r4, r0
 8003462:	f7ff ffb7 	bl	80033d4 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003466:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 8003468:	b9e0      	cbnz	r0, 80034a4 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 800346a:	f423 5188 	bic.w	r1, r3, #4352	@ 0x1100
 800346e:	f021 0c02 	bic.w	ip, r1, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003472:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8003474:	f04c 0302 	orr.w	r3, ip, #2
 8003478:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 800347a:	6891      	ldr	r1, [r2, #8]
 800347c:	f021 4e40 	bic.w	lr, r1, #3221225472	@ 0xc0000000
 8003480:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 8003484:	f02e 033f 	bic.w	r3, lr, #63	@ 0x3f
 8003488:	432b      	orrs	r3, r5
 800348a:	f043 4500 	orr.w	r5, r3, #2147483648	@ 0x80000000
 800348e:	6095      	str	r5, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003490:	6891      	ldr	r1, [r2, #8]
 8003492:	2900      	cmp	r1, #0
 8003494:	db0e      	blt.n	80034b4 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003496:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003498:	f022 0c03 	bic.w	ip, r2, #3
 800349c:	f04c 0301 	orr.w	r3, ip, #1
 80034a0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80034a2:	e002      	b.n	80034aa <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a4:	f043 0210 	orr.w	r2, r3, #16
 80034a8:	65a2      	str	r2, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	2500      	movs	r5, #0
 80034ac:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 80034b0:	b003      	add	sp, #12
 80034b2:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 80034b4:	9901      	ldr	r1, [sp, #4]
 80034b6:	3101      	adds	r1, #1
 80034b8:	9101      	str	r1, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80034ba:	9b01      	ldr	r3, [sp, #4]
 80034bc:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80034c0:	d3e6      	bcc.n	8003490 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80034c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034c4:	f020 0212 	bic.w	r2, r0, #18
        __HAL_UNLOCK(hadc);
 80034c8:	f04f 0e00 	mov.w	lr, #0
        ADC_STATE_CLR_SET(hadc->State,
 80034cc:	f042 0510 	orr.w	r5, r2, #16
 80034d0:	65a5      	str	r5, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 80034d2:	f884 e054 	strb.w	lr, [r4, #84]	@ 0x54
        return HAL_ERROR;
 80034d6:	2001      	movs	r0, #1
 80034d8:	e7ea      	b.n	80034b0 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 80034da:	2002      	movs	r0, #2
}
 80034dc:	b003      	add	sp, #12
 80034de:	bd30      	pop	{r4, r5, pc}

080034e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034e0:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e2:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034e6:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80034e8:	2a01      	cmp	r2, #1
{
 80034ea:	b09a      	sub	sp, #104	@ 0x68
  __HAL_LOCK(hadc);
 80034ec:	d044      	beq.n	8003578 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80034ee:	4603      	mov	r3, r0

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80034f0:	4d2e      	ldr	r5, [pc, #184]	@ (80035ac <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80034f2:	681c      	ldr	r4, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80034f4:	2700      	movs	r7, #0
  __HAL_LOCK(hadc);
 80034f6:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80034f8:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80034fa:	9716      	str	r7, [sp, #88]	@ 0x58
  __HAL_LOCK(hadc);
 80034fc:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003500:	9717      	str	r7, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003502:	d008      	beq.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003504:	6d99      	ldr	r1, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003506:	f883 7054 	strb.w	r7, [r3, #84]	@ 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350a:	f041 0220 	orr.w	r2, r1, #32
 800350e:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003510:	b01a      	add	sp, #104	@ 0x68
 8003512:	bcf0      	pop	{r4, r5, r6, r7}
 8003514:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003516:	4a26      	ldr	r2, [pc, #152]	@ (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8003518:	6890      	ldr	r0, [r2, #8]
 800351a:	0740      	lsls	r0, r0, #29
 800351c:	d50b      	bpl.n	8003536 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800351e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003520:	6d9f      	ldr	r7, [r3, #88]	@ 0x58
 8003522:	f047 0520 	orr.w	r5, r7, #32
    tmp_hal_status = HAL_ERROR;
 8003526:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003528:	659d      	str	r5, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 800352a:	2400      	movs	r4, #0
 800352c:	f883 4054 	strb.w	r4, [r3, #84]	@ 0x54
}
 8003530:	b01a      	add	sp, #104	@ 0x68
 8003532:	bcf0      	pop	{r4, r5, r6, r7}
 8003534:	4770      	bx	lr
 8003536:	68a7      	ldr	r7, [r4, #8]
 8003538:	077f      	lsls	r7, r7, #29
 800353a:	d4f1      	bmi.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800353c:	b306      	cbz	r6, 8003580 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800353e:	4f1d      	ldr	r7, [pc, #116]	@ (80035b4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8003540:	684d      	ldr	r5, [r1, #4]
 8003542:	68b8      	ldr	r0, [r7, #8]
 8003544:	f893 c030 	ldrb.w	ip, [r3, #48]	@ 0x30
 8003548:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 800354c:	4328      	orrs	r0, r5
 800354e:	ea40 354c 	orr.w	r5, r0, ip, lsl #13
 8003552:	60bd      	str	r5, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003554:	4818      	ldr	r0, [pc, #96]	@ (80035b8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003556:	68a4      	ldr	r4, [r4, #8]
 8003558:	6892      	ldr	r2, [r2, #8]
 800355a:	6885      	ldr	r5, [r0, #8]
 800355c:	4322      	orrs	r2, r4
 800355e:	432a      	orrs	r2, r5
 8003560:	07d5      	lsls	r5, r2, #31
 8003562:	d420      	bmi.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        MODIFY_REG(tmpADC_Common->CCR,
 8003564:	68bc      	ldr	r4, [r7, #8]
 8003566:	688a      	ldr	r2, [r1, #8]
 8003568:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 800356c:	4332      	orrs	r2, r6
 800356e:	f021 060f 	bic.w	r6, r1, #15
 8003572:	4332      	orrs	r2, r6
 8003574:	60ba      	str	r2, [r7, #8]
 8003576:	e016      	b.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8003578:	2002      	movs	r0, #2
}
 800357a:	b01a      	add	sp, #104	@ 0x68
 800357c:	bcf0      	pop	{r4, r5, r6, r7}
 800357e:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003580:	4e0c      	ldr	r6, [pc, #48]	@ (80035b4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8003582:	480d      	ldr	r0, [pc, #52]	@ (80035b8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003584:	68b5      	ldr	r5, [r6, #8]
 8003586:	f425 4160 	bic.w	r1, r5, #57344	@ 0xe000
 800358a:	60b1      	str	r1, [r6, #8]
 800358c:	68a4      	ldr	r4, [r4, #8]
 800358e:	6892      	ldr	r2, [r2, #8]
 8003590:	6887      	ldr	r7, [r0, #8]
 8003592:	4322      	orrs	r2, r4
 8003594:	433a      	orrs	r2, r7
 8003596:	07d4      	lsls	r4, r2, #31
 8003598:	d405      	bmi.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800359a:	68b5      	ldr	r5, [r6, #8]
 800359c:	f425 6171 	bic.w	r1, r5, #3856	@ 0xf10
 80035a0:	f021 000f 	bic.w	r0, r1, #15
 80035a4:	60b0      	str	r0, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a6:	2000      	movs	r0, #0
 80035a8:	e7bf      	b.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80035aa:	bf00      	nop
 80035ac:	50040000 	.word	0x50040000
 80035b0:	50040100 	.word	0x50040100
 80035b4:	50040300 	.word	0x50040300
 80035b8:	50040200 	.word	0x50040200

080035bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035bc:	4907      	ldr	r1, [pc, #28]	@ (80035dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80035be:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035c2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
 80035c6:	4002      	ands	r2, r0
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035cc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ce:	f043 62bf 	orr.w	r2, r3, #100139008	@ 0x5f80000
 80035d2:	f442 3000 	orr.w	r0, r2, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80035d6:	60c8      	str	r0, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <HAL_NVIC_SetPriority+0x70>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ea:	f1c3 0e07 	rsb	lr, r3, #7
 80035ee:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f6:	bf28      	it	cs
 80035f8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fc:	f1bc 0f06 	cmp.w	ip, #6
 8003600:	d91c      	bls.n	800363c <HAL_NVIC_SetPriority+0x5c>
 8003602:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	fa03 f30c 	lsl.w	r3, r3, ip
 800360e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	fa03 f30e 	lsl.w	r3, r3, lr
 800361a:	ea21 0103 	bic.w	r1, r1, r3
 800361e:	fa01 f30c 	lsl.w	r3, r1, ip
 8003622:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003624:	011a      	lsls	r2, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8003626:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	b2d1      	uxtb	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800362a:	db0a      	blt.n	8003642 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362c:	f100 4c60 	add.w	ip, r0, #3758096384	@ 0xe0000000
 8003630:	f50c 4261 	add.w	r2, ip, #57600	@ 0xe100
 8003634:	f882 1300 	strb.w	r1, [r2, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003638:	f85d fb04 	ldr.w	pc, [sp], #4
 800363c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	4694      	mov	ip, r2
 8003640:	e7e7      	b.n	8003612 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003642:	4b04      	ldr	r3, [pc, #16]	@ (8003654 <HAL_NVIC_SetPriority+0x74>)
 8003644:	f000 000f 	and.w	r0, r0, #15
 8003648:	4403      	add	r3, r0
 800364a:	7619      	strb	r1, [r3, #24]
 800364c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003650:	e000ed00 	.word	0xe000ed00
 8003654:	e000ecfc 	.word	0xe000ecfc

08003658 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003658:	2800      	cmp	r0, #0
 800365a:	db07      	blt.n	800366c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365c:	4a04      	ldr	r2, [pc, #16]	@ (8003670 <HAL_NVIC_EnableIRQ+0x18>)
 800365e:	0941      	lsrs	r1, r0, #5
 8003660:	2301      	movs	r3, #1
 8003662:	f000 001f 	and.w	r0, r0, #31
 8003666:	4083      	lsls	r3, r0
 8003668:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000e100 	.word	0xe000e100

08003674 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003674:	3801      	subs	r0, #1
 8003676:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800367a:	d301      	bcc.n	8003680 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800367c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800367e:	4770      	bx	lr
{
 8003680:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003682:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003686:	4c07      	ldr	r4, [pc, #28]	@ (80036a4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003688:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368a:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800368e:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003692:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003694:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003696:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003698:	619a      	str	r2, [r3, #24]
}
 800369a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800369e:	6119      	str	r1, [r3, #16]
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <CRYP_SetKey>:
  */
static HAL_StatusTypeDef  CRYP_SetKey(CRYP_HandleTypeDef *hcryp)
{
  uint32_t keyaddr;

  if (hcryp->Init.pKey == NULL)
 80036a8:	6a03      	ldr	r3, [r0, #32]
 80036aa:	b32b      	cbz	r3, 80036f8 <CRYP_SetKey+0x50>
{
 80036ac:	b410      	push	{r4}
  }


  keyaddr = (uint32_t)(hcryp->Init.pKey);

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80036ae:	68c4      	ldr	r4, [r0, #12]
  {
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 80036b0:	6802      	ldr	r2, [r0, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80036b2:	f5b4 2f80 	cmp.w	r4, #262144	@ 0x40000
  keyaddr = (uint32_t)(hcryp->Init.pKey);
 80036b6:	4619      	mov	r1, r3
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80036b8:	d10e      	bne.n	80036d8 <CRYP_SetKey+0x30>
  return __builtin_bswap32(value);
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	ba04      	rev	r4, r0
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 80036be:	63d4      	str	r4, [r2, #60]	@ 0x3c
 80036c0:	6858      	ldr	r0, [r3, #4]
 80036c2:	ba04      	rev	r4, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR6 = __REV(*(uint32_t*)(keyaddr));
 80036c4:	6394      	str	r4, [r2, #56]	@ 0x38
 80036c6:	6898      	ldr	r0, [r3, #8]
 80036c8:	ba04      	rev	r4, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR5 = __REV(*(uint32_t*)(keyaddr));
 80036ca:	6354      	str	r4, [r2, #52]	@ 0x34
 80036cc:	68d8      	ldr	r0, [r3, #12]
    keyaddr+=4U;
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4U;
 80036ce:	f103 0110 	add.w	r1, r3, #16
 80036d2:	ba04      	rev	r4, r0
  }

  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 80036d4:	460b      	mov	r3, r1
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
 80036d6:	6314      	str	r4, [r2, #48]	@ 0x30
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	ba1c      	rev	r4, r3
  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 80036dc:	61d4      	str	r4, [r2, #28]
 80036de:	684b      	ldr	r3, [r1, #4]
 80036e0:	ba1c      	rev	r4, r3
  keyaddr+=4U;
  hcryp->Instance->KEYR2 = __REV(*(uint32_t*)(keyaddr));
 80036e2:	6194      	str	r4, [r2, #24]
 80036e4:	688b      	ldr	r3, [r1, #8]
 80036e6:	ba1c      	rev	r4, r3
  keyaddr+=4U;
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
 80036e8:	6154      	str	r4, [r2, #20]
 80036ea:	68c9      	ldr	r1, [r1, #12]
  keyaddr+=4U;
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));

  return HAL_OK;
}
 80036ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036f0:	ba0b      	rev	r3, r1
  return HAL_OK;
 80036f2:	2000      	movs	r0, #0
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));
 80036f4:	6113      	str	r3, [r2, #16]
}
 80036f6:	4770      	bx	lr
    return HAL_ERROR;
 80036f8:	2001      	movs	r0, #1
}
 80036fa:	4770      	bx	lr

080036fc <HAL_CRYP_Init>:
  if(hcryp == NULL)
 80036fc:	2800      	cmp	r0, #0
 80036fe:	f000 80a4 	beq.w	800384a <HAL_CRYP_Init+0x14e>
  if (hcryp->Init.OperatingMode != CRYP_ALGOMODE_KEYDERIVATION)
 8003702:	6902      	ldr	r2, [r0, #16]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003704:	2a18      	cmp	r2, #24
{
 8003706:	b570      	push	{r4, r5, r6, lr}
 8003708:	4604      	mov	r4, r0
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 800370a:	d04d      	beq.n	80037a8 <HAL_CRYP_Init+0xac>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800370c:	2a08      	cmp	r2, #8
 800370e:	d03e      	beq.n	800378e <HAL_CRYP_Init+0x92>
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8003710:	f894 0055 	ldrb.w	r0, [r4, #85]	@ 0x55
 8003714:	f000 05ff 	and.w	r5, r0, #255	@ 0xff
 8003718:	2800      	cmp	r0, #0
 800371a:	d03e      	beq.n	800379a <HAL_CRYP_Init+0x9e>
  __HAL_CRYP_DISABLE(hcryp);
 800371c:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800371e:	68e1      	ldr	r1, [r4, #12]
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003720:	2602      	movs	r6, #2
 8003722:	f884 6055 	strb.w	r6, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003726:	682b      	ldr	r3, [r5, #0]
 8003728:	f023 0001 	bic.w	r0, r3, #1
 800372c:	6028      	str	r0, [r5, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800372e:	682e      	ldr	r6, [r5, #0]
 8003730:	f426 2380 	bic.w	r3, r6, #262144	@ 0x40000
 8003734:	430b      	orrs	r3, r1
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003736:	f04f 0c0a 	mov.w	ip, #10
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800373a:	2a08      	cmp	r2, #8
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800373c:	602b      	str	r3, [r5, #0]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 800373e:	f884 c048 	strb.w	ip, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003742:	d066      	beq.n	8003812 <HAL_CRYP_Init+0x116>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003744:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8003748:	2e60      	cmp	r6, #96	@ 0x60
 800374a:	d033      	beq.n	80037b4 <HAL_CRYP_Init+0xb8>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 800374c:	6829      	ldr	r1, [r5, #0]
 800374e:	f421 3380 	bic.w	r3, r1, #65536	@ 0x10000
 8003752:	f023 017e 	bic.w	r1, r3, #126	@ 0x7e
 8003756:	68a3      	ldr	r3, [r4, #8]
 8003758:	4333      	orrs	r3, r6
 800375a:	430b      	orrs	r3, r1
 800375c:	4313      	orrs	r3, r2
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 800375e:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003762:	602b      	str	r3, [r5, #0]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003764:	d061      	beq.n	800382a <HAL_CRYP_Init+0x12e>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003766:	2800      	cmp	r0, #0
 8003768:	d04d      	beq.n	8003806 <HAL_CRYP_Init+0x10a>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 800376a:	2e00      	cmp	r6, #0
 800376c:	d13b      	bne.n	80037e6 <HAL_CRYP_Init+0xea>
  hcryp->CrypInCount = 0;
 800376e:	2200      	movs	r2, #0
 8003770:	2300      	movs	r3, #0
 8003772:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003776:	2000      	movs	r0, #0
  hcryp->State = HAL_CRYP_STATE_READY;
 8003778:	2101      	movs	r1, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 800377a:	65a0      	str	r0, [r4, #88]	@ 0x58
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 800377c:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hcryp->State = HAL_CRYP_STATE_READY;
 8003780:	f884 1055 	strb.w	r1, [r4, #85]	@ 0x55
  __HAL_CRYP_ENABLE(hcryp);
 8003784:	682c      	ldr	r4, [r5, #0]
 8003786:	f044 0301 	orr.w	r3, r4, #1
 800378a:	602b      	str	r3, [r5, #0]
}
 800378c:	bd70      	pop	{r4, r5, r6, pc}
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 800378e:	6943      	ldr	r3, [r0, #20]
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003794:	d1bc      	bne.n	8003710 <HAL_CRYP_Init+0x14>
    return HAL_ERROR;
 8003796:	2001      	movs	r0, #1
}
 8003798:	bd70      	pop	{r4, r5, r6, pc}
    hcryp->Lock = HAL_UNLOCKED;
 800379a:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
    HAL_CRYP_MspInit(hcryp);
 800379e:	4620      	mov	r0, r4
 80037a0:	f7fd f87c 	bl	800089c <HAL_CRYP_MspInit>
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80037a4:	6922      	ldr	r2, [r4, #16]
 80037a6:	e7b9      	b.n	800371c <HAL_CRYP_Init+0x20>
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
 80037a8:	6943      	ldr	r3, [r0, #20]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 80037aa:	f023 0120 	bic.w	r1, r3, #32
 80037ae:	2940      	cmp	r1, #64	@ 0x40
 80037b0:	d1ee      	bne.n	8003790 <HAL_CRYP_Init+0x94>
 80037b2:	e7f0      	b.n	8003796 <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80037b4:	682e      	ldr	r6, [r5, #0]
 80037b6:	f426 3180 	bic.w	r1, r6, #65536	@ 0x10000
 80037ba:	f021 037e 	bic.w	r3, r1, #126	@ 0x7e
 80037be:	4313      	orrs	r3, r2
 80037c0:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 80037c4:	602a      	str	r2, [r5, #0]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80037c6:	682e      	ldr	r6, [r5, #0]
 80037c8:	69e1      	ldr	r1, [r4, #28]
 80037ca:	f426 43c0 	bic.w	r3, r6, #24576	@ 0x6000
 80037ce:	430b      	orrs	r3, r1
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80037d0:	f04f 0c03 	mov.w	ip, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80037d4:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80037d6:	f884 c048 	strb.w	ip, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80037da:	b920      	cbnz	r0, 80037e6 <HAL_CRYP_Init+0xea>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80037dc:	4620      	mov	r0, r4
 80037de:	f7ff ff63 	bl	80036a8 <CRYP_SetKey>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d1d7      	bne.n	8003796 <HAL_CRYP_Init+0x9a>
    hcryp->Instance->IVR0 = 0;
  }
  else
#endif
  {
    if (hcryp->Init.pInitVect == NULL)
 80037e6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d0d4      	beq.n	8003796 <HAL_CRYP_Init+0x9a>
 80037ec:	6802      	ldr	r2, [r0, #0]
 80037ee:	ba16      	rev	r6, r2
      return HAL_ERROR;
    }

    ivaddr = (uint32_t)(hcryp->Init.pInitVect);

    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 80037f0:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80037f2:	6841      	ldr	r1, [r0, #4]
 80037f4:	ba0b      	rev	r3, r1
    ivaddr+=4U;
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 80037f6:	62ab      	str	r3, [r5, #40]	@ 0x28
 80037f8:	6882      	ldr	r2, [r0, #8]
 80037fa:	ba16      	rev	r6, r2
    ivaddr+=4U;
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 80037fc:	626e      	str	r6, [r5, #36]	@ 0x24
 80037fe:	68c0      	ldr	r0, [r0, #12]
 8003800:	ba01      	rev	r1, r0
    ivaddr+=4U;
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 8003802:	6229      	str	r1, [r5, #32]
 8003804:	e7b3      	b.n	800376e <HAL_CRYP_Init+0x72>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff ff4e 	bl	80036a8 <CRYP_SetKey>
 800380c:	2800      	cmp	r0, #0
 800380e:	d0ac      	beq.n	800376a <HAL_CRYP_Init+0x6e>
 8003810:	e7c1      	b.n	8003796 <HAL_CRYP_Init+0x9a>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003812:	682b      	ldr	r3, [r5, #0]
 8003814:	f023 0218 	bic.w	r2, r3, #24
 8003818:	f042 0608 	orr.w	r6, r2, #8
    if (CRYP_SetKey(hcryp) != HAL_OK)
 800381c:	4620      	mov	r0, r4
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 800381e:	602e      	str	r6, [r5, #0]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8003820:	f7ff ff42 	bl	80036a8 <CRYP_SetKey>
 8003824:	2800      	cmp	r0, #0
 8003826:	d0a2      	beq.n	800376e <HAL_CRYP_Init+0x72>
 8003828:	e7b5      	b.n	8003796 <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 800382a:	682e      	ldr	r6, [r5, #0]
 800382c:	69e2      	ldr	r2, [r4, #28]
 800382e:	f426 41c0 	bic.w	r1, r6, #24576	@ 0x6000
 8003832:	4311      	orrs	r1, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003834:	2303      	movs	r3, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003836:	6029      	str	r1, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003838:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 800383c:	b138      	cbz	r0, 800384e <HAL_CRYP_Init+0x152>
    hcryp->Instance->IVR3 = 0;
 800383e:	2000      	movs	r0, #0
 8003840:	62e8      	str	r0, [r5, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 8003842:	62a8      	str	r0, [r5, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 8003844:	6268      	str	r0, [r5, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 8003846:	6228      	str	r0, [r5, #32]
 8003848:	e791      	b.n	800376e <HAL_CRYP_Init+0x72>
    return HAL_ERROR;
 800384a:	2001      	movs	r0, #1
}
 800384c:	4770      	bx	lr
      if (CRYP_SetKey(hcryp) != HAL_OK)
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff ff2a 	bl	80036a8 <CRYP_SetKey>
 8003854:	2800      	cmp	r0, #0
 8003856:	d19e      	bne.n	8003796 <HAL_CRYP_Init+0x9a>
 8003858:	e7f1      	b.n	800383e <HAL_CRYP_Init+0x142>
 800385a:	bf00      	nop
 800385c:	0000      	movs	r0, r0
	...

08003860 <HAL_CRYP_AESCBC_Encrypt>:
{
 8003860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003864:	b083      	sub	sp, #12
 8003866:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  if(hcryp == NULL)
 800386a:	2800      	cmp	r0, #0
 800386c:	d073      	beq.n	8003956 <HAL_CRYP_AESCBC_Encrypt+0xf6>
  hcryp->CrypInCount = 0;
 800386e:	ed9f 7b7a 	vldr	d7, [pc, #488]	@ 8003a58 <HAL_CRYP_AESCBC_Encrypt+0x1f8>
 8003872:	ed80 7b10 	vstr	d7, [r0, #64]	@ 0x40
 8003876:	4616      	mov	r6, r2
 8003878:	461f      	mov	r7, r3
  __HAL_CRYP_DISABLE(hcryp);
 800387a:	6802      	ldr	r2, [r0, #0]
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 800387c:	2301      	movs	r3, #1
  hcryp->State = HAL_CRYP_STATE_BUSY;
 800387e:	f04f 0902 	mov.w	r9, #2
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 8003882:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003886:	f880 9055 	strb.w	r9, [r0, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 800388a:	460d      	mov	r5, r1
 800388c:	6811      	ldr	r1, [r2, #0]
 800388e:	f021 0301 	bic.w	r3, r1, #1
 8003892:	4604      	mov	r4, r0
 8003894:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 8003896:	f7fd f819 	bl	80008cc <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 800389a:	2000      	movs	r0, #0
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 800389c:	ed9f 0b70 	vldr	d0, [pc, #448]	@ 8003a60 <HAL_CRYP_AESCBC_Encrypt+0x200>
  hcryp->State = HAL_CRYP_STATE_RESET;
 80038a0:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 80038a4:	f894 2055 	ldrb.w	r2, [r4, #85]	@ 0x55
  __HAL_UNLOCK(hcryp);
 80038a8:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 80038ac:	ed84 0b04 	vstr	d0, [r4, #16]
  hcryp->Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 80038b0:	61a0      	str	r0, [r4, #24]
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 80038b2:	2a00      	cmp	r2, #0
 80038b4:	d053      	beq.n	800395e <HAL_CRYP_AESCBC_Encrypt+0xfe>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 80038b6:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 80038ba:	f8d4 9000 	ldr.w	r9, [r4]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80038be:	68e1      	ldr	r1, [r4, #12]
  __HAL_CRYP_DISABLE(hcryp);
 80038c0:	f8d9 3000 	ldr.w	r3, [r9]
 80038c4:	f023 0201 	bic.w	r2, r3, #1
 80038c8:	f8c9 2000 	str.w	r2, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80038cc:	f8d9 3000 	ldr.w	r3, [r9]
 80038d0:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80038d4:	430a      	orrs	r2, r1
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80038d6:	210a      	movs	r1, #10
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80038d8:	f8c9 2000 	str.w	r2, [r9]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80038dc:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80038e0:	e9d4 2c05 	ldrd	r2, ip, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 80038e4:	2a60      	cmp	r2, #96	@ 0x60
 80038e6:	d063      	beq.n	80039b0 <HAL_CRYP_AESCBC_Encrypt+0x150>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80038e8:	f8d9 3000 	ldr.w	r3, [r9]
 80038ec:	f423 3e80 	bic.w	lr, r3, #65536	@ 0x10000
 80038f0:	68a3      	ldr	r3, [r4, #8]
 80038f2:	f02e 017e 	bic.w	r1, lr, #126	@ 0x7e
 80038f6:	4313      	orrs	r3, r2
 80038f8:	430b      	orrs	r3, r1
 80038fa:	4303      	orrs	r3, r0
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 80038fc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003900:	f8c9 3000 	str.w	r3, [r9]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003904:	f000 808e 	beq.w	8003a24 <HAL_CRYP_AESCBC_Encrypt+0x1c4>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003908:	f1bc 0f00 	cmp.w	ip, #0
 800390c:	f000 8082 	beq.w	8003a14 <HAL_CRYP_AESCBC_Encrypt+0x1b4>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8003910:	2a00      	cmp	r2, #0
 8003912:	d16b      	bne.n	80039ec <HAL_CRYP_AESCBC_Encrypt+0x18c>
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003914:	4632      	mov	r2, r6
 8003916:	4629      	mov	r1, r5
  hcryp->State = HAL_CRYP_STATE_READY;
 8003918:	2601      	movs	r6, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 800391a:	2500      	movs	r5, #0
 800391c:	65a5      	str	r5, [r4, #88]	@ 0x58
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 800391e:	463b      	mov	r3, r7
  hcryp->State = HAL_CRYP_STATE_READY;
 8003920:	f884 6055 	strb.w	r6, [r4, #85]	@ 0x55
  hcryp->CrypInCount = 0;
 8003924:	2700      	movs	r7, #0
 8003926:	2600      	movs	r6, #0
 8003928:	e9c4 6710 	strd	r6, r7, [r4, #64]	@ 0x40
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 800392c:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003930:	4620      	mov	r0, r4
  __HAL_CRYP_ENABLE(hcryp);
 8003932:	f8d9 4000 	ldr.w	r4, [r9]
 8003936:	f044 0701 	orr.w	r7, r4, #1
 800393a:	f8c9 7000 	str.w	r7, [r9]
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 800393e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
}
 8003942:	b003      	add	sp, #12
 8003944:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8003948:	f000 b88e 	b.w	8003a68 <HAL_CRYPEx_AES>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 800394c:	4620      	mov	r0, r4
 800394e:	f7ff feab 	bl	80036a8 <CRYP_SetKey>
 8003952:	2800      	cmp	r0, #0
 8003954:	d074      	beq.n	8003a40 <HAL_CRYP_AESCBC_Encrypt+0x1e0>
}
 8003956:	2001      	movs	r0, #1
 8003958:	b003      	add	sp, #12
 800395a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_CRYP_MspInit(hcryp);
 800395e:	4620      	mov	r0, r4
 8003960:	f7fc ff9c 	bl	800089c <HAL_CRYP_MspInit>
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003964:	f884 9055 	strb.w	r9, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003968:	f8d4 9000 	ldr.w	r9, [r4]
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800396c:	6920      	ldr	r0, [r4, #16]
  __HAL_CRYP_DISABLE(hcryp);
 800396e:	f8d9 3000 	ldr.w	r3, [r9]
 8003972:	f023 0201 	bic.w	r2, r3, #1
 8003976:	f8c9 2000 	str.w	r2, [r9]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800397a:	f8d9 1000 	ldr.w	r1, [r9]
 800397e:	68e2      	ldr	r2, [r4, #12]
 8003980:	f421 2380 	bic.w	r3, r1, #262144	@ 0x40000
 8003984:	4313      	orrs	r3, r2
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003986:	210a      	movs	r1, #10
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003988:	2808      	cmp	r0, #8
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800398a:	f8c9 3000 	str.w	r3, [r9]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 800398e:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003992:	d1a5      	bne.n	80038e0 <HAL_CRYP_AESCBC_Encrypt+0x80>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003994:	f8d9 3000 	ldr.w	r3, [r9]
 8003998:	f023 0218 	bic.w	r2, r3, #24
 800399c:	f042 0008 	orr.w	r0, r2, #8
 80039a0:	f8c9 0000 	str.w	r0, [r9]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 80039a4:	4620      	mov	r0, r4
 80039a6:	f7ff fe7f 	bl	80036a8 <CRYP_SetKey>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d0b2      	beq.n	8003914 <HAL_CRYP_AESCBC_Encrypt+0xb4>
 80039ae:	e7d2      	b.n	8003956 <HAL_CRYP_AESCBC_Encrypt+0xf6>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80039b0:	f8d9 1000 	ldr.w	r1, [r9]
 80039b4:	f421 3e80 	bic.w	lr, r1, #65536	@ 0x10000
 80039b8:	f02e 037e 	bic.w	r3, lr, #126	@ 0x7e
 80039bc:	4303      	orrs	r3, r0
 80039be:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 80039c2:	f8c9 2000 	str.w	r2, [r9]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80039c6:	f8d9 0000 	ldr.w	r0, [r9]
 80039ca:	69e3      	ldr	r3, [r4, #28]
 80039cc:	f420 41c0 	bic.w	r1, r0, #24576	@ 0x6000
 80039d0:	4319      	orrs	r1, r3
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80039d2:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80039d4:	f8c9 1000 	str.w	r1, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80039d8:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80039dc:	f1bc 0f00 	cmp.w	ip, #0
 80039e0:	d104      	bne.n	80039ec <HAL_CRYP_AESCBC_Encrypt+0x18c>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80039e2:	4620      	mov	r0, r4
 80039e4:	f7ff fe60 	bl	80036a8 <CRYP_SetKey>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d1b4      	bne.n	8003956 <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.pInitVect == NULL)
 80039ec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80039ee:	2800      	cmp	r0, #0
 80039f0:	d0b1      	beq.n	8003956 <HAL_CRYP_AESCBC_Encrypt+0xf6>
 80039f2:	6801      	ldr	r1, [r0, #0]
 80039f4:	ba0b      	rev	r3, r1
    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 80039f6:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
 80039fa:	6842      	ldr	r2, [r0, #4]
 80039fc:	ba11      	rev	r1, r2
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 80039fe:	f8c9 1028 	str.w	r1, [r9, #40]	@ 0x28
 8003a02:	6883      	ldr	r3, [r0, #8]
 8003a04:	ba1a      	rev	r2, r3
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 8003a06:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
 8003a0a:	68c0      	ldr	r0, [r0, #12]
 8003a0c:	ba01      	rev	r1, r0
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 8003a0e:	f8c9 1020 	str.w	r1, [r9, #32]
 8003a12:	e77f      	b.n	8003914 <HAL_CRYP_AESCBC_Encrypt+0xb4>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003a14:	4620      	mov	r0, r4
 8003a16:	9201      	str	r2, [sp, #4]
 8003a18:	f7ff fe46 	bl	80036a8 <CRYP_SetKey>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d19a      	bne.n	8003956 <HAL_CRYP_AESCBC_Encrypt+0xf6>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8003a20:	9a01      	ldr	r2, [sp, #4]
 8003a22:	e775      	b.n	8003910 <HAL_CRYP_AESCBC_Encrypt+0xb0>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003a24:	f8d9 0000 	ldr.w	r0, [r9]
 8003a28:	69e3      	ldr	r3, [r4, #28]
 8003a2a:	f420 41c0 	bic.w	r1, r0, #24576	@ 0x6000
 8003a2e:	4319      	orrs	r1, r3
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003a30:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003a32:	f8c9 1000 	str.w	r1, [r9]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003a36:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003a3a:	f1bc 0f00 	cmp.w	ip, #0
 8003a3e:	d085      	beq.n	800394c <HAL_CRYP_AESCBC_Encrypt+0xec>
    hcryp->Instance->IVR3 = 0;
 8003a40:	2000      	movs	r0, #0
 8003a42:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 8003a46:	f8c9 0028 	str.w	r0, [r9, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 8003a4a:	f8c9 0024 	str.w	r0, [r9, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 8003a4e:	f8c9 0020 	str.w	r0, [r9, #32]
 8003a52:	e75f      	b.n	8003914 <HAL_CRYP_AESCBC_Encrypt+0xb4>
 8003a54:	f3af 8000 	nop.w
	...
 8003a64:	00000020 	.word	0x00000020

08003a68 <HAL_CRYPEx_AES>:
  *                     case of key derivation only.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AES(CRYP_HandleTypeDef *hcryp, uint8_t *pInputData, uint16_t Size, uint8_t *pOutputData, uint32_t Timeout)
{
 8003a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6c:	461c      	mov	r4, r3

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003a6e:	f890 3055 	ldrb.w	r3, [r0, #85]	@ 0x55
{
 8003a72:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	f040 80c7 	bne.w	8003c0a <HAL_CRYPEx_AES+0x1a2>
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	b2d8      	uxtb	r0, r3
  {
    /* Check parameters setting */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003a80:	6935      	ldr	r5, [r6, #16]
 8003a82:	2d08      	cmp	r5, #8
 8003a84:	d063      	beq.n	8003b4e <HAL_CRYPEx_AES+0xe6>
        return  HAL_ERROR;
      }
    }
    else
    {
      if ((pInputData == NULL) || (pOutputData == NULL) || (Size == 0U))
 8003a86:	2900      	cmp	r1, #0
 8003a88:	f000 80bd 	beq.w	8003c06 <HAL_CRYPEx_AES+0x19e>
 8003a8c:	2c00      	cmp	r4, #0
 8003a8e:	f000 80ba 	beq.w	8003c06 <HAL_CRYPEx_AES+0x19e>
 8003a92:	4617      	mov	r7, r2
 8003a94:	2a00      	cmp	r2, #0
 8003a96:	f000 80b6 	beq.w	8003c06 <HAL_CRYPEx_AES+0x19e>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(hcryp);
 8003a9a:	f896 2054 	ldrb.w	r2, [r6, #84]	@ 0x54
 8003a9e:	2a01      	cmp	r2, #1
 8003aa0:	f000 80b3 	beq.w	8003c0a <HAL_CRYPEx_AES+0x1a2>
 8003aa4:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003aa8:	f101 0510 	add.w	r5, r1, #16
 8003aac:	2002      	movs	r0, #2


  for(index=0U ; (index < Ilength); index += 16U)
  {
    /* Write the Input block in the Data Input register */
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003aae:	6831      	ldr	r1, [r6, #0]
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003ab0:	f886 0055 	strb.w	r0, [r6, #85]	@ 0x55
  for(index=0U ; (index < Ilength); index += 16U)
 8003ab4:	3410      	adds	r4, #16
 8003ab6:	f04f 0900 	mov.w	r9, #0
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003aba:	f855 3c10 	ldr.w	r3, [r5, #-16]
 8003abe:	608b      	str	r3, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003ac0:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8003ac4:	608a      	str	r2, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 8003ac6:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8003aca:	6088      	str	r0, [r1, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003acc:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8003ad0:	608b      	str	r3, [r1, #8]
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef const * const hcryp, uint32_t Timeout)
{
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003ad2:	f7fe febd 	bl	8002850 <HAL_GetTick>
 8003ad6:	f1b8 3fff 	cmp.w	r8, #4294967295

  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003ada:	6831      	ldr	r1, [r6, #0]
  tickstart = HAL_GetTick();
 8003adc:	4682      	mov	sl, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003ade:	f040 809e 	bne.w	8003c1e <HAL_CRYPEx_AES+0x1b6>
 8003ae2:	6848      	ldr	r0, [r1, #4]
 8003ae4:	07c3      	lsls	r3, r0, #31
 8003ae6:	d414      	bmi.n	8003b12 <HAL_CRYPEx_AES+0xaa>
 8003ae8:	684b      	ldr	r3, [r1, #4]
 8003aea:	07db      	lsls	r3, r3, #31
 8003aec:	d411      	bmi.n	8003b12 <HAL_CRYPEx_AES+0xaa>
 8003aee:	684a      	ldr	r2, [r1, #4]
 8003af0:	07d0      	lsls	r0, r2, #31
 8003af2:	d40e      	bmi.n	8003b12 <HAL_CRYPEx_AES+0xaa>
 8003af4:	6848      	ldr	r0, [r1, #4]
 8003af6:	07c2      	lsls	r2, r0, #31
 8003af8:	d40b      	bmi.n	8003b12 <HAL_CRYPEx_AES+0xaa>
 8003afa:	684b      	ldr	r3, [r1, #4]
 8003afc:	07db      	lsls	r3, r3, #31
 8003afe:	d408      	bmi.n	8003b12 <HAL_CRYPEx_AES+0xaa>
 8003b00:	684a      	ldr	r2, [r1, #4]
 8003b02:	07d0      	lsls	r0, r2, #31
 8003b04:	d405      	bmi.n	8003b12 <HAL_CRYPEx_AES+0xaa>
 8003b06:	6848      	ldr	r0, [r1, #4]
 8003b08:	07c2      	lsls	r2, r0, #31
 8003b0a:	d402      	bmi.n	8003b12 <HAL_CRYPEx_AES+0xaa>
 8003b0c:	684b      	ldr	r3, [r1, #4]
 8003b0e:	07db      	lsls	r3, r3, #31
 8003b10:	d5e7      	bpl.n	8003ae2 <HAL_CRYPEx_AES+0x7a>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003b12:	6808      	ldr	r0, [r1, #0]
 8003b14:	f040 0280 	orr.w	r2, r0, #128	@ 0x80
 8003b18:	600a      	str	r2, [r1, #0]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8003b1a:	68cb      	ldr	r3, [r1, #12]
 8003b1c:	f844 3c10 	str.w	r3, [r4, #-16]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8003b20:	68c8      	ldr	r0, [r1, #12]
 8003b22:	f844 0c0c 	str.w	r0, [r4, #-12]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8003b26:	68ca      	ldr	r2, [r1, #12]
 8003b28:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8003b2c:	68cb      	ldr	r3, [r1, #12]
 8003b2e:	f844 3c04 	str.w	r3, [r4, #-4]
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8003b32:	f896 005c 	ldrb.w	r0, [r6, #92]	@ 0x5c
 8003b36:	2801      	cmp	r0, #1
 8003b38:	f109 0c10 	add.w	ip, r9, #16
 8003b3c:	d07d      	beq.n	8003c3a <HAL_CRYPEx_AES+0x1d2>
  for(index=0U ; (index < Ilength); index += 16U)
 8003b3e:	4567      	cmp	r7, ip
 8003b40:	f105 0510 	add.w	r5, r5, #16
 8003b44:	f104 0410 	add.w	r4, r4, #16
 8003b48:	d951      	bls.n	8003bee <HAL_CRYPEx_AES+0x186>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8003b4a:	46e1      	mov	r9, ip
 8003b4c:	e7b5      	b.n	8003aba <HAL_CRYPEx_AES+0x52>
      if (pOutputData == NULL)
 8003b4e:	2c00      	cmp	r4, #0
 8003b50:	d059      	beq.n	8003c06 <HAL_CRYPEx_AES+0x19e>
    __HAL_LOCK(hcryp);
 8003b52:	f896 2054 	ldrb.w	r2, [r6, #84]	@ 0x54
 8003b56:	2a01      	cmp	r2, #1
 8003b58:	d057      	beq.n	8003c0a <HAL_CRYPEx_AES+0x1a2>
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003b5a:	f04f 0e02 	mov.w	lr, #2
    __HAL_LOCK(hcryp);
 8003b5e:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003b62:	f886 e055 	strb.w	lr, [r6, #85]	@ 0x55
  tickstart = HAL_GetTick();
 8003b66:	f7fe fe73 	bl	8002850 <HAL_GetTick>
 8003b6a:	f1b8 3fff 	cmp.w	r8, #4294967295
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003b6e:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 8003b70:	4607      	mov	r7, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003b72:	d15e      	bne.n	8003c32 <HAL_CRYPEx_AES+0x1ca>
 8003b74:	685d      	ldr	r5, [r3, #4]
 8003b76:	07e9      	lsls	r1, r5, #31
 8003b78:	d414      	bmi.n	8003ba4 <HAL_CRYPEx_AES+0x13c>
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	07d1      	lsls	r1, r2, #31
 8003b7e:	d411      	bmi.n	8003ba4 <HAL_CRYPEx_AES+0x13c>
 8003b80:	6858      	ldr	r0, [r3, #4]
 8003b82:	07c2      	lsls	r2, r0, #31
 8003b84:	d40e      	bmi.n	8003ba4 <HAL_CRYPEx_AES+0x13c>
 8003b86:	685f      	ldr	r7, [r3, #4]
 8003b88:	07ff      	lsls	r7, r7, #31
 8003b8a:	d40b      	bmi.n	8003ba4 <HAL_CRYPEx_AES+0x13c>
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	07cd      	lsls	r5, r1, #31
 8003b90:	d408      	bmi.n	8003ba4 <HAL_CRYPEx_AES+0x13c>
 8003b92:	685d      	ldr	r5, [r3, #4]
 8003b94:	07e8      	lsls	r0, r5, #31
 8003b96:	d405      	bmi.n	8003ba4 <HAL_CRYPEx_AES+0x13c>
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	07d1      	lsls	r1, r2, #31
 8003b9c:	d402      	bmi.n	8003ba4 <HAL_CRYPEx_AES+0x13c>
 8003b9e:	6858      	ldr	r0, [r3, #4]
 8003ba0:	07c2      	lsls	r2, r0, #31
 8003ba2:	d5e7      	bpl.n	8003b74 <HAL_CRYPEx_AES+0x10c>
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003ba4:	681f      	ldr	r7, [r3, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003ba6:	68f1      	ldr	r1, [r6, #12]
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003ba8:	f047 0580 	orr.w	r5, r7, #128	@ 0x80
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003bac:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003bb0:	601d      	str	r5, [r3, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003bb2:	d110      	bne.n	8003bd6 <HAL_CRYPEx_AES+0x16e>
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8003bb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    outputaddr+=4U;
 8003bb6:	3410      	adds	r4, #16
 8003bb8:	ba10      	rev	r0, r2
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8003bba:	f844 0c10 	str.w	r0, [r4, #-16]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR6);
 8003bbe:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8003bc0:	ba39      	rev	r1, r7
 8003bc2:	f844 1c0c 	str.w	r1, [r4, #-12]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR5);
 8003bc6:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8003bc8:	ba2a      	rev	r2, r5
 8003bca:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR4);
 8003bce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003bd0:	ba07      	rev	r7, r0
 8003bd2:	f844 7c04 	str.w	r7, [r4, #-4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR3);
 8003bd6:	69d9      	ldr	r1, [r3, #28]
 8003bd8:	ba0d      	rev	r5, r1
 8003bda:	6025      	str	r5, [r4, #0]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR2);
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	ba10      	rev	r0, r2
 8003be0:	6060      	str	r0, [r4, #4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR1);
 8003be2:	695f      	ldr	r7, [r3, #20]
 8003be4:	ba39      	rev	r1, r7
 8003be6:	60a1      	str	r1, [r4, #8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR0);
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	ba1d      	rev	r5, r3
 8003bec:	60e5      	str	r5, [r4, #12]
    if (hcryp->State != HAL_CRYP_STATE_SUSPENDED)
 8003bee:	f896 4055 	ldrb.w	r4, [r6, #85]	@ 0x55
 8003bf2:	2c05      	cmp	r4, #5
      hcryp->State = HAL_CRYP_STATE_READY;
 8003bf4:	bf18      	it	ne
 8003bf6:	2401      	movne	r4, #1
    __HAL_UNLOCK(hcryp);
 8003bf8:	f04f 0000 	mov.w	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 8003bfc:	bf18      	it	ne
 8003bfe:	f886 4055 	strbne.w	r4, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 8003c02:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
}
 8003c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hcryp);
 8003c0a:	2002      	movs	r0, #2
}
 8003c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((HAL_GetTick() - tickstart ) > Timeout)
 8003c10:	f7fe fe1e 	bl	8002850 <HAL_GetTick>
 8003c14:	eba0 010a 	sub.w	r1, r0, sl
 8003c18:	4588      	cmp	r8, r1
 8003c1a:	d31e      	bcc.n	8003c5a <HAL_CRYPEx_AES+0x1f2>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003c1c:	6831      	ldr	r1, [r6, #0]
 8003c1e:	684a      	ldr	r2, [r1, #4]
 8003c20:	07d0      	lsls	r0, r2, #31
 8003c22:	d5f5      	bpl.n	8003c10 <HAL_CRYPEx_AES+0x1a8>
 8003c24:	e775      	b.n	8003b12 <HAL_CRYPEx_AES+0xaa>
      if((HAL_GetTick() - tickstart ) > Timeout)
 8003c26:	f7fe fe13 	bl	8002850 <HAL_GetTick>
 8003c2a:	1bc3      	subs	r3, r0, r7
 8003c2c:	4598      	cmp	r8, r3
 8003c2e:	d314      	bcc.n	8003c5a <HAL_CRYPEx_AES+0x1f2>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003c30:	6833      	ldr	r3, [r6, #0]
 8003c32:	6858      	ldr	r0, [r3, #4]
 8003c34:	07c2      	lsls	r2, r0, #31
 8003c36:	d5f6      	bpl.n	8003c26 <HAL_CRYPEx_AES+0x1be>
 8003c38:	e7b4      	b.n	8003ba4 <HAL_CRYPEx_AES+0x13c>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8003c3a:	4567      	cmp	r7, ip
 8003c3c:	d9d7      	bls.n	8003bee <HAL_CRYPEx_AES+0x186>
      hcryp->pCrypOutBuffPtr =  (uint8_t *)outputaddr;
 8003c3e:	63f4      	str	r4, [r6, #60]	@ 0x3c
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8003c40:	f1a7 0410 	sub.w	r4, r7, #16
 8003c44:	eba4 0709 	sub.w	r7, r4, r9
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8003c48:	2105      	movs	r1, #5
      hcryp->pCrypInBuffPtr  =  (uint8_t *)inputaddr;
 8003c4a:	63b5      	str	r5, [r6, #56]	@ 0x38
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003c4c:	2500      	movs	r5, #0
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8003c4e:	6437      	str	r7, [r6, #64]	@ 0x40
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8003c50:	f886 1055 	strb.w	r1, [r6, #85]	@ 0x55
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003c54:	f886 505c 	strb.w	r5, [r6, #92]	@ 0x5c
      return HAL_OK;
 8003c58:	e7c9      	b.n	8003bee <HAL_CRYPEx_AES+0x186>
    hcryp->State = HAL_CRYP_STATE_READY;
 8003c5a:	2401      	movs	r4, #1
    __HAL_UNLOCK(hcryp);
 8003c5c:	2100      	movs	r1, #0
    hcryp->State = HAL_CRYP_STATE_READY;
 8003c5e:	f886 4055 	strb.w	r4, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 8003c62:	f886 1054 	strb.w	r1, [r6, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003c66:	2003      	movs	r0, #3
}
 8003c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003c6c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d051      	beq.n	8003d14 <HAL_DMA_Init+0xa8>
{
 8003c70:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c72:	4a2f      	ldr	r2, [pc, #188]	@ (8003d30 <HAL_DMA_Init+0xc4>)
 8003c74:	6804      	ldr	r4, [r0, #0]
 8003c76:	4294      	cmp	r4, r2
 8003c78:	4603      	mov	r3, r0
 8003c7a:	d942      	bls.n	8003d02 <HAL_DMA_Init+0x96>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c7c:	492d      	ldr	r1, [pc, #180]	@ (8003d34 <HAL_DMA_Init+0xc8>)
 8003c7e:	482e      	ldr	r0, [pc, #184]	@ (8003d38 <HAL_DMA_Init+0xcc>)
 8003c80:	4421      	add	r1, r4
 8003c82:	fba0 2501 	umull	r2, r5, r0, r1
 8003c86:	092e      	lsrs	r6, r5, #4
    hdma->DmaBaseAddress = DMA2;
 8003c88:	4d2c      	ldr	r5, [pc, #176]	@ (8003d3c <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c8a:	00b1      	lsls	r1, r6, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c8c:	2702      	movs	r7, #2
 8003c8e:	f883 7025 	strb.w	r7, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c92:	6822      	ldr	r2, [r4, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c94:	691f      	ldr	r7, [r3, #16]
 8003c96:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c98:	f422 4cff 	bic.w	ip, r2, #32640	@ 0x7f80
  tmp |=  hdma->Init.Direction        |
 8003c9c:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
 8003ca0:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca2:	433a      	orrs	r2, r7
 8003ca4:	695f      	ldr	r7, [r3, #20]
 8003ca6:	6459      	str	r1, [r3, #68]	@ 0x44
 8003ca8:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003caa:	699f      	ldr	r7, [r3, #24]
 8003cac:	433a      	orrs	r2, r7
 8003cae:	69df      	ldr	r7, [r3, #28]
 8003cb0:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb2:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cb4:	f02c 0070 	bic.w	r0, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb8:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 8003cba:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003cbc:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 8003cc0:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003cc2:	d015      	beq.n	8003cf0 <HAL_DMA_Init+0x84>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003cc4:	4f1e      	ldr	r7, [pc, #120]	@ (8003d40 <HAL_DMA_Init+0xd4>)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003cc6:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cc8:	f001 041c 	and.w	r4, r1, #28
 8003ccc:	210f      	movs	r1, #15
 8003cce:	40a1      	lsls	r1, r4
    if (DMA1 == hdma->DmaBaseAddress)
 8003cd0:	42bd      	cmp	r5, r7
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cd2:	ea6f 0601 	mvn.w	r6, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003cd6:	fa00 f004 	lsl.w	r0, r0, r4
    if (DMA1 == hdma->DmaBaseAddress)
 8003cda:	d01d      	beq.n	8003d18 <HAL_DMA_Init+0xac>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cdc:	f8d7 54a8 	ldr.w	r5, [r7, #1192]	@ 0x4a8
 8003ce0:	402e      	ands	r6, r5
 8003ce2:	f8c7 64a8 	str.w	r6, [r7, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ce6:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	@ 0x4a8
 8003cea:	4302      	orrs	r2, r0
 8003cec:	f8c7 24a8 	str.w	r2, [r7, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf0:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	2601      	movs	r6, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf4:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cf6:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8003cfa:	f883 6025 	strb.w	r6, [r3, #37]	@ 0x25

  return HAL_OK;
}
 8003cfe:	bcf0      	pop	{r4, r5, r6, r7}
 8003d00:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d02:	4f10      	ldr	r7, [pc, #64]	@ (8003d44 <HAL_DMA_Init+0xd8>)
 8003d04:	4a0c      	ldr	r2, [pc, #48]	@ (8003d38 <HAL_DMA_Init+0xcc>)
    hdma->DmaBaseAddress = DMA1;
 8003d06:	4d0e      	ldr	r5, [pc, #56]	@ (8003d40 <HAL_DMA_Init+0xd4>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d08:	4427      	add	r7, r4
 8003d0a:	fba2 2007 	umull	r2, r0, r2, r7
 8003d0e:	0906      	lsrs	r6, r0, #4
 8003d10:	00b1      	lsls	r1, r6, #2
    hdma->DmaBaseAddress = DMA1;
 8003d12:	e7bb      	b.n	8003c8c <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8003d14:	2001      	movs	r0, #1
}
 8003d16:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d18:	f8d5 40a8 	ldr.w	r4, [r5, #168]	@ 0xa8
 8003d1c:	4026      	ands	r6, r4
 8003d1e:	f8c5 60a8 	str.w	r6, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d22:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8003d26:	4301      	orrs	r1, r0
 8003d28:	f8c5 10a8 	str.w	r1, [r5, #168]	@ 0xa8
 8003d2c:	e7e0      	b.n	8003cf0 <HAL_DMA_Init+0x84>
 8003d2e:	bf00      	nop
 8003d30:	40020407 	.word	0x40020407
 8003d34:	bffdfbf8 	.word	0xbffdfbf8
 8003d38:	cccccccd 	.word	0xcccccccd
 8003d3c:	40020400 	.word	0x40020400
 8003d40:	40020000 	.word	0x40020000
 8003d44:	bffdfff8 	.word	0xbffdfff8

08003d48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d48:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d4a:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8003d4e:	2c01      	cmp	r4, #1
 8003d50:	d00b      	beq.n	8003d6a <HAL_DMA_Start_IT+0x22>

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d52:	f890 6025 	ldrb.w	r6, [r0, #37]	@ 0x25
  __HAL_LOCK(hdma);
 8003d56:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8003d58:	2e01      	cmp	r6, #1
  __HAL_LOCK(hdma);
 8003d5a:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8003d5e:	fa5f fc86 	uxtb.w	ip, r6
 8003d62:	d005      	beq.n	8003d70 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d64:	2300      	movs	r3, #0
 8003d66:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8003d6a:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8003d6c:	bc70      	pop	{r4, r5, r6}
 8003d6e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d70:	2502      	movs	r5, #2
 8003d72:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d76:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 8003d78:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	63c6      	str	r6, [r0, #60]	@ 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d7e:	f005 061c 	and.w	r6, r5, #28
 8003d82:	fa0c f506 	lsl.w	r5, ip, r6
    __HAL_DMA_DISABLE(hdma);
 8003d86:	6826      	ldr	r6, [r4, #0]
 8003d88:	f026 0601 	bic.w	r6, r6, #1
 8003d8c:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d8e:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8003d90:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d92:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d94:	6883      	ldr	r3, [r0, #8]
    if (NULL != hdma->XferHalfCpltCallback)
 8003d96:	6b00      	ldr	r0, [r0, #48]	@ 0x30
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d98:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d9a:	bf0b      	itete	eq
 8003d9c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003d9e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003da0:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003da2:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8003da4:	b150      	cbz	r0, 8003dbc <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	f043 000e 	orr.w	r0, r3, #14
 8003dac:	6020      	str	r0, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003dae:	6821      	ldr	r1, [r4, #0]
 8003db0:	f041 0201 	orr.w	r2, r1, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003db6:	6022      	str	r2, [r4, #0]
}
 8003db8:	bc70      	pop	{r4, r5, r6}
 8003dba:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dbc:	6821      	ldr	r1, [r4, #0]
 8003dbe:	f021 0204 	bic.w	r2, r1, #4
 8003dc2:	6022      	str	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003dc4:	6825      	ldr	r5, [r4, #0]
 8003dc6:	f045 060a 	orr.w	r6, r5, #10
 8003dca:	6026      	str	r6, [r4, #0]
 8003dcc:	e7ef      	b.n	8003dae <HAL_DMA_Start_IT+0x66>
 8003dce:	bf00      	nop

08003dd0 <HAL_DMA_IRQHandler>:
{
 8003dd0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003dd2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dd4:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003dd6:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dd8:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003dda:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ddc:	f003 031c 	and.w	r3, r3, #28
 8003de0:	2204      	movs	r2, #4
 8003de2:	409a      	lsls	r2, r3
 8003de4:	420a      	tst	r2, r1
 8003de6:	d00e      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x36>
 8003de8:	f014 0f04 	tst.w	r4, #4
 8003dec:	d00b      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dee:	6829      	ldr	r1, [r5, #0]
 8003df0:	068b      	lsls	r3, r1, #26
 8003df2:	d403      	bmi.n	8003dfc <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	f023 0404 	bic.w	r4, r3, #4
 8003dfa:	602c      	str	r4, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8003dfc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003dfe:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003e00:	b1cb      	cbz	r3, 8003e36 <HAL_DMA_IRQHandler+0x66>
}
 8003e02:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003e04:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e06:	2202      	movs	r2, #2
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	420a      	tst	r2, r1
 8003e0c:	d015      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x6a>
 8003e0e:	f014 0f02 	tst.w	r4, #2
 8003e12:	d012      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e14:	682c      	ldr	r4, [r5, #0]
 8003e16:	06a1      	lsls	r1, r4, #26
 8003e18:	d406      	bmi.n	8003e28 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e1a:	682b      	ldr	r3, [r5, #0]
 8003e1c:	f023 010a 	bic.w	r1, r3, #10
 8003e20:	6029      	str	r1, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003e22:	2501      	movs	r5, #1
 8003e24:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8003e28:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e2a:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8003e2c:	2400      	movs	r4, #0
 8003e2e:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e5      	bne.n	8003e02 <HAL_DMA_IRQHandler+0x32>
}
 8003e36:	bc70      	pop	{r4, r5, r6}
 8003e38:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	420a      	tst	r2, r1
 8003e40:	d0f9      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x66>
 8003e42:	0722      	lsls	r2, r4, #28
 8003e44:	d5f7      	bpl.n	8003e36 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e46:	6829      	ldr	r1, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8003e48:	6b42      	ldr	r2, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e4a:	f021 040e 	bic.w	r4, r1, #14
 8003e4e:	602c      	str	r4, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e50:	2501      	movs	r5, #1
 8003e52:	fa05 f303 	lsl.w	r3, r5, r3
    __HAL_UNLOCK(hdma);
 8003e56:	2100      	movs	r1, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e58:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e5a:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003e5c:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8003e60:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8003e64:	2a00      	cmp	r2, #0
 8003e66:	d0e6      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x66>
}
 8003e68:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003e6a:	4710      	bx	r2

08003e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e70:	680c      	ldr	r4, [r1, #0]
{
 8003e72:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e74:	2c00      	cmp	r4, #0
 8003e76:	f000 8092 	beq.w	8003f9e <HAL_GPIO_Init+0x132>
  uint32_t position = 0x00u;
 8003e7a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e7c:	f04f 0b01 	mov.w	fp, #1
 8003e80:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8003e84:	ea1e 0a04 	ands.w	sl, lr, r4
 8003e88:	f000 8084 	beq.w	8003f94 <HAL_GPIO_Init+0x128>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e8c:	684d      	ldr	r5, [r1, #4]
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e8e:	2603      	movs	r6, #3
 8003e90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e94:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e98:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e9c:	1e56      	subs	r6, r2, #1
 8003e9e:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ea0:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ea4:	d97e      	bls.n	8003fa4 <HAL_GPIO_Init+0x138>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ea6:	2a03      	cmp	r2, #3
 8003ea8:	f040 80b9 	bne.w	800401e <HAL_GPIO_Init+0x1b2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eac:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8003eb0:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003eb4:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eb8:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eba:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003ebe:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ec0:	d068      	beq.n	8003f94 <HAL_GPIO_Init+0x128>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec2:	4e6f      	ldr	r6, [pc, #444]	@ (8004080 <HAL_GPIO_Init+0x214>)
 8003ec4:	6e32      	ldr	r2, [r6, #96]	@ 0x60
 8003ec6:	f042 0701 	orr.w	r7, r2, #1
 8003eca:	6637      	str	r7, [r6, #96]	@ 0x60
 8003ecc:	6e36      	ldr	r6, [r6, #96]	@ 0x60
 8003ece:	f023 0803 	bic.w	r8, r3, #3
 8003ed2:	f006 0201 	and.w	r2, r6, #1
 8003ed6:	9203      	str	r2, [sp, #12]
 8003ed8:	f108 4980 	add.w	r9, r8, #1073741824	@ 0x40000000
 8003edc:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ede:	f509 3280 	add.w	r2, r9, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ee2:	f003 0703 	and.w	r7, r3, #3
 8003ee6:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8003eea:	f04f 0e0f 	mov.w	lr, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8003eee:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ef0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ef4:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ef8:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003efc:	d026      	beq.n	8003f4c <HAL_GPIO_Init+0xe0>
 8003efe:	4e61      	ldr	r6, [pc, #388]	@ (8004084 <HAL_GPIO_Init+0x218>)
 8003f00:	42b0      	cmp	r0, r6
 8003f02:	f000 809e 	beq.w	8004042 <HAL_GPIO_Init+0x1d6>
 8003f06:	4e60      	ldr	r6, [pc, #384]	@ (8004088 <HAL_GPIO_Init+0x21c>)
 8003f08:	42b0      	cmp	r0, r6
 8003f0a:	f000 80a0 	beq.w	800404e <HAL_GPIO_Init+0x1e2>
 8003f0e:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8004090 <HAL_GPIO_Init+0x224>
 8003f12:	4540      	cmp	r0, r8
 8003f14:	f000 808f 	beq.w	8004036 <HAL_GPIO_Init+0x1ca>
 8003f18:	f8df 9178 	ldr.w	r9, [pc, #376]	@ 8004094 <HAL_GPIO_Init+0x228>
 8003f1c:	4548      	cmp	r0, r9
 8003f1e:	f000 80a2 	beq.w	8004066 <HAL_GPIO_Init+0x1fa>
 8003f22:	f8df e174 	ldr.w	lr, [pc, #372]	@ 8004098 <HAL_GPIO_Init+0x22c>
 8003f26:	4570      	cmp	r0, lr
 8003f28:	f000 80a3 	beq.w	8004072 <HAL_GPIO_Init+0x206>
 8003f2c:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 800409c <HAL_GPIO_Init+0x230>
 8003f30:	4540      	cmp	r0, r8
 8003f32:	f000 8092 	beq.w	800405a <HAL_GPIO_Init+0x1ee>
 8003f36:	f8df e168 	ldr.w	lr, [pc, #360]	@ 80040a0 <HAL_GPIO_Init+0x234>
 8003f3a:	4570      	cmp	r0, lr
 8003f3c:	bf0c      	ite	eq
 8003f3e:	f04f 0e07 	moveq.w	lr, #7
 8003f42:	f04f 0e08 	movne.w	lr, #8
 8003f46:	fa0e f60c 	lsl.w	r6, lr, ip
 8003f4a:	4337      	orrs	r7, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f4c:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f4e:	4a4f      	ldr	r2, [pc, #316]	@ (800408c <HAL_GPIO_Init+0x220>)
 8003f50:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f52:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8003f54:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003f58:	4e4c      	ldr	r6, [pc, #304]	@ (800408c <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 8003f5a:	bf54      	ite	pl
 8003f5c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003f5e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8003f62:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8003f64:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f66:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003f68:	4e48      	ldr	r6, [pc, #288]	@ (800408c <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 8003f6a:	bf54      	ite	pl
 8003f6c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003f6e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8003f72:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f74:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f76:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003f78:	4e44      	ldr	r6, [pc, #272]	@ (800408c <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 8003f7a:	bf54      	ite	pl
 8003f7c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003f7e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8003f82:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 8003f84:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f86:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8003f88:	4d40      	ldr	r5, [pc, #256]	@ (800408c <HAL_GPIO_Init+0x220>)
        temp &= ~(iocurrent);
 8003f8a:	bf54      	ite	pl
 8003f8c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003f8e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8003f92:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8003f94:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f96:	fa34 f203 	lsrs.w	r2, r4, r3
 8003f9a:	f47f af71 	bne.w	8003e80 <HAL_GPIO_Init+0x14>
  }
}
 8003f9e:	b005      	add	sp, #20
 8003fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003fa4:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fa8:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003faa:	ea08 0907 	and.w	r9, r8, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fae:	fa06 f60c 	lsl.w	r6, r6, ip
 8003fb2:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->OSPEEDR = temp;
 8003fb6:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8003fba:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fbe:	ea29 060e 	bic.w	r6, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc2:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8003fc6:	fa0e f803 	lsl.w	r8, lr, r3
 8003fca:	ea48 0906 	orr.w	r9, r8, r6
        GPIOx->OTYPER = temp;
 8003fce:	f8c0 9004 	str.w	r9, [r0, #4]
        temp = GPIOx->PUPDR;
 8003fd2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fd6:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fd8:	ea0e 0807 	and.w	r8, lr, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fdc:	fa06 f60c 	lsl.w	r6, r6, ip
 8003fe0:	ea46 0e08 	orr.w	lr, r6, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fe4:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003fe6:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fea:	f47f af5f 	bne.w	8003eac <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 8003fee:	08de      	lsrs	r6, r3, #3
 8003ff0:	eb00 0886 	add.w	r8, r0, r6, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ff4:	f003 0607 	and.w	r6, r3, #7
 8003ff8:	ea4f 0e86 	mov.w	lr, r6, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ffc:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8003ffe:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004002:	fa06 f60e 	lsl.w	r6, r6, lr
 8004006:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004008:	260f      	movs	r6, #15
 800400a:	fa06 f60e 	lsl.w	r6, r6, lr
 800400e:	ea29 0e06 	bic.w	lr, r9, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004012:	9e01      	ldr	r6, [sp, #4]
 8004014:	ea46 0e0e 	orr.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004018:	f8c8 e020 	str.w	lr, [r8, #32]
 800401c:	e746      	b.n	8003eac <HAL_GPIO_Init+0x40>
        temp = GPIOx->PUPDR;
 800401e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004022:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004024:	ea08 0907 	and.w	r9, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004028:	fa06 f60c 	lsl.w	r6, r6, ip
 800402c:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->PUPDR = temp;
 8004030:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004034:	e73a      	b.n	8003eac <HAL_GPIO_Init+0x40>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004036:	f04f 0e03 	mov.w	lr, #3
 800403a:	fa0e f60c 	lsl.w	r6, lr, ip
 800403e:	4337      	orrs	r7, r6
 8004040:	e784      	b.n	8003f4c <HAL_GPIO_Init+0xe0>
 8004042:	f04f 0e01 	mov.w	lr, #1
 8004046:	fa0e f60c 	lsl.w	r6, lr, ip
 800404a:	4337      	orrs	r7, r6
 800404c:	e77e      	b.n	8003f4c <HAL_GPIO_Init+0xe0>
 800404e:	f04f 0e02 	mov.w	lr, #2
 8004052:	fa0e f60c 	lsl.w	r6, lr, ip
 8004056:	4337      	orrs	r7, r6
 8004058:	e778      	b.n	8003f4c <HAL_GPIO_Init+0xe0>
 800405a:	f04f 0e06 	mov.w	lr, #6
 800405e:	fa0e f60c 	lsl.w	r6, lr, ip
 8004062:	4337      	orrs	r7, r6
 8004064:	e772      	b.n	8003f4c <HAL_GPIO_Init+0xe0>
 8004066:	f04f 0e04 	mov.w	lr, #4
 800406a:	fa0e f60c 	lsl.w	r6, lr, ip
 800406e:	4337      	orrs	r7, r6
 8004070:	e76c      	b.n	8003f4c <HAL_GPIO_Init+0xe0>
 8004072:	f04f 0e05 	mov.w	lr, #5
 8004076:	fa0e f60c 	lsl.w	r6, lr, ip
 800407a:	4337      	orrs	r7, r6
 800407c:	e766      	b.n	8003f4c <HAL_GPIO_Init+0xe0>
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	48000400 	.word	0x48000400
 8004088:	48000800 	.word	0x48000800
 800408c:	40010400 	.word	0x40010400
 8004090:	48000c00 	.word	0x48000c00
 8004094:	48001000 	.word	0x48001000
 8004098:	48001400 	.word	0x48001400
 800409c:	48001800 	.word	0x48001800
 80040a0:	48001c00 	.word	0x48001c00

080040a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040a4:	b10a      	cbz	r2, 80040aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040a6:	6181      	str	r1, [r0, #24]
 80040a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040aa:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop

080040b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040b0:	4a04      	ldr	r2, [pc, #16]	@ (80040c4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80040b2:	6951      	ldr	r1, [r2, #20]
 80040b4:	4201      	tst	r1, r0
 80040b6:	d100      	bne.n	80040ba <HAL_GPIO_EXTI_IRQHandler+0xa>
 80040b8:	4770      	bx	lr
{
 80040ba:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040bc:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040be:	f7fc fd77 	bl	8000bb0 <HAL_GPIO_EXTI_Callback>
  }
}
 80040c2:	bd08      	pop	{r3, pc}
 80040c4:	40010400 	.word	0x40010400

080040c8 <HAL_PWR_EnterSLEEPMode>:

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80040c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004104 <HAL_PWR_EnterSLEEPMode+0x3c>)
{
 80040ca:	b510      	push	{r4, lr}
 80040cc:	460c      	mov	r4, r1
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80040ce:	6959      	ldr	r1, [r3, #20]
  if (Regulator == PWR_MAINREGULATOR_ON)
 80040d0:	b960      	cbnz	r0, 80040ec <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80040d2:	058a      	lsls	r2, r1, #22
 80040d4:	d411      	bmi.n	80040fa <HAL_PWR_EnterSLEEPMode+0x32>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004108 <HAL_PWR_EnterSLEEPMode+0x40>)
 80040d8:	6910      	ldr	r0, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80040da:	2c01      	cmp	r4, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040dc:	f020 0304 	bic.w	r3, r0, #4
 80040e0:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80040e2:	d008      	beq.n	80040f6 <HAL_PWR_EnterSLEEPMode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80040e4:	bf40      	sev
    __WFE();
 80040e6:	bf20      	wfe
    __WFE();
 80040e8:	bf20      	wfe
  }

}
 80040ea:	bd10      	pop	{r4, pc}
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80040ec:	058b      	lsls	r3, r1, #22
 80040ee:	d4f2      	bmi.n	80040d6 <HAL_PWR_EnterSLEEPMode+0xe>
      HAL_PWREx_EnableLowPowerRunMode();
 80040f0:	f000 f89e 	bl	8004230 <HAL_PWREx_EnableLowPowerRunMode>
 80040f4:	e7ef      	b.n	80040d6 <HAL_PWR_EnterSLEEPMode+0xe>
    __WFI();
 80040f6:	bf30      	wfi
}
 80040f8:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80040fa:	f000 f8a1 	bl	8004240 <HAL_PWREx_DisableLowPowerRunMode>
 80040fe:	2800      	cmp	r0, #0
 8004100:	d0e9      	beq.n	80040d6 <HAL_PWR_EnterSLEEPMode+0xe>
}
 8004102:	bd10      	pop	{r4, pc}
 8004104:	40007000 	.word	0x40007000
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800410c:	4b02      	ldr	r3, [pc, #8]	@ (8004118 <HAL_PWREx_GetVoltageRange+0xc>)
 800410e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8004110:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40007000 	.word	0x40007000

0800411c <HAL_PWREx_ControlVoltageScaling>:
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800411c:	4a3d      	ldr	r2, [pc, #244]	@ (8004214 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800411e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004120:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004124:	f403 61c0 	and.w	r1, r3, #1536	@ 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004128:	d00a      	beq.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800412a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800412e:	d005      	beq.n	800413c <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004130:	6810      	ldr	r0, [r2, #0]
 8004132:	f420 6cc0 	bic.w	ip, r0, #1536	@ 0x600
 8004136:	f44c 6380 	orr.w	r3, ip, #1024	@ 0x400
 800413a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800413c:	2000      	movs	r0, #0
 800413e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004140:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004144:	d0fa      	beq.n	800413c <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004146:	6810      	ldr	r0, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004148:	4933      	ldr	r1, [pc, #204]	@ (8004218 <HAL_PWREx_ControlVoltageScaling+0xfc>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800414a:	f420 6cc0 	bic.w	ip, r0, #1536	@ 0x600
 800414e:	f44c 7300 	orr.w	r3, ip, #512	@ 0x200
 8004152:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004154:	680b      	ldr	r3, [r1, #0]
 8004156:	4931      	ldr	r1, [pc, #196]	@ (800421c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004158:	2032      	movs	r0, #50	@ 0x32
 800415a:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800415e:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004160:	fba1 1303 	umull	r1, r3, r1, r3
 8004164:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004166:	0541      	lsls	r1, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004168:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800416c:	d54c      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 800416e:	f013 0107 	ands.w	r1, r3, #7
 8004172:	d02f      	beq.n	80041d4 <HAL_PWREx_ControlVoltageScaling+0xb8>
 8004174:	2901      	cmp	r1, #1
 8004176:	d027      	beq.n	80041c8 <HAL_PWREx_ControlVoltageScaling+0xac>
 8004178:	2902      	cmp	r1, #2
 800417a:	d020      	beq.n	80041be <HAL_PWREx_ControlVoltageScaling+0xa2>
 800417c:	2903      	cmp	r1, #3
 800417e:	d019      	beq.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004180:	2904      	cmp	r1, #4
 8004182:	d012      	beq.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x8e>
 8004184:	2905      	cmp	r1, #5
 8004186:	d00b      	beq.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x84>
 8004188:	2906      	cmp	r1, #6
 800418a:	d004      	beq.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x7a>
 800418c:	6950      	ldr	r0, [r2, #20]
 800418e:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 8004190:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004194:	d538      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004196:	6951      	ldr	r1, [r2, #20]
 8004198:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 800419a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800419e:	d533      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041a0:	6950      	ldr	r0, [r2, #20]
 80041a2:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 80041a4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a8:	d52e      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041aa:	6951      	ldr	r1, [r2, #20]
 80041ac:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 80041ae:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041b2:	d529      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041b4:	6950      	ldr	r0, [r2, #20]
 80041b6:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 80041b8:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041bc:	d524      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041be:	6951      	ldr	r1, [r2, #20]
 80041c0:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 80041c2:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041c6:	d51f      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041c8:	6950      	ldr	r0, [r2, #20]
 80041ca:	0541      	lsls	r1, r0, #21
        wait_loop_index--;
 80041cc:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041d0:	d51a      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041d2:	b1cb      	cbz	r3, 8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041d4:	6951      	ldr	r1, [r2, #20]
 80041d6:	0548      	lsls	r0, r1, #21
        wait_loop_index--;
 80041d8:	f1a3 0308 	sub.w	r3, r3, #8
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041dc:	d514      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041de:	6950      	ldr	r0, [r2, #20]
 80041e0:	0541      	lsls	r1, r0, #21
 80041e2:	d511      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041e4:	6951      	ldr	r1, [r2, #20]
 80041e6:	0548      	lsls	r0, r1, #21
 80041e8:	d50e      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041ea:	6950      	ldr	r0, [r2, #20]
 80041ec:	0541      	lsls	r1, r0, #21
 80041ee:	d50b      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041f0:	6951      	ldr	r1, [r2, #20]
 80041f2:	0548      	lsls	r0, r1, #21
 80041f4:	d508      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041f6:	6950      	ldr	r0, [r2, #20]
 80041f8:	0541      	lsls	r1, r0, #21
 80041fa:	d505      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 80041fc:	6951      	ldr	r1, [r2, #20]
 80041fe:	0548      	lsls	r0, r1, #21
 8004200:	d502      	bpl.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xec>
 8004202:	6950      	ldr	r0, [r2, #20]
 8004204:	0541      	lsls	r1, r0, #21
 8004206:	d4e4      	bmi.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0xb6>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004208:	4a02      	ldr	r2, [pc, #8]	@ (8004214 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800420a:	6953      	ldr	r3, [r2, #20]
 800420c:	0558      	lsls	r0, r3, #21
 800420e:	d595      	bpl.n	800413c <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8004210:	2003      	movs	r0, #3
}
 8004212:	4770      	bx	lr
 8004214:	40007000 	.word	0x40007000
 8004218:	20000400 	.word	0x20000400
 800421c:	431bde83 	.word	0x431bde83

08004220 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004220:	4a02      	ldr	r2, [pc, #8]	@ (800422c <HAL_PWREx_EnableVddIO2+0xc>)
 8004222:	6853      	ldr	r3, [r2, #4]
 8004224:	f443 7000 	orr.w	r0, r3, #512	@ 0x200
 8004228:	6050      	str	r0, [r2, #4]
}
 800422a:	4770      	bx	lr
 800422c:	40007000 	.word	0x40007000

08004230 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004230:	4a02      	ldr	r2, [pc, #8]	@ (800423c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8004232:	6813      	ldr	r3, [r2, #0]
 8004234:	f443 4080 	orr.w	r0, r3, #16384	@ 0x4000
 8004238:	6010      	str	r0, [r2, #0]
}
 800423a:	4770      	bx	lr
 800423c:	40007000 	.word	0x40007000

08004240 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004240:	4b34      	ldr	r3, [pc, #208]	@ (8004314 <HAL_PWREx_DisableLowPowerRunMode+0xd4>)

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004242:	4935      	ldr	r1, [pc, #212]	@ (8004318 <HAL_PWREx_DisableLowPowerRunMode+0xd8>)
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004244:	681a      	ldr	r2, [r3, #0]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004246:	4835      	ldr	r0, [pc, #212]	@ (800431c <HAL_PWREx_DisableLowPowerRunMode+0xdc>)
{
 8004248:	b410      	push	{r4}
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800424a:	f422 4480 	bic.w	r4, r2, #16384	@ 0x4000
 800424e:	601c      	str	r4, [r3, #0]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004250:	6809      	ldr	r1, [r1, #0]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004252:	695c      	ldr	r4, [r3, #20]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004254:	2232      	movs	r2, #50	@ 0x32
 8004256:	fb02 f101 	mul.w	r1, r2, r1
 800425a:	fba0 0101 	umull	r0, r1, r0, r1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800425e:	05a0      	lsls	r0, r4, #22
 8004260:	d549      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004262:	0c8c      	lsrs	r4, r1, #18
 8004264:	1c62      	adds	r2, r4, #1
 8004266:	f012 0007 	ands.w	r0, r2, #7
 800426a:	d02a      	beq.n	80042c2 <HAL_PWREx_DisableLowPowerRunMode+0x82>
 800426c:	2801      	cmp	r0, #1
 800426e:	d022      	beq.n	80042b6 <HAL_PWREx_DisableLowPowerRunMode+0x76>
 8004270:	2802      	cmp	r0, #2
 8004272:	d01b      	beq.n	80042ac <HAL_PWREx_DisableLowPowerRunMode+0x6c>
 8004274:	2803      	cmp	r0, #3
 8004276:	d014      	beq.n	80042a2 <HAL_PWREx_DisableLowPowerRunMode+0x62>
 8004278:	2804      	cmp	r0, #4
 800427a:	d00d      	beq.n	8004298 <HAL_PWREx_DisableLowPowerRunMode+0x58>
 800427c:	2805      	cmp	r0, #5
 800427e:	d006      	beq.n	800428e <HAL_PWREx_DisableLowPowerRunMode+0x4e>
 8004280:	2806      	cmp	r0, #6
 8004282:	d142      	bne.n	800430a <HAL_PWREx_DisableLowPowerRunMode+0xca>
 8004284:	6959      	ldr	r1, [r3, #20]
 8004286:	058c      	lsls	r4, r1, #22
  {
    wait_loop_index--;
 8004288:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800428c:	d533      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 800428e:	695c      	ldr	r4, [r3, #20]
 8004290:	05a1      	lsls	r1, r4, #22
    wait_loop_index--;
 8004292:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004296:	d52e      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004298:	6959      	ldr	r1, [r3, #20]
 800429a:	058c      	lsls	r4, r1, #22
    wait_loop_index--;
 800429c:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80042a0:	d529      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042a2:	695c      	ldr	r4, [r3, #20]
 80042a4:	05a1      	lsls	r1, r4, #22
    wait_loop_index--;
 80042a6:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80042aa:	d524      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042ac:	6959      	ldr	r1, [r3, #20]
 80042ae:	058c      	lsls	r4, r1, #22
    wait_loop_index--;
 80042b0:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80042b4:	d51f      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042b6:	695c      	ldr	r4, [r3, #20]
 80042b8:	05a1      	lsls	r1, r4, #22
    wait_loop_index--;
 80042ba:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80042be:	d51a      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042c0:	b1ca      	cbz	r2, 80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042c2:	6959      	ldr	r1, [r3, #20]
 80042c4:	0589      	lsls	r1, r1, #22
    wait_loop_index--;
 80042c6:	f1a2 0208 	sub.w	r2, r2, #8
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80042ca:	d514      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042cc:	695c      	ldr	r4, [r3, #20]
 80042ce:	05a4      	lsls	r4, r4, #22
 80042d0:	d511      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042d2:	6959      	ldr	r1, [r3, #20]
 80042d4:	058c      	lsls	r4, r1, #22
 80042d6:	d50e      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042d8:	695c      	ldr	r4, [r3, #20]
 80042da:	05a1      	lsls	r1, r4, #22
 80042dc:	d50b      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042de:	6959      	ldr	r1, [r3, #20]
 80042e0:	058c      	lsls	r4, r1, #22
 80042e2:	d508      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042e4:	695c      	ldr	r4, [r3, #20]
 80042e6:	05a1      	lsls	r1, r4, #22
 80042e8:	d505      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042ea:	6959      	ldr	r1, [r3, #20]
 80042ec:	058c      	lsls	r4, r1, #22
 80042ee:	d502      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 80042f0:	695c      	ldr	r4, [r3, #20]
 80042f2:	05a1      	lsls	r1, r4, #22
 80042f4:	d4e4      	bmi.n	80042c0 <HAL_PWREx_DisableLowPowerRunMode+0x80>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80042f6:	4b07      	ldr	r3, [pc, #28]	@ (8004314 <HAL_PWREx_DisableLowPowerRunMode+0xd4>)
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80042f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80042fc:	695a      	ldr	r2, [r3, #20]
  return HAL_OK;
 80042fe:	f412 7f00 	tst.w	r2, #512	@ 0x200
}
 8004302:	bf14      	ite	ne
 8004304:	2003      	movne	r0, #3
 8004306:	2000      	moveq	r0, #0
 8004308:	4770      	bx	lr
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800430a:	6958      	ldr	r0, [r3, #20]
 800430c:	0581      	lsls	r1, r0, #22
    wait_loop_index--;
 800430e:	4622      	mov	r2, r4
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004310:	d5f1      	bpl.n	80042f6 <HAL_PWREx_DisableLowPowerRunMode+0xb6>
 8004312:	e7b7      	b.n	8004284 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8004314:	40007000 	.word	0x40007000
 8004318:	20000400 	.word	0x20000400
 800431c:	431bde83 	.word	0x431bde83

08004320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004320:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004322:	4d20      	ldr	r5, [pc, #128]	@ (80043a4 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8004324:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004326:	00db      	lsls	r3, r3, #3
{
 8004328:	b083      	sub	sp, #12
 800432a:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800432c:	d51a      	bpl.n	8004364 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800432e:	f7ff feed 	bl	800410c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004332:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004336:	d027      	beq.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004338:	2c80      	cmp	r4, #128	@ 0x80
 800433a:	d82c      	bhi.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800433c:	d02f      	beq.n	800439e <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800433e:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8004342:	fab4 f484 	clz	r4, r4
 8004346:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004348:	4d17      	ldr	r5, [pc, #92]	@ (80043a8 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800434a:	6828      	ldr	r0, [r5, #0]
 800434c:	f020 0307 	bic.w	r3, r0, #7
 8004350:	4323      	orrs	r3, r4
 8004352:	602b      	str	r3, [r5, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004354:	6829      	ldr	r1, [r5, #0]
 8004356:	f001 0207 	and.w	r2, r1, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800435a:	1b10      	subs	r0, r2, r4
 800435c:	bf18      	it	ne
 800435e:	2001      	movne	r0, #1
 8004360:	b003      	add	sp, #12
 8004362:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004366:	f040 5180 	orr.w	r1, r0, #268435456	@ 0x10000000
 800436a:	65a9      	str	r1, [r5, #88]	@ 0x58
 800436c:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 800436e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8004376:	f7ff fec9 	bl	800410c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800437a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800437c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8004380:	f021 5280 	bic.w	r2, r1, #268435456	@ 0x10000000
 8004384:	65aa      	str	r2, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004386:	d1d7      	bne.n	8004338 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8004388:	2c80      	cmp	r4, #128	@ 0x80
 800438a:	d906      	bls.n	800439a <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800438c:	2ca1      	cmp	r4, #161	@ 0xa1
 800438e:	bf34      	ite	cc
 8004390:	2401      	movcc	r4, #1
 8004392:	2402      	movcs	r4, #2
 8004394:	e7d8      	b.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8004396:	2403      	movs	r4, #3
 8004398:	e7d6      	b.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800439a:	2400      	movs	r4, #0
 800439c:	e7d4      	b.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 800439e:	2402      	movs	r4, #2
 80043a0:	e7d2      	b.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0x28>
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40022000 	.word	0x40022000

080043ac <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ac:	4a28      	ldr	r2, [pc, #160]	@ (8004450 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043ae:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b0:	68d0      	ldr	r0, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043b2:	f013 030c 	ands.w	r3, r3, #12
 80043b6:	d005      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x18>
 80043b8:	2b0c      	cmp	r3, #12
 80043ba:	d035      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d141      	bne.n	8004444 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 80043c0:	4824      	ldr	r0, [pc, #144]	@ (8004454 <HAL_RCC_GetSysClockFreq+0xa8>)
 80043c2:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043c4:	4a22      	ldr	r2, [pc, #136]	@ (8004450 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043c6:	6810      	ldr	r0, [r2, #0]
 80043c8:	0701      	lsls	r1, r0, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043ca:	bf54      	ite	pl
 80043cc:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043d0:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80043d2:	4921      	ldr	r1, [pc, #132]	@ (8004458 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043d4:	bf54      	ite	pl
 80043d6:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043da:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80043de:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043e2:	b303      	cbz	r3, 8004426 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d11d      	bne.n	8004424 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043e8:	4b19      	ldr	r3, [pc, #100]	@ (8004450 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	f002 0303 	and.w	r3, r2, #3
    switch (pllsource)
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d025      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x94>
 80043f4:	4919      	ldr	r1, [pc, #100]	@ (800445c <HAL_RCC_GetSysClockFreq+0xb0>)
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	bf18      	it	ne
 80043fa:	4601      	movne	r1, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043fc:	4b14      	ldr	r3, [pc, #80]	@ (8004450 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043fe:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004400:	68d8      	ldr	r0, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004408:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800440a:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800440e:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004412:	fb01 f000 	mul.w	r0, r1, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004416:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004418:	0059      	lsls	r1, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800441a:	fbb0 fcf2 	udiv	ip, r0, r2
    sysclockfreq = pllvco / pllr;
 800441e:	fbbc f0f1 	udiv	r0, ip, r1
 8004422:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004424:	2000      	movs	r0, #0
}
 8004426:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004428:	f000 0103 	and.w	r1, r0, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800442c:	2901      	cmp	r1, #1
 800442e:	d0c9      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004430:	4b07      	ldr	r3, [pc, #28]	@ (8004450 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	f002 0303 	and.w	r3, r2, #3
    switch (pllsource)
 8004438:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800443a:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 800443e:	d1d9      	bne.n	80043f4 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8004440:	4904      	ldr	r1, [pc, #16]	@ (8004454 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004442:	e7db      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 8004444:	2b08      	cmp	r3, #8
 8004446:	4805      	ldr	r0, [pc, #20]	@ (800445c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004448:	bf18      	it	ne
 800444a:	2000      	movne	r0, #0
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	00f42400 	.word	0x00f42400
 8004458:	080084d0 	.word	0x080084d0
 800445c:	007a1200 	.word	0x007a1200

08004460 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004460:	2800      	cmp	r0, #0
 8004462:	f000 8230 	beq.w	80048c6 <HAL_RCC_OscConfig+0x466>
{
 8004466:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446a:	4a93      	ldr	r2, [pc, #588]	@ (80046b8 <HAL_RCC_OscConfig+0x258>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800446c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446e:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004470:	68d6      	ldr	r6, [r2, #12]
 8004472:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004474:	06d8      	lsls	r0, r3, #27
{
 8004476:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004478:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447c:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004480:	d52e      	bpl.n	80044e0 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004482:	2d00      	cmp	r5, #0
 8004484:	f000 8121 	beq.w	80046ca <HAL_RCC_OscConfig+0x26a>
 8004488:	2d0c      	cmp	r5, #12
 800448a:	f000 811b 	beq.w	80046c4 <HAL_RCC_OscConfig+0x264>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800448e:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8004490:	4f89      	ldr	r7, [pc, #548]	@ (80046b8 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8192 	beq.w	80047bc <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_MSI_ENABLE();
 8004498:	6838      	ldr	r0, [r7, #0]
 800449a:	f040 0101 	orr.w	r1, r0, #1
 800449e:	6039      	str	r1, [r7, #0]
        tickstart = HAL_GetTick();
 80044a0:	f7fe f9d6 	bl	8002850 <HAL_GetTick>
 80044a4:	4681      	mov	r9, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044a6:	e006      	b.n	80044b6 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a8:	f7fe f9d2 	bl	8002850 <HAL_GetTick>
 80044ac:	eba0 0009 	sub.w	r0, r0, r9
 80044b0:	2802      	cmp	r0, #2
 80044b2:	f200 8193 	bhi.w	80047dc <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	0793      	lsls	r3, r2, #30
 80044ba:	d5f5      	bpl.n	80044a8 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f043 0008 	orr.w	r0, r3, #8
 80044c2:	6038      	str	r0, [r7, #0]
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	6a22      	ldr	r2, [r4, #32]
 80044c8:	f021 03f0 	bic.w	r3, r1, #240	@ 0xf0
 80044cc:	4313      	orrs	r3, r2
 80044ce:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	69e3      	ldr	r3, [r4, #28]
 80044d4:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
 80044d8:	ea41 2203 	orr.w	r2, r1, r3, lsl #8
 80044dc:	607a      	str	r2, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	07d9      	lsls	r1, r3, #31
 80044e2:	f100 80bf 	bmi.w	8004664 <HAL_RCC_OscConfig+0x204>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044e6:	0799      	lsls	r1, r3, #30
 80044e8:	d523      	bpl.n	8004532 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044ea:	2d04      	cmp	r5, #4
 80044ec:	f000 8156 	beq.w	800479c <HAL_RCC_OscConfig+0x33c>
 80044f0:	2d0c      	cmp	r5, #12
 80044f2:	f000 8150 	beq.w	8004796 <HAL_RCC_OscConfig+0x336>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044f6:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80044f8:	4e6f      	ldr	r6, [pc, #444]	@ (80046b8 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8189 	beq.w	8004812 <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_ENABLE();
 8004500:	6830      	ldr	r0, [r6, #0]
 8004502:	f440 7280 	orr.w	r2, r0, #256	@ 0x100
 8004506:	6032      	str	r2, [r6, #0]
        tickstart = HAL_GetTick();
 8004508:	f7fe f9a2 	bl	8002850 <HAL_GetTick>
 800450c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800450e:	e005      	b.n	800451c <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004510:	f7fe f99e 	bl	8002850 <HAL_GetTick>
 8004514:	1bc2      	subs	r2, r0, r7
 8004516:	2a02      	cmp	r2, #2
 8004518:	f200 8160 	bhi.w	80047dc <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800451c:	6831      	ldr	r1, [r6, #0]
 800451e:	054b      	lsls	r3, r1, #21
 8004520:	d5f6      	bpl.n	8004510 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004522:	6877      	ldr	r7, [r6, #4]
 8004524:	6920      	ldr	r0, [r4, #16]
 8004526:	f027 48fe 	bic.w	r8, r7, #2130706432	@ 0x7f000000
 800452a:	ea48 6300 	orr.w	r3, r8, r0, lsl #24
 800452e:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	0719      	lsls	r1, r3, #28
 8004534:	d519      	bpl.n	800456a <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004536:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004538:	4e5f      	ldr	r6, [pc, #380]	@ (80046b8 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8117 	beq.w	800476e <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 8004540:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004544:	f043 0201 	orr.w	r2, r3, #1
 8004548:	f8c6 2094 	str.w	r2, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800454c:	f7fe f980 	bl	8002850 <HAL_GetTick>
 8004550:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004552:	e005      	b.n	8004560 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004554:	f7fe f97c 	bl	8002850 <HAL_GetTick>
 8004558:	1bc0      	subs	r0, r0, r7
 800455a:	2802      	cmp	r0, #2
 800455c:	f200 813e 	bhi.w	80047dc <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004560:	f8d6 1094 	ldr.w	r1, [r6, #148]	@ 0x94
 8004564:	078a      	lsls	r2, r1, #30
 8004566:	d5f5      	bpl.n	8004554 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	075f      	lsls	r7, r3, #29
 800456c:	d53f      	bpl.n	80045ee <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800456e:	4f52      	ldr	r7, [pc, #328]	@ (80046b8 <HAL_RCC_OscConfig+0x258>)
 8004570:	6dbe      	ldr	r6, [r7, #88]	@ 0x58
 8004572:	00f6      	lsls	r6, r6, #3
 8004574:	f100 814b 	bmi.w	800480e <HAL_RCC_OscConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004578:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800457a:	f040 5380 	orr.w	r3, r0, #268435456	@ 0x10000000
 800457e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004580:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004582:	f002 5180 	and.w	r1, r2, #268435456	@ 0x10000000
 8004586:	9101      	str	r1, [sp, #4]
 8004588:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800458a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458c:	4f4b      	ldr	r7, [pc, #300]	@ (80046bc <HAL_RCC_OscConfig+0x25c>)
 800458e:	6838      	ldr	r0, [r7, #0]
 8004590:	05c0      	lsls	r0, r0, #23
 8004592:	f140 819a 	bpl.w	80048ca <HAL_RCC_OscConfig+0x46a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004596:	68a0      	ldr	r0, [r4, #8]
 8004598:	2801      	cmp	r0, #1
 800459a:	f000 814c 	beq.w	8004836 <HAL_RCC_OscConfig+0x3d6>
 800459e:	2805      	cmp	r0, #5
 80045a0:	f000 81c2 	beq.w	8004928 <HAL_RCC_OscConfig+0x4c8>
 80045a4:	4f44      	ldr	r7, [pc, #272]	@ (80046b8 <HAL_RCC_OscConfig+0x258>)
 80045a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045aa:	f023 0201 	bic.w	r2, r3, #1
 80045ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80045b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045b6:	f021 0304 	bic.w	r3, r1, #4
 80045ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045be:	2800      	cmp	r0, #0
 80045c0:	f040 8140 	bne.w	8004844 <HAL_RCC_OscConfig+0x3e4>
      tickstart = HAL_GetTick();
 80045c4:	f7fe f944 	bl	8002850 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c8:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80045cc:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045ce:	e006      	b.n	80045de <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d0:	f7fe f93e 	bl	8002850 <HAL_GetTick>
 80045d4:	eba0 0208 	sub.w	r2, r0, r8
 80045d8:	454a      	cmp	r2, r9
 80045da:	f200 80ff 	bhi.w	80047dc <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045de:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80045e2:	0783      	lsls	r3, r0, #30
 80045e4:	d4f4      	bmi.n	80045d0 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 80045e6:	2e00      	cmp	r6, #0
 80045e8:	f040 8181 	bne.w	80048ee <HAL_RCC_OscConfig+0x48e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	069e      	lsls	r6, r3, #26
 80045f0:	d518      	bpl.n	8004624 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045f2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 80045f4:	4e30      	ldr	r6, [pc, #192]	@ (80046b8 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045f6:	2800      	cmp	r0, #0
 80045f8:	f000 8151 	beq.w	800489e <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_ENABLE();
 80045fc:	f8d6 0098 	ldr.w	r0, [r6, #152]	@ 0x98
 8004600:	f040 0201 	orr.w	r2, r0, #1
 8004604:	f8c6 2098 	str.w	r2, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004608:	f7fe f922 	bl	8002850 <HAL_GetTick>
 800460c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800460e:	e005      	b.n	800461c <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004610:	f7fe f91e 	bl	8002850 <HAL_GetTick>
 8004614:	1bc2      	subs	r2, r0, r7
 8004616:	2a02      	cmp	r2, #2
 8004618:	f200 80e0 	bhi.w	80047dc <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800461c:	f8d6 1098 	ldr.w	r1, [r6, #152]	@ 0x98
 8004620:	0788      	lsls	r0, r1, #30
 8004622:	d5f5      	bpl.n	8004610 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004624:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004626:	b1de      	cbz	r6, 8004660 <HAL_RCC_OscConfig+0x200>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004628:	2e02      	cmp	r6, #2
 800462a:	f000 818b 	beq.w	8004944 <HAL_RCC_OscConfig+0x4e4>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800462e:	2d0c      	cmp	r5, #12
 8004630:	f000 808d 	beq.w	800474e <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_PLL_DISABLE();
 8004634:	4c20      	ldr	r4, [pc, #128]	@ (80046b8 <HAL_RCC_OscConfig+0x258>)
 8004636:	6825      	ldr	r5, [r4, #0]
 8004638:	f025 7780 	bic.w	r7, r5, #16777216	@ 0x1000000
 800463c:	6027      	str	r7, [r4, #0]
        tickstart = HAL_GetTick();
 800463e:	f7fe f907 	bl	8002850 <HAL_GetTick>
 8004642:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004644:	e005      	b.n	8004652 <HAL_RCC_OscConfig+0x1f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004646:	f7fe f903 	bl	8002850 <HAL_GetTick>
 800464a:	1b81      	subs	r1, r0, r6
 800464c:	2902      	cmp	r1, #2
 800464e:	f200 80c5 	bhi.w	80047dc <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	d4f6      	bmi.n	8004646 <HAL_RCC_OscConfig+0x1e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004658:	68e0      	ldr	r0, [r4, #12]
 800465a:	4a19      	ldr	r2, [pc, #100]	@ (80046c0 <HAL_RCC_OscConfig+0x260>)
 800465c:	4002      	ands	r2, r0
 800465e:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8004660:	2000      	movs	r0, #0
 8004662:	e075      	b.n	8004750 <HAL_RCC_OscConfig+0x2f0>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004664:	2d08      	cmp	r5, #8
 8004666:	d078      	beq.n	800475a <HAL_RCC_OscConfig+0x2fa>
 8004668:	2d0c      	cmp	r5, #12
 800466a:	d074      	beq.n	8004756 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466c:	6861      	ldr	r1, [r4, #4]
 800466e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004672:	f000 80b7 	beq.w	80047e4 <HAL_RCC_OscConfig+0x384>
 8004676:	f5b1 2fa0 	cmp.w	r1, #327680	@ 0x50000
 800467a:	f000 8144 	beq.w	8004906 <HAL_RCC_OscConfig+0x4a6>
 800467e:	4f0e      	ldr	r7, [pc, #56]	@ (80046b8 <HAL_RCC_OscConfig+0x258>)
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	f422 3380 	bic.w	r3, r2, #65536	@ 0x10000
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	6838      	ldr	r0, [r7, #0]
 800468a:	f420 2280 	bic.w	r2, r0, #262144	@ 0x40000
 800468e:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004690:	2900      	cmp	r1, #0
 8004692:	f040 80ac 	bne.w	80047ee <HAL_RCC_OscConfig+0x38e>
        tickstart = HAL_GetTick();
 8004696:	f7fe f8db 	bl	8002850 <HAL_GetTick>
 800469a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800469c:	e006      	b.n	80046ac <HAL_RCC_OscConfig+0x24c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800469e:	f7fe f8d7 	bl	8002850 <HAL_GetTick>
 80046a2:	eba0 0308 	sub.w	r3, r0, r8
 80046a6:	2b64      	cmp	r3, #100	@ 0x64
 80046a8:	f200 8098 	bhi.w	80047dc <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ac:	6839      	ldr	r1, [r7, #0]
 80046ae:	0388      	lsls	r0, r1, #14
 80046b0:	d4f5      	bmi.n	800469e <HAL_RCC_OscConfig+0x23e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	e717      	b.n	80044e6 <HAL_RCC_OscConfig+0x86>
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40007000 	.word	0x40007000
 80046c0:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046c4:	2e01      	cmp	r6, #1
 80046c6:	f47f aee2 	bne.w	800448e <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046ca:	4fac      	ldr	r7, [pc, #688]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	0789      	lsls	r1, r1, #30
 80046d0:	d43a      	bmi.n	8004748 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046d2:	4faa      	ldr	r7, [pc, #680]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 80046d4:	6a20      	ldr	r0, [r4, #32]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	0712      	lsls	r2, r2, #28
 80046da:	bf56      	itet	pl
 80046dc:	f8d7 7094 	ldrpl.w	r7, [r7, #148]	@ 0x94
 80046e0:	683f      	ldrmi	r7, [r7, #0]
 80046e2:	093f      	lsrpl	r7, r7, #4
 80046e4:	f007 01f0 	and.w	r1, r7, #240	@ 0xf0
 80046e8:	4288      	cmp	r0, r1
 80046ea:	f200 80c0 	bhi.w	800486e <HAL_RCC_OscConfig+0x40e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ee:	4ba3      	ldr	r3, [pc, #652]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 80046f0:	681f      	ldr	r7, [r3, #0]
 80046f2:	f047 0208 	orr.w	r2, r7, #8
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	f021 07f0 	bic.w	r7, r1, #240	@ 0xf0
 80046fe:	4307      	orrs	r7, r0
 8004700:	601f      	str	r7, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	69e1      	ldr	r1, [r4, #28]
 8004706:	f422 477f 	bic.w	r7, r2, #65280	@ 0xff00
 800470a:	ea47 2201 	orr.w	r2, r7, r1, lsl #8
 800470e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004710:	2d00      	cmp	r5, #0
 8004712:	f000 80f2 	beq.w	80048fa <HAL_RCC_OscConfig+0x49a>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004716:	f7ff fe49 	bl	80043ac <HAL_RCC_GetSysClockFreq>
 800471a:	4b98      	ldr	r3, [pc, #608]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 800471c:	4a98      	ldr	r2, [pc, #608]	@ (8004980 <HAL_RCC_OscConfig+0x520>)
 800471e:	689f      	ldr	r7, [r3, #8]
 8004720:	f3c7 1103 	ubfx	r1, r7, #4, #4
 8004724:	4f97      	ldr	r7, [pc, #604]	@ (8004984 <HAL_RCC_OscConfig+0x524>)
 8004726:	f812 8001 	ldrb.w	r8, [r2, r1]
 800472a:	f008 091f 	and.w	r9, r8, #31
 800472e:	fa20 f309 	lsr.w	r3, r0, r9
        status = HAL_InitTick(uwTickPrio);
 8004732:	4895      	ldr	r0, [pc, #596]	@ (8004988 <HAL_RCC_OscConfig+0x528>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004734:	603b      	str	r3, [r7, #0]
        status = HAL_InitTick(uwTickPrio);
 8004736:	6800      	ldr	r0, [r0, #0]
 8004738:	f7fe f848 	bl	80027cc <HAL_InitTick>
        if(status != HAL_OK)
 800473c:	b940      	cbnz	r0, 8004750 <HAL_RCC_OscConfig+0x2f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	07d9      	lsls	r1, r3, #31
 8004742:	f57f aed0 	bpl.w	80044e6 <HAL_RCC_OscConfig+0x86>
 8004746:	e78d      	b.n	8004664 <HAL_RCC_OscConfig+0x204>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004748:	69a3      	ldr	r3, [r4, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1c1      	bne.n	80046d2 <HAL_RCC_OscConfig+0x272>
    return HAL_ERROR;
 800474e:	2001      	movs	r0, #1
}
 8004750:	b003      	add	sp, #12
 8004752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004756:	2e03      	cmp	r6, #3
 8004758:	d188      	bne.n	800466c <HAL_RCC_OscConfig+0x20c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475a:	4a88      	ldr	r2, [pc, #544]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 800475c:	6811      	ldr	r1, [r2, #0]
 800475e:	038a      	lsls	r2, r1, #14
 8004760:	f57f aec1 	bpl.w	80044e6 <HAL_RCC_OscConfig+0x86>
 8004764:	6867      	ldr	r7, [r4, #4]
 8004766:	2f00      	cmp	r7, #0
 8004768:	f47f aebd 	bne.w	80044e6 <HAL_RCC_OscConfig+0x86>
 800476c:	e7ef      	b.n	800474e <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_DISABLE();
 800476e:	f8d6 7094 	ldr.w	r7, [r6, #148]	@ 0x94
 8004772:	f027 0201 	bic.w	r2, r7, #1
 8004776:	f8c6 2094 	str.w	r2, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800477a:	f7fe f869 	bl	8002850 <HAL_GetTick>
 800477e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004780:	e004      	b.n	800478c <HAL_RCC_OscConfig+0x32c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004782:	f7fe f865 	bl	8002850 <HAL_GetTick>
 8004786:	1bc0      	subs	r0, r0, r7
 8004788:	2802      	cmp	r0, #2
 800478a:	d827      	bhi.n	80047dc <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800478c:	f8d6 1094 	ldr.w	r1, [r6, #148]	@ 0x94
 8004790:	078b      	lsls	r3, r1, #30
 8004792:	d4f6      	bmi.n	8004782 <HAL_RCC_OscConfig+0x322>
 8004794:	e6e8      	b.n	8004568 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004796:	2e02      	cmp	r6, #2
 8004798:	f47f aead 	bne.w	80044f6 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800479c:	4e77      	ldr	r6, [pc, #476]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 800479e:	6831      	ldr	r1, [r6, #0]
 80047a0:	054a      	lsls	r2, r1, #21
 80047a2:	d502      	bpl.n	80047aa <HAL_RCC_OscConfig+0x34a>
 80047a4:	68e0      	ldr	r0, [r4, #12]
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d0d1      	beq.n	800474e <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047aa:	4f74      	ldr	r7, [pc, #464]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 80047ac:	6921      	ldr	r1, [r4, #16]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	f022 46fe 	bic.w	r6, r2, #2130706432	@ 0x7f000000
 80047b4:	ea46 6001 	orr.w	r0, r6, r1, lsl #24
 80047b8:	6078      	str	r0, [r7, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ba:	e6ba      	b.n	8004532 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 80047bc:	6838      	ldr	r0, [r7, #0]
 80047be:	f020 0101 	bic.w	r1, r0, #1
 80047c2:	6039      	str	r1, [r7, #0]
        tickstart = HAL_GetTick();
 80047c4:	f7fe f844 	bl	8002850 <HAL_GetTick>
 80047c8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	0790      	lsls	r0, r2, #30
 80047ce:	d5b6      	bpl.n	800473e <HAL_RCC_OscConfig+0x2de>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047d0:	f7fe f83e 	bl	8002850 <HAL_GetTick>
 80047d4:	eba0 0308 	sub.w	r3, r0, r8
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d9f6      	bls.n	80047ca <HAL_RCC_OscConfig+0x36a>
            return HAL_TIMEOUT;
 80047dc:	2003      	movs	r0, #3
}
 80047de:	b003      	add	sp, #12
 80047e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e4:	4865      	ldr	r0, [pc, #404]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 80047e6:	6803      	ldr	r3, [r0, #0]
 80047e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80047ec:	6002      	str	r2, [r0, #0]
        tickstart = HAL_GetTick();
 80047ee:	f7fe f82f 	bl	8002850 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f2:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 800497c <HAL_RCC_OscConfig+0x51c>
        tickstart = HAL_GetTick();
 80047f6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f8:	e004      	b.n	8004804 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047fa:	f7fe f829 	bl	8002850 <HAL_GetTick>
 80047fe:	1bc0      	subs	r0, r0, r7
 8004800:	2864      	cmp	r0, #100	@ 0x64
 8004802:	d8eb      	bhi.n	80047dc <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004804:	f8d9 1000 	ldr.w	r1, [r9]
 8004808:	038b      	lsls	r3, r1, #14
 800480a:	d5f6      	bpl.n	80047fa <HAL_RCC_OscConfig+0x39a>
 800480c:	e751      	b.n	80046b2 <HAL_RCC_OscConfig+0x252>
    FlagStatus       pwrclkchanged = RESET;
 800480e:	2600      	movs	r6, #0
 8004810:	e6bc      	b.n	800458c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8004812:	6830      	ldr	r0, [r6, #0]
 8004814:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8004818:	6032      	str	r2, [r6, #0]
        tickstart = HAL_GetTick();
 800481a:	f7fe f819 	bl	8002850 <HAL_GetTick>
 800481e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004820:	e004      	b.n	800482c <HAL_RCC_OscConfig+0x3cc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004822:	f7fe f815 	bl	8002850 <HAL_GetTick>
 8004826:	1bc3      	subs	r3, r0, r7
 8004828:	2b02      	cmp	r3, #2
 800482a:	d8d7      	bhi.n	80047dc <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800482c:	6831      	ldr	r1, [r6, #0]
 800482e:	0548      	lsls	r0, r1, #21
 8004830:	d4f7      	bmi.n	8004822 <HAL_RCC_OscConfig+0x3c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	e67d      	b.n	8004532 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004836:	4951      	ldr	r1, [pc, #324]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 8004838:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800483c:	f043 0001 	orr.w	r0, r3, #1
 8004840:	f8c1 0090 	str.w	r0, [r1, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8004844:	f7fe f804 	bl	8002850 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004848:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 800497c <HAL_RCC_OscConfig+0x51c>
      tickstart = HAL_GetTick();
 800484c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004852:	e004      	b.n	800485e <HAL_RCC_OscConfig+0x3fe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7fd fffc 	bl	8002850 <HAL_GetTick>
 8004858:	1bc1      	subs	r1, r0, r7
 800485a:	4549      	cmp	r1, r9
 800485c:	d8be      	bhi.n	80047dc <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800485e:	f8d8 2090 	ldr.w	r2, [r8, #144]	@ 0x90
 8004862:	0792      	lsls	r2, r2, #30
 8004864:	d5f6      	bpl.n	8004854 <HAL_RCC_OscConfig+0x3f4>
    if(pwrclkchanged == SET)
 8004866:	2e00      	cmp	r6, #0
 8004868:	f43f aec0 	beq.w	80045ec <HAL_RCC_OscConfig+0x18c>
 800486c:	e03f      	b.n	80048ee <HAL_RCC_OscConfig+0x48e>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800486e:	f7ff fd57 	bl	8004320 <RCC_SetFlashLatencyFromMSIRange>
 8004872:	2800      	cmp	r0, #0
 8004874:	f47f af6b 	bne.w	800474e <HAL_RCC_OscConfig+0x2ee>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004878:	4840      	ldr	r0, [pc, #256]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 800487a:	6803      	ldr	r3, [r0, #0]
 800487c:	f043 0708 	orr.w	r7, r3, #8
 8004880:	6007      	str	r7, [r0, #0]
 8004882:	6801      	ldr	r1, [r0, #0]
 8004884:	6a23      	ldr	r3, [r4, #32]
 8004886:	f021 02f0 	bic.w	r2, r1, #240	@ 0xf0
 800488a:	431a      	orrs	r2, r3
 800488c:	6002      	str	r2, [r0, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800488e:	6847      	ldr	r7, [r0, #4]
 8004890:	69e1      	ldr	r1, [r4, #28]
 8004892:	f427 4c7f 	bic.w	ip, r7, #65280	@ 0xff00
 8004896:	ea4c 2201 	orr.w	r2, ip, r1, lsl #8
 800489a:	6042      	str	r2, [r0, #4]
 800489c:	e73b      	b.n	8004716 <HAL_RCC_OscConfig+0x2b6>
      __HAL_RCC_HSI48_DISABLE();
 800489e:	f8d6 2098 	ldr.w	r2, [r6, #152]	@ 0x98
 80048a2:	f022 0701 	bic.w	r7, r2, #1
 80048a6:	f8c6 7098 	str.w	r7, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80048aa:	f7fd ffd1 	bl	8002850 <HAL_GetTick>
 80048ae:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048b0:	e004      	b.n	80048bc <HAL_RCC_OscConfig+0x45c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b2:	f7fd ffcd 	bl	8002850 <HAL_GetTick>
 80048b6:	1bc3      	subs	r3, r0, r7
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d88f      	bhi.n	80047dc <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048bc:	f8d6 1098 	ldr.w	r1, [r6, #152]	@ 0x98
 80048c0:	0789      	lsls	r1, r1, #30
 80048c2:	d4f6      	bmi.n	80048b2 <HAL_RCC_OscConfig+0x452>
 80048c4:	e6ae      	b.n	8004624 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 80048c6:	2001      	movs	r0, #1
}
 80048c8:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80048d0:	603a      	str	r2, [r7, #0]
      tickstart = HAL_GetTick();
 80048d2:	f7fd ffbd 	bl	8002850 <HAL_GetTick>
 80048d6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	05c9      	lsls	r1, r1, #23
 80048dc:	f53f ae5b 	bmi.w	8004596 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e0:	f7fd ffb6 	bl	8002850 <HAL_GetTick>
 80048e4:	eba0 0308 	sub.w	r3, r0, r8
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d9f5      	bls.n	80048d8 <HAL_RCC_OscConfig+0x478>
 80048ec:	e776      	b.n	80047dc <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ee:	4e23      	ldr	r6, [pc, #140]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 80048f0:	6db7      	ldr	r7, [r6, #88]	@ 0x58
 80048f2:	f027 5180 	bic.w	r1, r7, #268435456	@ 0x10000000
 80048f6:	65b1      	str	r1, [r6, #88]	@ 0x58
 80048f8:	e678      	b.n	80045ec <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048fa:	f7ff fd11 	bl	8004320 <RCC_SetFlashLatencyFromMSIRange>
 80048fe:	2800      	cmp	r0, #0
 8004900:	f43f af09 	beq.w	8004716 <HAL_RCC_OscConfig+0x2b6>
 8004904:	e723      	b.n	800474e <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004906:	f101 4e80 	add.w	lr, r1, #1073741824	@ 0x40000000
 800490a:	f5ae 3c3c 	sub.w	ip, lr, #192512	@ 0x2f000
 800490e:	f8dc 0000 	ldr.w	r0, [ip]
 8004912:	f440 2280 	orr.w	r2, r0, #262144	@ 0x40000
 8004916:	f8cc 2000 	str.w	r2, [ip]
 800491a:	f8dc 1000 	ldr.w	r1, [ip]
 800491e:	f441 3780 	orr.w	r7, r1, #65536	@ 0x10000
 8004922:	f8cc 7000 	str.w	r7, [ip]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004926:	e762      	b.n	80047ee <HAL_RCC_OscConfig+0x38e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004928:	4914      	ldr	r1, [pc, #80]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 800492a:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800492e:	f043 0004 	orr.w	r0, r3, #4
 8004932:	f8c1 0090 	str.w	r0, [r1, #144]	@ 0x90
 8004936:	f8d1 7090 	ldr.w	r7, [r1, #144]	@ 0x90
 800493a:	f047 0201 	orr.w	r2, r7, #1
 800493e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004942:	e77f      	b.n	8004844 <HAL_RCC_OscConfig+0x3e4>
      pll_config = RCC->PLLCFGR;
 8004944:	4e0d      	ldr	r6, [pc, #52]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8004948:	68f7      	ldr	r7, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	f007 0303 	and.w	r3, r7, #3
 800494e:	4283      	cmp	r3, r0
 8004950:	d058      	beq.n	8004a04 <HAL_RCC_OscConfig+0x5a4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004952:	2d0c      	cmp	r5, #12
 8004954:	f43f aefb 	beq.w	800474e <HAL_RCC_OscConfig+0x2ee>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004958:	4d08      	ldr	r5, [pc, #32]	@ (800497c <HAL_RCC_OscConfig+0x51c>)
 800495a:	6828      	ldr	r0, [r5, #0]
 800495c:	0142      	lsls	r2, r0, #5
 800495e:	f53f aef6 	bmi.w	800474e <HAL_RCC_OscConfig+0x2ee>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004962:	682a      	ldr	r2, [r5, #0]
 8004964:	00d3      	lsls	r3, r2, #3
 8004966:	f53f aef2 	bmi.w	800474e <HAL_RCC_OscConfig+0x2ee>
            __HAL_RCC_PLL_DISABLE();
 800496a:	682f      	ldr	r7, [r5, #0]
 800496c:	f027 7380 	bic.w	r3, r7, #16777216	@ 0x1000000
 8004970:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8004972:	f7fd ff6d 	bl	8002850 <HAL_GetTick>
 8004976:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004978:	e00e      	b.n	8004998 <HAL_RCC_OscConfig+0x538>
 800497a:	bf00      	nop
 800497c:	40021000 	.word	0x40021000
 8004980:	08008500 	.word	0x08008500
 8004984:	20000400 	.word	0x20000400
 8004988:	20000408 	.word	0x20000408
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498c:	f7fd ff60 	bl	8002850 <HAL_GetTick>
 8004990:	1b80      	subs	r0, r0, r6
 8004992:	2802      	cmp	r0, #2
 8004994:	f63f af22 	bhi.w	80047dc <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004998:	6829      	ldr	r1, [r5, #0]
 800499a:	018f      	lsls	r7, r1, #6
 800499c:	d4f6      	bmi.n	800498c <HAL_RCC_OscConfig+0x52c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800499e:	68ee      	ldr	r6, [r5, #12]
 80049a0:	4838      	ldr	r0, [pc, #224]	@ (8004a84 <HAL_RCC_OscConfig+0x624>)
 80049a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80049a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80049a6:	e9d4 710d 	ldrd	r7, r1, [r4, #52]	@ 0x34
 80049aa:	4030      	ands	r0, r6
 80049ac:	e9d4 460f 	ldrd	r4, r6, [r4, #60]	@ 0x3c
 80049b0:	4310      	orrs	r0, r2
 80049b2:	ea40 2e07 	orr.w	lr, r0, r7, lsl #8
 80049b6:	ea4e 6cc1 	orr.w	ip, lr, r1, lsl #27
 80049ba:	0860      	lsrs	r0, r4, #1
 80049bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80049c0:	ea4c 1708 	orr.w	r7, ip, r8, lsl #4
 80049c4:	0872      	lsrs	r2, r6, #1
 80049c6:	f100 39ff 	add.w	r9, r0, #4294967295
 80049ca:	ea47 5149 	orr.w	r1, r7, r9, lsl #21
 80049ce:	1e53      	subs	r3, r2, #1
 80049d0:	ea41 6443 	orr.w	r4, r1, r3, lsl #25
 80049d4:	60ec      	str	r4, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80049d6:	6828      	ldr	r0, [r5, #0]
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d8:	4e2b      	ldr	r6, [pc, #172]	@ (8004a88 <HAL_RCC_OscConfig+0x628>)
            __HAL_RCC_PLL_ENABLE();
 80049da:	f040 7780 	orr.w	r7, r0, #16777216	@ 0x1000000
 80049de:	602f      	str	r7, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049e0:	68ea      	ldr	r2, [r5, #12]
 80049e2:	f042 7180 	orr.w	r1, r2, #16777216	@ 0x1000000
 80049e6:	60e9      	str	r1, [r5, #12]
            tickstart = HAL_GetTick();
 80049e8:	f7fd ff32 	bl	8002850 <HAL_GetTick>
 80049ec:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ee:	e005      	b.n	80049fc <HAL_RCC_OscConfig+0x59c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f0:	f7fd ff2e 	bl	8002850 <HAL_GetTick>
 80049f4:	1b03      	subs	r3, r0, r4
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	f63f aef0 	bhi.w	80047dc <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fc:	6835      	ldr	r5, [r6, #0]
 80049fe:	01a8      	lsls	r0, r5, #6
 8004a00:	d5f6      	bpl.n	80049f0 <HAL_RCC_OscConfig+0x590>
 8004a02:	e62d      	b.n	8004660 <HAL_RCC_OscConfig+0x200>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a04:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004a06:	f007 0c70 	and.w	ip, r7, #112	@ 0x70
 8004a0a:	f102 38ff 	add.w	r8, r2, #4294967295
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	ebbc 1f08 	cmp.w	ip, r8, lsl #4
 8004a12:	d19e      	bne.n	8004952 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a16:	f407 43fe 	and.w	r3, r7, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a1a:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 8004a1e:	d198      	bne.n	8004952 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a20:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004a22:	f007 4078 	and.w	r0, r7, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a26:	ebb0 6fc2 	cmp.w	r0, r2, lsl #27
 8004a2a:	d192      	bne.n	8004952 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a2c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8004a2e:	0848      	lsrs	r0, r1, #1
 8004a30:	f407 03c0 	and.w	r3, r7, #6291456	@ 0x600000
 8004a34:	f100 39ff 	add.w	r9, r0, #4294967295
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a38:	ebb3 5f49 	cmp.w	r3, r9, lsl #21
 8004a3c:	d189      	bne.n	8004952 <HAL_RCC_OscConfig+0x4f2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a3e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004a40:	0853      	lsrs	r3, r2, #1
 8004a42:	f007 67c0 	and.w	r7, r7, #100663296	@ 0x6000000
 8004a46:	1e59      	subs	r1, r3, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a48:	ebb7 6f41 	cmp.w	r7, r1, lsl #25
 8004a4c:	d181      	bne.n	8004952 <HAL_RCC_OscConfig+0x4f2>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4e:	6835      	ldr	r5, [r6, #0]
 8004a50:	01a9      	lsls	r1, r5, #6
 8004a52:	f53f ae05 	bmi.w	8004660 <HAL_RCC_OscConfig+0x200>
          __HAL_RCC_PLL_ENABLE();
 8004a56:	6834      	ldr	r4, [r6, #0]
 8004a58:	f044 7080 	orr.w	r0, r4, #16777216	@ 0x1000000
 8004a5c:	6030      	str	r0, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a5e:	68f2      	ldr	r2, [r6, #12]
 8004a60:	f042 7780 	orr.w	r7, r2, #16777216	@ 0x1000000
 8004a64:	60f7      	str	r7, [r6, #12]
          tickstart = HAL_GetTick();
 8004a66:	f7fd fef3 	bl	8002850 <HAL_GetTick>
 8004a6a:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6c:	e005      	b.n	8004a7a <HAL_RCC_OscConfig+0x61a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6e:	f7fd feef 	bl	8002850 <HAL_GetTick>
 8004a72:	1b41      	subs	r1, r0, r5
 8004a74:	2902      	cmp	r1, #2
 8004a76:	f63f aeb1 	bhi.w	80047dc <HAL_RCC_OscConfig+0x37c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7a:	6833      	ldr	r3, [r6, #0]
 8004a7c:	019a      	lsls	r2, r3, #6
 8004a7e:	d5f6      	bpl.n	8004a6e <HAL_RCC_OscConfig+0x60e>
 8004a80:	e5ee      	b.n	8004660 <HAL_RCC_OscConfig+0x200>
 8004a82:	bf00      	nop
 8004a84:	019d808c 	.word	0x019d808c
 8004a88:	40021000 	.word	0x40021000

08004a8c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	f000 80a0 	beq.w	8004bd2 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a92:	4a54      	ldr	r2, [pc, #336]	@ (8004be4 <HAL_RCC_ClockConfig+0x158>)
 8004a94:	6813      	ldr	r3, [r2, #0]
{
 8004a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a9c:	f003 0007 	and.w	r0, r3, #7
 8004aa0:	4288      	cmp	r0, r1
 8004aa2:	460d      	mov	r5, r1
 8004aa4:	d20c      	bcs.n	8004ac0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	6811      	ldr	r1, [r2, #0]
 8004aa8:	f021 0607 	bic.w	r6, r1, #7
 8004aac:	432e      	orrs	r6, r5
 8004aae:	6016      	str	r6, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab0:	6817      	ldr	r7, [r2, #0]
 8004ab2:	f007 0207 	and.w	r2, r7, #7
 8004ab6:	42aa      	cmp	r2, r5
 8004ab8:	d002      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004aba:	2001      	movs	r0, #1
}
 8004abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac4:	f003 0701 	and.w	r7, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac8:	d570      	bpl.n	8004bac <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004aca:	4e47      	ldr	r6, [pc, #284]	@ (8004be8 <HAL_RCC_ClockConfig+0x15c>)
 8004acc:	68a0      	ldr	r0, [r4, #8]
 8004ace:	68b1      	ldr	r1, [r6, #8]
 8004ad0:	f001 02f0 	and.w	r2, r1, #240	@ 0xf0
 8004ad4:	4290      	cmp	r0, r2
 8004ad6:	d904      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad8:	68b1      	ldr	r1, [r6, #8]
 8004ada:	f021 02f0 	bic.w	r2, r1, #240	@ 0xf0
 8004ade:	4302      	orrs	r2, r0
 8004ae0:	60b2      	str	r2, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae2:	b337      	cbz	r7, 8004b32 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae4:	6861      	ldr	r1, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae6:	4b40      	ldr	r3, [pc, #256]	@ (8004be8 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae8:	2903      	cmp	r1, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aea:	681f      	ldr	r7, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aec:	d065      	beq.n	8004bba <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aee:	2902      	cmp	r1, #2
 8004af0:	d06c      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004af2:	2900      	cmp	r1, #0
 8004af4:	d171      	bne.n	8004bda <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004af6:	07be      	lsls	r6, r7, #30
 8004af8:	d5df      	bpl.n	8004aba <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004afa:	4e3b      	ldr	r6, [pc, #236]	@ (8004be8 <HAL_RCC_ClockConfig+0x15c>)
 8004afc:	68b0      	ldr	r0, [r6, #8]
 8004afe:	f020 0203 	bic.w	r2, r0, #3
 8004b02:	430a      	orrs	r2, r1
 8004b04:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8004b06:	f7fd fea3 	bl	8002850 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004b0e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b10:	e004      	b.n	8004b1c <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b12:	f7fd fe9d 	bl	8002850 <HAL_GetTick>
 8004b16:	1bc1      	subs	r1, r0, r7
 8004b18:	4541      	cmp	r1, r8
 8004b1a:	d85c      	bhi.n	8004bd6 <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1c:	68b1      	ldr	r1, [r6, #8]
 8004b1e:	6860      	ldr	r0, [r4, #4]
 8004b20:	f001 0c0c 	and.w	ip, r1, #12
 8004b24:	ebbc 0f80 	cmp.w	ip, r0, lsl #2
 8004b28:	d1f3      	bne.n	8004b12 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	0799      	lsls	r1, r3, #30
 8004b2e:	d506      	bpl.n	8004b3e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b30:	68a0      	ldr	r0, [r4, #8]
 8004b32:	4e2d      	ldr	r6, [pc, #180]	@ (8004be8 <HAL_RCC_ClockConfig+0x15c>)
 8004b34:	68b7      	ldr	r7, [r6, #8]
 8004b36:	f007 08f0 	and.w	r8, r7, #240	@ 0xf0
 8004b3a:	4580      	cmp	r8, r0
 8004b3c:	d840      	bhi.n	8004bc0 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b3e:	4829      	ldr	r0, [pc, #164]	@ (8004be4 <HAL_RCC_ClockConfig+0x158>)
 8004b40:	6806      	ldr	r6, [r0, #0]
 8004b42:	f006 0707 	and.w	r7, r6, #7
 8004b46:	42af      	cmp	r7, r5
 8004b48:	d909      	bls.n	8004b5e <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	6802      	ldr	r2, [r0, #0]
 8004b4c:	f022 0107 	bic.w	r1, r2, #7
 8004b50:	4329      	orrs	r1, r5
 8004b52:	6001      	str	r1, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b54:	6800      	ldr	r0, [r0, #0]
 8004b56:	f000 0607 	and.w	r6, r0, #7
 8004b5a:	42ae      	cmp	r6, r5
 8004b5c:	d1ad      	bne.n	8004aba <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5e:	075a      	lsls	r2, r3, #29
 8004b60:	d506      	bpl.n	8004b70 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b62:	4d21      	ldr	r5, [pc, #132]	@ (8004be8 <HAL_RCC_ClockConfig+0x15c>)
 8004b64:	68e7      	ldr	r7, [r4, #12]
 8004b66:	68aa      	ldr	r2, [r5, #8]
 8004b68:	f422 61e0 	bic.w	r1, r2, #1792	@ 0x700
 8004b6c:	4339      	orrs	r1, r7
 8004b6e:	60a9      	str	r1, [r5, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b70:	071b      	lsls	r3, r3, #28
 8004b72:	d507      	bpl.n	8004b84 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b74:	481c      	ldr	r0, [pc, #112]	@ (8004be8 <HAL_RCC_ClockConfig+0x15c>)
 8004b76:	6924      	ldr	r4, [r4, #16]
 8004b78:	6883      	ldr	r3, [r0, #8]
 8004b7a:	f423 5660 	bic.w	r6, r3, #14336	@ 0x3800
 8004b7e:	ea46 05c4 	orr.w	r5, r6, r4, lsl #3
 8004b82:	6085      	str	r5, [r0, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b84:	f7ff fc12 	bl	80043ac <HAL_RCC_GetSysClockFreq>
 8004b88:	4a17      	ldr	r2, [pc, #92]	@ (8004be8 <HAL_RCC_ClockConfig+0x15c>)
 8004b8a:	4c18      	ldr	r4, [pc, #96]	@ (8004bec <HAL_RCC_ClockConfig+0x160>)
 8004b8c:	6891      	ldr	r1, [r2, #8]
 8004b8e:	4e18      	ldr	r6, [pc, #96]	@ (8004bf0 <HAL_RCC_ClockConfig+0x164>)
 8004b90:	f3c1 1303 	ubfx	r3, r1, #4, #4
 8004b94:	4607      	mov	r7, r0
 8004b96:	5ce5      	ldrb	r5, [r4, r3]
  status = HAL_InitTick(uwTickPrio);
 8004b98:	4816      	ldr	r0, [pc, #88]	@ (8004bf4 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b9a:	f005 021f 	and.w	r2, r5, #31
 8004b9e:	40d7      	lsrs	r7, r2
 8004ba0:	6037      	str	r7, [r6, #0]
  status = HAL_InitTick(uwTickPrio);
 8004ba2:	6800      	ldr	r0, [r0, #0]
}
 8004ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8004ba8:	f7fd be10 	b.w	80027cc <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bac:	2f00      	cmp	r7, #0
 8004bae:	d0c6      	beq.n	8004b3e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb0:	6861      	ldr	r1, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004be8 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb4:	2903      	cmp	r1, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb6:	681f      	ldr	r7, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb8:	d199      	bne.n	8004aee <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bba:	01bb      	lsls	r3, r7, #6
 8004bbc:	d49d      	bmi.n	8004afa <HAL_RCC_ClockConfig+0x6e>
 8004bbe:	e77c      	b.n	8004aba <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc0:	68b2      	ldr	r2, [r6, #8]
 8004bc2:	f022 01f0 	bic.w	r1, r2, #240	@ 0xf0
 8004bc6:	4301      	orrs	r1, r0
 8004bc8:	60b1      	str	r1, [r6, #8]
 8004bca:	e7b8      	b.n	8004b3e <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bcc:	03bf      	lsls	r7, r7, #14
 8004bce:	d494      	bmi.n	8004afa <HAL_RCC_ClockConfig+0x6e>
 8004bd0:	e773      	b.n	8004aba <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004bd2:	2001      	movs	r0, #1
}
 8004bd4:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004bd6:	2003      	movs	r0, #3
 8004bd8:	e770      	b.n	8004abc <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bda:	0578      	lsls	r0, r7, #21
 8004bdc:	f57f af6d 	bpl.w	8004aba <HAL_RCC_ClockConfig+0x2e>
 8004be0:	e78b      	b.n	8004afa <HAL_RCC_ClockConfig+0x6e>
 8004be2:	bf00      	nop
 8004be4:	40022000 	.word	0x40022000
 8004be8:	40021000 	.word	0x40021000
 8004bec:	08008500 	.word	0x08008500
 8004bf0:	20000400 	.word	0x20000400
 8004bf4:	20000408 	.word	0x20000408

08004bf8 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8004bf8:	4b01      	ldr	r3, [pc, #4]	@ (8004c00 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000400 	.word	0x20000400

08004c04 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c04:	4a45      	ldr	r2, [pc, #276]	@ (8004d1c <RCCEx_PLLSAI1_Config+0x118>)
{
 8004c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c08:	68d6      	ldr	r6, [r2, #12]
{
 8004c0a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c0c:	07b1      	lsls	r1, r6, #30
{
 8004c0e:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c10:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c12:	d006      	beq.n	8004c22 <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c14:	68d6      	ldr	r6, [r2, #12]
 8004c16:	f006 0103 	and.w	r1, r6, #3
 8004c1a:	4281      	cmp	r1, r0
 8004c1c:	d04b      	beq.n	8004cb6 <RCCEx_PLLSAI1_Config+0xb2>
 8004c1e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8004c22:	2802      	cmp	r0, #2
 8004c24:	d058      	beq.n	8004cd8 <RCCEx_PLLSAI1_Config+0xd4>
 8004c26:	2803      	cmp	r0, #3
 8004c28:	d04f      	beq.n	8004cca <RCCEx_PLLSAI1_Config+0xc6>
 8004c2a:	2801      	cmp	r0, #1
 8004c2c:	d1f7      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	0793      	lsls	r3, r2, #30
 8004c32:	d5f5      	bpl.n	8004c20 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c34:	4e39      	ldr	r6, [pc, #228]	@ (8004d1c <RCCEx_PLLSAI1_Config+0x118>)
 8004c36:	6867      	ldr	r7, [r4, #4]
 8004c38:	68f1      	ldr	r1, [r6, #12]
 8004c3a:	f021 0373 	bic.w	r3, r1, #115	@ 0x73
 8004c3e:	4318      	orrs	r0, r3
 8004c40:	f107 3cff 	add.w	ip, r7, #4294967295
 8004c44:	ea40 120c 	orr.w	r2, r0, ip, lsl #4
 8004c48:	60f2      	str	r2, [r6, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c4a:	4e34      	ldr	r6, [pc, #208]	@ (8004d1c <RCCEx_PLLSAI1_Config+0x118>)
 8004c4c:	6832      	ldr	r2, [r6, #0]
 8004c4e:	f022 6180 	bic.w	r1, r2, #67108864	@ 0x4000000
 8004c52:	6031      	str	r1, [r6, #0]
    tickstart = HAL_GetTick();
 8004c54:	f7fd fdfc 	bl	8002850 <HAL_GetTick>
 8004c58:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c5a:	e004      	b.n	8004c66 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c5c:	f7fd fdf8 	bl	8002850 <HAL_GetTick>
 8004c60:	1bc2      	subs	r2, r0, r7
 8004c62:	2a02      	cmp	r2, #2
 8004c64:	d83c      	bhi.n	8004ce0 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c66:	6833      	ldr	r3, [r6, #0]
 8004c68:	011a      	lsls	r2, r3, #4
 8004c6a:	d4f7      	bmi.n	8004c5c <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c6c:	68a0      	ldr	r0, [r4, #8]
 8004c6e:	0207      	lsls	r7, r0, #8
      if(Divider == DIVIDER_P_UPDATE)
 8004c70:	2d00      	cmp	r5, #0
 8004c72:	d137      	bne.n	8004ce4 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c74:	6935      	ldr	r5, [r6, #16]
 8004c76:	68e1      	ldr	r1, [r4, #12]
 8004c78:	f025 4c78 	bic.w	ip, r5, #4160749568	@ 0xf8000000
 8004c7c:	ea47 63c1 	orr.w	r3, r7, r1, lsl #27
 8004c80:	f42c 42fe 	bic.w	r2, ip, #32512	@ 0x7f00
 8004c84:	4313      	orrs	r3, r2
 8004c86:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c88:	4d24      	ldr	r5, [pc, #144]	@ (8004d1c <RCCEx_PLLSAI1_Config+0x118>)
 8004c8a:	682e      	ldr	r6, [r5, #0]
 8004c8c:	f046 6080 	orr.w	r0, r6, #67108864	@ 0x4000000
 8004c90:	6028      	str	r0, [r5, #0]
      tickstart = HAL_GetTick();
 8004c92:	f7fd fddd 	bl	8002850 <HAL_GetTick>
 8004c96:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c98:	e004      	b.n	8004ca4 <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c9a:	f7fd fdd9 	bl	8002850 <HAL_GetTick>
 8004c9e:	1b83      	subs	r3, r0, r6
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d81d      	bhi.n	8004ce0 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ca4:	682f      	ldr	r7, [r5, #0]
 8004ca6:	013b      	lsls	r3, r7, #4
 8004ca8:	d5f7      	bpl.n	8004c9a <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004caa:	6929      	ldr	r1, [r5, #16]
 8004cac:	69a4      	ldr	r4, [r4, #24]
 8004cae:	4321      	orrs	r1, r4
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	6129      	str	r1, [r5, #16]
}
 8004cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004cb6:	2900      	cmp	r1, #0
 8004cb8:	d0b1      	beq.n	8004c1e <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cba:	68d3      	ldr	r3, [r2, #12]
       ||
 8004cbc:	6860      	ldr	r0, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cbe:	f3c3 1702 	ubfx	r7, r3, #4, #3
 8004cc2:	3701      	adds	r7, #1
       ||
 8004cc4:	4287      	cmp	r7, r0
 8004cc6:	d1aa      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0x1a>
 8004cc8:	e7bf      	b.n	8004c4a <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cca:	6813      	ldr	r3, [r2, #0]
 8004ccc:	039e      	lsls	r6, r3, #14
 8004cce:	d4b1      	bmi.n	8004c34 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cd0:	6817      	ldr	r7, [r2, #0]
 8004cd2:	0379      	lsls	r1, r7, #13
 8004cd4:	d5a3      	bpl.n	8004c1e <RCCEx_PLLSAI1_Config+0x1a>
 8004cd6:	e7ad      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cd8:	6811      	ldr	r1, [r2, #0]
 8004cda:	054f      	lsls	r7, r1, #21
 8004cdc:	d59f      	bpl.n	8004c1e <RCCEx_PLLSAI1_Config+0x1a>
 8004cde:	e7a9      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0x30>
 8004ce0:	2003      	movs	r0, #3
}
 8004ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ce4:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce6:	6931      	ldr	r1, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ce8:	d00b      	beq.n	8004d02 <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cea:	6965      	ldr	r5, [r4, #20]
 8004cec:	f021 6ec0 	bic.w	lr, r1, #100663296	@ 0x6000000
 8004cf0:	086a      	lsrs	r2, r5, #1
 8004cf2:	f42e 43fe 	bic.w	r3, lr, #32512	@ 0x7f00
 8004cf6:	1e50      	subs	r0, r2, #1
 8004cf8:	433b      	orrs	r3, r7
 8004cfa:	ea43 6740 	orr.w	r7, r3, r0, lsl #25
 8004cfe:	6137      	str	r7, [r6, #16]
 8004d00:	e7c2      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d02:	6925      	ldr	r5, [r4, #16]
 8004d04:	f421 01c0 	bic.w	r1, r1, #6291456	@ 0x600000
 8004d08:	086a      	lsrs	r2, r5, #1
 8004d0a:	f421 43fe 	bic.w	r3, r1, #32512	@ 0x7f00
 8004d0e:	1e50      	subs	r0, r2, #1
 8004d10:	433b      	orrs	r3, r7
 8004d12:	ea43 5740 	orr.w	r7, r3, r0, lsl #21
 8004d16:	6137      	str	r7, [r6, #16]
 8004d18:	e7b6      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0x84>
 8004d1a:	bf00      	nop
 8004d1c:	40021000 	.word	0x40021000

08004d20 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d20:	4a3e      	ldr	r2, [pc, #248]	@ (8004e1c <RCCEx_PLLSAI2_Config+0xfc>)
{
 8004d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d24:	68d6      	ldr	r6, [r2, #12]
{
 8004d26:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d28:	07b1      	lsls	r1, r6, #30
{
 8004d2a:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d2c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d2e:	d006      	beq.n	8004d3e <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d30:	68d6      	ldr	r6, [r2, #12]
 8004d32:	f006 0103 	and.w	r1, r6, #3
 8004d36:	4281      	cmp	r1, r0
 8004d38:	d04b      	beq.n	8004dd2 <RCCEx_PLLSAI2_Config+0xb2>
 8004d3a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8004d3e:	2802      	cmp	r0, #2
 8004d40:	d058      	beq.n	8004df4 <RCCEx_PLLSAI2_Config+0xd4>
 8004d42:	2803      	cmp	r0, #3
 8004d44:	d04f      	beq.n	8004de6 <RCCEx_PLLSAI2_Config+0xc6>
 8004d46:	2801      	cmp	r0, #1
 8004d48:	d1f7      	bne.n	8004d3a <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	0793      	lsls	r3, r2, #30
 8004d4e:	d5f5      	bpl.n	8004d3c <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d50:	4e32      	ldr	r6, [pc, #200]	@ (8004e1c <RCCEx_PLLSAI2_Config+0xfc>)
 8004d52:	6867      	ldr	r7, [r4, #4]
 8004d54:	68f1      	ldr	r1, [r6, #12]
 8004d56:	f021 0373 	bic.w	r3, r1, #115	@ 0x73
 8004d5a:	4318      	orrs	r0, r3
 8004d5c:	f107 3cff 	add.w	ip, r7, #4294967295
 8004d60:	ea40 120c 	orr.w	r2, r0, ip, lsl #4
 8004d64:	60f2      	str	r2, [r6, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d66:	4e2d      	ldr	r6, [pc, #180]	@ (8004e1c <RCCEx_PLLSAI2_Config+0xfc>)
 8004d68:	6832      	ldr	r2, [r6, #0]
 8004d6a:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 8004d6e:	6031      	str	r1, [r6, #0]
    tickstart = HAL_GetTick();
 8004d70:	f7fd fd6e 	bl	8002850 <HAL_GetTick>
 8004d74:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d76:	e004      	b.n	8004d82 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d78:	f7fd fd6a 	bl	8002850 <HAL_GetTick>
 8004d7c:	1bc2      	subs	r2, r0, r7
 8004d7e:	2a02      	cmp	r2, #2
 8004d80:	d83c      	bhi.n	8004dfc <RCCEx_PLLSAI2_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d82:	6833      	ldr	r3, [r6, #0]
 8004d84:	009a      	lsls	r2, r3, #2
 8004d86:	d4f7      	bmi.n	8004d78 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d88:	68a0      	ldr	r0, [r4, #8]
 8004d8a:	0207      	lsls	r7, r0, #8
      if(Divider == DIVIDER_P_UPDATE)
 8004d8c:	2d00      	cmp	r5, #0
 8004d8e:	d137      	bne.n	8004e00 <RCCEx_PLLSAI2_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d90:	6975      	ldr	r5, [r6, #20]
 8004d92:	68e1      	ldr	r1, [r4, #12]
 8004d94:	f025 4c78 	bic.w	ip, r5, #4160749568	@ 0xf8000000
 8004d98:	ea47 63c1 	orr.w	r3, r7, r1, lsl #27
 8004d9c:	f42c 42fe 	bic.w	r2, ip, #32512	@ 0x7f00
 8004da0:	4313      	orrs	r3, r2
 8004da2:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8004da4:	4d1d      	ldr	r5, [pc, #116]	@ (8004e1c <RCCEx_PLLSAI2_Config+0xfc>)
 8004da6:	682e      	ldr	r6, [r5, #0]
 8004da8:	f046 5080 	orr.w	r0, r6, #268435456	@ 0x10000000
 8004dac:	6028      	str	r0, [r5, #0]
      tickstart = HAL_GetTick();
 8004dae:	f7fd fd4f 	bl	8002850 <HAL_GetTick>
 8004db2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004db4:	e004      	b.n	8004dc0 <RCCEx_PLLSAI2_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004db6:	f7fd fd4b 	bl	8002850 <HAL_GetTick>
 8004dba:	1b83      	subs	r3, r0, r6
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d81d      	bhi.n	8004dfc <RCCEx_PLLSAI2_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dc0:	682f      	ldr	r7, [r5, #0]
 8004dc2:	00bb      	lsls	r3, r7, #2
 8004dc4:	d5f7      	bpl.n	8004db6 <RCCEx_PLLSAI2_Config+0x96>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dc6:	6969      	ldr	r1, [r5, #20]
 8004dc8:	6964      	ldr	r4, [r4, #20]
 8004dca:	4321      	orrs	r1, r4
 8004dcc:	2000      	movs	r0, #0
 8004dce:	6169      	str	r1, [r5, #20]
}
 8004dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004dd2:	2900      	cmp	r1, #0
 8004dd4:	d0b1      	beq.n	8004d3a <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dd6:	68d3      	ldr	r3, [r2, #12]
       ||
 8004dd8:	6860      	ldr	r0, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dda:	f3c3 1702 	ubfx	r7, r3, #4, #3
 8004dde:	3701      	adds	r7, #1
       ||
 8004de0:	4287      	cmp	r7, r0
 8004de2:	d1aa      	bne.n	8004d3a <RCCEx_PLLSAI2_Config+0x1a>
 8004de4:	e7bf      	b.n	8004d66 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004de6:	6813      	ldr	r3, [r2, #0]
 8004de8:	039e      	lsls	r6, r3, #14
 8004dea:	d4b1      	bmi.n	8004d50 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dec:	6817      	ldr	r7, [r2, #0]
 8004dee:	0379      	lsls	r1, r7, #13
 8004df0:	d5a3      	bpl.n	8004d3a <RCCEx_PLLSAI2_Config+0x1a>
 8004df2:	e7ad      	b.n	8004d50 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004df4:	6811      	ldr	r1, [r2, #0]
 8004df6:	054f      	lsls	r7, r1, #21
 8004df8:	d59f      	bpl.n	8004d3a <RCCEx_PLLSAI2_Config+0x1a>
 8004dfa:	e7a9      	b.n	8004d50 <RCCEx_PLLSAI2_Config+0x30>
 8004dfc:	2003      	movs	r0, #3
}
 8004dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e00:	6975      	ldr	r5, [r6, #20]
 8004e02:	6921      	ldr	r1, [r4, #16]
 8004e04:	f025 6ec0 	bic.w	lr, r5, #100663296	@ 0x6000000
 8004e08:	084b      	lsrs	r3, r1, #1
 8004e0a:	f42e 42fe 	bic.w	r2, lr, #32512	@ 0x7f00
 8004e0e:	1e58      	subs	r0, r3, #1
 8004e10:	433a      	orrs	r2, r7
 8004e12:	ea42 6740 	orr.w	r7, r2, r0, lsl #25
 8004e16:	6177      	str	r7, [r6, #20]
 8004e18:	e7c4      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0x84>
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000

08004e20 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e24:	6803      	ldr	r3, [r0, #0]
 8004e26:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e2e:	d016      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004e30:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004e32:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8004e36:	f000 81e8 	beq.w	800520a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004e3a:	f200 8123 	bhi.w	8005084 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004e3e:	2900      	cmp	r1, #0
 8004e40:	f000 81b7 	beq.w	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004e44:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8004e48:	f040 81d1 	bne.w	80051ee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	3020      	adds	r0, #32
 8004e50:	f7ff ff66 	bl	8004d20 <RCCEx_PLLSAI2_Config>
 8004e54:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e56:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004e58:	2e00      	cmp	r6, #0
 8004e5a:	f000 81e3 	beq.w	8005224 <HAL_RCCEx_PeriphCLKConfig+0x404>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e5e:	04d8      	lsls	r0, r3, #19
 8004e60:	f140 8121 	bpl.w	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004e64:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8004e66:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8004e6a:	f000 81d4 	beq.w	8005216 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004e6e:	f200 817f 	bhi.w	8005170 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004e72:	2900      	cmp	r1, #0
 8004e74:	f000 81a6 	beq.w	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004e78:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004e7c:	f040 81b9 	bne.w	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e80:	2100      	movs	r1, #0
 8004e82:	f104 0020 	add.w	r0, r4, #32
 8004e86:	f7ff ff4b 	bl	8004d20 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e8a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e8c:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8004e8e:	2f00      	cmp	r7, #0
 8004e90:	f040 8175 	bne.w	800517e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e94:	49b4      	ldr	r1, [pc, #720]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004e96:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8004e98:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004e9c:	f022 7540 	bic.w	r5, r2, #50331648	@ 0x3000000
 8004ea0:	4305      	orrs	r5, r0
 8004ea2:	f8c1 5088 	str.w	r5, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ea6:	0399      	lsls	r1, r3, #14
 8004ea8:	f100 8101 	bmi.w	80050ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eac:	07d9      	lsls	r1, r3, #31
 8004eae:	d508      	bpl.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eb0:	4fad      	ldr	r7, [pc, #692]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004eb2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004eb4:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8004eb8:	f020 0103 	bic.w	r1, r0, #3
 8004ebc:	4311      	orrs	r1, r2
 8004ebe:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ec2:	079a      	lsls	r2, r3, #30
 8004ec4:	d508      	bpl.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec6:	4da8      	ldr	r5, [pc, #672]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004ec8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004eca:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 8004ece:	f027 010c 	bic.w	r1, r7, #12
 8004ed2:	4301      	orrs	r1, r0
 8004ed4:	f8c5 1088 	str.w	r1, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed8:	075f      	lsls	r7, r3, #29
 8004eda:	d508      	bpl.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004edc:	4da2      	ldr	r5, [pc, #648]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004ede:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004ee0:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
 8004ee4:	f022 0730 	bic.w	r7, r2, #48	@ 0x30
 8004ee8:	430f      	orrs	r7, r1
 8004eea:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eee:	071d      	lsls	r5, r3, #28
 8004ef0:	d508      	bpl.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ef2:	4d9d      	ldr	r5, [pc, #628]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004ef4:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 8004ef6:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8004efa:	f020 02c0 	bic.w	r2, r0, #192	@ 0xc0
 8004efe:	433a      	orrs	r2, r7
 8004f00:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f04:	06d8      	lsls	r0, r3, #27
 8004f06:	d508      	bpl.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f08:	4997      	ldr	r1, [pc, #604]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004f0a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004f0c:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 8004f10:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
 8004f14:	4302      	orrs	r2, r0
 8004f16:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f1a:	0699      	lsls	r1, r3, #26
 8004f1c:	d508      	bpl.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f1e:	4f92      	ldr	r7, [pc, #584]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004f20:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8004f22:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8004f26:	f421 6540 	bic.w	r5, r1, #3072	@ 0xc00
 8004f2a:	4315      	orrs	r5, r2
 8004f2c:	f8c7 5088 	str.w	r5, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f30:	059a      	lsls	r2, r3, #22
 8004f32:	d508      	bpl.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f34:	4f8c      	ldr	r7, [pc, #560]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004f36:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8004f38:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8004f3c:	f420 2140 	bic.w	r1, r0, #786432	@ 0xc0000
 8004f40:	4329      	orrs	r1, r5
 8004f42:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f46:	055f      	lsls	r7, r3, #21
 8004f48:	d508      	bpl.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f4a:	4f87      	ldr	r7, [pc, #540]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004f4c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8004f4e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004f52:	f422 1140 	bic.w	r1, r2, #3145728	@ 0x300000
 8004f56:	4301      	orrs	r1, r0
 8004f58:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f5c:	065d      	lsls	r5, r3, #25
 8004f5e:	d508      	bpl.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f60:	4d81      	ldr	r5, [pc, #516]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004f62:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004f64:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 8004f68:	f427 5240 	bic.w	r2, r7, #12288	@ 0x3000
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f72:	0618      	lsls	r0, r3, #24
 8004f74:	d508      	bpl.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f76:	4d7c      	ldr	r5, [pc, #496]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004f78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f7a:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8004f7e:	f420 4740 	bic.w	r7, r0, #49152	@ 0xc000
 8004f82:	4317      	orrs	r7, r2
 8004f84:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f88:	05d9      	lsls	r1, r3, #23
 8004f8a:	d508      	bpl.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f8c:	4976      	ldr	r1, [pc, #472]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004f8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f90:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 8004f94:	f425 3740 	bic.w	r7, r5, #196608	@ 0x30000
 8004f98:	4307      	orrs	r7, r0
 8004f9a:	f8c1 7088 	str.w	r7, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f9e:	02da      	lsls	r2, r3, #11
 8004fa0:	d508      	bpl.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fa2:	4971      	ldr	r1, [pc, #452]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004fa4:	6de7      	ldr	r7, [r4, #92]	@ 0x5c
 8004fa6:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 8004faa:	f022 0503 	bic.w	r5, r2, #3
 8004fae:	433d      	orrs	r5, r7
 8004fb0:	f8c1 509c 	str.w	r5, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fb4:	049f      	lsls	r7, r3, #18
 8004fb6:	d510      	bpl.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fb8:	496b      	ldr	r1, [pc, #428]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004fba:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8004fbc:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
 8004fc0:	f020 6240 	bic.w	r2, r0, #201326592	@ 0xc000000
 8004fc4:	432a      	orrs	r2, r5
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fc6:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fce:	f000 8104 	beq.w	80051da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004fd2:	f1b5 6f80 	cmp.w	r5, #67108864	@ 0x4000000
 8004fd6:	f000 8132 	beq.w	800523e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fda:	031d      	lsls	r5, r3, #12
 8004fdc:	d510      	bpl.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fde:	4962      	ldr	r1, [pc, #392]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004fe0:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 8004fe2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004fe6:	f022 6540 	bic.w	r5, r2, #201326592	@ 0xc000000
 8004fea:	433d      	orrs	r5, r7
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fec:	f1b7 6f00 	cmp.w	r7, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ff0:	f8c1 5088 	str.w	r5, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ff4:	f000 80f6 	beq.w	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ff8:	f1b7 6f80 	cmp.w	r7, #67108864	@ 0x4000000
 8004ffc:	f000 8129 	beq.w	8005252 <HAL_RCCEx_PeriphCLKConfig+0x432>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005000:	0358      	lsls	r0, r3, #13
 8005002:	d510      	bpl.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005004:	4958      	ldr	r1, [pc, #352]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005006:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005008:	f8d1 5088 	ldr.w	r5, [r1, #136]	@ 0x88
 800500c:	f025 6740 	bic.w	r7, r5, #201326592	@ 0xc000000
 8005010:	4307      	orrs	r7, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005012:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005016:	f8c1 7088 	str.w	r7, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800501a:	f000 80d9 	beq.w	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800501e:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8005022:	f000 8120 	beq.w	8005266 <HAL_RCCEx_PeriphCLKConfig+0x446>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005026:	0459      	lsls	r1, r3, #17
 8005028:	d510      	bpl.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800502a:	4f4f      	ldr	r7, [pc, #316]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800502c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800502e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8005032:	f021 5040 	bic.w	r0, r1, #805306368	@ 0x30000000
 8005036:	4310      	orrs	r0, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005038:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800503c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005040:	f000 80d9 	beq.w	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005044:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8005048:	f000 80ee 	beq.w	8005228 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800504c:	041a      	lsls	r2, r3, #16
 800504e:	d509      	bpl.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005050:	4d45      	ldr	r5, [pc, #276]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005052:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005056:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
 800505a:	f027 4180 	bic.w	r1, r7, #1073741824	@ 0x40000000
 800505e:	4301      	orrs	r1, r0
 8005060:	f8c5 1088 	str.w	r1, [r5, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005064:	03db      	lsls	r3, r3, #15
 8005066:	d509      	bpl.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005068:	4a3f      	ldr	r2, [pc, #252]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800506a:	f8d4 4084 	ldr.w	r4, [r4, #132]	@ 0x84
 800506e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005072:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8005076:	4325      	orrs	r5, r4
 8005078:	f8c2 5088 	str.w	r5, [r2, #136]	@ 0x88
}
 800507c:	4630      	mov	r0, r6
 800507e:	b003      	add	sp, #12
 8005080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8005084:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8005088:	f040 80b1 	bne.w	80051ee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800508c:	4e36      	ldr	r6, [pc, #216]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800508e:	f8d6 7088 	ldr.w	r7, [r6, #136]	@ 0x88
 8005092:	f427 0040 	bic.w	r0, r7, #12582912	@ 0xc00000
 8005096:	4308      	orrs	r0, r1
 8005098:	f8c6 0088 	str.w	r0, [r6, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800509c:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800509e:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050a2:	f53f aedf 	bmi.w	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 80050a6:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050a8:	0399      	lsls	r1, r3, #14
 80050aa:	f57f aeff 	bpl.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050ae:	4b2e      	ldr	r3, [pc, #184]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80050b0:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80050b2:	00ca      	lsls	r2, r1, #3
 80050b4:	d565      	bpl.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x362>
    FlagStatus       pwrclkchanged = RESET;
 80050b6:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050ba:	4d2c      	ldr	r5, [pc, #176]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80050bc:	6829      	ldr	r1, [r5, #0]
 80050be:	f441 7080 	orr.w	r0, r1, #256	@ 0x100
 80050c2:	6028      	str	r0, [r5, #0]
    tickstart = HAL_GetTick();
 80050c4:	f7fd fbc4 	bl	8002850 <HAL_GetTick>
 80050c8:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050ca:	e005      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050cc:	f7fd fbc0 	bl	8002850 <HAL_GetTick>
 80050d0:	eba0 0009 	sub.w	r0, r0, r9
 80050d4:	2802      	cmp	r0, #2
 80050d6:	d860      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050d8:	682a      	ldr	r2, [r5, #0]
 80050da:	05d3      	lsls	r3, r2, #23
 80050dc:	d5f6      	bpl.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    if(ret == HAL_OK)
 80050de:	2f00      	cmp	r7, #0
 80050e0:	f040 80cb 	bne.w	800527a <HAL_RCCEx_PeriphCLKConfig+0x45a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050e4:	4d20      	ldr	r5, [pc, #128]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050e6:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050ea:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050ee:	f417 7940 	ands.w	r9, r7, #768	@ 0x300
 80050f2:	d026      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80050f4:	4591      	cmp	r9, r2
 80050f6:	d024      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x322>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050f8:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80050fc:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005100:	f443 3080 	orr.w	r0, r3, #65536	@ 0x10000
 8005104:	f8c5 0090 	str.w	r0, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005108:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800510c:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005110:	f427 3380 	bic.w	r3, r7, #65536	@ 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005114:	07cf      	lsls	r7, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005116:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 800511a:	f8c5 0090 	str.w	r0, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800511e:	d510      	bpl.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x322>
        tickstart = HAL_GetTick();
 8005120:	f7fd fb96 	bl	8002850 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005124:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005128:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800512a:	e004      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x316>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512c:	f7fd fb90 	bl	8002850 <HAL_GetTick>
 8005130:	1bc3      	subs	r3, r0, r7
 8005132:	454b      	cmp	r3, r9
 8005134:	d831      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x37a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005136:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 800513a:	0790      	lsls	r0, r2, #30
 800513c:	d5f6      	bpl.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x30c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800513e:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8005142:	4d09      	ldr	r5, [pc, #36]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005144:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8005148:	f421 7740 	bic.w	r7, r1, #768	@ 0x300
 800514c:	4317      	orrs	r7, r2
 800514e:	f8c5 7090 	str.w	r7, [r5, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005152:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8005154:	f1b8 0f00 	cmp.w	r8, #0
 8005158:	f43f aea8 	beq.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800515c:	4902      	ldr	r1, [pc, #8]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800515e:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8005160:	f022 5580 	bic.w	r5, r2, #268435456	@ 0x10000000
 8005164:	658d      	str	r5, [r1, #88]	@ 0x58
 8005166:	e6a1      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8005168:	40021000 	.word	0x40021000
 800516c:	40007000 	.word	0x40007000
    switch(PeriphClkInit->Sai2ClockSelection)
 8005170:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8005174:	d13d      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005176:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 8005178:	2f00      	cmp	r7, #0
 800517a:	f43f ae8b 	beq.w	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800517e:	463e      	mov	r6, r7
 8005180:	e792      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005182:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005184:	f040 5280 	orr.w	r2, r0, #268435456	@ 0x10000000
 8005188:	659a      	str	r2, [r3, #88]	@ 0x58
 800518a:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800518c:	f005 5380 	and.w	r3, r5, #268435456	@ 0x10000000
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005194:	f04f 0801 	mov.w	r8, #1
 8005198:	e78f      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = HAL_TIMEOUT;
 800519a:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800519c:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800519e:	f1b8 0f00 	cmp.w	r8, #0
 80051a2:	f43f ae83 	beq.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a6:	4936      	ldr	r1, [pc, #216]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80051a8:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80051aa:	f022 5580 	bic.w	r5, r2, #268435456	@ 0x10000000
 80051ae:	658d      	str	r5, [r1, #88]	@ 0x58
 80051b0:	e67c      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051b2:	3004      	adds	r0, #4
 80051b4:	f7ff fd26 	bl	8004c04 <RCCEx_PLLSAI1_Config>
 80051b8:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051ba:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80051bc:	2e00      	cmp	r6, #0
 80051be:	f47f ae4e 	bne.w	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80051c2:	e02f      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x404>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051c4:	1d20      	adds	r0, r4, #4
 80051c6:	f7ff fd1d 	bl	8004c04 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051ca:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051cc:	4607      	mov	r7, r0
      break;
 80051ce:	e65e      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d0:	68ca      	ldr	r2, [r1, #12]
 80051d2:	f442 1580 	orr.w	r5, r2, #1048576	@ 0x100000
 80051d6:	60cd      	str	r5, [r1, #12]
 80051d8:	e725      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051da:	68cf      	ldr	r7, [r1, #12]
 80051dc:	f447 1080 	orr.w	r0, r7, #1048576	@ 0x100000
 80051e0:	60c8      	str	r0, [r1, #12]
 80051e2:	e6fa      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e4:	68c8      	ldr	r0, [r1, #12]
 80051e6:	f440 1280 	orr.w	r2, r0, #1048576	@ 0x100000
 80051ea:	60ca      	str	r2, [r1, #12]
 80051ec:	e708      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai1ClockSelection)
 80051ee:	2601      	movs	r6, #1
 80051f0:	e635      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 80051f2:	2601      	movs	r6, #1
 80051f4:	e757      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051f6:	2102      	movs	r1, #2
 80051f8:	1d20      	adds	r0, r4, #4
 80051fa:	f7ff fd03 	bl	8004c04 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051fe:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005200:	2800      	cmp	r0, #0
 8005202:	f43f af23 	beq.w	800504c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005206:	4606      	mov	r6, r0
 8005208:	e720      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800520a:	481d      	ldr	r0, [pc, #116]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800520c:	68c2      	ldr	r2, [r0, #12]
 800520e:	f442 3580 	orr.w	r5, r2, #65536	@ 0x10000
 8005212:	60c5      	str	r5, [r0, #12]
    if(ret == HAL_OK)
 8005214:	e73a      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005216:	491a      	ldr	r1, [pc, #104]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005218:	68ca      	ldr	r2, [r1, #12]
 800521a:	f442 3580 	orr.w	r5, r2, #65536	@ 0x10000
 800521e:	60cd      	str	r5, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8005220:	4637      	mov	r7, r6
 8005222:	e7a9      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005224:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005226:	e731      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005228:	2102      	movs	r1, #2
 800522a:	f104 0020 	add.w	r0, r4, #32
 800522e:	f7ff fd77 	bl	8004d20 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005232:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005234:	2800      	cmp	r0, #0
 8005236:	f43f af09 	beq.w	800504c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800523a:	4606      	mov	r6, r0
 800523c:	e706      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x22c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800523e:	2101      	movs	r1, #1
 8005240:	1d20      	adds	r0, r4, #4
 8005242:	f7ff fcdf 	bl	8004c04 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005246:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8005248:	2800      	cmp	r0, #0
 800524a:	f43f aec6 	beq.w	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800524e:	4606      	mov	r6, r0
 8005250:	e6c3      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005252:	2101      	movs	r1, #1
 8005254:	1d20      	adds	r0, r4, #4
 8005256:	f7ff fcd5 	bl	8004c04 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800525a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800525c:	2800      	cmp	r0, #0
 800525e:	f43f aecf 	beq.w	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005262:	4606      	mov	r6, r0
 8005264:	e6cc      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005266:	2101      	movs	r1, #1
 8005268:	1d20      	adds	r0, r4, #4
 800526a:	f7ff fccb 	bl	8004c04 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800526e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005270:	2800      	cmp	r0, #0
 8005272:	f43f aed8 	beq.w	8005026 <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005276:	4606      	mov	r6, r0
 8005278:	e6d5      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800527a:	463e      	mov	r6, r7
 800527c:	e78e      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x37c>
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000

08005284 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800528a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800528c:	460e      	mov	r6, r1
 800528e:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8005290:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005294:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005296:	f7fd fadb 	bl	8002850 <HAL_GetTick>
 800529a:	4437      	add	r7, r6
 800529c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800529e:	f7fd fad7 	bl	8002850 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052a2:	4958      	ldr	r1, [pc, #352]	@ (8005404 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x180>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052a4:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052a6:	680a      	ldr	r2, [r1, #0]
 80052a8:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 80052ac:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 80052b0:	0d19      	lsrs	r1, r3, #20
 80052b2:	fb07 f101 	mul.w	r1, r7, r1
 80052b6:	3601      	adds	r6, #1
 80052b8:	9101      	str	r1, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80052ba:	d15c      	bne.n	8005376 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xf2>
 80052bc:	68a5      	ldr	r5, [r4, #8]
 80052be:	f415 6fc0 	tst.w	r5, #1536	@ 0x600
 80052c2:	d054      	beq.n	800536e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80052c4:	7b26      	ldrb	r6, [r4, #12]
 80052c6:	fa5f f886 	uxtb.w	r8, r6
 80052ca:	f88d 8003 	strb.w	r8, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80052ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80052d2:	68a3      	ldr	r3, [r4, #8]
 80052d4:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80052d8:	d049      	beq.n	800536e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 80052da:	7b21      	ldrb	r1, [r4, #12]
 80052dc:	b2c8      	uxtb	r0, r1
 80052de:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 80052e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80052e6:	68a7      	ldr	r7, [r4, #8]
 80052e8:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 80052ec:	d03f      	beq.n	800536e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 80052ee:	7b22      	ldrb	r2, [r4, #12]
 80052f0:	b2d5      	uxtb	r5, r2
 80052f2:	f88d 5003 	strb.w	r5, [sp, #3]
      UNUSED(tmpreg8);
 80052f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80052fa:	68a6      	ldr	r6, [r4, #8]
 80052fc:	f416 6fc0 	tst.w	r6, #1536	@ 0x600
 8005300:	d035      	beq.n	800536e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005302:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8005306:	fa5f fe8c 	uxtb.w	lr, ip
 800530a:	f88d e003 	strb.w	lr, [sp, #3]
      UNUSED(tmpreg8);
 800530e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005312:	68a3      	ldr	r3, [r4, #8]
 8005314:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005318:	d029      	beq.n	800536e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 800531a:	7b21      	ldrb	r1, [r4, #12]
 800531c:	b2c8      	uxtb	r0, r1
 800531e:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 8005322:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005326:	68a7      	ldr	r7, [r4, #8]
 8005328:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 800532c:	d01f      	beq.n	800536e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 800532e:	7b22      	ldrb	r2, [r4, #12]
 8005330:	b2d5      	uxtb	r5, r2
 8005332:	f88d 5003 	strb.w	r5, [sp, #3]
      UNUSED(tmpreg8);
 8005336:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800533a:	68a6      	ldr	r6, [r4, #8]
 800533c:	f416 6fc0 	tst.w	r6, #1536	@ 0x600
 8005340:	d015      	beq.n	800536e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 8005342:	f894 800c 	ldrb.w	r8, [r4, #12]
 8005346:	fa5f fc88 	uxtb.w	ip, r8
 800534a:	f88d c003 	strb.w	ip, [sp, #3]
      UNUSED(tmpreg8);
 800534e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005352:	68a3      	ldr	r3, [r4, #8]
 8005354:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005358:	d009      	beq.n	800536e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
      tmpreg8 = *ptmpreg8;
 800535a:	7b21      	ldrb	r1, [r4, #12]
 800535c:	b2c8      	uxtb	r0, r1
 800535e:	f88d 0003 	strb.w	r0, [sp, #3]
      UNUSED(tmpreg8);
 8005362:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005366:	68a7      	ldr	r7, [r4, #8]
 8005368:	f417 6fc0 	tst.w	r7, #1536	@ 0x600
 800536c:	d1aa      	bne.n	80052c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800536e:	2000      	movs	r0, #0
}
 8005370:	b002      	add	sp, #8
 8005372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005376:	4606      	mov	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005378:	4620      	mov	r0, r4
 800537a:	e015      	b.n	80053a8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x124>
      tmpreg8 = *ptmpreg8;
 800537c:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8005380:	fa5f fe8c 	uxtb.w	lr, ip
 8005384:	f88d e003 	strb.w	lr, [sp, #3]
      UNUSED(tmpreg8);
 8005388:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800538c:	f7fd fa60 	bl	8002850 <HAL_GetTick>
 8005390:	1b83      	subs	r3, r0, r6
 8005392:	42bb      	cmp	r3, r7
 8005394:	d20d      	bcs.n	80053b2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x12e>
      if (count == 0U)
 8005396:	9901      	ldr	r1, [sp, #4]
      count--;
 8005398:	9801      	ldr	r0, [sp, #4]
        tmp_timeout = 0U;
 800539a:	2900      	cmp	r1, #0
      count--;
 800539c:	f100 32ff 	add.w	r2, r0, #4294967295
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053a0:	6828      	ldr	r0, [r5, #0]
      count--;
 80053a2:	9201      	str	r2, [sp, #4]
        tmp_timeout = 0U;
 80053a4:	bf08      	it	eq
 80053a6:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 80053a8:	6882      	ldr	r2, [r0, #8]
 80053aa:	f412 6fc0 	tst.w	r2, #1536	@ 0x600
 80053ae:	d1e5      	bne.n	800537c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xf8>
 80053b0:	e7dd      	b.n	800536e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b2:	e9d5 7400 	ldrd	r7, r4, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053b6:	687e      	ldr	r6, [r7, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b8:	f5b4 7f82 	cmp.w	r4, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053bc:	f026 03e0 	bic.w	r3, r6, #224	@ 0xe0
 80053c0:	607b      	str	r3, [r7, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c2:	d013      	beq.n	80053ec <SPI_WaitFifoStateUntilTimeout.constprop.0+0x168>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053c4:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80053c6:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80053ca:	d107      	bne.n	80053dc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x158>
          SPI_RESET_CRC(hspi);
 80053cc:	683e      	ldr	r6, [r7, #0]
 80053ce:	f426 5300 	bic.w	r3, r6, #8192	@ 0x2000
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	f441 5000 	orr.w	r0, r1, #8192	@ 0x2000
 80053da:	6038      	str	r0, [r7, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80053dc:	2701      	movs	r7, #1
        __HAL_UNLOCK(hspi);
 80053de:	2200      	movs	r2, #0
        hspi->State = HAL_SPI_STATE_READY;
 80053e0:	f885 705d 	strb.w	r7, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80053e4:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80053e8:	2003      	movs	r0, #3
 80053ea:	e7c1      	b.n	8005370 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xec>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ec:	68a9      	ldr	r1, [r5, #8]
 80053ee:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80053f2:	d002      	beq.n	80053fa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x176>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80053f8:	d1e4      	bne.n	80053c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x140>
          __HAL_SPI_DISABLE(hspi);
 80053fa:	6838      	ldr	r0, [r7, #0]
 80053fc:	f020 0240 	bic.w	r2, r0, #64	@ 0x40
 8005400:	603a      	str	r2, [r7, #0]
 8005402:	e7df      	b.n	80053c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x140>
 8005404:	20000400 	.word	0x20000400

08005408 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800540c:	b084      	sub	sp, #16
  __IO uint8_t  tmpreg8 = 0;
 800540e:	2300      	movs	r3, #0
 8005410:	188f      	adds	r7, r1, r2
{
 8005412:	460d      	mov	r5, r1
 8005414:	4616      	mov	r6, r2
  __IO uint8_t  tmpreg8 = 0;
 8005416:	f88d 3007 	strb.w	r3, [sp, #7]
{
 800541a:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800541c:	f7fd fa18 	bl	8002850 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005420:	f8df 8190 	ldr.w	r8, [pc, #400]	@ 80055b4 <SPI_EndRxTxTransaction+0x1ac>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005424:	eba7 0900 	sub.w	r9, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005428:	f7fd fa12 	bl	8002850 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800542c:	f8d8 1000 	ldr.w	r1, [r8]
 8005430:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005434:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8005438:	0d19      	lsrs	r1, r3, #20
 800543a:	fb09 f201 	mul.w	r2, r9, r1
 800543e:	9202      	str	r2, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005440:	1c6a      	adds	r2, r5, #1
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	bf18      	it	ne
 8005446:	4682      	movne	sl, r0
 8005448:	d160      	bne.n	800550c <SPI_EndRxTxTransaction+0x104>
 800544a:	6898      	ldr	r0, [r3, #8]
 800544c:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 8005450:	d01b      	beq.n	800548a <SPI_EndRxTxTransaction+0x82>
 8005452:	6899      	ldr	r1, [r3, #8]
 8005454:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 8005458:	d017      	beq.n	800548a <SPI_EndRxTxTransaction+0x82>
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	f412 5fc0 	tst.w	r2, #6144	@ 0x1800
 8005460:	d013      	beq.n	800548a <SPI_EndRxTxTransaction+0x82>
 8005462:	6898      	ldr	r0, [r3, #8]
 8005464:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 8005468:	d00f      	beq.n	800548a <SPI_EndRxTxTransaction+0x82>
 800546a:	6899      	ldr	r1, [r3, #8]
 800546c:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 8005470:	d00b      	beq.n	800548a <SPI_EndRxTxTransaction+0x82>
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	f412 5fc0 	tst.w	r2, #6144	@ 0x1800
 8005478:	d007      	beq.n	800548a <SPI_EndRxTxTransaction+0x82>
 800547a:	6898      	ldr	r0, [r3, #8]
 800547c:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 8005480:	d003      	beq.n	800548a <SPI_EndRxTxTransaction+0x82>
 8005482:	6899      	ldr	r1, [r3, #8]
 8005484:	f411 5fc0 	tst.w	r1, #6144	@ 0x1800
 8005488:	d1df      	bne.n	800544a <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800548a:	f7fd f9e1 	bl	8002850 <HAL_GetTick>
 800548e:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005490:	f7fd f9de 	bl	8002850 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005494:	f8d8 2000 	ldr.w	r2, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005498:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 800549a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800549c:	f3c2 30cb 	ubfx	r0, r2, #15, #12
 80054a0:	fb07 f000 	mul.w	r0, r7, r0
 80054a4:	1c69      	adds	r1, r5, #1
 80054a6:	9003      	str	r0, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054a8:	d144      	bne.n	8005534 <SPI_EndRxTxTransaction+0x12c>
 80054aa:	689f      	ldr	r7, [r3, #8]
 80054ac:	063a      	lsls	r2, r7, #24
 80054ae:	d514      	bpl.n	80054da <SPI_EndRxTxTransaction+0xd2>
 80054b0:	6898      	ldr	r0, [r3, #8]
 80054b2:	0600      	lsls	r0, r0, #24
 80054b4:	d511      	bpl.n	80054da <SPI_EndRxTxTransaction+0xd2>
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	0611      	lsls	r1, r2, #24
 80054ba:	d50e      	bpl.n	80054da <SPI_EndRxTxTransaction+0xd2>
 80054bc:	6899      	ldr	r1, [r3, #8]
 80054be:	060a      	lsls	r2, r1, #24
 80054c0:	d50b      	bpl.n	80054da <SPI_EndRxTxTransaction+0xd2>
 80054c2:	689f      	ldr	r7, [r3, #8]
 80054c4:	063f      	lsls	r7, r7, #24
 80054c6:	d508      	bpl.n	80054da <SPI_EndRxTxTransaction+0xd2>
 80054c8:	6898      	ldr	r0, [r3, #8]
 80054ca:	0600      	lsls	r0, r0, #24
 80054cc:	d505      	bpl.n	80054da <SPI_EndRxTxTransaction+0xd2>
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	0611      	lsls	r1, r2, #24
 80054d2:	d502      	bpl.n	80054da <SPI_EndRxTxTransaction+0xd2>
 80054d4:	6899      	ldr	r1, [r3, #8]
 80054d6:	060a      	lsls	r2, r1, #24
 80054d8:	d4e7      	bmi.n	80054aa <SPI_EndRxTxTransaction+0xa2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054da:	4632      	mov	r2, r6
 80054dc:	4629      	mov	r1, r5
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff fed0 	bl	8005284 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80054e4:	bb50      	cbnz	r0, 800553c <SPI_EndRxTxTransaction+0x134>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80054e6:	b004      	add	sp, #16
 80054e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054ec:	f7fd f9b0 	bl	8002850 <HAL_GetTick>
 80054f0:	eba0 030a 	sub.w	r3, r0, sl
 80054f4:	4599      	cmp	r9, r3
 80054f6:	d929      	bls.n	800554c <SPI_EndRxTxTransaction+0x144>
      if (count == 0U)
 80054f8:	9802      	ldr	r0, [sp, #8]
      count--;
 80054fa:	9a02      	ldr	r2, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80054fc:	6823      	ldr	r3, [r4, #0]
        tmp_timeout = 0U;
 80054fe:	2800      	cmp	r0, #0
      count--;
 8005500:	f102 31ff 	add.w	r1, r2, #4294967295
        tmp_timeout = 0U;
 8005504:	bf08      	it	eq
 8005506:	f04f 0900 	moveq.w	r9, #0
      count--;
 800550a:	9102      	str	r1, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8005512:	d1eb      	bne.n	80054ec <SPI_EndRxTxTransaction+0xe4>
 8005514:	e7b9      	b.n	800548a <SPI_EndRxTxTransaction+0x82>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005516:	f7fd f99b 	bl	8002850 <HAL_GetTick>
 800551a:	eba0 0308 	sub.w	r3, r0, r8
 800551e:	429f      	cmp	r7, r3
 8005520:	d914      	bls.n	800554c <SPI_EndRxTxTransaction+0x144>
      if (count == 0U)
 8005522:	9803      	ldr	r0, [sp, #12]
      count--;
 8005524:	9a03      	ldr	r2, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005526:	6823      	ldr	r3, [r4, #0]
        tmp_timeout = 0U;
 8005528:	2800      	cmp	r0, #0
      count--;
 800552a:	f102 31ff 	add.w	r1, r2, #4294967295
        tmp_timeout = 0U;
 800552e:	bf08      	it	eq
 8005530:	2700      	moveq	r7, #0
      count--;
 8005532:	9103      	str	r1, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005534:	6899      	ldr	r1, [r3, #8]
 8005536:	060b      	lsls	r3, r1, #24
 8005538:	d4ed      	bmi.n	8005516 <SPI_EndRxTxTransaction+0x10e>
 800553a:	e7ce      	b.n	80054da <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553c:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800553e:	f045 0620 	orr.w	r6, r5, #32
 8005542:	6626      	str	r6, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005544:	2003      	movs	r0, #3
}
 8005546:	b004      	add	sp, #16
 8005548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800554c:	e9d4 a500 	ldrd	sl, r5, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005550:	f8da 6004 	ldr.w	r6, [sl, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005554:	f5b5 7f82 	cmp.w	r5, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005558:	f026 07e0 	bic.w	r7, r6, #224	@ 0xe0
 800555c:	f8ca 7004 	str.w	r7, [sl, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005560:	d01a      	beq.n	8005598 <SPI_EndRxTxTransaction+0x190>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005562:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005568:	d10b      	bne.n	8005582 <SPI_EndRxTxTransaction+0x17a>
          SPI_RESET_CRC(hspi);
 800556a:	f8da 5000 	ldr.w	r5, [sl]
 800556e:	f425 5600 	bic.w	r6, r5, #8192	@ 0x2000
 8005572:	f8ca 6000 	str.w	r6, [sl]
 8005576:	f8da 7000 	ldr.w	r7, [sl]
 800557a:	f447 5000 	orr.w	r0, r7, #8192	@ 0x2000
 800557e:	f8ca 0000 	str.w	r0, [sl]
        hspi->State = HAL_SPI_STATE_READY;
 8005582:	2201      	movs	r2, #1
 8005584:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005588:	6e21      	ldr	r1, [r4, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 800558a:	2500      	movs	r5, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800558c:	f041 0320 	orr.w	r3, r1, #32
        __HAL_UNLOCK(hspi);
 8005590:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005594:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005596:	e7d5      	b.n	8005544 <SPI_EndRxTxTransaction+0x13c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005598:	68a0      	ldr	r0, [r4, #8]
 800559a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800559e:	d002      	beq.n	80055a6 <SPI_EndRxTxTransaction+0x19e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055a0:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 80055a4:	d1dd      	bne.n	8005562 <SPI_EndRxTxTransaction+0x15a>
          __HAL_SPI_DISABLE(hspi);
 80055a6:	f8da 2000 	ldr.w	r2, [sl]
 80055aa:	f022 0140 	bic.w	r1, r2, #64	@ 0x40
 80055ae:	f8ca 1000 	str.w	r1, [sl]
 80055b2:	e7d6      	b.n	8005562 <SPI_EndRxTxTransaction+0x15a>
 80055b4:	20000400 	.word	0x20000400

080055b8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d074      	beq.n	80056a6 <HAL_SPI_Init+0xee>
{
 80055bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c0:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055c2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d053      	beq.n	8005670 <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80055ce:	f894 505d 	ldrb.w	r5, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d2:	2200      	movs	r2, #0
 80055d4:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80055d6:	f005 06ff 	and.w	r6, r5, #255	@ 0xff
 80055da:	2d00      	cmp	r5, #0
 80055dc:	d057      	beq.n	800568e <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 80055de:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055e0:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80055e2:	2702      	movs	r7, #2
 80055e4:	f884 705d 	strb.w	r7, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80055e8:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055ea:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80055ee:	f023 0540 	bic.w	r5, r3, #64	@ 0x40
 80055f2:	600d      	str	r5, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f4:	d842      	bhi.n	800567c <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055f6:	d151      	bne.n	800569c <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055fa:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055fe:	f406 5500 	and.w	r5, r6, #8192	@ 0x2000
 8005602:	6863      	ldr	r3, [r4, #4]
 8005604:	68a6      	ldr	r6, [r4, #8]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005606:	f402 6870 	and.w	r8, r2, #3840	@ 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800560a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	f406 4704 	and.w	r7, r6, #33792	@ 0x8400
 8005614:	433a      	orrs	r2, r7
 8005616:	f003 0602 	and.w	r6, r3, #2
 800561a:	4316      	orrs	r6, r2
 800561c:	6962      	ldr	r2, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800561e:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005620:	69e3      	ldr	r3, [r4, #28]
 8005622:	f002 0201 	and.w	r2, r2, #1
 8005626:	4332      	orrs	r2, r6
 8005628:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800562a:	f007 0e08 	and.w	lr, r7, #8
 800562e:	ea4e 0e08 	orr.w	lr, lr, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005632:	6a27      	ldr	r7, [r4, #32]
 8005634:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 8005638:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 800563c:	4313      	orrs	r3, r2
 800563e:	ea43 0208 	orr.w	r2, r3, r8
 8005642:	f007 0780 	and.w	r7, r7, #128	@ 0x80
 8005646:	433a      	orrs	r2, r7
 8005648:	432a      	orrs	r2, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800564a:	0c35      	lsrs	r5, r6, #16
 800564c:	f005 0604 	and.w	r6, r5, #4
 8005650:	f000 0010 	and.w	r0, r0, #16
 8005654:	ea4e 0706 	orr.w	r7, lr, r6
 8005658:	4307      	orrs	r7, r0
 800565a:	ea47 030c 	orr.w	r3, r7, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800565e:	600a      	str	r2, [r1, #0]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005660:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005662:	604b      	str	r3, [r1, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 8005664:	2101      	movs	r1, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005666:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005668:	f884 105d 	strb.w	r1, [r4, #93]	@ 0x5d
}
 800566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005670:	6861      	ldr	r1, [r4, #4]
 8005672:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8005676:	d0aa      	beq.n	80055ce <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005678:	61e0      	str	r0, [r4, #28]
 800567a:	e7a8      	b.n	80055ce <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800567c:	f5b2 6f70 	cmp.w	r2, #3840	@ 0xf00
 8005680:	d113      	bne.n	80056aa <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005682:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005684:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005688:	f407 5500 	and.w	r5, r7, #8192	@ 0x2000
 800568c:	e7b9      	b.n	8005602 <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 800568e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005690:	f884 605c 	strb.w	r6, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005694:	f7fc ff42 	bl	800251c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005698:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800569a:	e7a0      	b.n	80055de <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800569c:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a0:	2500      	movs	r5, #0
 80056a2:	62a5      	str	r5, [r4, #40]	@ 0x28
 80056a4:	e7ad      	b.n	8005602 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 80056a6:	2001      	movs	r0, #1
}
 80056a8:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056aa:	f04f 0c00 	mov.w	ip, #0
 80056ae:	e7f7      	b.n	80056a0 <HAL_SPI_Init+0xe8>

080056b0 <HAL_SPI_TransmitReceive>:
{
 80056b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b4:	4604      	mov	r4, r0
 80056b6:	4691      	mov	r9, r2
 80056b8:	461f      	mov	r7, r3
 80056ba:	9e08      	ldr	r6, [sp, #32]
 80056bc:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 80056be:	f7fd f8c7 	bl	8002850 <HAL_GetTick>
  tmp_state           = hspi->State;
 80056c2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 80056c6:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056c8:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80056ca:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056cc:	d00b      	beq.n	80056e6 <HAL_SPI_TransmitReceive+0x36>
 80056ce:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80056d2:	f040 8099 	bne.w	8005808 <HAL_SPI_TransmitReceive+0x158>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80056d6:	68a0      	ldr	r0, [r4, #8]
 80056d8:	b2d9      	uxtb	r1, r3
 80056da:	2800      	cmp	r0, #0
 80056dc:	f040 8094 	bne.w	8005808 <HAL_SPI_TransmitReceive+0x158>
 80056e0:	2904      	cmp	r1, #4
 80056e2:	f040 8091 	bne.w	8005808 <HAL_SPI_TransmitReceive+0x158>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056e6:	f1b8 0f00 	cmp.w	r8, #0
 80056ea:	f000 8168 	beq.w	80059be <HAL_SPI_TransmitReceive+0x30e>
 80056ee:	f1b9 0f00 	cmp.w	r9, #0
 80056f2:	f000 8164 	beq.w	80059be <HAL_SPI_TransmitReceive+0x30e>
 80056f6:	2f00      	cmp	r7, #0
 80056f8:	f000 8161 	beq.w	80059be <HAL_SPI_TransmitReceive+0x30e>
  __HAL_LOCK(hspi);
 80056fc:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8005700:	2b01      	cmp	r3, #1
 8005702:	f000 8081 	beq.w	8005808 <HAL_SPI_TransmitReceive+0x158>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005706:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800570a:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800570c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005710:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005712:	bf1c      	itt	ne
 8005714:	2005      	movne	r0, #5
 8005716:	f884 005d 	strbne.w	r0, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800571a:	2300      	movs	r3, #0
  __HAL_LOCK(hspi);
 800571c:	f04f 0c01 	mov.w	ip, #1
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005720:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005724:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8005726:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 800572a:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800572e:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hspi);
 8005730:	f884 c05c 	strb.w	ip, [r4, #92]	@ 0x5c
  hspi->RxXferSize  = Size;
 8005734:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005738:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800573c:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800573e:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005740:	d965      	bls.n	800580e <HAL_SPI_TransmitReceive+0x15e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005742:	6858      	ldr	r0, [r3, #4]
 8005744:	f420 5180 	bic.w	r1, r0, #4096	@ 0x1000
 8005748:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	0640      	lsls	r0, r0, #25
 800574e:	d403      	bmi.n	8005758 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8005750:	6819      	ldr	r1, [r3, #0]
 8005752:	f041 0040 	orr.w	r0, r1, #64	@ 0x40
 8005756:	6018      	str	r0, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005758:	2a00      	cmp	r2, #0
 800575a:	f000 80f1 	beq.w	8005940 <HAL_SPI_TransmitReceive+0x290>
 800575e:	2f01      	cmp	r7, #1
 8005760:	f000 80ee 	beq.w	8005940 <HAL_SPI_TransmitReceive+0x290>
 8005764:	1c73      	adds	r3, r6, #1
        txallowed = 1U;
 8005766:	f04f 0701 	mov.w	r7, #1
 800576a:	d031      	beq.n	80057d0 <HAL_SPI_TransmitReceive+0x120>
 800576c:	e0cf      	b.n	800590e <HAL_SPI_TransmitReceive+0x25e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	6890      	ldr	r0, [r2, #8]
 8005772:	0780      	lsls	r0, r0, #30
 8005774:	d513      	bpl.n	800579e <HAL_SPI_TransmitReceive+0xee>
 8005776:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 800577a:	fa1f f38c 	uxth.w	r3, ip
 800577e:	b173      	cbz	r3, 800579e <HAL_SPI_TransmitReceive+0xee>
 8005780:	b167      	cbz	r7, 800579c <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005782:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8005784:	f837 1b02 	ldrh.w	r1, [r7], #2
 8005788:	60d1      	str	r1, [r2, #12]
        hspi->TxXferCount--;
 800578a:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800578e:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005790:	f10e 30ff 	add.w	r0, lr, #4294967295
 8005794:	fa1f f880 	uxth.w	r8, r0
 8005798:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800579c:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800579e:	6893      	ldr	r3, [r2, #8]
 80057a0:	f013 0901 	ands.w	r9, r3, #1
 80057a4:	d012      	beq.n	80057cc <HAL_SPI_TransmitReceive+0x11c>
 80057a6:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
 80057aa:	fa1f f18c 	uxth.w	r1, ip
 80057ae:	b169      	cbz	r1, 80057cc <HAL_SPI_TransmitReceive+0x11c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057b0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80057b2:	68d2      	ldr	r2, [r2, #12]
 80057b4:	f820 2b02 	strh.w	r2, [r0], #2
        hspi->RxXferCount--;
 80057b8:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057bc:	6420      	str	r0, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80057be:	f10e 38ff 	add.w	r8, lr, #4294967295
 80057c2:	fa1f f388 	uxth.w	r3, r8
        txallowed = 1U;
 80057c6:	464f      	mov	r7, r9
        hspi->RxXferCount--;
 80057c8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057cc:	f7fd f840 	bl	8002850 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057d0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80057d2:	b290      	uxth	r0, r2
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d1ca      	bne.n	800576e <HAL_SPI_TransmitReceive+0xbe>
 80057d8:	f8b4 9046 	ldrh.w	r9, [r4, #70]	@ 0x46
 80057dc:	fa1f f389 	uxth.w	r3, r9
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1c4      	bne.n	800576e <HAL_SPI_TransmitReceive+0xbe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e4:	462a      	mov	r2, r5
 80057e6:	4631      	mov	r1, r6
 80057e8:	4620      	mov	r0, r4
 80057ea:	f7ff fe0d 	bl	8005408 <SPI_EndRxTxTransaction>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f040 80e0 	bne.w	80059b4 <HAL_SPI_TransmitReceive+0x304>
  hspi->State = HAL_SPI_STATE_READY;
 80057f4:	2701      	movs	r7, #1
 80057f6:	f884 705d 	strb.w	r7, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057fa:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 80057fc:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005800:	1e08      	subs	r0, r1, #0
 8005802:	bf18      	it	ne
 8005804:	2001      	movne	r0, #1
 8005806:	e000      	b.n	800580a <HAL_SPI_TransmitReceive+0x15a>
    return HAL_BUSY;
 8005808:	2002      	movs	r0, #2
}
 800580a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800580e:	2f01      	cmp	r7, #1
 8005810:	f000 80f5 	beq.w	80059fe <HAL_SPI_TransmitReceive+0x34e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005814:	6858      	ldr	r0, [r3, #4]
 8005816:	f420 5180 	bic.w	r1, r0, #4096	@ 0x1000
 800581a:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800581c:	681f      	ldr	r7, [r3, #0]
 800581e:	0679      	lsls	r1, r7, #25
 8005820:	d403      	bmi.n	800582a <HAL_SPI_TransmitReceive+0x17a>
    __HAL_SPI_ENABLE(hspi);
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	f040 0140 	orr.w	r1, r0, #64	@ 0x40
 8005828:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800582a:	b97a      	cbnz	r2, 800584c <HAL_SPI_TransmitReceive+0x19c>
      if (hspi->TxXferCount > 1U)
 800582c:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
 8005830:	fa1f f28e 	uxth.w	r2, lr
 8005834:	2a01      	cmp	r2, #1
 8005836:	f240 80c4 	bls.w	80059c2 <HAL_SPI_TransmitReceive+0x312>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800583a:	4642      	mov	r2, r8
 800583c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005840:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount -= 2U;
 8005842:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005844:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005846:	1e9f      	subs	r7, r3, #2
 8005848:	b2b8      	uxth	r0, r7
 800584a:	87e0      	strh	r0, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800584c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800584e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005850:	b291      	uxth	r1, r2
 8005852:	b929      	cbnz	r1, 8005860 <HAL_SPI_TransmitReceive+0x1b0>
 8005854:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
 8005858:	fa1f f38e 	uxth.w	r3, lr
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0c1      	beq.n	80057e4 <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005860:	6822      	ldr	r2, [r4, #0]
 8005862:	6890      	ldr	r0, [r2, #8]
 8005864:	0781      	lsls	r1, r0, #30
 8005866:	d506      	bpl.n	8005876 <HAL_SPI_TransmitReceive+0x1c6>
 8005868:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800586a:	b28b      	uxth	r3, r1
 800586c:	b11b      	cbz	r3, 8005876 <HAL_SPI_TransmitReceive+0x1c6>
 800586e:	2f00      	cmp	r7, #0
 8005870:	f040 8081 	bne.w	8005976 <HAL_SPI_TransmitReceive+0x2c6>
        txallowed = 0U;
 8005874:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005876:	6893      	ldr	r3, [r2, #8]
 8005878:	f013 0801 	ands.w	r8, r3, #1
 800587c:	d01b      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0x206>
 800587e:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
 8005882:	b281      	uxth	r1, r0
 8005884:	b1b9      	cbz	r1, 80058b6 <HAL_SPI_TransmitReceive+0x206>
        if (hspi->RxXferCount > 1U)
 8005886:	f8b4 7046 	ldrh.w	r7, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800588a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 800588c:	b2bb      	uxth	r3, r7
 800588e:	2b01      	cmp	r3, #1
 8005890:	d964      	bls.n	800595c <HAL_SPI_TransmitReceive+0x2ac>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005892:	68d0      	ldr	r0, [r2, #12]
 8005894:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->RxXferCount -= 2U;
 8005898:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800589c:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800589e:	f1ac 0e02 	sub.w	lr, ip, #2
 80058a2:	fa1f f18e 	uxth.w	r1, lr
 80058a6:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80058aa:	f8b4 7046 	ldrh.w	r7, [r4, #70]	@ 0x46
 80058ae:	b2bb      	uxth	r3, r7
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d940      	bls.n	8005936 <HAL_SPI_TransmitReceive+0x286>
        txallowed = 1U;
 80058b4:	4647      	mov	r7, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058b6:	f7fc ffcb 	bl	8002850 <HAL_GetTick>
 80058ba:	1b42      	subs	r2, r0, r5
 80058bc:	42b2      	cmp	r2, r6
 80058be:	d3c6      	bcc.n	800584e <HAL_SPI_TransmitReceive+0x19e>
 80058c0:	1c73      	adds	r3, r6, #1
 80058c2:	d0c4      	beq.n	800584e <HAL_SPI_TransmitReceive+0x19e>
        hspi->State = HAL_SPI_STATE_READY;
 80058c4:	2601      	movs	r6, #1
        __HAL_UNLOCK(hspi);
 80058c6:	2500      	movs	r5, #0
        hspi->State = HAL_SPI_STATE_READY;
 80058c8:	f884 605d 	strb.w	r6, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80058cc:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80058d0:	2003      	movs	r0, #3
}
 80058d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058d6:	b157      	cbz	r7, 80058ee <HAL_SPI_TransmitReceive+0x23e>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058d8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 80058da:	f837 3b02 	ldrh.w	r3, [r7], #2
 80058de:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80058e0:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e4:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80058e6:	f108 31ff 	add.w	r1, r8, #4294967295
 80058ea:	b288      	uxth	r0, r1
 80058ec:	87e0      	strh	r0, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80058ee:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058f0:	6893      	ldr	r3, [r2, #8]
 80058f2:	f013 0901 	ands.w	r9, r3, #1
 80058f6:	d005      	beq.n	8005904 <HAL_SPI_TransmitReceive+0x254>
 80058f8:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
 80058fc:	fa1f f18c 	uxth.w	r1, ip
 8005900:	2900      	cmp	r1, #0
 8005902:	d16d      	bne.n	80059e0 <HAL_SPI_TransmitReceive+0x330>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005904:	f7fc ffa4 	bl	8002850 <HAL_GetTick>
 8005908:	1b41      	subs	r1, r0, r5
 800590a:	42b1      	cmp	r1, r6
 800590c:	d2da      	bcs.n	80058c4 <HAL_SPI_TransmitReceive+0x214>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590e:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
 8005912:	fa1f f38e 	uxth.w	r3, lr
 8005916:	b92b      	cbnz	r3, 8005924 <HAL_SPI_TransmitReceive+0x274>
 8005918:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800591c:	b288      	uxth	r0, r1
 800591e:	2800      	cmp	r0, #0
 8005920:	f43f af60 	beq.w	80057e4 <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005924:	6822      	ldr	r2, [r4, #0]
 8005926:	6893      	ldr	r3, [r2, #8]
 8005928:	0799      	lsls	r1, r3, #30
 800592a:	d5e1      	bpl.n	80058f0 <HAL_SPI_TransmitReceive+0x240>
 800592c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800592e:	b288      	uxth	r0, r1
 8005930:	2800      	cmp	r0, #0
 8005932:	d0dd      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x240>
 8005934:	e7cf      	b.n	80058d6 <HAL_SPI_TransmitReceive+0x226>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005936:	6850      	ldr	r0, [r2, #4]
 8005938:	f440 5180 	orr.w	r1, r0, #4096	@ 0x1000
 800593c:	6051      	str	r1, [r2, #4]
 800593e:	e7b9      	b.n	80058b4 <HAL_SPI_TransmitReceive+0x204>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005940:	4647      	mov	r7, r8
 8005942:	f837 2b02 	ldrh.w	r2, [r7], #2
 8005946:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005948:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800594c:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800594e:	f108 39ff 	add.w	r9, r8, #4294967295
 8005952:	fa1f fc89 	uxth.w	ip, r9
 8005956:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 800595a:	e703      	b.n	8005764 <HAL_SPI_TransmitReceive+0xb4>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800595c:	7b12      	ldrb	r2, [r2, #12]
 800595e:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8005960:	f8b4 9046 	ldrh.w	r9, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr++;
 8005964:	6c20      	ldr	r0, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005966:	f109 37ff 	add.w	r7, r9, #4294967295
          hspi->pRxBuffPtr++;
 800596a:	3001      	adds	r0, #1
          hspi->RxXferCount--;
 800596c:	b2bb      	uxth	r3, r7
          hspi->pRxBuffPtr++;
 800596e:	6420      	str	r0, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005970:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8005974:	e79e      	b.n	80058b4 <HAL_SPI_TransmitReceive+0x204>
        if (hspi->TxXferCount > 1U)
 8005976:	8fe7      	ldrh	r7, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005978:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800597a:	b2b8      	uxth	r0, r7
 800597c:	2801      	cmp	r0, #1
 800597e:	d90c      	bls.n	800599a <HAL_SPI_TransmitReceive+0x2ea>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005980:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005984:	60d1      	str	r1, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005986:	f8b4 903e 	ldrh.w	r9, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800598a:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800598c:	f1a9 0c02 	sub.w	ip, r9, #2
 8005990:	fa1f fe8c 	uxth.w	lr, ip
 8005994:	f8a4 e03e 	strh.w	lr, [r4, #62]	@ 0x3e
 8005998:	e76c      	b.n	8005874 <HAL_SPI_TransmitReceive+0x1c4>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800599a:	7819      	ldrb	r1, [r3, #0]
 800599c:	7311      	strb	r1, [r2, #12]
          hspi->TxXferCount--;
 800599e:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 80059a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80059a4:	f108 37ff 	add.w	r7, r8, #4294967295
          hspi->pTxBuffPtr++;
 80059a8:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80059aa:	b2b8      	uxth	r0, r7
          hspi->pTxBuffPtr++;
 80059ac:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80059ae:	87e0      	strh	r0, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059b0:	6822      	ldr	r2, [r4, #0]
 80059b2:	e75f      	b.n	8005874 <HAL_SPI_TransmitReceive+0x1c4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059b4:	2620      	movs	r6, #32
    __HAL_UNLOCK(hspi);
 80059b6:	2500      	movs	r5, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059b8:	6626      	str	r6, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80059ba:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80059be:	2001      	movs	r0, #1
 80059c0:	e723      	b.n	800580a <HAL_SPI_TransmitReceive+0x15a>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80059c2:	f898 7000 	ldrb.w	r7, [r8]
 80059c6:	731f      	strb	r7, [r3, #12]
        hspi->TxXferCount--;
 80059c8:	f8b4 803e 	ldrh.w	r8, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 80059cc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80059ce:	f108 39ff 	add.w	r9, r8, #4294967295
        hspi->pTxBuffPtr++;
 80059d2:	3001      	adds	r0, #1
        hspi->TxXferCount--;
 80059d4:	fa1f fc89 	uxth.w	ip, r9
        hspi->pTxBuffPtr++;
 80059d8:	63a0      	str	r0, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80059da:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 80059de:	e735      	b.n	800584c <HAL_SPI_TransmitReceive+0x19c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059e0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80059e2:	68d2      	ldr	r2, [r2, #12]
 80059e4:	f820 2b02 	strh.w	r2, [r0], #2
        hspi->RxXferCount--;
 80059e8:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ec:	6420      	str	r0, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80059ee:	f10e 38ff 	add.w	r8, lr, #4294967295
 80059f2:	fa1f f388 	uxth.w	r3, r8
        txallowed = 1U;
 80059f6:	464f      	mov	r7, r9
        hspi->RxXferCount--;
 80059f8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 80059fc:	e782      	b.n	8005904 <HAL_SPI_TransmitReceive+0x254>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059fe:	685f      	ldr	r7, [r3, #4]
 8005a00:	f447 5280 	orr.w	r2, r7, #4096	@ 0x1000
 8005a04:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	0640      	lsls	r0, r0, #25
 8005a0a:	f53f af0f 	bmi.w	800582c <HAL_SPI_TransmitReceive+0x17c>
    __HAL_SPI_ENABLE(hspi);
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	f041 0740 	orr.w	r7, r1, #64	@ 0x40
 8005a14:	601f      	str	r7, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a16:	e709      	b.n	800582c <HAL_SPI_TransmitReceive+0x17c>

08005a18 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	f000 808c 	beq.w	8005b36 <HAL_TIM_Base_Init+0x11e>
{
 8005a1e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a20:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005a24:	4604      	mov	r4, r0
 8005a26:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d078      	beq.n	8005b20 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a2e:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a30:	4942      	ldr	r1, [pc, #264]	@ (8005b3c <HAL_TIM_Base_Init+0x124>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005a32:	2002      	movs	r0, #2
 8005a34:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a38:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005a3a:	681d      	ldr	r5, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a3c:	d05c      	beq.n	8005af8 <HAL_TIM_Base_Init+0xe0>
 8005a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a42:	d024      	beq.n	8005a8e <HAL_TIM_Base_Init+0x76>
 8005a44:	f5a1 3c94 	sub.w	ip, r1, #75776	@ 0x12800
 8005a48:	4563      	cmp	r3, ip
 8005a4a:	d020      	beq.n	8005a8e <HAL_TIM_Base_Init+0x76>
 8005a4c:	f50c 6280 	add.w	r2, ip, #1024	@ 0x400
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d01c      	beq.n	8005a8e <HAL_TIM_Base_Init+0x76>
 8005a54:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8005a58:	4283      	cmp	r3, r0
 8005a5a:	d018      	beq.n	8005a8e <HAL_TIM_Base_Init+0x76>
 8005a5c:	f500 3194 	add.w	r1, r0, #75776	@ 0x12800
 8005a60:	428b      	cmp	r3, r1
 8005a62:	d049      	beq.n	8005af8 <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a64:	f501 6240 	add.w	r2, r1, #3072	@ 0xc00
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d05e      	beq.n	8005b2a <HAL_TIM_Base_Init+0x112>
 8005a6c:	4834      	ldr	r0, [pc, #208]	@ (8005b40 <HAL_TIM_Base_Init+0x128>)
 8005a6e:	4283      	cmp	r3, r0
 8005a70:	d05b      	beq.n	8005b2a <HAL_TIM_Base_Init+0x112>
 8005a72:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 8005a76:	4563      	cmp	r3, ip
 8005a78:	d057      	beq.n	8005b2a <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a7a:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8005a7e:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a80:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a82:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a84:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005a86:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a88:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a8a:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a8c:	e010      	b.n	8005ab0 <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 8005a8e:	68a0      	ldr	r0, [r4, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a90:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a92:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a96:	4305      	orrs	r5, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a98:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a9a:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a9e:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa0:	f022 0580 	bic.w	r5, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa4:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005aa6:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa8:	430d      	orrs	r5, r1
  TIMx->CR1 = tmpcr1;
 8005aaa:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aac:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005aae:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ab4:	6918      	ldr	r0, [r3, #16]
 8005ab6:	07c2      	lsls	r2, r0, #31
 8005ab8:	d503      	bpl.n	8005ac2 <HAL_TIM_Base_Init+0xaa>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005aba:	691d      	ldr	r5, [r3, #16]
 8005abc:	f025 0101 	bic.w	r1, r5, #1
 8005ac0:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005acc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005ad0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005ad4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005adc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005ae4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005ae8:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005aec:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005af0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005af4:	2000      	movs	r0, #0
}
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005af8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005afa:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005afc:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b00:	4305      	orrs	r5, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b02:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b06:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b08:	69a1      	ldr	r1, [r4, #24]
 8005b0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b0e:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005b10:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b12:	68e0      	ldr	r0, [r4, #12]
 8005b14:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b16:	6865      	ldr	r5, [r4, #4]
 8005b18:	629d      	str	r5, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005b1a:	6961      	ldr	r1, [r4, #20]
 8005b1c:	6319      	str	r1, [r3, #48]	@ 0x30
 8005b1e:	e7c7      	b.n	8005ab0 <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 8005b20:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005b24:	f7fc fe02 	bl	800272c <HAL_TIM_Base_MspInit>
 8005b28:	e781      	b.n	8005a2e <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b2c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b2e:	f425 7240 	bic.w	r2, r5, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b32:	4302      	orrs	r2, r0
 8005b34:	e7e9      	b.n	8005b0a <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 8005b36:	2001      	movs	r0, #1
}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	40014400 	.word	0x40014400

08005b44 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005b44:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d123      	bne.n	8005b94 <HAL_TIM_Base_Start+0x50>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4c:	6803      	ldr	r3, [r0, #0]
 8005b4e:	4a17      	ldr	r2, [pc, #92]	@ (8005bac <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b52:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8005b54:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b58:	d01e      	beq.n	8005b98 <HAL_TIM_Base_Start+0x54>
 8005b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b5e:	d01b      	beq.n	8005b98 <HAL_TIM_Base_Start+0x54>
 8005b60:	f5a2 3094 	sub.w	r0, r2, #75776	@ 0x12800
 8005b64:	4283      	cmp	r3, r0
 8005b66:	d017      	beq.n	8005b98 <HAL_TIM_Base_Start+0x54>
 8005b68:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 8005b6c:	4563      	cmp	r3, ip
 8005b6e:	d013      	beq.n	8005b98 <HAL_TIM_Base_Start+0x54>
 8005b70:	f50c 6280 	add.w	r2, ip, #1024	@ 0x400
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00f      	beq.n	8005b98 <HAL_TIM_Base_Start+0x54>
 8005b78:	f502 3194 	add.w	r1, r2, #75776	@ 0x12800
 8005b7c:	428b      	cmp	r3, r1
 8005b7e:	d00b      	beq.n	8005b98 <HAL_TIM_Base_Start+0x54>
 8005b80:	f501 6040 	add.w	r0, r1, #3072	@ 0xc00
 8005b84:	4283      	cmp	r3, r0
 8005b86:	d007      	beq.n	8005b98 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	f040 0101 	orr.w	r1, r0, #1
 8005b8e:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8005b90:	2000      	movs	r0, #0
 8005b92:	4770      	bx	lr
    return HAL_ERROR;
 8005b94:	2001      	movs	r0, #1
}
 8005b96:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b98:	6899      	ldr	r1, [r3, #8]
 8005b9a:	4a05      	ldr	r2, [pc, #20]	@ (8005bb0 <HAL_TIM_Base_Start+0x6c>)
 8005b9c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9e:	2a06      	cmp	r2, #6
 8005ba0:	d0f6      	beq.n	8005b90 <HAL_TIM_Base_Start+0x4c>
 8005ba2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005ba6:	d1ef      	bne.n	8005b88 <HAL_TIM_Base_Start+0x44>
  return HAL_OK;
 8005ba8:	2000      	movs	r0, #0
 8005baa:	4770      	bx	lr
 8005bac:	40012c00 	.word	0x40012c00
 8005bb0:	00010007 	.word	0x00010007

08005bb4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005bb4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d070      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0xea>
 8005bbc:	4602      	mov	r2, r0
{
 8005bbe:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8005bc0:	6804      	ldr	r4, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc2:	4b50      	ldr	r3, [pc, #320]	@ (8005d04 <HAL_TIM_ConfigClockSource+0x150>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	f882 503d 	strb.w	r5, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005bd0:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd2:	402b      	ands	r3, r5
  switch (sClockSourceConfig->ClockSource)
 8005bd4:	680d      	ldr	r5, [r1, #0]
  htim->Instance->SMCR = tmpsmcr;
 8005bd6:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005bd8:	2d60      	cmp	r5, #96	@ 0x60
 8005bda:	d062      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0xee>
 8005bdc:	d825      	bhi.n	8005c2a <HAL_TIM_ConfigClockSource+0x76>
 8005bde:	2d40      	cmp	r5, #64	@ 0x40
 8005be0:	d078      	beq.n	8005cd4 <HAL_TIM_ConfigClockSource+0x120>
 8005be2:	d94b      	bls.n	8005c7c <HAL_TIM_ConfigClockSource+0xc8>
 8005be4:	2d50      	cmp	r5, #80	@ 0x50
 8005be6:	d117      	bne.n	8005c18 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8005be8:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005bea:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bec:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bee:	6a23      	ldr	r3, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bf0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005bf4:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bf6:	f023 0501 	bic.w	r5, r3, #1
 8005bfa:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bfc:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bfe:	f023 05f0 	bic.w	r5, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c02:	ea45 1000 	orr.w	r0, r5, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c06:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 8005c08:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c0a:	68a1      	ldr	r1, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c0c:	f021 0c70 	bic.w	ip, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c10:	f04c 0357 	orr.w	r3, ip, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c14:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c16:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 8005c1a:	f04f 0c00 	mov.w	ip, #0
  htim->State = HAL_TIM_STATE_READY;
 8005c1e:	f882 403d 	strb.w	r4, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005c22:	f882 c03c 	strb.w	ip, [r2, #60]	@ 0x3c
}
 8005c26:	bc30      	pop	{r4, r5}
 8005c28:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005c2a:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8005c2e:	d0f2      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x62>
 8005c30:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 8005c34:	d110      	bne.n	8005c58 <HAL_TIM_ConfigClockSource+0xa4>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c36:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005c3a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c3c:	432b      	orrs	r3, r5
 8005c3e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c40:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c44:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005c48:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4a:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c4c:	68a0      	ldr	r0, [r4, #8]
 8005c4e:	f440 4580 	orr.w	r5, r0, #16384	@ 0x4000
 8005c52:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c54:	2000      	movs	r0, #0
 8005c56:	e7df      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8005c58:	2d70      	cmp	r5, #112	@ 0x70
 8005c5a:	d1dd      	bne.n	8005c18 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c5c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005c60:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c62:	432b      	orrs	r3, r5
 8005c64:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c66:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005c6e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005c70:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005c72:	68a0      	ldr	r0, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c74:	f040 0577 	orr.w	r5, r0, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005c78:	60a5      	str	r5, [r4, #8]
      break;
 8005c7a:	e7cc      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8005c7c:	2d20      	cmp	r5, #32
 8005c7e:	d002      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0xd2>
 8005c80:	d909      	bls.n	8005c96 <HAL_TIM_ConfigClockSource+0xe2>
 8005c82:	2d30      	cmp	r5, #48	@ 0x30
 8005c84:	d1c8      	bne.n	8005c18 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8005c86:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c88:	f020 0170 	bic.w	r1, r0, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c8c:	430d      	orrs	r5, r1
 8005c8e:	f045 0507 	orr.w	r5, r5, #7
  TIMx->SMCR = tmpsmcr;
 8005c92:	60a5      	str	r5, [r4, #8]
}
 8005c94:	e7bf      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8005c96:	f035 0110 	bics.w	r1, r5, #16
 8005c9a:	d1bd      	bne.n	8005c18 <HAL_TIM_ConfigClockSource+0x64>
 8005c9c:	e7f3      	b.n	8005c86 <HAL_TIM_ConfigClockSource+0xd2>
  __HAL_LOCK(htim);
 8005c9e:	2002      	movs	r0, #2
}
 8005ca0:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8005ca2:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005ca4:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8005ca6:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ca8:	f021 0ca0 	bic.w	ip, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cac:	ea4c 1305 	orr.w	r3, ip, r5, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb0:	6a25      	ldr	r5, [r4, #32]
 8005cb2:	f025 0110 	bic.w	r1, r5, #16
 8005cb6:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb8:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cba:	f425 4c70 	bic.w	ip, r5, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cbe:	ea4c 3000 	orr.w	r0, ip, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005cc2:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 8005cc4:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005cc6:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cc8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ccc:	f041 0567 	orr.w	r5, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005cd0:	60a5      	str	r5, [r4, #8]
}
 8005cd2:	e7a0      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x62>
                               sClockSourceConfig->ClockPolarity,
 8005cd4:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005cd6:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8005cd8:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cda:	f021 050a 	bic.w	r5, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005cde:	431d      	orrs	r5, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ce0:	6a23      	ldr	r3, [r4, #32]
 8005ce2:	f023 0101 	bic.w	r1, r3, #1
 8005ce6:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce8:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cea:	f023 01f0 	bic.w	r1, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cee:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005cf2:	61a0      	str	r0, [r4, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	6225      	str	r5, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005cf6:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cf8:	f025 0c70 	bic.w	ip, r5, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cfc:	f04c 0347 	orr.w	r3, ip, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005d00:	60a3      	str	r3, [r4, #8]
}
 8005d02:	e788      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x62>
 8005d04:	fffe0088 	.word	0xfffe0088

08005d08 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop

08005d0c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop

08005d10 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop

08005d14 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop

08005d18 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop

08005d1c <HAL_TIM_IRQHandler>:
{
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8005d1e:	6803      	ldr	r3, [r0, #0]
 8005d20:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d22:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d24:	07a1      	lsls	r1, r4, #30
{
 8005d26:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d28:	d501      	bpl.n	8005d2e <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d2a:	07b2      	lsls	r2, r6, #30
 8005d2c:	d457      	bmi.n	8005dde <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d2e:	0767      	lsls	r7, r4, #29
 8005d30:	d501      	bpl.n	8005d36 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d32:	0770      	lsls	r0, r6, #29
 8005d34:	d440      	bmi.n	8005db8 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d36:	0721      	lsls	r1, r4, #28
 8005d38:	d501      	bpl.n	8005d3e <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d3a:	0732      	lsls	r2, r6, #28
 8005d3c:	d42a      	bmi.n	8005d94 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d3e:	06e7      	lsls	r7, r4, #27
 8005d40:	d501      	bpl.n	8005d46 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d42:	06f0      	lsls	r0, r6, #27
 8005d44:	d413      	bmi.n	8005d6e <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d46:	07e1      	lsls	r1, r4, #31
 8005d48:	d501      	bpl.n	8005d4e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d4a:	07f2      	lsls	r2, r6, #31
 8005d4c:	d465      	bmi.n	8005e1a <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d4e:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d52:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d56:	d052      	beq.n	8005dfe <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d58:	0633      	lsls	r3, r6, #24
 8005d5a:	d466      	bmi.n	8005e2a <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d5c:	0660      	lsls	r0, r4, #25
 8005d5e:	d501      	bpl.n	8005d64 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d60:	0671      	lsls	r1, r6, #25
 8005d62:	d473      	bmi.n	8005e4c <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d64:	06a2      	lsls	r2, r4, #26
 8005d66:	d501      	bpl.n	8005d6c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d68:	06b3      	lsls	r3, r6, #26
 8005d6a:	d44d      	bmi.n	8005e08 <HAL_TIM_IRQHandler+0xec>
}
 8005d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d74:	2108      	movs	r1, #8
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d78:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d7a:	69df      	ldr	r7, [r3, #28]
 8005d7c:	f417 7f40 	tst.w	r7, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005d80:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d82:	d174      	bne.n	8005e6e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d84:	f7ff ffc2 	bl	8005d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f7ff ffc3 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8e:	2000      	movs	r0, #0
 8005d90:	7728      	strb	r0, [r5, #28]
 8005d92:	e7d8      	b.n	8005d46 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d9a:	2104      	movs	r1, #4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d9e:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005da0:	69df      	ldr	r7, [r3, #28]
 8005da2:	07bb      	lsls	r3, r7, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005da4:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005da6:	d15f      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da8:	f7ff ffb0 	bl	8005d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dac:	4628      	mov	r0, r5
 8005dae:	f7ff ffb1 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db2:	2000      	movs	r0, #0
 8005db4:	7728      	strb	r0, [r5, #28]
 8005db6:	e7c2      	b.n	8005d3e <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dbe:	2102      	movs	r1, #2
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc2:	7729      	strb	r1, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc4:	699f      	ldr	r7, [r3, #24]
 8005dc6:	f417 7f40 	tst.w	r7, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005dca:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dcc:	d149      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dce:	f7ff ff9d 	bl	8005d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f7ff ff9e 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd8:	2000      	movs	r0, #0
 8005dda:	7728      	strb	r0, [r5, #28]
 8005ddc:	e7ab      	b.n	8005d36 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005dde:	f06f 0202 	mvn.w	r2, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005de2:	2101      	movs	r1, #1
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005de6:	7701      	strb	r1, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005de8:	699f      	ldr	r7, [r3, #24]
 8005dea:	07bb      	lsls	r3, r7, #30
 8005dec:	d136      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dee:	f7ff ff8d 	bl	8005d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df2:	4628      	mov	r0, r5
 8005df4:	f7ff ff8e 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df8:	2000      	movs	r0, #0
 8005dfa:	7728      	strb	r0, [r5, #28]
 8005dfc:	e797      	b.n	8005d2e <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005dfe:	2f00      	cmp	r7, #0
 8005e00:	d0ac      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e02:	0637      	lsls	r7, r6, #24
 8005e04:	d41a      	bmi.n	8005e3c <HAL_TIM_IRQHandler+0x120>
 8005e06:	e7a9      	b.n	8005d5c <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e08:	682e      	ldr	r6, [r5, #0]
 8005e0a:	f06f 0420 	mvn.w	r4, #32
 8005e0e:	6134      	str	r4, [r6, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005e10:	4628      	mov	r0, r5
}
 8005e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005e16:	f000 b87d 	b.w	8005f14 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	f06f 0201 	mvn.w	r2, #1
 8005e20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e22:	4628      	mov	r0, r5
 8005e24:	f7ff ff70 	bl	8005d08 <HAL_TIM_PeriodElapsedCallback>
 8005e28:	e791      	b.n	8005d4e <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005e2a:	6829      	ldr	r1, [r5, #0]
 8005e2c:	f46f 5002 	mvn.w	r0, #8320	@ 0x2080
 8005e30:	6108      	str	r0, [r1, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005e32:	4628      	mov	r0, r5
 8005e34:	f000 f870 	bl	8005f18 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e38:	2f00      	cmp	r7, #0
 8005e3a:	d08f      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005e44:	4628      	mov	r0, r5
 8005e46:	f000 f869 	bl	8005f1c <HAL_TIMEx_Break2Callback>
 8005e4a:	e787      	b.n	8005d5c <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e4c:	682f      	ldr	r7, [r5, #0]
 8005e4e:	f06f 0140 	mvn.w	r1, #64	@ 0x40
 8005e52:	6139      	str	r1, [r7, #16]
      HAL_TIM_TriggerCallback(htim);
 8005e54:	4628      	mov	r0, r5
 8005e56:	f7ff ff5f 	bl	8005d18 <HAL_TIM_TriggerCallback>
 8005e5a:	e783      	b.n	8005d64 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 8005e5c:	f7ff ff58 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 8005e60:	e7ca      	b.n	8005df8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e62:	f7ff ff55 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 8005e66:	e7b7      	b.n	8005dd8 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e68:	f7ff ff52 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 8005e6c:	e7a1      	b.n	8005db2 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6e:	f7ff ff4f 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 8005e72:	e78c      	b.n	8005d8e <HAL_TIM_IRQHandler+0x72>

08005e74 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e74:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005e78:	2a01      	cmp	r2, #1
 8005e7a:	d044      	beq.n	8005f06 <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e7c:	6802      	ldr	r2, [r0, #0]
{
 8005e7e:	b470      	push	{r4, r5, r6}
 8005e80:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e82:	4e22      	ldr	r6, [pc, #136]	@ (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	2002      	movs	r0, #2
 8005e86:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e8a:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 8005e8c:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e8e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e92:	d026      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005e94:	f506 6c00 	add.w	ip, r6, #2048	@ 0x800
 8005e98:	4562      	cmp	r2, ip
 8005e9a:	d02b      	beq.n	8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e9c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ea0:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005ea6:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea8:	d00e      	beq.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005eaa:	4e19      	ldr	r6, [pc, #100]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8005eac:	42b2      	cmp	r2, r6
 8005eae:	d00b      	beq.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005eb0:	f506 6580 	add.w	r5, r6, #1024	@ 0x400
 8005eb4:	42aa      	cmp	r2, r5
 8005eb6:	d007      	beq.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005eb8:	f505 6c80 	add.w	ip, r5, #1024	@ 0x400
 8005ebc:	4562      	cmp	r2, ip
 8005ebe:	d003      	beq.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005ec0:	f50c 309a 	add.w	r0, ip, #78848	@ 0x13400
 8005ec4:	4282      	cmp	r2, r0
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ec8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eca:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ece:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed0:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005ed2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005eda:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005ede:	bc70      	pop	{r4, r5, r6}
 8005ee0:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ee2:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ee4:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ee8:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eea:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eee:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8005ef0:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef2:	e7e9      	b.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ef4:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ef6:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005efa:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005efc:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f00:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 8005f02:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f04:	e7e0      	b.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 8005f06:	2002      	movs	r0, #2
}
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40012c00 	.word	0x40012c00
 8005f10:	40000400 	.word	0x40000400

08005f14 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop

08005f18 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop

08005f1c <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop

08005f20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f24:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f26:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8005f28:	2820      	cmp	r0, #32
 8005f2a:	d17c      	bne.n	8006026 <HAL_UART_Transmit+0x106>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f2c:	4688      	mov	r8, r1
 8005f2e:	b109      	cbz	r1, 8005f34 <HAL_UART_Transmit+0x14>
 8005f30:	4617      	mov	r7, r2
 8005f32:	b912      	cbnz	r2, 8005f3a <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 8005f34:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f3a:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3c:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f40:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f42:	f8c4 9084 	str.w	r9, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f46:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8005f48:	f7fc fc82 	bl	8002850 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f4c:	68a1      	ldr	r1, [r4, #8]
    huart->TxXferSize  = Size;
 8005f4e:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f52:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8005f56:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 8005f5a:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5c:	d072      	beq.n	8006044 <HAL_UART_Transmit+0x124>
    while (huart->TxXferCount > 0U)
 8005f5e:	f8b4 0052 	ldrh.w	r0, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f62:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8005f64:	b287      	uxth	r7, r0
 8005f66:	2f00      	cmp	r7, #0
 8005f68:	d02c      	beq.n	8005fc4 <HAL_UART_Transmit+0xa4>
 8005f6a:	1c68      	adds	r0, r5, #1
 8005f6c:	d150      	bne.n	8006010 <HAL_UART_Transmit+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6e:	69d0      	ldr	r0, [r2, #28]
 8005f70:	0603      	lsls	r3, r0, #24
 8005f72:	d414      	bmi.n	8005f9e <HAL_UART_Transmit+0x7e>
 8005f74:	69d7      	ldr	r7, [r2, #28]
 8005f76:	0638      	lsls	r0, r7, #24
 8005f78:	d411      	bmi.n	8005f9e <HAL_UART_Transmit+0x7e>
 8005f7a:	69d3      	ldr	r3, [r2, #28]
 8005f7c:	0619      	lsls	r1, r3, #24
 8005f7e:	d40e      	bmi.n	8005f9e <HAL_UART_Transmit+0x7e>
 8005f80:	69d1      	ldr	r1, [r2, #28]
 8005f82:	060b      	lsls	r3, r1, #24
 8005f84:	d40b      	bmi.n	8005f9e <HAL_UART_Transmit+0x7e>
 8005f86:	69d0      	ldr	r0, [r2, #28]
 8005f88:	0607      	lsls	r7, r0, #24
 8005f8a:	d408      	bmi.n	8005f9e <HAL_UART_Transmit+0x7e>
 8005f8c:	69d7      	ldr	r7, [r2, #28]
 8005f8e:	0638      	lsls	r0, r7, #24
 8005f90:	d405      	bmi.n	8005f9e <HAL_UART_Transmit+0x7e>
 8005f92:	69d3      	ldr	r3, [r2, #28]
 8005f94:	0619      	lsls	r1, r3, #24
 8005f96:	d402      	bmi.n	8005f9e <HAL_UART_Transmit+0x7e>
 8005f98:	69d1      	ldr	r1, [r2, #28]
 8005f9a:	060b      	lsls	r3, r1, #24
 8005f9c:	d5e7      	bpl.n	8005f6e <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 8005f9e:	f1b8 0f00 	cmp.w	r8, #0
 8005fa2:	d03b      	beq.n	800601c <HAL_UART_Transmit+0xfc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fa4:	f818 0b01 	ldrb.w	r0, [r8], #1
 8005fa8:	8510      	strh	r0, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8005faa:	f8b4 c052 	ldrh.w	ip, [r4, #82]	@ 0x52
 8005fae:	f10c 3eff 	add.w	lr, ip, #4294967295
 8005fb2:	fa1f f38e 	uxth.w	r3, lr
 8005fb6:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005fba:	f8b4 1052 	ldrh.w	r1, [r4, #82]	@ 0x52
 8005fbe:	b288      	uxth	r0, r1
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d1d2      	bne.n	8005f6a <HAL_UART_Transmit+0x4a>
 8005fc4:	1c69      	adds	r1, r5, #1
 8005fc6:	d139      	bne.n	800603c <HAL_UART_Transmit+0x11c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc8:	69d1      	ldr	r1, [r2, #28]
 8005fca:	064b      	lsls	r3, r1, #25
 8005fcc:	d414      	bmi.n	8005ff8 <HAL_UART_Transmit+0xd8>
 8005fce:	69d0      	ldr	r0, [r2, #28]
 8005fd0:	0645      	lsls	r5, r0, #25
 8005fd2:	d411      	bmi.n	8005ff8 <HAL_UART_Transmit+0xd8>
 8005fd4:	69d5      	ldr	r5, [r2, #28]
 8005fd6:	0668      	lsls	r0, r5, #25
 8005fd8:	d40e      	bmi.n	8005ff8 <HAL_UART_Transmit+0xd8>
 8005fda:	69d6      	ldr	r6, [r2, #28]
 8005fdc:	0671      	lsls	r1, r6, #25
 8005fde:	d40b      	bmi.n	8005ff8 <HAL_UART_Transmit+0xd8>
 8005fe0:	69d7      	ldr	r7, [r2, #28]
 8005fe2:	067b      	lsls	r3, r7, #25
 8005fe4:	d408      	bmi.n	8005ff8 <HAL_UART_Transmit+0xd8>
 8005fe6:	69d3      	ldr	r3, [r2, #28]
 8005fe8:	065f      	lsls	r7, r3, #25
 8005fea:	d405      	bmi.n	8005ff8 <HAL_UART_Transmit+0xd8>
 8005fec:	69d1      	ldr	r1, [r2, #28]
 8005fee:	064e      	lsls	r6, r1, #25
 8005ff0:	d402      	bmi.n	8005ff8 <HAL_UART_Transmit+0xd8>
 8005ff2:	69d0      	ldr	r0, [r2, #28]
 8005ff4:	0645      	lsls	r5, r0, #25
 8005ff6:	d5e7      	bpl.n	8005fc8 <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	67e2      	str	r2, [r4, #124]	@ 0x7c
    return HAL_OK;
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	e79a      	b.n	8005f36 <HAL_UART_Transmit+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006000:	f7fc fc26 	bl	8002850 <HAL_GetTick>
 8006004:	1b81      	subs	r1, r0, r6
 8006006:	428d      	cmp	r5, r1
 8006008:	d322      	bcc.n	8006050 <HAL_UART_Transmit+0x130>
 800600a:	b30d      	cbz	r5, 8006050 <HAL_UART_Transmit+0x130>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006010:	69d3      	ldr	r3, [r2, #28]
 8006012:	061f      	lsls	r7, r3, #24
 8006014:	d5f4      	bpl.n	8006000 <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 8006016:	f1b8 0f00 	cmp.w	r8, #0
 800601a:	d1c3      	bne.n	8005fa4 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800601c:	f839 7b02 	ldrh.w	r7, [r9], #2
 8006020:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8006024:	e7c0      	b.n	8005fa8 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8006026:	2002      	movs	r0, #2
}
 8006028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602c:	f7fc fc10 	bl	8002850 <HAL_GetTick>
 8006030:	1b87      	subs	r7, r0, r6
 8006032:	42bd      	cmp	r5, r7
 8006034:	d30c      	bcc.n	8006050 <HAL_UART_Transmit+0x130>
 8006036:	b15d      	cbz	r5, 8006050 <HAL_UART_Transmit+0x130>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006038:	6822      	ldr	r2, [r4, #0]
 800603a:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603c:	69d2      	ldr	r2, [r2, #28]
 800603e:	0657      	lsls	r7, r2, #25
 8006040:	d5f4      	bpl.n	800602c <HAL_UART_Transmit+0x10c>
 8006042:	e7d9      	b.n	8005ff8 <HAL_UART_Transmit+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006044:	6922      	ldr	r2, [r4, #16]
 8006046:	2a00      	cmp	r2, #0
 8006048:	d189      	bne.n	8005f5e <HAL_UART_Transmit+0x3e>
 800604a:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800604c:	4690      	mov	r8, r2
 800604e:	e786      	b.n	8005f5e <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8006050:	2320      	movs	r3, #32
 8006052:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8006054:	2003      	movs	r0, #3
}
 8006056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800605a:	bf00      	nop

0800605c <HAL_UART_Receive>:
{
 800605c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006060:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8006062:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8006066:	2820      	cmp	r0, #32
 8006068:	d161      	bne.n	800612e <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 800606a:	4689      	mov	r9, r1
 800606c:	b109      	cbz	r1, 8006072 <HAL_UART_Receive+0x16>
 800606e:	4617      	mov	r7, r2
 8006070:	b912      	cbnz	r2, 8006078 <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 8006072:	2001      	movs	r0, #1
}
 8006074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006078:	2500      	movs	r5, #0
 800607a:	4698      	mov	r8, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800607c:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006082:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006086:	6625      	str	r5, [r4, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8006088:	f7fc fbe2 	bl	8002850 <HAL_GetTick>
    huart->RxXferSize  = Size;
 800608c:	f8a4 7058 	strh.w	r7, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006090:	f8a4 705a 	strh.w	r7, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8006094:	68a7      	ldr	r7, [r4, #8]
 8006096:	f5b7 5f80 	cmp.w	r7, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800609a:	4606      	mov	r6, r0
    UART_MASK_COMPUTATION(huart);
 800609c:	f000 80f1 	beq.w	8006282 <HAL_UART_Receive+0x226>
 80060a0:	2f00      	cmp	r7, #0
 80060a2:	f040 8108 	bne.w	80062b6 <HAL_UART_Receive+0x25a>
 80060a6:	6922      	ldr	r2, [r4, #16]
    uhMask = huart->Mask;
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	bf0c      	ite	eq
 80060ac:	25ff      	moveq	r5, #255	@ 0xff
 80060ae:	257f      	movne	r5, #127	@ 0x7f
    while (huart->RxXferCount > 0U)
 80060b0:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 80060b4:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 80060b8:	fa1f f38c 	uxth.w	r3, ip
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d030      	beq.n	8006122 <HAL_UART_Receive+0xc6>
 80060c0:	6822      	ldr	r2, [r4, #0]
 80060c2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80060c6:	d135      	bne.n	8006134 <HAL_UART_Receive+0xd8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c8:	69d1      	ldr	r1, [r2, #28]
 80060ca:	0688      	lsls	r0, r1, #26
 80060cc:	d414      	bmi.n	80060f8 <HAL_UART_Receive+0x9c>
 80060ce:	69d0      	ldr	r0, [r2, #28]
 80060d0:	0683      	lsls	r3, r0, #26
 80060d2:	d411      	bmi.n	80060f8 <HAL_UART_Receive+0x9c>
 80060d4:	69d3      	ldr	r3, [r2, #28]
 80060d6:	0698      	lsls	r0, r3, #26
 80060d8:	d40e      	bmi.n	80060f8 <HAL_UART_Receive+0x9c>
 80060da:	69d1      	ldr	r1, [r2, #28]
 80060dc:	0689      	lsls	r1, r1, #26
 80060de:	d40b      	bmi.n	80060f8 <HAL_UART_Receive+0x9c>
 80060e0:	69d0      	ldr	r0, [r2, #28]
 80060e2:	0683      	lsls	r3, r0, #26
 80060e4:	d408      	bmi.n	80060f8 <HAL_UART_Receive+0x9c>
 80060e6:	69d3      	ldr	r3, [r2, #28]
 80060e8:	0698      	lsls	r0, r3, #26
 80060ea:	d405      	bmi.n	80060f8 <HAL_UART_Receive+0x9c>
 80060ec:	69d1      	ldr	r1, [r2, #28]
 80060ee:	0689      	lsls	r1, r1, #26
 80060f0:	d402      	bmi.n	80060f8 <HAL_UART_Receive+0x9c>
 80060f2:	69d0      	ldr	r0, [r2, #28]
 80060f4:	0683      	lsls	r3, r0, #26
 80060f6:	d5e7      	bpl.n	80060c8 <HAL_UART_Receive+0x6c>
      if (pdata8bits == NULL)
 80060f8:	f1b9 0f00 	cmp.w	r9, #0
 80060fc:	f000 80c8 	beq.w	8006290 <HAL_UART_Receive+0x234>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006100:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8006102:	402a      	ands	r2, r5
 8006104:	f809 2b01 	strb.w	r2, [r9], #1
      huart->RxXferCount--;
 8006108:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	@ 0x5a
 800610c:	f10e 3cff 	add.w	ip, lr, #4294967295
 8006110:	fa1f f38c 	uxth.w	r3, ip
 8006114:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006118:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
 800611c:	b288      	uxth	r0, r1
 800611e:	2800      	cmp	r0, #0
 8006120:	d1ce      	bne.n	80060c0 <HAL_UART_Receive+0x64>
    huart->RxState = HAL_UART_STATE_READY;
 8006122:	2620      	movs	r6, #32
 8006124:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    return HAL_OK;
 8006128:	2000      	movs	r0, #0
}
 800612a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800612e:	2002      	movs	r0, #2
}
 8006130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006134:	69d1      	ldr	r1, [r2, #28]
 8006136:	0689      	lsls	r1, r1, #26
 8006138:	d4de      	bmi.n	80060f8 <HAL_UART_Receive+0x9c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613a:	f7fc fb89 	bl	8002850 <HAL_GetTick>
 800613e:	1b80      	subs	r0, r0, r6
 8006140:	4580      	cmp	r8, r0
 8006142:	f0c0 8098 	bcc.w	8006276 <HAL_UART_Receive+0x21a>
 8006146:	f1b8 0f00 	cmp.w	r8, #0
 800614a:	f000 8094 	beq.w	8006276 <HAL_UART_Receive+0x21a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	6813      	ldr	r3, [r2, #0]
 8006152:	0758      	lsls	r0, r3, #29
 8006154:	d5ee      	bpl.n	8006134 <HAL_UART_Receive+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006156:	69d1      	ldr	r1, [r2, #28]
 8006158:	0709      	lsls	r1, r1, #28
 800615a:	f100 80ba 	bmi.w	80062d2 <HAL_UART_Receive+0x276>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800615e:	69d0      	ldr	r0, [r2, #28]
 8006160:	0503      	lsls	r3, r0, #20
 8006162:	d5e7      	bpl.n	8006134 <HAL_UART_Receive+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006164:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8006168:	6215      	str	r5, [r2, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	e852 6f00 	ldrex	r6, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800616e:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	e842 7300 	strex	r3, r7, [r2]
 8006176:	b38b      	cbz	r3, 80061dc <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	e852 1f00 	ldrex	r1, [r2]
 800617c:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	e842 0500 	strex	r5, r0, [r2]
 8006184:	b355      	cbz	r5, 80061dc <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	e852 6f00 	ldrex	r6, [r2]
 800618a:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	e842 7300 	strex	r3, r7, [r2]
 8006192:	b31b      	cbz	r3, 80061dc <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	e852 1f00 	ldrex	r1, [r2]
 8006198:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	e842 0500 	strex	r5, r0, [r2]
 80061a0:	b1e5      	cbz	r5, 80061dc <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	e852 6f00 	ldrex	r6, [r2]
 80061a6:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	e842 7300 	strex	r3, r7, [r2]
 80061ae:	b1ab      	cbz	r3, 80061dc <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	e852 1f00 	ldrex	r1, [r2]
 80061b4:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	e842 0500 	strex	r5, r0, [r2]
 80061bc:	b175      	cbz	r5, 80061dc <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	e852 6f00 	ldrex	r6, [r2]
 80061c2:	f426 7790 	bic.w	r7, r6, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	e842 7300 	strex	r3, r7, [r2]
 80061ca:	b13b      	cbz	r3, 80061dc <HAL_UART_Receive+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	e852 1f00 	ldrex	r1, [r2]
 80061d0:	f421 7090 	bic.w	r0, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	e842 0500 	strex	r5, r0, [r2]
 80061d8:	2d00      	cmp	r5, #0
 80061da:	d1c6      	bne.n	800616a <HAL_UART_Receive+0x10e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061dc:	f102 0e08 	add.w	lr, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	e85e 6f00 	ldrex	r6, [lr]
 80061e4:	f026 0701 	bic.w	r7, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	e84e 7300 	strex	r3, r7, [lr]
 80061ec:	b3ab      	cbz	r3, 800625a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	f102 0908 	add.w	r9, r2, #8
 80061f2:	e859 1f00 	ldrex	r1, [r9]
 80061f6:	f021 0601 	bic.w	r6, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	f102 0508 	add.w	r5, r2, #8
 80061fe:	e845 6000 	strex	r0, r6, [r5]
 8006202:	b350      	cbz	r0, 800625a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	e85e 7f00 	ldrex	r7, [lr]
 8006208:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	e84e 3100 	strex	r1, r3, [lr]
 8006210:	b319      	cbz	r1, 800625a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	e85e 6f00 	ldrex	r6, [lr]
 8006216:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	e84e 5000 	strex	r0, r5, [lr]
 800621e:	b1e0      	cbz	r0, 800625a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	e85e 7f00 	ldrex	r7, [lr]
 8006224:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	e84e 3100 	strex	r1, r3, [lr]
 800622c:	b1a9      	cbz	r1, 800625a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	e85e 6f00 	ldrex	r6, [lr]
 8006232:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	e84e 5000 	strex	r0, r5, [lr]
 800623a:	b170      	cbz	r0, 800625a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	e85e 7f00 	ldrex	r7, [lr]
 8006240:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	e84e 3100 	strex	r1, r3, [lr]
 8006248:	b139      	cbz	r1, 800625a <HAL_UART_Receive+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	e85e 6f00 	ldrex	r6, [lr]
 800624e:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	e84e 5000 	strex	r0, r5, [lr]
 8006256:	2800      	cmp	r0, #0
 8006258:	d1c0      	bne.n	80061dc <HAL_UART_Receive+0x180>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800625a:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 800625c:	2f01      	cmp	r7, #1
 800625e:	f000 80c1 	beq.w	80063e4 <HAL_UART_Receive+0x388>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006262:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006264:	2220      	movs	r2, #32
 8006266:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800626a:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626c:	6620      	str	r0, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 800626e:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006272:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006276:	2320      	movs	r3, #32
 8006278:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 800627c:	2003      	movs	r0, #3
}
 800627e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8006282:	6920      	ldr	r0, [r4, #16]
 8006284:	bb10      	cbnz	r0, 80062cc <HAL_UART_Receive+0x270>
 8006286:	464f      	mov	r7, r9
    uhMask = huart->Mask;
 8006288:	f240 15ff 	movw	r5, #511	@ 0x1ff
      pdata8bits  = NULL;
 800628c:	4681      	mov	r9, r0
 800628e:	e70f      	b.n	80060b0 <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006290:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 8006292:	402b      	ands	r3, r5
 8006294:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8006298:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	@ 0x5a
 800629c:	f10e 31ff 	add.w	r1, lr, #4294967295
 80062a0:	b288      	uxth	r0, r1
 80062a2:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80062a6:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	@ 0x5a
 80062aa:	fa1f f38c 	uxth.w	r3, ip
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f47f af07 	bne.w	80060c2 <HAL_UART_Receive+0x66>
 80062b4:	e735      	b.n	8006122 <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 80062b6:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
    uhMask = huart->Mask;
 80062ba:	462f      	mov	r7, r5
    UART_MASK_COMPUTATION(huart);
 80062bc:	f47f aef8 	bne.w	80060b0 <HAL_UART_Receive+0x54>
 80062c0:	6921      	ldr	r1, [r4, #16]
    uhMask = huart->Mask;
 80062c2:	2900      	cmp	r1, #0
 80062c4:	bf14      	ite	ne
 80062c6:	253f      	movne	r5, #63	@ 0x3f
 80062c8:	257f      	moveq	r5, #127	@ 0x7f
 80062ca:	e6f1      	b.n	80060b0 <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 80062cc:	462f      	mov	r7, r5
    uhMask = huart->Mask;
 80062ce:	25ff      	movs	r5, #255	@ 0xff
 80062d0:	e6ee      	b.n	80060b0 <HAL_UART_Receive+0x54>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062d2:	2708      	movs	r7, #8
 80062d4:	6217      	str	r7, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	e852 8f00 	ldrex	r8, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062da:	f428 7990 	bic.w	r9, r8, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	e842 9300 	strex	r3, r9, [r2]
 80062e2:	b38b      	cbz	r3, 8006348 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	e852 1f00 	ldrex	r1, [r2]
 80062e8:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	e842 6500 	strex	r5, r6, [r2]
 80062f0:	b355      	cbz	r5, 8006348 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	e852 0f00 	ldrex	r0, [r2]
 80062f6:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	e842 7300 	strex	r3, r7, [r2]
 80062fe:	b31b      	cbz	r3, 8006348 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	e852 1f00 	ldrex	r1, [r2]
 8006304:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	e842 6500 	strex	r5, r6, [r2]
 800630c:	b1e5      	cbz	r5, 8006348 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	e852 0f00 	ldrex	r0, [r2]
 8006312:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	e842 7300 	strex	r3, r7, [r2]
 800631a:	b1ab      	cbz	r3, 8006348 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	e852 1f00 	ldrex	r1, [r2]
 8006320:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	e842 6500 	strex	r5, r6, [r2]
 8006328:	b175      	cbz	r5, 8006348 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	e852 0f00 	ldrex	r0, [r2]
 800632e:	f420 7790 	bic.w	r7, r0, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	e842 7300 	strex	r3, r7, [r2]
 8006336:	b13b      	cbz	r3, 8006348 <HAL_UART_Receive+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	e852 1f00 	ldrex	r1, [r2]
 800633c:	f421 7690 	bic.w	r6, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	e842 6500 	strex	r5, r6, [r2]
 8006344:	2d00      	cmp	r5, #0
 8006346:	d1c6      	bne.n	80062d6 <HAL_UART_Receive+0x27a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006348:	f102 0e08 	add.w	lr, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	e85e 0f00 	ldrex	r0, [lr]
 8006350:	f020 0701 	bic.w	r7, r0, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	e84e 7300 	strex	r3, r7, [lr]
 8006358:	b3ab      	cbz	r3, 80063c6 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	f102 0908 	add.w	r9, r2, #8
 800635e:	e859 1f00 	ldrex	r1, [r9]
 8006362:	f021 0601 	bic.w	r6, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	f102 0508 	add.w	r5, r2, #8
 800636a:	e845 6000 	strex	r0, r6, [r5]
 800636e:	b350      	cbz	r0, 80063c6 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	e85e 7f00 	ldrex	r7, [lr]
 8006374:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	e84e 3100 	strex	r1, r3, [lr]
 800637c:	b319      	cbz	r1, 80063c6 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	e85e 6f00 	ldrex	r6, [lr]
 8006382:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	e84e 5000 	strex	r0, r5, [lr]
 800638a:	b1e0      	cbz	r0, 80063c6 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	e85e 7f00 	ldrex	r7, [lr]
 8006390:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	e84e 3100 	strex	r1, r3, [lr]
 8006398:	b1a9      	cbz	r1, 80063c6 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	e85e 6f00 	ldrex	r6, [lr]
 800639e:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	e84e 5000 	strex	r0, r5, [lr]
 80063a6:	b170      	cbz	r0, 80063c6 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	e85e 7f00 	ldrex	r7, [lr]
 80063ac:	f027 0301 	bic.w	r3, r7, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	e84e 3100 	strex	r1, r3, [lr]
 80063b4:	b139      	cbz	r1, 80063c6 <HAL_UART_Receive+0x36a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	e85e 6f00 	ldrex	r6, [lr]
 80063ba:	f026 0501 	bic.w	r5, r6, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	e84e 5000 	strex	r0, r5, [lr]
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d1c0      	bne.n	8006348 <HAL_UART_Receive+0x2ec>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c6:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 80063c8:	2f01      	cmp	r7, #1
 80063ca:	d053      	beq.n	8006474 <HAL_UART_Receive+0x418>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 80063ce:	2720      	movs	r7, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063d0:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 80063d2:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80063d6:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d8:	6620      	str	r0, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80063da:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063de:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          return HAL_ERROR;
 80063e2:	e748      	b.n	8006276 <HAL_UART_Receive+0x21a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	e852 ef00 	ldrex	lr, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e8:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	e842 c300 	strex	r3, ip, [r2]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f43f af36 	beq.w	8006262 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	e852 1f00 	ldrex	r1, [r2]
 80063fa:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	e842 6500 	strex	r5, r6, [r2]
 8006402:	2d00      	cmp	r5, #0
 8006404:	f43f af2d 	beq.w	8006262 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	e852 0f00 	ldrex	r0, [r2]
 800640c:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	e842 7300 	strex	r3, r7, [r2]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f43f af24 	beq.w	8006262 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	e852 1f00 	ldrex	r1, [r2]
 800641e:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	e842 6500 	strex	r5, r6, [r2]
 8006426:	2d00      	cmp	r5, #0
 8006428:	f43f af1b 	beq.w	8006262 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	e852 0f00 	ldrex	r0, [r2]
 8006430:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	e842 7300 	strex	r3, r7, [r2]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f43f af12 	beq.w	8006262 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	e852 1f00 	ldrex	r1, [r2]
 8006442:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	e842 6500 	strex	r5, r6, [r2]
 800644a:	2d00      	cmp	r5, #0
 800644c:	f43f af09 	beq.w	8006262 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	e852 0f00 	ldrex	r0, [r2]
 8006454:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	e842 7300 	strex	r3, r7, [r2]
 800645c:	2b00      	cmp	r3, #0
 800645e:	f43f af00 	beq.w	8006262 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	e852 1f00 	ldrex	r1, [r2]
 8006466:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	e842 6500 	strex	r5, r6, [r2]
 800646e:	2d00      	cmp	r5, #0
 8006470:	d1b8      	bne.n	80063e4 <HAL_UART_Receive+0x388>
 8006472:	e6f6      	b.n	8006262 <HAL_UART_Receive+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	e852 ef00 	ldrex	lr, [r2]
 8006478:	f02e 0c10 	bic.w	ip, lr, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	e842 c300 	strex	r3, ip, [r2]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0a3      	beq.n	80063cc <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	e852 1f00 	ldrex	r1, [r2]
 8006488:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	e842 6500 	strex	r5, r6, [r2]
 8006490:	2d00      	cmp	r5, #0
 8006492:	d09b      	beq.n	80063cc <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	e852 0f00 	ldrex	r0, [r2]
 8006498:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	e842 7300 	strex	r3, r7, [r2]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d093      	beq.n	80063cc <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	e852 1f00 	ldrex	r1, [r2]
 80064a8:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	e842 6500 	strex	r5, r6, [r2]
 80064b0:	2d00      	cmp	r5, #0
 80064b2:	d08b      	beq.n	80063cc <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	e852 0f00 	ldrex	r0, [r2]
 80064b8:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	e842 7300 	strex	r3, r7, [r2]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d083      	beq.n	80063cc <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	e852 1f00 	ldrex	r1, [r2]
 80064c8:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	e842 6500 	strex	r5, r6, [r2]
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	f43f af7b 	beq.w	80063cc <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	e852 0f00 	ldrex	r0, [r2]
 80064da:	f020 0710 	bic.w	r7, r0, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	e842 7300 	strex	r3, r7, [r2]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f43f af72 	beq.w	80063cc <HAL_UART_Receive+0x370>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	e852 1f00 	ldrex	r1, [r2]
 80064ec:	f021 0610 	bic.w	r6, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	e842 6500 	strex	r5, r6, [r2]
 80064f4:	2d00      	cmp	r5, #0
 80064f6:	d1bd      	bne.n	8006474 <HAL_UART_Receive+0x418>
 80064f8:	e768      	b.n	80063cc <HAL_UART_Receive+0x370>
 80064fa:	bf00      	nop

080064fc <arm_split_rfft_q15>:
 80064fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006500:	b083      	sub	sp, #12
 8006502:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 8006506:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006508:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800650a:	3d01      	subs	r5, #1
 800650c:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 8006510:	00ac      	lsls	r4, r5, #2
 8006512:	9401      	str	r4, [sp, #4]
 8006514:	1e4c      	subs	r4, r1, #1
 8006516:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800651a:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800651e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8006522:	d02d      	beq.n	8006580 <arm_split_rfft_q15+0x84>
 8006524:	2f01      	cmp	r7, #1
 8006526:	f1a6 0c04 	sub.w	ip, r6, #4
 800652a:	f100 0604 	add.w	r6, r0, #4
 800652e:	d13e      	bne.n	80065ae <arm_split_rfft_q15+0xb2>
 8006530:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8006532:	f1ac 0104 	sub.w	r1, ip, #4
 8006536:	f107 0808 	add.w	r8, r7, #8
 800653a:	f856 7b04 	ldr.w	r7, [r6], #4
 800653e:	f852 9b04 	ldr.w	r9, [r2], #4
 8006542:	fb47 fc09 	smusd	ip, r7, r9
 8006546:	f855 e904 	ldr.w	lr, [r5], #-4
 800654a:	f853 ab04 	ldr.w	sl, [r3], #4
 800654e:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8006552:	fb4e fe1a 	smusdx	lr, lr, sl
 8006556:	fb27 e719 	smladx	r7, r7, r9, lr
 800655a:	143f      	asrs	r7, r7, #16
 800655c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8006560:	f1c7 0e00 	rsb	lr, r7, #0
 8006564:	3c01      	subs	r4, #1
 8006566:	f828 7c02 	strh.w	r7, [r8, #-2]
 800656a:	f828 cc04 	strh.w	ip, [r8, #-4]
 800656e:	f1a1 0104 	sub.w	r1, r1, #4
 8006572:	f8a1 e00a 	strh.w	lr, [r1, #10]
 8006576:	f8a1 c008 	strh.w	ip, [r1, #8]
 800657a:	f108 0804 	add.w	r8, r8, #4
 800657e:	d1dc      	bne.n	800653a <arm_split_rfft_q15+0x3e>
 8006580:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8006584:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006588:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800658a:	9a01      	ldr	r2, [sp, #4]
 800658c:	1a5b      	subs	r3, r3, r1
 800658e:	4422      	add	r2, r4
 8006590:	2100      	movs	r1, #0
 8006592:	105b      	asrs	r3, r3, #1
 8006594:	8093      	strh	r3, [r2, #4]
 8006596:	80d1      	strh	r1, [r2, #6]
 8006598:	f9b0 3000 	ldrsh.w	r3, [r0]
 800659c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80065a0:	8061      	strh	r1, [r4, #2]
 80065a2:	4413      	add	r3, r2
 80065a4:	105b      	asrs	r3, r3, #1
 80065a6:	8023      	strh	r3, [r4, #0]
 80065a8:	b003      	add	sp, #12
 80065aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ae:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80065b2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80065b4:	f1ac 0104 	sub.w	r1, ip, #4
 80065b8:	f107 0808 	add.w	r8, r7, #8
 80065bc:	f856 7b04 	ldr.w	r7, [r6], #4
 80065c0:	f8d2 9000 	ldr.w	r9, [r2]
 80065c4:	fb47 fc09 	smusd	ip, r7, r9
 80065c8:	f855 e904 	ldr.w	lr, [r5], #-4
 80065cc:	f8d3 a000 	ldr.w	sl, [r3]
 80065d0:	fb2e cc0a 	smlad	ip, lr, sl, ip
 80065d4:	fb4e fe1a 	smusdx	lr, lr, sl
 80065d8:	fb27 e719 	smladx	r7, r7, r9, lr
 80065dc:	143f      	asrs	r7, r7, #16
 80065de:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 80065e2:	f1c7 0e00 	rsb	lr, r7, #0
 80065e6:	3c01      	subs	r4, #1
 80065e8:	f828 7c02 	strh.w	r7, [r8, #-2]
 80065ec:	f828 cc04 	strh.w	ip, [r8, #-4]
 80065f0:	445b      	add	r3, fp
 80065f2:	f8a1 e006 	strh.w	lr, [r1, #6]
 80065f6:	f8a1 c004 	strh.w	ip, [r1, #4]
 80065fa:	445a      	add	r2, fp
 80065fc:	f108 0804 	add.w	r8, r8, #4
 8006600:	f1a1 0104 	sub.w	r1, r1, #4
 8006604:	d1da      	bne.n	80065bc <arm_split_rfft_q15+0xc0>
 8006606:	e7bb      	b.n	8006580 <arm_split_rfft_q15+0x84>

08006608 <arm_rfft_q15>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	f890 e004 	ldrb.w	lr, [r0, #4]
 8006610:	6806      	ldr	r6, [r0, #0]
 8006612:	f1be 0f01 	cmp.w	lr, #1
 8006616:	4604      	mov	r4, r0
 8006618:	b083      	sub	sp, #12
 800661a:	6940      	ldr	r0, [r0, #20]
 800661c:	4615      	mov	r5, r2
 800661e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006622:	460f      	mov	r7, r1
 8006624:	d00f      	beq.n	8006646 <arm_rfft_q15+0x3e>
 8006626:	7963      	ldrb	r3, [r4, #5]
 8006628:	4672      	mov	r2, lr
 800662a:	f000 fa3f 	bl	8006aac <arm_cfft_q15>
 800662e:	68a3      	ldr	r3, [r4, #8]
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	9500      	str	r5, [sp, #0]
 8006634:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8006638:	4631      	mov	r1, r6
 800663a:	4638      	mov	r0, r7
 800663c:	f7ff ff5e 	bl	80064fc <arm_split_rfft_q15>
 8006640:	b003      	add	sp, #12
 8006642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006646:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 800664a:	68a2      	ldr	r2, [r4, #8]
 800664c:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 8006650:	b30e      	cbz	r6, 8006696 <arm_rfft_q15+0x8e>
 8006652:	2a01      	cmp	r2, #1
 8006654:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8006658:	d132      	bne.n	80066c0 <arm_rfft_q15+0xb8>
 800665a:	46a9      	mov	r9, r5
 800665c:	f85c 8904 	ldr.w	r8, [ip], #-4
 8006660:	f851 2b04 	ldr.w	r2, [r1], #4
 8006664:	fb48 fa02 	smusd	sl, r8, r2
 8006668:	f857 bb04 	ldr.w	fp, [r7], #4
 800666c:	f853 eb04 	ldr.w	lr, [r3], #4
 8006670:	fb2b aa0e 	smlad	sl, fp, lr, sl
 8006674:	fb28 f812 	smuadx	r8, r8, r2
 8006678:	f1c8 0200 	rsb	r2, r8, #0
 800667c:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 8006680:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8006684:	0412      	lsls	r2, r2, #16
 8006686:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 800668a:	3e01      	subs	r6, #1
 800668c:	f849 2b04 	str.w	r2, [r9], #4
 8006690:	d1e4      	bne.n	800665c <arm_rfft_q15+0x54>
 8006692:	f894 e004 	ldrb.w	lr, [r4, #4]
 8006696:	7963      	ldrb	r3, [r4, #5]
 8006698:	4672      	mov	r2, lr
 800669a:	4629      	mov	r1, r5
 800669c:	f000 fa06 	bl	8006aac <arm_cfft_q15>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0cc      	beq.n	8006640 <arm_rfft_q15+0x38>
 80066a6:	3d02      	subs	r5, #2
 80066a8:	2100      	movs	r1, #0
 80066aa:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	802b      	strh	r3, [r5, #0]
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	3101      	adds	r1, #1
 80066b6:	428b      	cmp	r3, r1
 80066b8:	d8f7      	bhi.n	80066aa <arm_rfft_q15+0xa2>
 80066ba:	b003      	add	sp, #12
 80066bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c0:	ee07 0a90 	vmov	s15, r0
 80066c4:	46a8      	mov	r8, r5
 80066c6:	f85c e904 	ldr.w	lr, [ip], #-4
 80066ca:	6808      	ldr	r0, [r1, #0]
 80066cc:	fb4e f900 	smusd	r9, lr, r0
 80066d0:	f857 ab04 	ldr.w	sl, [r7], #4
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	fb2a 9902 	smlad	r9, sl, r2, r9
 80066da:	fb2e fe10 	smuadx	lr, lr, r0
 80066de:	f1ce 0e00 	rsb	lr, lr, #0
 80066e2:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 80066e6:	0c12      	lsrs	r2, r2, #16
 80066e8:	0412      	lsls	r2, r2, #16
 80066ea:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 80066ee:	3e01      	subs	r6, #1
 80066f0:	f848 2b04 	str.w	r2, [r8], #4
 80066f4:	4459      	add	r1, fp
 80066f6:	445b      	add	r3, fp
 80066f8:	d1e5      	bne.n	80066c6 <arm_rfft_q15+0xbe>
 80066fa:	ee17 0a90 	vmov	r0, s15
 80066fe:	e7c8      	b.n	8006692 <arm_rfft_q15+0x8a>

08006700 <arm_rfft_init_q15>:
 8006700:	b430      	push	{r4, r5}
 8006702:	b289      	uxth	r1, r1
 8006704:	4d31      	ldr	r5, [pc, #196]	@ (80067cc <arm_rfft_init_q15+0xcc>)
 8006706:	4c32      	ldr	r4, [pc, #200]	@ (80067d0 <arm_rfft_init_q15+0xd0>)
 8006708:	6001      	str	r1, [r0, #0]
 800670a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800670e:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8006712:	7102      	strb	r2, [r0, #4]
 8006714:	7143      	strb	r3, [r0, #5]
 8006716:	d053      	beq.n	80067c0 <arm_rfft_init_q15+0xc0>
 8006718:	d91a      	bls.n	8006750 <arm_rfft_init_q15+0x50>
 800671a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800671e:	d033      	beq.n	8006788 <arm_rfft_init_q15+0x88>
 8006720:	d909      	bls.n	8006736 <arm_rfft_init_q15+0x36>
 8006722:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006726:	d12b      	bne.n	8006780 <arm_rfft_init_q15+0x80>
 8006728:	4b2a      	ldr	r3, [pc, #168]	@ (80067d4 <arm_rfft_init_q15+0xd4>)
 800672a:	6143      	str	r3, [r0, #20]
 800672c:	2201      	movs	r2, #1
 800672e:	6082      	str	r2, [r0, #8]
 8006730:	2000      	movs	r0, #0
 8006732:	bc30      	pop	{r4, r5}
 8006734:	4770      	bx	lr
 8006736:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800673a:	d02c      	beq.n	8006796 <arm_rfft_init_q15+0x96>
 800673c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006740:	d11e      	bne.n	8006780 <arm_rfft_init_q15+0x80>
 8006742:	4b25      	ldr	r3, [pc, #148]	@ (80067d8 <arm_rfft_init_q15+0xd8>)
 8006744:	6143      	str	r3, [r0, #20]
 8006746:	2204      	movs	r2, #4
 8006748:	6082      	str	r2, [r0, #8]
 800674a:	bc30      	pop	{r4, r5}
 800674c:	2000      	movs	r0, #0
 800674e:	4770      	bx	lr
 8006750:	2980      	cmp	r1, #128	@ 0x80
 8006752:	d027      	beq.n	80067a4 <arm_rfft_init_q15+0xa4>
 8006754:	d909      	bls.n	800676a <arm_rfft_init_q15+0x6a>
 8006756:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800675a:	d111      	bne.n	8006780 <arm_rfft_init_q15+0x80>
 800675c:	4b1f      	ldr	r3, [pc, #124]	@ (80067dc <arm_rfft_init_q15+0xdc>)
 800675e:	6143      	str	r3, [r0, #20]
 8006760:	2220      	movs	r2, #32
 8006762:	6082      	str	r2, [r0, #8]
 8006764:	bc30      	pop	{r4, r5}
 8006766:	2000      	movs	r0, #0
 8006768:	4770      	bx	lr
 800676a:	2920      	cmp	r1, #32
 800676c:	d021      	beq.n	80067b2 <arm_rfft_init_q15+0xb2>
 800676e:	2940      	cmp	r1, #64	@ 0x40
 8006770:	d106      	bne.n	8006780 <arm_rfft_init_q15+0x80>
 8006772:	4b1b      	ldr	r3, [pc, #108]	@ (80067e0 <arm_rfft_init_q15+0xe0>)
 8006774:	6143      	str	r3, [r0, #20]
 8006776:	2280      	movs	r2, #128	@ 0x80
 8006778:	6082      	str	r2, [r0, #8]
 800677a:	bc30      	pop	{r4, r5}
 800677c:	2000      	movs	r0, #0
 800677e:	4770      	bx	lr
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	bc30      	pop	{r4, r5}
 8006786:	4770      	bx	lr
 8006788:	4b16      	ldr	r3, [pc, #88]	@ (80067e4 <arm_rfft_init_q15+0xe4>)
 800678a:	6143      	str	r3, [r0, #20]
 800678c:	2202      	movs	r2, #2
 800678e:	6082      	str	r2, [r0, #8]
 8006790:	bc30      	pop	{r4, r5}
 8006792:	2000      	movs	r0, #0
 8006794:	4770      	bx	lr
 8006796:	4b14      	ldr	r3, [pc, #80]	@ (80067e8 <arm_rfft_init_q15+0xe8>)
 8006798:	6143      	str	r3, [r0, #20]
 800679a:	2208      	movs	r2, #8
 800679c:	6082      	str	r2, [r0, #8]
 800679e:	bc30      	pop	{r4, r5}
 80067a0:	2000      	movs	r0, #0
 80067a2:	4770      	bx	lr
 80067a4:	4b11      	ldr	r3, [pc, #68]	@ (80067ec <arm_rfft_init_q15+0xec>)
 80067a6:	6143      	str	r3, [r0, #20]
 80067a8:	2240      	movs	r2, #64	@ 0x40
 80067aa:	6082      	str	r2, [r0, #8]
 80067ac:	bc30      	pop	{r4, r5}
 80067ae:	2000      	movs	r0, #0
 80067b0:	4770      	bx	lr
 80067b2:	4b0f      	ldr	r3, [pc, #60]	@ (80067f0 <arm_rfft_init_q15+0xf0>)
 80067b4:	6143      	str	r3, [r0, #20]
 80067b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067ba:	6082      	str	r2, [r0, #8]
 80067bc:	2000      	movs	r0, #0
 80067be:	e7b8      	b.n	8006732 <arm_rfft_init_q15+0x32>
 80067c0:	4b0c      	ldr	r3, [pc, #48]	@ (80067f4 <arm_rfft_init_q15+0xf4>)
 80067c2:	6143      	str	r3, [r0, #20]
 80067c4:	2210      	movs	r2, #16
 80067c6:	6082      	str	r2, [r0, #8]
 80067c8:	2000      	movs	r0, #0
 80067ca:	e7b2      	b.n	8006732 <arm_rfft_init_q15+0x32>
 80067cc:	0800c3a8 	.word	0x0800c3a8
 80067d0:	080103a8 	.word	0x080103a8
 80067d4:	08008580 	.word	0x08008580
 80067d8:	08008520 	.word	0x08008520
 80067dc:	08008530 	.word	0x08008530
 80067e0:	08008570 	.word	0x08008570
 80067e4:	08008550 	.word	0x08008550
 80067e8:	08008590 	.word	0x08008590
 80067ec:	080085a0 	.word	0x080085a0
 80067f0:	08008540 	.word	0x08008540
 80067f4:	08008560 	.word	0x08008560

080067f8 <arm_mult_q15>:
 80067f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	ea5f 0893 	movs.w	r8, r3, lsr #2
 8006800:	d037      	beq.n	8006872 <arm_mult_q15+0x7a>
 8006802:	4694      	mov	ip, r2
 8006804:	460f      	mov	r7, r1
 8006806:	4606      	mov	r6, r0
 8006808:	46c6      	mov	lr, r8
 800680a:	f8d6 a000 	ldr.w	sl, [r6]
 800680e:	683d      	ldr	r5, [r7, #0]
 8006810:	6874      	ldr	r4, [r6, #4]
 8006812:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8006816:	fb15 f93a 	smultt	r9, r5, sl
 800681a:	ea4f 39e9 	mov.w	r9, r9, asr #15
 800681e:	3608      	adds	r6, #8
 8006820:	3708      	adds	r7, #8
 8006822:	f309 090f 	ssat	r9, #16, r9
 8006826:	fb1a fa05 	smulbb	sl, sl, r5
 800682a:	ea4f 3aea 	mov.w	sl, sl, asr #15
 800682e:	f30a 0a0f 	ssat	sl, #16, sl
 8006832:	fb1b f534 	smultt	r5, fp, r4
 8006836:	13ed      	asrs	r5, r5, #15
 8006838:	f305 050f 	ssat	r5, #16, r5
 800683c:	fb14 f40b 	smulbb	r4, r4, fp
 8006840:	13e4      	asrs	r4, r4, #15
 8006842:	f304 040f 	ssat	r4, #16, r4
 8006846:	fa1f fa8a 	uxth.w	sl, sl
 800684a:	b2a4      	uxth	r4, r4
 800684c:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 8006850:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006854:	f1be 0e01 	subs.w	lr, lr, #1
 8006858:	f8cc 9000 	str.w	r9, [ip]
 800685c:	f8cc 4004 	str.w	r4, [ip, #4]
 8006860:	f10c 0c08 	add.w	ip, ip, #8
 8006864:	d1d1      	bne.n	800680a <arm_mult_q15+0x12>
 8006866:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 800686a:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800686e:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8006872:	f013 0303 	ands.w	r3, r3, #3
 8006876:	d01b      	beq.n	80068b0 <arm_mult_q15+0xb8>
 8006878:	880c      	ldrh	r4, [r1, #0]
 800687a:	8805      	ldrh	r5, [r0, #0]
 800687c:	fb14 f405 	smulbb	r4, r4, r5
 8006880:	13e4      	asrs	r4, r4, #15
 8006882:	f304 040f 	ssat	r4, #16, r4
 8006886:	3b01      	subs	r3, #1
 8006888:	8014      	strh	r4, [r2, #0]
 800688a:	d011      	beq.n	80068b0 <arm_mult_q15+0xb8>
 800688c:	884c      	ldrh	r4, [r1, #2]
 800688e:	8845      	ldrh	r5, [r0, #2]
 8006890:	fb14 f405 	smulbb	r4, r4, r5
 8006894:	13e4      	asrs	r4, r4, #15
 8006896:	f304 040f 	ssat	r4, #16, r4
 800689a:	2b01      	cmp	r3, #1
 800689c:	8054      	strh	r4, [r2, #2]
 800689e:	d007      	beq.n	80068b0 <arm_mult_q15+0xb8>
 80068a0:	8883      	ldrh	r3, [r0, #4]
 80068a2:	8889      	ldrh	r1, [r1, #4]
 80068a4:	fb13 f301 	smulbb	r3, r3, r1
 80068a8:	13db      	asrs	r3, r3, #15
 80068aa:	f303 030f 	ssat	r3, #16, r3
 80068ae:	8093      	strh	r3, [r2, #4]
 80068b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068b4 <arm_dot_prod_q15>:
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	ea5f 0992 	movs.w	r9, r2, lsr #2
 80068bc:	d036      	beq.n	800692c <arm_dot_prod_q15+0x78>
 80068be:	468e      	mov	lr, r1
 80068c0:	4684      	mov	ip, r0
 80068c2:	46c8      	mov	r8, r9
 80068c4:	2600      	movs	r6, #0
 80068c6:	2700      	movs	r7, #0
 80068c8:	f8dc a000 	ldr.w	sl, [ip]
 80068cc:	f8de b000 	ldr.w	fp, [lr]
 80068d0:	4635      	mov	r5, r6
 80068d2:	463c      	mov	r4, r7
 80068d4:	fbca 54cb 	smlald	r5, r4, sl, fp
 80068d8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80068dc:	f8de 7004 	ldr.w	r7, [lr, #4]
 80068e0:	f10c 0c08 	add.w	ip, ip, #8
 80068e4:	f10e 0e08 	add.w	lr, lr, #8
 80068e8:	fbc6 54c7 	smlald	r5, r4, r6, r7
 80068ec:	f1b8 0801 	subs.w	r8, r8, #1
 80068f0:	462e      	mov	r6, r5
 80068f2:	4627      	mov	r7, r4
 80068f4:	d1e8      	bne.n	80068c8 <arm_dot_prod_q15+0x14>
 80068f6:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80068fa:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 80068fe:	f012 0203 	ands.w	r2, r2, #3
 8006902:	d00f      	beq.n	8006924 <arm_dot_prod_q15+0x70>
 8006904:	880d      	ldrh	r5, [r1, #0]
 8006906:	8804      	ldrh	r4, [r0, #0]
 8006908:	3a01      	subs	r2, #1
 800690a:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 800690e:	d009      	beq.n	8006924 <arm_dot_prod_q15+0x70>
 8006910:	884d      	ldrh	r5, [r1, #2]
 8006912:	8844      	ldrh	r4, [r0, #2]
 8006914:	2a01      	cmp	r2, #1
 8006916:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 800691a:	d003      	beq.n	8006924 <arm_dot_prod_q15+0x70>
 800691c:	8880      	ldrh	r0, [r0, #4]
 800691e:	888a      	ldrh	r2, [r1, #4]
 8006920:	fbc0 6782 	smlalbb	r6, r7, r0, r2
 8006924:	e9c3 6700 	strd	r6, r7, [r3]
 8006928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692c:	2600      	movs	r6, #0
 800692e:	2700      	movs	r7, #0
 8006930:	e7e5      	b.n	80068fe <arm_dot_prod_q15+0x4a>
 8006932:	bf00      	nop

08006934 <arm_cfft_radix4by2_q15>:
 8006934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006938:	084d      	lsrs	r5, r1, #1
 800693a:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800693e:	4616      	mov	r6, r2
 8006940:	d047      	beq.n	80069d2 <arm_cfft_radix4by2_q15+0x9e>
 8006942:	4604      	mov	r4, r0
 8006944:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 80069ec <arm_cfft_radix4by2_q15+0xb8>
 8006948:	4696      	mov	lr, r2
 800694a:	4638      	mov	r0, r7
 800694c:	4621      	mov	r1, r4
 800694e:	462a      	mov	r2, r5
 8006950:	f04f 0c00 	mov.w	ip, #0
 8006954:	680b      	ldr	r3, [r1, #0]
 8006956:	f8d0 a000 	ldr.w	sl, [r0]
 800695a:	fa93 f32c 	shadd16	r3, r3, ip
 800695e:	fa9a fa2c 	shadd16	sl, sl, ip
 8006962:	fa93 f92a 	shadd16	r9, r3, sl
 8006966:	fad3 fa1a 	qsub16	sl, r3, sl
 800696a:	f85e 3b04 	ldr.w	r3, [lr], #4
 800696e:	f841 9b04 	str.w	r9, [r1], #4
 8006972:	fb23 f90a 	smuad	r9, r3, sl
 8006976:	fb43 f31a 	smusdx	r3, r3, sl
 800697a:	ea03 0308 	and.w	r3, r3, r8
 800697e:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8006982:	3a01      	subs	r2, #1
 8006984:	f840 3b04 	str.w	r3, [r0], #4
 8006988:	d1e4      	bne.n	8006954 <arm_cfft_radix4by2_q15+0x20>
 800698a:	4629      	mov	r1, r5
 800698c:	2302      	movs	r3, #2
 800698e:	4632      	mov	r2, r6
 8006990:	4620      	mov	r0, r4
 8006992:	f000 f8e9 	bl	8006b68 <arm_radix4_butterfly_q15>
 8006996:	4638      	mov	r0, r7
 8006998:	4629      	mov	r1, r5
 800699a:	4632      	mov	r2, r6
 800699c:	2302      	movs	r3, #2
 800699e:	f000 f8e3 	bl	8006b68 <arm_radix4_butterfly_q15>
 80069a2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80069a6:	4620      	mov	r0, r4
 80069a8:	f9b0 6000 	ldrsh.w	r6, [r0]
 80069ac:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80069b0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80069b4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80069b8:	0076      	lsls	r6, r6, #1
 80069ba:	0064      	lsls	r4, r4, #1
 80069bc:	0052      	lsls	r2, r2, #1
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	8006      	strh	r6, [r0, #0]
 80069c2:	8044      	strh	r4, [r0, #2]
 80069c4:	8082      	strh	r2, [r0, #4]
 80069c6:	80c3      	strh	r3, [r0, #6]
 80069c8:	3008      	adds	r0, #8
 80069ca:	4285      	cmp	r5, r0
 80069cc:	d1ec      	bne.n	80069a8 <arm_cfft_radix4by2_q15+0x74>
 80069ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d2:	4629      	mov	r1, r5
 80069d4:	2302      	movs	r3, #2
 80069d6:	f000 f8c7 	bl	8006b68 <arm_radix4_butterfly_q15>
 80069da:	4632      	mov	r2, r6
 80069dc:	4629      	mov	r1, r5
 80069de:	4638      	mov	r0, r7
 80069e0:	2302      	movs	r3, #2
 80069e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e6:	f000 b8bf 	b.w	8006b68 <arm_radix4_butterfly_q15>
 80069ea:	bf00      	nop
 80069ec:	ffff0000 	.word	0xffff0000

080069f0 <arm_cfft_radix4by2_inverse_q15>:
 80069f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f4:	084d      	lsrs	r5, r1, #1
 80069f6:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80069fa:	4616      	mov	r6, r2
 80069fc:	d047      	beq.n	8006a8e <arm_cfft_radix4by2_inverse_q15+0x9e>
 80069fe:	4604      	mov	r4, r0
 8006a00:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8006aa8 <arm_cfft_radix4by2_inverse_q15+0xb8>
 8006a04:	4696      	mov	lr, r2
 8006a06:	4638      	mov	r0, r7
 8006a08:	4621      	mov	r1, r4
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	f04f 0c00 	mov.w	ip, #0
 8006a10:	680b      	ldr	r3, [r1, #0]
 8006a12:	f8d0 a000 	ldr.w	sl, [r0]
 8006a16:	fa93 f32c 	shadd16	r3, r3, ip
 8006a1a:	fa9a fa2c 	shadd16	sl, sl, ip
 8006a1e:	fa93 f92a 	shadd16	r9, r3, sl
 8006a22:	fad3 fa1a 	qsub16	sl, r3, sl
 8006a26:	f85e 3b04 	ldr.w	r3, [lr], #4
 8006a2a:	f841 9b04 	str.w	r9, [r1], #4
 8006a2e:	fb43 f90a 	smusd	r9, r3, sl
 8006a32:	fb23 f31a 	smuadx	r3, r3, sl
 8006a36:	ea03 0308 	and.w	r3, r3, r8
 8006a3a:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8006a3e:	3a01      	subs	r2, #1
 8006a40:	f840 3b04 	str.w	r3, [r0], #4
 8006a44:	d1e4      	bne.n	8006a10 <arm_cfft_radix4by2_inverse_q15+0x20>
 8006a46:	4629      	mov	r1, r5
 8006a48:	2302      	movs	r3, #2
 8006a4a:	4632      	mov	r2, r6
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f000 fa35 	bl	8006ebc <arm_radix4_butterfly_inverse_q15>
 8006a52:	4638      	mov	r0, r7
 8006a54:	4629      	mov	r1, r5
 8006a56:	4632      	mov	r2, r6
 8006a58:	2302      	movs	r3, #2
 8006a5a:	f000 fa2f 	bl	8006ebc <arm_radix4_butterfly_inverse_q15>
 8006a5e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8006a62:	4620      	mov	r0, r4
 8006a64:	f9b0 6000 	ldrsh.w	r6, [r0]
 8006a68:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8006a6c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8006a70:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8006a74:	0076      	lsls	r6, r6, #1
 8006a76:	0064      	lsls	r4, r4, #1
 8006a78:	0052      	lsls	r2, r2, #1
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	8006      	strh	r6, [r0, #0]
 8006a7e:	8044      	strh	r4, [r0, #2]
 8006a80:	8082      	strh	r2, [r0, #4]
 8006a82:	80c3      	strh	r3, [r0, #6]
 8006a84:	3008      	adds	r0, #8
 8006a86:	4285      	cmp	r5, r0
 8006a88:	d1ec      	bne.n	8006a64 <arm_cfft_radix4by2_inverse_q15+0x74>
 8006a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8e:	4629      	mov	r1, r5
 8006a90:	2302      	movs	r3, #2
 8006a92:	f000 fa13 	bl	8006ebc <arm_radix4_butterfly_inverse_q15>
 8006a96:	4632      	mov	r2, r6
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa2:	f000 ba0b 	b.w	8006ebc <arm_radix4_butterfly_inverse_q15>
 8006aa6:	bf00      	nop
 8006aa8:	ffff0000 	.word	0xffff0000

08006aac <arm_cfft_q15>:
 8006aac:	b5e0      	push	{r5, r6, r7, lr}
 8006aae:	2a01      	cmp	r2, #1
 8006ab0:	460f      	mov	r7, r1
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	8801      	ldrh	r1, [r0, #0]
 8006ab6:	461e      	mov	r6, r3
 8006ab8:	d02f      	beq.n	8006b1a <arm_cfft_q15+0x6e>
 8006aba:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006abe:	d026      	beq.n	8006b0e <arm_cfft_q15+0x62>
 8006ac0:	d908      	bls.n	8006ad4 <arm_cfft_q15+0x28>
 8006ac2:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006ac6:	d017      	beq.n	8006af8 <arm_cfft_q15+0x4c>
 8006ac8:	d91b      	bls.n	8006b02 <arm_cfft_q15+0x56>
 8006aca:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006ace:	d01e      	beq.n	8006b0e <arm_cfft_q15+0x62>
 8006ad0:	b93e      	cbnz	r6, 8006ae2 <arm_cfft_q15+0x36>
 8006ad2:	bde0      	pop	{r5, r6, r7, pc}
 8006ad4:	2940      	cmp	r1, #64	@ 0x40
 8006ad6:	d01a      	beq.n	8006b0e <arm_cfft_q15+0x62>
 8006ad8:	d90a      	bls.n	8006af0 <arm_cfft_q15+0x44>
 8006ada:	2980      	cmp	r1, #128	@ 0x80
 8006adc:	d00c      	beq.n	8006af8 <arm_cfft_q15+0x4c>
 8006ade:	2e00      	cmp	r6, #0
 8006ae0:	d0f7      	beq.n	8006ad2 <arm_cfft_q15+0x26>
 8006ae2:	68aa      	ldr	r2, [r5, #8]
 8006ae4:	89a9      	ldrh	r1, [r5, #12]
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8006aec:	f000 bb90 	b.w	8007210 <arm_bitreversal_16>
 8006af0:	2910      	cmp	r1, #16
 8006af2:	d00c      	beq.n	8006b0e <arm_cfft_q15+0x62>
 8006af4:	2920      	cmp	r1, #32
 8006af6:	d1eb      	bne.n	8006ad0 <arm_cfft_q15+0x24>
 8006af8:	686a      	ldr	r2, [r5, #4]
 8006afa:	4638      	mov	r0, r7
 8006afc:	f7ff ff1a 	bl	8006934 <arm_cfft_radix4by2_q15>
 8006b00:	e7e6      	b.n	8006ad0 <arm_cfft_q15+0x24>
 8006b02:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006b06:	d0f7      	beq.n	8006af8 <arm_cfft_q15+0x4c>
 8006b08:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006b0c:	d1e0      	bne.n	8006ad0 <arm_cfft_q15+0x24>
 8006b0e:	686a      	ldr	r2, [r5, #4]
 8006b10:	2301      	movs	r3, #1
 8006b12:	4638      	mov	r0, r7
 8006b14:	f000 f828 	bl	8006b68 <arm_radix4_butterfly_q15>
 8006b18:	e7da      	b.n	8006ad0 <arm_cfft_q15+0x24>
 8006b1a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006b1e:	d01d      	beq.n	8006b5c <arm_cfft_q15+0xb0>
 8006b20:	d907      	bls.n	8006b32 <arm_cfft_q15+0x86>
 8006b22:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006b26:	d00e      	beq.n	8006b46 <arm_cfft_q15+0x9a>
 8006b28:	d912      	bls.n	8006b50 <arm_cfft_q15+0xa4>
 8006b2a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006b2e:	d1cf      	bne.n	8006ad0 <arm_cfft_q15+0x24>
 8006b30:	e014      	b.n	8006b5c <arm_cfft_q15+0xb0>
 8006b32:	2940      	cmp	r1, #64	@ 0x40
 8006b34:	d012      	beq.n	8006b5c <arm_cfft_q15+0xb0>
 8006b36:	d902      	bls.n	8006b3e <arm_cfft_q15+0x92>
 8006b38:	2980      	cmp	r1, #128	@ 0x80
 8006b3a:	d004      	beq.n	8006b46 <arm_cfft_q15+0x9a>
 8006b3c:	e7c8      	b.n	8006ad0 <arm_cfft_q15+0x24>
 8006b3e:	2910      	cmp	r1, #16
 8006b40:	d00c      	beq.n	8006b5c <arm_cfft_q15+0xb0>
 8006b42:	2920      	cmp	r1, #32
 8006b44:	d1c4      	bne.n	8006ad0 <arm_cfft_q15+0x24>
 8006b46:	686a      	ldr	r2, [r5, #4]
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f7ff ff51 	bl	80069f0 <arm_cfft_radix4by2_inverse_q15>
 8006b4e:	e7bf      	b.n	8006ad0 <arm_cfft_q15+0x24>
 8006b50:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006b54:	d0f7      	beq.n	8006b46 <arm_cfft_q15+0x9a>
 8006b56:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006b5a:	d1b9      	bne.n	8006ad0 <arm_cfft_q15+0x24>
 8006b5c:	686a      	ldr	r2, [r5, #4]
 8006b5e:	2301      	movs	r3, #1
 8006b60:	4638      	mov	r0, r7
 8006b62:	f000 f9ab 	bl	8006ebc <arm_radix4_butterfly_inverse_q15>
 8006b66:	e7b3      	b.n	8006ad0 <arm_cfft_q15+0x24>

08006b68 <arm_radix4_butterfly_q15>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	b093      	sub	sp, #76	@ 0x4c
 8006b6e:	f021 0a03 	bic.w	sl, r1, #3
 8006b72:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8006b76:	9210      	str	r2, [sp, #64]	@ 0x40
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8006b7e:	eb0c 050a 	add.w	r5, ip, sl
 8006b82:	9101      	str	r1, [sp, #4]
 8006b84:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006b86:	9303      	str	r3, [sp, #12]
 8006b88:	4482      	add	sl, r0
 8006b8a:	9211      	str	r2, [sp, #68]	@ 0x44
 8006b8c:	f040 8124 	bne.w	8006dd8 <arm_radix4_butterfly_q15+0x270>
 8006b90:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006b92:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8006eb8 <arm_radix4_butterfly_q15+0x350>
 8006b96:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8006b98:	f8cd a008 	str.w	sl, [sp, #8]
 8006b9c:	4693      	mov	fp, r2
 8006b9e:	4690      	mov	r8, r2
 8006ba0:	4657      	mov	r7, sl
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	4691      	mov	r9, r2
 8006ba6:	6830      	ldr	r0, [r6, #0]
 8006ba8:	f8dc 2000 	ldr.w	r2, [ip]
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	fa90 f023 	shadd16	r0, r0, r3
 8006bb2:	fa91 f123 	shadd16	r1, r1, r3
 8006bb6:	fa90 f023 	shadd16	r0, r0, r3
 8006bba:	fa91 fa23 	shadd16	sl, r1, r3
 8006bbe:	fa92 f223 	shadd16	r2, r2, r3
 8006bc2:	6829      	ldr	r1, [r5, #0]
 8006bc4:	fa92 f223 	shadd16	r2, r2, r3
 8006bc8:	fa91 f123 	shadd16	r1, r1, r3
 8006bcc:	fa90 f412 	qadd16	r4, r0, r2
 8006bd0:	fa91 f123 	shadd16	r1, r1, r3
 8006bd4:	fa9a f111 	qadd16	r1, sl, r1
 8006bd8:	fa94 fa21 	shadd16	sl, r4, r1
 8006bdc:	f846 ab04 	str.w	sl, [r6], #4
 8006be0:	fad4 f411 	qsub16	r4, r4, r1
 8006be4:	fad0 f212 	qsub16	r2, r0, r2
 8006be8:	f85b 1b08 	ldr.w	r1, [fp], #8
 8006bec:	fb21 f004 	smuad	r0, r1, r4
 8006bf0:	fb41 f114 	smusdx	r1, r1, r4
 8006bf4:	ea01 010e 	and.w	r1, r1, lr
 8006bf8:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8006bfc:	6838      	ldr	r0, [r7, #0]
 8006bfe:	f847 1b04 	str.w	r1, [r7], #4
 8006c02:	fa90 f023 	shadd16	r0, r0, r3
 8006c06:	682c      	ldr	r4, [r5, #0]
 8006c08:	fa90 f023 	shadd16	r0, r0, r3
 8006c0c:	fa94 f423 	shadd16	r4, r4, r3
 8006c10:	f859 1b04 	ldr.w	r1, [r9], #4
 8006c14:	fa94 f423 	shadd16	r4, r4, r3
 8006c18:	fad0 f014 	qsub16	r0, r0, r4
 8006c1c:	faa2 f410 	qasx	r4, r2, r0
 8006c20:	fae2 f210 	qsax	r2, r2, r0
 8006c24:	fb21 fa02 	smuad	sl, r1, r2
 8006c28:	fb41 f212 	smusdx	r2, r1, r2
 8006c2c:	ea02 020e 	and.w	r2, r2, lr
 8006c30:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8006c34:	f84c 2b04 	str.w	r2, [ip], #4
 8006c38:	f858 2b0c 	ldr.w	r2, [r8], #12
 8006c3c:	fb22 f104 	smuad	r1, r2, r4
 8006c40:	fb42 f214 	smusdx	r2, r2, r4
 8006c44:	ea02 020e 	and.w	r2, r2, lr
 8006c48:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8006c4c:	f845 2b04 	str.w	r2, [r5], #4
 8006c50:	9a02      	ldr	r2, [sp, #8]
 8006c52:	42b2      	cmp	r2, r6
 8006c54:	d1a7      	bne.n	8006ba6 <arm_radix4_butterfly_q15+0x3e>
 8006c56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	2a04      	cmp	r2, #4
 8006c5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006c60:	f240 8127 	bls.w	8006eb2 <arm_radix4_butterfly_q15+0x34a>
 8006c64:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8006eb8 <arm_radix4_butterfly_q15+0x350>
 8006c68:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c6a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006c6c:	9102      	str	r1, [sp, #8]
 8006c6e:	4608      	mov	r0, r1
 8006c70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006c74:	0889      	lsrs	r1, r1, #2
 8006c76:	0092      	lsls	r2, r2, #2
 8006c78:	0086      	lsls	r6, r0, #2
 8006c7a:	9801      	ldr	r0, [sp, #4]
 8006c7c:	920d      	str	r2, [sp, #52]	@ 0x34
 8006c7e:	008c      	lsls	r4, r1, #2
 8006c80:	009a      	lsls	r2, r3, #2
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	4288      	cmp	r0, r1
 8006c86:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c8e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8006c90:	910e      	str	r1, [sp, #56]	@ 0x38
 8006c92:	bf28      	it	cs
 8006c94:	460c      	movcs	r4, r1
 8006c96:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8006c9a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8006c9e:	9308      	str	r3, [sp, #32]
 8006ca0:	9307      	str	r3, [sp, #28]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	940c      	str	r4, [sp, #48]	@ 0x30
 8006ca6:	9104      	str	r1, [sp, #16]
 8006ca8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006caa:	9303      	str	r3, [sp, #12]
 8006cac:	9b08      	ldr	r3, [sp, #32]
 8006cae:	9a05      	ldr	r2, [sp, #20]
 8006cb0:	f8d3 9000 	ldr.w	r9, [r3]
 8006cb4:	9b07      	ldr	r3, [sp, #28]
 8006cb6:	9f03      	ldr	r7, [sp, #12]
 8006cb8:	f8d3 8000 	ldr.w	r8, [r3]
 8006cbc:	9b06      	ldr	r3, [sp, #24]
 8006cbe:	f8d3 e000 	ldr.w	lr, [r3]
 8006cc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cc4:	4615      	mov	r5, r2
 8006cc6:	1898      	adds	r0, r3, r2
 8006cc8:	9a04      	ldr	r2, [sp, #16]
 8006cca:	4614      	mov	r4, r2
 8006ccc:	1899      	adds	r1, r3, r2
 8006cce:	682a      	ldr	r2, [r5, #0]
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	f8d0 b000 	ldr.w	fp, [r0]
 8006cd6:	fa92 fc13 	qadd16	ip, r2, r3
 8006cda:	fad2 f213 	qsub16	r2, r2, r3
 8006cde:	680b      	ldr	r3, [r1, #0]
 8006ce0:	fa9b f313 	qadd16	r3, fp, r3
 8006ce4:	fa9c fb23 	shadd16	fp, ip, r3
 8006ce8:	fadc f323 	shsub16	r3, ip, r3
 8006cec:	f04f 0c00 	mov.w	ip, #0
 8006cf0:	fa9b fb2c 	shadd16	fp, fp, ip
 8006cf4:	f8c5 b000 	str.w	fp, [r5]
 8006cf8:	4435      	add	r5, r6
 8006cfa:	fb28 fb03 	smuad	fp, r8, r3
 8006cfe:	fb48 f313 	smusdx	r3, r8, r3
 8006d02:	ea03 030a 	and.w	r3, r3, sl
 8006d06:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8006d0a:	f8d0 b000 	ldr.w	fp, [r0]
 8006d0e:	6003      	str	r3, [r0, #0]
 8006d10:	f8d1 c000 	ldr.w	ip, [r1]
 8006d14:	fadb fc1c 	qsub16	ip, fp, ip
 8006d18:	4430      	add	r0, r6
 8006d1a:	faa2 f32c 	shasx	r3, r2, ip
 8006d1e:	fae2 f22c 	shsax	r2, r2, ip
 8006d22:	fb29 fc02 	smuad	ip, r9, r2
 8006d26:	fb49 f212 	smusdx	r2, r9, r2
 8006d2a:	ea02 020a 	and.w	r2, r2, sl
 8006d2e:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8006d32:	6022      	str	r2, [r4, #0]
 8006d34:	4434      	add	r4, r6
 8006d36:	fb2e f203 	smuad	r2, lr, r3
 8006d3a:	fb4e f313 	smusdx	r3, lr, r3
 8006d3e:	ea03 030a 	and.w	r3, r3, sl
 8006d42:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8006d46:	9a02      	ldr	r2, [sp, #8]
 8006d48:	600b      	str	r3, [r1, #0]
 8006d4a:	9b01      	ldr	r3, [sp, #4]
 8006d4c:	4417      	add	r7, r2
 8006d4e:	42bb      	cmp	r3, r7
 8006d50:	4431      	add	r1, r6
 8006d52:	d8bc      	bhi.n	8006cce <arm_radix4_butterfly_q15+0x166>
 8006d54:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8006d58:	440a      	add	r2, r1
 8006d5a:	9208      	str	r2, [sp, #32]
 8006d5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d5e:	9a07      	ldr	r2, [sp, #28]
 8006d60:	9b03      	ldr	r3, [sp, #12]
 8006d62:	440a      	add	r2, r1
 8006d64:	9207      	str	r2, [sp, #28]
 8006d66:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006d68:	9a06      	ldr	r2, [sp, #24]
 8006d6a:	440a      	add	r2, r1
 8006d6c:	9206      	str	r2, [sp, #24]
 8006d6e:	9a05      	ldr	r2, [sp, #20]
 8006d70:	3204      	adds	r2, #4
 8006d72:	9205      	str	r2, [sp, #20]
 8006d74:	9a04      	ldr	r2, [sp, #16]
 8006d76:	3204      	adds	r2, #4
 8006d78:	9204      	str	r2, [sp, #16]
 8006d7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	9303      	str	r3, [sp, #12]
 8006d82:	d393      	bcc.n	8006cac <arm_radix4_butterfly_q15+0x144>
 8006d84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d88:	2a04      	cmp	r2, #4
 8006d8a:	f63f af6e 	bhi.w	8006c6a <arm_radix4_butterfly_q15+0x102>
 8006d8e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d92:	689d      	ldr	r5, [r3, #8]
 8006d94:	68de      	ldr	r6, [r3, #12]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	6859      	ldr	r1, [r3, #4]
 8006d9a:	fa92 f015 	qadd16	r0, r2, r5
 8006d9e:	3c01      	subs	r4, #1
 8006da0:	fad2 f215 	qsub16	r2, r2, r5
 8006da4:	f103 0310 	add.w	r3, r3, #16
 8006da8:	fa91 f516 	qadd16	r5, r1, r6
 8006dac:	fad1 f116 	qsub16	r1, r1, r6
 8006db0:	fa90 f625 	shadd16	r6, r0, r5
 8006db4:	fad0 f025 	shsub16	r0, r0, r5
 8006db8:	f843 6c10 	str.w	r6, [r3, #-16]
 8006dbc:	f843 0c0c 	str.w	r0, [r3, #-12]
 8006dc0:	fae2 f021 	shsax	r0, r2, r1
 8006dc4:	faa2 f221 	shasx	r2, r2, r1
 8006dc8:	f843 0c08 	str.w	r0, [r3, #-8]
 8006dcc:	f843 2c04 	str.w	r2, [r3, #-4]
 8006dd0:	d1df      	bne.n	8006d92 <arm_radix4_butterfly_q15+0x22a>
 8006dd2:	b013      	add	sp, #76	@ 0x4c
 8006dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd8:	2400      	movs	r4, #0
 8006dda:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8006eb8 <arm_radix4_butterfly_q15+0x350>
 8006dde:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006de0:	4623      	mov	r3, r4
 8006de2:	4680      	mov	r8, r0
 8006de4:	4691      	mov	r9, r2
 8006de6:	f8d8 0000 	ldr.w	r0, [r8]
 8006dea:	f8dc 2000 	ldr.w	r2, [ip]
 8006dee:	f8da 1000 	ldr.w	r1, [sl]
 8006df2:	fa90 f023 	shadd16	r0, r0, r3
 8006df6:	fa91 f123 	shadd16	r1, r1, r3
 8006dfa:	fa90 f023 	shadd16	r0, r0, r3
 8006dfe:	fa91 fb23 	shadd16	fp, r1, r3
 8006e02:	fa92 f223 	shadd16	r2, r2, r3
 8006e06:	6829      	ldr	r1, [r5, #0]
 8006e08:	fa92 f223 	shadd16	r2, r2, r3
 8006e0c:	fa91 f123 	shadd16	r1, r1, r3
 8006e10:	fa90 f612 	qadd16	r6, r0, r2
 8006e14:	fa91 f123 	shadd16	r1, r1, r3
 8006e18:	fa9b f111 	qadd16	r1, fp, r1
 8006e1c:	fa96 fb21 	shadd16	fp, r6, r1
 8006e20:	f848 bb04 	str.w	fp, [r8], #4
 8006e24:	fad6 f611 	qsub16	r6, r6, r1
 8006e28:	fad0 f212 	qsub16	r2, r0, r2
 8006e2c:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8006e30:	fb21 f006 	smuad	r0, r1, r6
 8006e34:	fb41 f116 	smusdx	r1, r1, r6
 8006e38:	ea01 010e 	and.w	r1, r1, lr
 8006e3c:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8006e40:	f8da 0000 	ldr.w	r0, [sl]
 8006e44:	f84a 1b04 	str.w	r1, [sl], #4
 8006e48:	fa90 f023 	shadd16	r0, r0, r3
 8006e4c:	682e      	ldr	r6, [r5, #0]
 8006e4e:	fa90 f023 	shadd16	r0, r0, r3
 8006e52:	fa96 f623 	shadd16	r6, r6, r3
 8006e56:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8006e5a:	fa96 f623 	shadd16	r6, r6, r3
 8006e5e:	fad0 f016 	qsub16	r0, r0, r6
 8006e62:	faa2 f610 	qasx	r6, r2, r0
 8006e66:	fae2 f210 	qsax	r2, r2, r0
 8006e6a:	fb21 fb02 	smuad	fp, r1, r2
 8006e6e:	fb41 f212 	smusdx	r2, r1, r2
 8006e72:	ea02 020e 	and.w	r2, r2, lr
 8006e76:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8006e7a:	f84c 2b04 	str.w	r2, [ip], #4
 8006e7e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006e82:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006e86:	fb22 f106 	smuad	r1, r2, r6
 8006e8a:	fb42 f216 	smusdx	r2, r2, r6
 8006e8e:	ea02 020e 	and.w	r2, r2, lr
 8006e92:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8006e96:	f845 2b04 	str.w	r2, [r5], #4
 8006e9a:	9a03      	ldr	r2, [sp, #12]
 8006e9c:	f1b9 0901 	subs.w	r9, r9, #1
 8006ea0:	4414      	add	r4, r2
 8006ea2:	d1a0      	bne.n	8006de6 <arm_radix4_butterfly_q15+0x27e>
 8006ea4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	2a04      	cmp	r2, #4
 8006eaa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006eae:	f63f aed9 	bhi.w	8006c64 <arm_radix4_butterfly_q15+0xfc>
 8006eb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	e76c      	b.n	8006d92 <arm_radix4_butterfly_q15+0x22a>
 8006eb8:	ffff0000 	.word	0xffff0000

08006ebc <arm_radix4_butterfly_inverse_q15>:
 8006ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec0:	b093      	sub	sp, #76	@ 0x4c
 8006ec2:	f021 0a03 	bic.w	sl, r1, #3
 8006ec6:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8006eca:	9210      	str	r2, [sp, #64]	@ 0x40
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8006ed2:	eb0c 050a 	add.w	r5, ip, sl
 8006ed6:	9101      	str	r1, [sp, #4]
 8006ed8:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006eda:	9303      	str	r3, [sp, #12]
 8006edc:	4482      	add	sl, r0
 8006ede:	9211      	str	r2, [sp, #68]	@ 0x44
 8006ee0:	f040 8124 	bne.w	800712c <arm_radix4_butterfly_inverse_q15+0x270>
 8006ee4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006ee6:	f8df e324 	ldr.w	lr, [pc, #804]	@ 800720c <arm_radix4_butterfly_inverse_q15+0x350>
 8006eea:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8006eec:	f8cd a008 	str.w	sl, [sp, #8]
 8006ef0:	4693      	mov	fp, r2
 8006ef2:	4690      	mov	r8, r2
 8006ef4:	4657      	mov	r7, sl
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	4691      	mov	r9, r2
 8006efa:	6830      	ldr	r0, [r6, #0]
 8006efc:	f8dc 2000 	ldr.w	r2, [ip]
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	fa90 f023 	shadd16	r0, r0, r3
 8006f06:	fa91 f123 	shadd16	r1, r1, r3
 8006f0a:	fa90 f023 	shadd16	r0, r0, r3
 8006f0e:	fa91 fa23 	shadd16	sl, r1, r3
 8006f12:	fa92 f223 	shadd16	r2, r2, r3
 8006f16:	6829      	ldr	r1, [r5, #0]
 8006f18:	fa92 f223 	shadd16	r2, r2, r3
 8006f1c:	fa91 f123 	shadd16	r1, r1, r3
 8006f20:	fa90 f412 	qadd16	r4, r0, r2
 8006f24:	fa91 f123 	shadd16	r1, r1, r3
 8006f28:	fa9a f111 	qadd16	r1, sl, r1
 8006f2c:	fa94 fa21 	shadd16	sl, r4, r1
 8006f30:	f846 ab04 	str.w	sl, [r6], #4
 8006f34:	fad4 f411 	qsub16	r4, r4, r1
 8006f38:	fad0 f212 	qsub16	r2, r0, r2
 8006f3c:	f85b 1b08 	ldr.w	r1, [fp], #8
 8006f40:	fb41 f004 	smusd	r0, r1, r4
 8006f44:	fb21 f114 	smuadx	r1, r1, r4
 8006f48:	ea01 010e 	and.w	r1, r1, lr
 8006f4c:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8006f50:	6838      	ldr	r0, [r7, #0]
 8006f52:	f847 1b04 	str.w	r1, [r7], #4
 8006f56:	fa90 f023 	shadd16	r0, r0, r3
 8006f5a:	682c      	ldr	r4, [r5, #0]
 8006f5c:	fa90 f023 	shadd16	r0, r0, r3
 8006f60:	fa94 f423 	shadd16	r4, r4, r3
 8006f64:	f859 1b04 	ldr.w	r1, [r9], #4
 8006f68:	fa94 f423 	shadd16	r4, r4, r3
 8006f6c:	fad0 f014 	qsub16	r0, r0, r4
 8006f70:	fae2 f410 	qsax	r4, r2, r0
 8006f74:	faa2 f210 	qasx	r2, r2, r0
 8006f78:	fb41 fa02 	smusd	sl, r1, r2
 8006f7c:	fb21 f212 	smuadx	r2, r1, r2
 8006f80:	ea02 020e 	and.w	r2, r2, lr
 8006f84:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8006f88:	f84c 2b04 	str.w	r2, [ip], #4
 8006f8c:	f858 2b0c 	ldr.w	r2, [r8], #12
 8006f90:	fb42 f104 	smusd	r1, r2, r4
 8006f94:	fb22 f214 	smuadx	r2, r2, r4
 8006f98:	ea02 020e 	and.w	r2, r2, lr
 8006f9c:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8006fa0:	f845 2b04 	str.w	r2, [r5], #4
 8006fa4:	9a02      	ldr	r2, [sp, #8]
 8006fa6:	42b2      	cmp	r2, r6
 8006fa8:	d1a7      	bne.n	8006efa <arm_radix4_butterfly_inverse_q15+0x3e>
 8006faa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006fac:	9b03      	ldr	r3, [sp, #12]
 8006fae:	2a04      	cmp	r2, #4
 8006fb0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006fb4:	f240 8127 	bls.w	8007206 <arm_radix4_butterfly_inverse_q15+0x34a>
 8006fb8:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800720c <arm_radix4_butterfly_inverse_q15+0x350>
 8006fbc:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fbe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006fc0:	9102      	str	r1, [sp, #8]
 8006fc2:	4608      	mov	r0, r1
 8006fc4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006fc8:	0889      	lsrs	r1, r1, #2
 8006fca:	0092      	lsls	r2, r2, #2
 8006fcc:	0086      	lsls	r6, r0, #2
 8006fce:	9801      	ldr	r0, [sp, #4]
 8006fd0:	920d      	str	r2, [sp, #52]	@ 0x34
 8006fd2:	008c      	lsls	r4, r1, #2
 8006fd4:	009a      	lsls	r2, r3, #2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4288      	cmp	r0, r1
 8006fda:	940a      	str	r4, [sp, #40]	@ 0x28
 8006fdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fde:	4604      	mov	r4, r0
 8006fe0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fe2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8006fe4:	910e      	str	r1, [sp, #56]	@ 0x38
 8006fe6:	bf28      	it	cs
 8006fe8:	460c      	movcs	r4, r1
 8006fea:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8006fee:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8006ff2:	9308      	str	r3, [sp, #32]
 8006ff4:	9307      	str	r3, [sp, #28]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	940c      	str	r4, [sp, #48]	@ 0x30
 8006ffa:	9104      	str	r1, [sp, #16]
 8006ffc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ffe:	9303      	str	r3, [sp, #12]
 8007000:	9b08      	ldr	r3, [sp, #32]
 8007002:	9a05      	ldr	r2, [sp, #20]
 8007004:	f8d3 9000 	ldr.w	r9, [r3]
 8007008:	9b07      	ldr	r3, [sp, #28]
 800700a:	9f03      	ldr	r7, [sp, #12]
 800700c:	f8d3 8000 	ldr.w	r8, [r3]
 8007010:	9b06      	ldr	r3, [sp, #24]
 8007012:	f8d3 e000 	ldr.w	lr, [r3]
 8007016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007018:	4615      	mov	r5, r2
 800701a:	1898      	adds	r0, r3, r2
 800701c:	9a04      	ldr	r2, [sp, #16]
 800701e:	4614      	mov	r4, r2
 8007020:	1899      	adds	r1, r3, r2
 8007022:	682a      	ldr	r2, [r5, #0]
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	f8d0 b000 	ldr.w	fp, [r0]
 800702a:	fa92 fc13 	qadd16	ip, r2, r3
 800702e:	fad2 f213 	qsub16	r2, r2, r3
 8007032:	680b      	ldr	r3, [r1, #0]
 8007034:	fa9b f313 	qadd16	r3, fp, r3
 8007038:	fa9c fb23 	shadd16	fp, ip, r3
 800703c:	fadc f323 	shsub16	r3, ip, r3
 8007040:	f04f 0c00 	mov.w	ip, #0
 8007044:	fa9b fb2c 	shadd16	fp, fp, ip
 8007048:	f8c5 b000 	str.w	fp, [r5]
 800704c:	4435      	add	r5, r6
 800704e:	fb48 fb03 	smusd	fp, r8, r3
 8007052:	fb28 f313 	smuadx	r3, r8, r3
 8007056:	ea03 030a 	and.w	r3, r3, sl
 800705a:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800705e:	f8d0 b000 	ldr.w	fp, [r0]
 8007062:	6003      	str	r3, [r0, #0]
 8007064:	f8d1 c000 	ldr.w	ip, [r1]
 8007068:	fadb fc1c 	qsub16	ip, fp, ip
 800706c:	4430      	add	r0, r6
 800706e:	fae2 f32c 	shsax	r3, r2, ip
 8007072:	faa2 f22c 	shasx	r2, r2, ip
 8007076:	fb49 fc02 	smusd	ip, r9, r2
 800707a:	fb29 f212 	smuadx	r2, r9, r2
 800707e:	ea02 020a 	and.w	r2, r2, sl
 8007082:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8007086:	6022      	str	r2, [r4, #0]
 8007088:	4434      	add	r4, r6
 800708a:	fb4e f203 	smusd	r2, lr, r3
 800708e:	fb2e f313 	smuadx	r3, lr, r3
 8007092:	ea03 030a 	and.w	r3, r3, sl
 8007096:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 800709a:	9a02      	ldr	r2, [sp, #8]
 800709c:	600b      	str	r3, [r1, #0]
 800709e:	9b01      	ldr	r3, [sp, #4]
 80070a0:	4417      	add	r7, r2
 80070a2:	42bb      	cmp	r3, r7
 80070a4:	4431      	add	r1, r6
 80070a6:	d8bc      	bhi.n	8007022 <arm_radix4_butterfly_inverse_q15+0x166>
 80070a8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80070ac:	440a      	add	r2, r1
 80070ae:	9208      	str	r2, [sp, #32]
 80070b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070b2:	9a07      	ldr	r2, [sp, #28]
 80070b4:	9b03      	ldr	r3, [sp, #12]
 80070b6:	440a      	add	r2, r1
 80070b8:	9207      	str	r2, [sp, #28]
 80070ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80070bc:	9a06      	ldr	r2, [sp, #24]
 80070be:	440a      	add	r2, r1
 80070c0:	9206      	str	r2, [sp, #24]
 80070c2:	9a05      	ldr	r2, [sp, #20]
 80070c4:	3204      	adds	r2, #4
 80070c6:	9205      	str	r2, [sp, #20]
 80070c8:	9a04      	ldr	r2, [sp, #16]
 80070ca:	3204      	adds	r2, #4
 80070cc:	9204      	str	r2, [sp, #16]
 80070ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80070d0:	3301      	adds	r3, #1
 80070d2:	4293      	cmp	r3, r2
 80070d4:	9303      	str	r3, [sp, #12]
 80070d6:	d393      	bcc.n	8007000 <arm_radix4_butterfly_inverse_q15+0x144>
 80070d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070dc:	2a04      	cmp	r2, #4
 80070de:	f63f af6e 	bhi.w	8006fbe <arm_radix4_butterfly_inverse_q15+0x102>
 80070e2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80070e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070e6:	689d      	ldr	r5, [r3, #8]
 80070e8:	68de      	ldr	r6, [r3, #12]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	6859      	ldr	r1, [r3, #4]
 80070ee:	fa92 f015 	qadd16	r0, r2, r5
 80070f2:	3c01      	subs	r4, #1
 80070f4:	fad2 f215 	qsub16	r2, r2, r5
 80070f8:	f103 0310 	add.w	r3, r3, #16
 80070fc:	fa91 f516 	qadd16	r5, r1, r6
 8007100:	fad1 f116 	qsub16	r1, r1, r6
 8007104:	fa90 f625 	shadd16	r6, r0, r5
 8007108:	fad0 f025 	shsub16	r0, r0, r5
 800710c:	f843 6c10 	str.w	r6, [r3, #-16]
 8007110:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007114:	faa2 f021 	shasx	r0, r2, r1
 8007118:	fae2 f221 	shsax	r2, r2, r1
 800711c:	f843 0c08 	str.w	r0, [r3, #-8]
 8007120:	f843 2c04 	str.w	r2, [r3, #-4]
 8007124:	d1df      	bne.n	80070e6 <arm_radix4_butterfly_inverse_q15+0x22a>
 8007126:	b013      	add	sp, #76	@ 0x4c
 8007128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712c:	2400      	movs	r4, #0
 800712e:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 800720c <arm_radix4_butterfly_inverse_q15+0x350>
 8007132:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007134:	4623      	mov	r3, r4
 8007136:	4680      	mov	r8, r0
 8007138:	4691      	mov	r9, r2
 800713a:	f8d8 0000 	ldr.w	r0, [r8]
 800713e:	f8dc 2000 	ldr.w	r2, [ip]
 8007142:	f8da 1000 	ldr.w	r1, [sl]
 8007146:	fa90 f023 	shadd16	r0, r0, r3
 800714a:	fa91 f123 	shadd16	r1, r1, r3
 800714e:	fa90 f023 	shadd16	r0, r0, r3
 8007152:	fa91 fb23 	shadd16	fp, r1, r3
 8007156:	fa92 f223 	shadd16	r2, r2, r3
 800715a:	6829      	ldr	r1, [r5, #0]
 800715c:	fa92 f223 	shadd16	r2, r2, r3
 8007160:	fa91 f123 	shadd16	r1, r1, r3
 8007164:	fa90 f612 	qadd16	r6, r0, r2
 8007168:	fa91 f123 	shadd16	r1, r1, r3
 800716c:	fa9b f111 	qadd16	r1, fp, r1
 8007170:	fa96 fb21 	shadd16	fp, r6, r1
 8007174:	f848 bb04 	str.w	fp, [r8], #4
 8007178:	fad6 f611 	qsub16	r6, r6, r1
 800717c:	fad0 f212 	qsub16	r2, r0, r2
 8007180:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8007184:	fb41 f006 	smusd	r0, r1, r6
 8007188:	fb21 f116 	smuadx	r1, r1, r6
 800718c:	ea01 010e 	and.w	r1, r1, lr
 8007190:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007194:	f8da 0000 	ldr.w	r0, [sl]
 8007198:	f84a 1b04 	str.w	r1, [sl], #4
 800719c:	fa90 f023 	shadd16	r0, r0, r3
 80071a0:	682e      	ldr	r6, [r5, #0]
 80071a2:	fa90 f023 	shadd16	r0, r0, r3
 80071a6:	fa96 f623 	shadd16	r6, r6, r3
 80071aa:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80071ae:	fa96 f623 	shadd16	r6, r6, r3
 80071b2:	fad0 f016 	qsub16	r0, r0, r6
 80071b6:	fae2 f610 	qsax	r6, r2, r0
 80071ba:	faa2 f210 	qasx	r2, r2, r0
 80071be:	fb41 fb02 	smusd	fp, r1, r2
 80071c2:	fb21 f212 	smuadx	r2, r1, r2
 80071c6:	ea02 020e 	and.w	r2, r2, lr
 80071ca:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 80071ce:	f84c 2b04 	str.w	r2, [ip], #4
 80071d2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80071d6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80071da:	fb42 f106 	smusd	r1, r2, r6
 80071de:	fb22 f216 	smuadx	r2, r2, r6
 80071e2:	ea02 020e 	and.w	r2, r2, lr
 80071e6:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 80071ea:	f845 2b04 	str.w	r2, [r5], #4
 80071ee:	9a03      	ldr	r2, [sp, #12]
 80071f0:	f1b9 0901 	subs.w	r9, r9, #1
 80071f4:	4414      	add	r4, r2
 80071f6:	d1a0      	bne.n	800713a <arm_radix4_butterfly_inverse_q15+0x27e>
 80071f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80071fa:	9b03      	ldr	r3, [sp, #12]
 80071fc:	2a04      	cmp	r2, #4
 80071fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007202:	f63f aed9 	bhi.w	8006fb8 <arm_radix4_butterfly_inverse_q15+0xfc>
 8007206:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007208:	4614      	mov	r4, r2
 800720a:	e76c      	b.n	80070e6 <arm_radix4_butterfly_inverse_q15+0x22a>
 800720c:	ffff0000 	.word	0xffff0000

08007210 <arm_bitreversal_16>:
 8007210:	b1f1      	cbz	r1, 8007250 <arm_bitreversal_16+0x40>
 8007212:	b4f0      	push	{r4, r5, r6, r7}
 8007214:	2400      	movs	r4, #0
 8007216:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 800721a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800721e:	886d      	ldrh	r5, [r5, #2]
 8007220:	08ad      	lsrs	r5, r5, #2
 8007222:	089b      	lsrs	r3, r3, #2
 8007224:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 8007228:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 800722c:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8007230:	006e      	lsls	r6, r5, #1
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 8007238:	3302      	adds	r3, #2
 800723a:	1cb5      	adds	r5, r6, #2
 800723c:	3402      	adds	r4, #2
 800723e:	b2a4      	uxth	r4, r4
 8007240:	5ac6      	ldrh	r6, [r0, r3]
 8007242:	5b47      	ldrh	r7, [r0, r5]
 8007244:	52c7      	strh	r7, [r0, r3]
 8007246:	42a1      	cmp	r1, r4
 8007248:	5346      	strh	r6, [r0, r5]
 800724a:	d8e4      	bhi.n	8007216 <arm_bitreversal_16+0x6>
 800724c:	bcf0      	pop	{r4, r5, r6, r7}
 800724e:	4770      	bx	lr
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop

08007254 <malloc>:
 8007254:	4b02      	ldr	r3, [pc, #8]	@ (8007260 <malloc+0xc>)
 8007256:	4601      	mov	r1, r0
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	f000 b82d 	b.w	80072b8 <_malloc_r>
 800725e:	bf00      	nop
 8007260:	20000418 	.word	0x20000418

08007264 <free>:
 8007264:	4b02      	ldr	r3, [pc, #8]	@ (8007270 <free+0xc>)
 8007266:	4601      	mov	r1, r0
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	f000 bb05 	b.w	8007878 <_free_r>
 800726e:	bf00      	nop
 8007270:	20000418 	.word	0x20000418

08007274 <sbrk_aligned>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4e0f      	ldr	r6, [pc, #60]	@ (80072b4 <sbrk_aligned+0x40>)
 8007278:	460c      	mov	r4, r1
 800727a:	6831      	ldr	r1, [r6, #0]
 800727c:	4605      	mov	r5, r0
 800727e:	b911      	cbnz	r1, 8007286 <sbrk_aligned+0x12>
 8007280:	f000 fa9c 	bl	80077bc <_sbrk_r>
 8007284:	6030      	str	r0, [r6, #0]
 8007286:	4621      	mov	r1, r4
 8007288:	4628      	mov	r0, r5
 800728a:	f000 fa97 	bl	80077bc <_sbrk_r>
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	d103      	bne.n	800729a <sbrk_aligned+0x26>
 8007292:	f04f 34ff 	mov.w	r4, #4294967295
 8007296:	4620      	mov	r0, r4
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	1cc4      	adds	r4, r0, #3
 800729c:	f024 0403 	bic.w	r4, r4, #3
 80072a0:	42a0      	cmp	r0, r4
 80072a2:	d0f8      	beq.n	8007296 <sbrk_aligned+0x22>
 80072a4:	1a21      	subs	r1, r4, r0
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 fa88 	bl	80077bc <_sbrk_r>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d1f2      	bne.n	8007296 <sbrk_aligned+0x22>
 80072b0:	e7ef      	b.n	8007292 <sbrk_aligned+0x1e>
 80072b2:	bf00      	nop
 80072b4:	2000fa1c 	.word	0x2000fa1c

080072b8 <_malloc_r>:
 80072b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072bc:	1ccd      	adds	r5, r1, #3
 80072be:	f025 0503 	bic.w	r5, r5, #3
 80072c2:	3508      	adds	r5, #8
 80072c4:	2d0c      	cmp	r5, #12
 80072c6:	bf38      	it	cc
 80072c8:	250c      	movcc	r5, #12
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	4606      	mov	r6, r0
 80072ce:	db01      	blt.n	80072d4 <_malloc_r+0x1c>
 80072d0:	42a9      	cmp	r1, r5
 80072d2:	d904      	bls.n	80072de <_malloc_r+0x26>
 80072d4:	230c      	movs	r3, #12
 80072d6:	6033      	str	r3, [r6, #0]
 80072d8:	2000      	movs	r0, #0
 80072da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073b4 <_malloc_r+0xfc>
 80072e2:	f000 f869 	bl	80073b8 <__malloc_lock>
 80072e6:	f8d8 3000 	ldr.w	r3, [r8]
 80072ea:	461c      	mov	r4, r3
 80072ec:	bb44      	cbnz	r4, 8007340 <_malloc_r+0x88>
 80072ee:	4629      	mov	r1, r5
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7ff ffbf 	bl	8007274 <sbrk_aligned>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	4604      	mov	r4, r0
 80072fa:	d158      	bne.n	80073ae <_malloc_r+0xf6>
 80072fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007300:	4627      	mov	r7, r4
 8007302:	2f00      	cmp	r7, #0
 8007304:	d143      	bne.n	800738e <_malloc_r+0xd6>
 8007306:	2c00      	cmp	r4, #0
 8007308:	d04b      	beq.n	80073a2 <_malloc_r+0xea>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	4639      	mov	r1, r7
 800730e:	4630      	mov	r0, r6
 8007310:	eb04 0903 	add.w	r9, r4, r3
 8007314:	f000 fa52 	bl	80077bc <_sbrk_r>
 8007318:	4581      	cmp	r9, r0
 800731a:	d142      	bne.n	80073a2 <_malloc_r+0xea>
 800731c:	6821      	ldr	r1, [r4, #0]
 800731e:	1a6d      	subs	r5, r5, r1
 8007320:	4629      	mov	r1, r5
 8007322:	4630      	mov	r0, r6
 8007324:	f7ff ffa6 	bl	8007274 <sbrk_aligned>
 8007328:	3001      	adds	r0, #1
 800732a:	d03a      	beq.n	80073a2 <_malloc_r+0xea>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	442b      	add	r3, r5
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	f8d8 3000 	ldr.w	r3, [r8]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	bb62      	cbnz	r2, 8007394 <_malloc_r+0xdc>
 800733a:	f8c8 7000 	str.w	r7, [r8]
 800733e:	e00f      	b.n	8007360 <_malloc_r+0xa8>
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	1b52      	subs	r2, r2, r5
 8007344:	d420      	bmi.n	8007388 <_malloc_r+0xd0>
 8007346:	2a0b      	cmp	r2, #11
 8007348:	d917      	bls.n	800737a <_malloc_r+0xc2>
 800734a:	1961      	adds	r1, r4, r5
 800734c:	42a3      	cmp	r3, r4
 800734e:	6025      	str	r5, [r4, #0]
 8007350:	bf18      	it	ne
 8007352:	6059      	strne	r1, [r3, #4]
 8007354:	6863      	ldr	r3, [r4, #4]
 8007356:	bf08      	it	eq
 8007358:	f8c8 1000 	streq.w	r1, [r8]
 800735c:	5162      	str	r2, [r4, r5]
 800735e:	604b      	str	r3, [r1, #4]
 8007360:	4630      	mov	r0, r6
 8007362:	f000 f82f 	bl	80073c4 <__malloc_unlock>
 8007366:	f104 000b 	add.w	r0, r4, #11
 800736a:	1d23      	adds	r3, r4, #4
 800736c:	f020 0007 	bic.w	r0, r0, #7
 8007370:	1ac2      	subs	r2, r0, r3
 8007372:	bf1c      	itt	ne
 8007374:	1a1b      	subne	r3, r3, r0
 8007376:	50a3      	strne	r3, [r4, r2]
 8007378:	e7af      	b.n	80072da <_malloc_r+0x22>
 800737a:	6862      	ldr	r2, [r4, #4]
 800737c:	42a3      	cmp	r3, r4
 800737e:	bf0c      	ite	eq
 8007380:	f8c8 2000 	streq.w	r2, [r8]
 8007384:	605a      	strne	r2, [r3, #4]
 8007386:	e7eb      	b.n	8007360 <_malloc_r+0xa8>
 8007388:	4623      	mov	r3, r4
 800738a:	6864      	ldr	r4, [r4, #4]
 800738c:	e7ae      	b.n	80072ec <_malloc_r+0x34>
 800738e:	463c      	mov	r4, r7
 8007390:	687f      	ldr	r7, [r7, #4]
 8007392:	e7b6      	b.n	8007302 <_malloc_r+0x4a>
 8007394:	461a      	mov	r2, r3
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	42a3      	cmp	r3, r4
 800739a:	d1fb      	bne.n	8007394 <_malloc_r+0xdc>
 800739c:	2300      	movs	r3, #0
 800739e:	6053      	str	r3, [r2, #4]
 80073a0:	e7de      	b.n	8007360 <_malloc_r+0xa8>
 80073a2:	230c      	movs	r3, #12
 80073a4:	6033      	str	r3, [r6, #0]
 80073a6:	4630      	mov	r0, r6
 80073a8:	f000 f80c 	bl	80073c4 <__malloc_unlock>
 80073ac:	e794      	b.n	80072d8 <_malloc_r+0x20>
 80073ae:	6005      	str	r5, [r0, #0]
 80073b0:	e7d6      	b.n	8007360 <_malloc_r+0xa8>
 80073b2:	bf00      	nop
 80073b4:	2000fa20 	.word	0x2000fa20

080073b8 <__malloc_lock>:
 80073b8:	4801      	ldr	r0, [pc, #4]	@ (80073c0 <__malloc_lock+0x8>)
 80073ba:	f000 ba4c 	b.w	8007856 <__retarget_lock_acquire_recursive>
 80073be:	bf00      	nop
 80073c0:	2000fb64 	.word	0x2000fb64

080073c4 <__malloc_unlock>:
 80073c4:	4801      	ldr	r0, [pc, #4]	@ (80073cc <__malloc_unlock+0x8>)
 80073c6:	f000 ba47 	b.w	8007858 <__retarget_lock_release_recursive>
 80073ca:	bf00      	nop
 80073cc:	2000fb64 	.word	0x2000fb64

080073d0 <std>:
 80073d0:	2300      	movs	r3, #0
 80073d2:	b510      	push	{r4, lr}
 80073d4:	4604      	mov	r4, r0
 80073d6:	e9c0 3300 	strd	r3, r3, [r0]
 80073da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073de:	6083      	str	r3, [r0, #8]
 80073e0:	8181      	strh	r1, [r0, #12]
 80073e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80073e4:	81c2      	strh	r2, [r0, #14]
 80073e6:	6183      	str	r3, [r0, #24]
 80073e8:	4619      	mov	r1, r3
 80073ea:	2208      	movs	r2, #8
 80073ec:	305c      	adds	r0, #92	@ 0x5c
 80073ee:	f000 f9a8 	bl	8007742 <memset>
 80073f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007428 <std+0x58>)
 80073f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80073f6:	4b0d      	ldr	r3, [pc, #52]	@ (800742c <std+0x5c>)
 80073f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80073fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007430 <std+0x60>)
 80073fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80073fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007434 <std+0x64>)
 8007400:	6323      	str	r3, [r4, #48]	@ 0x30
 8007402:	4b0d      	ldr	r3, [pc, #52]	@ (8007438 <std+0x68>)
 8007404:	6224      	str	r4, [r4, #32]
 8007406:	429c      	cmp	r4, r3
 8007408:	d006      	beq.n	8007418 <std+0x48>
 800740a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800740e:	4294      	cmp	r4, r2
 8007410:	d002      	beq.n	8007418 <std+0x48>
 8007412:	33d0      	adds	r3, #208	@ 0xd0
 8007414:	429c      	cmp	r4, r3
 8007416:	d105      	bne.n	8007424 <std+0x54>
 8007418:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800741c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007420:	f000 ba18 	b.w	8007854 <__retarget_lock_init_recursive>
 8007424:	bd10      	pop	{r4, pc}
 8007426:	bf00      	nop
 8007428:	080076bd 	.word	0x080076bd
 800742c:	080076df 	.word	0x080076df
 8007430:	08007717 	.word	0x08007717
 8007434:	0800773b 	.word	0x0800773b
 8007438:	2000fa24 	.word	0x2000fa24

0800743c <stdio_exit_handler>:
 800743c:	4a02      	ldr	r2, [pc, #8]	@ (8007448 <stdio_exit_handler+0xc>)
 800743e:	4903      	ldr	r1, [pc, #12]	@ (800744c <stdio_exit_handler+0x10>)
 8007440:	4803      	ldr	r0, [pc, #12]	@ (8007450 <stdio_exit_handler+0x14>)
 8007442:	f000 b869 	b.w	8007518 <_fwalk_sglue>
 8007446:	bf00      	nop
 8007448:	2000040c 	.word	0x2000040c
 800744c:	08007a15 	.word	0x08007a15
 8007450:	2000041c 	.word	0x2000041c

08007454 <cleanup_stdio>:
 8007454:	6841      	ldr	r1, [r0, #4]
 8007456:	4b0c      	ldr	r3, [pc, #48]	@ (8007488 <cleanup_stdio+0x34>)
 8007458:	4299      	cmp	r1, r3
 800745a:	b510      	push	{r4, lr}
 800745c:	4604      	mov	r4, r0
 800745e:	d001      	beq.n	8007464 <cleanup_stdio+0x10>
 8007460:	f000 fad8 	bl	8007a14 <_fflush_r>
 8007464:	68a1      	ldr	r1, [r4, #8]
 8007466:	4b09      	ldr	r3, [pc, #36]	@ (800748c <cleanup_stdio+0x38>)
 8007468:	4299      	cmp	r1, r3
 800746a:	d002      	beq.n	8007472 <cleanup_stdio+0x1e>
 800746c:	4620      	mov	r0, r4
 800746e:	f000 fad1 	bl	8007a14 <_fflush_r>
 8007472:	68e1      	ldr	r1, [r4, #12]
 8007474:	4b06      	ldr	r3, [pc, #24]	@ (8007490 <cleanup_stdio+0x3c>)
 8007476:	4299      	cmp	r1, r3
 8007478:	d004      	beq.n	8007484 <cleanup_stdio+0x30>
 800747a:	4620      	mov	r0, r4
 800747c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007480:	f000 bac8 	b.w	8007a14 <_fflush_r>
 8007484:	bd10      	pop	{r4, pc}
 8007486:	bf00      	nop
 8007488:	2000fa24 	.word	0x2000fa24
 800748c:	2000fa8c 	.word	0x2000fa8c
 8007490:	2000faf4 	.word	0x2000faf4

08007494 <global_stdio_init.part.0>:
 8007494:	b510      	push	{r4, lr}
 8007496:	4b0b      	ldr	r3, [pc, #44]	@ (80074c4 <global_stdio_init.part.0+0x30>)
 8007498:	4c0b      	ldr	r4, [pc, #44]	@ (80074c8 <global_stdio_init.part.0+0x34>)
 800749a:	4a0c      	ldr	r2, [pc, #48]	@ (80074cc <global_stdio_init.part.0+0x38>)
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	4620      	mov	r0, r4
 80074a0:	2200      	movs	r2, #0
 80074a2:	2104      	movs	r1, #4
 80074a4:	f7ff ff94 	bl	80073d0 <std>
 80074a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074ac:	2201      	movs	r2, #1
 80074ae:	2109      	movs	r1, #9
 80074b0:	f7ff ff8e 	bl	80073d0 <std>
 80074b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074b8:	2202      	movs	r2, #2
 80074ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074be:	2112      	movs	r1, #18
 80074c0:	f7ff bf86 	b.w	80073d0 <std>
 80074c4:	2000fb5c 	.word	0x2000fb5c
 80074c8:	2000fa24 	.word	0x2000fa24
 80074cc:	0800743d 	.word	0x0800743d

080074d0 <__sfp_lock_acquire>:
 80074d0:	4801      	ldr	r0, [pc, #4]	@ (80074d8 <__sfp_lock_acquire+0x8>)
 80074d2:	f000 b9c0 	b.w	8007856 <__retarget_lock_acquire_recursive>
 80074d6:	bf00      	nop
 80074d8:	2000fb65 	.word	0x2000fb65

080074dc <__sfp_lock_release>:
 80074dc:	4801      	ldr	r0, [pc, #4]	@ (80074e4 <__sfp_lock_release+0x8>)
 80074de:	f000 b9bb 	b.w	8007858 <__retarget_lock_release_recursive>
 80074e2:	bf00      	nop
 80074e4:	2000fb65 	.word	0x2000fb65

080074e8 <__sinit>:
 80074e8:	b510      	push	{r4, lr}
 80074ea:	4604      	mov	r4, r0
 80074ec:	f7ff fff0 	bl	80074d0 <__sfp_lock_acquire>
 80074f0:	6a23      	ldr	r3, [r4, #32]
 80074f2:	b11b      	cbz	r3, 80074fc <__sinit+0x14>
 80074f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f8:	f7ff bff0 	b.w	80074dc <__sfp_lock_release>
 80074fc:	4b04      	ldr	r3, [pc, #16]	@ (8007510 <__sinit+0x28>)
 80074fe:	6223      	str	r3, [r4, #32]
 8007500:	4b04      	ldr	r3, [pc, #16]	@ (8007514 <__sinit+0x2c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1f5      	bne.n	80074f4 <__sinit+0xc>
 8007508:	f7ff ffc4 	bl	8007494 <global_stdio_init.part.0>
 800750c:	e7f2      	b.n	80074f4 <__sinit+0xc>
 800750e:	bf00      	nop
 8007510:	08007455 	.word	0x08007455
 8007514:	2000fb5c 	.word	0x2000fb5c

08007518 <_fwalk_sglue>:
 8007518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800751c:	4607      	mov	r7, r0
 800751e:	4688      	mov	r8, r1
 8007520:	4614      	mov	r4, r2
 8007522:	2600      	movs	r6, #0
 8007524:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007528:	f1b9 0901 	subs.w	r9, r9, #1
 800752c:	d505      	bpl.n	800753a <_fwalk_sglue+0x22>
 800752e:	6824      	ldr	r4, [r4, #0]
 8007530:	2c00      	cmp	r4, #0
 8007532:	d1f7      	bne.n	8007524 <_fwalk_sglue+0xc>
 8007534:	4630      	mov	r0, r6
 8007536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753a:	89ab      	ldrh	r3, [r5, #12]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d907      	bls.n	8007550 <_fwalk_sglue+0x38>
 8007540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007544:	3301      	adds	r3, #1
 8007546:	d003      	beq.n	8007550 <_fwalk_sglue+0x38>
 8007548:	4629      	mov	r1, r5
 800754a:	4638      	mov	r0, r7
 800754c:	47c0      	blx	r8
 800754e:	4306      	orrs	r6, r0
 8007550:	3568      	adds	r5, #104	@ 0x68
 8007552:	e7e9      	b.n	8007528 <_fwalk_sglue+0x10>

08007554 <setvbuf>:
 8007554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007558:	461d      	mov	r5, r3
 800755a:	4b57      	ldr	r3, [pc, #348]	@ (80076b8 <setvbuf+0x164>)
 800755c:	681f      	ldr	r7, [r3, #0]
 800755e:	4604      	mov	r4, r0
 8007560:	460e      	mov	r6, r1
 8007562:	4690      	mov	r8, r2
 8007564:	b127      	cbz	r7, 8007570 <setvbuf+0x1c>
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	b913      	cbnz	r3, 8007570 <setvbuf+0x1c>
 800756a:	4638      	mov	r0, r7
 800756c:	f7ff ffbc 	bl	80074e8 <__sinit>
 8007570:	f1b8 0f02 	cmp.w	r8, #2
 8007574:	d006      	beq.n	8007584 <setvbuf+0x30>
 8007576:	f1b8 0f01 	cmp.w	r8, #1
 800757a:	f200 809a 	bhi.w	80076b2 <setvbuf+0x15e>
 800757e:	2d00      	cmp	r5, #0
 8007580:	f2c0 8097 	blt.w	80076b2 <setvbuf+0x15e>
 8007584:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007586:	07d9      	lsls	r1, r3, #31
 8007588:	d405      	bmi.n	8007596 <setvbuf+0x42>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	059a      	lsls	r2, r3, #22
 800758e:	d402      	bmi.n	8007596 <setvbuf+0x42>
 8007590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007592:	f000 f960 	bl	8007856 <__retarget_lock_acquire_recursive>
 8007596:	4621      	mov	r1, r4
 8007598:	4638      	mov	r0, r7
 800759a:	f000 fa3b 	bl	8007a14 <_fflush_r>
 800759e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075a0:	b141      	cbz	r1, 80075b4 <setvbuf+0x60>
 80075a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075a6:	4299      	cmp	r1, r3
 80075a8:	d002      	beq.n	80075b0 <setvbuf+0x5c>
 80075aa:	4638      	mov	r0, r7
 80075ac:	f000 f964 	bl	8007878 <_free_r>
 80075b0:	2300      	movs	r3, #0
 80075b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80075b4:	2300      	movs	r3, #0
 80075b6:	61a3      	str	r3, [r4, #24]
 80075b8:	6063      	str	r3, [r4, #4]
 80075ba:	89a3      	ldrh	r3, [r4, #12]
 80075bc:	061b      	lsls	r3, r3, #24
 80075be:	d503      	bpl.n	80075c8 <setvbuf+0x74>
 80075c0:	6921      	ldr	r1, [r4, #16]
 80075c2:	4638      	mov	r0, r7
 80075c4:	f000 f958 	bl	8007878 <_free_r>
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80075ce:	f023 0303 	bic.w	r3, r3, #3
 80075d2:	f1b8 0f02 	cmp.w	r8, #2
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	d061      	beq.n	800769e <setvbuf+0x14a>
 80075da:	ab01      	add	r3, sp, #4
 80075dc:	466a      	mov	r2, sp
 80075de:	4621      	mov	r1, r4
 80075e0:	4638      	mov	r0, r7
 80075e2:	f000 fa3f 	bl	8007a64 <__swhatbuf_r>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	4318      	orrs	r0, r3
 80075ea:	81a0      	strh	r0, [r4, #12]
 80075ec:	bb2d      	cbnz	r5, 800763a <setvbuf+0xe6>
 80075ee:	9d00      	ldr	r5, [sp, #0]
 80075f0:	4628      	mov	r0, r5
 80075f2:	f7ff fe2f 	bl	8007254 <malloc>
 80075f6:	4606      	mov	r6, r0
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d152      	bne.n	80076a2 <setvbuf+0x14e>
 80075fc:	f8dd 9000 	ldr.w	r9, [sp]
 8007600:	45a9      	cmp	r9, r5
 8007602:	d140      	bne.n	8007686 <setvbuf+0x132>
 8007604:	f04f 35ff 	mov.w	r5, #4294967295
 8007608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800760c:	f043 0202 	orr.w	r2, r3, #2
 8007610:	81a2      	strh	r2, [r4, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	60a2      	str	r2, [r4, #8]
 8007616:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800761a:	6022      	str	r2, [r4, #0]
 800761c:	6122      	str	r2, [r4, #16]
 800761e:	2201      	movs	r2, #1
 8007620:	6162      	str	r2, [r4, #20]
 8007622:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007624:	07d6      	lsls	r6, r2, #31
 8007626:	d404      	bmi.n	8007632 <setvbuf+0xde>
 8007628:	0598      	lsls	r0, r3, #22
 800762a:	d402      	bmi.n	8007632 <setvbuf+0xde>
 800762c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800762e:	f000 f913 	bl	8007858 <__retarget_lock_release_recursive>
 8007632:	4628      	mov	r0, r5
 8007634:	b003      	add	sp, #12
 8007636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800763a:	2e00      	cmp	r6, #0
 800763c:	d0d8      	beq.n	80075f0 <setvbuf+0x9c>
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	b913      	cbnz	r3, 8007648 <setvbuf+0xf4>
 8007642:	4638      	mov	r0, r7
 8007644:	f7ff ff50 	bl	80074e8 <__sinit>
 8007648:	f1b8 0f01 	cmp.w	r8, #1
 800764c:	bf08      	it	eq
 800764e:	89a3      	ldrheq	r3, [r4, #12]
 8007650:	6026      	str	r6, [r4, #0]
 8007652:	bf04      	itt	eq
 8007654:	f043 0301 	orreq.w	r3, r3, #1
 8007658:	81a3      	strheq	r3, [r4, #12]
 800765a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800765e:	f013 0208 	ands.w	r2, r3, #8
 8007662:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007666:	d01e      	beq.n	80076a6 <setvbuf+0x152>
 8007668:	07d9      	lsls	r1, r3, #31
 800766a:	bf41      	itttt	mi
 800766c:	2200      	movmi	r2, #0
 800766e:	426d      	negmi	r5, r5
 8007670:	60a2      	strmi	r2, [r4, #8]
 8007672:	61a5      	strmi	r5, [r4, #24]
 8007674:	bf58      	it	pl
 8007676:	60a5      	strpl	r5, [r4, #8]
 8007678:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800767a:	07d2      	lsls	r2, r2, #31
 800767c:	d401      	bmi.n	8007682 <setvbuf+0x12e>
 800767e:	059b      	lsls	r3, r3, #22
 8007680:	d513      	bpl.n	80076aa <setvbuf+0x156>
 8007682:	2500      	movs	r5, #0
 8007684:	e7d5      	b.n	8007632 <setvbuf+0xde>
 8007686:	4648      	mov	r0, r9
 8007688:	f7ff fde4 	bl	8007254 <malloc>
 800768c:	4606      	mov	r6, r0
 800768e:	2800      	cmp	r0, #0
 8007690:	d0b8      	beq.n	8007604 <setvbuf+0xb0>
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007698:	81a3      	strh	r3, [r4, #12]
 800769a:	464d      	mov	r5, r9
 800769c:	e7cf      	b.n	800763e <setvbuf+0xea>
 800769e:	2500      	movs	r5, #0
 80076a0:	e7b2      	b.n	8007608 <setvbuf+0xb4>
 80076a2:	46a9      	mov	r9, r5
 80076a4:	e7f5      	b.n	8007692 <setvbuf+0x13e>
 80076a6:	60a2      	str	r2, [r4, #8]
 80076a8:	e7e6      	b.n	8007678 <setvbuf+0x124>
 80076aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ac:	f000 f8d4 	bl	8007858 <__retarget_lock_release_recursive>
 80076b0:	e7e7      	b.n	8007682 <setvbuf+0x12e>
 80076b2:	f04f 35ff 	mov.w	r5, #4294967295
 80076b6:	e7bc      	b.n	8007632 <setvbuf+0xde>
 80076b8:	20000418 	.word	0x20000418

080076bc <__sread>:
 80076bc:	b510      	push	{r4, lr}
 80076be:	460c      	mov	r4, r1
 80076c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c4:	f000 f868 	bl	8007798 <_read_r>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	bfab      	itete	ge
 80076cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076ce:	89a3      	ldrhlt	r3, [r4, #12]
 80076d0:	181b      	addge	r3, r3, r0
 80076d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076d6:	bfac      	ite	ge
 80076d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076da:	81a3      	strhlt	r3, [r4, #12]
 80076dc:	bd10      	pop	{r4, pc}

080076de <__swrite>:
 80076de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e2:	461f      	mov	r7, r3
 80076e4:	898b      	ldrh	r3, [r1, #12]
 80076e6:	05db      	lsls	r3, r3, #23
 80076e8:	4605      	mov	r5, r0
 80076ea:	460c      	mov	r4, r1
 80076ec:	4616      	mov	r6, r2
 80076ee:	d505      	bpl.n	80076fc <__swrite+0x1e>
 80076f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f4:	2302      	movs	r3, #2
 80076f6:	2200      	movs	r2, #0
 80076f8:	f000 f83c 	bl	8007774 <_lseek_r>
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007702:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007706:	81a3      	strh	r3, [r4, #12]
 8007708:	4632      	mov	r2, r6
 800770a:	463b      	mov	r3, r7
 800770c:	4628      	mov	r0, r5
 800770e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007712:	f000 b863 	b.w	80077dc <_write_r>

08007716 <__sseek>:
 8007716:	b510      	push	{r4, lr}
 8007718:	460c      	mov	r4, r1
 800771a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800771e:	f000 f829 	bl	8007774 <_lseek_r>
 8007722:	1c43      	adds	r3, r0, #1
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	bf15      	itete	ne
 8007728:	6560      	strne	r0, [r4, #84]	@ 0x54
 800772a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800772e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007732:	81a3      	strheq	r3, [r4, #12]
 8007734:	bf18      	it	ne
 8007736:	81a3      	strhne	r3, [r4, #12]
 8007738:	bd10      	pop	{r4, pc}

0800773a <__sclose>:
 800773a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800773e:	f000 b809 	b.w	8007754 <_close_r>

08007742 <memset>:
 8007742:	4402      	add	r2, r0
 8007744:	4603      	mov	r3, r0
 8007746:	4293      	cmp	r3, r2
 8007748:	d100      	bne.n	800774c <memset+0xa>
 800774a:	4770      	bx	lr
 800774c:	f803 1b01 	strb.w	r1, [r3], #1
 8007750:	e7f9      	b.n	8007746 <memset+0x4>
	...

08007754 <_close_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4d06      	ldr	r5, [pc, #24]	@ (8007770 <_close_r+0x1c>)
 8007758:	2300      	movs	r3, #0
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	602b      	str	r3, [r5, #0]
 8007760:	f7f9 fbf6 	bl	8000f50 <_close>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_close_r+0x1a>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_close_r+0x1a>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	2000fb60 	.word	0x2000fb60

08007774 <_lseek_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d07      	ldr	r5, [pc, #28]	@ (8007794 <_lseek_r+0x20>)
 8007778:	4604      	mov	r4, r0
 800777a:	4608      	mov	r0, r1
 800777c:	4611      	mov	r1, r2
 800777e:	2200      	movs	r2, #0
 8007780:	602a      	str	r2, [r5, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	f7f9 fbf0 	bl	8000f68 <_lseek>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d102      	bne.n	8007792 <_lseek_r+0x1e>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b103      	cbz	r3, 8007792 <_lseek_r+0x1e>
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	2000fb60 	.word	0x2000fb60

08007798 <_read_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4d07      	ldr	r5, [pc, #28]	@ (80077b8 <_read_r+0x20>)
 800779c:	4604      	mov	r4, r0
 800779e:	4608      	mov	r0, r1
 80077a0:	4611      	mov	r1, r2
 80077a2:	2200      	movs	r2, #0
 80077a4:	602a      	str	r2, [r5, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	f7f9 fbe6 	bl	8000f78 <_read>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_read_r+0x1e>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_read_r+0x1e>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	2000fb60 	.word	0x2000fb60

080077bc <_sbrk_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4d06      	ldr	r5, [pc, #24]	@ (80077d8 <_sbrk_r+0x1c>)
 80077c0:	2300      	movs	r3, #0
 80077c2:	4604      	mov	r4, r0
 80077c4:	4608      	mov	r0, r1
 80077c6:	602b      	str	r3, [r5, #0]
 80077c8:	f7fa ff30 	bl	800262c <_sbrk>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d102      	bne.n	80077d6 <_sbrk_r+0x1a>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	b103      	cbz	r3, 80077d6 <_sbrk_r+0x1a>
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
 80077d8:	2000fb60 	.word	0x2000fb60

080077dc <_write_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d07      	ldr	r5, [pc, #28]	@ (80077fc <_write_r+0x20>)
 80077e0:	4604      	mov	r4, r0
 80077e2:	4608      	mov	r0, r1
 80077e4:	4611      	mov	r1, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	602a      	str	r2, [r5, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	f7f9 fb96 	bl	8000f1c <_write>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_write_r+0x1e>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_write_r+0x1e>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	2000fb60 	.word	0x2000fb60

08007800 <__errno>:
 8007800:	4b01      	ldr	r3, [pc, #4]	@ (8007808 <__errno+0x8>)
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	20000418 	.word	0x20000418

0800780c <__libc_init_array>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	4d0d      	ldr	r5, [pc, #52]	@ (8007844 <__libc_init_array+0x38>)
 8007810:	4c0d      	ldr	r4, [pc, #52]	@ (8007848 <__libc_init_array+0x3c>)
 8007812:	1b64      	subs	r4, r4, r5
 8007814:	10a4      	asrs	r4, r4, #2
 8007816:	2600      	movs	r6, #0
 8007818:	42a6      	cmp	r6, r4
 800781a:	d109      	bne.n	8007830 <__libc_init_array+0x24>
 800781c:	4d0b      	ldr	r5, [pc, #44]	@ (800784c <__libc_init_array+0x40>)
 800781e:	4c0c      	ldr	r4, [pc, #48]	@ (8007850 <__libc_init_array+0x44>)
 8007820:	f000 f958 	bl	8007ad4 <_init>
 8007824:	1b64      	subs	r4, r4, r5
 8007826:	10a4      	asrs	r4, r4, #2
 8007828:	2600      	movs	r6, #0
 800782a:	42a6      	cmp	r6, r4
 800782c:	d105      	bne.n	800783a <__libc_init_array+0x2e>
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	f855 3b04 	ldr.w	r3, [r5], #4
 8007834:	4798      	blx	r3
 8007836:	3601      	adds	r6, #1
 8007838:	e7ee      	b.n	8007818 <__libc_init_array+0xc>
 800783a:	f855 3b04 	ldr.w	r3, [r5], #4
 800783e:	4798      	blx	r3
 8007840:	3601      	adds	r6, #1
 8007842:	e7f2      	b.n	800782a <__libc_init_array+0x1e>
 8007844:	0801a380 	.word	0x0801a380
 8007848:	0801a380 	.word	0x0801a380
 800784c:	0801a380 	.word	0x0801a380
 8007850:	0801a384 	.word	0x0801a384

08007854 <__retarget_lock_init_recursive>:
 8007854:	4770      	bx	lr

08007856 <__retarget_lock_acquire_recursive>:
 8007856:	4770      	bx	lr

08007858 <__retarget_lock_release_recursive>:
 8007858:	4770      	bx	lr

0800785a <memcpy>:
 800785a:	440a      	add	r2, r1
 800785c:	4291      	cmp	r1, r2
 800785e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007862:	d100      	bne.n	8007866 <memcpy+0xc>
 8007864:	4770      	bx	lr
 8007866:	b510      	push	{r4, lr}
 8007868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800786c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007870:	4291      	cmp	r1, r2
 8007872:	d1f9      	bne.n	8007868 <memcpy+0xe>
 8007874:	bd10      	pop	{r4, pc}
	...

08007878 <_free_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4605      	mov	r5, r0
 800787c:	2900      	cmp	r1, #0
 800787e:	d041      	beq.n	8007904 <_free_r+0x8c>
 8007880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007884:	1f0c      	subs	r4, r1, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	bfb8      	it	lt
 800788a:	18e4      	addlt	r4, r4, r3
 800788c:	f7ff fd94 	bl	80073b8 <__malloc_lock>
 8007890:	4a1d      	ldr	r2, [pc, #116]	@ (8007908 <_free_r+0x90>)
 8007892:	6813      	ldr	r3, [r2, #0]
 8007894:	b933      	cbnz	r3, 80078a4 <_free_r+0x2c>
 8007896:	6063      	str	r3, [r4, #4]
 8007898:	6014      	str	r4, [r2, #0]
 800789a:	4628      	mov	r0, r5
 800789c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078a0:	f7ff bd90 	b.w	80073c4 <__malloc_unlock>
 80078a4:	42a3      	cmp	r3, r4
 80078a6:	d908      	bls.n	80078ba <_free_r+0x42>
 80078a8:	6820      	ldr	r0, [r4, #0]
 80078aa:	1821      	adds	r1, r4, r0
 80078ac:	428b      	cmp	r3, r1
 80078ae:	bf01      	itttt	eq
 80078b0:	6819      	ldreq	r1, [r3, #0]
 80078b2:	685b      	ldreq	r3, [r3, #4]
 80078b4:	1809      	addeq	r1, r1, r0
 80078b6:	6021      	streq	r1, [r4, #0]
 80078b8:	e7ed      	b.n	8007896 <_free_r+0x1e>
 80078ba:	461a      	mov	r2, r3
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	b10b      	cbz	r3, 80078c4 <_free_r+0x4c>
 80078c0:	42a3      	cmp	r3, r4
 80078c2:	d9fa      	bls.n	80078ba <_free_r+0x42>
 80078c4:	6811      	ldr	r1, [r2, #0]
 80078c6:	1850      	adds	r0, r2, r1
 80078c8:	42a0      	cmp	r0, r4
 80078ca:	d10b      	bne.n	80078e4 <_free_r+0x6c>
 80078cc:	6820      	ldr	r0, [r4, #0]
 80078ce:	4401      	add	r1, r0
 80078d0:	1850      	adds	r0, r2, r1
 80078d2:	4283      	cmp	r3, r0
 80078d4:	6011      	str	r1, [r2, #0]
 80078d6:	d1e0      	bne.n	800789a <_free_r+0x22>
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	6053      	str	r3, [r2, #4]
 80078de:	4408      	add	r0, r1
 80078e0:	6010      	str	r0, [r2, #0]
 80078e2:	e7da      	b.n	800789a <_free_r+0x22>
 80078e4:	d902      	bls.n	80078ec <_free_r+0x74>
 80078e6:	230c      	movs	r3, #12
 80078e8:	602b      	str	r3, [r5, #0]
 80078ea:	e7d6      	b.n	800789a <_free_r+0x22>
 80078ec:	6820      	ldr	r0, [r4, #0]
 80078ee:	1821      	adds	r1, r4, r0
 80078f0:	428b      	cmp	r3, r1
 80078f2:	bf04      	itt	eq
 80078f4:	6819      	ldreq	r1, [r3, #0]
 80078f6:	685b      	ldreq	r3, [r3, #4]
 80078f8:	6063      	str	r3, [r4, #4]
 80078fa:	bf04      	itt	eq
 80078fc:	1809      	addeq	r1, r1, r0
 80078fe:	6021      	streq	r1, [r4, #0]
 8007900:	6054      	str	r4, [r2, #4]
 8007902:	e7ca      	b.n	800789a <_free_r+0x22>
 8007904:	bd38      	pop	{r3, r4, r5, pc}
 8007906:	bf00      	nop
 8007908:	2000fa20 	.word	0x2000fa20

0800790c <__sflush_r>:
 800790c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007914:	0716      	lsls	r6, r2, #28
 8007916:	4605      	mov	r5, r0
 8007918:	460c      	mov	r4, r1
 800791a:	d454      	bmi.n	80079c6 <__sflush_r+0xba>
 800791c:	684b      	ldr	r3, [r1, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	dc02      	bgt.n	8007928 <__sflush_r+0x1c>
 8007922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	dd48      	ble.n	80079ba <__sflush_r+0xae>
 8007928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800792a:	2e00      	cmp	r6, #0
 800792c:	d045      	beq.n	80079ba <__sflush_r+0xae>
 800792e:	2300      	movs	r3, #0
 8007930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007934:	682f      	ldr	r7, [r5, #0]
 8007936:	6a21      	ldr	r1, [r4, #32]
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	d030      	beq.n	800799e <__sflush_r+0x92>
 800793c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	0759      	lsls	r1, r3, #29
 8007942:	d505      	bpl.n	8007950 <__sflush_r+0x44>
 8007944:	6863      	ldr	r3, [r4, #4]
 8007946:	1ad2      	subs	r2, r2, r3
 8007948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800794a:	b10b      	cbz	r3, 8007950 <__sflush_r+0x44>
 800794c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	2300      	movs	r3, #0
 8007952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007954:	6a21      	ldr	r1, [r4, #32]
 8007956:	4628      	mov	r0, r5
 8007958:	47b0      	blx	r6
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	d106      	bne.n	800796e <__sflush_r+0x62>
 8007960:	6829      	ldr	r1, [r5, #0]
 8007962:	291d      	cmp	r1, #29
 8007964:	d82b      	bhi.n	80079be <__sflush_r+0xb2>
 8007966:	4a2a      	ldr	r2, [pc, #168]	@ (8007a10 <__sflush_r+0x104>)
 8007968:	410a      	asrs	r2, r1
 800796a:	07d6      	lsls	r6, r2, #31
 800796c:	d427      	bmi.n	80079be <__sflush_r+0xb2>
 800796e:	2200      	movs	r2, #0
 8007970:	6062      	str	r2, [r4, #4]
 8007972:	04d9      	lsls	r1, r3, #19
 8007974:	6922      	ldr	r2, [r4, #16]
 8007976:	6022      	str	r2, [r4, #0]
 8007978:	d504      	bpl.n	8007984 <__sflush_r+0x78>
 800797a:	1c42      	adds	r2, r0, #1
 800797c:	d101      	bne.n	8007982 <__sflush_r+0x76>
 800797e:	682b      	ldr	r3, [r5, #0]
 8007980:	b903      	cbnz	r3, 8007984 <__sflush_r+0x78>
 8007982:	6560      	str	r0, [r4, #84]	@ 0x54
 8007984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007986:	602f      	str	r7, [r5, #0]
 8007988:	b1b9      	cbz	r1, 80079ba <__sflush_r+0xae>
 800798a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800798e:	4299      	cmp	r1, r3
 8007990:	d002      	beq.n	8007998 <__sflush_r+0x8c>
 8007992:	4628      	mov	r0, r5
 8007994:	f7ff ff70 	bl	8007878 <_free_r>
 8007998:	2300      	movs	r3, #0
 800799a:	6363      	str	r3, [r4, #52]	@ 0x34
 800799c:	e00d      	b.n	80079ba <__sflush_r+0xae>
 800799e:	2301      	movs	r3, #1
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b0      	blx	r6
 80079a4:	4602      	mov	r2, r0
 80079a6:	1c50      	adds	r0, r2, #1
 80079a8:	d1c9      	bne.n	800793e <__sflush_r+0x32>
 80079aa:	682b      	ldr	r3, [r5, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0c6      	beq.n	800793e <__sflush_r+0x32>
 80079b0:	2b1d      	cmp	r3, #29
 80079b2:	d001      	beq.n	80079b8 <__sflush_r+0xac>
 80079b4:	2b16      	cmp	r3, #22
 80079b6:	d11e      	bne.n	80079f6 <__sflush_r+0xea>
 80079b8:	602f      	str	r7, [r5, #0]
 80079ba:	2000      	movs	r0, #0
 80079bc:	e022      	b.n	8007a04 <__sflush_r+0xf8>
 80079be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c2:	b21b      	sxth	r3, r3
 80079c4:	e01b      	b.n	80079fe <__sflush_r+0xf2>
 80079c6:	690f      	ldr	r7, [r1, #16]
 80079c8:	2f00      	cmp	r7, #0
 80079ca:	d0f6      	beq.n	80079ba <__sflush_r+0xae>
 80079cc:	0793      	lsls	r3, r2, #30
 80079ce:	680e      	ldr	r6, [r1, #0]
 80079d0:	bf08      	it	eq
 80079d2:	694b      	ldreq	r3, [r1, #20]
 80079d4:	600f      	str	r7, [r1, #0]
 80079d6:	bf18      	it	ne
 80079d8:	2300      	movne	r3, #0
 80079da:	eba6 0807 	sub.w	r8, r6, r7
 80079de:	608b      	str	r3, [r1, #8]
 80079e0:	f1b8 0f00 	cmp.w	r8, #0
 80079e4:	dde9      	ble.n	80079ba <__sflush_r+0xae>
 80079e6:	6a21      	ldr	r1, [r4, #32]
 80079e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079ea:	4643      	mov	r3, r8
 80079ec:	463a      	mov	r2, r7
 80079ee:	4628      	mov	r0, r5
 80079f0:	47b0      	blx	r6
 80079f2:	2800      	cmp	r0, #0
 80079f4:	dc08      	bgt.n	8007a08 <__sflush_r+0xfc>
 80079f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079fe:	81a3      	strh	r3, [r4, #12]
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a08:	4407      	add	r7, r0
 8007a0a:	eba8 0800 	sub.w	r8, r8, r0
 8007a0e:	e7e7      	b.n	80079e0 <__sflush_r+0xd4>
 8007a10:	dfbffffe 	.word	0xdfbffffe

08007a14 <_fflush_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	690b      	ldr	r3, [r1, #16]
 8007a18:	4605      	mov	r5, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	b913      	cbnz	r3, 8007a24 <_fflush_r+0x10>
 8007a1e:	2500      	movs	r5, #0
 8007a20:	4628      	mov	r0, r5
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	b118      	cbz	r0, 8007a2e <_fflush_r+0x1a>
 8007a26:	6a03      	ldr	r3, [r0, #32]
 8007a28:	b90b      	cbnz	r3, 8007a2e <_fflush_r+0x1a>
 8007a2a:	f7ff fd5d 	bl	80074e8 <__sinit>
 8007a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0f3      	beq.n	8007a1e <_fflush_r+0xa>
 8007a36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a38:	07d0      	lsls	r0, r2, #31
 8007a3a:	d404      	bmi.n	8007a46 <_fflush_r+0x32>
 8007a3c:	0599      	lsls	r1, r3, #22
 8007a3e:	d402      	bmi.n	8007a46 <_fflush_r+0x32>
 8007a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a42:	f7ff ff08 	bl	8007856 <__retarget_lock_acquire_recursive>
 8007a46:	4628      	mov	r0, r5
 8007a48:	4621      	mov	r1, r4
 8007a4a:	f7ff ff5f 	bl	800790c <__sflush_r>
 8007a4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a50:	07da      	lsls	r2, r3, #31
 8007a52:	4605      	mov	r5, r0
 8007a54:	d4e4      	bmi.n	8007a20 <_fflush_r+0xc>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	059b      	lsls	r3, r3, #22
 8007a5a:	d4e1      	bmi.n	8007a20 <_fflush_r+0xc>
 8007a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a5e:	f7ff fefb 	bl	8007858 <__retarget_lock_release_recursive>
 8007a62:	e7dd      	b.n	8007a20 <_fflush_r+0xc>

08007a64 <__swhatbuf_r>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	460c      	mov	r4, r1
 8007a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6c:	2900      	cmp	r1, #0
 8007a6e:	b096      	sub	sp, #88	@ 0x58
 8007a70:	4615      	mov	r5, r2
 8007a72:	461e      	mov	r6, r3
 8007a74:	da0d      	bge.n	8007a92 <__swhatbuf_r+0x2e>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a7c:	f04f 0100 	mov.w	r1, #0
 8007a80:	bf14      	ite	ne
 8007a82:	2340      	movne	r3, #64	@ 0x40
 8007a84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a88:	2000      	movs	r0, #0
 8007a8a:	6031      	str	r1, [r6, #0]
 8007a8c:	602b      	str	r3, [r5, #0]
 8007a8e:	b016      	add	sp, #88	@ 0x58
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	466a      	mov	r2, sp
 8007a94:	f000 f80c 	bl	8007ab0 <_fstat_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	dbec      	blt.n	8007a76 <__swhatbuf_r+0x12>
 8007a9c:	9901      	ldr	r1, [sp, #4]
 8007a9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007aa6:	4259      	negs	r1, r3
 8007aa8:	4159      	adcs	r1, r3
 8007aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007aae:	e7eb      	b.n	8007a88 <__swhatbuf_r+0x24>

08007ab0 <_fstat_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d07      	ldr	r5, [pc, #28]	@ (8007ad0 <_fstat_r+0x20>)
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	4608      	mov	r0, r1
 8007aba:	4611      	mov	r1, r2
 8007abc:	602b      	str	r3, [r5, #0]
 8007abe:	f7f9 fa73 	bl	8000fa8 <_fstat>
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	d102      	bne.n	8007acc <_fstat_r+0x1c>
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	b103      	cbz	r3, 8007acc <_fstat_r+0x1c>
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	bd38      	pop	{r3, r4, r5, pc}
 8007ace:	bf00      	nop
 8007ad0:	2000fb60 	.word	0x2000fb60

08007ad4 <_init>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	bf00      	nop
 8007ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ada:	bc08      	pop	{r3}
 8007adc:	469e      	mov	lr, r3
 8007ade:	4770      	bx	lr

08007ae0 <_fini>:
 8007ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae2:	bf00      	nop
 8007ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae6:	bc08      	pop	{r3}
 8007ae8:	469e      	mov	lr, r3
 8007aea:	4770      	bx	lr
